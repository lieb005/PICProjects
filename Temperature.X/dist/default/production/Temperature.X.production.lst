

Microchip Technology PIC18 LITE Macro Assembler V1.32 build 58300 
                                                                                               Mon Aug 18 03:59:12 2014

Microchip Technology Omniscient Code Generator (Lite mode) build 58300
     1                           	processor	18F2550
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataBANK1,global,class=CODE,delta=1
     6                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1
     7                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     9                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
    10                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    12                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    13                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    14                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    15                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    16                           	psect	text0,global,reloc=2,class=CODE,delta=1
    17                           	psect	text1,global,reloc=2,class=CODE,delta=1
    18                           	psect	text2,global,reloc=2,class=CODE,delta=1
    19                           	psect	text3,global,reloc=2,class=CODE,delta=1
    20                           	psect	text4,global,reloc=2,class=CODE,delta=1
    21                           	psect	text5,global,reloc=2,class=CODE,delta=1
    22                           	psect	text6,global,reloc=2,class=CODE,delta=1
    23                           	psect	text7,global,reloc=2,class=CODE,delta=1
    24                           	psect	text8,global,reloc=2,class=CODE,delta=1
    25                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    26                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    27                           	psect	text10,global,reloc=2,class=CODE,delta=1
    28                           	psect	text11,global,reloc=2,class=CODE,delta=1
    29                           	psect	text12,global,reloc=2,class=CODE,delta=1
    30                           	psect	text13,global,reloc=2,class=CODE,delta=1
    31                           	psect	text14,global,reloc=2,class=CODE,delta=1
    32                           	psect	text15,global,reloc=2,class=CODE,delta=1
    33                           	psect	text16,global,reloc=2,class=CODE,delta=1
    34                           	psect	text17,global,reloc=2,class=CODE,delta=1
    35                           	psect	text18,global,reloc=2,class=CODE,delta=1
    36                           	psect	text19,global,reloc=2,class=CODE,delta=1
    37                           	psect	text20,global,reloc=2,class=CODE,delta=1
    38                           	psect	text21,global,reloc=2,class=CODE,delta=1
    39                           	psect	text22,global,reloc=2,class=CODE,delta=1
    40                           	psect	text23,global,reloc=2,class=CODE,delta=1
    41                           	psect	text24,global,reloc=2,class=CODE,delta=1
    42                           	psect	text25,global,reloc=2,class=CODE,delta=1
    43                           	psect	text26,global,reloc=2,class=CODE,delta=1
    44                           	psect	text27,global,reloc=2,class=CODE,delta=1
    45                           	psect	text28,global,reloc=2,class=CODE,delta=1
    46                           	psect	text29,global,reloc=2,class=CODE,delta=1
    47                           	psect	text30,global,reloc=2,class=CODE,delta=1
    48                           	psect	text31,global,reloc=2,class=CODE,delta=1
    49                           	psect	text32,global,reloc=2,class=CODE,delta=1
    50                           	psect	text33,global,reloc=2,class=CODE,delta=1
    51                           	psect	text34,global,reloc=2,class=CODE,delta=1
    52                           	psect	text35,global,reloc=2,class=CODE,delta=1
    53                           	psect	text36,global,reloc=2,class=CODE,delta=1
    54                           	psect	text37,global,reloc=2,class=CODE,delta=1
    55                           	psect	text38,global,reloc=2,class=CODE,delta=1
    56                           	psect	text39,global,reloc=2,class=CODE,delta=1
    57                           	psect	text40,global,reloc=2,class=CODE,delta=1
    58                           	psect	text41,global,reloc=2,class=CODE,delta=1
    59                           	psect	text42,global,reloc=2,class=CODE,delta=1
    60                           	psect	text43,global,reloc=2,class=CODE,delta=1
    61                           	psect	text44,global,reloc=2,class=CODE,delta=1
    62                           	psect	text45,global,reloc=2,class=CODE,delta=1
    63                           	psect	text46,global,reloc=2,class=CODE,delta=1
    64                           	psect	text47,global,reloc=2,class=CODE,delta=1
    65                           	psect	text48,global,reloc=2,class=CODE,delta=1
    66                           	psect	text49,global,reloc=2,class=CODE,delta=1
    67                           	psect	text50,global,reloc=2,class=CODE,delta=1
    68                           	psect	text51,global,reloc=2,class=CODE,delta=1
    69                           	psect	text52,global,reloc=2,class=CODE,delta=1
    70                           	psect	text53,global,reloc=2,class=CODE,delta=1
    71                           	psect	text54,global,reloc=2,class=CODE,delta=1
    72                           	psect	text55,global,reloc=2,class=CODE,delta=1
    73                           	psect	text56,global,reloc=2,class=CODE,delta=1
    74                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    75                           	psect	text57,global,reloc=2,class=CODE,delta=1
    76                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    77  0000                     
    78                           	psect	idataBANK1
    79  004644                     __pidataBANK1:
    80                           	opt stack 0
    81                           
    82                           ;initializer for writeLong@F5131
    83  004644  30                 	db	48
    84  004645  30                 	db	48
    85  004646  30                 	db	48
    86  004647  30                 	db	48
    87  004648  30                 	db	48
    88  004649  30                 	db	48
    89  00464A  30                 	db	48
    90  00464B  30                 	db	48
    91  00464C  00                 	db	0
    92  00464D  00                 	db	0
    93  00464E  00                 	db	0
    94  00464F  00                 	db	0
    95  004650  00                 	db	0
    96  004651  00                 	db	0
    97  004652  00                 	db	0
    98                           
    99                           ;initializer for _oldTemps
   100  004653  00                 	db	0
   101  004654  C8                 	db	200
   102  004655  41                 	db	65
   103  004656  00                 	db	0
   104  004657  C8                 	db	200
   105  004658  41                 	db	65
   106  004659  00                 	db	0
   107  00465A  C8                 	db	200
   108  00465B  41                 	db	65
   109  00465C  00                 	db	0
   110  00465D  C8                 	db	200
   111  00465E  41                 	db	65
   112                           
   113                           	psect	mediumconst
   114  007EB4                     __pmediumconst:
   115                           	opt stack 0
   116  007EB4  00                 	db	0
   117  007EB5                     _lcd_font:
   118                           	opt stack 0
   119  007EB5  3F                 	db	63
   120  007EB6  06                 	db	6
   121  007EB7  5B                 	db	91
   122  007EB8  4F                 	db	79
   123  007EB9  66                 	db	102
   124  007EBA  6D                 	db	109
   125  007EBB  7C                 	db	124
   126  007EBC  27                 	db	39
   127  007EBD  7F                 	db	127
   128  007EBE  67                 	db	103
   129  007EBF  00                 	db	0
   130  007EC0  00                 	db	0
   131  007EC1  31                 	db	49
   132  007EC2  48                 	db	72
   133  007EC3  0E                 	db	14
   134  007EC4  53                 	db	83
   135  007EC5  00                 	db	0
   136  007EC6  77                 	db	119
   137  007EC7  7C                 	db	124
   138  007EC8  58                 	db	88
   139  007EC9  5E                 	db	94
   140  007ECA  79                 	db	121
   141  007ECB  71                 	db	113
   142  007ECC  3D                 	db	61
   143  007ECD  74                 	db	116
   144  007ECE  10                 	db	16
   145  007ECF  1E                 	db	30
   146  007ED0  68                 	db	104
   147  007ED1  38                 	db	56
   148  007ED2  37                 	db	55
   149  007ED3  54                 	db	84
   150  007ED4  5C                 	db	92
   151  007ED5  73                 	db	115
   152  007ED6  67                 	db	103
   153  007ED7  50                 	db	80
   154  007ED8  2D                 	db	45
   155  007ED9  78                 	db	120
   156  007EDA  1C                 	db	28
   157  007EDB  3C                 	db	60
   158  007EDC  7E                 	db	126
   159  007EDD  76                 	db	118
   160  007EDE  6E                 	db	110
   161  007EDF  1B                 	db	27
   162  007EE0                     __end_of_lcd_font:
   163                           	opt stack 0
   164  007EE0                     _dpowers:
   165                           	opt stack 0
   166  007EE0  0001               	dw	1
   167  007EE2  0000               	dw	0
   168  007EE4  000A               	dw	10
   169  007EE6  0000               	dw	0
   170  007EE8  0064               	dw	100
   171  007EEA  0000               	dw	0
   172  007EEC  03E8               	dw	1000
   173  007EEE  0000               	dw	0
   174  007EF0  2710               	dw	10000
   175  007EF2  0000               	dw	0
   176  007EF4  86A0               	dw	34464
   177  007EF6  0001               	dw	1
   178  007EF8  4240               	dw	16960
   179  007EFA  000F               	dw	15
   180  007EFC  9680               	dw	38528
   181  007EFE  0098               	dw	152
   182  007F00  E100               	dw	57600
   183  007F02  05F5               	dw	1525
   184  007F04  CA00               	dw	51712
   185  007F06  3B9A               	dw	15258
   186  007F08                     __end_of_dpowers:
   187                           	opt stack 0
   188  007F08                     _pow10:
   189                           	opt stack 0
   190  007F08  0001               	dw	1
   191  007F0A  0000               	dw	0
   192  007F0C  000A               	dw	10
   193  007F0E  0000               	dw	0
   194  007F10  0064               	dw	100
   195  007F12  0000               	dw	0
   196  007F14  03E8               	dw	1000
   197  007F16  0000               	dw	0
   198  007F18  2710               	dw	10000
   199  007F1A  0000               	dw	0
   200  007F1C  86A0               	dw	34464
   201  007F1E  0001               	dw	1
   202  007F20  4240               	dw	16960
   203  007F22  000F               	dw	15
   204  007F24  9680               	dw	38528
   205  007F26  0098               	dw	152
   206  007F28  E100               	dw	57600
   207  007F2A  05F5               	dw	1525
   208  007F2C  CA00               	dw	51712
   209  007F2E  3B9A               	dw	15258
   210  007F30                     __end_of_pow10:
   211                           	opt stack 0
   212  007F30                     __npowers_:
   213                           	opt stack 0
   214  007F30  00                 	db	0
   215  007F31  80                 	db	128
   216  007F32  3F                 	db	63
   217  007F33  CD                 	db	205
   218  007F34  CC                 	db	204
   219  007F35  3D                 	db	61
   220  007F36  D7                 	db	215
   221  007F37  23                 	db	35
   222  007F38  3C                 	db	60
   223  007F39  12                 	db	18
   224  007F3A  83                 	db	131
   225  007F3B  3A                 	db	58
   226  007F3C  B7                 	db	183
   227  007F3D  D1                 	db	209
   228  007F3E  38                 	db	56
   229  007F3F  C6                 	db	198
   230  007F40  27                 	db	39
   231  007F41  37                 	db	55
   232  007F42  38                 	db	56
   233  007F43  86                 	db	134
   234  007F44  35                 	db	53
   235  007F45  C0                 	db	192
   236  007F46  D6                 	db	214
   237  007F47  33                 	db	51
   238  007F48  CC                 	db	204
   239  007F49  2B                 	db	43
   240  007F4A  32                 	db	50
   241  007F4B  70                 	db	112
   242  007F4C  89                 	db	137
   243  007F4D  30                 	db	48
   244  007F4E  E7                 	db	231
   245  007F4F  DB                 	db	219
   246  007F50  2E                 	db	46
   247  007F51  E5                 	db	229
   248  007F52  3C                 	db	60
   249  007F53  1E                 	db	30
   250  007F54  42                 	db	66
   251  007F55  A2                 	db	162
   252  007F56  0D                 	db	13
   253  007F57                     __end_of__npowers_:
   254                           	opt stack 0
   255  007F57                     __powers_:
   256                           	opt stack 0
   257  007F57  00                 	db	0
   258  007F58  80                 	db	128
   259  007F59  3F                 	db	63
   260  007F5A  00                 	db	0
   261  007F5B  20                 	db	32
   262  007F5C  41                 	db	65
   263  007F5D  00                 	db	0
   264  007F5E  C8                 	db	200
   265  007F5F  42                 	db	66
   266  007F60  00                 	db	0
   267  007F61  7A                 	db	122
   268  007F62  44                 	db	68
   269  007F63  40                 	db	64
   270  007F64  1C                 	db	28
   271  007F65  46                 	db	70
   272  007F66  50                 	db	80
   273  007F67  C3                 	db	195
   274  007F68  47                 	db	71
   275  007F69  24                 	db	36
   276  007F6A  74                 	db	116
   277  007F6B  49                 	db	73
   278  007F6C  97                 	db	151
   279  007F6D  18                 	db	24
   280  007F6E  4B                 	db	75
   281  007F6F  BC                 	db	188
   282  007F70  BE                 	db	190
   283  007F71  4C                 	db	76
   284  007F72  6B                 	db	107
   285  007F73  6E                 	db	110
   286  007F74  4E                 	db	78
   287  007F75  03                 	db	3
   288  007F76  15                 	db	21
   289  007F77  50                 	db	80
   290  007F78  79                 	db	121
   291  007F79  AD                 	db	173
   292  007F7A  60                 	db	96
   293  007F7B  F3                 	db	243
   294  007F7C  49                 	db	73
   295  007F7D  71                 	db	113
   296  007F7E                     __end_of__powers_:
   297                           	opt stack 0
   298  007F7E                     _dow:
   299                           	opt stack 0
   300  007F7E  53                 	db	83
   301  007F7F  6F                 	db	111
   302  007F80  6E                 	db	110
   303  007F81  00                 	db	0
   304  007F82  4D                 	db	77
   305  007F83  6F                 	db	111
   306  007F84  6E                 	db	110
   307  007F85  00                 	db	0
   308  007F86  44                 	db	68
   309  007F87  65                 	db	101
   310  007F88  69                 	db	105
   311  007F89  00                 	db	0
   312  007F8A  4D                 	db	77
   313  007F8B  69                 	db	105
   314  007F8C  74                 	db	116
   315  007F8D  00                 	db	0
   316  007F8E  44                 	db	68
   317  007F8F  6F                 	db	111
   318  007F90  6E                 	db	110
   319  007F91  00                 	db	0
   320  007F92  46                 	db	70
   321  007F93  72                 	db	114
   322  007F94  69                 	db	105
   323  007F95  00                 	db	0
   324  007F96  53                 	db	83
   325  007F97  61                 	db	97
   326  007F98  6D                 	db	109
   327  007F99  00                 	db	0
   328  007F9A                     __end_of_dow:
   329                           	opt stack 0
   330  0000                     _ADRES	set	4035
   331  0000                     _TMR0	set	4054
   332  0000                     _TMR1	set	4046
   333  0000                     _ADCON0	set	4034
   334  0000                     _ADCON1	set	4033
   335  0000                     _ADCON2	set	4032
   336  0000                     _EEADR	set	4009
   337  0000                     _EECON1	set	4006
   338  0000                     _EECON2	set	4007
   339  0000                     _EEDATA	set	4008
   340  0000                     _LATA	set	3977
   341  0000                     _LATB	set	3978
   342  0000                     _LATC	set	3979
   343  0000                     _PORTB	set	3969
   344  0000                     _T0CON	set	4053
   345  0000                     _T1CON	set	4045
   346  0000                     _T2CON	set	4042
   347  0000                     _TMR2	set	4044
   348  0000                     _TRISA	set	3986
   349  0000                     _TRISB	set	3987
   350  0000                     _TRISC	set	3988
   351  0000                     _GIE	set	32663
   352  0000                     _GO	set	32273
   353  0000                     _IPEN	set	32391
   354  0000                     _LATA1	set	31817
   355  0000                     _LATA3	set	31819
   356  0000                     _LATA4	set	31820
   357  0000                     _LATA5	set	31821
   358  0000                     _LATC0	set	31832
   359  0000                     _LATC6	set	31838
   360  0000                     _LATC7	set	31839
   361  0000                     _PEIE	set	32662
   362  0000                     _RD	set	32048
   363  0000                     _TMR0IE	set	32661
   364  0000                     _TMR0IF	set	32658
   365  0000                     _TMR0ON	set	32431
   366  0000                     _TMR1IE	set	31976
   367  0000                     _TMR1IF	set	31984
   368  0000                     _TMR1ON	set	32360
   369  0000                     _TMR2IE	set	31977
   370  0000                     _TMR2IF	set	31985
   371  0000                     _TMR2ON	set	32338
   372  0000                     _TRISA0	set	31888
   373  0000                     _TRISA1	set	31889
   374  0000                     _TRISA2	set	31890
   375  0000                     _TRISA3	set	31891
   376  0000                     _TRISA4	set	31892
   377  0000                     _WR	set	32049
   378  0000                     _WREN	set	32050
   379  0000                     _nRBPU	set	32655
   380  007F9A                     __stringdata:
   381                           	opt stack 0
   382  007F9A                     STR_6:
   383  007F9A  20                 	db	32
   384  007F9B  20                 	db	32
   385  007F9C  25                 	db	37
   386  007F9D  30                 	db	48	;'0'
   387  007F9E  32                 	db	50	;'2'
   388  007F9F  64                 	db	100	;'d'
   389  007FA0  2E                 	db	46
   390  007FA1  25                 	db	37
   391  007FA2  30                 	db	48	;'0'
   392  007FA3  32                 	db	50	;'2'
   393  007FA4  64                 	db	100	;'d'
   394  007FA5  2E                 	db	46
   395  007FA6  25                 	db	37
   396  007FA7  30                 	db	48	;'0'
   397  007FA8  32                 	db	50	;'2'
   398  007FA9  64                 	db	100	;'d'
   399  007FAA  00                 	db	0
   400  007FAB                     STR_5:
   401  007FAB  25                 	db	37
   402  007FAC  30                 	db	48	;'0'
   403  007FAD  32                 	db	50	;'2'
   404  007FAE  64                 	db	100	;'d'
   405  007FAF  2D                 	db	45
   406  007FB0  25                 	db	37
   407  007FB1  30                 	db	48	;'0'
   408  007FB2  32                 	db	50	;'2'
   409  007FB3  64                 	db	100	;'d'
   410  007FB4  2D                 	db	45
   411  007FB5  25                 	db	37
   412  007FB6  30                 	db	48	;'0'
   413  007FB7  32                 	db	50	;'2'
   414  007FB8  64                 	db	100	;'d'
   415  007FB9  00                 	db	0
   416  007FBA                     STR_8:
   417  007FBA  25                 	db	37
   418  007FBB  63                 	db	99	;'c'
   419  007FBC  25                 	db	37
   420  007FBD  63                 	db	99	;'c'
   421  007FBE  20                 	db	32
   422  007FBF  25                 	db	37
   423  007FC0  30                 	db	48	;'0'
   424  007FC1  32                 	db	50	;'2'
   425  007FC2  64                 	db	100	;'d'
   426  007FC3  2E                 	db	46
   427  007FC4  25                 	db	37
   428  007FC5  30                 	db	48	;'0'
   429  007FC6  32                 	db	50	;'2'
   430  007FC7  64                 	db	100	;'d'
   431  007FC8  00                 	db	0
   432  007FC9                     STR_4:
   433  007FC9  25                 	db	37
   434  007FCA  73                 	db	115	;'s'
   435  007FCB  20                 	db	32
   436  007FCC  25                 	db	37
   437  007FCD  30                 	db	48	;'0'
   438  007FCE  32                 	db	50	;'2'
   439  007FCF  64                 	db	100	;'d'
   440  007FD0  2E                 	db	46
   441  007FD1  25                 	db	37
   442  007FD2  30                 	db	48	;'0'
   443  007FD3  32                 	db	50	;'2'
   444  007FD4  64                 	db	100	;'d'
   445  007FD5  00                 	db	0
   446  007FD6                     STR_19:
   447  007FD6  28                 	db	40
   448  007FD7  6E                 	db	110	;'n'
   449  007FD8  75                 	db	117	;'u'
   450  007FD9  6C                 	db	108	;'l'
   451  007FDA  6C                 	db	108	;'l'
   452  007FDB  29                 	db	41
   453  007FDC  00                 	db	0
   454  007FDD                     STR_14:
   455  007FDD  20                 	db	32
   456  007FDE  20                 	db	32
   457  007FDF  20                 	db	32
   458  007FE0  20                 	db	32
   459  007FE1  00                 	db	0
   460  007FE2                     STR_13:
   461  007FE2  25                 	db	37
   462  007FE3  63                 	db	99	;'c'
   463  007FE4  25                 	db	37
   464  007FE5  63                 	db	99	;'c'
   465  007FE6  00                 	db	0
   466  007FE7  25                 	db	37
   467  007FE8  2E                 	db	46
   468  007FE9  2A                 	db	42
   469  007FEA  66                 	db	102	;'f'
   470  007FEB  00                 	db	0
   471  007FEC  25                 	db	37
   472  007FED  2A                 	db	42
   473  007FEE  6C                 	db	108	;'l'
   474  007FEF  69                 	db	105	;'i'
   475  007FF0  00                 	db	0
   476  007FF1                     STR_18:
   477  007FF1  25                 	db	37
   478  007FF2  2A                 	db	42
   479  007FF3  66                 	db	102	;'f'
   480  007FF4  00                 	db	0
   481  007FF5                     STR_15:
   482  007FF5  45                 	db	69	;'E'
   483  007FF6  52                 	db	82	;'R'
   484  007FF7  52                 	db	82	;'R'
   485  007FF8  00                 	db	0
   486  007FF9                     STR_16:
   487  007FF9  2A                 	db	42
   488  007FFA  43                 	db	67	;'C'
   489  007FFB  00                 	db	0
   490  007FFC                     STR_17:
   491  007FFC  2A                 	db	42
   492  007FFD  46                 	db	70	;'F'
   493  007FFE  00                 	db	0
   494  007FFF                     __end_of__stringdata:
   495                           	opt stack 0
   496                           
   497                           ; #config settings
   498  007FFF  00                 	db	0	; dummy byte at the end
   499  0000                     
   500                           	psect	nvBANK0
   501  0000E5                     __pnvBANK0:
   502                           	opt stack 0
   503  0000E5                     _rtcMenu:
   504                           	opt stack 0
   505  0000E5                     	ds	5
   506                           
   507                           	psect	cinit
   508  004468                     __pcinit:
   509                           	opt stack 0
   510  004468                     start_initialization:
   511                           	opt stack 0
   512  004468                     __initialization:
   513                           	opt stack 0
   514                           
   515                           ; Clear objects allocated to BANK1 (47 bytes)
   516  004468  EE01  F000         	lfsr	0,__pbssBANK1
   517  00446C  0E2F               	movlw	47
   518  00446E                     clear_0:
   519  00446E  6AEE               	clrf	postinc0,c
   520  004470  06E8               	decf	wreg,f,c
   521  004472  E1FD               	bnz	clear_0
   522                           
   523                           ; Clear objects allocated to BANK0 (61 bytes)
   524  004474  EE00  F0A8         	lfsr	0,__pbssBANK0
   525  004478  0E3D               	movlw	61
   526  00447A                     clear_1:
   527  00447A  6AEE               	clrf	postinc0,c
   528  00447C  06E8               	decf	wreg,f,c
   529  00447E  E1FD               	bnz	clear_1
   530                           
   531                           ; Clear objects allocated to COMRAM (1 bytes)
   532  004480  6A5F               	clrf	__pbssCOMRAM& (0+255),c
   533                           
   534                           ; Initialize objects allocated to BANK1 (27 bytes)
   535                           ; load TBLPTR registers with __pidataBANK1
   536  004482  0E44               	movlw	low __pidataBANK1
   537  004484  6EF6               	movwf	tblptrl,c
   538  004486  0E46               	movlw	high __pidataBANK1
   539  004488  6EF7               	movwf	tblptrh,c
   540  00448A  0E00               	movlw	low (__pidataBANK1 shr (0+16))
   541  00448C  6EF8               	movwf	tblptru,c
   542  00448E  EE01  F02F         	lfsr	0,__pdataBANK1
   543  004492  EE10 F01B          	lfsr	1,27
   544  004496                     copy_data0:
   545  004496  0009               	tblrd		*+
   546  004498  CFF5 FFEE          	movff	tablat,postinc0
   547  00449C  50E5               	movf	postdec1,w,c
   548  00449E  50E1               	movf	fsr1l,w,c
   549  0044A0  E1FA               	bnz	copy_data0
   550  0044A2                     end_of_initialization:
   551                           	opt stack 0
   552  0044A2                     __end_of__initialization:
   553                           	opt stack 0
   554  0044A2  0E00               	movlw	low (__Lmediumconst shr (0+16))
   555  0044A4  6EF8               	movwf	tblptru,c
   556  0044A6  0100               	movlb	0
   557  0044A8  EFC6  F021         	goto	_main	;jump to C main() function
   558                           tblptru	equ	0xFF8
   559                           tblptrh	equ	0xFF7
   560                           tblptrl	equ	0xFF6
   561                           tablat	equ	0xFF5
   562                           postinc0	equ	0xFEE
   563                           wreg	equ	0xFE8
   564                           postdec1	equ	0xFE5
   565                           fsr1l	equ	0xFE1
   566                           
   567                           	psect	bssCOMRAM
   568  00005F                     __pbssCOMRAM:
   569                           	opt stack 0
   570  00005F                     _oldLATB:
   571                           	opt stack 0
   572  00005F                     	ds	1
   573                           tblptru	equ	0xFF8
   574                           tblptrh	equ	0xFF7
   575                           tblptrl	equ	0xFF6
   576                           tablat	equ	0xFF5
   577                           postinc0	equ	0xFEE
   578                           wreg	equ	0xFE8
   579                           postdec1	equ	0xFE5
   580                           fsr1l	equ	0xFE1
   581                           
   582                           	psect	bssBANK0
   583  0000A8                     __pbssBANK0:
   584                           	opt stack 0
   585  0000A8                     _date:
   586                           	opt stack 0
   587  0000A8                     	ds	9
   588  0000B1                     _tmr0BigCounts:
   589                           	opt stack 0
   590  0000B1                     	ds	4
   591  0000B5                     _waitcnt:
   592                           	opt stack 0
   593  0000B5                     	ds	4
   594  0000B9                     _temp:
   595                           	opt stack 0
   596  0000B9                     	ds	3
   597  0000BC                     _menu:
   598                           	opt stack 0
   599  0000BC                     	ds	2
   600  0000BE                     _rtc_big_ticks:
   601                           	opt stack 0
   602  0000BE                     	ds	2
   603  0000C0                     _rtc_small_ticks:
   604                           	opt stack 0
   605  0000C0                     	ds	2
   606  0000C2                     _tmr2_count:
   607                           	opt stack 0
   608  0000C2                     	ds	2
   609  0000C4                     printRTC@str:
   610                           	opt stack 0
   611  0000C4                     	ds	15
   612  0000D3                     _screen:
   613                           	opt stack 0
   614  0000D3                     	ds	13
   615  0000E0                     _tempMenu:
   616                           	opt stack 0
   617  0000E0                     	ds	5
   618                           tblptru	equ	0xFF8
   619                           tblptrh	equ	0xFF7
   620                           tblptrl	equ	0xFF6
   621                           tablat	equ	0xFF5
   622                           postinc0	equ	0xFEE
   623                           wreg	equ	0xFE8
   624                           postdec1	equ	0xFE5
   625                           fsr1l	equ	0xFE1
   626                           
   627                           	psect	bssBANK1
   628  000100                     __pbssBANK1:
   629                           	opt stack 0
   630  000100                     _waitCnt:
   631                           	opt stack 0
   632  000100                     	ds	32
   633  000120                     writeFloat@F5135:
   634                           	opt stack 0
   635  000120                     	ds	15
   636                           tblptru	equ	0xFF8
   637                           tblptrh	equ	0xFF7
   638                           tblptrl	equ	0xFF6
   639                           tablat	equ	0xFF5
   640                           postinc0	equ	0xFEE
   641                           wreg	equ	0xFE8
   642                           postdec1	equ	0xFE5
   643                           fsr1l	equ	0xFE1
   644                           
   645                           	psect	dataBANK1
   646  00012F                     __pdataBANK1:
   647                           	opt stack 0
   648  00012F                     writeLong@F5131:
   649                           	opt stack 0
   650  00012F                     	ds	15
   651  00013E                     _oldTemps:
   652                           	opt stack 0
   653  00013E                     	ds	12
   654                           tblptru	equ	0xFF8
   655                           tblptrh	equ	0xFF7
   656                           tblptrl	equ	0xFF6
   657                           tablat	equ	0xFF5
   658                           postinc0	equ	0xFEE
   659                           wreg	equ	0xFE8
   660                           postdec1	equ	0xFE5
   661                           fsr1l	equ	0xFE1
   662                           
   663                           	psect	cstackBANK1
   664  00014A                     __pcstackBANK1:
   665                           	opt stack 0
   666  00014A                     ??_loadTime:
   667  00014A                     setBrightness@bright:
   668                           	opt stack 0
   669  00014A                     setTest@state:
   670                           	opt stack 0
   671                           
   672                           ; 1 bytes @ 0x0
   673  00014A                     	ds	1
   674  00014B                     
   675                           ; 0 bytes @ 0x1
   676  00014B                     	ds	1
   677  00014C                     loadTime@cnt:
   678                           	opt stack 0
   679                           
   680                           ; 1 bytes @ 0x2
   681  00014C                     	ds	1
   682  00014D                     loadTime@newDate:
   683                           	opt stack 0
   684                           
   685                           ; 9 bytes @ 0x3
   686  00014D                     	ds	9
   687  000156                     loadTime@data:
   688                           	opt stack 0
   689                           
   690                           ; 1 bytes @ 0xC
   691  000156                     	ds	1
   692  000157                     
   693                           ; 2 bytes @ 0xD
   694  000157                     	ds	2
   695  000159                     
   696                           ; 3 bytes @ 0xF
   697  000159                     	ds	3
   698  00015C                     main@cnt:
   699                           	opt stack 0
   700                           
   701                           ; 4 bytes @ 0x12
   702  00015C                     	ds	4
   703                           tblptru	equ	0xFF8
   704                           tblptrh	equ	0xFF7
   705                           tblptrl	equ	0xFF6
   706                           tablat	equ	0xFF5
   707                           postinc0	equ	0xFEE
   708                           wreg	equ	0xFE8
   709                           postdec1	equ	0xFE5
   710                           fsr1l	equ	0xFE1
   711                           
   712                           	psect	cstackBANK0
   713  000060                     __pcstackBANK0:
   714                           	opt stack 0
   715  000060                     _sprintf$1314:
   716                           	opt stack 0
   717                           
   718                           ; 3 bytes @ 0x0
   719  000060                     	ds	3
   720  000063                     _sprintf$749:
   721                           	opt stack 0
   722                           
   723                           ; 4 bytes @ 0x3
   724  000063                     	ds	4
   725  000067                     sprintf@vd:
   726                           	opt stack 0
   727                           
   728                           ; 4 bytes @ 0x7
   729  000067                     	ds	4
   730  00006B                     sprintf@vd_751:
   731                           	opt stack 0
   732                           
   733                           ; 4 bytes @ 0xB
   734  00006B                     	ds	4
   735  00006F                     sprintf@integ:
   736                           	opt stack 0
   737                           
   738                           ; 3 bytes @ 0xF
   739  00006F                     	ds	3
   740  000072                     sprintf@ap:
   741                           	opt stack 0
   742                           
   743                           ; 2 bytes @ 0x12
   744  000072                     	ds	2
   745  000074                     sprintf@exp:
   746                           	opt stack 0
   747                           
   748                           ; 2 bytes @ 0x14
   749  000074                     	ds	2
   750  000076                     sprintf@flag:
   751                           	opt stack 0
   752                           
   753                           ; 2 bytes @ 0x16
   754  000076                     	ds	2
   755  000078                     sprintf@fval:
   756                           	opt stack 0
   757                           
   758                           ; 3 bytes @ 0x18
   759  000078                     	ds	3
   760  00007B                     sprintf@width:
   761                           	opt stack 0
   762                           
   763                           ; 2 bytes @ 0x1B
   764  00007B                     	ds	2
   765  00007D                     sprintf@prec:
   766                           	opt stack 0
   767                           
   768                           ; 2 bytes @ 0x1D
   769  00007D                     	ds	2
   770  00007F                     sprintf@c:
   771                           	opt stack 0
   772                           
   773                           ; 1 bytes @ 0x1F
   774  00007F                     	ds	1
   775  000080                     sprintf@_val:
   776                           	opt stack 0
   777                           
   778                           ; 4 bytes @ 0x20
   779  000080                     	ds	4
   780  000084                     printTemp@str:
   781                           	opt stack 0
   782                           
   783                           ; 15 bytes @ 0x24
   784  000084                     	ds	15
   785  000093                     _printTemp$1310:
   786                           	opt stack 0
   787                           
   788                           ; 4 bytes @ 0x33
   789  000093                     	ds	4
   790  000097                     printTemp@bits:
   791                           	opt stack 0
   792                           
   793                           ; 1 bytes @ 0x37
   794  000097                     	ds	1
   795  000098                     printTemp@units:
   796                           	opt stack 0
   797                           
   798                           ; 1 bytes @ 0x38
   799  000098                     	ds	1
   800  000099                     printTemp@digits:
   801                           	opt stack 0
   802                           
   803                           ; 1 bytes @ 0x39
   804  000099                     	ds	1
   805  00009A                     ??_isr:
   806                           
   807                           ; 0 bytes @ 0x3A
   808  00009A                     	ds	14
   809                           tblptru	equ	0xFF8
   810                           tblptrh	equ	0xFF7
   811                           tblptrl	equ	0xFF6
   812                           tablat	equ	0xFF5
   813                           postinc0	equ	0xFEE
   814                           wreg	equ	0xFE8
   815                           postdec1	equ	0xFE5
   816                           fsr1l	equ	0xFE1
   817                           
   818                           	psect	cstackCOMRAM
   819  000001                     __pcstackCOMRAM:
   820                           	opt stack 0
   821  000001                     ??_rotate:
   822  000001                     ??_isdigit:
   823  000001                     ??_getFontChar:
   824  000001                     ?___awmod:
   825                           	opt stack 0
   826  000001                     ?___lwmod:
   827                           	opt stack 0
   828  000001                     ?___ftpack:
   829                           	opt stack 0
   830  000001                     ?___ftneg:
   831                           	opt stack 0
   832  000001                     ?_hibit:
   833                           	opt stack 0
   834  000001                     ?_lowbit:
   835                           	opt stack 0
   836  000001                     ?__tdiv_to_l_:
   837                           	opt stack 0
   838  000001                     ?__div_to_l_:
   839                           	opt stack 0
   840  000001                     ?___lldiv:
   841                           	opt stack 0
   842  000001                     ___awmod@dividend:
   843                           	opt stack 0
   844  000001                     ___lwmod@dividend:
   845                           	opt stack 0
   846  000001                     __div_to_l_@f1:
   847                           	opt stack 0
   848  000001                     ___ftpack@arg:
   849                           	opt stack 0
   850  000001                     __tdiv_to_l_@f1:
   851                           	opt stack 0
   852  000001                     ___ftge@ff1:
   853                           	opt stack 0
   854  000001                     ___ftneg@f1:
   855                           	opt stack 0
   856  000001                     wait@count:
   857                           	opt stack 0
   858  000001                     countBits@num:
   859                           	opt stack 0
   860  000001                     hibit@x:
   861                           	opt stack 0
   862  000001                     lowbit@x:
   863                           	opt stack 0
   864  000001                     ___lldiv@dividend:
   865                           	opt stack 0
   866  000001                     saveTime@date:
   867                           	opt stack 0
   868                           
   869                           ; 9 bytes @ 0x0
   870  000001                     	ds	1
   871  000002                     _isdigit$1032:
   872                           	opt stack 0
   873                           
   874                           ; 1 bytes @ 0x1
   875  000002                     	ds	1
   876  000003                     isdigit@c:
   877                           	opt stack 0
   878  000003                     ___awmod@divisor:
   879                           	opt stack 0
   880  000003                     ___lwmod@divisor:
   881                           	opt stack 0
   882                           
   883                           ; 2 bytes @ 0x2
   884  000003                     	ds	1
   885  000004                     rotate@seg:
   886                           	opt stack 0
   887  000004                     ___ftpack@exp:
   888                           	opt stack 0
   889  000004                     __div_to_l_@f2:
   890                           	opt stack 0
   891  000004                     __tdiv_to_l_@f2:
   892                           	opt stack 0
   893  000004                     ___ftge@ff2:
   894                           	opt stack 0
   895                           
   896                           ; 3 bytes @ 0x3
   897  000004                     	ds	1
   898  000005                     ??_hibit:
   899  000005                     ??_lowbit:
   900  000005                     getFontChar@ch:
   901                           	opt stack 0
   902  000005                     rotate@ret:
   903                           	opt stack 0
   904  000005                     countBits@ret:
   905                           	opt stack 0
   906  000005                     ___awmod@counter:
   907                           	opt stack 0
   908  000005                     ___ftpack@sign:
   909                           	opt stack 0
   910  000005                     ___lwmod@counter:
   911                           	opt stack 0
   912  000005                     ___lldiv@divisor:
   913                           	opt stack 0
   914                           
   915                           ; 4 bytes @ 0x4
   916  000005                     	ds	1
   917  000006                     ??___ftpack:
   918  000006                     rotate@cnt:
   919                           	opt stack 0
   920  000006                     ___awmod@sign:
   921                           	opt stack 0
   922  000006                     daysOfMonth@year:
   923                           	opt stack 0
   924                           
   925                           ; 2 bytes @ 0x5
   926  000006                     	ds	1
   927  000007                     ??_advState:
   928  000007                     ??__tdiv_to_l_:
   929  000007                     ??__div_to_l_:
   930  000007                     ??___ftge:
   931  000007                     ?___awdiv:
   932                           	opt stack 0
   933  000007                     spi@data:
   934                           	opt stack 0
   935  000007                     ___awdiv@dividend:
   936                           	opt stack 0
   937                           
   938                           ; 2 bytes @ 0x6
   939  000007                     	ds	1
   940  000008                     ??_spi:
   941  000008                     ??_daysOfMonth:
   942  000008                     hibit@log2Val:
   943                           	opt stack 0
   944  000008                     lowbit@log2Val:
   945                           	opt stack 0
   946                           
   947                           ; 4 bytes @ 0x7
   948  000008                     	ds	1
   949  000009                     ?___lltoft:
   950                           	opt stack 0
   951  000009                     ?___lwtoft:
   952                           	opt stack 0
   953  000009                     ___awdiv@divisor:
   954                           	opt stack 0
   955  000009                     ___lwtoft@c:
   956                           	opt stack 0
   957  000009                     ___lldiv@quotient:
   958                           	opt stack 0
   959  000009                     ___lltoft@c:
   960                           	opt stack 0
   961                           
   962                           ; 4 bytes @ 0x8
   963  000009                     	ds	1
   964  00000A                     __tdiv_to_l_@quot:
   965                           	opt stack 0
   966                           
   967                           ; 4 bytes @ 0x9
   968  00000A                     	ds	1
   969  00000B                     saveTime@cnt:
   970                           	opt stack 0
   971  00000B                     daysOfMonth@month:
   972                           	opt stack 0
   973  00000B                     ___awdiv@counter:
   974                           	opt stack 0
   975  00000B                     spi@send:
   976                           	opt stack 0
   977  00000B                     __div_to_l_@quot:
   978                           	opt stack 0
   979                           
   980                           ; 4 bytes @ 0xA
   981  00000B                     	ds	1
   982  00000C                     ?_log2:
   983                           	opt stack 0
   984  00000C                     tick@val:
   985                           	opt stack 0
   986  00000C                     ___awdiv@sign:
   987                           	opt stack 0
   988  00000C                     log2@num:
   989                           	opt stack 0
   990                           
   991                           ; 4 bytes @ 0xB
   992  00000C                     	ds	1
   993  00000D                     ??___lltoft:
   994  00000D                     spi@addr:
   995                           	opt stack 0
   996  00000D                     tick@save_t:
   997                           	opt stack 0
   998  00000D                     ___lldiv@counter:
   999                           	opt stack 0
  1000  00000D                     ___awdiv@quotient:
  1001                           	opt stack 0
  1002                           
  1003                           ; 2 bytes @ 0xC
  1004  00000D                     	ds	1
  1005  00000E                     ?___llmod:
  1006                           	opt stack 0
  1007  00000E                     spi@cnt:
  1008                           	opt stack 0
  1009  00000E                     tick@ret:
  1010                           	opt stack 0
  1011  00000E                     __tdiv_to_l_@cntr:
  1012                           	opt stack 0
  1013  00000E                     ___llmod@dividend:
  1014                           	opt stack 0
  1015                           
  1016                           ; 4 bytes @ 0xD
  1017  00000E                     	ds	1
  1018  00000F                     ?___wmul:
  1019                           	opt stack 0
  1020  00000F                     __div_to_l_@cntr:
  1021                           	opt stack 0
  1022  00000F                     __tdiv_to_l_@exp1:
  1023                           	opt stack 0
  1024  00000F                     ___wmul@multiplier:
  1025                           	opt stack 0
  1026                           
  1027                           ; 2 bytes @ 0xE
  1028  00000F                     	ds	1
  1029  000010                     __div_to_l_@exp1:
  1030                           	opt stack 0
  1031  000010                     log2@log2Val:
  1032                           	opt stack 0
  1033                           
  1034                           ; 4 bytes @ 0xF
  1035  000010                     	ds	1
  1036  000011                     ___lltoft@exp:
  1037                           	opt stack 0
  1038  000011                     ___wmul@multiplicand:
  1039                           	opt stack 0
  1040                           
  1041                           ; 2 bytes @ 0x10
  1042  000011                     	ds	1
  1043  000012                     ___llmod@divisor:
  1044                           	opt stack 0
  1045                           
  1046                           ; 4 bytes @ 0x11
  1047  000012                     	ds	1
  1048  000013                     ___wmul@product:
  1049                           	opt stack 0
  1050                           
  1051                           ; 2 bytes @ 0x12
  1052  000013                     	ds	1
  1053  000014                     writeDigit@segs:
  1054                           	opt stack 0
  1055                           
  1056                           ; 1 bytes @ 0x13
  1057  000014                     	ds	1
  1058  000015                     ??_writeDigit:
  1059  000015                     ?___ftmul:
  1060                           	opt stack 0
  1061  000015                     writeChar@ch:
  1062                           	opt stack 0
  1063  000015                     ___ftmul@f1:
  1064                           	opt stack 0
  1065                           
  1066                           ; 3 bytes @ 0x14
  1067  000015                     	ds	1
  1068  000016                     ??_writeChar:
  1069  000016                     ___llmod@counter:
  1070                           	opt stack 0
  1071                           
  1072                           ; 1 bytes @ 0x15
  1073  000016                     	ds	1
  1074  000017                     dayOfWeek@month:
  1075                           	opt stack 0
  1076                           
  1077                           ; 1 bytes @ 0x16
  1078  000017                     	ds	1
  1079  000018                     dayOfWeek@day:
  1080                           	opt stack 0
  1081  000018                     ___ftmul@f2:
  1082                           	opt stack 0
  1083                           
  1084                           ; 3 bytes @ 0x17
  1085  000018                     	ds	1
  1086  000019                     ??_dayOfWeek:
  1087  000019                     writeDigit@digit:
  1088                           	opt stack 0
  1089                           
  1090                           ; 1 bytes @ 0x18
  1091  000019                     	ds	1
  1092  00001A                     writeDigit@dig:
  1093                           	opt stack 0
  1094  00001A                     writeChar@dig:
  1095                           	opt stack 0
  1096                           
  1097                           ; 1 bytes @ 0x19
  1098  00001A                     	ds	1
  1099  00001B                     ??___ftmul:
  1100  00001B                     writeDigit@cnt:
  1101                           	opt stack 0
  1102  00001B                     writeChar@digit:
  1103                           	opt stack 0
  1104                           
  1105                           ; 1 bytes @ 0x1A
  1106  00001B                     	ds	1
  1107  00001C                     ??_update:
  1108  00001C                     writeString@string:
  1109                           	opt stack 0
  1110                           
  1111                           ; 2 bytes @ 0x1B
  1112  00001C                     	ds	1
  1113  00001D                     dayOfWeek@year:
  1114                           	opt stack 0
  1115                           
  1116                           ; 1 bytes @ 0x1C
  1117  00001D                     	ds	1
  1118  00001E                     ??_writeString:
  1119  00001E                     ___ftmul@exp:
  1120                           	opt stack 0
  1121  00001E                     dayOfWeek@tmp:
  1122                           	opt stack 0
  1123                           
  1124                           ; 4 bytes @ 0x1D
  1125  00001E                     	ds	1
  1126  00001F                     ___ftmul@f3_as_product:
  1127                           	opt stack 0
  1128                           
  1129                           ; 3 bytes @ 0x1E
  1130  00001F                     	ds	2
  1131  000021                     update@cnt:
  1132                           	opt stack 0
  1133                           
  1134                           ; 1 bytes @ 0x20
  1135  000021                     	ds	1
  1136  000022                     ??_checkDST:
  1137  000022                     writeString@bits:
  1138                           	opt stack 0
  1139  000022                     ___ftmul@cntr:
  1140                           	opt stack 0
  1141                           
  1142                           ; 1 bytes @ 0x21
  1143  000022                     	ds	1
  1144  000023                     writeString@digits:
  1145                           	opt stack 0
  1146  000023                     ___ftmul@sign:
  1147                           	opt stack 0
  1148                           
  1149                           ; 1 bytes @ 0x22
  1150  000023                     	ds	1
  1151  000024                     ?___ftdiv:
  1152                           	opt stack 0
  1153  000024                     ?_fround:
  1154                           	opt stack 0
  1155  000024                     ?_scale:
  1156                           	opt stack 0
  1157  000024                     ?___fttol:
  1158                           	opt stack 0
  1159  000024                     writeString@i:
  1160                           	opt stack 0
  1161  000024                     ___ftdiv@f1:
  1162                           	opt stack 0
  1163  000024                     ___fttol@f1:
  1164                           	opt stack 0
  1165                           
  1166                           ; 3 bytes @ 0x23
  1167  000024                     	ds	1
  1168  000025                     writeString@cnt:
  1169                           	opt stack 0
  1170                           
  1171                           ; 1 bytes @ 0x24
  1172  000025                     	ds	1
  1173  000026                     ??_advMenu:
  1174  000026                     
  1175                           ; 0 bytes @ 0x25
  1176  000026                     	ds	1
  1177  000027                     ___ftdiv@f2:
  1178                           	opt stack 0
  1179  000027                     _fround$1312:
  1180                           	opt stack 0
  1181  000027                     _scale$1313:
  1182                           	opt stack 0
  1183                           
  1184                           ; 3 bytes @ 0x26
  1185  000027                     	ds	1
  1186  000028                     ??_buttons:
  1187  000028                     ??___fttol:
  1188  000028                     _checkDST$309:
  1189                           	opt stack 0
  1190                           
  1191                           ; 1 bytes @ 0x27
  1192  000028                     	ds	2
  1193  00002A                     ??___ftdiv:
  1194  00002A                     scale@scl:
  1195                           	opt stack 0
  1196  00002A                     _fround$1311:
  1197                           	opt stack 0
  1198                           
  1199                           ; 3 bytes @ 0x29
  1200  00002A                     	ds	3
  1201  00002D                     fround@prec:
  1202                           	opt stack 0
  1203  00002D                     ___ftdiv@cntr:
  1204                           	opt stack 0
  1205  00002D                     ___fttol@sign1:
  1206                           	opt stack 0
  1207                           
  1208                           ; 1 bytes @ 0x2C
  1209  00002D                     	ds	1
  1210  00002E                     ___ftdiv@f3:
  1211                           	opt stack 0
  1212  00002E                     ___fttol@lval:
  1213                           	opt stack 0
  1214                           
  1215                           ; 4 bytes @ 0x2D
  1216  00002E                     	ds	3
  1217  000031                     ___ftdiv@exp:
  1218                           	opt stack 0
  1219                           
  1220                           ; 1 bytes @ 0x30
  1221  000031                     	ds	1
  1222  000032                     ___ftdiv@sign:
  1223                           	opt stack 0
  1224  000032                     ___fttol@exp1:
  1225                           	opt stack 0
  1226                           
  1227                           ; 1 bytes @ 0x31
  1228  000032                     	ds	1
  1229  000033                     ?___ftadd:
  1230                           	opt stack 0
  1231  000033                     ?___altoft:
  1232                           	opt stack 0
  1233  000033                     ___ftadd@f1:
  1234                           	opt stack 0
  1235  000033                     ___altoft@c:
  1236                           	opt stack 0
  1237                           
  1238                           ; 4 bytes @ 0x32
  1239  000033                     	ds	3
  1240  000036                     ___ftadd@f2:
  1241                           	opt stack 0
  1242                           
  1243                           ; 3 bytes @ 0x35
  1244  000036                     	ds	1
  1245  000037                     ??___altoft:
  1246                           
  1247                           ; 0 bytes @ 0x36
  1248  000037                     	ds	2
  1249  000039                     ??___ftadd:
  1250                           
  1251                           ; 0 bytes @ 0x38
  1252  000039                     	ds	2
  1253  00003B                     ___altoft@exp:
  1254                           	opt stack 0
  1255                           
  1256                           ; 1 bytes @ 0x3A
  1257  00003B                     	ds	1
  1258  00003C                     ___altoft@sign:
  1259                           	opt stack 0
  1260  00003C                     ___ftadd@sign:
  1261                           	opt stack 0
  1262                           
  1263                           ; 1 bytes @ 0x3B
  1264  00003C                     	ds	1
  1265  00003D                     ___ftadd@exp2:
  1266                           	opt stack 0
  1267                           
  1268                           ; 1 bytes @ 0x3C
  1269  00003D                     	ds	1
  1270  00003E                     ___ftadd@exp1:
  1271                           	opt stack 0
  1272                           
  1273                           ; 1 bytes @ 0x3D
  1274  00003E                     	ds	1
  1275  00003F                     ?___ftsub:
  1276                           	opt stack 0
  1277  00003F                     ___ftsub@f1:
  1278                           	opt stack 0
  1279  00003F                     getTemp@oldTempsTemp:
  1280                           	opt stack 0
  1281                           
  1282                           ; 9 bytes @ 0x3E
  1283  00003F                     	ds	3
  1284  000042                     ___ftsub@f2:
  1285                           	opt stack 0
  1286                           
  1287                           ; 3 bytes @ 0x41
  1288  000042                     	ds	3
  1289  000045                     ?_sprintf:
  1290                           	opt stack 0
  1291  000045                     sprintf@sp:
  1292                           	opt stack 0
  1293                           
  1294                           ; 2 bytes @ 0x44
  1295  000045                     	ds	2
  1296  000047                     sprintf@f:
  1297                           	opt stack 0
  1298                           
  1299                           ; 2 bytes @ 0x46
  1300  000047                     	ds	1
  1301  000048                     _getTemp$1309:
  1302                           	opt stack 0
  1303                           
  1304                           ; 3 bytes @ 0x47
  1305  000048                     	ds	3
  1306  00004B                     getTemp@total:
  1307                           	opt stack 0
  1308                           
  1309                           ; 3 bytes @ 0x4A
  1310  00004B                     	ds	3
  1311  00004E                     _getTemp$1307:
  1312                           	opt stack 0
  1313                           
  1314                           ; 3 bytes @ 0x4D
  1315  00004E                     	ds	3
  1316  000051                     ??_sprintf:
  1317  000051                     _getTemp$1308:
  1318                           	opt stack 0
  1319                           
  1320                           ; 3 bytes @ 0x50
  1321  000051                     	ds	3
  1322  000054                     getTemp@tmp:
  1323                           	opt stack 0
  1324                           
  1325                           ; 3 bytes @ 0x53
  1326  000054                     	ds	3
  1327  000057                     ??_printRTC:
  1328  000057                     ??_printTemp:
  1329  000057                     getTemp@cnt:
  1330                           	opt stack 0
  1331                           
  1332                           ; 1 bytes @ 0x56
  1333  000057                     	ds	4
  1334  00005B                     printRTC@bits:
  1335                           	opt stack 0
  1336                           
  1337                           ; 1 bytes @ 0x5A
  1338  00005B                     	ds	1
  1339  00005C                     printRTC@cnt:
  1340                           	opt stack 0
  1341                           
  1342                           ; 1 bytes @ 0x5B
  1343  00005C                     	ds	1
  1344  00005D                     printRTC@digits:
  1345                           	opt stack 0
  1346                           
  1347                           ; 1 bytes @ 0x5C
  1348  00005D                     	ds	1
  1349  00005E                     printRTC@i:
  1350                           	opt stack 0
  1351                           
  1352                           ; 1 bytes @ 0x5D
  1353  00005E                     	ds	1
  1354                           tblptru	equ	0xFF8
  1355                           tblptrh	equ	0xFF7
  1356                           tblptrl	equ	0xFF6
  1357                           tablat	equ	0xFF5
  1358                           postinc0	equ	0xFEE
  1359                           wreg	equ	0xFE8
  1360                           postdec1	equ	0xFE5
  1361                           fsr1l	equ	0xFE1
  1362                           
  1363 ;;
  1364 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1365 ;;
  1366 ;; *************** function _main *****************
  1367 ;; Defined at:
  1368 ;;		line 51 in file "temp-clock_main.c"
  1369 ;; Parameters:    Size  Location     Type
  1370 ;;  argc            2   13[BANK1 ] int 
  1371 ;;  argv            3   15[BANK1 ] PTR PTR unsigned char 
  1372 ;; Auto vars:     Size  Location     Type
  1373 ;;  cnt             4   18[BANK1 ] unsigned long 
  1374 ;; Return value:  Size  Location     Type
  1375 ;;                  2   13[BANK1 ] int 
  1376 ;; Registers used:
  1377 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  1378 ;; Tracked objects:
  1379 ;;		On entry : 0/0
  1380 ;;		On exit  : 0/0
  1381 ;;		Unchanged: 0/0
  1382 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1383 ;;      Params:         0       0       5       0       0       0       0       0       0
  1384 ;;      Locals:         0       0       4       0       0       0       0       0       0
  1385 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1386 ;;      Totals:         0       0       9       0       0       0       0       0       0
  1387 ;;Total ram usage:        9 bytes
  1388 ;; Hardware stack levels required when called:   10
  1389 ;; This function calls:
  1390 ;;		_setup
  1391 ;; This function is called by:
  1392 ;;		Startup code after reset
  1393 ;; This function uses a non-reentrant model
  1394 ;;
  1395                           
  1396                           	psect	text0
  1397  00438C                     __ptext0:
  1398                           	opt stack 0
  1399  00438C                     _main:
  1400                           	opt stack 21
  1401                           
  1402                           ;temp-clock_main.c: 53: setup();
  1403                           
  1404                           ;incstack = 0
  1405  00438C  EC3C  F01F         	call	_setup	;wreg free
  1406  004390                     
  1407                           ;temp-clock_main.c: 54: uint32_t cnt = 0;
  1408  004390  0E00               	movlw	0
  1409  004392  0101               	movlb	1	; () banked
  1410  004394  6F5C               	movwf	main@cnt& (0+255),b
  1411  004396  0E00               	movlw	0
  1412  004398  0101               	movlb	1	; () banked
  1413  00439A  6F5D               	movwf	(main@cnt+1)& (0+255),b
  1414  00439C  0E00               	movlw	0
  1415  00439E  0101               	movlb	1	; () banked
  1416  0043A0  6F5E               	movwf	(main@cnt+2)& (0+255),b
  1417  0043A2  0E00               	movlw	0
  1418  0043A4  0101               	movlb	1	; () banked
  1419  0043A6  6F5F               	movwf	(main@cnt+3)& (0+255),b
  1420  0043A8                     l5766:
  1421                           
  1422                           ; BSR set to: 1
  1423                           ;temp-clock_main.c: 56: {
  1424                           ;temp-clock_main.c: 57: if (cnt++ > 20L)
  1425  0043A8  0E01               	movlw	1
  1426  0043AA  0101               	movlb	1	; () banked
  1427  0043AC  275C               	addwf	main@cnt& (0+255),f,b
  1428  0043AE  0E00               	movlw	0
  1429  0043B0  0101               	movlb	1	; () banked
  1430  0043B2  235D               	addwfc	(main@cnt+1)& (0+255),f,b
  1431  0043B4  0101               	movlb	1	; () banked
  1432  0043B6  235E               	addwfc	(main@cnt+2)& (0+255),f,b
  1433  0043B8  0101               	movlb	1	; () banked
  1434  0043BA  235F               	addwfc	(main@cnt+3)& (0+255),f,b
  1435  0043BC  0E16               	movlw	22
  1436  0043BE  0101               	movlb	1	; () banked
  1437  0043C0  5D5C               	subwf	main@cnt& (0+255),w,b
  1438  0043C2  0E00               	movlw	0
  1439  0043C4  0101               	movlb	1	; () banked
  1440  0043C6  595D               	subwfb	(main@cnt+1)& (0+255),w,b
  1441  0043C8  0E00               	movlw	0
  1442  0043CA  0101               	movlb	1	; () banked
  1443  0043CC  595E               	subwfb	(main@cnt+2)& (0+255),w,b
  1444  0043CE  0E00               	movlw	0
  1445  0043D0  0101               	movlb	1	; () banked
  1446  0043D2  595F               	subwfb	(main@cnt+3)& (0+255),w,b
  1447  0043D4  A0D8               	btfss	status,0,c
  1448  0043D6  D7E8               	goto	l5766
  1449  0043D8  D7DB               	goto	L1
  1450  0043DA                     __end_of_main:
  1451                           	opt stack 0
  1452                           tblptru	equ	0xFF8
  1453                           tblptrh	equ	0xFF7
  1454                           tblptrl	equ	0xFF6
  1455                           tablat	equ	0xFF5
  1456                           postinc0	equ	0xFEE
  1457                           wreg	equ	0xFE8
  1458                           postdec1	equ	0xFE5
  1459                           fsr1l	equ	0xFE1
  1460                           status	equ	0xFD8
  1461                           
  1462 ;; *************** function _setup *****************
  1463 ;; Defined at:
  1464 ;;		line 71 in file "temp-clock_main.c"
  1465 ;; Parameters:    Size  Location     Type
  1466 ;;		None
  1467 ;; Auto vars:     Size  Location     Type
  1468 ;;		None
  1469 ;; Return value:  Size  Location     Type
  1470 ;;		None               void
  1471 ;; Registers used:
  1472 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  1473 ;; Tracked objects:
  1474 ;;		On entry : 0/0
  1475 ;;		On exit  : 0/0
  1476 ;;		Unchanged: 0/0
  1477 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1478 ;;      Params:         0       0       0       0       0       0       0       0       0
  1479 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1480 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1481 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1482 ;;Total ram usage:        0 bytes
  1483 ;; Hardware stack levels used:    1
  1484 ;; Hardware stack levels required when called:    9
  1485 ;; This function calls:
  1486 ;;		_initRTC
  1487 ;;		_initTemp
  1488 ;;		_setupButtons
  1489 ;;		_startDisp
  1490 ;; This function is called by:
  1491 ;;		_main
  1492 ;; This function uses a non-reentrant model
  1493 ;;
  1494                           
  1495                           	psect	text1
  1496  003E78                     __ptext1:
  1497                           	opt stack 0
  1498  003E78                     _setup:
  1499                           	opt stack 21
  1500                           
  1501                           ;temp-clock_main.c: 74: TRISA = 0;
  1502                           
  1503                           ; BSR set to: 1
  1504                           ;incstack = 0
  1505  003E78  0E00               	movlw	0
  1506  003E7A  6E92               	movwf	3986,c	;volatile
  1507                           
  1508                           ;temp-clock_main.c: 75: TRISB = 0;
  1509  003E7C  0E00               	movlw	0
  1510  003E7E  6E93               	movwf	3987,c	;volatile
  1511                           
  1512                           ;temp-clock_main.c: 76: TRISC = 0;
  1513  003E80  0E00               	movlw	0
  1514  003E82  6E94               	movwf	3988,c	;volatile
  1515                           
  1516                           ;temp-clock_main.c: 77: LATA = 0;
  1517  003E84  0E00               	movlw	0
  1518  003E86  6E89               	movwf	3977,c	;volatile
  1519                           
  1520                           ;temp-clock_main.c: 78: LATB = 0;
  1521  003E88  0E00               	movlw	0
  1522  003E8A  6E8A               	movwf	3978,c	;volatile
  1523                           
  1524                           ;temp-clock_main.c: 83: LATA5 = 1;
  1525  003E8C  8A89               	bsf	3977,5,c	;volatile
  1526                           
  1527                           ;temp-clock_main.c: 88: GIE = 1;
  1528  003E8E  8EF2               	bsf	intcon,7,c	;volatile
  1529                           
  1530                           ;temp-clock_main.c: 89: PEIE = 1;
  1531  003E90  8CF2               	bsf	intcon,6,c	;volatile
  1532                           
  1533                           ;temp-clock_main.c: 90: IPEN = 0;
  1534  003E92  9ED0               	bcf	4048,7,c	;volatile
  1535                           
  1536                           ;temp-clock_main.c: 92: startDisp();
  1537  003E94  EC08  F020         	call	_startDisp	;wreg free
  1538                           
  1539                           ;temp-clock_main.c: 93: LATC0 = 1;
  1540  003E98  808B               	bsf	3979,0,c	;volatile
  1541                           
  1542                           ;temp-clock_main.c: 95: initRTC();
  1543  003E9A  EC9C  F021         	call	_initRTC	;wreg free
  1544                           
  1545                           ;temp-clock_main.c: 97: LATC0 = 0;
  1546  003E9E  908B               	bcf	3979,0,c	;volatile
  1547                           
  1548                           ;temp-clock_main.c: 99: initTemp();
  1549  003EA0  EC92  F022         	call	_initTemp	;wreg free
  1550                           
  1551                           ;temp-clock_main.c: 101: setupButtons();
  1552  003EA4  EC45  F023         	call	_setupButtons	;wreg free
  1553                           
  1554                           ;temp-clock_main.c: 106: menu = &rtcMenu;
  1555  003EA8  0100               	movlb	0	; () banked
  1556  003EAA  0E00               	movlw	high _rtcMenu
  1557  003EAC  0100               	movlb	0	; () banked
  1558  003EAE  6FBD               	movwf	(_menu+1)& (0+255),b
  1559  003EB0  0100               	movlb	0	; () banked
  1560  003EB2  0EE5               	movlw	low _rtcMenu
  1561  003EB4  0100               	movlb	0	; () banked
  1562  003EB6  6FBC               	movwf	_menu& (0+255),b
  1563                           
  1564                           ; BSR set to: 0
  1565                           ;temp-clock_main.c: 110: LATA5 = 0;
  1566  003EB8  9A89               	bcf	3977,5,c	;volatile
  1567                           
  1568                           ; BSR set to: 0
  1569                           ;temp-clock_main.c: 113: tmr0BigCounts = 0;
  1570  003EBA  0E00               	movlw	0
  1571  003EBC  0100               	movlb	0	; () banked
  1572  003EBE  6FB1               	movwf	_tmr0BigCounts& (0+255),b
  1573  003EC0  0E00               	movlw	0
  1574  003EC2  0100               	movlb	0	; () banked
  1575  003EC4  6FB2               	movwf	(_tmr0BigCounts+1)& (0+255),b
  1576  003EC6  0E00               	movlw	0
  1577  003EC8  0100               	movlb	0	; () banked
  1578  003ECA  6FB3               	movwf	(_tmr0BigCounts+2)& (0+255),b
  1579  003ECC  0E00               	movlw	0
  1580  003ECE  0100               	movlb	0	; () banked
  1581  003ED0  6FB4               	movwf	(_tmr0BigCounts+3)& (0+255),b
  1582                           
  1583                           ; BSR set to: 0
  1584                           ;temp-clock_main.c: 114: T0CON = (0b00001000);
  1585  003ED2  0E08               	movlw	8
  1586  003ED4  6ED5               	movwf	4053,c	;volatile
  1587                           
  1588                           ; BSR set to: 0
  1589                           ;temp-clock_main.c: 115: TMR0 = (65536-32767);
  1590  003ED6  0E80               	movlw	128
  1591  003ED8  6ED7               	movwf	4055,c	;volatile
  1592  003EDA  0E01               	movlw	1
  1593  003EDC  6ED6               	movwf	4054,c	;volatile
  1594                           
  1595                           ; BSR set to: 0
  1596                           ;temp-clock_main.c: 116: TMR0IF = CLEAR;
  1597  003EDE  94F2               	bcf	intcon,2,c	;volatile
  1598                           
  1599                           ; BSR set to: 0
  1600                           ;temp-clock_main.c: 117: TMR0IE = 1;
  1601  003EE0  8AF2               	bsf	intcon,5,c	;volatile
  1602                           
  1603                           ; BSR set to: 0
  1604                           ;temp-clock_main.c: 118: TMR0ON = 1;
  1605  003EE2  8ED5               	bsf	4053,7,c	;volatile
  1606                           
  1607                           ; BSR set to: 0
  1608                           ;temp-clock_main.c: 121: T1CON = 0b10000000;
  1609  003EE4  0E80               	movlw	128
  1610  003EE6  6ECD               	movwf	4045,c	;volatile
  1611                           
  1612                           ; BSR set to: 0
  1613                           ;temp-clock_main.c: 122: TMR1 = (65536-2304);
  1614  003EE8  0EF7               	movlw	247
  1615  003EEA  6ECF               	movwf	4047,c	;volatile
  1616  003EEC  0E00               	movlw	0
  1617  003EEE  6ECE               	movwf	4046,c	;volatile
  1618                           
  1619                           ; BSR set to: 0
  1620                           ;temp-clock_main.c: 123: TMR1IF = CLEAR;
  1621  003EF0  909E               	bcf	3998,0,c	;volatile
  1622                           
  1623                           ; BSR set to: 0
  1624                           ;temp-clock_main.c: 124: TMR1IE = 1;
  1625  003EF2  809D               	bsf	3997,0,c	;volatile
  1626                           
  1627                           ; BSR set to: 0
  1628                           ;temp-clock_main.c: 125: TMR1ON = 1;
  1629  003EF4  80CD               	bsf	4045,0,c	;volatile
  1630                           
  1631                           ; BSR set to: 0
  1632                           ;temp-clock_main.c: 128: T2CON = 0b00000011;
  1633  003EF6  0E03               	movlw	3
  1634  003EF8  6ECA               	movwf	4042,c	;volatile
  1635                           
  1636                           ; BSR set to: 0
  1637                           ;temp-clock_main.c: 129: TMR2 = 0;
  1638  003EFA  0E00               	movlw	0
  1639  003EFC  6ECC               	movwf	4044,c	;volatile
  1640                           
  1641                           ; BSR set to: 0
  1642                           ;temp-clock_main.c: 130: TMR2IF = CLEAR;
  1643  003EFE  929E               	bcf	3998,1,c	;volatile
  1644                           
  1645                           ; BSR set to: 0
  1646                           ;temp-clock_main.c: 131: TMR2IE = 1;
  1647  003F00  829D               	bsf	3997,1,c	;volatile
  1648                           
  1649                           ; BSR set to: 0
  1650                           ;temp-clock_main.c: 132: TMR2ON = 1;
  1651  003F02  84CA               	bsf	4042,2,c	;volatile
  1652                           
  1653                           ; BSR set to: 0
  1654  003F04  0012               	return	
  1655  003F06                     __end_of_setup:
  1656                           	opt stack 0
  1657                           tblptru	equ	0xFF8
  1658                           tblptrh	equ	0xFF7
  1659                           tblptrl	equ	0xFF6
  1660                           tablat	equ	0xFF5
  1661                           intcon	equ	0xFF2
  1662                           postinc0	equ	0xFEE
  1663                           wreg	equ	0xFE8
  1664                           postdec1	equ	0xFE5
  1665                           fsr1l	equ	0xFE1
  1666                           status	equ	0xFD8
  1667                           
  1668 ;; *************** function _startDisp *****************
  1669 ;; Defined at:
  1670 ;;		line 61 in file "disp.c"
  1671 ;; Parameters:    Size  Location     Type
  1672 ;;		None
  1673 ;; Auto vars:     Size  Location     Type
  1674 ;;		None
  1675 ;; Return value:  Size  Location     Type
  1676 ;;		None               void
  1677 ;; Registers used:
  1678 ;;		wreg, status,2, status,0, cstack
  1679 ;; Tracked objects:
  1680 ;;		On entry : 0/0
  1681 ;;		On exit  : 0/0
  1682 ;;		Unchanged: 0/0
  1683 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1684 ;;      Params:         0       0       0       0       0       0       0       0       0
  1685 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1686 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1687 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1688 ;;Total ram usage:        0 bytes
  1689 ;; Hardware stack levels used:    1
  1690 ;; Hardware stack levels required when called:    8
  1691 ;; This function calls:
  1692 ;;		_setBrightness
  1693 ;;		_setTest
  1694 ;; This function is called by:
  1695 ;;		_setup
  1696 ;; This function uses a non-reentrant model
  1697 ;;
  1698                           
  1699                           	psect	text2
  1700  004010                     __ptext2:
  1701                           	opt stack 0
  1702  004010                     _startDisp:
  1703                           	opt stack 21
  1704                           
  1705                           ;disp.c: 64: TRISA1 = 0;
  1706                           
  1707                           ; BSR set to: 0
  1708                           ;incstack = 0
  1709  004010  9292               	bcf	3986,1,c	;volatile
  1710                           
  1711                           ;disp.c: 65: TRISA3 = 0;
  1712  004012  9692               	bcf	3986,3,c	;volatile
  1713                           
  1714                           ;disp.c: 66: TRISA4 = 0;
  1715  004014  9892               	bcf	3986,4,c	;volatile
  1716                           
  1717                           ;disp.c: 67: TRISA2 = 1;
  1718  004016  8492               	bsf	3986,2,c	;volatile
  1719                           
  1720                           ;disp.c: 70: screen.digits.bits[0] = 0;
  1721  004018  0E00               	movlw	0
  1722  00401A  0100               	movlb	0	; () banked
  1723  00401C  6FD3               	movwf	_screen& (0+255),b
  1724  00401E  0E00               	movlw	0
  1725  004020  0100               	movlb	0	; () banked
  1726  004022  6FD4               	movwf	(_screen+1)& (0+255),b
  1727  004024  0E00               	movlw	0
  1728  004026  0100               	movlb	0	; () banked
  1729  004028  6FD5               	movwf	(_screen+2)& (0+255),b
  1730  00402A  0E00               	movlw	0
  1731  00402C  0100               	movlb	0	; () banked
  1732  00402E  6FD6               	movwf	(_screen+3)& (0+255),b
  1733                           
  1734                           ;disp.c: 71: screen.digits.bits[1] = 0;
  1735  004030  0E00               	movlw	0
  1736  004032  0100               	movlb	0	; () banked
  1737  004034  6FD7               	movwf	(_screen+4)& (0+255),b
  1738  004036  0E00               	movlw	0
  1739  004038  0100               	movlb	0	; () banked
  1740  00403A  6FD8               	movwf	(_screen+5)& (0+255),b
  1741  00403C  0E00               	movlw	0
  1742  00403E  0100               	movlb	0	; () banked
  1743  004040  6FD9               	movwf	(_screen+6)& (0+255),b
  1744  004042  0E00               	movlw	0
  1745  004044  0100               	movlb	0	; () banked
  1746  004046  6FDA               	movwf	(_screen+7)& (0+255),b
  1747                           
  1748                           ; BSR set to: 0
  1749                           ;disp.c: 73: setBrightness(0b0111);
  1750  004048  0E07               	movlw	7
  1751  00404A  EC14  F023         	call	_setBrightness
  1752                           
  1753                           ;disp.c: 75: screen.decode = 0;
  1754  00404E  0100               	movlb	0	; () banked
  1755  004050  91DB               	bcf	(_screen+8)& (0+255),0,b
  1756  004052  0100               	movlb	0	; () banked
  1757  004054  93DB               	bcf	(_screen+8)& (0+255),1,b
  1758  004056  0100               	movlb	0	; () banked
  1759  004058  95DB               	bcf	(_screen+8)& (0+255),2,b
  1760  00405A  0100               	movlb	0	; () banked
  1761  00405C  97DB               	bcf	(_screen+8)& (0+255),3,b
  1762  00405E  0100               	movlb	0	; () banked
  1763  004060  99DB               	bcf	(_screen+8)& (0+255),4,b
  1764  004062  0100               	movlb	0	; () banked
  1765  004064  9BDB               	bcf	(_screen+8)& (0+255),5,b
  1766  004066  0100               	movlb	0	; () banked
  1767  004068  9DDB               	bcf	(_screen+8)& (0+255),6,b
  1768  00406A  0100               	movlb	0	; () banked
  1769  00406C  9FDB               	bcf	(_screen+8)& (0+255),7,b
  1770                           
  1771                           ; BSR set to: 0
  1772                           ;disp.c: 77: screen.scan = 0b111;
  1773  00406E  0100               	movlb	0	; () banked
  1774  004070  89DC               	bsf	(_screen+9)& (0+255),4,b
  1775  004072  0100               	movlb	0	; () banked
  1776  004074  8BDC               	bsf	(_screen+9)& (0+255),5,b
  1777  004076  0100               	movlb	0	; () banked
  1778  004078  8DDC               	bsf	(_screen+9)& (0+255),6,b
  1779                           
  1780                           ; BSR set to: 0
  1781                           ;disp.c: 79: setTest(0);
  1782  00407A  0E00               	movlw	0
  1783  00407C  EC30  F023         	call	_setTest
  1784                           
  1785                           ;disp.c: 81: screen.shutdown = 0;
  1786  004080  0100               	movlb	0	; () banked
  1787  004082  91DD               	bcf	(_screen+10)& (0+255),0,b
  1788                           
  1789                           ; BSR set to: 0
  1790                           ;disp.c: 83: screen.changed = 0xFFFF;
  1791  004084  0100               	movlb	0	; () banked
  1792  004086  69DE               	setf	(_screen+11)& (0+255),b
  1793  004088  0100               	movlb	0	; () banked
  1794  00408A  69DF               	setf	(_screen+12)& (0+255),b
  1795                           
  1796                           ; BSR set to: 0
  1797  00408C  0012               	return	
  1798  00408E                     __end_of_startDisp:
  1799                           	opt stack 0
  1800                           tblptru	equ	0xFF8
  1801                           tblptrh	equ	0xFF7
  1802                           tblptrl	equ	0xFF6
  1803                           tablat	equ	0xFF5
  1804                           intcon	equ	0xFF2
  1805                           postinc0	equ	0xFEE
  1806                           wreg	equ	0xFE8
  1807                           postdec1	equ	0xFE5
  1808                           fsr1l	equ	0xFE1
  1809                           status	equ	0xFD8
  1810                           
  1811 ;; *************** function _setTest *****************
  1812 ;; Defined at:
  1813 ;;		line 55 in file "disp.c"
  1814 ;; Parameters:    Size  Location     Type
  1815 ;;  state           1    wreg     unsigned char 
  1816 ;; Auto vars:     Size  Location     Type
  1817 ;;  state           1    0[BANK1 ] unsigned char 
  1818 ;; Return value:  Size  Location     Type
  1819 ;;		None               void
  1820 ;; Registers used:
  1821 ;;		wreg, status,2, status,0
  1822 ;; Tracked objects:
  1823 ;;		On entry : 0/0
  1824 ;;		On exit  : 0/0
  1825 ;;		Unchanged: 0/0
  1826 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1827 ;;      Params:         0       0       0       0       0       0       0       0       0
  1828 ;;      Locals:         0       0       1       0       0       0       0       0       0
  1829 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1830 ;;      Totals:         0       0       1       0       0       0       0       0       0
  1831 ;;Total ram usage:        1 bytes
  1832 ;; Hardware stack levels used:    1
  1833 ;; Hardware stack levels required when called:    7
  1834 ;; This function calls:
  1835 ;;		Nothing
  1836 ;; This function is called by:
  1837 ;;		_startDisp
  1838 ;; This function uses a non-reentrant model
  1839 ;;
  1840                           
  1841                           	psect	text3
  1842  004660                     __ptext3:
  1843                           	opt stack 0
  1844  004660                     _setTest:
  1845                           	opt stack 21
  1846                           
  1847                           ; BSR set to: 0
  1848                           ;incstack = 0
  1849                           ;setTest@state stored from wreg
  1850  004660  0101               	movlb	1	; () banked
  1851  004662  6F4A               	movwf	setTest@state& (0+255),b
  1852                           
  1853                           ; BSR set to: 1
  1854                           ;disp.c: 57: screen.test = state;
  1855  004664  0101               	movlb	1	; () banked
  1856  004666  B14A               	btfsc	setTest@state& (0+255),0,b
  1857  004668  D003               	bra	u5835
  1858  00466A  0100               	movlb	0	; () banked
  1859  00466C  9FDC               	bcf	(_screen+9)& (0+255),7,b
  1860  00466E  D002               	bra	u5836
  1861  004670                     u5835:
  1862  004670  0100               	movlb	0	; () banked
  1863  004672  8FDC               	bsf	(_screen+9)& (0+255),7,b
  1864  004674                     u5836:
  1865                           
  1866                           ; BSR set to: 0
  1867                           ;disp.c: 58: screen.changed |= (1 << 12);
  1868  004674  0100               	movlb	0	; () banked
  1869  004676  89DF               	bsf	(_screen+12)& (0+255),4,b
  1870                           
  1871                           ; BSR set to: 0
  1872  004678  0012               	return	
  1873  00467A                     __end_of_setTest:
  1874                           	opt stack 0
  1875                           tblptru	equ	0xFF8
  1876                           tblptrh	equ	0xFF7
  1877                           tblptrl	equ	0xFF6
  1878                           tablat	equ	0xFF5
  1879                           intcon	equ	0xFF2
  1880                           postinc0	equ	0xFEE
  1881                           wreg	equ	0xFE8
  1882                           postdec1	equ	0xFE5
  1883                           fsr1l	equ	0xFE1
  1884                           status	equ	0xFD8
  1885                           
  1886 ;; *************** function _setBrightness *****************
  1887 ;; Defined at:
  1888 ;;		line 48 in file "disp.c"
  1889 ;; Parameters:    Size  Location     Type
  1890 ;;  bright          1    wreg     unsigned char 
  1891 ;; Auto vars:     Size  Location     Type
  1892 ;;  bright          1    0[BANK1 ] unsigned char 
  1893 ;; Return value:  Size  Location     Type
  1894 ;;		None               void
  1895 ;; Registers used:
  1896 ;;		wreg, status,2, status,0
  1897 ;; Tracked objects:
  1898 ;;		On entry : 0/0
  1899 ;;		On exit  : 0/0
  1900 ;;		Unchanged: 0/0
  1901 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1902 ;;      Params:         0       0       0       0       0       0       0       0       0
  1903 ;;      Locals:         0       0       1       0       0       0       0       0       0
  1904 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1905 ;;      Totals:         0       0       1       0       0       0       0       0       0
  1906 ;;Total ram usage:        1 bytes
  1907 ;; Hardware stack levels used:    1
  1908 ;; Hardware stack levels required when called:    7
  1909 ;; This function calls:
  1910 ;;		Nothing
  1911 ;; This function is called by:
  1912 ;;		_startDisp
  1913 ;; This function uses a non-reentrant model
  1914 ;;
  1915                           
  1916                           	psect	text4
  1917  004628                     __ptext4:
  1918                           	opt stack 0
  1919  004628                     _setBrightness:
  1920                           	opt stack 21
  1921                           
  1922                           ; BSR set to: 0
  1923                           ;incstack = 0
  1924                           ;setBrightness@bright stored from wreg
  1925  004628  0101               	movlb	1	; () banked
  1926  00462A  6F4A               	movwf	setBrightness@bright& (0+255),b
  1927                           
  1928                           ; BSR set to: 1
  1929                           ;disp.c: 50: screen.brightness = bright;
  1930  00462C  0100               	movlb	0	; () banked
  1931  00462E  51DC               	movf	(_screen+9)& (0+255),w,b
  1932  004630  0101               	movlb	1	; () banked
  1933  004632  194A               	xorwf	setBrightness@bright& (0+255),w,b
  1934  004634  0BF0               	andlw	-16
  1935  004636  0101               	movlb	1	; () banked
  1936  004638  194A               	xorwf	setBrightness@bright& (0+255),w,b
  1937  00463A  0100               	movlb	0	; () banked
  1938  00463C  6FDC               	movwf	(_screen+9)& (0+255),b
  1939                           
  1940                           ; BSR set to: 0
  1941                           ;disp.c: 51: screen.changed |= (1 << 10);
  1942  00463E  0100               	movlb	0	; () banked
  1943  004640  85DF               	bsf	(_screen+12)& (0+255),2,b
  1944                           
  1945                           ; BSR set to: 0
  1946  004642  0012               	return	
  1947  004644                     __end_of_setBrightness:
  1948                           	opt stack 0
  1949                           tblptru	equ	0xFF8
  1950                           tblptrh	equ	0xFF7
  1951                           tblptrl	equ	0xFF6
  1952                           tablat	equ	0xFF5
  1953                           intcon	equ	0xFF2
  1954                           postinc0	equ	0xFEE
  1955                           wreg	equ	0xFE8
  1956                           postdec1	equ	0xFE5
  1957                           fsr1l	equ	0xFE1
  1958                           status	equ	0xFD8
  1959                           
  1960 ;; *************** function _setupButtons *****************
  1961 ;; Defined at:
  1962 ;;		line 12 in file "buttons.c"
  1963 ;; Parameters:    Size  Location     Type
  1964 ;;		None
  1965 ;; Auto vars:     Size  Location     Type
  1966 ;;		None
  1967 ;; Return value:  Size  Location     Type
  1968 ;;		None               void
  1969 ;; Registers used:
  1970 ;;		wreg, status,2
  1971 ;; Tracked objects:
  1972 ;;		On entry : 0/0
  1973 ;;		On exit  : 0/0
  1974 ;;		Unchanged: 0/0
  1975 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1976 ;;      Params:         0       0       0       0       0       0       0       0       0
  1977 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1978 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1979 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1980 ;;Total ram usage:        0 bytes
  1981 ;; Hardware stack levels used:    1
  1982 ;; Hardware stack levels required when called:    7
  1983 ;; This function calls:
  1984 ;;		Nothing
  1985 ;; This function is called by:
  1986 ;;		_setup
  1987 ;; This function uses a non-reentrant model
  1988 ;;
  1989                           
  1990                           	psect	text5
  1991  00468A                     __ptext5:
  1992                           	opt stack 0
  1993  00468A                     _setupButtons:
  1994                           	opt stack 22
  1995                           
  1996                           ;buttons.c: 15: LATB = 0;
  1997                           
  1998                           ; BSR set to: 0
  1999                           ;incstack = 0
  2000  00468A  0E00               	movlw	0
  2001  00468C  6E8A               	movwf	3978,c	;volatile
  2002                           
  2003                           ;buttons.c: 18: TRISB = 0b11111111;
  2004  00468E  6893               	setf	3987,c	;volatile
  2005                           
  2006                           ;buttons.c: 20: nRBPU = !0;
  2007  004690  8EF1               	bsf	intcon2,7,c	;volatile
  2008  004692  0012               	return	
  2009  004694                     __end_of_setupButtons:
  2010                           	opt stack 0
  2011                           tblptru	equ	0xFF8
  2012                           tblptrh	equ	0xFF7
  2013                           tblptrl	equ	0xFF6
  2014                           tablat	equ	0xFF5
  2015                           intcon	equ	0xFF2
  2016                           intcon2	equ	0xFF1
  2017                           postinc0	equ	0xFEE
  2018                           wreg	equ	0xFE8
  2019                           postdec1	equ	0xFE5
  2020                           fsr1l	equ	0xFE1
  2021                           status	equ	0xFD8
  2022                           
  2023 ;; *************** function _initTemp *****************
  2024 ;; Defined at:
  2025 ;;		line 10 in file "temp.c"
  2026 ;; Parameters:    Size  Location     Type
  2027 ;;		None
  2028 ;; Auto vars:     Size  Location     Type
  2029 ;;		None
  2030 ;; Return value:  Size  Location     Type
  2031 ;;		None               void
  2032 ;; Registers used:
  2033 ;;		wreg, status,2, status,0
  2034 ;; Tracked objects:
  2035 ;;		On entry : 0/0
  2036 ;;		On exit  : 0/0
  2037 ;;		Unchanged: 0/0
  2038 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2039 ;;      Params:         0       0       0       0       0       0       0       0       0
  2040 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2041 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2042 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2043 ;;Total ram usage:        0 bytes
  2044 ;; Hardware stack levels used:    1
  2045 ;; Hardware stack levels required when called:    7
  2046 ;; This function calls:
  2047 ;;		Nothing
  2048 ;; This function is called by:
  2049 ;;		_setup
  2050 ;; This function uses a non-reentrant model
  2051 ;;
  2052                           
  2053                           	psect	text6
  2054  004524                     __ptext6:
  2055                           	opt stack 0
  2056  004524                     _initTemp:
  2057                           	opt stack 22
  2058                           
  2059                           ;temp.c: 19: ADCON0 = 0b00000001;
  2060                           
  2061                           ;incstack = 0
  2062  004524  0E01               	movlw	1
  2063  004526  6EC2               	movwf	4034,c	;volatile
  2064                           
  2065                           ;temp.c: 26: ADCON1 = 0b00001110;
  2066  004528  0E0E               	movlw	14
  2067  00452A  6EC1               	movwf	4033,c	;volatile
  2068                           
  2069                           ;temp.c: 36: ADCON2 = 0b10110101;
  2070  00452C  0EB5               	movlw	181
  2071  00452E  6EC0               	movwf	4032,c	;volatile
  2072                           
  2073                           ;temp.c: 37: TRISA0 = 1;
  2074  004530  8092               	bsf	3986,0,c	;volatile
  2075                           
  2076                           ;temp.c: 39: tempMenu.digits = 0b00011111;
  2077  004532  0E1F               	movlw	31
  2078  004534  0100               	movlb	0	; () banked
  2079  004536  6FE1               	movwf	(_tempMenu+1)& (0+255),b
  2080                           
  2081                           ;temp.c: 40: tempMenu.state = 0;
  2082  004538  0E00               	movlw	0
  2083  00453A  0100               	movlb	0	; () banked
  2084  00453C  6FE0               	movwf	_tempMenu& (0+255),b
  2085                           
  2086                           ;temp.c: 41: tempMenu.num_states = 2;
  2087  00453E  0E02               	movlw	2
  2088  004540  0100               	movlb	0	; () banked
  2089  004542  6FE2               	movwf	(_tempMenu+2)& (0+255),b
  2090                           
  2091                           ; BSR set to: 0
  2092                           ;temp.c: 42: tempMenu.printFn = &printTemp;
  2093  004544  0E28               	movlw	high _printTemp
  2094  004546  0100               	movlb	0	; () banked
  2095  004548  6FE4               	movwf	(_tempMenu+4)& (0+255),b
  2096  00454A  0E6C               	movlw	low _printTemp
  2097  00454C  0100               	movlb	0	; () banked
  2098  00454E  6FE3               	movwf	(_tempMenu+3)& (0+255),b
  2099                           
  2100                           ; BSR set to: 0
  2101  004550  0012               	return	
  2102  004552                     __end_of_initTemp:
  2103                           	opt stack 0
  2104                           tblptru	equ	0xFF8
  2105                           tblptrh	equ	0xFF7
  2106                           tblptrl	equ	0xFF6
  2107                           tablat	equ	0xFF5
  2108                           intcon	equ	0xFF2
  2109                           intcon2	equ	0xFF1
  2110                           postinc0	equ	0xFEE
  2111                           wreg	equ	0xFE8
  2112                           postdec1	equ	0xFE5
  2113                           fsr1l	equ	0xFE1
  2114                           status	equ	0xFD8
  2115                           
  2116 ;; *************** function _initRTC *****************
  2117 ;; Defined at:
  2118 ;;		line 8 in file "RTC.c"
  2119 ;; Parameters:    Size  Location     Type
  2120 ;;		None
  2121 ;; Auto vars:     Size  Location     Type
  2122 ;;		None
  2123 ;; Return value:  Size  Location     Type
  2124 ;;		None               void
  2125 ;; Registers used:
  2126 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  2127 ;; Tracked objects:
  2128 ;;		On entry : 0/0
  2129 ;;		On exit  : 0/0
  2130 ;;		Unchanged: 0/0
  2131 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2132 ;;      Params:         0       0       0       0       0       0       0       0       0
  2133 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2134 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2135 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2136 ;;Total ram usage:        0 bytes
  2137 ;; Hardware stack levels used:    1
  2138 ;; Hardware stack levels required when called:    8
  2139 ;; This function calls:
  2140 ;;		_loadTime
  2141 ;; This function is called by:
  2142 ;;		_setup
  2143 ;; This function uses a non-reentrant model
  2144 ;;
  2145                           
  2146                           	psect	text7
  2147  004338                     __ptext7:
  2148                           	opt stack 0
  2149  004338                     _initRTC:
  2150                           	opt stack 21
  2151                           
  2152                           ;RTC.c: 10: rtcMenu.digits = 0b11111111;
  2153                           
  2154                           ; BSR set to: 0
  2155                           ;incstack = 0
  2156  004338  0100               	movlb	0	; () banked
  2157  00433A  69E6               	setf	(_rtcMenu+1)& (0+255),b
  2158                           
  2159                           ; BSR set to: 0
  2160                           ;RTC.c: 11: rtcMenu.state = ddd_hhmm;
  2161  00433C  0E02               	movlw	2
  2162  00433E  0100               	movlb	0	; () banked
  2163  004340  6FE5               	movwf	_rtcMenu& (0+255),b
  2164                           
  2165                           ;RTC.c: 12: rtcMenu.num_states = 10;
  2166  004342  0E0A               	movlw	10
  2167  004344  0100               	movlb	0	; () banked
  2168  004346  6FE7               	movwf	(_rtcMenu+2)& (0+255),b
  2169                           
  2170                           ; BSR set to: 0
  2171                           ;RTC.c: 13: rtcMenu.printFn = &printRTC;
  2172  004348  0E18               	movlw	high _printRTC
  2173  00434A  0100               	movlb	0	; () banked
  2174  00434C  6FE9               	movwf	(_rtcMenu+4)& (0+255),b
  2175  00434E  0E3A               	movlw	low _printRTC
  2176  004350  0100               	movlb	0	; () banked
  2177  004352  6FE8               	movwf	(_rtcMenu+3)& (0+255),b
  2178                           
  2179                           ; BSR set to: 0
  2180                           ;RTC.c: 15: date.month = 1;
  2181  004354  0E01               	movlw	1
  2182  004356  0100               	movlb	0	; () banked
  2183  004358  6FAD               	movwf	(_date+5)& (0+255),b
  2184                           
  2185                           ; BSR set to: 0
  2186                           ;RTC.c: 16: date.day = 1;
  2187  00435A  0E01               	movlw	1
  2188  00435C  0100               	movlb	0	; () banked
  2189  00435E  6FAB               	movwf	(_date+3)& (0+255),b
  2190                           
  2191                           ; BSR set to: 0
  2192                           ;RTC.c: 17: date.year = 2013;
  2193  004360  0E07               	movlw	7
  2194  004362  0100               	movlb	0	; () banked
  2195  004364  6FAF               	movwf	(_date+7)& (0+255),b
  2196  004366  0EDD               	movlw	221
  2197  004368  0100               	movlb	0	; () banked
  2198  00436A  6FAE               	movwf	(_date+6)& (0+255),b
  2199                           
  2200                           ; BSR set to: 0
  2201                           ;RTC.c: 18: date.hour = 0;
  2202  00436C  0E00               	movlw	0
  2203  00436E  0100               	movlb	0	; () banked
  2204  004370  6FAA               	movwf	(_date+2)& (0+255),b
  2205                           
  2206                           ; BSR set to: 0
  2207                           ;RTC.c: 19: date.minute = 0;
  2208  004372  0E00               	movlw	0
  2209  004374  0100               	movlb	0	; () banked
  2210  004376  6FA9               	movwf	(_date+1)& (0+255),b
  2211                           
  2212                           ; BSR set to: 0
  2213                           ;RTC.c: 20: date.second = 0;
  2214  004378  0E00               	movlw	0
  2215  00437A  0100               	movlb	0	; () banked
  2216  00437C  6FA8               	movwf	_date& (0+255),b
  2217                           
  2218                           ; BSR set to: 0
  2219                           ;RTC.c: 22: EECON1 = 0b0000000;
  2220  00437E  0E00               	movlw	0
  2221  004380  6EA6               	movwf	4006,c	;volatile
  2222                           
  2223                           ; BSR set to: 0
  2224                           ;RTC.c: 23: LATC6 = 1;
  2225  004382  8C8B               	bsf	3979,6,c	;volatile
  2226                           
  2227                           ; BSR set to: 0
  2228                           ;RTC.c: 24: loadTime();
  2229  004384  ECFA  F019         	call	_loadTime	;wreg free
  2230                           
  2231                           ;RTC.c: 25: LATC6 = 0;
  2232  004388  9C8B               	bcf	3979,6,c	;volatile
  2233  00438A  0012               	return	
  2234  00438C                     __end_of_initRTC:
  2235                           	opt stack 0
  2236                           tblptru	equ	0xFF8
  2237                           tblptrh	equ	0xFF7
  2238                           tblptrl	equ	0xFF6
  2239                           tablat	equ	0xFF5
  2240                           intcon	equ	0xFF2
  2241                           intcon2	equ	0xFF1
  2242                           postinc0	equ	0xFEE
  2243                           wreg	equ	0xFE8
  2244                           postdec1	equ	0xFE5
  2245                           fsr1l	equ	0xFE1
  2246                           status	equ	0xFD8
  2247                           
  2248 ;; *************** function _loadTime *****************
  2249 ;; Defined at:
  2250 ;;		line 28 in file "RTC.c"
  2251 ;; Parameters:    Size  Location     Type
  2252 ;;		None
  2253 ;; Auto vars:     Size  Location     Type
  2254 ;;  data            1   12[BANK1 ] unsigned char 
  2255 ;;  newDate         9    3[BANK1 ] struct sDate
  2256 ;;  cnt             1    2[BANK1 ] unsigned char 
  2257 ;; Return value:  Size  Location     Type
  2258 ;;                  9  132[COMRAM] struct sDate
  2259 ;; Registers used:
  2260 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
  2261 ;; Tracked objects:
  2262 ;;		On entry : 0/0
  2263 ;;		On exit  : 0/0
  2264 ;;		Unchanged: 0/0
  2265 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2266 ;;      Params:         0       0       0       0       0       0       0       0       0
  2267 ;;      Locals:         0       0      11       0       0       0       0       0       0
  2268 ;;      Temps:          0       0       2       0       0       0       0       0       0
  2269 ;;      Totals:         0       0      13       0       0       0       0       0       0
  2270 ;;Total ram usage:       13 bytes
  2271 ;; Hardware stack levels used:    1
  2272 ;; Hardware stack levels required when called:    7
  2273 ;; This function calls:
  2274 ;;		Nothing
  2275 ;; This function is called by:
  2276 ;;		_initRTC
  2277 ;; This function uses a non-reentrant model
  2278 ;;
  2279                           
  2280                           	psect	text8
  2281  0033F4                     __ptext8:
  2282                           	opt stack 0
  2283  0033F4                     _loadTime:
  2284                           	opt stack 21
  2285                           
  2286                           ;RTC.c: 30: struct sDate newDate;
  2287                           ;RTC.c: 31: uint8_t cnt;
  2288                           ;RTC.c: 33: for (cnt = 1; cnt < 7; cnt++)
  2289                           
  2290                           ;incstack = 0
  2291  0033F4  0E01               	movlw	1
  2292  0033F6  0101               	movlb	1	; () banked
  2293  0033F8  6F4C               	movwf	loadTime@cnt& (0+255),b
  2294  0033FA  D067               	goto	L2
  2295  0033FC                     l178:
  2296                           
  2297                           ; BSR set to: 1
  2298                           ;RTC.c: 34: {
  2299                           ;RTC.c: 35: EEADR = 0 + cnt;
  2300  0033FC  C14C  FFA9         	movff	loadTime@cnt,4009	;volatile
  2301                           
  2302                           ;RTC.c: 36: RD = 1;
  2303  003400  80A6               	bsf	4006,0,c	;volatile
  2304                           
  2305                           ;RTC.c: 37: uint8_t data = EEDATA;
  2306  003402  CFA8 F156          	movff	4008,loadTime@data	;volatile
  2307                           
  2308                           ;RTC.c: 38: switch (cnt)
  2309  003406  D04A               	goto	l5640
  2310  003408                     l5602:
  2311                           
  2312                           ; BSR set to: 1
  2313                           ;RTC.c: 41: if (data >= 60)
  2314  003408  0E3B               	movlw	59
  2315  00340A  0101               	movlb	1	; () banked
  2316  00340C  6556               	cpfsgt	loadTime@data& (0+255),b
  2317  00340E  D003               	goto	l5606
  2318                           
  2319                           ; BSR set to: 1
  2320                           ;RTC.c: 42: data = 0;
  2321  003410  0E00               	movlw	0
  2322  003412  0101               	movlb	1	; () banked
  2323  003414  6F56               	movwf	loadTime@data& (0+255),b
  2324  003416                     l5606:
  2325                           
  2326                           ; BSR set to: 1
  2327                           ;RTC.c: 43: newDate.minute = data;
  2328  003416  C156  F14E         	movff	loadTime@data,loadTime@newDate+1
  2329                           
  2330                           ;RTC.c: 44: break;
  2331  00341A  D054               	goto	l183
  2332  00341C                     l5608:
  2333                           
  2334                           ; BSR set to: 1
  2335                           ;RTC.c: 46: if (data >= 24)
  2336  00341C  0E17               	movlw	23
  2337  00341E  0101               	movlb	1	; () banked
  2338  003420  6556               	cpfsgt	loadTime@data& (0+255),b
  2339  003422  D003               	goto	l5612
  2340                           
  2341                           ; BSR set to: 1
  2342                           ;RTC.c: 47: data = 0;
  2343  003424  0E00               	movlw	0
  2344  003426  0101               	movlb	1	; () banked
  2345  003428  6F56               	movwf	loadTime@data& (0+255),b
  2346  00342A                     l5612:
  2347                           
  2348                           ; BSR set to: 1
  2349                           ;RTC.c: 48: newDate.hour = data;
  2350  00342A  C156  F14F         	movff	loadTime@data,loadTime@newDate+2
  2351                           
  2352                           ;RTC.c: 49: break;
  2353  00342E  D04A               	goto	l183
  2354  003430                     l5614:
  2355                           
  2356                           ; BSR set to: 1
  2357                           ;RTC.c: 51: if (data >= 31)
  2358  003430  0E1E               	movlw	30
  2359  003432  0101               	movlb	1	; () banked
  2360  003434  6556               	cpfsgt	loadTime@data& (0+255),b
  2361  003436  D003               	goto	l5618
  2362                           
  2363                           ; BSR set to: 1
  2364                           ;RTC.c: 52: data = 1;
  2365  003438  0E01               	movlw	1
  2366  00343A  0101               	movlb	1	; () banked
  2367  00343C  6F56               	movwf	loadTime@data& (0+255),b
  2368  00343E                     l5618:
  2369                           
  2370                           ; BSR set to: 1
  2371                           ;RTC.c: 53: newDate.day = data;
  2372  00343E  C156  F150         	movff	loadTime@data,loadTime@newDate+3
  2373                           
  2374                           ;RTC.c: 54: break;
  2375  003442  D040               	goto	l183
  2376  003444                     l5620:
  2377                           
  2378                           ; BSR set to: 1
  2379                           ;RTC.c: 56: if (data >= 12)
  2380  003444  0E0B               	movlw	11
  2381  003446  0101               	movlb	1	; () banked
  2382  003448  6556               	cpfsgt	loadTime@data& (0+255),b
  2383  00344A  D003               	goto	l5624
  2384                           
  2385                           ; BSR set to: 1
  2386                           ;RTC.c: 57: data = 1;
  2387  00344C  0E01               	movlw	1
  2388  00344E  0101               	movlb	1	; () banked
  2389  003450  6F56               	movwf	loadTime@data& (0+255),b
  2390  003452                     l5624:
  2391                           
  2392                           ; BSR set to: 1
  2393                           ;RTC.c: 58: newDate.month = data;
  2394  003452  C156  F152         	movff	loadTime@data,loadTime@newDate+5
  2395                           
  2396                           ;RTC.c: 59: break;
  2397  003456  D036               	goto	l183
  2398  003458                     l5626:
  2399                           
  2400                           ; BSR set to: 1
  2401                           ;RTC.c: 61: if (data >= 21)
  2402  003458  0E14               	movlw	20
  2403  00345A  0101               	movlb	1	; () banked
  2404  00345C  6556               	cpfsgt	loadTime@data& (0+255),b
  2405  00345E  D003               	goto	l5630
  2406                           
  2407                           ; BSR set to: 1
  2408                           ;RTC.c: 62: data = 20;
  2409  003460  0E14               	movlw	20
  2410  003462  0101               	movlb	1	; () banked
  2411  003464  6F56               	movwf	loadTime@data& (0+255),b
  2412  003466                     l5630:
  2413                           
  2414                           ; BSR set to: 1
  2415                           ;RTC.c: 63: newDate.year = data;
  2416  003466  0101               	movlb	1	; () banked
  2417  003468  C156  F153         	movff	loadTime@data,loadTime@newDate+6
  2418  00346C  0101               	movlb	1	; () banked
  2419  00346E  6B54               	clrf	(loadTime@newDate+7)& (0+255),b
  2420                           
  2421                           ;RTC.c: 64: break;
  2422  003470  D029               	goto	l183
  2423  003472                     l5632:
  2424                           
  2425                           ; BSR set to: 1
  2426                           ;RTC.c: 66: if (data >= 100)
  2427  003472  0E63               	movlw	99
  2428  003474  0101               	movlb	1	; () banked
  2429  003476  6556               	cpfsgt	loadTime@data& (0+255),b
  2430  003478  D003               	goto	l5636
  2431                           
  2432                           ; BSR set to: 1
  2433                           ;RTC.c: 67: data = 0;
  2434  00347A  0E00               	movlw	0
  2435  00347C  0101               	movlb	1	; () banked
  2436  00347E  6F56               	movwf	loadTime@data& (0+255),b
  2437  003480                     l5636:
  2438                           
  2439                           ; BSR set to: 1
  2440                           ;RTC.c: 68: newDate.year |= data << 8;
  2441  003480  0101               	movlb	1	; () banked
  2442  003482  5156               	movf	loadTime@data& (0+255),w,b
  2443  003484  0101               	movlb	1	; () banked
  2444  003486  6F4B               	movwf	(??_loadTime+1)& (0+255),b
  2445  003488  6B4A               	clrf	??_loadTime& (0+255),b
  2446  00348A  0101               	movlb	1	; () banked
  2447  00348C  514A               	movf	??_loadTime& (0+255),w,b
  2448  00348E  0101               	movlb	1	; () banked
  2449  003490  1353               	iorwf	(loadTime@newDate+6)& (0+255),f,b
  2450  003492  0101               	movlb	1	; () banked
  2451  003494  514B               	movf	(??_loadTime+1)& (0+255),w,b
  2452  003496  0101               	movlb	1	; () banked
  2453  003498  1354               	iorwf	(loadTime@newDate+7)& (0+255),f,b
  2454                           
  2455                           ;RTC.c: 69: break;
  2456  00349A  D014               	goto	l183
  2457  00349C                     l5640:
  2458                           
  2459                           ; BSR set to: 1
  2460  00349C  0101               	movlb	1	; () banked
  2461  00349E  514C               	movf	loadTime@cnt& (0+255),w,b
  2462                           
  2463                           ; Switch size 1, requested type "space"
  2464                           ; Number of cases is 6, Range of values is 1 to 6
  2465                           ; switch strategies available:
  2466                           ; Name         Instructions Cycles
  2467                           ; simple_byte           19    10 (average)
  2468                           ;	Chosen strategy is simple_byte
  2469  0034A0  0A01               	xorlw	1	; case 1
  2470  0034A2  B4D8               	btfsc	status,2,c
  2471  0034A4  D7B1               	goto	l5602
  2472  0034A6  0A03               	xorlw	3	; case 2
  2473  0034A8  B4D8               	btfsc	status,2,c
  2474  0034AA  D7B8               	goto	l5608
  2475  0034AC  0A01               	xorlw	1	; case 3
  2476  0034AE  B4D8               	btfsc	status,2,c
  2477  0034B0  D7BF               	goto	l5614
  2478  0034B2  0A07               	xorlw	7	; case 4
  2479  0034B4  B4D8               	btfsc	status,2,c
  2480  0034B6  D7C6               	goto	l5620
  2481  0034B8  0A01               	xorlw	1	; case 5
  2482  0034BA  B4D8               	btfsc	status,2,c
  2483  0034BC  D7CD               	goto	l5626
  2484  0034BE  0A03               	xorlw	3	; case 6
  2485  0034C0  B4D8               	btfsc	status,2,c
  2486  0034C2  D7D7               	goto	l5632
  2487  0034C4                     l183:
  2488                           
  2489                           ; BSR set to: 1
  2490  0034C4  F000               	nop		;# 
  2491  0034C6  0101               	movlb	1	; () banked
  2492  0034C8  2B4C               	incf	loadTime@cnt& (0+255),f,b
  2493  0034CA                     L2:
  2494                           
  2495                           ; BSR set to: 1
  2496  0034CA  0E06               	movlw	6
  2497  0034CC  0101               	movlb	1	; () banked
  2498  0034CE  654C               	cpfsgt	loadTime@cnt& (0+255),b
  2499  0034D0  D795               	goto	l178
  2500                           
  2501                           ; BSR set to: 1
  2502                           ;RTC.c: 72: }
  2503                           ;RTC.c: 73: date = newDate;
  2504                           
  2505                           ; BSR set to: 1
  2506  0034D2  EE21  F04D         	lfsr	2,loadTime@newDate
  2507  0034D6  EE10  F0A8         	lfsr	1,_date
  2508  0034DA  0E09               	movlw	9
  2509  0034DC                     u5921:
  2510  0034DC  CFDE FFE6          	movff	postinc2,postinc1
  2511  0034E0  2EE8               	decfsz	wreg,f,c
  2512  0034E2  D7FC               	goto	u5921
  2513                           
  2514                           ; BSR set to: 1
  2515                           
  2516                           ; BSR set to: 1
  2517                           ;RTC.c: 74: return newDate;
  2518                           ;	Return value of _loadTime is never used
  2519  0034E4  0012               	return	
  2520  0034E6                     __end_of_loadTime:
  2521                           	opt stack 0
  2522                           tblptru	equ	0xFF8
  2523                           tblptrh	equ	0xFF7
  2524                           tblptrl	equ	0xFF6
  2525                           tablat	equ	0xFF5
  2526                           intcon	equ	0xFF2
  2527                           intcon2	equ	0xFF1
  2528                           postinc0	equ	0xFEE
  2529                           wreg	equ	0xFE8
  2530                           postinc1	equ	0xFE6
  2531                           postdec1	equ	0xFE5
  2532                           fsr1l	equ	0xFE1
  2533                           postinc2	equ	0xFDE
  2534                           status	equ	0xFD8
  2535                           
  2536 ;; *************** function _isr *****************
  2537 ;; Defined at:
  2538 ;;		line 135 in file "temp-clock_main.c"
  2539 ;; Parameters:    Size  Location     Type
  2540 ;;		None
  2541 ;; Auto vars:     Size  Location     Type
  2542 ;;		None
  2543 ;; Return value:  Size  Location     Type
  2544 ;;		None               void
  2545 ;; Registers used:
  2546 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, btemp+8, btemp+9, btemp+10, btemp+11, tosl, structret, tblptrl, tblptrh, tblp
      +tru, prodl, prodh, bsr, cstack
  2547 ;; Tracked objects:
  2548 ;;		On entry : 0/0
  2549 ;;		On exit  : 0/0
  2550 ;;		Unchanged: 0/0
  2551 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2552 ;;      Params:         0       0       0       0       0       0       0       0       0
  2553 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2554 ;;      Temps:          0      14       0       0       0       0       0       0       0
  2555 ;;      Totals:         0      14       0       0       0       0       0       0       0
  2556 ;;Total ram usage:       14 bytes
  2557 ;; Hardware stack levels used:    1
  2558 ;; Hardware stack levels required when called:    6
  2559 ;; This function calls:
  2560 ;;		_buttons
  2561 ;;		_getTemp
  2562 ;;		_printRTC
  2563 ;;		_printTemp
  2564 ;;		_tick
  2565 ;;		_update
  2566 ;; This function is called by:
  2567 ;;		Interrupt level 2
  2568 ;; This function uses a non-reentrant model
  2569 ;;
  2570                           
  2571                           	psect	intcode
  2572  000008                     __pintcode:
  2573                           	opt stack 0
  2574  000008                     _isr:
  2575                           	opt stack 21
  2576                           
  2577                           ; BSR set to: 1
  2578                           ;incstack = 0
  2579  000008  CFFA F09A          	movff	pclath,??_isr
  2580  00000C  CFFB F09B          	movff	pclatu,??_isr+1
  2581  000010  CFE9 F09C          	movff	fsr0l,??_isr+2
  2582  000014  ED1A  F018         	call	int_func,f	;refresh shadow registers
  2583                           pclatu	equ	0xFFB
  2584                           pclath	equ	0xFFA
  2585                           tblptru	equ	0xFF8
  2586                           tblptrh	equ	0xFF7
  2587                           tblptrl	equ	0xFF6
  2588                           tablat	equ	0xFF5
  2589                           intcon	equ	0xFF2
  2590                           intcon2	equ	0xFF1
  2591                           postinc0	equ	0xFEE
  2592                           fsr0l	equ	0xFE9
  2593                           wreg	equ	0xFE8
  2594                           postinc1	equ	0xFE6
  2595                           postdec1	equ	0xFE5
  2596                           fsr1l	equ	0xFE1
  2597                           postinc2	equ	0xFDE
  2598                           status	equ	0xFD8
  2599                           
  2600                           	psect	intcode_body
  2601  003034                     __pintcode_body:
  2602                           	opt stack 21
  2603  003034                     int_func:
  2604                           	opt stack 21
  2605  003034  0006               	pop		; remove dummy address from shadow register refresh
  2606  003036  CFEA F09D          	movff	fsr0h,??_isr+3
  2607  00303A  CFE1 F09E          	movff	fsr1l,??_isr+4
  2608  00303E  CFE2 F09F          	movff	fsr1h,??_isr+5
  2609  003042  CFD9 F0A0          	movff	fsr2l,??_isr+6
  2610  003046  CFDA F0A1          	movff	fsr2h,??_isr+7
  2611  00304A  CFF3 F0A2          	movff	prodl,??_isr+8
  2612  00304E  CFF4 F0A3          	movff	prodh,??_isr+9
  2613  003052  CFF6 F0A4          	movff	tblptrl,??_isr+10
  2614  003056  CFF7 F0A5          	movff	tblptrh,??_isr+11
  2615  00305A  CFF8 F0A6          	movff	tblptru,??_isr+12
  2616  00305E  CFF5 F0A7          	movff	tablat,??_isr+13
  2617                           
  2618                           ;temp-clock_main.c: 137: if (TMR1IE && TMR1IF)
  2619  003062  B09D               	btfsc	3997,0,c	;volatile
  2620  003064  A09E               	btfss	3998,0,c	;volatile
  2621  003066  D021               	goto	i2l5430
  2622                           
  2623                           ;temp-clock_main.c: 138: {
  2624                           ;temp-clock_main.c: 139: TMR1IF = CLEAR;
  2625  003068  909E               	bcf	3998,0,c	;volatile
  2626                           
  2627                           ;temp-clock_main.c: 140: TMR1ON = 0;
  2628  00306A  90CD               	bcf	4045,0,c	;volatile
  2629                           
  2630                           ;temp-clock_main.c: 141: TMR1 = 0;
  2631  00306C  0E00               	movlw	0
  2632  00306E  6ECF               	movwf	4047,c	;volatile
  2633  003070  0E00               	movlw	0
  2634  003072  6ECE               	movwf	4046,c	;volatile
  2635                           
  2636                           ;temp-clock_main.c: 142: if (++rtc_big_ticks > (61))
  2637  003074  0100               	movlb	0	; () banked
  2638  003076  4BBE               	infsnz	_rtc_big_ticks& (0+255),f,b
  2639  003078  2BBF               	incf	(_rtc_big_ticks+1)& (0+255),f,b
  2640  00307A  0E3E               	movlw	62
  2641  00307C  0100               	movlb	0	; () banked
  2642  00307E  5DBE               	subwf	_rtc_big_ticks& (0+255),w,b
  2643  003080  0E00               	movlw	0
  2644  003082  0100               	movlb	0	; () banked
  2645  003084  59BF               	subwfb	(_rtc_big_ticks+1)& (0+255),w,b
  2646  003086  A0D8               	btfss	status,0,c
  2647  003088  D00F               	goto	i2l5428
  2648                           
  2649                           ; BSR set to: 0
  2650                           ;temp-clock_main.c: 143: {
  2651                           ;temp-clock_main.c: 144: rtc_big_ticks = 0;
  2652  00308A  0E00               	movlw	0
  2653  00308C  0100               	movlb	0	; () banked
  2654  00308E  6FBF               	movwf	(_rtc_big_ticks+1)& (0+255),b
  2655  003090  0E00               	movlw	0
  2656  003092  0100               	movlb	0	; () banked
  2657  003094  6FBE               	movwf	_rtc_big_ticks& (0+255),b
  2658                           
  2659                           ;temp-clock_main.c: 145: TMR1 = (65536-2304);
  2660  003096  0EF7               	movlw	247
  2661  003098  6ECF               	movwf	4047,c	;volatile
  2662  00309A  0E00               	movlw	0
  2663  00309C  6ECE               	movwf	4046,c	;volatile
  2664                           
  2665                           ; BSR set to: 0
  2666                           ;temp-clock_main.c: 146: TMR1ON = 1;
  2667  00309E  80CD               	bsf	4045,0,c	;volatile
  2668                           
  2669                           ; BSR set to: 0
  2670                           ;temp-clock_main.c: 148: tick(second);
  2671  0030A0  0E00               	movlw	0
  2672  0030A2  ECEB  F01A         	call	_tick
  2673                           
  2674                           ;temp-clock_main.c: 151: LATC7 = ~LATC7;
  2675  0030A6  7E8B               	btg	3979,7,c	;volatile
  2676  0030A8                     i2l5428:
  2677                           
  2678                           ;temp-clock_main.c: 153: }
  2679                           ;temp-clock_main.c: 155: TMR1ON = 1;
  2680  0030A8  80CD               	bsf	4045,0,c	;volatile
  2681  0030AA                     i2l5430:
  2682                           
  2683                           ;temp-clock_main.c: 156: }
  2684                           ;temp-clock_main.c: 158: if (TMR2IE && TMR2IF)
  2685  0030AA  B29D               	btfsc	3997,1,c	;volatile
  2686  0030AC  A29E               	btfss	3998,1,c	;volatile
  2687  0030AE  D01A               	goto	i2l5444
  2688                           
  2689                           ;temp-clock_main.c: 159: {
  2690                           ;temp-clock_main.c: 160: TMR2IF = CLEAR;
  2691  0030B0  929E               	bcf	3998,1,c	;volatile
  2692                           
  2693                           ;temp-clock_main.c: 161: TMR2 = 0;
  2694  0030B2  0E00               	movlw	0
  2695  0030B4  6ECC               	movwf	4044,c	;volatile
  2696                           
  2697                           ;temp-clock_main.c: 162: if (tmr2_count++ > 100)
  2698  0030B6  0100               	movlb	0	; () banked
  2699  0030B8  EE20  F0C2         	lfsr	2,_tmr2_count
  2700  0030BC  2ADE               	incf	postinc2,f,c
  2701  0030BE  0E00               	movlw	0
  2702  0030C0  22DD               	addwfc	postdec2,f,c
  2703  0030C2  52DE               	movf	postinc2,f,c
  2704  0030C4  50DD               	movf	postdec2,w,c
  2705  0030C6  0A80               	xorlw	128
  2706  0030C8  0F80               	addlw	128
  2707  0030CA  0E66               	movlw	102
  2708  0030CC  B4D8               	btfsc	status,2,c
  2709  0030CE  5CDF               	subwf	indf2,w,c
  2710  0030D0  A0D8               	btfss	status,0,c
  2711  0030D2  D008               	goto	i2l5444
  2712                           
  2713                           ; BSR set to: 0
  2714                           ;temp-clock_main.c: 163: {
  2715                           ;temp-clock_main.c: 164: tmr2_count = 0;
  2716  0030D4  0E00               	movlw	0
  2717  0030D6  0100               	movlb	0	; () banked
  2718  0030D8  6FC3               	movwf	(_tmr2_count+1)& (0+255),b
  2719  0030DA  0E00               	movlw	0
  2720  0030DC  0100               	movlb	0	; () banked
  2721  0030DE  6FC2               	movwf	_tmr2_count& (0+255),b
  2722                           
  2723                           ; BSR set to: 0
  2724                           ;temp-clock_main.c: 165: update();
  2725  0030E0  ECF4  F009         	call	_update	;wreg free
  2726  0030E4                     i2l5444:
  2727                           
  2728                           ;temp-clock_main.c: 167: }
  2729                           ;temp-clock_main.c: 168: }
  2730                           ;temp-clock_main.c: 170: if (TMR0IE && TMR0IF)
  2731  0030E4  BAF2               	btfsc	intcon,5,c	;volatile
  2732  0030E6  A4F2               	btfss	intcon,2,c	;volatile
  2733  0030E8  D04C               	goto	i2l5466
  2734                           
  2735                           ;temp-clock_main.c: 171: {
  2736                           ;temp-clock_main.c: 172: TMR0IF = CLEAR;
  2737  0030EA  94F2               	bcf	intcon,2,c	;volatile
  2738                           
  2739                           ;temp-clock_main.c: 173: TMR0ON = 0;
  2740  0030EC  9ED5               	bcf	4053,7,c	;volatile
  2741                           
  2742                           ;temp-clock_main.c: 174: TMR0 = 0;
  2743  0030EE  0E00               	movlw	0
  2744  0030F0  6ED7               	movwf	4055,c	;volatile
  2745  0030F2  0E00               	movlw	0
  2746  0030F4  6ED6               	movwf	4054,c	;volatile
  2747                           
  2748                           ;temp-clock_main.c: 175: if (++tmr0BigCounts > (0))
  2749  0030F6  0E01               	movlw	1
  2750  0030F8  0100               	movlb	0	; () banked
  2751  0030FA  27B1               	addwf	_tmr0BigCounts& (0+255),f,b
  2752  0030FC  0E00               	movlw	0
  2753  0030FE  0100               	movlb	0	; () banked
  2754  003100  23B2               	addwfc	(_tmr0BigCounts+1)& (0+255),f,b
  2755  003102  0100               	movlb	0	; () banked
  2756  003104  23B3               	addwfc	(_tmr0BigCounts+2)& (0+255),f,b
  2757  003106  0100               	movlb	0	; () banked
  2758  003108  23B4               	addwfc	(_tmr0BigCounts+3)& (0+255),f,b
  2759  00310A  0100               	movlb	0	; () banked
  2760  00310C  51B4               	movf	(_tmr0BigCounts+3)& (0+255),w,b
  2761  00310E  11B1               	iorwf	_tmr0BigCounts& (0+255),w,b
  2762  003110  11B2               	iorwf	(_tmr0BigCounts+1)& (0+255),w,b
  2763  003112  11B3               	iorwf	(_tmr0BigCounts+2)& (0+255),w,b
  2764  003114  B4D8               	btfsc	status,2,c
  2765  003116  D034               	goto	i2l5464
  2766                           
  2767                           ; BSR set to: 0
  2768                           ;temp-clock_main.c: 176: {
  2769                           ;temp-clock_main.c: 177: tmr0BigCounts = 0;
  2770  003118  0E00               	movlw	0
  2771  00311A  0100               	movlb	0	; () banked
  2772  00311C  6FB1               	movwf	_tmr0BigCounts& (0+255),b
  2773  00311E  0E00               	movlw	0
  2774  003120  0100               	movlb	0	; () banked
  2775  003122  6FB2               	movwf	(_tmr0BigCounts+1)& (0+255),b
  2776  003124  0E00               	movlw	0
  2777  003126  0100               	movlb	0	; () banked
  2778  003128  6FB3               	movwf	(_tmr0BigCounts+2)& (0+255),b
  2779  00312A  0E00               	movlw	0
  2780  00312C  0100               	movlb	0	; () banked
  2781  00312E  6FB4               	movwf	(_tmr0BigCounts+3)& (0+255),b
  2782                           
  2783                           ;temp-clock_main.c: 178: TMR0 = (65536-32767);
  2784  003130  0E80               	movlw	128
  2785  003132  6ED7               	movwf	4055,c	;volatile
  2786  003134  0E01               	movlw	1
  2787  003136  6ED6               	movwf	4054,c	;volatile
  2788                           
  2789                           ; BSR set to: 0
  2790                           ;temp-clock_main.c: 179: TMR0ON = 1;
  2791  003138  8ED5               	bsf	4053,7,c	;volatile
  2792                           
  2793                           ; BSR set to: 0
  2794                           ;temp-clock_main.c: 181: buttons();
  2795  00313A  EC64  F007         	call	_buttons	;wreg free
  2796                           
  2797                           ;temp-clock_main.c: 183: getTemp();
  2798  00313E  EC12  F010         	call	_getTemp	;wreg free
  2799                           
  2800                           ;temp-clock_main.c: 185: menu->printFn(menu->digits);
  2801  003142  0100               	movlb	0	; () banked
  2802  003144  EE20 F003          	lfsr	2,3
  2803  003148  0100               	movlb	0	; () banked
  2804  00314A  51BC               	movf	_menu& (0+255),w,b
  2805  00314C  26D9               	addwf	fsr2l,f,c
  2806  00314E  0100               	movlb	0	; () banked
  2807  003150  51BD               	movf	(_menu+1)& (0+255),w,b
  2808  003152  22DA               	addwfc	fsr2h,f,c
  2809  003154  D801               	call	i2u582_48
  2810  003156  D014               	goto	i2l5464
  2811  003158                     i2u582_48:
  2812  003158  0005               	push	
  2813  00315A  6EFA               	movwf	pclath,c
  2814  00315C  50DE               	movf	postinc2,w,c
  2815  00315E  6EFD               	movwf	tosl,c
  2816  003160  50DE               	movf	postinc2,w,c
  2817  003162  6EFE               	movwf	tosh,c
  2818  003164  50F8               	movf	tblptru,w,c
  2819  003166  6EFF               	movwf	tosu,c
  2820  003168  50FA               	movf	pclath,w,c
  2821  00316A  0100               	movlb	0	; () banked
  2822  00316C  EE20 F001          	lfsr	2,1
  2823  003170  0100               	movlb	0	; () banked
  2824  003172  51BC               	movf	_menu& (0+255),w,b
  2825  003174  26D9               	addwf	fsr2l,f,c
  2826  003176  0100               	movlb	0	; () banked
  2827  003178  51BD               	movf	(_menu+1)& (0+255),w,b
  2828  00317A  22DA               	addwfc	fsr2h,f,c
  2829  00317C  50DF               	movf	indf2,w,c
  2830  00317E  0012               	return		;indir
  2831  003180                     i2l5464:
  2832                           
  2833                           ;temp-clock_main.c: 187: }
  2834                           ;temp-clock_main.c: 188: TMR0ON = 1;
  2835  003180  8ED5               	bsf	4053,7,c	;volatile
  2836  003182                     i2l5466:
  2837                           
  2838                           ;temp-clock_main.c: 189: }
  2839                           ;temp-clock_main.c: 190: GIE = 1;
  2840  003182  8EF2               	bsf	intcon,7,c	;volatile
  2841  003184  C0A7  FFF5         	movff	??_isr+13,tablat
  2842  003188  C0A6  FFF8         	movff	??_isr+12,tblptru
  2843  00318C  C0A5  FFF7         	movff	??_isr+11,tblptrh
  2844  003190  C0A4  FFF6         	movff	??_isr+10,tblptrl
  2845  003194  C0A3  FFF4         	movff	??_isr+9,prodh
  2846  003198  C0A2  FFF3         	movff	??_isr+8,prodl
  2847  00319C  C0A1  FFDA         	movff	??_isr+7,fsr2h
  2848  0031A0  C0A0  FFD9         	movff	??_isr+6,fsr2l
  2849  0031A4  C09F  FFE2         	movff	??_isr+5,fsr1h
  2850  0031A8  C09E  FFE1         	movff	??_isr+4,fsr1l
  2851  0031AC  C09D  FFEA         	movff	??_isr+3,fsr0h
  2852  0031B0  C09C  FFE9         	movff	??_isr+2,fsr0l
  2853  0031B4  C09B  FFFB         	movff	??_isr+1,pclatu
  2854  0031B8  C09A  FFFA         	movff	??_isr,pclath
  2855  0031BC  0011               	retfie		f
  2856  0031BE                     __end_of_isr:
  2857                           	opt stack 0
  2858                           tosu	equ	0xFFF
  2859                           tosh	equ	0xFFE
  2860                           tosl	equ	0xFFD
  2861                           pclatu	equ	0xFFB
  2862                           pclath	equ	0xFFA
  2863                           tblptru	equ	0xFF8
  2864                           tblptrh	equ	0xFF7
  2865                           tblptrl	equ	0xFF6
  2866                           tablat	equ	0xFF5
  2867                           prodh	equ	0xFF4
  2868                           prodl	equ	0xFF3
  2869                           intcon	equ	0xFF2
  2870                           intcon2	equ	0xFF1
  2871                           postinc0	equ	0xFEE
  2872                           fsr0h	equ	0xFEA
  2873                           fsr0l	equ	0xFE9
  2874                           wreg	equ	0xFE8
  2875                           postinc1	equ	0xFE6
  2876                           postdec1	equ	0xFE5
  2877                           fsr1h	equ	0xFE2
  2878                           fsr1l	equ	0xFE1
  2879                           indf2	equ	0xFDF
  2880                           postinc2	equ	0xFDE
  2881                           postdec2	equ	0xFDD
  2882                           fsr2h	equ	0xFDA
  2883                           fsr2l	equ	0xFD9
  2884                           status	equ	0xFD8
  2885                           
  2886 ;; *************** function _update *****************
  2887 ;; Defined at:
  2888 ;;		line 12 in file "disp.c"
  2889 ;; Parameters:    Size  Location     Type
  2890 ;;		None
  2891 ;; Auto vars:     Size  Location     Type
  2892 ;;  cnt             1   32[COMRAM] char 
  2893 ;; Return value:  Size  Location     Type
  2894 ;;		None               void
  2895 ;; Registers used:
  2896 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2897 ;; Tracked objects:
  2898 ;;		On entry : 0/0
  2899 ;;		On exit  : 0/0
  2900 ;;		Unchanged: 0/0
  2901 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2902 ;;      Params:         0       0       0       0       0       0       0       0       0
  2903 ;;      Locals:         1       0       0       0       0       0       0       0       0
  2904 ;;      Temps:          5       0       0       0       0       0       0       0       0
  2905 ;;      Totals:         6       0       0       0       0       0       0       0       0
  2906 ;;Total ram usage:        6 bytes
  2907 ;; Hardware stack levels used:    1
  2908 ;; Hardware stack levels required when called:    3
  2909 ;; This function calls:
  2910 ;;		_spi
  2911 ;;		_writeDigit
  2912 ;; This function is called by:
  2913 ;;		_isr
  2914 ;; This function uses a non-reentrant model
  2915 ;;
  2916                           
  2917                           	psect	text10
  2918  0013E8                     __ptext10:
  2919                           	opt stack 0
  2920  0013E8                     _update:
  2921                           	opt stack 23
  2922                           
  2923                           ;disp.c: 14: if (!screen.changed)
  2924                           
  2925                           ;incstack = 0
  2926  0013E8  0100               	movlb	0	; () banked
  2927  0013EA  51DF               	movf	(_screen+12)& (0+255),w,b
  2928  0013EC  11DE               	iorwf	(_screen+11)& (0+255),w,b
  2929  0013EE  B4D8               	btfsc	status,2,c
  2930  0013F0  D223               	goto	i2l58
  2931                           
  2932                           ; BSR set to: 0
  2933                           ;disp.c: 17: }
  2934                           ;disp.c: 18: int8_t cnt;
  2935                           ;disp.c: 19: for (cnt = 15; cnt >= 0; cnt--)
  2936                           
  2937                           ; BSR set to: 0
  2938                           
  2939                           ; BSR set to: 0
  2940                           ;disp.c: 15: {
  2941                           ;disp.c: 16: return;
  2942  0013F2  0E0F               	movlw	15
  2943  0013F4  6E21               	movwf	update@cnt,c
  2944  0013F6                     
  2945                           ; BSR set to: 0
  2946  0013F6  BE21               	btfsc	update@cnt,7,c
  2947  0013F8  D21F               	goto	i2l58
  2948  0013FA  D046               	goto	i2l5074
  2949  0013FC                     i2l5060:
  2950                           
  2951                           ; BSR set to: 0
  2952                           ;disp.c: 24: writeDigit(1 << cnt, screen.digits.screen[cnt].bits);
  2953  0013FC  5021               	movf	update@cnt,w,c
  2954  0013FE  0D01               	mullw	1
  2955  001400  0100               	movlb	0	; () banked
  2956  001402  0ED3               	movlw	low _screen
  2957  001404  24F3               	addwf	prodl,w,c
  2958  001406  6ED9               	movwf	fsr2l,c
  2959  001408  0100               	movlb	0	; () banked
  2960  00140A  0E00               	movlw	high _screen
  2961  00140C  20F4               	addwfc	prodh,w,c
  2962  00140E  6EDA               	movwf	fsr2h,c
  2963  001410  50DF               	movf	indf2,w,c
  2964  001412  6E14               	movwf	writeDigit@segs,c
  2965  001414  C021  F01C         	movff	update@cnt,??_update
  2966  001418  0E01               	movlw	1
  2967  00141A  6E1D               	movwf	(??_update+1)& (0+255),c
  2968  00141C  2A1C               	incf	??_update,f,c
  2969  00141E  D002               	goto	i2u538_44
  2970  001420                     i2u538_45:
  2971  001420  90D8               	bcf	status,0,c
  2972  001422  361D               	rlcf	??_update+1,f,c
  2973  001424                     i2u538_44:
  2974  001424  2E1C               	decfsz	??_update,f,c
  2975  001426  D7FC               	goto	i2u538_45
  2976  001428  501D               	movf	??_update+1,w,c
  2977  00142A  EC45  F021         	call	_writeDigit
  2978                           
  2979                           ;disp.c: 25: break;
  2980  00142E  D1EC               	goto	i2l5076
  2981  001430                     i2l5062:
  2982                           
  2983                           ;disp.c: 27: spi(0b1001, screen.decode);
  2984  001430  0100               	movlb	0	; () banked
  2985  001432  51DB               	movf	(_screen+8)& (0+255),w,b
  2986  001434  0BFF               	andlw	255
  2987  001436  6E07               	movwf	spi@data,c
  2988  001438  0E09               	movlw	9
  2989  00143A  EC16  F01E         	call	_spi
  2990                           
  2991                           ;disp.c: 28: break;
  2992  00143E  D1E4               	goto	i2l5076
  2993  001440                     i2l5064:
  2994                           
  2995                           ;disp.c: 30: spi(0b1010, screen.brightness);
  2996  001440  0100               	movlb	0	; () banked
  2997  001442  51DC               	movf	(_screen+9)& (0+255),w,b
  2998  001444  0B0F               	andlw	15
  2999  001446  6E07               	movwf	spi@data,c
  3000  001448  0E0A               	movlw	10
  3001  00144A  EC16  F01E         	call	_spi
  3002                           
  3003                           ;disp.c: 31: break;
  3004  00144E  D1DC               	goto	i2l5076
  3005  001450                     i2l5066:
  3006                           
  3007                           ;disp.c: 33: spi(0b1011, screen.scan);
  3008  001450  0100               	movlb	0	; () banked
  3009  001452  39DC               	swapf	(_screen+9)& (0+255),w,b
  3010  001454  0B07               	andlw	7
  3011  001456  6E07               	movwf	spi@data,c
  3012  001458  0E0B               	movlw	11
  3013  00145A  EC16  F01E         	call	_spi
  3014                           
  3015                           ;disp.c: 34: break;
  3016  00145E  D1D4               	goto	i2l5076
  3017  001460                     i2l5068:
  3018                           
  3019                           ;disp.c: 36: spi(0b1111, screen.test);
  3020  001460  0E00               	movlw	0
  3021  001462  0100               	movlb	0	; () banked
  3022  001464  BFDC               	btfsc	(_screen+9)& (0+255),7,b
  3023  001466  0E01               	movlw	1
  3024  001468  6E07               	movwf	spi@data,c
  3025  00146A  0E0F               	movlw	15
  3026  00146C  EC16  F01E         	call	_spi
  3027                           
  3028                           ;disp.c: 37: break;
  3029  001470  D1CB               	goto	i2l5076
  3030  001472                     i2l5070:
  3031                           
  3032                           ;disp.c: 39: spi(0b1100, !screen.shutdown);
  3033  001472  0100               	movlb	0	; () banked
  3034  001474  B1DD               	btfsc	(_screen+10)& (0+255),0,b
  3035  001476  D002               	goto	i2u539_40
  3036  001478  0E01               	movlw	1
  3037  00147A  D001               	goto	i2u539_46
  3038  00147C                     i2u539_40:
  3039  00147C  0E00               	movlw	0
  3040  00147E                     i2u539_46:
  3041  00147E  6E07               	movwf	spi@data,c
  3042  001480  0E0C               	movlw	12
  3043  001482  EC16  F01E         	call	_spi
  3044                           
  3045                           ;disp.c: 40: break;
  3046  001486  D1C0               	goto	i2l5076
  3047  001488                     i2l5074:
  3048  001488  C021  F01C         	movff	update@cnt,??_update
  3049  00148C  0E01               	movlw	1
  3050  00148E  6E1D               	movwf	(??_update+1)& (0+255),c
  3051  001490  6A1E               	clrf	(??_update+2)& (0+255),c
  3052  001492  2A1C               	incf	??_update,f,c
  3053  001494  D003               	goto	i2u540_44
  3054  001496                     i2u540_45:
  3055  001496  90D8               	bcf	status,0,c
  3056  001498  361D               	rlcf	??_update+1,f,c
  3057  00149A  361E               	rlcf	??_update+2,f,c
  3058  00149C                     i2u540_44:
  3059  00149C  2E1C               	decfsz	??_update,f,c
  3060  00149E  D7FB               	goto	i2u540_45
  3061  0014A0  0100               	movlb	0	; () banked
  3062  0014A2  51DE               	movf	(_screen+11)& (0+255),w,b
  3063  0014A4  161D               	andwf	??_update+1,f,c
  3064  0014A6  0100               	movlb	0	; () banked
  3065  0014A8  51DF               	movf	(_screen+12)& (0+255),w,b
  3066  0014AA  161E               	andwf	??_update+2,f,c
  3067                           
  3068                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 6 sub-sw
      +                          itches
  3069                           ; Switch size 1, requested type "space"
  3070                           ; Number of cases is 6, Range of values is 0 to 32
  3071                           ; switch strategies available:
  3072                           ; Name         Instructions Cycles
  3073                           ; simple_byte           19    10 (average)
  3074                           ;	Chosen strategy is simple_byte
  3075  0014AC  501E               	movf	??_update+2,w,c
  3076  0014AE  0A00               	xorlw	0	; case 0
  3077  0014B0  B4D8               	btfsc	status,2,c
  3078  0014B2  D010               	goto	i2l5890
  3079  0014B4  0A02               	xorlw	2	; case 2
  3080  0014B6  B4D8               	btfsc	status,2,c
  3081  0014B8  D18F               	goto	i2l5892
  3082  0014BA  0A06               	xorlw	6	; case 4
  3083  0014BC  B4D8               	btfsc	status,2,c
  3084  0014BE  D191               	goto	i2l5894
  3085  0014C0  0A0C               	xorlw	12	; case 8
  3086  0014C2  B4D8               	btfsc	status,2,c
  3087  0014C4  D193               	goto	i2l5896
  3088  0014C6  0A18               	xorlw	24	; case 16
  3089  0014C8  B4D8               	btfsc	status,2,c
  3090  0014CA  D195               	goto	i2l5898
  3091  0014CC  0A30               	xorlw	48	; case 32
  3092  0014CE  B4D8               	btfsc	status,2,c
  3093  0014D0  D197               	goto	i2l5900
  3094  0014D2  D19A               	goto	i2l5076
  3095  0014D4                     i2l5890:
  3096                           
  3097                           ; BSR set to: 0
  3098                           ; Switch size 1, requested type "space"
  3099                           ; Number of cases is 128, Range of values is 1 to 128
  3100                           ; switch strategies available:
  3101                           ; Name         Instructions Cycles
  3102                           ; simple_byte          385   193 (average)
  3103                           ;	Chosen strategy is simple_byte
  3104  0014D4  501D               	movf	??_update+1,w,c
  3105  0014D6  0A01               	xorlw	1	; case 1
  3106  0014D8  B4D8               	btfsc	status,2,c
  3107  0014DA  D790               	goto	i2l5060
  3108  0014DC  0A03               	xorlw	3	; case 2
  3109  0014DE  B4D8               	btfsc	status,2,c
  3110  0014E0  D78D               	goto	i2l5060
  3111  0014E2  0A01               	xorlw	1	; case 3
  3112  0014E4  B4D8               	btfsc	status,2,c
  3113  0014E6  D78A               	goto	i2l5060
  3114  0014E8  0A07               	xorlw	7	; case 4
  3115  0014EA  B4D8               	btfsc	status,2,c
  3116  0014EC  D787               	goto	i2l5060
  3117  0014EE  0A01               	xorlw	1	; case 5
  3118  0014F0  B4D8               	btfsc	status,2,c
  3119  0014F2  D784               	goto	i2l5060
  3120  0014F4  0A03               	xorlw	3	; case 6
  3121  0014F6  B4D8               	btfsc	status,2,c
  3122  0014F8  D781               	goto	i2l5060
  3123  0014FA  0A01               	xorlw	1	; case 7
  3124  0014FC  B4D8               	btfsc	status,2,c
  3125  0014FE  D77E               	goto	i2l5060
  3126  001500  0A0F               	xorlw	15	; case 8
  3127  001502  B4D8               	btfsc	status,2,c
  3128  001504  D77B               	goto	i2l5060
  3129  001506  0A01               	xorlw	1	; case 9
  3130  001508  B4D8               	btfsc	status,2,c
  3131  00150A  D778               	goto	i2l5060
  3132  00150C  0A03               	xorlw	3	; case 10
  3133  00150E  B4D8               	btfsc	status,2,c
  3134  001510  D775               	goto	i2l5060
  3135  001512  0A01               	xorlw	1	; case 11
  3136  001514  B4D8               	btfsc	status,2,c
  3137  001516  D772               	goto	i2l5060
  3138  001518  0A07               	xorlw	7	; case 12
  3139  00151A  B4D8               	btfsc	status,2,c
  3140  00151C  D76F               	goto	i2l5060
  3141  00151E  0A01               	xorlw	1	; case 13
  3142  001520  B4D8               	btfsc	status,2,c
  3143  001522  D76C               	goto	i2l5060
  3144  001524  0A03               	xorlw	3	; case 14
  3145  001526  B4D8               	btfsc	status,2,c
  3146  001528  D769               	goto	i2l5060
  3147  00152A  0A01               	xorlw	1	; case 15
  3148  00152C  B4D8               	btfsc	status,2,c
  3149  00152E  D766               	goto	i2l5060
  3150  001530  0A1F               	xorlw	31	; case 16
  3151  001532  B4D8               	btfsc	status,2,c
  3152  001534  D763               	goto	i2l5060
  3153  001536  0A01               	xorlw	1	; case 17
  3154  001538  B4D8               	btfsc	status,2,c
  3155  00153A  D760               	goto	i2l5060
  3156  00153C  0A03               	xorlw	3	; case 18
  3157  00153E  B4D8               	btfsc	status,2,c
  3158  001540  D75D               	goto	i2l5060
  3159  001542  0A01               	xorlw	1	; case 19
  3160  001544  B4D8               	btfsc	status,2,c
  3161  001546  D75A               	goto	i2l5060
  3162  001548  0A07               	xorlw	7	; case 20
  3163  00154A  B4D8               	btfsc	status,2,c
  3164  00154C  D757               	goto	i2l5060
  3165  00154E  0A01               	xorlw	1	; case 21
  3166  001550  B4D8               	btfsc	status,2,c
  3167  001552  D754               	goto	i2l5060
  3168  001554  0A03               	xorlw	3	; case 22
  3169  001556  B4D8               	btfsc	status,2,c
  3170  001558  D751               	goto	i2l5060
  3171  00155A  0A01               	xorlw	1	; case 23
  3172  00155C  B4D8               	btfsc	status,2,c
  3173  00155E  D74E               	goto	i2l5060
  3174  001560  0A0F               	xorlw	15	; case 24
  3175  001562  B4D8               	btfsc	status,2,c
  3176  001564  D74B               	goto	i2l5060
  3177  001566  0A01               	xorlw	1	; case 25
  3178  001568  B4D8               	btfsc	status,2,c
  3179  00156A  D748               	goto	i2l5060
  3180  00156C  0A03               	xorlw	3	; case 26
  3181  00156E  B4D8               	btfsc	status,2,c
  3182  001570  D745               	goto	i2l5060
  3183  001572  0A01               	xorlw	1	; case 27
  3184  001574  B4D8               	btfsc	status,2,c
  3185  001576  D742               	goto	i2l5060
  3186  001578  0A07               	xorlw	7	; case 28
  3187  00157A  B4D8               	btfsc	status,2,c
  3188  00157C  D73F               	goto	i2l5060
  3189  00157E  0A01               	xorlw	1	; case 29
  3190  001580  B4D8               	btfsc	status,2,c
  3191  001582  D73C               	goto	i2l5060
  3192  001584  0A03               	xorlw	3	; case 30
  3193  001586  B4D8               	btfsc	status,2,c
  3194  001588  D739               	goto	i2l5060
  3195  00158A  0A01               	xorlw	1	; case 31
  3196  00158C  B4D8               	btfsc	status,2,c
  3197  00158E  D736               	goto	i2l5060
  3198  001590  0A3F               	xorlw	63	; case 32
  3199  001592  B4D8               	btfsc	status,2,c
  3200  001594  D733               	goto	i2l5060
  3201  001596  0A01               	xorlw	1	; case 33
  3202  001598  B4D8               	btfsc	status,2,c
  3203  00159A  D730               	goto	i2l5060
  3204  00159C  0A03               	xorlw	3	; case 34
  3205  00159E  B4D8               	btfsc	status,2,c
  3206  0015A0  D72D               	goto	i2l5060
  3207  0015A2  0A01               	xorlw	1	; case 35
  3208  0015A4  B4D8               	btfsc	status,2,c
  3209  0015A6  D72A               	goto	i2l5060
  3210  0015A8  0A07               	xorlw	7	; case 36
  3211  0015AA  B4D8               	btfsc	status,2,c
  3212  0015AC  D727               	goto	i2l5060
  3213  0015AE  0A01               	xorlw	1	; case 37
  3214  0015B0  B4D8               	btfsc	status,2,c
  3215  0015B2  D724               	goto	i2l5060
  3216  0015B4  0A03               	xorlw	3	; case 38
  3217  0015B6  B4D8               	btfsc	status,2,c
  3218  0015B8  D721               	goto	i2l5060
  3219  0015BA  0A01               	xorlw	1	; case 39
  3220  0015BC  B4D8               	btfsc	status,2,c
  3221  0015BE  D71E               	goto	i2l5060
  3222  0015C0  0A0F               	xorlw	15	; case 40
  3223  0015C2  B4D8               	btfsc	status,2,c
  3224  0015C4  D71B               	goto	i2l5060
  3225  0015C6  0A01               	xorlw	1	; case 41
  3226  0015C8  B4D8               	btfsc	status,2,c
  3227  0015CA  D718               	goto	i2l5060
  3228  0015CC  0A03               	xorlw	3	; case 42
  3229  0015CE  B4D8               	btfsc	status,2,c
  3230  0015D0  D715               	goto	i2l5060
  3231  0015D2  0A01               	xorlw	1	; case 43
  3232  0015D4  B4D8               	btfsc	status,2,c
  3233  0015D6  D712               	goto	i2l5060
  3234  0015D8  0A07               	xorlw	7	; case 44
  3235  0015DA  B4D8               	btfsc	status,2,c
  3236  0015DC  D70F               	goto	i2l5060
  3237  0015DE  0A01               	xorlw	1	; case 45
  3238  0015E0  B4D8               	btfsc	status,2,c
  3239  0015E2  D70C               	goto	i2l5060
  3240  0015E4  0A03               	xorlw	3	; case 46
  3241  0015E6  B4D8               	btfsc	status,2,c
  3242  0015E8  D709               	goto	i2l5060
  3243  0015EA  0A01               	xorlw	1	; case 47
  3244  0015EC  B4D8               	btfsc	status,2,c
  3245  0015EE  D706               	goto	i2l5060
  3246  0015F0  0A1F               	xorlw	31	; case 48
  3247  0015F2  B4D8               	btfsc	status,2,c
  3248  0015F4  D703               	goto	i2l5060
  3249  0015F6  0A01               	xorlw	1	; case 49
  3250  0015F8  B4D8               	btfsc	status,2,c
  3251  0015FA  D700               	goto	i2l5060
  3252  0015FC  0A03               	xorlw	3	; case 50
  3253  0015FE  B4D8               	btfsc	status,2,c
  3254  001600  D6FD               	goto	i2l5060
  3255  001602  0A01               	xorlw	1	; case 51
  3256  001604  B4D8               	btfsc	status,2,c
  3257  001606  D6FA               	goto	i2l5060
  3258  001608  0A07               	xorlw	7	; case 52
  3259  00160A  B4D8               	btfsc	status,2,c
  3260  00160C  D6F7               	goto	i2l5060
  3261  00160E  0A01               	xorlw	1	; case 53
  3262  001610  B4D8               	btfsc	status,2,c
  3263  001612  D6F4               	goto	i2l5060
  3264  001614  0A03               	xorlw	3	; case 54
  3265  001616  B4D8               	btfsc	status,2,c
  3266  001618  D6F1               	goto	i2l5060
  3267  00161A  0A01               	xorlw	1	; case 55
  3268  00161C  B4D8               	btfsc	status,2,c
  3269  00161E  D6EE               	goto	i2l5060
  3270  001620  0A0F               	xorlw	15	; case 56
  3271  001622  B4D8               	btfsc	status,2,c
  3272  001624  D6EB               	goto	i2l5060
  3273  001626  0A01               	xorlw	1	; case 57
  3274  001628  B4D8               	btfsc	status,2,c
  3275  00162A  D6E8               	goto	i2l5060
  3276  00162C  0A03               	xorlw	3	; case 58
  3277  00162E  B4D8               	btfsc	status,2,c
  3278  001630  D6E5               	goto	i2l5060
  3279  001632  0A01               	xorlw	1	; case 59
  3280  001634  B4D8               	btfsc	status,2,c
  3281  001636  D6E2               	goto	i2l5060
  3282  001638  0A07               	xorlw	7	; case 60
  3283  00163A  B4D8               	btfsc	status,2,c
  3284  00163C  D6DF               	goto	i2l5060
  3285  00163E  0A01               	xorlw	1	; case 61
  3286  001640  B4D8               	btfsc	status,2,c
  3287  001642  D6DC               	goto	i2l5060
  3288  001644  0A03               	xorlw	3	; case 62
  3289  001646  B4D8               	btfsc	status,2,c
  3290  001648  D6D9               	goto	i2l5060
  3291  00164A  0A01               	xorlw	1	; case 63
  3292  00164C  B4D8               	btfsc	status,2,c
  3293  00164E  D6D6               	goto	i2l5060
  3294  001650  0A7F               	xorlw	127	; case 64
  3295  001652  B4D8               	btfsc	status,2,c
  3296  001654  D6D3               	goto	i2l5060
  3297  001656  0A01               	xorlw	1	; case 65
  3298  001658  B4D8               	btfsc	status,2,c
  3299  00165A  D6D0               	goto	i2l5060
  3300  00165C  0A03               	xorlw	3	; case 66
  3301  00165E  B4D8               	btfsc	status,2,c
  3302  001660  D6CD               	goto	i2l5060
  3303  001662  0A01               	xorlw	1	; case 67
  3304  001664  B4D8               	btfsc	status,2,c
  3305  001666  D6CA               	goto	i2l5060
  3306  001668  0A07               	xorlw	7	; case 68
  3307  00166A  B4D8               	btfsc	status,2,c
  3308  00166C  D6C7               	goto	i2l5060
  3309  00166E  0A01               	xorlw	1	; case 69
  3310  001670  B4D8               	btfsc	status,2,c
  3311  001672  D6C4               	goto	i2l5060
  3312  001674  0A03               	xorlw	3	; case 70
  3313  001676  B4D8               	btfsc	status,2,c
  3314  001678  D6C1               	goto	i2l5060
  3315  00167A  0A01               	xorlw	1	; case 71
  3316  00167C  B4D8               	btfsc	status,2,c
  3317  00167E  D6BE               	goto	i2l5060
  3318  001680  0A0F               	xorlw	15	; case 72
  3319  001682  B4D8               	btfsc	status,2,c
  3320  001684  D6BB               	goto	i2l5060
  3321  001686  0A01               	xorlw	1	; case 73
  3322  001688  B4D8               	btfsc	status,2,c
  3323  00168A  D6B8               	goto	i2l5060
  3324  00168C  0A03               	xorlw	3	; case 74
  3325  00168E  B4D8               	btfsc	status,2,c
  3326  001690  D6B5               	goto	i2l5060
  3327  001692  0A01               	xorlw	1	; case 75
  3328  001694  B4D8               	btfsc	status,2,c
  3329  001696  D6B2               	goto	i2l5060
  3330  001698  0A07               	xorlw	7	; case 76
  3331  00169A  B4D8               	btfsc	status,2,c
  3332  00169C  D6AF               	goto	i2l5060
  3333  00169E  0A01               	xorlw	1	; case 77
  3334  0016A0  B4D8               	btfsc	status,2,c
  3335  0016A2  D6AC               	goto	i2l5060
  3336  0016A4  0A03               	xorlw	3	; case 78
  3337  0016A6  B4D8               	btfsc	status,2,c
  3338  0016A8  D6A9               	goto	i2l5060
  3339  0016AA  0A01               	xorlw	1	; case 79
  3340  0016AC  B4D8               	btfsc	status,2,c
  3341  0016AE  D6A6               	goto	i2l5060
  3342  0016B0  0A1F               	xorlw	31	; case 80
  3343  0016B2  B4D8               	btfsc	status,2,c
  3344  0016B4  D6A3               	goto	i2l5060
  3345  0016B6  0A01               	xorlw	1	; case 81
  3346  0016B8  B4D8               	btfsc	status,2,c
  3347  0016BA  D6A0               	goto	i2l5060
  3348  0016BC  0A03               	xorlw	3	; case 82
  3349  0016BE  B4D8               	btfsc	status,2,c
  3350  0016C0  D69D               	goto	i2l5060
  3351  0016C2  0A01               	xorlw	1	; case 83
  3352  0016C4  B4D8               	btfsc	status,2,c
  3353  0016C6  D69A               	goto	i2l5060
  3354  0016C8  0A07               	xorlw	7	; case 84
  3355  0016CA  B4D8               	btfsc	status,2,c
  3356  0016CC  D697               	goto	i2l5060
  3357  0016CE  0A01               	xorlw	1	; case 85
  3358  0016D0  B4D8               	btfsc	status,2,c
  3359  0016D2  D694               	goto	i2l5060
  3360  0016D4  0A03               	xorlw	3	; case 86
  3361  0016D6  B4D8               	btfsc	status,2,c
  3362  0016D8  D691               	goto	i2l5060
  3363  0016DA  0A01               	xorlw	1	; case 87
  3364  0016DC  B4D8               	btfsc	status,2,c
  3365  0016DE  D68E               	goto	i2l5060
  3366  0016E0  0A0F               	xorlw	15	; case 88
  3367  0016E2  B4D8               	btfsc	status,2,c
  3368  0016E4  D68B               	goto	i2l5060
  3369  0016E6  0A01               	xorlw	1	; case 89
  3370  0016E8  B4D8               	btfsc	status,2,c
  3371  0016EA  D688               	goto	i2l5060
  3372  0016EC  0A03               	xorlw	3	; case 90
  3373  0016EE  B4D8               	btfsc	status,2,c
  3374  0016F0  D685               	goto	i2l5060
  3375  0016F2  0A01               	xorlw	1	; case 91
  3376  0016F4  B4D8               	btfsc	status,2,c
  3377  0016F6  D682               	goto	i2l5060
  3378  0016F8  0A07               	xorlw	7	; case 92
  3379  0016FA  B4D8               	btfsc	status,2,c
  3380  0016FC  D67F               	goto	i2l5060
  3381  0016FE  0A01               	xorlw	1	; case 93
  3382  001700  B4D8               	btfsc	status,2,c
  3383  001702  D67C               	goto	i2l5060
  3384  001704  0A03               	xorlw	3	; case 94
  3385  001706  B4D8               	btfsc	status,2,c
  3386  001708  D679               	goto	i2l5060
  3387  00170A  0A01               	xorlw	1	; case 95
  3388  00170C  B4D8               	btfsc	status,2,c
  3389  00170E  D676               	goto	i2l5060
  3390  001710  0A3F               	xorlw	63	; case 96
  3391  001712  B4D8               	btfsc	status,2,c
  3392  001714  D673               	goto	i2l5060
  3393  001716  0A01               	xorlw	1	; case 97
  3394  001718  B4D8               	btfsc	status,2,c
  3395  00171A  D670               	goto	i2l5060
  3396  00171C  0A03               	xorlw	3	; case 98
  3397  00171E  B4D8               	btfsc	status,2,c
  3398  001720  D66D               	goto	i2l5060
  3399  001722  0A01               	xorlw	1	; case 99
  3400  001724  B4D8               	btfsc	status,2,c
  3401  001726  D66A               	goto	i2l5060
  3402  001728  0A07               	xorlw	7	; case 100
  3403  00172A  B4D8               	btfsc	status,2,c
  3404  00172C  D667               	goto	i2l5060
  3405  00172E  0A01               	xorlw	1	; case 101
  3406  001730  B4D8               	btfsc	status,2,c
  3407  001732  D664               	goto	i2l5060
  3408  001734  0A03               	xorlw	3	; case 102
  3409  001736  B4D8               	btfsc	status,2,c
  3410  001738  D661               	goto	i2l5060
  3411  00173A  0A01               	xorlw	1	; case 103
  3412  00173C  B4D8               	btfsc	status,2,c
  3413  00173E  D65E               	goto	i2l5060
  3414  001740  0A0F               	xorlw	15	; case 104
  3415  001742  B4D8               	btfsc	status,2,c
  3416  001744  D65B               	goto	i2l5060
  3417  001746  0A01               	xorlw	1	; case 105
  3418  001748  B4D8               	btfsc	status,2,c
  3419  00174A  D658               	goto	i2l5060
  3420  00174C  0A03               	xorlw	3	; case 106
  3421  00174E  B4D8               	btfsc	status,2,c
  3422  001750  D655               	goto	i2l5060
  3423  001752  0A01               	xorlw	1	; case 107
  3424  001754  B4D8               	btfsc	status,2,c
  3425  001756  D652               	goto	i2l5060
  3426  001758  0A07               	xorlw	7	; case 108
  3427  00175A  B4D8               	btfsc	status,2,c
  3428  00175C  D64F               	goto	i2l5060
  3429  00175E  0A01               	xorlw	1	; case 109
  3430  001760  B4D8               	btfsc	status,2,c
  3431  001762  D64C               	goto	i2l5060
  3432  001764  0A03               	xorlw	3	; case 110
  3433  001766  B4D8               	btfsc	status,2,c
  3434  001768  D649               	goto	i2l5060
  3435  00176A  0A01               	xorlw	1	; case 111
  3436  00176C  B4D8               	btfsc	status,2,c
  3437  00176E  D646               	goto	i2l5060
  3438  001770  0A1F               	xorlw	31	; case 112
  3439  001772  B4D8               	btfsc	status,2,c
  3440  001774  D643               	goto	i2l5060
  3441  001776  0A01               	xorlw	1	; case 113
  3442  001778  B4D8               	btfsc	status,2,c
  3443  00177A  D640               	goto	i2l5060
  3444  00177C  0A03               	xorlw	3	; case 114
  3445  00177E  B4D8               	btfsc	status,2,c
  3446  001780  D63D               	goto	i2l5060
  3447  001782  0A01               	xorlw	1	; case 115
  3448  001784  B4D8               	btfsc	status,2,c
  3449  001786  D63A               	goto	i2l5060
  3450  001788  0A07               	xorlw	7	; case 116
  3451  00178A  B4D8               	btfsc	status,2,c
  3452  00178C  D637               	goto	i2l5060
  3453  00178E  0A01               	xorlw	1	; case 117
  3454  001790  B4D8               	btfsc	status,2,c
  3455  001792  D634               	goto	i2l5060
  3456  001794  0A03               	xorlw	3	; case 118
  3457  001796  B4D8               	btfsc	status,2,c
  3458  001798  D631               	goto	i2l5060
  3459  00179A  0A01               	xorlw	1	; case 119
  3460  00179C  B4D8               	btfsc	status,2,c
  3461  00179E  D62E               	goto	i2l5060
  3462  0017A0  0A0F               	xorlw	15	; case 120
  3463  0017A2  B4D8               	btfsc	status,2,c
  3464  0017A4  D62B               	goto	i2l5060
  3465  0017A6  0A01               	xorlw	1	; case 121
  3466  0017A8  B4D8               	btfsc	status,2,c
  3467  0017AA  D628               	goto	i2l5060
  3468  0017AC  0A03               	xorlw	3	; case 122
  3469  0017AE  B4D8               	btfsc	status,2,c
  3470  0017B0  D625               	goto	i2l5060
  3471  0017B2  0A01               	xorlw	1	; case 123
  3472  0017B4  B4D8               	btfsc	status,2,c
  3473  0017B6  D622               	goto	i2l5060
  3474  0017B8  0A07               	xorlw	7	; case 124
  3475  0017BA  B4D8               	btfsc	status,2,c
  3476  0017BC  D61F               	goto	i2l5060
  3477  0017BE  0A01               	xorlw	1	; case 125
  3478  0017C0  B4D8               	btfsc	status,2,c
  3479  0017C2  D61C               	goto	i2l5060
  3480  0017C4  0A03               	xorlw	3	; case 126
  3481  0017C6  B4D8               	btfsc	status,2,c
  3482  0017C8  D619               	goto	i2l5060
  3483  0017CA  0A01               	xorlw	1	; case 127
  3484  0017CC  B4D8               	btfsc	status,2,c
  3485  0017CE  D616               	goto	i2l5060
  3486  0017D0  0AFF               	xorlw	255	; case 128
  3487  0017D2  B4D8               	btfsc	status,2,c
  3488  0017D4  D613               	goto	i2l5060
  3489  0017D6  D018               	goto	i2l5076
  3490  0017D8                     i2l5892:
  3491                           
  3492                           ; BSR set to: 0
  3493                           ; Switch size 1, requested type "space"
  3494                           ; Number of cases is 1, Range of values is 0 to 0
  3495                           ; switch strategies available:
  3496                           ; Name         Instructions Cycles
  3497                           ; simple_byte            4     3 (average)
  3498                           ;	Chosen strategy is simple_byte
  3499  0017D8  501D               	movf	??_update+1,w,c
  3500  0017DA  0A00               	xorlw	0	; case 0
  3501  0017DC  B4D8               	btfsc	status,2,c
  3502  0017DE  D628               	goto	i2l5062
  3503  0017E0  D013               	goto	i2l5076
  3504  0017E2                     i2l5894:
  3505                           
  3506                           ; BSR set to: 0
  3507                           ; Switch size 1, requested type "space"
  3508                           ; Number of cases is 1, Range of values is 0 to 0
  3509                           ; switch strategies available:
  3510                           ; Name         Instructions Cycles
  3511                           ; simple_byte            4     3 (average)
  3512                           ;	Chosen strategy is simple_byte
  3513  0017E2  501D               	movf	??_update+1,w,c
  3514  0017E4  0A00               	xorlw	0	; case 0
  3515  0017E6  B4D8               	btfsc	status,2,c
  3516  0017E8  D62B               	goto	i2l5064
  3517  0017EA  D00E               	goto	i2l5076
  3518  0017EC                     i2l5896:
  3519                           
  3520                           ; BSR set to: 0
  3521                           ; Switch size 1, requested type "space"
  3522                           ; Number of cases is 1, Range of values is 0 to 0
  3523                           ; switch strategies available:
  3524                           ; Name         Instructions Cycles
  3525                           ; simple_byte            4     3 (average)
  3526                           ;	Chosen strategy is simple_byte
  3527  0017EC  501D               	movf	??_update+1,w,c
  3528  0017EE  0A00               	xorlw	0	; case 0
  3529  0017F0  B4D8               	btfsc	status,2,c
  3530  0017F2  D62E               	goto	i2l5066
  3531  0017F4  D009               	goto	i2l5076
  3532  0017F6                     i2l5898:
  3533                           
  3534                           ; BSR set to: 0
  3535                           ; Switch size 1, requested type "space"
  3536                           ; Number of cases is 1, Range of values is 0 to 0
  3537                           ; switch strategies available:
  3538                           ; Name         Instructions Cycles
  3539                           ; simple_byte            4     3 (average)
  3540                           ;	Chosen strategy is simple_byte
  3541  0017F6  501D               	movf	??_update+1,w,c
  3542  0017F8  0A00               	xorlw	0	; case 0
  3543  0017FA  B4D8               	btfsc	status,2,c
  3544  0017FC  D631               	goto	i2l5068
  3545  0017FE  D004               	goto	i2l5076
  3546  001800                     i2l5900:
  3547                           
  3548                           ; BSR set to: 0
  3549                           ; Switch size 1, requested type "space"
  3550                           ; Number of cases is 1, Range of values is 0 to 0
  3551                           ; switch strategies available:
  3552                           ; Name         Instructions Cycles
  3553                           ; simple_byte            4     3 (average)
  3554                           ;	Chosen strategy is simple_byte
  3555  001800  501D               	movf	??_update+1,w,c
  3556  001802  0A00               	xorlw	0	; case 0
  3557  001804  B4D8               	btfsc	status,2,c
  3558  001806  D635               	goto	i2l5070
  3559  001808                     i2l5076:
  3560                           
  3561                           ;disp.c: 44: screen.changed &= ~(1 << cnt);
  3562  001808  C021  F01C         	movff	update@cnt,??_update
  3563  00180C  0E01               	movlw	1
  3564  00180E  6E1D               	movwf	(??_update+1)& (0+255),c
  3565  001810  6A1E               	clrf	(??_update+2)& (0+255),c
  3566  001812  2A1C               	incf	??_update,f,c
  3567  001814  D003               	goto	i2u541_44
  3568  001816                     i2u541_45:
  3569  001816  90D8               	bcf	status,0,c
  3570  001818  361D               	rlcf	??_update+1,f,c
  3571  00181A  361E               	rlcf	??_update+2,f,c
  3572  00181C                     i2u541_44:
  3573  00181C  2E1C               	decfsz	??_update,f,c
  3574  00181E  D7FB               	goto	i2u541_45
  3575  001820  1C1D               	comf	??_update+1,w,c
  3576  001822  6E1F               	movwf	(??_update+3)& (0+255),c
  3577  001824  1C1E               	comf	??_update+2,w,c
  3578  001826  6E20               	movwf	(??_update+4)& (0+255),c
  3579  001828  501F               	movf	??_update+3,w,c
  3580  00182A  0100               	movlb	0	; () banked
  3581  00182C  17DE               	andwf	(_screen+11)& (0+255),f,b
  3582  00182E  5020               	movf	??_update+4,w,c
  3583  001830  0100               	movlb	0	; () banked
  3584  001832  17DF               	andwf	(_screen+12)& (0+255),f,b
  3585                           
  3586                           ; BSR set to: 0
  3587  001834  0621               	decf	update@cnt,f,c
  3588  001836  D5DF               	goto	L3
  3589  001838                     i2l58:
  3590                           
  3591                           ; BSR set to: 0
  3592  001838  0012               	return	
  3593  00183A                     __end_of_update:
  3594                           	opt stack 0
  3595                           tosu	equ	0xFFF
  3596                           tosh	equ	0xFFE
  3597                           tosl	equ	0xFFD
  3598                           pclatu	equ	0xFFB
  3599                           pclath	equ	0xFFA
  3600                           tblptru	equ	0xFF8
  3601                           tblptrh	equ	0xFF7
  3602                           tblptrl	equ	0xFF6
  3603                           tablat	equ	0xFF5
  3604                           prodh	equ	0xFF4
  3605                           prodl	equ	0xFF3
  3606                           intcon	equ	0xFF2
  3607                           intcon2	equ	0xFF1
  3608                           postinc0	equ	0xFEE
  3609                           fsr0h	equ	0xFEA
  3610                           fsr0l	equ	0xFE9
  3611                           wreg	equ	0xFE8
  3612                           postinc1	equ	0xFE6
  3613                           postdec1	equ	0xFE5
  3614                           fsr1h	equ	0xFE2
  3615                           fsr1l	equ	0xFE1
  3616                           indf2	equ	0xFDF
  3617                           postinc2	equ	0xFDE
  3618                           postdec2	equ	0xFDD
  3619                           fsr2h	equ	0xFDA
  3620                           fsr2l	equ	0xFD9
  3621                           status	equ	0xFD8
  3622                           
  3623 ;; *************** function _writeDigit *****************
  3624 ;; Defined at:
  3625 ;;		line 113 in file "disp.c"
  3626 ;; Parameters:    Size  Location     Type
  3627 ;;  digit           1    wreg     unsigned char 
  3628 ;;  segs            1   19[COMRAM] unsigned char 
  3629 ;; Auto vars:     Size  Location     Type
  3630 ;;  digit           1   24[COMRAM] unsigned char 
  3631 ;;  cnt             1   26[COMRAM] char 
  3632 ;;  dig             1   25[COMRAM] unsigned char 
  3633 ;; Return value:  Size  Location     Type
  3634 ;;		None               void
  3635 ;; Registers used:
  3636 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3637 ;; Tracked objects:
  3638 ;;		On entry : 0/0
  3639 ;;		On exit  : 0/0
  3640 ;;		Unchanged: 0/0
  3641 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3642 ;;      Params:         1       0       0       0       0       0       0       0       0
  3643 ;;      Locals:         3       0       0       0       0       0       0       0       0
  3644 ;;      Temps:          4       0       0       0       0       0       0       0       0
  3645 ;;      Totals:         8       0       0       0       0       0       0       0       0
  3646 ;;Total ram usage:        8 bytes
  3647 ;; Hardware stack levels used:    1
  3648 ;; Hardware stack levels required when called:    2
  3649 ;; This function calls:
  3650 ;;		_log2
  3651 ;;		_rotate
  3652 ;;		_spi
  3653 ;; This function is called by:
  3654 ;;		_update
  3655 ;; This function uses a non-reentrant model
  3656 ;;
  3657                           
  3658                           	psect	text11
  3659  00428A                     __ptext11:
  3660                           	opt stack 0
  3661  00428A                     _writeDigit:
  3662                           	opt stack 23
  3663                           
  3664                           ; BSR set to: 0
  3665                           ;incstack = 0
  3666                           ;writeDigit@digit stored from wreg
  3667  00428A  6E19               	movwf	writeDigit@digit,c
  3668                           
  3669                           ;disp.c: 115: uint8_t dig = (uint8_t) log2(digit);
  3670  00428C  5019               	movf	writeDigit@digit,w,c
  3671  00428E  6E0C               	movwf	log2@num,c
  3672  004290  6A0D               	clrf	log2@num+1,c
  3673  004292  6A0E               	clrf	log2@num+2,c
  3674  004294  6A0F               	clrf	log2@num+3,c
  3675  004296  EC11  F022         	call	_log2	;wreg free
  3676  00429A  C00C  F015         	movff	?_log2,??_writeDigit
  3677  00429E  C00D  F016         	movff	?_log2+1,??_writeDigit+1
  3678  0042A2  C00E  F017         	movff	?_log2+2,??_writeDigit+2
  3679  0042A6  C00F  F018         	movff	?_log2+3,??_writeDigit+3
  3680  0042AA  5015               	movf	??_writeDigit,w,c
  3681  0042AC  6E1A               	movwf	writeDigit@dig,c
  3682                           
  3683                           ;disp.c: 116: screen.digits.screen[dig].bits = segs;
  3684  0042AE  501A               	movf	writeDigit@dig,w,c
  3685  0042B0  0D01               	mullw	1
  3686  0042B2  0100               	movlb	0	; () banked
  3687  0042B4  0ED3               	movlw	low _screen
  3688  0042B6  24F3               	addwf	prodl,w,c
  3689  0042B8  6ED9               	movwf	fsr2l,c
  3690  0042BA  0100               	movlb	0	; () banked
  3691  0042BC  0E00               	movlw	high _screen
  3692  0042BE  20F4               	addwfc	prodh,w,c
  3693  0042C0  6EDA               	movwf	fsr2h,c
  3694  0042C2  C014  FFDF         	movff	writeDigit@segs,indf2
  3695                           
  3696                           ; BSR set to: 0
  3697                           ;disp.c: 119: int8_t cnt;
  3698                           ;disp.c: 120: for (cnt = 7; cnt >= 0; cnt--)
  3699  0042C6  0E07               	movlw	7
  3700  0042C8  6E1B               	movwf	writeDigit@cnt,c
  3701  0042CA                     
  3702                           ; BSR set to: 0
  3703  0042CA  BE1B               	btfsc	writeDigit@cnt,7,c
  3704  0042CC  D009               	goto	i2l91
  3705                           
  3706                           ;disp.c: 121: {
  3707                           ;disp.c: 123: spi(cnt + 1, rotate(cnt));
  3708                           
  3709                           ; BSR set to: 0
  3710                           
  3711                           ; BSR set to: 0
  3712  0042CE  501B               	movf	writeDigit@cnt,w,c
  3713  0042D0  EC71  F021         	call	_rotate
  3714  0042D4  6E07               	movwf	spi@data,c
  3715  0042D6  281B               	incf	writeDigit@cnt,w,c
  3716  0042D8  EC16  F01E         	call	_spi
  3717  0042DC  061B               	decf	writeDigit@cnt,f,c
  3718  0042DE  D7F5               	goto	L4
  3719  0042E0                     i2l91:
  3720  0042E0  0012               	return	
  3721  0042E2                     __end_of_writeDigit:
  3722                           	opt stack 0
  3723                           tosu	equ	0xFFF
  3724                           tosh	equ	0xFFE
  3725                           tosl	equ	0xFFD
  3726                           pclatu	equ	0xFFB
  3727                           pclath	equ	0xFFA
  3728                           tblptru	equ	0xFF8
  3729                           tblptrh	equ	0xFF7
  3730                           tblptrl	equ	0xFF6
  3731                           tablat	equ	0xFF5
  3732                           prodh	equ	0xFF4
  3733                           prodl	equ	0xFF3
  3734                           intcon	equ	0xFF2
  3735                           intcon2	equ	0xFF1
  3736                           postinc0	equ	0xFEE
  3737                           fsr0h	equ	0xFEA
  3738                           fsr0l	equ	0xFE9
  3739                           wreg	equ	0xFE8
  3740                           postinc1	equ	0xFE6
  3741                           postdec1	equ	0xFE5
  3742                           fsr1h	equ	0xFE2
  3743                           fsr1l	equ	0xFE1
  3744                           indf2	equ	0xFDF
  3745                           postinc2	equ	0xFDE
  3746                           postdec2	equ	0xFDD
  3747                           fsr2h	equ	0xFDA
  3748                           fsr2l	equ	0xFD9
  3749                           status	equ	0xFD8
  3750                           
  3751 ;; *************** function _spi *****************
  3752 ;; Defined at:
  3753 ;;		line 91 in file "disp.c"
  3754 ;; Parameters:    Size  Location     Type
  3755 ;;  addr            1    wreg     unsigned char 
  3756 ;;  data            1    6[COMRAM] unsigned char 
  3757 ;; Auto vars:     Size  Location     Type
  3758 ;;  addr            1   12[COMRAM] unsigned char 
  3759 ;;  send            2   10[COMRAM] unsigned int 
  3760 ;;  cnt             1   13[COMRAM] char 
  3761 ;; Return value:  Size  Location     Type
  3762 ;;		None               void
  3763 ;; Registers used:
  3764 ;;		wreg, status,2, status,0, cstack
  3765 ;; Tracked objects:
  3766 ;;		On entry : 0/0
  3767 ;;		On exit  : 0/0
  3768 ;;		Unchanged: 0/0
  3769 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3770 ;;      Params:         1       0       0       0       0       0       0       0       0
  3771 ;;      Locals:         4       0       0       0       0       0       0       0       0
  3772 ;;      Temps:          3       0       0       0       0       0       0       0       0
  3773 ;;      Totals:         8       0       0       0       0       0       0       0       0
  3774 ;;Total ram usage:        8 bytes
  3775 ;; Hardware stack levels used:    1
  3776 ;; Hardware stack levels required when called:    1
  3777 ;; This function calls:
  3778 ;;		_wait
  3779 ;; This function is called by:
  3780 ;;		_update
  3781 ;;		_writeDigit
  3782 ;; This function uses a non-reentrant model
  3783 ;;
  3784                           
  3785                           	psect	text12
  3786  003C2C                     __ptext12:
  3787                           	opt stack 0
  3788  003C2C                     _spi:
  3789                           	opt stack 23
  3790                           
  3791                           ;incstack = 0
  3792                           ;spi@addr stored from wreg
  3793  003C2C  6E0D               	movwf	spi@addr,c
  3794                           
  3795                           ;disp.c: 93: uint16_t send = (addr << 8) | data;
  3796  003C2E  5007               	movf	spi@data,w,c
  3797  003C30  C00D  F008         	movff	spi@addr,??_spi
  3798  003C34  6A09               	clrf	(??_spi+1)& (0+255),c
  3799  003C36  C008  F009         	movff	??_spi,??_spi+1
  3800  003C3A  6A08               	clrf	??_spi,c
  3801  003C3C  1008               	iorwf	??_spi,w,c
  3802  003C3E  6E0B               	movwf	spi@send,c
  3803  003C40  5009               	movf	??_spi+1,w,c
  3804  003C42  6E0C               	movwf	spi@send+1,c
  3805                           
  3806                           ;disp.c: 94: LATA4 = 0;
  3807  003C44  9889               	bcf	3977,4,c	;volatile
  3808                           
  3809                           ;disp.c: 95: LATA1 = 0;
  3810  003C46  9289               	bcf	3977,1,c	;volatile
  3811                           
  3812                           ;disp.c: 96: LATA3 = 0;
  3813  003C48  9689               	bcf	3977,3,c	;volatile
  3814                           
  3815                           ;disp.c: 97: int8_t cnt;
  3816                           ;disp.c: 98: for (cnt = 15; cnt >= 0; cnt--)
  3817  003C4A  0E0F               	movlw	15
  3818  003C4C  6E0E               	movwf	spi@cnt,c
  3819  003C4E  BE0E               	btfsc	spi@cnt,7,c
  3820  003C50  D02D               	goto	i2l85
  3821                           
  3822                           ;disp.c: 99: {
  3823                           ;disp.c: 100: LATA1 = 0x1 & (send >> cnt);
  3824  003C52  C00E  F008         	movff	spi@cnt,??_spi
  3825  003C56  C00B  F009         	movff	spi@send,??_spi+1
  3826  003C5A  C00C  F00A         	movff	spi@send+1,??_spi+2
  3827  003C5E  2A08               	incf	??_spi,f,c
  3828  003C60  D003               	goto	i2u373_44
  3829  003C62                     i2u373_45:
  3830  003C62  90D8               	bcf	status,0,c
  3831  003C64  320A               	rrcf	??_spi+2,f,c
  3832  003C66  3209               	rrcf	??_spi+1,f,c
  3833  003C68                     i2u373_44:
  3834  003C68  2E08               	decfsz	??_spi,f,c
  3835  003C6A  D7FB               	goto	i2u373_45
  3836  003C6C  3009               	rrcf	??_spi+1,w,c
  3837  003C6E  A0D8               	btfss	status,0,c
  3838  003C70  D001               	bra	i2u374_45
  3839  003C72  8289               	bsf	3977,1,c	;volatile
  3840  003C74                     i2u374_45:
  3841  003C74  B0D8               	btfsc	status,0,c
  3842  003C76  D001               	bra	i2u374_46
  3843  003C78  9289               	bcf	3977,1,c	;volatile
  3844  003C7A                     i2u374_46:
  3845                           
  3846                           ;disp.c: 101: wait(1);
  3847  003C7A  0E01               	movlw	1
  3848  003C7C  6E01               	movwf	wait@count,c
  3849  003C7E  0E00               	movlw	0
  3850  003C80  6E02               	movwf	wait@count+1,c
  3851  003C82  0E00               	movlw	0
  3852  003C84  6E03               	movwf	wait@count+2,c
  3853  003C86  0E00               	movlw	0
  3854  003C88  6E04               	movwf	wait@count+3,c
  3855  003C8A  EC05  F023         	call	_wait	;wreg free
  3856                           
  3857                           ;disp.c: 102: LATA3 = 1;
  3858  003C8E  8689               	bsf	3977,3,c	;volatile
  3859                           
  3860                           ;disp.c: 103: wait(1);
  3861  003C90  0E01               	movlw	1
  3862  003C92  6E01               	movwf	wait@count,c
  3863  003C94  0E00               	movlw	0
  3864  003C96  6E02               	movwf	wait@count+1,c
  3865  003C98  0E00               	movlw	0
  3866  003C9A  6E03               	movwf	wait@count+2,c
  3867  003C9C  0E00               	movlw	0
  3868  003C9E  6E04               	movwf	wait@count+3,c
  3869  003CA0  EC05  F023         	call	_wait	;wreg free
  3870                           
  3871                           ;disp.c: 104: LATA3 = 0;
  3872  003CA4  9689               	bcf	3977,3,c	;volatile
  3873                           
  3874                           ;disp.c: 105: LATA1 = 0;
  3875  003CA6  9289               	bcf	3977,1,c	;volatile
  3876  003CA8  060E               	decf	spi@cnt,f,c
  3877  003CAA  D7D1               	goto	L5
  3878  003CAC                     i2l85:
  3879                           
  3880                           ;disp.c: 106: }
  3881                           ;disp.c: 107: LATA4 = 1;
  3882  003CAC  8889               	bsf	3977,4,c	;volatile
  3883                           
  3884                           ;disp.c: 108: LATA3 = 0;
  3885  003CAE  9689               	bcf	3977,3,c	;volatile
  3886                           
  3887                           ;disp.c: 109: LATA1 = 0;
  3888  003CB0  9289               	bcf	3977,1,c	;volatile
  3889                           
  3890                           ;disp.c: 110: wait(1);
  3891  003CB2  0E01               	movlw	1
  3892  003CB4  6E01               	movwf	wait@count,c
  3893  003CB6  0E00               	movlw	0
  3894  003CB8  6E02               	movwf	wait@count+1,c
  3895  003CBA  0E00               	movlw	0
  3896  003CBC  6E03               	movwf	wait@count+2,c
  3897  003CBE  0E00               	movlw	0
  3898  003CC0  6E04               	movwf	wait@count+3,c
  3899  003CC2  EC05  F023         	call	_wait	;wreg free
  3900  003CC6  0012               	return	
  3901  003CC8                     __end_of_spi:
  3902                           	opt stack 0
  3903                           tosu	equ	0xFFF
  3904                           tosh	equ	0xFFE
  3905                           tosl	equ	0xFFD
  3906                           pclatu	equ	0xFFB
  3907                           pclath	equ	0xFFA
  3908                           tblptru	equ	0xFF8
  3909                           tblptrh	equ	0xFF7
  3910                           tblptrl	equ	0xFF6
  3911                           tablat	equ	0xFF5
  3912                           prodh	equ	0xFF4
  3913                           prodl	equ	0xFF3
  3914                           intcon	equ	0xFF2
  3915                           intcon2	equ	0xFF1
  3916                           postinc0	equ	0xFEE
  3917                           fsr0h	equ	0xFEA
  3918                           fsr0l	equ	0xFE9
  3919                           wreg	equ	0xFE8
  3920                           postinc1	equ	0xFE6
  3921                           postdec1	equ	0xFE5
  3922                           fsr1h	equ	0xFE2
  3923                           fsr1l	equ	0xFE1
  3924                           indf2	equ	0xFDF
  3925                           postinc2	equ	0xFDE
  3926                           postdec2	equ	0xFDD
  3927                           fsr2h	equ	0xFDA
  3928                           fsr2l	equ	0xFD9
  3929                           status	equ	0xFD8
  3930                           
  3931 ;; *************** function _wait *****************
  3932 ;; Defined at:
  3933 ;;		line 3 in file "defs.c"
  3934 ;; Parameters:    Size  Location     Type
  3935 ;;  count           4    0[COMRAM] unsigned long 
  3936 ;; Auto vars:     Size  Location     Type
  3937 ;;		None
  3938 ;; Return value:  Size  Location     Type
  3939 ;;		None               void
  3940 ;; Registers used:
  3941 ;;		wreg, status,2, status,0
  3942 ;; Tracked objects:
  3943 ;;		On entry : 0/0
  3944 ;;		On exit  : 0/0
  3945 ;;		Unchanged: 0/0
  3946 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3947 ;;      Params:         4       0       0       0       0       0       0       0       0
  3948 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3949 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3950 ;;      Totals:         4       0       0       0       0       0       0       0       0
  3951 ;;Total ram usage:        4 bytes
  3952 ;; Hardware stack levels used:    1
  3953 ;; This function calls:
  3954 ;;		Nothing
  3955 ;; This function is called by:
  3956 ;;		_spi
  3957 ;; This function uses a non-reentrant model
  3958 ;;
  3959                           
  3960                           	psect	text13
  3961  00460A                     __ptext13:
  3962                           	opt stack 0
  3963  00460A                     _wait:
  3964                           	opt stack 23
  3965  00460A                     i2l3696:
  3966  00460A  0601               	decf	wait@count,f,c
  3967  00460C  0E00               	movlw	0
  3968  00460E  5A02               	subwfb	wait@count+1,f,c
  3969  004610  5A03               	subwfb	wait@count+2,f,c
  3970  004612  5A04               	subwfb	wait@count+3,f,c
  3971  004614  2801               	incf	wait@count& (0+255),w,c
  3972  004616  B4D8               	btfsc	status,2,c
  3973  004618  2802               	incf	(wait@count+1)& (0+255),w,c
  3974  00461A  B4D8               	btfsc	status,2,c
  3975  00461C  2803               	incf	(wait@count+2)& (0+255),w,c
  3976  00461E  B4D8               	btfsc	status,2,c
  3977  004620  2804               	incf	(wait@count+3)& (0+255),w,c
  3978  004622  B4D8               	btfsc	status,2,c
  3979  004624  0012               	return	
  3980  004626  D7F1               	goto	i2l3696
  3981  004628                     __end_of_wait:
  3982                           	opt stack 0
  3983                           tosu	equ	0xFFF
  3984                           tosh	equ	0xFFE
  3985                           tosl	equ	0xFFD
  3986                           pclatu	equ	0xFFB
  3987                           pclath	equ	0xFFA
  3988                           tblptru	equ	0xFF8
  3989                           tblptrh	equ	0xFF7
  3990                           tblptrl	equ	0xFF6
  3991                           tablat	equ	0xFF5
  3992                           prodh	equ	0xFF4
  3993                           prodl	equ	0xFF3
  3994                           intcon	equ	0xFF2
  3995                           intcon2	equ	0xFF1
  3996                           postinc0	equ	0xFEE
  3997                           fsr0h	equ	0xFEA
  3998                           fsr0l	equ	0xFE9
  3999                           wreg	equ	0xFE8
  4000                           postinc1	equ	0xFE6
  4001                           postdec1	equ	0xFE5
  4002                           fsr1h	equ	0xFE2
  4003                           fsr1l	equ	0xFE1
  4004                           indf2	equ	0xFDF
  4005                           postinc2	equ	0xFDE
  4006                           postdec2	equ	0xFDD
  4007                           fsr2h	equ	0xFDA
  4008                           fsr2l	equ	0xFD9
  4009                           status	equ	0xFD8
  4010                           
  4011 ;; *************** function _rotate *****************
  4012 ;; Defined at:
  4013 ;;		line 220 in file "disp.c"
  4014 ;; Parameters:    Size  Location     Type
  4015 ;;  seg             1    wreg     unsigned char 
  4016 ;; Auto vars:     Size  Location     Type
  4017 ;;  seg             1    3[COMRAM] unsigned char 
  4018 ;;  cnt             1    5[COMRAM] char 
  4019 ;;  ret             1    4[COMRAM] unsigned char 
  4020 ;; Return value:  Size  Location     Type
  4021 ;;                  1    wreg      unsigned char 
  4022 ;; Registers used:
  4023 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  4024 ;; Tracked objects:
  4025 ;;		On entry : 0/0
  4026 ;;		On exit  : 0/0
  4027 ;;		Unchanged: 0/0
  4028 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4029 ;;      Params:         0       0       0       0       0       0       0       0       0
  4030 ;;      Locals:         3       0       0       0       0       0       0       0       0
  4031 ;;      Temps:          3       0       0       0       0       0       0       0       0
  4032 ;;      Totals:         6       0       0       0       0       0       0       0       0
  4033 ;;Total ram usage:        6 bytes
  4034 ;; Hardware stack levels used:    1
  4035 ;; This function calls:
  4036 ;;		Nothing
  4037 ;; This function is called by:
  4038 ;;		_writeDigit
  4039 ;; This function uses a non-reentrant model
  4040 ;;
  4041                           
  4042                           	psect	text14
  4043  0042E2                     __ptext14:
  4044                           	opt stack 0
  4045  0042E2                     _rotate:
  4046                           	opt stack 24
  4047                           
  4048                           ;incstack = 0
  4049                           ;rotate@seg stored from wreg
  4050  0042E2  6E04               	movwf	rotate@seg,c
  4051                           
  4052                           ;disp.c: 222: uint8_t ret = 0;
  4053  0042E4  0E00               	movlw	0
  4054  0042E6  6E05               	movwf	rotate@ret,c
  4055                           
  4056                           ;disp.c: 223: int8_t cnt;
  4057                           ;disp.c: 224: for (cnt = 7; cnt >= 0; cnt--)
  4058  0042E8  0E07               	movlw	7
  4059  0042EA  6E06               	movwf	rotate@cnt,c
  4060  0042EC  BE06               	btfsc	rotate@cnt,7,c
  4061  0042EE  D022               	goto	i2l4018
  4062                           
  4063                           ;disp.c: 225: {
  4064                           ;disp.c: 226: ret |= ((screen.digits.screen[cnt].bits >> seg) & 1) << cnt;
  4065  0042F0  C006  F001         	movff	rotate@cnt,??_rotate
  4066  0042F4  C004  F002         	movff	rotate@seg,??_rotate+1
  4067  0042F8  5006               	movf	rotate@cnt,w,c
  4068  0042FA  0D01               	mullw	1
  4069  0042FC  0100               	movlb	0	; () banked
  4070  0042FE  0ED3               	movlw	low _screen
  4071  004300  24F3               	addwf	prodl,w,c
  4072  004302  6ED9               	movwf	fsr2l,c
  4073  004304  0100               	movlb	0	; () banked
  4074  004306  0E00               	movlw	high _screen
  4075  004308  20F4               	addwfc	prodh,w,c
  4076  00430A  6EDA               	movwf	fsr2h,c
  4077  00430C  50DF               	movf	indf2,w,c
  4078  00430E  6E03               	movwf	(??_rotate+2)& (0+255),c
  4079  004310  2A02               	incf	??_rotate+1,f,c
  4080  004312  D002               	goto	i2u378_44
  4081  004314                     i2u378_45:
  4082  004314  90D8               	bcf	status,0,c
  4083  004316  3203               	rrcf	??_rotate+2,f,c
  4084  004318                     i2u378_44:
  4085  004318  2E02               	decfsz	??_rotate+1,f,c
  4086  00431A  D7FC               	goto	i2u378_45
  4087  00431C  0E01               	movlw	1
  4088  00431E  1603               	andwf	??_rotate+2,f,c
  4089  004320  2A01               	incf	??_rotate,f,c
  4090  004322  D002               	goto	i2u379_44
  4091  004324                     i2u379_45:
  4092  004324  90D8               	bcf	status,0,c
  4093  004326  3603               	rlcf	??_rotate+2,f,c
  4094  004328                     i2u379_44:
  4095  004328  2E01               	decfsz	??_rotate,f,c
  4096  00432A  D7FC               	goto	i2u379_45
  4097  00432C  5003               	movf	??_rotate+2,w,c
  4098  00432E  1205               	iorwf	rotate@ret,f,c
  4099                           
  4100                           ; BSR set to: 0
  4101  004330  0606               	decf	rotate@cnt,f,c
  4102  004332  D7DC               	goto	L6
  4103  004334                     i2l4018:
  4104                           
  4105                           ;disp.c: 227: }
  4106                           ;disp.c: 228: return ret;
  4107  004334  5005               	movf	rotate@ret,w,c
  4108  004336  0012               	return	
  4109  004338                     __end_of_rotate:
  4110                           	opt stack 0
  4111                           tosu	equ	0xFFF
  4112                           tosh	equ	0xFFE
  4113                           tosl	equ	0xFFD
  4114                           pclatu	equ	0xFFB
  4115                           pclath	equ	0xFFA
  4116                           tblptru	equ	0xFF8
  4117                           tblptrh	equ	0xFF7
  4118                           tblptrl	equ	0xFF6
  4119                           tablat	equ	0xFF5
  4120                           prodh	equ	0xFF4
  4121                           prodl	equ	0xFF3
  4122                           intcon	equ	0xFF2
  4123                           intcon2	equ	0xFF1
  4124                           postinc0	equ	0xFEE
  4125                           fsr0h	equ	0xFEA
  4126                           fsr0l	equ	0xFE9
  4127                           wreg	equ	0xFE8
  4128                           postinc1	equ	0xFE6
  4129                           postdec1	equ	0xFE5
  4130                           fsr1h	equ	0xFE2
  4131                           fsr1l	equ	0xFE1
  4132                           indf2	equ	0xFDF
  4133                           postinc2	equ	0xFDE
  4134                           postdec2	equ	0xFDD
  4135                           fsr2h	equ	0xFDA
  4136                           fsr2l	equ	0xFD9
  4137                           status	equ	0xFD8
  4138                           
  4139 ;; *************** function _printRTC *****************
  4140 ;; Defined at:
  4141 ;;		line 282 in file "RTC.c"
  4142 ;; Parameters:    Size  Location     Type
  4143 ;;  digits          1    wreg     unsigned char 
  4144 ;; Auto vars:     Size  Location     Type
  4145 ;;  digits          1   92[COMRAM] unsigned char 
  4146 ;;  i               1   93[COMRAM] unsigned char 
  4147 ;;  cnt             1   91[COMRAM] unsigned char 
  4148 ;;  bits            1   90[COMRAM] unsigned char 
  4149 ;; Return value:  Size  Location     Type
  4150 ;;		None               void
  4151 ;; Registers used:
  4152 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4153 ;; Tracked objects:
  4154 ;;		On entry : 0/0
  4155 ;;		On exit  : 0/0
  4156 ;;		Unchanged: 0/0
  4157 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4158 ;;      Params:         0       0       0       0       0       0       0       0       0
  4159 ;;      Locals:         4       0       0       0       0       0       0       0       0
  4160 ;;      Temps:          4       0       0       0       0       0       0       0       0
  4161 ;;      Totals:         8       0       0       0       0       0       0       0       0
  4162 ;;Total ram usage:        8 bytes
  4163 ;; Hardware stack levels used:    1
  4164 ;; Hardware stack levels required when called:    4
  4165 ;; This function calls:
  4166 ;;		___lwmod
  4167 ;;		_advState
  4168 ;;		_countBits
  4169 ;;		_sprintf
  4170 ;;		_writeString
  4171 ;; This function is called by:
  4172 ;;		_initRTC
  4173 ;;		_isr
  4174 ;; This function uses a non-reentrant model
  4175 ;;
  4176                           
  4177                           	psect	text15
  4178  00183A                     __ptext15:
  4179                           	opt stack 0
  4180  00183A                     _printRTC:
  4181                           	opt stack 22
  4182                           
  4183                           ;incstack = 0
  4184                           ;printRTC@digits stored from wreg
  4185  00183A  6E5D               	movwf	printRTC@digits,c
  4186                           
  4187                           ;RTC.c: 285: static char str[(8 + 6 + 1)];
  4188                           ;RTC.c: 286: uint8_t cnt = 0;
  4189  00183C  0E00               	movlw	0
  4190  00183E  6E5C               	movwf	printRTC@cnt,c
  4191                           
  4192                           ;RTC.c: 288: uint8_t bits = countBits(digits);
  4193  001840  505D               	movf	printRTC@digits,w,c
  4194  001842  6E01               	movwf	countBits@num,c
  4195  001844  6A02               	clrf	countBits@num+1,c
  4196  001846  6A03               	clrf	countBits@num+2,c
  4197  001848  6A04               	clrf	countBits@num+3,c
  4198  00184A  ECA9  F022         	call	_countBits	;wreg free
  4199  00184E  6E5B               	movwf	printRTC@bits,c
  4200  001850  D1C3               	goto	i2l5178
  4201  001852                     i2l5110:
  4202                           
  4203                           ;RTC.c: 300: sprintf(str, "%s %02d.%02d", dow[date.dow], date.hour, date.minute);
  4204  001852  0100               	movlb	0	; () banked
  4205  001854  0E00               	movlw	high printRTC@str
  4206  001856  6E46               	movwf	sprintf@sp+1,c
  4207  001858  0100               	movlb	0	; () banked
  4208  00185A  0EC4               	movlw	low printRTC@str
  4209  00185C  6E45               	movwf	sprintf@sp,c
  4210  00185E  0E7F               	movlw	high STR_4
  4211  001860  6E48               	movwf	sprintf@f+1,c
  4212  001862  0EC9               	movlw	low STR_4
  4213  001864  6E47               	movwf	sprintf@f,c
  4214  001866  0100               	movlb	0	; () banked
  4215  001868  51AC               	movf	(_date+4)& (0+255),w,b
  4216  00186A  0D04               	mullw	4
  4217  00186C  0E7E               	movlw	low _dow
  4218  00186E  24F3               	addwf	prodl,w,c
  4219  001870  6E49               	movwf	?_sprintf+4,c
  4220  001872  0E7F               	movlw	high _dow
  4221  001874  20F4               	addwfc	prodh,w,c
  4222  001876  6E4A               	movwf	?_sprintf+5,c
  4223  001878  0100               	movlb	0	; () banked
  4224  00187A  C0AA  F04B         	movff	_date+2,?_sprintf+6
  4225  00187E  6A4C               	clrf	?_sprintf+7,c
  4226  001880  0100               	movlb	0	; () banked
  4227  001882  C0A9  F04D         	movff	_date+1,?_sprintf+8
  4228  001886  6A4E               	clrf	?_sprintf+9,c
  4229  001888  EC0E  F000         	call	_sprintf	;wreg free
  4230                           
  4231                           ;RTC.c: 301: break;
  4232  00188C  D1C1               	goto	i2l294
  4233  00188E                     i2l5112:
  4234                           
  4235                           ;RTC.c: 303: sprintf(str, "%02d-%02d-%02d", date.day, date.month, date.year % 100);
  4236  00188E  0100               	movlb	0	; () banked
  4237  001890  0E00               	movlw	high printRTC@str
  4238  001892  6E46               	movwf	sprintf@sp+1,c
  4239  001894  0100               	movlb	0	; () banked
  4240  001896  0EC4               	movlw	low printRTC@str
  4241  001898  6E45               	movwf	sprintf@sp,c
  4242  00189A  0E7F               	movlw	high STR_5
  4243  00189C  6E48               	movwf	sprintf@f+1,c
  4244  00189E  0EAB               	movlw	low STR_5
  4245  0018A0  6E47               	movwf	sprintf@f,c
  4246  0018A2  0100               	movlb	0	; () banked
  4247  0018A4  C0AB  F049         	movff	_date+3,?_sprintf+4
  4248  0018A8  6A4A               	clrf	?_sprintf+5,c
  4249  0018AA  0100               	movlb	0	; () banked
  4250  0018AC  C0AD  F04B         	movff	_date+5,?_sprintf+6
  4251  0018B0  6A4C               	clrf	?_sprintf+7,c
  4252  0018B2  C0AE  F001         	movff	_date+6,___lwmod@dividend
  4253  0018B6  C0AF  F002         	movff	_date+7,___lwmod@dividend+1
  4254  0018BA  0E00               	movlw	0
  4255  0018BC  6E04               	movwf	___lwmod@divisor+1,c
  4256  0018BE  0E64               	movlw	100
  4257  0018C0  6E03               	movwf	___lwmod@divisor,c
  4258  0018C2  EC56  F022         	call	___lwmod	;wreg free
  4259  0018C6  C001  F04D         	movff	?___lwmod,?_sprintf+8
  4260  0018CA  C002  F04E         	movff	?___lwmod+1,?_sprintf+9
  4261  0018CE  EC0E  F000         	call	_sprintf	;wreg free
  4262                           
  4263                           ;RTC.c: 304: break;
  4264  0018D2  D19E               	goto	i2l294
  4265  0018D4                     i2l5114:
  4266                           
  4267                           ;RTC.c: 306: sprintf(str, "  %02d.%02d.%02d", date.hour, date.minute, date.second);
  4268  0018D4  0100               	movlb	0	; () banked
  4269  0018D6  0E00               	movlw	high printRTC@str
  4270  0018D8  6E46               	movwf	sprintf@sp+1,c
  4271  0018DA  0100               	movlb	0	; () banked
  4272  0018DC  0EC4               	movlw	low printRTC@str
  4273  0018DE  6E45               	movwf	sprintf@sp,c
  4274  0018E0  0E7F               	movlw	high STR_6
  4275  0018E2  6E48               	movwf	sprintf@f+1,c
  4276  0018E4  0E9A               	movlw	low STR_6
  4277  0018E6  6E47               	movwf	sprintf@f,c
  4278  0018E8  0100               	movlb	0	; () banked
  4279  0018EA  C0AA  F049         	movff	_date+2,?_sprintf+4
  4280  0018EE  6A4A               	clrf	?_sprintf+5,c
  4281  0018F0  0100               	movlb	0	; () banked
  4282  0018F2  C0A9  F04B         	movff	_date+1,?_sprintf+6
  4283  0018F6  6A4C               	clrf	?_sprintf+7,c
  4284  0018F8  0100               	movlb	0	; () banked
  4285  0018FA  C0A8  F04D         	movff	_date,?_sprintf+8
  4286  0018FE  6A4E               	clrf	?_sprintf+9,c
  4287  001900  EC0E  F000         	call	_sprintf	;wreg free
  4288                           
  4289                           ;RTC.c: 307: break;
  4290  001904  D185               	goto	i2l294
  4291  001906                     i2l5116:
  4292                           
  4293                           ;RTC.c: 321: i = (8 + 6 + 1);
  4294  001906  0E0F               	movlw	15
  4295  001908  6E5E               	movwf	printRTC@i,c
  4296                           
  4297                           ;RTC.c: 322: while (--i)
  4298  00190A  D015               	goto	i2l5120
  4299  00190C                     i2l5118:
  4300                           
  4301                           ;RTC.c: 323: str[i-1] = '\0';
  4302  00190C  0EFF               	movlw	255
  4303  00190E  6E57               	movwf	??_printRTC& (0+255),c
  4304  001910  0EFF               	movlw	255
  4305  001912  6E58               	movwf	(??_printRTC+1)& (0+255),c
  4306  001914  505E               	movf	printRTC@i,w,c
  4307  001916  6E59               	movwf	(??_printRTC+2)& (0+255),c
  4308  001918  6A5A               	clrf	(??_printRTC+3)& (0+255),c
  4309  00191A  5057               	movf	??_printRTC,w,c
  4310  00191C  2659               	addwf	??_printRTC+2,f,c
  4311  00191E  5058               	movf	??_printRTC+1,w,c
  4312  001920  225A               	addwfc	??_printRTC+3,f,c
  4313  001922  0100               	movlb	0	; () banked
  4314  001924  0EC4               	movlw	low printRTC@str
  4315  001926  2459               	addwf	??_printRTC+2,w,c
  4316  001928  6ED9               	movwf	fsr2l,c
  4317  00192A  0100               	movlb	0	; () banked
  4318  00192C  0E00               	movlw	high printRTC@str
  4319  00192E  205A               	addwfc	??_printRTC+3,w,c
  4320  001930  6EDA               	movwf	fsr2h,c
  4321  001932  0E00               	movlw	0
  4322  001934  6EDF               	movwf	indf2,c
  4323  001936                     i2l5120:
  4324  001936  2E5E               	decfsz	printRTC@i,f,c
  4325  001938  D7E9               	goto	i2l5118
  4326  00193A  D16A               	goto	i2l294
  4327  00193C                     i2l5124:
  4328  00193C  0100               	movlb	0	; () banked
  4329  00193E  51E5               	movf	_rtcMenu& (0+255),w,b
  4330                           
  4331                           ; Switch size 1, requested type "space"
  4332                           ; Number of cases is 3, Range of values is 1 to 9
  4333                           ; switch strategies available:
  4334                           ; Name         Instructions Cycles
  4335                           ; simple_byte           10     6 (average)
  4336                           ;	Chosen strategy is simple_byte
  4337  001940  0A01               	xorlw	1	; case 1
  4338  001942  B4D8               	btfsc	status,2,c
  4339  001944  D7C7               	goto	i2l5114
  4340  001946  0A03               	xorlw	3	; case 2
  4341  001948  B4D8               	btfsc	status,2,c
  4342  00194A  D783               	goto	i2l5110
  4343  00194C  0A0B               	xorlw	11	; case 9
  4344  00194E  B4D8               	btfsc	status,2,c
  4345  001950  D79E               	goto	i2l5112
  4346  001952  D7D9               	goto	i2l5116
  4347  001954                     i2l5126:
  4348                           
  4349                           ; BSR set to: 0
  4350                           ;RTC.c: 331: sprintf(str, "%02d.%02d.%02d", date.hour, date.minute, date.second);
  4351  001954  0100               	movlb	0	; () banked
  4352  001956  0E00               	movlw	high printRTC@str
  4353  001958  6E46               	movwf	sprintf@sp+1,c
  4354  00195A  0100               	movlb	0	; () banked
  4355  00195C  0EC4               	movlw	low printRTC@str
  4356  00195E  6E45               	movwf	sprintf@sp,c
  4357  001960  0E7F               	movlw	high (STR_6+2)
  4358  001962  6E48               	movwf	sprintf@f+1,c
  4359  001964  0E9C               	movlw	low (STR_6+2)
  4360  001966  6E47               	movwf	sprintf@f,c
  4361  001968  0100               	movlb	0	; () banked
  4362  00196A  C0AA  F049         	movff	_date+2,?_sprintf+4
  4363  00196E  6A4A               	clrf	?_sprintf+5,c
  4364  001970  0100               	movlb	0	; () banked
  4365  001972  C0A9  F04B         	movff	_date+1,?_sprintf+6
  4366  001976  6A4C               	clrf	?_sprintf+7,c
  4367  001978  0100               	movlb	0	; () banked
  4368  00197A  C0A8  F04D         	movff	_date,?_sprintf+8
  4369  00197E  6A4E               	clrf	?_sprintf+9,c
  4370  001980  EC0E  F000         	call	_sprintf	;wreg free
  4371                           
  4372                           ;RTC.c: 332: break;
  4373  001984  D145               	goto	i2l294
  4374  001986                     i2l5128:
  4375                           
  4376                           ;RTC.c: 334: sprintf(str, "%c%c %02d.%02d", (dow[date.dow])[0], (dow[date.dow])[1], date
      +                          .minute, date.second);
  4377  001986  0100               	movlb	0	; () banked
  4378  001988  0E00               	movlw	high printRTC@str
  4379  00198A  6E46               	movwf	sprintf@sp+1,c
  4380  00198C  0100               	movlb	0	; () banked
  4381  00198E  0EC4               	movlw	low printRTC@str
  4382  001990  6E45               	movwf	sprintf@sp,c
  4383  001992  0E7F               	movlw	high STR_8
  4384  001994  6E48               	movwf	sprintf@f+1,c
  4385  001996  0EBA               	movlw	low STR_8
  4386  001998  6E47               	movwf	sprintf@f,c
  4387  00199A  0100               	movlb	0	; () banked
  4388  00199C  51AC               	movf	(_date+4)& (0+255),w,b
  4389  00199E  0D04               	mullw	4
  4390  0019A0  0E7E               	movlw	low _dow
  4391  0019A2  24F3               	addwf	prodl,w,c
  4392  0019A4  6EF6               	movwf	tblptrl,c
  4393  0019A6  0E7F               	movlw	high _dow
  4394  0019A8  20F4               	addwfc	prodh,w,c
  4395  0019AA  6EF7               	movwf	tblptrh,c
  4396  0019AC                     	if	0	;There are less than 3 active tblptr bytes
  4397  0019AC                     	endif
  4398  0019AC  0008               	tblrd		*
  4399  0019AE  50F5               	movf	tablat,w,c
  4400  0019B0  6E49               	movwf	?_sprintf+4,c
  4401  0019B2  6A4A               	clrf	?_sprintf+5,c
  4402  0019B4  0100               	movlb	0	; () banked
  4403  0019B6  51AC               	movf	(_date+4)& (0+255),w,b
  4404  0019B8  0D04               	mullw	4
  4405  0019BA  0E01               	movlw	1
  4406  0019BC  26F3               	addwf	prodl,f,c
  4407  0019BE  0E00               	movlw	0
  4408  0019C0  22F4               	addwfc	prodh,f,c
  4409  0019C2  0E7E               	movlw	low _dow
  4410  0019C4  24F3               	addwf	prodl,w,c
  4411  0019C6  6EF6               	movwf	tblptrl,c
  4412  0019C8  0E7F               	movlw	high _dow
  4413  0019CA  20F4               	addwfc	prodh,w,c
  4414  0019CC  6EF7               	movwf	tblptrh,c
  4415  0019CE                     	if	0	;There are less than 3 active tblptr bytes
  4416  0019CE                     	endif
  4417  0019CE  0008               	tblrd		*
  4418  0019D0  50F5               	movf	tablat,w,c
  4419  0019D2  6E4B               	movwf	?_sprintf+6,c
  4420  0019D4  6A4C               	clrf	?_sprintf+7,c
  4421  0019D6  0100               	movlb	0	; () banked
  4422  0019D8  C0A9  F04D         	movff	_date+1,?_sprintf+8
  4423  0019DC  6A4E               	clrf	?_sprintf+9,c
  4424  0019DE  0100               	movlb	0	; () banked
  4425  0019E0  C0A8  F04F         	movff	_date,?_sprintf+10
  4426  0019E4  6A50               	clrf	?_sprintf+11,c
  4427  0019E6  EC0E  F000         	call	_sprintf	;wreg free
  4428                           
  4429                           ;RTC.c: 335: break;
  4430  0019EA  D112               	goto	i2l294
  4431  0019EC                     i2l5130:
  4432                           
  4433                           ;RTC.c: 337: sprintf(str, "%02d.%02d.%02d", date.day, date.month, date.year % 100);
  4434  0019EC  0100               	movlb	0	; () banked
  4435  0019EE  0E00               	movlw	high printRTC@str
  4436  0019F0  6E46               	movwf	sprintf@sp+1,c
  4437  0019F2  0100               	movlb	0	; () banked
  4438  0019F4  0EC4               	movlw	low printRTC@str
  4439  0019F6  6E45               	movwf	sprintf@sp,c
  4440  0019F8  0E7F               	movlw	high (STR_6+2)
  4441  0019FA  6E48               	movwf	sprintf@f+1,c
  4442  0019FC  0E9C               	movlw	low (STR_6+2)
  4443  0019FE  6E47               	movwf	sprintf@f,c
  4444  001A00  0100               	movlb	0	; () banked
  4445  001A02  C0AB  F049         	movff	_date+3,?_sprintf+4
  4446  001A06  6A4A               	clrf	?_sprintf+5,c
  4447  001A08  0100               	movlb	0	; () banked
  4448  001A0A  C0AD  F04B         	movff	_date+5,?_sprintf+6
  4449  001A0E  6A4C               	clrf	?_sprintf+7,c
  4450  001A10  C0AE  F001         	movff	_date+6,___lwmod@dividend
  4451  001A14  C0AF  F002         	movff	_date+7,___lwmod@dividend+1
  4452  001A18  0E00               	movlw	0
  4453  001A1A  6E04               	movwf	___lwmod@divisor+1,c
  4454  001A1C  0E64               	movlw	100
  4455  001A1E  6E03               	movwf	___lwmod@divisor,c
  4456  001A20  EC56  F022         	call	___lwmod	;wreg free
  4457  001A24  C001  F04D         	movff	?___lwmod,?_sprintf+8
  4458  001A28  C002  F04E         	movff	?___lwmod+1,?_sprintf+9
  4459  001A2C  EC0E  F000         	call	_sprintf	;wreg free
  4460                           
  4461                           ;RTC.c: 338: break;
  4462  001A30  D0EF               	goto	i2l294
  4463  001A32                     i2l5132:
  4464                           
  4465                           ;RTC.c: 346: i = (8 + 6 + 1);
  4466  001A32  0E0F               	movlw	15
  4467  001A34  6E5E               	movwf	printRTC@i,c
  4468                           
  4469                           ;RTC.c: 347: while (--i)
  4470  001A36  D015               	goto	i2l5136
  4471  001A38                     i2l5134:
  4472                           
  4473                           ;RTC.c: 348: str[i - 1] = '\0';
  4474  001A38  0EFF               	movlw	255
  4475  001A3A  6E57               	movwf	??_printRTC& (0+255),c
  4476  001A3C  0EFF               	movlw	255
  4477  001A3E  6E58               	movwf	(??_printRTC+1)& (0+255),c
  4478  001A40  505E               	movf	printRTC@i,w,c
  4479  001A42  6E59               	movwf	(??_printRTC+2)& (0+255),c
  4480  001A44  6A5A               	clrf	(??_printRTC+3)& (0+255),c
  4481  001A46  5057               	movf	??_printRTC,w,c
  4482  001A48  2659               	addwf	??_printRTC+2,f,c
  4483  001A4A  5058               	movf	??_printRTC+1,w,c
  4484  001A4C  225A               	addwfc	??_printRTC+3,f,c
  4485  001A4E  0100               	movlb	0	; () banked
  4486  001A50  0EC4               	movlw	low printRTC@str
  4487  001A52  2459               	addwf	??_printRTC+2,w,c
  4488  001A54  6ED9               	movwf	fsr2l,c
  4489  001A56  0100               	movlb	0	; () banked
  4490  001A58  0E00               	movlw	high printRTC@str
  4491  001A5A  205A               	addwfc	??_printRTC+3,w,c
  4492  001A5C  6EDA               	movwf	fsr2h,c
  4493  001A5E  0E00               	movlw	0
  4494  001A60  6EDF               	movwf	indf2,c
  4495  001A62                     i2l5136:
  4496  001A62  2E5E               	decfsz	printRTC@i,f,c
  4497  001A64  D7E9               	goto	i2l5134
  4498  001A66  D0D4               	goto	i2l294
  4499  001A68                     i2l5140:
  4500  001A68  0100               	movlb	0	; () banked
  4501  001A6A  51E5               	movf	_rtcMenu& (0+255),w,b
  4502                           
  4503                           ; Switch size 1, requested type "space"
  4504                           ; Number of cases is 3, Range of values is 1 to 8
  4505                           ; switch strategies available:
  4506                           ; Name         Instructions Cycles
  4507                           ; simple_byte           10     6 (average)
  4508                           ;	Chosen strategy is simple_byte
  4509  001A6C  0A01               	xorlw	1	; case 1
  4510  001A6E  B4D8               	btfsc	status,2,c
  4511  001A70  D771               	goto	i2l5126
  4512  001A72  0A02               	xorlw	2	; case 3
  4513  001A74  B4D8               	btfsc	status,2,c
  4514  001A76  D787               	goto	i2l5128
  4515  001A78  0A0B               	xorlw	11	; case 8
  4516  001A7A  B4D8               	btfsc	status,2,c
  4517  001A7C  D7B7               	goto	i2l5130
  4518  001A7E  D7D9               	goto	i2l5132
  4519  001A80                     i2l5142:
  4520                           
  4521                           ; BSR set to: 0
  4522                           ;RTC.c: 356: sprintf(str, "%02d.%02d", date.hour, date.minute);
  4523  001A80  0100               	movlb	0	; () banked
  4524  001A82  0E00               	movlw	high printRTC@str
  4525  001A84  6E46               	movwf	sprintf@sp+1,c
  4526  001A86  0100               	movlb	0	; () banked
  4527  001A88  0EC4               	movlw	low printRTC@str
  4528  001A8A  6E45               	movwf	sprintf@sp,c
  4529  001A8C  0E7F               	movlw	high (STR_8+5)
  4530  001A8E  6E48               	movwf	sprintf@f+1,c
  4531  001A90  0EBF               	movlw	low (STR_8+5)
  4532  001A92  6E47               	movwf	sprintf@f,c
  4533  001A94  0100               	movlb	0	; () banked
  4534  001A96  C0AA  F049         	movff	_date+2,?_sprintf+4
  4535  001A9A  6A4A               	clrf	?_sprintf+5,c
  4536  001A9C  0100               	movlb	0	; () banked
  4537  001A9E  C0A9  F04B         	movff	_date+1,?_sprintf+6
  4538  001AA2  6A4C               	clrf	?_sprintf+7,c
  4539  001AA4  EC0E  F000         	call	_sprintf	;wreg free
  4540                           
  4541                           ;RTC.c: 357: break;
  4542  001AA8  D0B3               	goto	i2l294
  4543  001AAA                     i2l5144:
  4544                           
  4545                           ;RTC.c: 359: sprintf(str, "%02d.%02d", date.day, date.month);
  4546  001AAA  0100               	movlb	0	; () banked
  4547  001AAC  0E00               	movlw	high printRTC@str
  4548  001AAE  6E46               	movwf	sprintf@sp+1,c
  4549  001AB0  0100               	movlb	0	; () banked
  4550  001AB2  0EC4               	movlw	low printRTC@str
  4551  001AB4  6E45               	movwf	sprintf@sp,c
  4552  001AB6  0E7F               	movlw	high (STR_8+5)
  4553  001AB8  6E48               	movwf	sprintf@f+1,c
  4554  001ABA  0EBF               	movlw	low (STR_8+5)
  4555  001ABC  6E47               	movwf	sprintf@f,c
  4556  001ABE  0100               	movlb	0	; () banked
  4557  001AC0  C0AB  F049         	movff	_date+3,?_sprintf+4
  4558  001AC4  6A4A               	clrf	?_sprintf+5,c
  4559  001AC6  0100               	movlb	0	; () banked
  4560  001AC8  C0AD  F04B         	movff	_date+5,?_sprintf+6
  4561  001ACC  6A4C               	clrf	?_sprintf+7,c
  4562  001ACE  EC0E  F000         	call	_sprintf	;wreg free
  4563                           
  4564                           ;RTC.c: 360: break;
  4565  001AD2  D09E               	goto	i2l294
  4566  001AD4                     i2l5146:
  4567                           
  4568                           ;RTC.c: 362: i = (8 + 6 + 1);
  4569  001AD4  0E0F               	movlw	15
  4570  001AD6  6E5E               	movwf	printRTC@i,c
  4571                           
  4572                           ;RTC.c: 363: while (--i)
  4573  001AD8  D015               	goto	i2l5150
  4574  001ADA                     i2l5148:
  4575                           
  4576                           ;RTC.c: 364: str[i - 1] = '\0';
  4577  001ADA  0EFF               	movlw	255
  4578  001ADC  6E57               	movwf	??_printRTC& (0+255),c
  4579  001ADE  0EFF               	movlw	255
  4580  001AE0  6E58               	movwf	(??_printRTC+1)& (0+255),c
  4581  001AE2  505E               	movf	printRTC@i,w,c
  4582  001AE4  6E59               	movwf	(??_printRTC+2)& (0+255),c
  4583  001AE6  6A5A               	clrf	(??_printRTC+3)& (0+255),c
  4584  001AE8  5057               	movf	??_printRTC,w,c
  4585  001AEA  2659               	addwf	??_printRTC+2,f,c
  4586  001AEC  5058               	movf	??_printRTC+1,w,c
  4587  001AEE  225A               	addwfc	??_printRTC+3,f,c
  4588  001AF0  0100               	movlb	0	; () banked
  4589  001AF2  0EC4               	movlw	low printRTC@str
  4590  001AF4  2459               	addwf	??_printRTC+2,w,c
  4591  001AF6  6ED9               	movwf	fsr2l,c
  4592  001AF8  0100               	movlb	0	; () banked
  4593  001AFA  0E00               	movlw	high printRTC@str
  4594  001AFC  205A               	addwfc	??_printRTC+3,w,c
  4595  001AFE  6EDA               	movwf	fsr2h,c
  4596  001B00  0E00               	movlw	0
  4597  001B02  6EDF               	movwf	indf2,c
  4598  001B04                     i2l5150:
  4599  001B04  2E5E               	decfsz	printRTC@i,f,c
  4600  001B06  D7E9               	goto	i2l5148
  4601  001B08  D083               	goto	i2l294
  4602  001B0A                     i2l5154:
  4603  001B0A  0100               	movlb	0	; () banked
  4604  001B0C  51E5               	movf	_rtcMenu& (0+255),w,b
  4605                           
  4606                           ; Switch size 1, requested type "space"
  4607                           ; Number of cases is 2, Range of values is 0 to 6
  4608                           ; switch strategies available:
  4609                           ; Name         Instructions Cycles
  4610                           ; simple_byte            7     4 (average)
  4611                           ;	Chosen strategy is simple_byte
  4612  001B0E  0A00               	xorlw	0	; case 0
  4613  001B10  B4D8               	btfsc	status,2,c
  4614  001B12  D7B6               	goto	i2l5142
  4615  001B14  0A06               	xorlw	6	; case 6
  4616  001B16  B4D8               	btfsc	status,2,c
  4617  001B18  D7C8               	goto	i2l5144
  4618  001B1A  D7DC               	goto	i2l5146
  4619  001B1C                     i2l5156:
  4620                           
  4621                           ; BSR set to: 0
  4622                           ;RTC.c: 372: sprintf(str, "%02d.%02d", date.hour, date.minute);
  4623  001B1C  0100               	movlb	0	; () banked
  4624  001B1E  0E00               	movlw	high printRTC@str
  4625  001B20  6E46               	movwf	sprintf@sp+1,c
  4626  001B22  0100               	movlb	0	; () banked
  4627  001B24  0EC4               	movlw	low printRTC@str
  4628  001B26  6E45               	movwf	sprintf@sp,c
  4629  001B28  0E7F               	movlw	high (STR_8+5)
  4630  001B2A  6E48               	movwf	sprintf@f+1,c
  4631  001B2C  0EBF               	movlw	low (STR_8+5)
  4632  001B2E  6E47               	movwf	sprintf@f,c
  4633  001B30  0100               	movlb	0	; () banked
  4634  001B32  C0AA  F049         	movff	_date+2,?_sprintf+4
  4635  001B36  6A4A               	clrf	?_sprintf+5,c
  4636  001B38  0100               	movlb	0	; () banked
  4637  001B3A  C0A9  F04B         	movff	_date+1,?_sprintf+6
  4638  001B3E  6A4C               	clrf	?_sprintf+7,c
  4639  001B40  EC0E  F000         	call	_sprintf	;wreg free
  4640                           
  4641                           ;RTC.c: 373: break;
  4642  001B44  D065               	goto	i2l294
  4643  001B46                     i2l5160:
  4644  001B46  0100               	movlb	0	; () banked
  4645  001B48  51E5               	movf	_rtcMenu& (0+255),w,b
  4646                           
  4647                           ; Switch size 1, requested type "space"
  4648                           ; Number of cases is 1, Range of values is 5 to 5
  4649                           ; switch strategies available:
  4650                           ; Name         Instructions Cycles
  4651                           ; simple_byte            4     3 (average)
  4652                           ;	Chosen strategy is simple_byte
  4653  001B4A  0A05               	xorlw	5	; case 5
  4654  001B4C  B4D8               	btfsc	status,2,c
  4655  001B4E  D7E6               	goto	i2l5156
  4656  001B50  D05F               	goto	i2l294
  4657  001B52                     i2l5162:
  4658                           
  4659                           ; BSR set to: 0
  4660                           ;RTC.c: 380: sprintf(str, "%c%c", date.hour, date.minute);
  4661  001B52  0100               	movlb	0	; () banked
  4662  001B54  0E00               	movlw	high printRTC@str
  4663  001B56  6E46               	movwf	sprintf@sp+1,c
  4664  001B58  0100               	movlb	0	; () banked
  4665  001B5A  0EC4               	movlw	low printRTC@str
  4666  001B5C  6E45               	movwf	sprintf@sp,c
  4667  001B5E  0E7F               	movlw	high STR_13
  4668  001B60  6E48               	movwf	sprintf@f+1,c
  4669  001B62  0EE2               	movlw	low STR_13
  4670  001B64  6E47               	movwf	sprintf@f,c
  4671  001B66  0100               	movlb	0	; () banked
  4672  001B68  C0AA  F049         	movff	_date+2,?_sprintf+4
  4673  001B6C  6A4A               	clrf	?_sprintf+5,c
  4674  001B6E  0100               	movlb	0	; () banked
  4675  001B70  C0A9  F04B         	movff	_date+1,?_sprintf+6
  4676  001B74  6A4C               	clrf	?_sprintf+7,c
  4677  001B76  EC0E  F000         	call	_sprintf	;wreg free
  4678                           
  4679                           ;RTC.c: 381: break;
  4680  001B7A  D04A               	goto	i2l294
  4681  001B7C                     i2l5164:
  4682                           
  4683                           ;RTC.c: 383: i = (8 + 6 + 1);
  4684  001B7C  0E0F               	movlw	15
  4685  001B7E  6E5E               	movwf	printRTC@i,c
  4686                           
  4687                           ;RTC.c: 384: while (--i)
  4688  001B80  D015               	goto	i2l5168
  4689  001B82                     i2l5166:
  4690                           
  4691                           ;RTC.c: 385: str[i - 1] = '\0';
  4692  001B82  0EFF               	movlw	255
  4693  001B84  6E57               	movwf	??_printRTC& (0+255),c
  4694  001B86  0EFF               	movlw	255
  4695  001B88  6E58               	movwf	(??_printRTC+1)& (0+255),c
  4696  001B8A  505E               	movf	printRTC@i,w,c
  4697  001B8C  6E59               	movwf	(??_printRTC+2)& (0+255),c
  4698  001B8E  6A5A               	clrf	(??_printRTC+3)& (0+255),c
  4699  001B90  5057               	movf	??_printRTC,w,c
  4700  001B92  2659               	addwf	??_printRTC+2,f,c
  4701  001B94  5058               	movf	??_printRTC+1,w,c
  4702  001B96  225A               	addwfc	??_printRTC+3,f,c
  4703  001B98  0100               	movlb	0	; () banked
  4704  001B9A  0EC4               	movlw	low printRTC@str
  4705  001B9C  2459               	addwf	??_printRTC+2,w,c
  4706  001B9E  6ED9               	movwf	fsr2l,c
  4707  001BA0  0100               	movlb	0	; () banked
  4708  001BA2  0E00               	movlw	high printRTC@str
  4709  001BA4  205A               	addwfc	??_printRTC+3,w,c
  4710  001BA6  6EDA               	movwf	fsr2h,c
  4711  001BA8  0E00               	movlw	0
  4712  001BAA  6EDF               	movwf	indf2,c
  4713  001BAC                     i2l5168:
  4714  001BAC  2E5E               	decfsz	printRTC@i,f,c
  4715  001BAE  D7E9               	goto	i2l5166
  4716  001BB0  D02F               	goto	i2l294
  4717  001BB2                     i2l5172:
  4718  001BB2  0100               	movlb	0	; () banked
  4719  001BB4  51E5               	movf	_rtcMenu& (0+255),w,b
  4720                           
  4721                           ; Switch size 1, requested type "space"
  4722                           ; Number of cases is 1, Range of values is 4 to 4
  4723                           ; switch strategies available:
  4724                           ; Name         Instructions Cycles
  4725                           ; simple_byte            4     3 (average)
  4726                           ;	Chosen strategy is simple_byte
  4727  001BB6  0A04               	xorlw	4	; case 4
  4728  001BB8  B4D8               	btfsc	status,2,c
  4729  001BBA  D7CB               	goto	i2l5162
  4730  001BBC  D7DF               	goto	i2l5164
  4731  001BBE                     i2l5174:
  4732                           
  4733                           ;RTC.c: 390: sprintf(str, "    ");
  4734  001BBE  0100               	movlb	0	; () banked
  4735  001BC0  0E00               	movlw	high printRTC@str
  4736  001BC2  6E46               	movwf	sprintf@sp+1,c
  4737  001BC4  0100               	movlb	0	; () banked
  4738  001BC6  0EC4               	movlw	low printRTC@str
  4739  001BC8  6E45               	movwf	sprintf@sp,c
  4740  001BCA  0E7F               	movlw	high STR_14
  4741  001BCC  6E48               	movwf	sprintf@f+1,c
  4742  001BCE  0EDD               	movlw	low STR_14
  4743  001BD0  6E47               	movwf	sprintf@f,c
  4744  001BD2  EC0E  F000         	call	_sprintf	;wreg free
  4745                           
  4746                           ;RTC.c: 391: break;
  4747  001BD6  D01C               	goto	i2l294
  4748  001BD8                     i2l5178:
  4749  001BD8  505B               	movf	printRTC@bits,w,c
  4750                           
  4751                           ; Switch size 1, requested type "space"
  4752                           ; Number of cases is 9, Range of values is 0 to 8
  4753                           ; switch strategies available:
  4754                           ; Name         Instructions Cycles
  4755                           ; simple_byte           28    15 (average)
  4756                           ;	Chosen strategy is simple_byte
  4757  001BDA  0A00               	xorlw	0	; case 0
  4758  001BDC  B4D8               	btfsc	status,2,c
  4759  001BDE  D7EF               	goto	i2l5174
  4760  001BE0  0A01               	xorlw	1	; case 1
  4761  001BE2  B4D8               	btfsc	status,2,c
  4762  001BE4  D7EC               	goto	i2l5174
  4763  001BE6  0A03               	xorlw	3	; case 2
  4764  001BE8  B4D8               	btfsc	status,2,c
  4765  001BEA  D7E3               	goto	i2l5172
  4766  001BEC  0A01               	xorlw	1	; case 3
  4767  001BEE  B4D8               	btfsc	status,2,c
  4768  001BF0  D7AA               	goto	i2l5160
  4769  001BF2  0A07               	xorlw	7	; case 4
  4770  001BF4  B4D8               	btfsc	status,2,c
  4771  001BF6  D789               	goto	i2l5154
  4772  001BF8  0A01               	xorlw	1	; case 5
  4773  001BFA  B4D8               	btfsc	status,2,c
  4774  001BFC  D786               	goto	i2l5154
  4775  001BFE  0A03               	xorlw	3	; case 6
  4776  001C00  B4D8               	btfsc	status,2,c
  4777  001C02  D732               	goto	i2l5140
  4778  001C04  0A01               	xorlw	1	; case 7
  4779  001C06  B4D8               	btfsc	status,2,c
  4780  001C08  D72F               	goto	i2l5140
  4781  001C0A  0A0F               	xorlw	15	; case 8
  4782  001C0C  B4D8               	btfsc	status,2,c
  4783  001C0E  D696               	goto	i2l5124
  4784  001C10                     i2l294:
  4785                           
  4786                           ;RTC.c: 393: if (*str == 0)
  4787  001C10  0100               	movlb	0	; () banked
  4788  001C12  67C4               	tstfsz	printRTC@str& (0+255),b
  4789  001C14  D013               	goto	i2l327
  4790                           
  4791                           ; BSR set to: 0
  4792                           ;RTC.c: 394: {
  4793                           ;RTC.c: 395: cnt++;
  4794  001C16  2A5C               	incf	printRTC@cnt,f,c
  4795                           
  4796                           ; BSR set to: 0
  4797                           ;RTC.c: 396: advState();
  4798  001C18  ECD3  F01B         	call	_advState	;wreg free
  4799                           
  4800                           ;RTC.c: 397: if (cnt < 10)
  4801  001C1C  0E0A               	movlw	10
  4802  001C1E  5C5C               	subwf	printRTC@cnt,w,c
  4803  001C20  A0D8               	btfss	status,0,c
  4804  001C22  D7DA               	goto	i2l5178
  4805                           
  4806                           ;RTC.c: 401: else
  4807                           ;RTC.c: 402: {
  4808                           ;RTC.c: 403: sprintf(str, "ERR");
  4809                           
  4810                           ;RTC.c: 400: }
  4811                           
  4812                           ;RTC.c: 398: {
  4813                           ;RTC.c: 399: goto menu_loop;
  4814  001C24  0100               	movlb	0	; () banked
  4815  001C26  0E00               	movlw	high printRTC@str
  4816  001C28  6E46               	movwf	sprintf@sp+1,c
  4817  001C2A  0100               	movlb	0	; () banked
  4818  001C2C  0EC4               	movlw	low printRTC@str
  4819  001C2E  6E45               	movwf	sprintf@sp,c
  4820  001C30  0E7F               	movlw	high STR_15
  4821  001C32  6E48               	movwf	sprintf@f+1,c
  4822  001C34  0EF5               	movlw	low STR_15
  4823  001C36  6E47               	movwf	sprintf@f,c
  4824  001C38  EC0E  F000         	call	_sprintf	;wreg free
  4825  001C3C                     i2l327:
  4826                           
  4827                           ;RTC.c: 404: }
  4828                           ;RTC.c: 405: }
  4829                           ;RTC.c: 407: writeString(digits, str);
  4830  001C3C  0100               	movlb	0	; () banked
  4831  001C3E  0E00               	movlw	high printRTC@str
  4832  001C40  6E1D               	movwf	writeString@string+1,c
  4833  001C42  0100               	movlb	0	; () banked
  4834  001C44  0EC4               	movlw	low printRTC@str
  4835  001C46  6E1C               	movwf	writeString@string,c
  4836  001C48  505D               	movf	printRTC@digits,w,c
  4837  001C4A  ECC1  F011         	call	_writeString
  4838                           
  4839                           ;RTC.c: 408: screen.changed |= digits;
  4840  001C4E  505D               	movf	printRTC@digits,w,c
  4841  001C50  0100               	movlb	0	; () banked
  4842  001C52  13DE               	iorwf	(_screen+11)& (0+255),f,b
  4843                           
  4844                           ; BSR set to: 0
  4845  001C54  0012               	return	
  4846  001C56                     __end_of_printRTC:
  4847                           	opt stack 0
  4848                           tosu	equ	0xFFF
  4849                           tosh	equ	0xFFE
  4850                           tosl	equ	0xFFD
  4851                           pclatu	equ	0xFFB
  4852                           pclath	equ	0xFFA
  4853                           tblptru	equ	0xFF8
  4854                           tblptrh	equ	0xFF7
  4855                           tblptrl	equ	0xFF6
  4856                           tablat	equ	0xFF5
  4857                           prodh	equ	0xFF4
  4858                           prodl	equ	0xFF3
  4859                           intcon	equ	0xFF2
  4860                           intcon2	equ	0xFF1
  4861                           postinc0	equ	0xFEE
  4862                           fsr0h	equ	0xFEA
  4863                           fsr0l	equ	0xFE9
  4864                           wreg	equ	0xFE8
  4865                           postinc1	equ	0xFE6
  4866                           postdec1	equ	0xFE5
  4867                           fsr1h	equ	0xFE2
  4868                           fsr1l	equ	0xFE1
  4869                           indf2	equ	0xFDF
  4870                           postinc2	equ	0xFDE
  4871                           postdec2	equ	0xFDD
  4872                           fsr2h	equ	0xFDA
  4873                           fsr2l	equ	0xFD9
  4874                           status	equ	0xFD8
  4875                           
  4876 ;; *************** function _printTemp *****************
  4877 ;; Defined at:
  4878 ;;		line 80 in file "temp.c"
  4879 ;; Parameters:    Size  Location     Type
  4880 ;;  digits          1    wreg     unsigned char 
  4881 ;; Auto vars:     Size  Location     Type
  4882 ;;  digits          1   57[BANK0 ] unsigned char 
  4883 ;;  str            15   36[BANK0 ] unsigned char [15]
  4884 ;;  units           1   56[BANK0 ] unsigned char 
  4885 ;;  bits            1   55[BANK0 ] unsigned char 
  4886 ;; Return value:  Size  Location     Type
  4887 ;;		None               void
  4888 ;; Registers used:
  4889 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4890 ;; Tracked objects:
  4891 ;;		On entry : 0/0
  4892 ;;		On exit  : 0/0
  4893 ;;		Unchanged: 0/0
  4894 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4895 ;;      Params:         0       0       0       0       0       0       0       0       0
  4896 ;;      Locals:         0      22       0       0       0       0       0       0       0
  4897 ;;      Temps:          5       0       0       0       0       0       0       0       0
  4898 ;;      Totals:         5      22       0       0       0       0       0       0       0
  4899 ;;Total ram usage:       27 bytes
  4900 ;; Hardware stack levels used:    1
  4901 ;; Hardware stack levels required when called:    4
  4902 ;; This function calls:
  4903 ;;		___altoft
  4904 ;;		___ftdiv
  4905 ;;		___ftmul
  4906 ;;		___fttol
  4907 ;;		___lltoft
  4908 ;;		_countBits
  4909 ;;		_lowbit
  4910 ;;		_sprintf
  4911 ;;		_writeString
  4912 ;; This function is called by:
  4913 ;;		_initTemp
  4914 ;;		_isr
  4915 ;; This function uses a non-reentrant model
  4916 ;;
  4917                           
  4918                           	psect	text16
  4919  00286C                     __ptext16:
  4920                           	opt stack 0
  4921  00286C                     _printTemp:
  4922                           	opt stack 22
  4923                           
  4924                           ; BSR set to: 0
  4925                           ;incstack = 0
  4926                           ;printTemp@digits stored from wreg
  4927  00286C  0100               	movlb	0	; () banked
  4928  00286E  6F99               	movwf	printTemp@digits& (0+255),b
  4929                           
  4930                           ; BSR set to: 0
  4931                           ;temp.c: 82: uint8_t units = 0;
  4932  002870  0E00               	movlw	0
  4933  002872  0100               	movlb	0	; () banked
  4934  002874  6F98               	movwf	printTemp@units& (0+255),b
  4935                           
  4936                           ; BSR set to: 0
  4937                           ;temp.c: 83: units |= lowbit(digits);
  4938  002876  0100               	movlb	0	; () banked
  4939  002878  5199               	movf	printTemp@digits& (0+255),w,b
  4940  00287A  6E01               	movwf	lowbit@x,c
  4941  00287C  6A02               	clrf	lowbit@x+1,c
  4942  00287E  6A03               	clrf	lowbit@x+2,c
  4943  002880  6A04               	clrf	lowbit@x+3,c
  4944  002882  EC7F  F020         	call	_lowbit	;wreg free
  4945  002886  C001  F057         	movff	?_lowbit,??_printTemp
  4946  00288A  C002  F058         	movff	?_lowbit+1,??_printTemp+1
  4947  00288E  C003  F059         	movff	?_lowbit+2,??_printTemp+2
  4948  002892  C004  F05A         	movff	?_lowbit+3,??_printTemp+3
  4949  002896  5057               	movf	??_printTemp,w,c
  4950  002898  0100               	movlb	0	; () banked
  4951  00289A  1398               	iorwf	printTemp@units& (0+255),f,b
  4952                           
  4953                           ; BSR set to: 0
  4954                           ;temp.c: 84: units |= lowbit(digits & (~lowbit(digits)));
  4955  00289C  0100               	movlb	0	; () banked
  4956  00289E  5199               	movf	printTemp@digits& (0+255),w,b
  4957  0028A0  6E01               	movwf	lowbit@x,c
  4958  0028A2  6A02               	clrf	lowbit@x+1,c
  4959  0028A4  6A03               	clrf	lowbit@x+2,c
  4960  0028A6  6A04               	clrf	lowbit@x+3,c
  4961  0028A8  EC7F  F020         	call	_lowbit	;wreg free
  4962  0028AC  C001  F057         	movff	?_lowbit,??_printTemp
  4963  0028B0  C002  F058         	movff	?_lowbit+1,??_printTemp+1
  4964  0028B4  C003  F059         	movff	?_lowbit+2,??_printTemp+2
  4965  0028B8  C004  F05A         	movff	?_lowbit+3,??_printTemp+3
  4966  0028BC  5057               	movf	??_printTemp,w,c
  4967  0028BE  0AFF               	xorlw	255
  4968  0028C0  0100               	movlb	0	; () banked
  4969  0028C2  1599               	andwf	printTemp@digits& (0+255),w,b
  4970  0028C4  6E5B               	movwf	(??_printTemp+4)& (0+255),c
  4971  0028C6  505B               	movf	??_printTemp+4,w,c
  4972  0028C8  0100               	movlb	0	; () banked
  4973  0028CA  6F93               	movwf	_printTemp$1310& (0+255),b
  4974  0028CC  0100               	movlb	0	; () banked
  4975  0028CE  6B94               	clrf	(_printTemp$1310+1)& (0+255),b
  4976  0028D0  0100               	movlb	0	; () banked
  4977  0028D2  6B95               	clrf	(_printTemp$1310+2)& (0+255),b
  4978  0028D4  0100               	movlb	0	; () banked
  4979  0028D6  6B96               	clrf	(_printTemp$1310+3)& (0+255),b
  4980                           
  4981                           ; BSR set to: 0
  4982                           ;temp.c: 84: units |= lowbit(digits & (~lowbit(digits)));
  4983  0028D8  C093  F001         	movff	_printTemp$1310,lowbit@x
  4984  0028DC  C094  F002         	movff	_printTemp$1310+1,lowbit@x+1
  4985  0028E0  C095  F003         	movff	_printTemp$1310+2,lowbit@x+2
  4986  0028E4  C096  F004         	movff	_printTemp$1310+3,lowbit@x+3
  4987  0028E8  EC7F  F020         	call	_lowbit	;wreg free
  4988  0028EC  C001  F057         	movff	?_lowbit,??_printTemp
  4989  0028F0  C002  F058         	movff	?_lowbit+1,??_printTemp+1
  4990  0028F4  C003  F059         	movff	?_lowbit+2,??_printTemp+2
  4991  0028F8  C004  F05A         	movff	?_lowbit+3,??_printTemp+3
  4992  0028FC  5057               	movf	??_printTemp,w,c
  4993  0028FE  0100               	movlb	0	; () banked
  4994  002900  1398               	iorwf	printTemp@units& (0+255),f,b
  4995                           
  4996                           ; BSR set to: 0
  4997                           ;temp.c: 85: digits &= ~units;
  4998  002902  0100               	movlb	0	; () banked
  4999  002904  5198               	movf	printTemp@units& (0+255),w,b
  5000  002906  0AFF               	xorlw	255
  5001  002908  0100               	movlb	0	; () banked
  5002  00290A  1799               	andwf	printTemp@digits& (0+255),f,b
  5003                           
  5004                           ; BSR set to: 0
  5005                           ;temp.c: 86: if (tempMenu.state == 0)
  5006  00290C  0100               	movlb	0	; () banked
  5007  00290E  67E0               	tstfsz	_tempMenu& (0+255),b
  5008  002910  D009               	goto	i2l5254
  5009                           
  5010                           ; BSR set to: 0
  5011                           ;temp.c: 87: {
  5012                           ;temp.c: 88: writeString(units, (char*) "*C");
  5013  002912  0E7F               	movlw	high STR_16
  5014  002914  6E1D               	movwf	writeString@string+1,c
  5015  002916  0EF9               	movlw	low STR_16
  5016  002918  6E1C               	movwf	writeString@string,c
  5017  00291A  0100               	movlb	0	; () banked
  5018  00291C  5198               	movf	printTemp@units& (0+255),w,b
  5019  00291E  ECC1  F011         	call	_writeString
  5020                           
  5021                           ;temp.c: 89: }
  5022  002922  D008               	goto	i2l5256
  5023  002924                     i2l5254:
  5024                           
  5025                           ;temp.c: 90: else
  5026                           ;temp.c: 91: {
  5027                           ;temp.c: 92: writeString(units, (char*) "*F");
  5028  002924  0E7F               	movlw	high STR_17
  5029  002926  6E1D               	movwf	writeString@string+1,c
  5030  002928  0EFC               	movlw	low STR_17
  5031  00292A  6E1C               	movwf	writeString@string,c
  5032  00292C  0100               	movlb	0	; () banked
  5033  00292E  5198               	movf	printTemp@units& (0+255),w,b
  5034  002930  ECC1  F011         	call	_writeString
  5035  002934                     i2l5256:
  5036                           
  5037                           ;temp.c: 93: }
  5038                           ;temp.c: 94: char str[(8 + 6 + 1)];
  5039                           ;temp.c: 96: uint8_t bits = countBits(digits);
  5040  002934  0100               	movlb	0	; () banked
  5041  002936  5199               	movf	printTemp@digits& (0+255),w,b
  5042  002938  6E01               	movwf	countBits@num,c
  5043  00293A  6A02               	clrf	countBits@num+1,c
  5044  00293C  6A03               	clrf	countBits@num+2,c
  5045  00293E  6A04               	clrf	countBits@num+3,c
  5046  002940  ECA9  F022         	call	_countBits	;wreg free
  5047  002944  0100               	movlb	0	; () banked
  5048  002946  6F97               	movwf	printTemp@bits& (0+255),b
  5049                           
  5050                           ; BSR set to: 0
  5051                           ;temp.c: 97: temp *= (pow10[bits - 2]);
  5052  002948  C0B9  F015         	movff	_temp,___ftmul@f1
  5053  00294C  C0BA  F016         	movff	_temp+1,___ftmul@f1+1
  5054  002950  C0BB  F017         	movff	_temp+2,___ftmul@f1+2
  5055  002954  0EF8               	movlw	248
  5056  002956  6E57               	movwf	??_printTemp& (0+255),c
  5057  002958  0EFF               	movlw	255
  5058  00295A  6E58               	movwf	(??_printTemp+1)& (0+255),c
  5059  00295C  0100               	movlb	0	; () banked
  5060  00295E  5197               	movf	printTemp@bits& (0+255),w,b
  5061  002960  6E59               	movwf	(??_printTemp+2)& (0+255),c
  5062  002962  6A5A               	clrf	(??_printTemp+3)& (0+255),c
  5063  002964  90D8               	bcf	status,0,c
  5064  002966  3659               	rlcf	??_printTemp+2,f,c
  5065  002968  365A               	rlcf	??_printTemp+3,f,c
  5066  00296A  90D8               	bcf	status,0,c
  5067  00296C  3659               	rlcf	??_printTemp+2,f,c
  5068  00296E  365A               	rlcf	??_printTemp+3,f,c
  5069  002970  5057               	movf	??_printTemp,w,c
  5070  002972  2659               	addwf	??_printTemp+2,f,c
  5071  002974  5058               	movf	??_printTemp+1,w,c
  5072  002976  225A               	addwfc	??_printTemp+3,f,c
  5073  002978  0E08               	movlw	low _pow10
  5074  00297A  2459               	addwf	??_printTemp+2,w,c
  5075  00297C  6EF6               	movwf	tblptrl,c
  5076  00297E  0E7F               	movlw	high _pow10
  5077  002980  205A               	addwfc	??_printTemp+3,w,c
  5078  002982  6EF7               	movwf	tblptrh,c
  5079  002984                     	if	0	;There are less than 3 active tblptr bytes
  5080  002984                     	endif
  5081  002984  0009               	tblrd		*+
  5082  002986  CFF5 F009          	movff	tablat,___lltoft@c
  5083  00298A  0009               	tblrd		*+
  5084  00298C  CFF5 F00A          	movff	tablat,___lltoft@c+1
  5085  002990  0009               	tblrd		*+
  5086  002992  CFF5 F00B          	movff	tablat,___lltoft@c+2
  5087  002996  000A               	tblrd		*-
  5088  002998  CFF5 F00C          	movff	tablat,___lltoft@c+3
  5089  00299C  EC17  F021         	call	___lltoft	;wreg free
  5090  0029A0  C009  F018         	movff	?___lltoft,___ftmul@f2
  5091  0029A4  C00A  F019         	movff	?___lltoft+1,___ftmul@f2+1
  5092  0029A8  C00B  F01A         	movff	?___lltoft+2,___ftmul@f2+2
  5093  0029AC  EC61  F01B         	call	___ftmul	;wreg free
  5094  0029B0  C015  F0B9         	movff	?___ftmul,_temp
  5095  0029B4  C016  F0BA         	movff	?___ftmul+1,_temp+1
  5096  0029B8  C017  F0BB         	movff	?___ftmul+2,_temp+2
  5097                           
  5098                           ;temp.c: 98: temp = (int32_t) temp;
  5099  0029BC  C0B9  F024         	movff	_temp,___fttol@f1
  5100  0029C0  C0BA  F025         	movff	_temp+1,___fttol@f1+1
  5101  0029C4  C0BB  F026         	movff	_temp+2,___fttol@f1+2
  5102  0029C8  ECAF  F01C         	call	___fttol	;wreg free
  5103  0029CC  C024  F033         	movff	?___fttol,___altoft@c
  5104  0029D0  C025  F034         	movff	?___fttol+1,___altoft@c+1
  5105  0029D4  C026  F035         	movff	?___fttol+2,___altoft@c+2
  5106  0029D8  C027  F036         	movff	?___fttol+3,___altoft@c+3
  5107  0029DC  EC64  F01E         	call	___altoft	;wreg free
  5108  0029E0  C033  F0B9         	movff	?___altoft,_temp
  5109  0029E4  C034  F0BA         	movff	?___altoft+1,_temp+1
  5110  0029E8  C035  F0BB         	movff	?___altoft+2,_temp+2
  5111                           
  5112                           ;temp.c: 99: temp /= (pow10[bits - 2]);
  5113  0029EC  C0B9  F024         	movff	_temp,___ftdiv@f1
  5114  0029F0  C0BA  F025         	movff	_temp+1,___ftdiv@f1+1
  5115  0029F4  C0BB  F026         	movff	_temp+2,___ftdiv@f1+2
  5116  0029F8  0EF8               	movlw	248
  5117  0029FA  6E57               	movwf	??_printTemp& (0+255),c
  5118  0029FC  0EFF               	movlw	255
  5119  0029FE  6E58               	movwf	(??_printTemp+1)& (0+255),c
  5120  002A00  0100               	movlb	0	; () banked
  5121  002A02  5197               	movf	printTemp@bits& (0+255),w,b
  5122  002A04  6E59               	movwf	(??_printTemp+2)& (0+255),c
  5123  002A06  6A5A               	clrf	(??_printTemp+3)& (0+255),c
  5124  002A08  90D8               	bcf	status,0,c
  5125  002A0A  3659               	rlcf	??_printTemp+2,f,c
  5126  002A0C  365A               	rlcf	??_printTemp+3,f,c
  5127  002A0E  90D8               	bcf	status,0,c
  5128  002A10  3659               	rlcf	??_printTemp+2,f,c
  5129  002A12  365A               	rlcf	??_printTemp+3,f,c
  5130  002A14  5057               	movf	??_printTemp,w,c
  5131  002A16  2659               	addwf	??_printTemp+2,f,c
  5132  002A18  5058               	movf	??_printTemp+1,w,c
  5133  002A1A  225A               	addwfc	??_printTemp+3,f,c
  5134  002A1C  0E08               	movlw	low _pow10
  5135  002A1E  2459               	addwf	??_printTemp+2,w,c
  5136  002A20  6EF6               	movwf	tblptrl,c
  5137  002A22  0E7F               	movlw	high _pow10
  5138  002A24  205A               	addwfc	??_printTemp+3,w,c
  5139  002A26  6EF7               	movwf	tblptrh,c
  5140  002A28                     	if	0	;There are less than 3 active tblptr bytes
  5141  002A28                     	endif
  5142  002A28  0009               	tblrd		*+
  5143  002A2A  CFF5 F009          	movff	tablat,___lltoft@c
  5144  002A2E  0009               	tblrd		*+
  5145  002A30  CFF5 F00A          	movff	tablat,___lltoft@c+1
  5146  002A34  0009               	tblrd		*+
  5147  002A36  CFF5 F00B          	movff	tablat,___lltoft@c+2
  5148  002A3A  000A               	tblrd		*-
  5149  002A3C  CFF5 F00C          	movff	tablat,___lltoft@c+3
  5150  002A40  EC17  F021         	call	___lltoft	;wreg free
  5151  002A44  C009  F027         	movff	?___lltoft,___ftdiv@f2
  5152  002A48  C00A  F028         	movff	?___lltoft+1,___ftdiv@f2+1
  5153  002A4C  C00B  F029         	movff	?___lltoft+2,___ftdiv@f2+2
  5154  002A50  EC44  F01C         	call	___ftdiv	;wreg free
  5155  002A54  C024  F0B9         	movff	?___ftdiv,_temp
  5156  002A58  C025  F0BA         	movff	?___ftdiv+1,_temp+1
  5157  002A5C  C026  F0BB         	movff	?___ftdiv+2,_temp+2
  5158                           
  5159                           ;temp.c: 101: sprintf(str, "%*f", bits, temp);
  5160  002A60  0100               	movlb	0	; () banked
  5161  002A62  0E00               	movlw	high printTemp@str
  5162  002A64  6E46               	movwf	sprintf@sp+1,c
  5163  002A66  0100               	movlb	0	; () banked
  5164  002A68  0E84               	movlw	low printTemp@str
  5165  002A6A  6E45               	movwf	sprintf@sp,c
  5166  002A6C  0E7F               	movlw	high STR_18
  5167  002A6E  6E48               	movwf	sprintf@f+1,c
  5168  002A70  0EF1               	movlw	low STR_18
  5169  002A72  6E47               	movwf	sprintf@f,c
  5170  002A74  0100               	movlb	0	; () banked
  5171  002A76  C097  F049         	movff	printTemp@bits,?_sprintf+4
  5172  002A7A  6A4A               	clrf	?_sprintf+5,c
  5173  002A7C  C0B9  F04B         	movff	_temp,?_sprintf+6
  5174  002A80  C0BA  F04C         	movff	_temp+1,?_sprintf+7
  5175  002A84  C0BB  F04D         	movff	_temp+2,?_sprintf+8
  5176  002A88  EC0E  F000         	call	_sprintf	;wreg free
  5177                           
  5178                           ;temp.c: 102: writeString(digits, str);
  5179  002A8C  0100               	movlb	0	; () banked
  5180  002A8E  0E00               	movlw	high printTemp@str
  5181  002A90  6E1D               	movwf	writeString@string+1,c
  5182  002A92  0100               	movlb	0	; () banked
  5183  002A94  0E84               	movlw	low printTemp@str
  5184  002A96  6E1C               	movwf	writeString@string,c
  5185  002A98  0100               	movlb	0	; () banked
  5186  002A9A  5199               	movf	printTemp@digits& (0+255),w,b
  5187  002A9C  ECC1  F011         	call	_writeString
  5188  002AA0  0012               	return	
  5189  002AA2                     __end_of_printTemp:
  5190                           	opt stack 0
  5191                           tosu	equ	0xFFF
  5192                           tosh	equ	0xFFE
  5193                           tosl	equ	0xFFD
  5194                           pclatu	equ	0xFFB
  5195                           pclath	equ	0xFFA
  5196                           tblptru	equ	0xFF8
  5197                           tblptrh	equ	0xFF7
  5198                           tblptrl	equ	0xFF6
  5199                           tablat	equ	0xFF5
  5200                           prodh	equ	0xFF4
  5201                           prodl	equ	0xFF3
  5202                           intcon	equ	0xFF2
  5203                           intcon2	equ	0xFF1
  5204                           postinc0	equ	0xFEE
  5205                           fsr0h	equ	0xFEA
  5206                           fsr0l	equ	0xFE9
  5207                           wreg	equ	0xFE8
  5208                           postinc1	equ	0xFE6
  5209                           postdec1	equ	0xFE5
  5210                           fsr1h	equ	0xFE2
  5211                           fsr1l	equ	0xFE1
  5212                           indf2	equ	0xFDF
  5213                           postinc2	equ	0xFDE
  5214                           postdec2	equ	0xFDD
  5215                           fsr2h	equ	0xFDA
  5216                           fsr2l	equ	0xFD9
  5217                           status	equ	0xFD8
  5218                           
  5219 ;; *************** function _lowbit *****************
  5220 ;; Defined at:
  5221 ;;		line 25 in file "defs.c"
  5222 ;; Parameters:    Size  Location     Type
  5223 ;;  x               4    0[COMRAM] unsigned long 
  5224 ;; Auto vars:     Size  Location     Type
  5225 ;;  log2Val         4    7[COMRAM] unsigned long 
  5226 ;; Return value:  Size  Location     Type
  5227 ;;                  4    0[COMRAM] unsigned long 
  5228 ;; Registers used:
  5229 ;;		wreg, status,2, status,0
  5230 ;; Tracked objects:
  5231 ;;		On entry : 0/0
  5232 ;;		On exit  : 0/0
  5233 ;;		Unchanged: 0/0
  5234 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5235 ;;      Params:         4       0       0       0       0       0       0       0       0
  5236 ;;      Locals:         4       0       0       0       0       0       0       0       0
  5237 ;;      Temps:          3       0       0       0       0       0       0       0       0
  5238 ;;      Totals:        11       0       0       0       0       0       0       0       0
  5239 ;;Total ram usage:       11 bytes
  5240 ;; Hardware stack levels used:    1
  5241 ;; This function calls:
  5242 ;;		Nothing
  5243 ;; This function is called by:
  5244 ;;		_printTemp
  5245 ;; This function uses a non-reentrant model
  5246 ;;
  5247                           
  5248                           	psect	text17
  5249  0040FE                     __ptext17:
  5250                           	opt stack 0
  5251  0040FE                     _lowbit:
  5252                           	opt stack 25
  5253                           
  5254                           ;defs.c: 27: uint32_t log2Val = 0;
  5255                           
  5256                           ;incstack = 0
  5257  0040FE  0E00               	movlw	0
  5258  004100  6E08               	movwf	lowbit@log2Val,c
  5259  004102  0E00               	movlw	0
  5260  004104  6E09               	movwf	lowbit@log2Val+1,c
  5261  004106  0E00               	movlw	0
  5262  004108  6E0A               	movwf	lowbit@log2Val+2,c
  5263  00410A  0E00               	movlw	0
  5264  00410C  6E0B               	movwf	lowbit@log2Val+3,c
  5265                           
  5266                           ;defs.c: 28: if (x & 1)
  5267  00410E  A001               	btfss	lowbit@x,0,c
  5268  004110  D008               	goto	i2l4956
  5269                           
  5270                           ;defs.c: 29: return 1;
  5271  004112  0E01               	movlw	1
  5272  004114  6E01               	movwf	?_lowbit,c
  5273  004116  0E00               	movlw	0
  5274  004118  6E02               	movwf	?_lowbit+1,c
  5275  00411A  0E00               	movlw	0
  5276  00411C  6E03               	movwf	?_lowbit+2,c
  5277  00411E  0E00               	movlw	0
  5278  004120  D021               	goto	L7
  5279  004122                     i2l4956:
  5280  004122  0E01               	movlw	1
  5281  004124  2608               	addwf	lowbit@log2Val,f,c
  5282  004126  0E00               	movlw	0
  5283  004128  2209               	addwfc	lowbit@log2Val+1,f,c
  5284  00412A  220A               	addwfc	lowbit@log2Val+2,f,c
  5285  00412C  220B               	addwfc	lowbit@log2Val+3,f,c
  5286  00412E  90D8               	bcf	status,0,c
  5287  004130  3204               	rrcf	lowbit@x+3,f,c
  5288  004132  3203               	rrcf	lowbit@x+2,f,c
  5289  004134  3202               	rrcf	lowbit@x+1,f,c
  5290  004136  3201               	rrcf	lowbit@x,f,c
  5291  004138  A001               	btfss	lowbit@x& (0+255),0,c
  5292  00413A  D7F3               	goto	i2l4956
  5293                           
  5294                           ;defs.c: 32: return 1 << log2Val;
  5295  00413C  C008  F005         	movff	lowbit@log2Val,??_lowbit
  5296  004140  0E01               	movlw	1
  5297  004142  6E06               	movwf	(??_lowbit+1)& (0+255),c
  5298  004144  6A07               	clrf	(??_lowbit+2)& (0+255),c
  5299  004146  2A05               	incf	??_lowbit,f,c
  5300  004148  D003               	goto	i2u524_44
  5301  00414A                     i2u524_45:
  5302  00414A  90D8               	bcf	status,0,c
  5303  00414C  3606               	rlcf	??_lowbit+1,f,c
  5304  00414E  3607               	rlcf	??_lowbit+2,f,c
  5305  004150                     i2u524_44:
  5306  004150  2E05               	decfsz	??_lowbit,f,c
  5307  004152  D7FB               	goto	i2u524_45
  5308  004154  C006  F001         	movff	??_lowbit+1,?_lowbit
  5309  004158  C007  F002         	movff	??_lowbit+2,?_lowbit+1
  5310  00415C  0E00               	movlw	0
  5311  00415E  BE02               	btfsc	?_lowbit+1,7,c
  5312  004160  0EFF               	movlw	-1
  5313  004162  6E03               	movwf	?_lowbit+2,c
  5314  004164                     L7:
  5315  004164  6E04               	movwf	?_lowbit+3,c
  5316  004166  0012               	return	
  5317  004168                     __end_of_lowbit:
  5318                           	opt stack 0
  5319                           tosu	equ	0xFFF
  5320                           tosh	equ	0xFFE
  5321                           tosl	equ	0xFFD
  5322                           pclatu	equ	0xFFB
  5323                           pclath	equ	0xFFA
  5324                           tblptru	equ	0xFF8
  5325                           tblptrh	equ	0xFF7
  5326                           tblptrl	equ	0xFF6
  5327                           tablat	equ	0xFF5
  5328                           prodh	equ	0xFF4
  5329                           prodl	equ	0xFF3
  5330                           intcon	equ	0xFF2
  5331                           intcon2	equ	0xFF1
  5332                           postinc0	equ	0xFEE
  5333                           fsr0h	equ	0xFEA
  5334                           fsr0l	equ	0xFE9
  5335                           wreg	equ	0xFE8
  5336                           postinc1	equ	0xFE6
  5337                           postdec1	equ	0xFE5
  5338                           fsr1h	equ	0xFE2
  5339                           fsr1l	equ	0xFE1
  5340                           indf2	equ	0xFDF
  5341                           postinc2	equ	0xFDE
  5342                           postdec2	equ	0xFDD
  5343                           fsr2h	equ	0xFDA
  5344                           fsr2l	equ	0xFD9
  5345                           status	equ	0xFD8
  5346                           
  5347 ;; *************** function ___altoft *****************
  5348 ;; Defined at:
  5349 ;;		line 42 in file "/opt/microchip/xc8/v1.32/sources/common/altoft.c"
  5350 ;; Parameters:    Size  Location     Type
  5351 ;;  c               4   50[COMRAM] long 
  5352 ;; Auto vars:     Size  Location     Type
  5353 ;;  sign            1   59[COMRAM] unsigned char 
  5354 ;;  exp             1   58[COMRAM] unsigned char 
  5355 ;; Return value:  Size  Location     Type
  5356 ;;                  3   50[COMRAM] float 
  5357 ;; Registers used:
  5358 ;;		wreg, status,2, status,0, cstack
  5359 ;; Tracked objects:
  5360 ;;		On entry : 0/0
  5361 ;;		On exit  : 0/0
  5362 ;;		Unchanged: 0/0
  5363 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5364 ;;      Params:         4       0       0       0       0       0       0       0       0
  5365 ;;      Locals:         2       0       0       0       0       0       0       0       0
  5366 ;;      Temps:          4       0       0       0       0       0       0       0       0
  5367 ;;      Totals:        10       0       0       0       0       0       0       0       0
  5368 ;;Total ram usage:       10 bytes
  5369 ;; Hardware stack levels used:    1
  5370 ;; Hardware stack levels required when called:    1
  5371 ;; This function calls:
  5372 ;;		___ftpack
  5373 ;; This function is called by:
  5374 ;;		_printTemp
  5375 ;; This function uses a non-reentrant model
  5376 ;;
  5377                           
  5378                           	psect	text18
  5379  003CC8                     __ptext18:
  5380                           	opt stack 0
  5381  003CC8                     ___altoft:
  5382                           	opt stack 24
  5383                           
  5384                           ;incstack = 0
  5385  003CC8  0E00               	movlw	0
  5386  003CCA  6E3C               	movwf	___altoft@sign,c
  5387  003CCC  0E8E               	movlw	142
  5388  003CCE  6E3B               	movwf	___altoft@exp,c
  5389  003CD0  5036               	movf	___altoft@c+3,w,c
  5390  003CD2  0A80               	xorlw	128
  5391  003CD4  0F80               	addlw	128
  5392  003CD6  E108               	bnz	i2u529_45
  5393  003CD8  0E00               	movlw	0
  5394  003CDA  5C35               	subwf	___altoft@c+2,w,c
  5395  003CDC  E105               	bnz	i2u529_45
  5396  003CDE  0E00               	movlw	0
  5397  003CE0  5C34               	subwf	___altoft@c+1,w,c
  5398  003CE2  E102               	bnz	i2u529_45
  5399  003CE4  0E00               	movlw	0
  5400  003CE6  5C33               	subwf	___altoft@c,w,c
  5401  003CE8                     i2u529_45:
  5402  003CE8  B0D8               	btfsc	status,0,c
  5403  003CEA  D011               	goto	i2l4994
  5404  003CEC  1E36               	comf	___altoft@c+3,f,c
  5405  003CEE  1E35               	comf	___altoft@c+2,f,c
  5406  003CF0  1E34               	comf	___altoft@c+1,f,c
  5407  003CF2  6C33               	negf	___altoft@c,c
  5408  003CF4  0E00               	movlw	0
  5409  003CF6  2234               	addwfc	___altoft@c+1,f,c
  5410  003CF8  2235               	addwfc	___altoft@c+2,f,c
  5411  003CFA  2236               	addwfc	___altoft@c+3,f,c
  5412  003CFC  0E01               	movlw	1
  5413  003CFE  6E3C               	movwf	___altoft@sign,c
  5414  003D00  D006               	goto	i2l4994
  5415  003D02                     i2l4992:
  5416  003D02  90D8               	bcf	status,0,c
  5417  003D04  3236               	rrcf	___altoft@c+3,f,c
  5418  003D06  3235               	rrcf	___altoft@c+2,f,c
  5419  003D08  3234               	rrcf	___altoft@c+1,f,c
  5420  003D0A  3233               	rrcf	___altoft@c,f,c
  5421  003D0C  2A3B               	incf	___altoft@exp,f,c
  5422  003D0E                     i2l4994:
  5423  003D0E  0E00               	movlw	0
  5424  003D10  1433               	andwf	___altoft@c,w,c
  5425  003D12  6E37               	movwf	??___altoft& (0+255),c
  5426  003D14  0E00               	movlw	0
  5427  003D16  1434               	andwf	___altoft@c+1,w,c
  5428  003D18  6E38               	movwf	(??___altoft+1)& (0+255),c
  5429  003D1A  0E00               	movlw	0
  5430  003D1C  1435               	andwf	___altoft@c+2,w,c
  5431  003D1E  6E39               	movwf	(??___altoft+2)& (0+255),c
  5432  003D20  0EFF               	movlw	255
  5433  003D22  1436               	andwf	___altoft@c+3,w,c
  5434  003D24  6E3A               	movwf	(??___altoft+3)& (0+255),c
  5435  003D26  503A               	movf	??___altoft+3,w,c
  5436  003D28  1037               	iorwf	??___altoft,w,c
  5437  003D2A  1038               	iorwf	??___altoft+1,w,c
  5438  003D2C  1039               	iorwf	??___altoft+2,w,c
  5439  003D2E  A4D8               	btfss	status,2,c
  5440  003D30  D7E8               	goto	i2l4992
  5441  003D32  C033  F001         	movff	___altoft@c,___ftpack@arg
  5442  003D36  C034  F002         	movff	___altoft@c+1,___ftpack@arg+1
  5443  003D3A  C035  F003         	movff	___altoft@c+2,___ftpack@arg+2
  5444  003D3E  C03B  F004         	movff	___altoft@exp,___ftpack@exp
  5445  003D42  C03C  F005         	movff	___altoft@sign,___ftpack@sign
  5446  003D46  EC70  F01D         	call	___ftpack	;wreg free
  5447  003D4A  C001  F033         	movff	?___ftpack,?___altoft
  5448  003D4E  C002  F034         	movff	?___ftpack+1,?___altoft+1
  5449  003D52  C003  F035         	movff	?___ftpack+2,?___altoft+2
  5450  003D56  0012               	return	
  5451  003D58                     __end_of___altoft:
  5452                           	opt stack 0
  5453                           tosu	equ	0xFFF
  5454                           tosh	equ	0xFFE
  5455                           tosl	equ	0xFFD
  5456                           pclatu	equ	0xFFB
  5457                           pclath	equ	0xFFA
  5458                           tblptru	equ	0xFF8
  5459                           tblptrh	equ	0xFF7
  5460                           tblptrl	equ	0xFF6
  5461                           tablat	equ	0xFF5
  5462                           prodh	equ	0xFF4
  5463                           prodl	equ	0xFF3
  5464                           intcon	equ	0xFF2
  5465                           intcon2	equ	0xFF1
  5466                           postinc0	equ	0xFEE
  5467                           fsr0h	equ	0xFEA
  5468                           fsr0l	equ	0xFE9
  5469                           wreg	equ	0xFE8
  5470                           postinc1	equ	0xFE6
  5471                           postdec1	equ	0xFE5
  5472                           fsr1h	equ	0xFE2
  5473                           fsr1l	equ	0xFE1
  5474                           indf2	equ	0xFDF
  5475                           postinc2	equ	0xFDE
  5476                           postdec2	equ	0xFDD
  5477                           fsr2h	equ	0xFDA
  5478                           fsr2l	equ	0xFD9
  5479                           status	equ	0xFD8
  5480                           
  5481 ;; *************** function _sprintf *****************
  5482 ;; Defined at:
  5483 ;;		line 492 in file "/opt/microchip/xc8/v1.32/sources/common/doprnt.c"
  5484 ;; Parameters:    Size  Location     Type
  5485 ;;  sp              2   68[COMRAM] PTR unsigned char 
  5486 ;;		 -> printTemp@str(15), printRTC@str(15), writeFloat@str(15), writeLong@str(15), 
  5487 ;;  f               2   70[COMRAM] PTR const unsigned char 
  5488 ;;		 -> STR_18(4), STR_15(4), STR_14(5), STR_13(5), 
  5489 ;;		 -> STR_12(10), STR_11(10), STR_10(10), STR_9(15), 
  5490 ;;		 -> STR_8(15), STR_7(15), STR_6(17), STR_5(15), 
  5491 ;;		 -> STR_4(13), STR_3(5), STR_2(5), 
  5492 ;; Auto vars:     Size  Location     Type
  5493 ;;  vd              4    7[BANK0 ] unsigned long 
  5494 ;;  vd              4   11[BANK0 ] unsigned long 
  5495 ;;  _val            4   32[BANK0 ] struct .
  5496 ;;  fval            3   24[BANK0 ] struct .
  5497 ;;  integ           3   15[BANK0 ] struct .
  5498 ;;  ival            3    0        struct .
  5499 ;;  prec            2   29[BANK0 ] int 
  5500 ;;  width           2   27[BANK0 ] int 
  5501 ;;  flag            2   22[BANK0 ] unsigned short 
  5502 ;;  exp             2   20[BANK0 ] int 
  5503 ;;  ap              2   18[BANK0 ] PTR void [1]
  5504 ;;		 -> ?_sprintf(2), 
  5505 ;;  c               1   31[BANK0 ] char 
  5506 ;;  d               1    0        unsigned char 
  5507 ;; Return value:  Size  Location     Type
  5508 ;;                  2   68[COMRAM] int 
  5509 ;; Registers used:
  5510 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5511 ;; Tracked objects:
  5512 ;;		On entry : 0/0
  5513 ;;		On exit  : 0/0
  5514 ;;		Unchanged: 0/0
  5515 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5516 ;;      Params:        12       0       0       0       0       0       0       0       0
  5517 ;;      Locals:         0      36       0       0       0       0       0       0       0
  5518 ;;      Temps:          6       0       0       0       0       0       0       0       0
  5519 ;;      Totals:        18      36       0       0       0       0       0       0       0
  5520 ;;Total ram usage:       54 bytes
  5521 ;; Hardware stack levels used:    1
  5522 ;; Hardware stack levels required when called:    3
  5523 ;; This function calls:
  5524 ;;		___awdiv
  5525 ;;		___ftadd
  5526 ;;		___ftge
  5527 ;;		___ftmul
  5528 ;;		___ftneg
  5529 ;;		___ftsub
  5530 ;;		___fttol
  5531 ;;		___lldiv
  5532 ;;		___llmod
  5533 ;;		___lltoft
  5534 ;;		___wmul
  5535 ;;		__div_to_l_
  5536 ;;		__tdiv_to_l_
  5537 ;;		_fround
  5538 ;;		_isdigit
  5539 ;;		_scale
  5540 ;; This function is called by:
  5541 ;;		_printRTC
  5542 ;;		_printTemp
  5543 ;;		_writeLong
  5544 ;;		_writeFloat
  5545 ;; This function uses a non-reentrant model
  5546 ;;
  5547                           
  5548                           	psect	text19
  5549  00001C                     __ptext19:
  5550                           	opt stack 0
  5551  00001C                     _sprintf:
  5552                           	opt stack 22
  5553                           
  5554                           ;doprnt.c: 494: va_list ap;
  5555                           ;doprnt.c: 499: signed char c;
  5556                           ;doprnt.c: 501: int width;
  5557                           ;doprnt.c: 504: int prec;
  5558                           ;doprnt.c: 508: unsigned short flag;
  5559                           ;doprnt.c: 515: char d;
  5560                           ;doprnt.c: 516: double fval, integ;
  5561                           ;doprnt.c: 517: int exp;
  5562                           ;doprnt.c: 518: double ival;
  5563                           ;doprnt.c: 519: union {
  5564                           ;doprnt.c: 520: unsigned long _val;
  5565                           ;doprnt.c: 521: struct {
  5566                           ;doprnt.c: 522: const char * _cp;
  5567                           ;doprnt.c: 523: unsigned _len;
  5568                           ;doprnt.c: 524: } _str;
  5569                           ;doprnt.c: 525: } _val;
  5570                           ;doprnt.c: 542: *ap = __va_start();
  5571                           
  5572                           ;incstack = 0
  5573  00001C  0E00               	movlw	high (?_sprintf+4)
  5574  00001E  0100               	movlb	0	; () banked
  5575  000020  6F73               	movwf	(sprintf@ap+1)& (0+255),b
  5576  000022  0E49               	movlw	low (?_sprintf+4)
  5577  000024  0100               	movlb	0	; () banked
  5578  000026  6F72               	movwf	sprintf@ap& (0+255),b
  5579                           
  5580                           ;doprnt.c: 545: while(c = *f++) {
  5581  000028  EF4F  F007         	goto	i2l4870
  5582  00002C                     i2l4474:
  5583                           
  5584                           ; BSR set to: 0
  5585                           ;doprnt.c: 547: if(c != '%')
  5586  00002C  0100               	movlb	0	; () banked
  5587  00002E  517F               	movf	sprintf@c& (0+255),w,b
  5588  000030  0A25               	xorlw	37
  5589  000032  B4D8               	btfsc	status,2,c
  5590  000034  D00B               	goto	i2l4480
  5591                           
  5592                           ; BSR set to: 0
  5593                           ;doprnt.c: 549: {
  5594                           ;doprnt.c: 550: ((*sp++ = (c)));
  5595  000036  C045  FFD9         	movff	sprintf@sp,fsr2l
  5596  00003A  C046  FFDA         	movff	sprintf@sp+1,fsr2h
  5597  00003E  0100               	movlb	0	; () banked
  5598  000040  C07F  FFDF         	movff	sprintf@c,indf2
  5599                           
  5600                           ; BSR set to: 0
  5601  000044  4A45               	infsnz	sprintf@sp,f,c
  5602  000046  2A46               	incf	sprintf@sp+1,f,c
  5603                           
  5604                           ;doprnt.c: 551: continue;
  5605  000048  EF4F  F007         	goto	i2l4870
  5606  00004C                     i2l4480:
  5607                           
  5608                           ; BSR set to: 0
  5609                           ;doprnt.c: 552: }
  5610                           ;doprnt.c: 555: width = 0;
  5611  00004C  0E00               	movlw	0
  5612  00004E  0100               	movlb	0	; () banked
  5613  000050  6F7C               	movwf	(sprintf@width+1)& (0+255),b
  5614  000052  0E00               	movlw	0
  5615  000054  0100               	movlb	0	; () banked
  5616  000056  6F7B               	movwf	sprintf@width& (0+255),b
  5617                           
  5618                           ;doprnt.c: 557: flag = 0;
  5619  000058  0E00               	movlw	0
  5620  00005A  0100               	movlb	0	; () banked
  5621  00005C  6F77               	movwf	(sprintf@flag+1)& (0+255),b
  5622  00005E  0E00               	movlw	0
  5623  000060  0100               	movlb	0	; () banked
  5624  000062  6F76               	movwf	sprintf@flag& (0+255),b
  5625  000064  D004               	goto	i2l4486
  5626  000066                     i2l4482:
  5627                           
  5628                           ;doprnt.c: 589: flag |= 0x04;
  5629  000066  0100               	movlb	0	; () banked
  5630  000068  8576               	bsf	sprintf@flag& (0+255),2,b
  5631                           
  5632                           ;doprnt.c: 590: f++;
  5633  00006A  4A47               	infsnz	sprintf@f,f,c
  5634  00006C  2A48               	incf	sprintf@f+1,f,c
  5635  00006E                     i2l4486:
  5636  00006E  C047  FFF6         	movff	sprintf@f,tblptrl
  5637  000072  C048  FFF7         	movff	sprintf@f+1,tblptrh
  5638  000076                     	if	0	;tblptru may be non-zero
  5639  000076                     	endif
  5640  000076                     	if	0	;tblptru may be non-zero
  5641  000076                     	endif
  5642  000076  0008               	tblrd		*
  5643  000078  50F5               	movf	tablat,w,c
  5644                           
  5645                           ; Switch size 1, requested type "space"
  5646                           ; Number of cases is 1, Range of values is 48 to 48
  5647                           ; switch strategies available:
  5648                           ; Name         Instructions Cycles
  5649                           ; simple_byte            4     3 (average)
  5650                           ;	Chosen strategy is simple_byte
  5651  00007A  0A30               	xorlw	48	; case 48
  5652  00007C  B4D8               	btfsc	status,2,c
  5653  00007E  D7F3               	goto	i2l4482
  5654                           
  5655                           ;doprnt.c: 606: if(isdigit((unsigned)*f)) {
  5656                           
  5657                           ;doprnt.c: 595: }
  5658                           
  5659                           ;doprnt.c: 594: break;
  5660  000080  C047  FFF6         	movff	sprintf@f,tblptrl
  5661  000084  C048  FFF7         	movff	sprintf@f+1,tblptrh
  5662  000088                     	if	0	;tblptru may be non-zero
  5663  000088                     	endif
  5664  000088                     	if	0	;tblptru may be non-zero
  5665  000088                     	endif
  5666  000088  0008               	tblrd		*
  5667  00008A  50F5               	movf	tablat,w,c
  5668  00008C  ECF5  F022         	call	_isdigit
  5669  000090  A0D8               	btfss	status,0,c
  5670  000092  D037               	goto	i2l4500
  5671                           
  5672                           ;doprnt.c: 607: width = 0;
  5673  000094  0E00               	movlw	0
  5674  000096  0100               	movlb	0	; () banked
  5675  000098  6F7C               	movwf	(sprintf@width+1)& (0+255),b
  5676  00009A  0E00               	movlw	0
  5677  00009C  0100               	movlb	0	; () banked
  5678  00009E  6F7B               	movwf	sprintf@width& (0+255),b
  5679  0000A0                     i2l4492:
  5680                           
  5681                           ;doprnt.c: 609: width *= 10;
  5682  0000A0  C07B  F00F         	movff	sprintf@width,___wmul@multiplier
  5683  0000A4  C07C  F010         	movff	sprintf@width+1,___wmul@multiplier+1
  5684  0000A8  0E00               	movlw	0
  5685  0000AA  6E12               	movwf	___wmul@multiplicand+1,c
  5686  0000AC  0E0A               	movlw	10
  5687  0000AE  6E11               	movwf	___wmul@multiplicand,c
  5688  0000B0  ECD0  F022         	call	___wmul	;wreg free
  5689  0000B4  C00F  F07B         	movff	?___wmul,sprintf@width
  5690  0000B8  C010  F07C         	movff	?___wmul+1,sprintf@width+1
  5691                           
  5692                           ;doprnt.c: 610: width += *f++ - '0';
  5693  0000BC  0ED0               	movlw	208
  5694  0000BE  6E51               	movwf	??_sprintf& (0+255),c
  5695  0000C0  0EFF               	movlw	255
  5696  0000C2  6E52               	movwf	(??_sprintf+1)& (0+255),c
  5697  0000C4  C047  FFF6         	movff	sprintf@f,tblptrl
  5698  0000C8  C048  FFF7         	movff	sprintf@f+1,tblptrh
  5699  0000CC                     	if	0	;tblptru may be non-zero
  5700  0000CC                     	endif
  5701  0000CC                     	if	0	;tblptru may be non-zero
  5702  0000CC                     	endif
  5703  0000CC  0008               	tblrd		*
  5704  0000CE  50F5               	movf	tablat,w,c
  5705  0000D0  6E53               	movwf	(??_sprintf+2)& (0+255),c
  5706  0000D2  6A54               	clrf	(??_sprintf+3)& (0+255),c
  5707  0000D4  5051               	movf	??_sprintf,w,c
  5708  0000D6  2653               	addwf	??_sprintf+2,f,c
  5709  0000D8  5052               	movf	??_sprintf+1,w,c
  5710  0000DA  2254               	addwfc	??_sprintf+3,f,c
  5711  0000DC  5053               	movf	??_sprintf+2,w,c
  5712  0000DE  0100               	movlb	0	; () banked
  5713  0000E0  277B               	addwf	sprintf@width& (0+255),f,b
  5714  0000E2  5054               	movf	??_sprintf+3,w,c
  5715  0000E4  0100               	movlb	0	; () banked
  5716  0000E6  237C               	addwfc	(sprintf@width+1)& (0+255),f,b
  5717                           
  5718                           ; BSR set to: 0
  5719  0000E8  4A47               	infsnz	sprintf@f,f,c
  5720  0000EA  2A48               	incf	sprintf@f+1,f,c
  5721                           
  5722                           ; BSR set to: 0
  5723                           ;doprnt.c: 611: } while(isdigit((unsigned)*f));
  5724  0000EC  C047  FFF6         	movff	sprintf@f,tblptrl
  5725  0000F0  C048  FFF7         	movff	sprintf@f+1,tblptrh
  5726  0000F4                     	if	0	;tblptru may be non-zero
  5727  0000F4                     	endif
  5728  0000F4                     	if	0	;tblptru may be non-zero
  5729  0000F4                     	endif
  5730  0000F4  0008               	tblrd		*
  5731  0000F6  50F5               	movf	tablat,w,c
  5732  0000F8  ECF5  F022         	call	_isdigit
  5733  0000FC  A0D8               	btfss	status,0,c
  5734  0000FE  D01C               	goto	i2l4508
  5735  000100  D7CF               	goto	i2l4492
  5736  000102                     i2l4500:
  5737  000102  C047  FFF6         	movff	sprintf@f,tblptrl
  5738  000106  C048  FFF7         	movff	sprintf@f+1,tblptrh
  5739  00010A                     	if	0	;tblptru may be non-zero
  5740  00010A                     	endif
  5741  00010A                     	if	0	;tblptru may be non-zero
  5742  00010A                     	endif
  5743  00010A  0008               	tblrd		*
  5744  00010C  50F5               	movf	tablat,w,c
  5745  00010E  0A2A               	xorlw	42
  5746  000110  A4D8               	btfss	status,2,c
  5747  000112  D012               	goto	i2l4508
  5748                           
  5749                           ;doprnt.c: 614: width = (*(int *)__va_arg((*(int **)ap), (int)0));
  5750  000114  C072  FFD9         	movff	sprintf@ap,fsr2l
  5751  000118  C073  FFDA         	movff	sprintf@ap+1,fsr2h
  5752  00011C  0100               	movlb	0	; () banked
  5753  00011E  CFDE F07B          	movff	postinc2,sprintf@width
  5754  000122  0100               	movlb	0	; () banked
  5755  000124  CFDD F07C          	movff	postdec2,sprintf@width+1
  5756                           
  5757                           ; BSR set to: 0
  5758  000128  0E02               	movlw	2
  5759  00012A  0100               	movlb	0	; () banked
  5760  00012C  2772               	addwf	sprintf@ap& (0+255),f,b
  5761  00012E  0E00               	movlw	0
  5762  000130  0100               	movlb	0	; () banked
  5763  000132  2373               	addwfc	(sprintf@ap+1)& (0+255),f,b
  5764                           
  5765                           ; BSR set to: 0
  5766                           ;doprnt.c: 615: f++;
  5767  000134  4A47               	infsnz	sprintf@f,f,c
  5768  000136  2A48               	incf	sprintf@f+1,f,c
  5769  000138                     i2l4508:
  5770                           
  5771                           ;doprnt.c: 617: }
  5772                           ;doprnt.c: 620: if(*f == '.') {
  5773  000138  C047  FFF6         	movff	sprintf@f,tblptrl
  5774  00013C  C048  FFF7         	movff	sprintf@f+1,tblptrh
  5775  000140                     	if	0	;tblptru may be non-zero
  5776  000140                     	endif
  5777  000140                     	if	0	;tblptru may be non-zero
  5778  000140                     	endif
  5779  000140  0008               	tblrd		*
  5780  000142  50F5               	movf	tablat,w,c
  5781  000144  0A2E               	xorlw	46
  5782  000146  A4D8               	btfss	status,2,c
  5783  000148  D04F               	goto	i2l4528
  5784                           
  5785                           ;doprnt.c: 621: flag |= 0x4000;
  5786  00014A  0100               	movlb	0	; () banked
  5787  00014C  8D77               	bsf	(sprintf@flag+1)& (0+255),6,b
  5788                           
  5789                           ;doprnt.c: 622: f++;
  5790  00014E  4A47               	infsnz	sprintf@f,f,c
  5791  000150  2A48               	incf	sprintf@f+1,f,c
  5792                           
  5793                           ; BSR set to: 0
  5794                           ;doprnt.c: 624: if(*f == '*') {
  5795  000152  C047  FFF6         	movff	sprintf@f,tblptrl
  5796  000156  C048  FFF7         	movff	sprintf@f+1,tblptrh
  5797  00015A                     	if	0	;tblptru may be non-zero
  5798  00015A                     	endif
  5799  00015A                     	if	0	;tblptru may be non-zero
  5800  00015A                     	endif
  5801  00015A  0008               	tblrd		*
  5802  00015C  50F5               	movf	tablat,w,c
  5803  00015E  0A2A               	xorlw	42
  5804  000160  A4D8               	btfss	status,2,c
  5805  000162  D013               	goto	i2l4520
  5806                           
  5807                           ; BSR set to: 0
  5808                           ;doprnt.c: 625: prec = (*(int *)__va_arg((*(int **)ap), (int)0));
  5809  000164  C072  FFD9         	movff	sprintf@ap,fsr2l
  5810  000168  C073  FFDA         	movff	sprintf@ap+1,fsr2h
  5811  00016C  0100               	movlb	0	; () banked
  5812  00016E  CFDE F07D          	movff	postinc2,sprintf@prec
  5813  000172  0100               	movlb	0	; () banked
  5814  000174  CFDD F07E          	movff	postdec2,sprintf@prec+1
  5815                           
  5816                           ; BSR set to: 0
  5817  000178  0E02               	movlw	2
  5818  00017A  0100               	movlb	0	; () banked
  5819  00017C  2772               	addwf	sprintf@ap& (0+255),f,b
  5820  00017E  0E00               	movlw	0
  5821  000180  0100               	movlb	0	; () banked
  5822  000182  2373               	addwfc	(sprintf@ap+1)& (0+255),f,b
  5823                           
  5824                           ; BSR set to: 0
  5825                           ;doprnt.c: 626: f++;
  5826  000184  4A47               	infsnz	sprintf@f,f,c
  5827  000186  2A48               	incf	sprintf@f+1,f,c
  5828                           
  5829                           ;doprnt.c: 627: } else
  5830  000188  D107               	goto	i2l4586
  5831  00018A                     i2l4520:
  5832                           
  5833                           ; BSR set to: 0
  5834                           ;doprnt.c: 629: {
  5835                           ;doprnt.c: 630: prec = 0;
  5836  00018A  0E00               	movlw	0
  5837  00018C  0100               	movlb	0	; () banked
  5838  00018E  6F7E               	movwf	(sprintf@prec+1)& (0+255),b
  5839  000190  0E00               	movlw	0
  5840  000192  0100               	movlb	0	; () banked
  5841  000194  6F7D               	movwf	sprintf@prec& (0+255),b
  5842                           
  5843                           ;doprnt.c: 631: while(isdigit((unsigned)*f))
  5844  000196  D01D               	goto	i2l4526
  5845  000198                     i2l4522:
  5846                           
  5847                           ;doprnt.c: 632: prec = prec*10 + *f++ - '0';
  5848  000198  C07D  F00F         	movff	sprintf@prec,___wmul@multiplier
  5849  00019C  C07E  F010         	movff	sprintf@prec+1,___wmul@multiplier+1
  5850  0001A0  0E00               	movlw	0
  5851  0001A2  6E12               	movwf	___wmul@multiplicand+1,c
  5852  0001A4  0E0A               	movlw	10
  5853  0001A6  6E11               	movwf	___wmul@multiplicand,c
  5854  0001A8  ECD0  F022         	call	___wmul	;wreg free
  5855  0001AC  C047  FFF6         	movff	sprintf@f,tblptrl
  5856  0001B0  C048  FFF7         	movff	sprintf@f+1,tblptrh
  5857  0001B4                     	if	0	;tblptru may be non-zero
  5858  0001B4                     	endif
  5859  0001B4                     	if	0	;tblptru may be non-zero
  5860  0001B4                     	endif
  5861  0001B4  0008               	tblrd		*
  5862  0001B6  50F5               	movf	tablat,w,c
  5863  0001B8  260F               	addwf	?___wmul,f,c
  5864  0001BA  0E00               	movlw	0
  5865  0001BC  2210               	addwfc	?___wmul+1,f,c
  5866  0001BE  0ED0               	movlw	208
  5867  0001C0  240F               	addwf	?___wmul,w,c
  5868  0001C2  0100               	movlb	0	; () banked
  5869  0001C4  6F7D               	movwf	sprintf@prec& (0+255),b
  5870  0001C6  0EFF               	movlw	255
  5871  0001C8  2010               	addwfc	?___wmul+1,w,c
  5872  0001CA  0100               	movlb	0	; () banked
  5873  0001CC  6F7E               	movwf	(sprintf@prec+1)& (0+255),b
  5874                           
  5875                           ; BSR set to: 0
  5876  0001CE  4A47               	infsnz	sprintf@f,f,c
  5877  0001D0  2A48               	incf	sprintf@f+1,f,c
  5878  0001D2                     i2l4526:
  5879                           
  5880                           ; BSR set to: 0
  5881  0001D2  C047  FFF6         	movff	sprintf@f,tblptrl
  5882  0001D6  C048  FFF7         	movff	sprintf@f+1,tblptrh
  5883  0001DA                     	if	0	;tblptru may be non-zero
  5884  0001DA                     	endif
  5885  0001DA                     	if	0	;tblptru may be non-zero
  5886  0001DA                     	endif
  5887  0001DA  0008               	tblrd		*
  5888  0001DC  50F5               	movf	tablat,w,c
  5889  0001DE  ECF5  F022         	call	_isdigit
  5890  0001E2  A0D8               	btfss	status,0,c
  5891  0001E4  D0D9               	goto	i2l4586
  5892  0001E6  D7D8               	goto	i2l4522
  5893  0001E8                     i2l4528:
  5894                           
  5895                           ;doprnt.c: 635: prec = 0;
  5896  0001E8  0E00               	movlw	0
  5897  0001EA  0100               	movlb	0	; () banked
  5898  0001EC  6F7E               	movwf	(sprintf@prec+1)& (0+255),b
  5899  0001EE  0E00               	movlw	0
  5900  0001F0  0100               	movlb	0	; () banked
  5901  0001F2  6F7D               	movwf	sprintf@prec& (0+255),b
  5902                           
  5903                           ; BSR set to: 0
  5904                           ;doprnt.c: 637: flag |= 0x1000;
  5905  0001F4  0100               	movlb	0	; () banked
  5906  0001F6  8977               	bsf	(sprintf@flag+1)& (0+255),4,b
  5907  0001F8  D0CF               	goto	i2l4586
  5908  0001FA                     i2l4532:
  5909                           
  5910                           ; BSR set to: 0
  5911                           ;doprnt.c: 652: flag |= 0x10;
  5912  0001FA  0100               	movlb	0	; () banked
  5913  0001FC  8976               	bsf	sprintf@flag& (0+255),4,b
  5914                           
  5915                           ;doprnt.c: 653: goto loop;
  5916  0001FE  D0CC               	goto	i2l4586
  5917  000200                     i2l4534:
  5918                           
  5919                           ; BSR set to: 0
  5920                           ;doprnt.c: 672: flag |= 0x400;
  5921  000200  0100               	movlb	0	; () banked
  5922  000202  8577               	bsf	(sprintf@flag+1)& (0+255),2,b
  5923                           
  5924                           ;doprnt.c: 673: break;
  5925  000204  D0EC               	goto	i2l4588
  5926  000206                     i2l4536:
  5927                           
  5928                           ; BSR set to: 0
  5929                           ;doprnt.c: 743: _val._str._cp = (*(const char * *)__va_arg((*(const char * **)ap), (cons
      +                          t char *)0));
  5930  000206  C072  FFD9         	movff	sprintf@ap,fsr2l
  5931  00020A  C073  FFDA         	movff	sprintf@ap+1,fsr2h
  5932  00020E  0100               	movlb	0	; () banked
  5933  000210  CFDE F080          	movff	postinc2,sprintf@_val
  5934  000214  0100               	movlb	0	; () banked
  5935  000216  CFDD F081          	movff	postdec2,sprintf@_val+1
  5936                           
  5937                           ; BSR set to: 0
  5938  00021A  0E02               	movlw	2
  5939  00021C  0100               	movlb	0	; () banked
  5940  00021E  2772               	addwf	sprintf@ap& (0+255),f,b
  5941  000220  0E00               	movlw	0
  5942  000222  0100               	movlb	0	; () banked
  5943  000224  2373               	addwfc	(sprintf@ap+1)& (0+255),f,b
  5944                           
  5945                           ; BSR set to: 0
  5946                           ;doprnt.c: 749: if(!_val._str._cp)
  5947  000226  0100               	movlb	0	; () banked
  5948  000228  5181               	movf	(sprintf@_val+1)& (0+255),w,b
  5949  00022A  1180               	iorwf	sprintf@_val& (0+255),w,b
  5950  00022C  A4D8               	btfss	status,2,c
  5951  00022E  D006               	goto	i2l4544
  5952                           
  5953                           ; BSR set to: 0
  5954                           ;doprnt.c: 750: _val._str._cp = "(null)";
  5955  000230  0E7F               	movlw	high STR_19
  5956  000232  0100               	movlb	0	; () banked
  5957  000234  6F81               	movwf	(sprintf@_val+1)& (0+255),b
  5958  000236  0ED6               	movlw	low STR_19
  5959  000238  0100               	movlb	0	; () banked
  5960  00023A  6F80               	movwf	sprintf@_val& (0+255),b
  5961  00023C                     i2l4544:
  5962                           
  5963                           ; BSR set to: 0
  5964                           ;doprnt.c: 754: _val._str._len = 0;
  5965  00023C  0E00               	movlw	0
  5966  00023E  0100               	movlb	0	; () banked
  5967  000240  6F83               	movwf	(sprintf@_val+3)& (0+255),b
  5968  000242  0E00               	movlw	0
  5969  000244  0100               	movlb	0	; () banked
  5970  000246  6F82               	movwf	(sprintf@_val+2)& (0+255),b
  5971                           
  5972                           ;doprnt.c: 755: while(_val._str._cp[_val._str._len])
  5973  000248  D003               	goto	i2l4548
  5974  00024A                     i2l4546:
  5975                           
  5976                           ;doprnt.c: 756: _val._str._len++;
  5977  00024A  0100               	movlb	0	; () banked
  5978  00024C  4B82               	infsnz	(sprintf@_val+2)& (0+255),f,b
  5979  00024E  2B83               	incf	(sprintf@_val+3)& (0+255),f,b
  5980  000250                     i2l4548:
  5981                           
  5982                           ; BSR set to: 0
  5983  000250  0100               	movlb	0	; () banked
  5984  000252  C080  F051         	movff	sprintf@_val,??_sprintf
  5985  000256  0100               	movlb	0	; () banked
  5986  000258  C081  F052         	movff	sprintf@_val+1,??_sprintf+1
  5987  00025C  0100               	movlb	0	; () banked
  5988  00025E  5182               	movf	(sprintf@_val+2)& (0+255),w,b
  5989  000260  2651               	addwf	??_sprintf,f,c
  5990  000262  0100               	movlb	0	; () banked
  5991  000264  5183               	movf	(sprintf@_val+3)& (0+255),w,b
  5992  000266  2252               	addwfc	??_sprintf+1,f,c
  5993  000268  C051  FFF6         	movff	??_sprintf,tblptrl
  5994  00026C  C052  FFF7         	movff	??_sprintf+1,tblptrh
  5995  000270  6AF8               	clrf	tblptru,c
  5996  000272  0E07               	movlw	(high __ramtop+-1)
  5997  000274  64F7               	cpfsgt	tblptrh,c
  5998  000276  D003               	bra	i2u451_47
  5999  000278  0008               	tblrd		*
  6000  00027A  50F5               	movf	tablat,w,c
  6001  00027C  D005               	bra	i2u451_40
  6002  00027E                     i2u451_47:
  6003  00027E  CFF6 FFE9          	movff	tblptrl,fsr0l
  6004  000282  CFF7 FFEA          	movff	tblptrh,fsr0h
  6005  000286  50EF               	movf	indf0,w,c
  6006  000288                     i2u451_40:
  6007  000288  0900               	iorlw	0
  6008  00028A  A4D8               	btfss	status,2,c
  6009  00028C  D7DE               	goto	i2l4546
  6010  00028E                     i2l4550:
  6011                           
  6012                           ;doprnt.c: 762: if(prec && prec < _val._str._len)
  6013  00028E  0100               	movlb	0	; () banked
  6014  000290  517E               	movf	(sprintf@prec+1)& (0+255),w,b
  6015  000292  117D               	iorwf	sprintf@prec& (0+255),w,b
  6016  000294  B4D8               	btfsc	status,2,c
  6017  000296  D00E               	goto	i2l4556
  6018                           
  6019                           ; BSR set to: 0
  6020  000298  0100               	movlb	0	; () banked
  6021  00029A  5182               	movf	(sprintf@_val+2)& (0+255),w,b
  6022  00029C  0100               	movlb	0	; () banked
  6023  00029E  5D7D               	subwf	sprintf@prec& (0+255),w,b
  6024  0002A0  0100               	movlb	0	; () banked
  6025  0002A2  5183               	movf	(sprintf@_val+3)& (0+255),w,b
  6026  0002A4  0100               	movlb	0	; () banked
  6027  0002A6  597E               	subwfb	(sprintf@prec+1)& (0+255),w,b
  6028  0002A8  B0D8               	btfsc	status,0,c
  6029  0002AA  D004               	goto	i2l4556
  6030                           
  6031                           ; BSR set to: 0
  6032                           ;doprnt.c: 763: _val._str._len = prec;
  6033  0002AC  C07D  F082         	movff	sprintf@prec,sprintf@_val+2
  6034  0002B0  C07E  F083         	movff	sprintf@prec+1,sprintf@_val+3
  6035  0002B4                     i2l4556:
  6036                           
  6037                           ; BSR set to: 0
  6038                           ;doprnt.c: 766: if(width > _val._str._len)
  6039  0002B4  0100               	movlb	0	; () banked
  6040  0002B6  517B               	movf	sprintf@width& (0+255),w,b
  6041  0002B8  0100               	movlb	0	; () banked
  6042  0002BA  5D82               	subwf	(sprintf@_val+2)& (0+255),w,b
  6043  0002BC  0100               	movlb	0	; () banked
  6044  0002BE  517C               	movf	(sprintf@width+1)& (0+255),w,b
  6045  0002C0  0100               	movlb	0	; () banked
  6046  0002C2  5983               	subwfb	(sprintf@_val+3)& (0+255),w,b
  6047  0002C4  B0D8               	btfsc	status,0,c
  6048  0002C6  D00A               	goto	i2l4560
  6049                           
  6050                           ; BSR set to: 0
  6051                           ;doprnt.c: 767: width -= _val._str._len;
  6052  0002C8  0100               	movlb	0	; () banked
  6053  0002CA  EE20  F082         	lfsr	2,sprintf@_val+2
  6054  0002CE  50DE               	movf	postinc2,w,c
  6055  0002D0  0100               	movlb	0	; () banked
  6056  0002D2  5F7B               	subwf	sprintf@width& (0+255),f,b
  6057  0002D4  50DD               	movf	postdec2,w,c
  6058  0002D6  0100               	movlb	0	; () banked
  6059  0002D8  5B7C               	subwfb	(sprintf@width+1)& (0+255),f,b
  6060  0002DA  D00F               	goto	i2l4566
  6061  0002DC                     i2l4560:
  6062                           
  6063                           ; BSR set to: 0
  6064                           ;doprnt.c: 768: else
  6065                           ;doprnt.c: 769: width = 0;
  6066  0002DC  0E00               	movlw	0
  6067  0002DE  0100               	movlb	0	; () banked
  6068  0002E0  6F7C               	movwf	(sprintf@width+1)& (0+255),b
  6069  0002E2  0E00               	movlw	0
  6070  0002E4  0100               	movlb	0	; () banked
  6071  0002E6  6F7B               	movwf	sprintf@width& (0+255),b
  6072  0002E8  D008               	goto	i2l4566
  6073  0002EA                     i2l4562:
  6074                           
  6075                           ; BSR set to: 0
  6076                           ;doprnt.c: 774: ((*sp++ = (' ')));
  6077  0002EA  C045  FFD9         	movff	sprintf@sp,fsr2l
  6078  0002EE  C046  FFDA         	movff	sprintf@sp+1,fsr2h
  6079  0002F2  0E20               	movlw	32
  6080  0002F4  6EDF               	movwf	indf2,c
  6081                           
  6082                           ; BSR set to: 0
  6083  0002F6  4A45               	infsnz	sprintf@sp,f,c
  6084  0002F8  2A46               	incf	sprintf@sp+1,f,c
  6085  0002FA                     i2l4566:
  6086                           
  6087                           ; BSR set to: 0
  6088  0002FA  0100               	movlb	0	; () banked
  6089  0002FC  077B               	decf	sprintf@width& (0+255),f,b
  6090  0002FE  A0D8               	btfss	status,0,c
  6091  000300  077C               	decf	(sprintf@width+1)& (0+255),f,b
  6092  000302  0100               	movlb	0	; () banked
  6093  000304  297B               	incf	sprintf@width& (0+255),w,b
  6094  000306  B4D8               	btfsc	status,2,c
  6095  000308  297C               	incf	(sprintf@width+1)& (0+255),w,b
  6096  00030A  B4D8               	btfsc	status,2,c
  6097  00030C  D01D               	goto	i2l4574
  6098  00030E  D7ED               	goto	i2l4562
  6099  000310                     i2l4568:
  6100                           
  6101                           ; BSR set to: 0
  6102                           ;doprnt.c: 777: ((*sp++ = (*_val._str._cp++)));
  6103  000310  0100               	movlb	0	; () banked
  6104  000312  C080  FFF6         	movff	sprintf@_val,tblptrl
  6105  000316  0100               	movlb	0	; () banked
  6106  000318  C081  FFF7         	movff	sprintf@_val+1,tblptrh
  6107  00031C  6AF8               	clrf	tblptru,c
  6108  00031E  C045  FFD9         	movff	sprintf@sp,fsr2l
  6109  000322  C046  FFDA         	movff	sprintf@sp+1,fsr2h
  6110  000326  0E07               	movlw	(high __ramtop+-1)
  6111  000328  64F7               	cpfsgt	tblptrh,c
  6112  00032A  D003               	bra	i2u457_47
  6113  00032C  0008               	tblrd		*
  6114  00032E  50F5               	movf	tablat,w,c
  6115  000330  D005               	bra	i2u457_40
  6116  000332                     i2u457_47:
  6117  000332  CFF6 FFE9          	movff	tblptrl,fsr0l
  6118  000336  CFF7 FFEA          	movff	tblptrh,fsr0h
  6119  00033A  50EF               	movf	indf0,w,c
  6120  00033C                     i2u457_40:
  6121  00033C  6EDF               	movwf	indf2,c
  6122  00033E  0100               	movlb	0	; () banked
  6123  000340  4B80               	infsnz	sprintf@_val& (0+255),f,b
  6124  000342  2B81               	incf	(sprintf@_val+1)& (0+255),f,b
  6125                           
  6126                           ; BSR set to: 0
  6127  000344  4A45               	infsnz	sprintf@sp,f,c
  6128  000346  2A46               	incf	sprintf@sp+1,f,c
  6129  000348                     i2l4574:
  6130                           
  6131                           ; BSR set to: 0
  6132  000348  0100               	movlb	0	; () banked
  6133  00034A  0782               	decf	(sprintf@_val+2)& (0+255),f,b
  6134  00034C  A0D8               	btfss	status,0,c
  6135  00034E  0783               	decf	(sprintf@_val+3)& (0+255),f,b
  6136  000350  0100               	movlb	0	; () banked
  6137  000352  2982               	incf	(sprintf@_val+2)& (0+255),w,b
  6138  000354  B4D8               	btfsc	status,2,c
  6139  000356  2983               	incf	(sprintf@_val+3)& (0+255),w,b
  6140  000358  B4D8               	btfsc	status,2,c
  6141  00035A  EF4F  F007         	goto	i2l4870
  6142  00035E  D7D8               	goto	i2l4568
  6143  000360                     i2l4576:
  6144                           
  6145                           ; BSR set to: 0
  6146                           ;doprnt.c: 808: c = (*(int *)__va_arg((*(int **)ap), (int)0));
  6147  000360  C072  FFD9         	movff	sprintf@ap,fsr2l
  6148  000364  C073  FFDA         	movff	sprintf@ap+1,fsr2h
  6149  000368  50DF               	movf	indf2,w,c
  6150  00036A  0100               	movlb	0	; () banked
  6151  00036C  6F7F               	movwf	sprintf@c& (0+255),b
  6152                           
  6153                           ; BSR set to: 0
  6154  00036E  0E02               	movlw	2
  6155  000370  0100               	movlb	0	; () banked
  6156  000372  2772               	addwf	sprintf@ap& (0+255),f,b
  6157  000374  0E00               	movlw	0
  6158  000376  0100               	movlb	0	; () banked
  6159  000378  2373               	addwfc	(sprintf@ap+1)& (0+255),f,b
  6160  00037A                     i2l4580:
  6161                           
  6162                           ; BSR set to: 0
  6163                           ;doprnt.c: 814: _val._str._cp = (char *)&c;
  6164  00037A  0100               	movlb	0	; () banked
  6165  00037C  0E00               	movlw	high sprintf@c
  6166  00037E  0100               	movlb	0	; () banked
  6167  000380  6F81               	movwf	(sprintf@_val+1)& (0+255),b
  6168  000382  0100               	movlb	0	; () banked
  6169  000384  0E7F               	movlw	low sprintf@c
  6170  000386  0100               	movlb	0	; () banked
  6171  000388  6F80               	movwf	sprintf@_val& (0+255),b
  6172                           
  6173                           ; BSR set to: 0
  6174                           ;doprnt.c: 815: _val._str._len = 1;
  6175  00038A  0E00               	movlw	0
  6176  00038C  0100               	movlb	0	; () banked
  6177  00038E  6F83               	movwf	(sprintf@_val+3)& (0+255),b
  6178  000390  0E01               	movlw	1
  6179  000392  0100               	movlb	0	; () banked
  6180  000394  6F82               	movwf	(sprintf@_val+2)& (0+255),b
  6181                           
  6182                           ;doprnt.c: 816: goto dostring;
  6183  000396  D77B               	goto	i2l4550
  6184  000398                     i2l4586:
  6185  000398  C047  FFF6         	movff	sprintf@f,tblptrl
  6186  00039C  C048  FFF7         	movff	sprintf@f+1,tblptrh
  6187  0003A0  4A47               	infsnz	sprintf@f,f,c
  6188  0003A2  2A48               	incf	sprintf@f+1,f,c
  6189  0003A4                     	if	0	;tblptru may be non-zero
  6190  0003A4                     	endif
  6191  0003A4                     	if	0	;tblptru may be non-zero
  6192  0003A4                     	endif
  6193  0003A4  0008               	tblrd		*
  6194  0003A6  0100               	movlb	0	; () banked
  6195  0003A8  CFF5 F07F          	movff	tablat,sprintf@c
  6196  0003AC  0100               	movlb	0	; () banked
  6197  0003AE  517F               	movf	sprintf@c& (0+255),w,b
  6198                           
  6199                           ; Switch size 1, requested type "space"
  6200                           ; Number of cases is 7, Range of values is 0 to 115
  6201                           ; switch strategies available:
  6202                           ; Name         Instructions Cycles
  6203                           ; simple_byte           22    12 (average)
  6204                           ;	Chosen strategy is simple_byte
  6205  0003B0  0A00               	xorlw	0	; case 0
  6206  0003B2  B4D8               	btfsc	status,2,c
  6207  0003B4  EF5D  F007         	goto	i2l4872
  6208  0003B8  0A63               	xorlw	99	; case 99
  6209  0003BA  B4D8               	btfsc	status,2,c
  6210  0003BC  D7D1               	goto	i2l4576
  6211  0003BE  0A07               	xorlw	7	; case 100
  6212  0003C0  B4D8               	btfsc	status,2,c
  6213  0003C2  D00D               	goto	i2l4588
  6214  0003C4  0A02               	xorlw	2	; case 102
  6215  0003C6  B4D8               	btfsc	status,2,c
  6216  0003C8  D71B               	goto	i2l4534
  6217  0003CA  0A0F               	xorlw	15	; case 105
  6218  0003CC  B4D8               	btfsc	status,2,c
  6219  0003CE  D007               	goto	i2l4588
  6220  0003D0  0A05               	xorlw	5	; case 108
  6221  0003D2  B4D8               	btfsc	status,2,c
  6222  0003D4  D712               	goto	i2l4532
  6223  0003D6  0A1F               	xorlw	31	; case 115
  6224  0003D8  B4D8               	btfsc	status,2,c
  6225  0003DA  D715               	goto	i2l4536
  6226  0003DC  D7CE               	goto	i2l4580
  6227  0003DE                     i2l4588:
  6228                           
  6229                           ; BSR set to: 0
  6230                           ;doprnt.c: 834: if(flag & (0x700)) {
  6231  0003DE  0E07               	movlw	7
  6232  0003E0  0100               	movlb	0	; () banked
  6233  0003E2  1577               	andwf	(sprintf@flag+1)& (0+255),w,b
  6234  0003E4  B4D8               	btfsc	status,2,c
  6235  0003E6  D3A9               	goto	i2l708
  6236                           
  6237                           ; BSR set to: 0
  6238                           ;doprnt.c: 836: if(flag & 0x1000)
  6239  0003E8  0100               	movlb	0	; () banked
  6240  0003EA  A977               	btfss	(sprintf@flag+1)& (0+255),4,b
  6241  0003EC  D006               	goto	i2l4594
  6242                           
  6243                           ; BSR set to: 0
  6244                           ;doprnt.c: 838: prec = 6;
  6245  0003EE  0E00               	movlw	0
  6246  0003F0  0100               	movlb	0	; () banked
  6247  0003F2  6F7E               	movwf	(sprintf@prec+1)& (0+255),b
  6248  0003F4  0E06               	movlw	6
  6249  0003F6  0100               	movlb	0	; () banked
  6250  0003F8  6F7D               	movwf	sprintf@prec& (0+255),b
  6251  0003FA                     i2l4594:
  6252                           
  6253                           ; BSR set to: 0
  6254                           ;doprnt.c: 839: fval = (*(double *)__va_arg((*(double **)ap), (double)0));
  6255  0003FA  C072  FFD9         	movff	sprintf@ap,fsr2l
  6256  0003FE  C073  FFDA         	movff	sprintf@ap+1,fsr2h
  6257  000402  0100               	movlb	0	; () banked
  6258  000404  CFDE F078          	movff	postinc2,sprintf@fval
  6259  000408  0100               	movlb	0	; () banked
  6260  00040A  CFDE F079          	movff	postinc2,sprintf@fval+1
  6261  00040E  0100               	movlb	0	; () banked
  6262  000410  CFDD F07A          	movff	postdec2,sprintf@fval+2
  6263                           
  6264                           ; BSR set to: 0
  6265  000414  0E03               	movlw	3
  6266  000416  0100               	movlb	0	; () banked
  6267  000418  2772               	addwf	sprintf@ap& (0+255),f,b
  6268  00041A  0E00               	movlw	0
  6269  00041C  0100               	movlb	0	; () banked
  6270  00041E  2373               	addwfc	(sprintf@ap+1)& (0+255),f,b
  6271                           
  6272                           ; BSR set to: 0
  6273                           ;doprnt.c: 840: if(fval < 0.0) {
  6274  000420  0100               	movlb	0	; () banked
  6275  000422  517A               	movf	(sprintf@fval+2)& (0+255),w,b
  6276  000424  0A80               	xorlw	128
  6277  000426  0F80               	addlw	128
  6278  000428  E107               	bnz	i2u461_45
  6279  00042A  0E00               	movlw	0
  6280  00042C  0100               	movlb	0	; () banked
  6281  00042E  5D79               	subwf	(sprintf@fval+1)& (0+255),w,b
  6282  000430  E103               	bnz	i2u461_45
  6283  000432  0E00               	movlw	0
  6284  000434  0100               	movlb	0	; () banked
  6285  000436  5D78               	subwf	sprintf@fval& (0+255),w,b
  6286  000438                     i2u461_45:
  6287  000438  B0D8               	btfsc	status,0,c
  6288  00043A  D011               	goto	i2l4604
  6289                           
  6290                           ; BSR set to: 0
  6291                           ;doprnt.c: 841: fval = -fval;
  6292  00043C  C078  F001         	movff	sprintf@fval,___ftneg@f1
  6293  000440  C079  F002         	movff	sprintf@fval+1,___ftneg@f1+1
  6294  000444  C07A  F003         	movff	sprintf@fval+2,___ftneg@f1+2
  6295  000448  ECBD  F022         	call	___ftneg	;wreg free
  6296  00044C  C001  F078         	movff	?___ftneg,sprintf@fval
  6297  000450  C002  F079         	movff	?___ftneg+1,sprintf@fval+1
  6298  000454  C003  F07A         	movff	?___ftneg+2,sprintf@fval+2
  6299                           
  6300                           ;doprnt.c: 842: flag |= 0x03;
  6301  000458  0E03               	movlw	3
  6302  00045A  0100               	movlb	0	; () banked
  6303  00045C  1376               	iorwf	sprintf@flag& (0+255),f,b
  6304  00045E                     i2l4604:
  6305                           
  6306                           ; BSR set to: 0
  6307                           ;doprnt.c: 843: }
  6308                           ;doprnt.c: 844: exp = 0;
  6309  00045E  0E00               	movlw	0
  6310  000460  0100               	movlb	0	; () banked
  6311  000462  6F75               	movwf	(sprintf@exp+1)& (0+255),b
  6312  000464  0E00               	movlw	0
  6313  000466  0100               	movlb	0	; () banked
  6314  000468  6F74               	movwf	sprintf@exp& (0+255),b
  6315                           
  6316                           ; BSR set to: 0
  6317                           ;doprnt.c: 845: if( fval!=0) {
  6318  00046A  0E7F               	movlw	127
  6319  00046C  0100               	movlb	0	; () banked
  6320  00046E  157A               	andwf	(sprintf@fval+2)& (0+255),w,b
  6321  000470  0100               	movlb	0	; () banked
  6322  000472  1179               	iorwf	(sprintf@fval+1)& (0+255),w,b
  6323  000474  0100               	movlb	0	; () banked
  6324  000476  1178               	iorwf	sprintf@fval& (0+255),w,b
  6325  000478  B4D8               	btfsc	status,2,c
  6326  00047A  D097               	goto	i2l4632
  6327                           
  6328                           ; BSR set to: 0
  6329                           ;doprnt.c: 846: (void)(*(&exp) = ((*(unsigned long *)&fval >> 15) & 255) - 126);
  6330  00047C  0E82               	movlw	130
  6331  00047E  6E51               	movwf	??_sprintf& (0+255),c
  6332  000480  0EFF               	movlw	255
  6333  000482  6E52               	movwf	(??_sprintf+1)& (0+255),c
  6334  000484  0100               	movlb	0	; () banked
  6335  000486  C078  F053         	movff	sprintf@fval,??_sprintf+2
  6336  00048A  0100               	movlb	0	; () banked
  6337  00048C  C079  F054         	movff	sprintf@fval+1,??_sprintf+3
  6338  000490  0100               	movlb	0	; () banked
  6339  000492  C07A  F055         	movff	sprintf@fval+2,??_sprintf+4
  6340  000496  0100               	movlb	0	; () banked
  6341  000498  C07B  F056         	movff	sprintf@fval+3,??_sprintf+5
  6342  00049C  0E10               	movlw	16
  6343  00049E  D005               	goto	i2u463_40
  6344  0004A0                     i2u463_45:
  6345  0004A0  90D8               	bcf	status,0,c
  6346  0004A2  3256               	rrcf	??_sprintf+5,f,c
  6347  0004A4  3255               	rrcf	??_sprintf+4,f,c
  6348  0004A6  3254               	rrcf	??_sprintf+3,f,c
  6349  0004A8  3253               	rrcf	??_sprintf+2,f,c
  6350  0004AA                     i2u463_40:
  6351  0004AA  2EE8               	decfsz	wreg,f,c
  6352  0004AC  D7F9               	goto	i2u463_45
  6353  0004AE  5053               	movf	??_sprintf+2,w,c
  6354  0004B0  2451               	addwf	??_sprintf,w,c
  6355  0004B2  0100               	movlb	0	; () banked
  6356  0004B4  6F74               	movwf	sprintf@exp& (0+255),b
  6357  0004B6  0E00               	movlw	0
  6358  0004B8  2052               	addwfc	??_sprintf+1,w,c
  6359  0004BA  0100               	movlb	0	; () banked
  6360  0004BC  6F75               	movwf	(sprintf@exp+1)& (0+255),b
  6361                           
  6362                           ; BSR set to: 0
  6363                           ;doprnt.c: 847: exp--;
  6364  0004BE  0100               	movlb	0	; () banked
  6365  0004C0  0774               	decf	sprintf@exp& (0+255),f,b
  6366  0004C2  A0D8               	btfss	status,0,c
  6367  0004C4  0775               	decf	(sprintf@exp+1)& (0+255),f,b
  6368                           
  6369                           ; BSR set to: 0
  6370                           ;doprnt.c: 848: exp *= 3;
  6371  0004C6  C074  F00F         	movff	sprintf@exp,___wmul@multiplier
  6372  0004CA  C075  F010         	movff	sprintf@exp+1,___wmul@multiplier+1
  6373  0004CE  0E00               	movlw	0
  6374  0004D0  6E12               	movwf	___wmul@multiplicand+1,c
  6375  0004D2  0E03               	movlw	3
  6376  0004D4  6E11               	movwf	___wmul@multiplicand,c
  6377  0004D6  ECD0  F022         	call	___wmul	;wreg free
  6378  0004DA  C00F  F074         	movff	?___wmul,sprintf@exp
  6379  0004DE  C010  F075         	movff	?___wmul+1,sprintf@exp+1
  6380                           
  6381                           ;doprnt.c: 849: exp /= 10;
  6382  0004E2  C074  F007         	movff	sprintf@exp,___awdiv@dividend
  6383  0004E6  C075  F008         	movff	sprintf@exp+1,___awdiv@dividend+1
  6384  0004EA  0E00               	movlw	0
  6385  0004EC  6E0A               	movwf	___awdiv@divisor+1,c
  6386  0004EE  0E0A               	movlw	10
  6387  0004F0  6E09               	movwf	___awdiv@divisor,c
  6388  0004F2  ECC4  F01D         	call	___awdiv	;wreg free
  6389  0004F6  C007  F074         	movff	?___awdiv,sprintf@exp
  6390  0004FA  C008  F075         	movff	?___awdiv+1,sprintf@exp+1
  6391                           
  6392                           ;doprnt.c: 850: if(exp < 0)
  6393  0004FE  0100               	movlb	0	; () banked
  6394  000500  5175               	movf	(sprintf@exp+1)& (0+255),w,b
  6395  000502  0A80               	xorlw	128
  6396  000504  6EF3               	movwf	prodl,c
  6397  000506  0E80               	movlw	128
  6398  000508  5CF3               	subwf	prodl,w,c
  6399  00050A  0E00               	movlw	0
  6400  00050C  B4D8               	btfsc	status,2,c
  6401  00050E  5D74               	subwf	sprintf@exp& (0+255),w,b
  6402  000510  B0D8               	btfsc	status,0,c
  6403  000512  D004               	goto	i2l4620
  6404                           
  6405                           ; BSR set to: 0
  6406                           ;doprnt.c: 851: exp--;
  6407  000514  0100               	movlb	0	; () banked
  6408  000516  0774               	decf	sprintf@exp& (0+255),f,b
  6409  000518  A0D8               	btfss	status,0,c
  6410  00051A  0775               	decf	(sprintf@exp+1)& (0+255),f,b
  6411  00051C                     i2l4620:
  6412                           
  6413                           ; BSR set to: 0
  6414                           ;doprnt.c: 855: integ = scale(-exp);
  6415  00051C  0100               	movlb	0	; () banked
  6416  00051E  5174               	movf	sprintf@exp& (0+255),w,b
  6417  000520  0800               	sublw	0
  6418  000522  EC2B  F00E         	call	_scale
  6419  000526  C024  F06F         	movff	?_scale,sprintf@integ
  6420  00052A  C025  F070         	movff	?_scale+1,sprintf@integ+1
  6421  00052E  C026  F071         	movff	?_scale+2,sprintf@integ+2
  6422                           
  6423                           ;doprnt.c: 856: integ *= fval;
  6424  000532  C06F  F015         	movff	sprintf@integ,___ftmul@f1
  6425  000536  C070  F016         	movff	sprintf@integ+1,___ftmul@f1+1
  6426  00053A  C071  F017         	movff	sprintf@integ+2,___ftmul@f1+2
  6427  00053E  C078  F018         	movff	sprintf@fval,___ftmul@f2
  6428  000542  C079  F019         	movff	sprintf@fval+1,___ftmul@f2+1
  6429  000546  C07A  F01A         	movff	sprintf@fval+2,___ftmul@f2+2
  6430  00054A  EC61  F01B         	call	___ftmul	;wreg free
  6431  00054E  C015  F06F         	movff	?___ftmul,sprintf@integ
  6432  000552  C016  F070         	movff	?___ftmul+1,sprintf@integ+1
  6433  000556  C017  F071         	movff	?___ftmul+2,sprintf@integ+2
  6434                           
  6435                           ;doprnt.c: 857: if(integ < 1.0)
  6436  00055A  C06F  F001         	movff	sprintf@integ,___ftge@ff1
  6437  00055E  C070  F002         	movff	sprintf@integ+1,___ftge@ff1+1
  6438  000562  C071  F003         	movff	sprintf@integ+2,___ftge@ff1+2
  6439  000566  0E00               	movlw	0
  6440  000568  6E04               	movwf	___ftge@ff2,c
  6441  00056A  0E80               	movlw	128
  6442  00056C  6E05               	movwf	___ftge@ff2+1,c
  6443  00056E  0E3F               	movlw	63
  6444  000570  6E06               	movwf	___ftge@ff2+2,c
  6445  000572  ECAC  F01E         	call	___ftge	;wreg free
  6446  000576  B0D8               	btfsc	status,0,c
  6447  000578  D005               	goto	i2l4628
  6448                           
  6449                           ;doprnt.c: 858: exp--;
  6450  00057A  0100               	movlb	0	; () banked
  6451  00057C  0774               	decf	sprintf@exp& (0+255),f,b
  6452  00057E  A0D8               	btfss	status,0,c
  6453  000580  0775               	decf	(sprintf@exp+1)& (0+255),f,b
  6454  000582  D013               	goto	i2l4632
  6455  000584                     i2l4628:
  6456                           
  6457                           ;doprnt.c: 859: else if(integ >= 10.0)
  6458  000584  C06F  F001         	movff	sprintf@integ,___ftge@ff1
  6459  000588  C070  F002         	movff	sprintf@integ+1,___ftge@ff1+1
  6460  00058C  C071  F003         	movff	sprintf@integ+2,___ftge@ff1+2
  6461  000590  0E00               	movlw	0
  6462  000592  6E04               	movwf	___ftge@ff2,c
  6463  000594  0E20               	movlw	32
  6464  000596  6E05               	movwf	___ftge@ff2+1,c
  6465  000598  0E41               	movlw	65
  6466  00059A  6E06               	movwf	___ftge@ff2+2,c
  6467  00059C  ECAC  F01E         	call	___ftge	;wreg free
  6468  0005A0  A0D8               	btfss	status,0,c
  6469  0005A2  D003               	goto	i2l4632
  6470                           
  6471                           ;doprnt.c: 860: exp++;
  6472  0005A4  0100               	movlb	0	; () banked
  6473  0005A6  4B74               	infsnz	sprintf@exp& (0+255),f,b
  6474  0005A8  2B75               	incf	(sprintf@exp+1)& (0+255),f,b
  6475  0005AA                     i2l4632:
  6476                           
  6477                           ;doprnt.c: 861: }
  6478                           ;doprnt.c: 1121: if(prec <= 12)
  6479  0005AA  0100               	movlb	0	; () banked
  6480  0005AC  517E               	movf	(sprintf@prec+1)& (0+255),w,b
  6481  0005AE  0A80               	xorlw	128
  6482  0005B0  6EF3               	movwf	prodl,c
  6483  0005B2  0E80               	movlw	128
  6484  0005B4  5CF3               	subwf	prodl,w,c
  6485  0005B6  0E0D               	movlw	13
  6486  0005B8  B4D8               	btfsc	status,2,c
  6487  0005BA  5D7D               	subwf	sprintf@prec& (0+255),w,b
  6488  0005BC  B0D8               	btfsc	status,0,c
  6489  0005BE  D018               	goto	i2l4636
  6490                           
  6491                           ; BSR set to: 0
  6492                           ;doprnt.c: 1122: fval += fround(prec);
  6493  0005C0  C078  F033         	movff	sprintf@fval,___ftadd@f1
  6494  0005C4  C079  F034         	movff	sprintf@fval+1,___ftadd@f1+1
  6495  0005C8  C07A  F035         	movff	sprintf@fval+2,___ftadd@f1+2
  6496  0005CC  0100               	movlb	0	; () banked
  6497  0005CE  517D               	movf	sprintf@prec& (0+255),w,b
  6498  0005D0  EC19  F013         	call	_fround
  6499  0005D4  C024  F036         	movff	?_fround,___ftadd@f2
  6500  0005D8  C025  F037         	movff	?_fround+1,___ftadd@f2+1
  6501  0005DC  C026  F038         	movff	?_fround+2,___ftadd@f2+2
  6502  0005E0  EC44  F017         	call	___ftadd	;wreg free
  6503  0005E4  C033  F078         	movff	?___ftadd,sprintf@fval
  6504  0005E8  C034  F079         	movff	?___ftadd+1,sprintf@fval+1
  6505  0005EC  C035  F07A         	movff	?___ftadd+2,sprintf@fval+2
  6506  0005F0                     i2l4636:
  6507                           
  6508                           ;doprnt.c: 1125: if((exp > 9)||(fval != 0 && (unsigned long)fval == 0 && exp > 1)) {
  6509  0005F0  0100               	movlb	0	; () banked
  6510  0005F2  5175               	movf	(sprintf@exp+1)& (0+255),w,b
  6511  0005F4  0A80               	xorlw	128
  6512  0005F6  6EF3               	movwf	prodl,c
  6513  0005F8  0E80               	movlw	128
  6514  0005FA  5CF3               	subwf	prodl,w,c
  6515  0005FC  0E0A               	movlw	10
  6516  0005FE  B4D8               	btfsc	status,2,c
  6517  000600  5D74               	subwf	sprintf@exp& (0+255),w,b
  6518  000602  B0D8               	btfsc	status,0,c
  6519  000604  D028               	goto	i2l4644
  6520                           
  6521                           ; BSR set to: 0
  6522  000606  0E7F               	movlw	127
  6523  000608  0100               	movlb	0	; () banked
  6524  00060A  157A               	andwf	(sprintf@fval+2)& (0+255),w,b
  6525  00060C  0100               	movlb	0	; () banked
  6526  00060E  1179               	iorwf	(sprintf@fval+1)& (0+255),w,b
  6527  000610  0100               	movlb	0	; () banked
  6528  000612  1178               	iorwf	sprintf@fval& (0+255),w,b
  6529  000614  B4D8               	btfsc	status,2,c
  6530  000616  D06B               	goto	i2l4660
  6531                           
  6532                           ; BSR set to: 0
  6533  000618  C078  F024         	movff	sprintf@fval,___fttol@f1
  6534  00061C  C079  F025         	movff	sprintf@fval+1,___fttol@f1+1
  6535  000620  C07A  F026         	movff	sprintf@fval+2,___fttol@f1+2
  6536  000624  ECAF  F01C         	call	___fttol	;wreg free
  6537  000628  C024  F051         	movff	?___fttol,??_sprintf
  6538  00062C  C025  F052         	movff	?___fttol+1,??_sprintf+1
  6539  000630  C026  F053         	movff	?___fttol+2,??_sprintf+2
  6540  000634  C027  F054         	movff	?___fttol+3,??_sprintf+3
  6541  000638  5054               	movf	??_sprintf+3,w,c
  6542  00063A  1051               	iorwf	??_sprintf,w,c
  6543  00063C  1052               	iorwf	??_sprintf+1,w,c
  6544  00063E  1053               	iorwf	??_sprintf+2,w,c
  6545  000640  A4D8               	btfss	status,2,c
  6546  000642  D055               	goto	i2l4660
  6547  000644  0100               	movlb	0	; () banked
  6548  000646  5175               	movf	(sprintf@exp+1)& (0+255),w,b
  6549  000648  0A80               	xorlw	128
  6550  00064A  0F80               	addlw	-128
  6551  00064C  0E02               	movlw	2
  6552  00064E  B4D8               	btfsc	status,2,c
  6553  000650  5D74               	subwf	sprintf@exp& (0+255),w,b
  6554  000652  A0D8               	btfss	status,0,c
  6555  000654  D04C               	goto	i2l4660
  6556  000656                     i2l4644:
  6557                           
  6558                           ; BSR set to: 0
  6559                           ;doprnt.c: 1129: if(integ < 4.294967296){
  6560  000656  C06F  F001         	movff	sprintf@integ,___ftge@ff1
  6561  00065A  C070  F002         	movff	sprintf@integ+1,___ftge@ff1+1
  6562  00065E  C071  F003         	movff	sprintf@integ+2,___ftge@ff1+2
  6563  000662  0E70               	movlw	112
  6564  000664  6E04               	movwf	___ftge@ff2,c
  6565  000666  0E89               	movlw	137
  6566  000668  6E05               	movwf	___ftge@ff2+1,c
  6567  00066A  0E40               	movlw	64
  6568  00066C  6E06               	movwf	___ftge@ff2+2,c
  6569  00066E  ECAC  F01E         	call	___ftge	;wreg free
  6570  000672  B0D8               	btfsc	status,0,c
  6571  000674  D003               	goto	i2l4648
  6572                           
  6573                           ;doprnt.c: 1130: exp -= (sizeof dpowers/sizeof dpowers[0])-1;
  6574  000676  0100               	movlb	0	; () banked
  6575  000678  0EF7               	movlw	247
  6576  00067A  D002               	goto	L8
  6577  00067C                     i2l4648:
  6578                           
  6579                           ;doprnt.c: 1132: exp -= (sizeof dpowers/sizeof dpowers[0])-2;
  6580  00067C  0100               	movlb	0	; () banked
  6581  00067E  0EF8               	movlw	248
  6582  000680                     L8:
  6583  000680  0100               	movlb	0	; () banked
  6584  000682  2774               	addwf	sprintf@exp& (0+255),f,b
  6585  000684  0EFF               	movlw	255
  6586  000686  0100               	movlb	0	; () banked
  6587  000688  2375               	addwfc	(sprintf@exp+1)& (0+255),f,b
  6588                           
  6589                           ; BSR set to: 0
  6590                           ;doprnt.c: 1133: }
  6591                           ;doprnt.c: 1134: integ = scale(exp);
  6592                           
  6593                           ; BSR set to: 0
  6594  00068A  0100               	movlb	0	; () banked
  6595  00068C  5174               	movf	sprintf@exp& (0+255),w,b
  6596  00068E  EC2B  F00E         	call	_scale
  6597  000692  C024  F06F         	movff	?_scale,sprintf@integ
  6598  000696  C025  F070         	movff	?_scale+1,sprintf@integ+1
  6599  00069A  C026  F071         	movff	?_scale+2,sprintf@integ+2
  6600                           
  6601                           ;doprnt.c: 1135: _val._val = ((sizeof(double)== 3) ? _tdiv_to_l_(fval,integ) : _div_to_l
      +                          _(fval,integ));
  6602  00069E  C078  F001         	movff	sprintf@fval,__tdiv_to_l_@f1
  6603  0006A2  C079  F002         	movff	sprintf@fval+1,__tdiv_to_l_@f1+1
  6604  0006A6  C07A  F003         	movff	sprintf@fval+2,__tdiv_to_l_@f1+2
  6605  0006AA  C06F  F004         	movff	sprintf@integ,__tdiv_to_l_@f2
  6606  0006AE  C070  F005         	movff	sprintf@integ+1,__tdiv_to_l_@f2+1
  6607  0006B2  C071  F006         	movff	sprintf@integ+2,__tdiv_to_l_@f2+2
  6608  0006B6  EC7A  F019         	call	__tdiv_to_l_	;wreg free
  6609  0006BA  C001  F063         	movff	?__tdiv_to_l_,_sprintf$749
  6610  0006BE  C002  F064         	movff	?__tdiv_to_l_+1,_sprintf$749+1
  6611  0006C2  C003  F065         	movff	?__tdiv_to_l_+2,_sprintf$749+2
  6612  0006C6  C004  F066         	movff	?__tdiv_to_l_+3,_sprintf$749+3
  6613  0006CA  C063  F080         	movff	_sprintf$749,sprintf@_val
  6614  0006CE  C064  F081         	movff	_sprintf$749+1,sprintf@_val+1
  6615  0006D2  C065  F082         	movff	_sprintf$749+2,sprintf@_val+2
  6616  0006D6  C066  F083         	movff	_sprintf$749+3,sprintf@_val+3
  6617                           
  6618                           ;doprnt.c: 1138: fval = 0.0;
  6619  0006DA  0E00               	movlw	0
  6620  0006DC  0100               	movlb	0	; () banked
  6621  0006DE  6F78               	movwf	sprintf@fval& (0+255),b
  6622  0006E0  0E00               	movlw	0
  6623  0006E2  0100               	movlb	0	; () banked
  6624  0006E4  6F79               	movwf	(sprintf@fval+1)& (0+255),b
  6625  0006E6  0E00               	movlw	0
  6626  0006E8  0100               	movlb	0	; () banked
  6627  0006EA  6F7A               	movwf	(sprintf@fval+2)& (0+255),b
  6628                           
  6629                           ;doprnt.c: 1139: } else {
  6630  0006EC  D034               	goto	i2l4664
  6631  0006EE                     i2l4660:
  6632                           
  6633                           ;doprnt.c: 1140: _val._val = (unsigned long)fval;
  6634  0006EE  C078  F024         	movff	sprintf@fval,___fttol@f1
  6635  0006F2  C079  F025         	movff	sprintf@fval+1,___fttol@f1+1
  6636  0006F6  C07A  F026         	movff	sprintf@fval+2,___fttol@f1+2
  6637  0006FA  ECAF  F01C         	call	___fttol	;wreg free
  6638  0006FE  C024  F080         	movff	?___fttol,sprintf@_val
  6639  000702  C025  F081         	movff	?___fttol+1,sprintf@_val+1
  6640  000706  C026  F082         	movff	?___fttol+2,sprintf@_val+2
  6641  00070A  C027  F083         	movff	?___fttol+3,sprintf@_val+3
  6642                           
  6643                           ;doprnt.c: 1141: fval -= (double)_val._val;
  6644  00070E  C078  F03F         	movff	sprintf@fval,___ftsub@f1
  6645  000712  C079  F040         	movff	sprintf@fval+1,___ftsub@f1+1
  6646  000716  C07A  F041         	movff	sprintf@fval+2,___ftsub@f1+2
  6647  00071A  C080  F009         	movff	sprintf@_val,___lltoft@c
  6648  00071E  C081  F00A         	movff	sprintf@_val+1,___lltoft@c+1
  6649  000722  C082  F00B         	movff	sprintf@_val+2,___lltoft@c+2
  6650  000726  C083  F00C         	movff	sprintf@_val+3,___lltoft@c+3
  6651  00072A  EC17  F021         	call	___lltoft	;wreg free
  6652  00072E  C009  F042         	movff	?___lltoft,___ftsub@f2
  6653  000732  C00A  F043         	movff	?___lltoft+1,___ftsub@f2+1
  6654  000736  C00B  F044         	movff	?___lltoft+2,___ftsub@f2+2
  6655  00073A  EC77  F022         	call	___ftsub	;wreg free
  6656  00073E  C03F  F078         	movff	?___ftsub,sprintf@fval
  6657  000742  C040  F079         	movff	?___ftsub+1,sprintf@fval+1
  6658  000746  C041  F07A         	movff	?___ftsub+2,sprintf@fval+2
  6659                           
  6660                           ;doprnt.c: 1142: exp = 0;
  6661  00074A  0E00               	movlw	0
  6662  00074C  0100               	movlb	0	; () banked
  6663  00074E  6F75               	movwf	(sprintf@exp+1)& (0+255),b
  6664  000750  0E00               	movlw	0
  6665  000752  0100               	movlb	0	; () banked
  6666  000754  6F74               	movwf	sprintf@exp& (0+255),b
  6667  000756                     i2l4664:
  6668                           
  6669                           ; BSR set to: 0
  6670                           ;doprnt.c: 1143: }
  6671                           ;doprnt.c: 1145: for(c = 1 ; c != (sizeof dpowers/sizeof dpowers[0]) ; c++)
  6672  000756  0E01               	movlw	1
  6673  000758  0100               	movlb	0	; () banked
  6674  00075A  6F7F               	movwf	sprintf@c& (0+255),b
  6675  00075C                     
  6676                           ; BSR set to: 0
  6677  00075C  0100               	movlb	0	; () banked
  6678  00075E  517F               	movf	sprintf@c& (0+255),w,b
  6679  000760  0A0A               	xorlw	10
  6680  000762  B4D8               	btfsc	status,2,c
  6681  000764  D01E               	goto	i2l4678
  6682                           
  6683                           ; BSR set to: 0
  6684                           ;doprnt.c: 1146: if(_val._val < dpowers[c])
  6685                           
  6686                           ; BSR set to: 0
  6687                           
  6688                           ; BSR set to: 0
  6689  000766  0100               	movlb	0	; () banked
  6690  000768  517F               	movf	sprintf@c& (0+255),w,b
  6691  00076A  0D04               	mullw	4
  6692  00076C  0EE0               	movlw	low _dpowers
  6693  00076E  24F3               	addwf	prodl,w,c
  6694  000770  6EF6               	movwf	tblptrl,c
  6695  000772  0E7E               	movlw	high _dpowers
  6696  000774  20F4               	addwfc	prodh,w,c
  6697  000776  6EF7               	movwf	tblptrh,c
  6698  000778                     	if	0	;There are less than 3 active tblptr bytes
  6699  000778                     	endif
  6700  000778  0009               	tblrd		*+
  6701  00077A  50F5               	movf	tablat,w,c
  6702  00077C  0100               	movlb	0	; () banked
  6703  00077E  5D80               	subwf	sprintf@_val& (0+255),w,b
  6704  000780  0009               	tblrd		*+
  6705  000782  50F5               	movf	tablat,w,c
  6706  000784  0100               	movlb	0	; () banked
  6707  000786  5981               	subwfb	(sprintf@_val+1)& (0+255),w,b
  6708  000788  0009               	tblrd		*+
  6709  00078A  50F5               	movf	tablat,w,c
  6710  00078C  0100               	movlb	0	; () banked
  6711  00078E  5982               	subwfb	(sprintf@_val+2)& (0+255),w,b
  6712  000790  0009               	tblrd		*+
  6713  000792  50F5               	movf	tablat,w,c
  6714  000794  0100               	movlb	0	; () banked
  6715  000796  5983               	subwfb	(sprintf@_val+3)& (0+255),w,b
  6716  000798  A0D8               	btfss	status,0,c
  6717  00079A  D003               	goto	i2l4678
  6718                           
  6719                           ; BSR set to: 0
  6720                           
  6721                           ; BSR set to: 0
  6722                           
  6723                           ; BSR set to: 0
  6724                           ;doprnt.c: 1147: break;
  6725  00079C  0100               	movlb	0	; () banked
  6726  00079E  2B7F               	incf	sprintf@c& (0+255),f,b
  6727  0007A0  D7DD               	goto	L9
  6728  0007A2                     i2l4678:
  6729                           
  6730                           ; BSR set to: 0
  6731                           ;doprnt.c: 1151: width -= prec + c + exp;
  6732  0007A2  0100               	movlb	0	; () banked
  6733  0007A4  C07F  F051         	movff	sprintf@c,??_sprintf
  6734  0007A8  6A52               	clrf	(??_sprintf+1)& (0+255),c
  6735  0007AA  BE51               	btfsc	??_sprintf& (0+255),7,c
  6736  0007AC  0652               	decf	(??_sprintf+1)& (0+255),f,c
  6737  0007AE  0100               	movlb	0	; () banked
  6738  0007B0  517D               	movf	sprintf@prec& (0+255),w,b
  6739  0007B2  2651               	addwf	??_sprintf,f,c
  6740  0007B4  0100               	movlb	0	; () banked
  6741  0007B6  517E               	movf	(sprintf@prec+1)& (0+255),w,b
  6742  0007B8  2252               	addwfc	??_sprintf+1,f,c
  6743  0007BA  0100               	movlb	0	; () banked
  6744  0007BC  5174               	movf	sprintf@exp& (0+255),w,b
  6745  0007BE  2651               	addwf	??_sprintf,f,c
  6746  0007C0  0100               	movlb	0	; () banked
  6747  0007C2  5175               	movf	(sprintf@exp+1)& (0+255),w,b
  6748  0007C4  2252               	addwfc	??_sprintf+1,f,c
  6749  0007C6  5051               	movf	??_sprintf,w,c
  6750  0007C8  0100               	movlb	0	; () banked
  6751  0007CA  5F7B               	subwf	sprintf@width& (0+255),f,b
  6752  0007CC  5052               	movf	??_sprintf+1,w,c
  6753  0007CE  0100               	movlb	0	; () banked
  6754  0007D0  5B7C               	subwfb	(sprintf@width+1)& (0+255),f,b
  6755                           
  6756                           ;doprnt.c: 1152: if(
  6757                           ;doprnt.c: 1156: prec)
  6758  0007D2  0100               	movlb	0	; () banked
  6759  0007D4  517E               	movf	(sprintf@prec+1)& (0+255),w,b
  6760  0007D6  117D               	iorwf	sprintf@prec& (0+255),w,b
  6761  0007D8  B4D8               	btfsc	status,2,c
  6762  0007DA  D004               	goto	i2l4682
  6763                           
  6764                           ; BSR set to: 0
  6765                           ;doprnt.c: 1157: width--;
  6766  0007DC  0100               	movlb	0	; () banked
  6767  0007DE  077B               	decf	sprintf@width& (0+255),f,b
  6768  0007E0  A0D8               	btfss	status,0,c
  6769  0007E2  077C               	decf	(sprintf@width+1)& (0+255),f,b
  6770  0007E4                     i2l4682:
  6771                           
  6772                           ; BSR set to: 0
  6773                           ;doprnt.c: 1158: if(flag & 0x03)
  6774  0007E4  0E03               	movlw	3
  6775  0007E6  0100               	movlb	0	; () banked
  6776  0007E8  1576               	andwf	sprintf@flag& (0+255),w,b
  6777  0007EA  6E51               	movwf	??_sprintf& (0+255),c
  6778  0007EC  0E00               	movlw	0
  6779  0007EE  0100               	movlb	0	; () banked
  6780  0007F0  1577               	andwf	(sprintf@flag+1)& (0+255),w,b
  6781  0007F2  6E52               	movwf	(??_sprintf+1)& (0+255),c
  6782  0007F4  5052               	movf	??_sprintf+1,w,c
  6783  0007F6  1051               	iorwf	??_sprintf,w,c
  6784  0007F8  B4D8               	btfsc	status,2,c
  6785  0007FA  D004               	goto	i2l4686
  6786                           
  6787                           ; BSR set to: 0
  6788                           ;doprnt.c: 1159: width--;
  6789  0007FC  0100               	movlb	0	; () banked
  6790  0007FE  077B               	decf	sprintf@width& (0+255),f,b
  6791  000800  A0D8               	btfss	status,0,c
  6792  000802  077C               	decf	(sprintf@width+1)& (0+255),f,b
  6793  000804                     i2l4686:
  6794                           
  6795                           ; BSR set to: 0
  6796                           ;doprnt.c: 1162: if(flag & 0x04) {
  6797  000804  0100               	movlb	0	; () banked
  6798  000806  A576               	btfss	sprintf@flag& (0+255),2,b
  6799  000808  D039               	goto	i2l4708
  6800                           
  6801                           ; BSR set to: 0
  6802                           ;doprnt.c: 1166: if(flag & 0x03)
  6803  00080A  0E03               	movlw	3
  6804  00080C  0100               	movlb	0	; () banked
  6805  00080E  1576               	andwf	sprintf@flag& (0+255),w,b
  6806  000810  6E51               	movwf	??_sprintf& (0+255),c
  6807  000812  0E00               	movlw	0
  6808  000814  0100               	movlb	0	; () banked
  6809  000816  1577               	andwf	(sprintf@flag+1)& (0+255),w,b
  6810  000818  6E52               	movwf	(??_sprintf+1)& (0+255),c
  6811  00081A  5052               	movf	??_sprintf+1,w,c
  6812  00081C  1051               	iorwf	??_sprintf,w,c
  6813  00081E  B4D8               	btfsc	status,2,c
  6814  000820  D015               	goto	i2l4700
  6815                           
  6816                           ; BSR set to: 0
  6817                           ;doprnt.c: 1168: ((*sp++ = ('-')));
  6818  000822  C045  FFD9         	movff	sprintf@sp,fsr2l
  6819  000826  C046  FFDA         	movff	sprintf@sp+1,fsr2h
  6820  00082A  0E2D               	movlw	45
  6821  00082C  6EDF               	movwf	indf2,c
  6822                           
  6823                           ; BSR set to: 0
  6824  00082E  4A45               	infsnz	sprintf@sp,f,c
  6825  000830  2A46               	incf	sprintf@sp+1,f,c
  6826  000832  D00C               	goto	i2l4700
  6827  000834                     i2l4694:
  6828                           
  6829                           ; BSR set to: 0
  6830                           ;doprnt.c: 1178: ((*sp++ = ('0')));
  6831  000834  C045  FFD9         	movff	sprintf@sp,fsr2l
  6832  000838  C046  FFDA         	movff	sprintf@sp+1,fsr2h
  6833  00083C  0E30               	movlw	48
  6834  00083E  6EDF               	movwf	indf2,c
  6835                           
  6836                           ; BSR set to: 0
  6837  000840  4A45               	infsnz	sprintf@sp,f,c
  6838  000842  2A46               	incf	sprintf@sp+1,f,c
  6839                           
  6840                           ; BSR set to: 0
  6841                           ;doprnt.c: 1179: width--;
  6842  000844  0100               	movlb	0	; () banked
  6843  000846  077B               	decf	sprintf@width& (0+255),f,b
  6844  000848  A0D8               	btfss	status,0,c
  6845  00084A  077C               	decf	(sprintf@width+1)& (0+255),f,b
  6846  00084C                     i2l4700:
  6847                           
  6848                           ; BSR set to: 0
  6849  00084C  0100               	movlb	0	; () banked
  6850  00084E  517C               	movf	(sprintf@width+1)& (0+255),w,b
  6851  000850  0A80               	xorlw	128
  6852  000852  6EF3               	movwf	prodl,c
  6853  000854  0E80               	movlw	128
  6854  000856  5CF3               	subwf	prodl,w,c
  6855  000858  0E01               	movlw	1
  6856  00085A  B4D8               	btfsc	status,2,c
  6857  00085C  5D7B               	subwf	sprintf@width& (0+255),w,b
  6858  00085E  A0D8               	btfss	status,0,c
  6859  000860  D075               	goto	i2l4724
  6860  000862  D7E8               	goto	i2l4694
  6861  000864                     i2l4702:
  6862                           
  6863                           ; BSR set to: 0
  6864                           ;doprnt.c: 1190: ((*sp++ = (' ')));
  6865  000864  C045  FFD9         	movff	sprintf@sp,fsr2l
  6866  000868  C046  FFDA         	movff	sprintf@sp+1,fsr2h
  6867  00086C  0E20               	movlw	32
  6868  00086E  6EDF               	movwf	indf2,c
  6869                           
  6870                           ; BSR set to: 0
  6871  000870  4A45               	infsnz	sprintf@sp,f,c
  6872  000872  2A46               	incf	sprintf@sp+1,f,c
  6873                           
  6874                           ; BSR set to: 0
  6875                           ;doprnt.c: 1191: width--;
  6876  000874  0100               	movlb	0	; () banked
  6877  000876  077B               	decf	sprintf@width& (0+255),f,b
  6878  000878  A0D8               	btfss	status,0,c
  6879  00087A  077C               	decf	(sprintf@width+1)& (0+255),f,b
  6880  00087C                     i2l4708:
  6881                           
  6882                           ; BSR set to: 0
  6883  00087C  0100               	movlb	0	; () banked
  6884  00087E  517C               	movf	(sprintf@width+1)& (0+255),w,b
  6885  000880  0A80               	xorlw	128
  6886  000882  6EF3               	movwf	prodl,c
  6887  000884  0E80               	movlw	128
  6888  000886  5CF3               	subwf	prodl,w,c
  6889  000888  0E01               	movlw	1
  6890  00088A  B4D8               	btfsc	status,2,c
  6891  00088C  5D7B               	subwf	sprintf@width& (0+255),w,b
  6892  00088E  B0D8               	btfsc	status,0,c
  6893  000890  D7E9               	goto	i2l4702
  6894                           
  6895                           ; BSR set to: 0
  6896                           ;doprnt.c: 1192: }
  6897                           ;doprnt.c: 1197: if(flag & 0x03)
  6898                           
  6899                           ; BSR set to: 0
  6900  000892  0E03               	movlw	3
  6901  000894  0100               	movlb	0	; () banked
  6902  000896  1576               	andwf	sprintf@flag& (0+255),w,b
  6903  000898  6E51               	movwf	??_sprintf& (0+255),c
  6904  00089A  0E00               	movlw	0
  6905  00089C  0100               	movlb	0	; () banked
  6906  00089E  1577               	andwf	(sprintf@flag+1)& (0+255),w,b
  6907  0008A0  6E52               	movwf	(??_sprintf+1)& (0+255),c
  6908  0008A2  5052               	movf	??_sprintf+1,w,c
  6909  0008A4  1051               	iorwf	??_sprintf,w,c
  6910  0008A6  B4D8               	btfsc	status,2,c
  6911  0008A8  D051               	goto	i2l4724
  6912                           
  6913                           ; BSR set to: 0
  6914                           ;doprnt.c: 1199: ((*sp++ = ('-')));
  6915  0008AA  C045  FFD9         	movff	sprintf@sp,fsr2l
  6916  0008AE  C046  FFDA         	movff	sprintf@sp+1,fsr2h
  6917  0008B2  0E2D               	movlw	45
  6918  0008B4  D048               	goto	L10
  6919  0008B6                     i2l4716:
  6920                           
  6921                           ; BSR set to: 0
  6922                           ;doprnt.c: 1209: {
  6923                           ;doprnt.c: 1210: unsigned long vd = _val._val/dpowers[c];
  6924  0008B6  C080  F001         	movff	sprintf@_val,___lldiv@dividend
  6925  0008BA  C081  F002         	movff	sprintf@_val+1,___lldiv@dividend+1
  6926  0008BE  C082  F003         	movff	sprintf@_val+2,___lldiv@dividend+2
  6927  0008C2  C083  F004         	movff	sprintf@_val+3,___lldiv@dividend+3
  6928  0008C6  0100               	movlb	0	; () banked
  6929  0008C8  517F               	movf	sprintf@c& (0+255),w,b
  6930  0008CA  0D04               	mullw	4
  6931  0008CC  0EE0               	movlw	low _dpowers
  6932  0008CE  24F3               	addwf	prodl,w,c
  6933  0008D0  6EF6               	movwf	tblptrl,c
  6934  0008D2  0E7E               	movlw	high _dpowers
  6935  0008D4  20F4               	addwfc	prodh,w,c
  6936  0008D6  6EF7               	movwf	tblptrh,c
  6937  0008D8                     	if	0	;There are less than 3 active tblptr bytes
  6938  0008D8                     	endif
  6939  0008D8  0009               	tblrd		*+
  6940  0008DA  CFF5 F005          	movff	tablat,___lldiv@divisor
  6941  0008DE  0009               	tblrd		*+
  6942  0008E0  CFF5 F006          	movff	tablat,___lldiv@divisor+1
  6943  0008E4  0009               	tblrd		*+
  6944  0008E6  CFF5 F007          	movff	tablat,___lldiv@divisor+2
  6945  0008EA  000A               	tblrd		*-
  6946  0008EC  CFF5 F008          	movff	tablat,___lldiv@divisor+3
  6947  0008F0  ECC7  F01F         	call	___lldiv	;wreg free
  6948  0008F4  C001  F067         	movff	?___lldiv,sprintf@vd
  6949  0008F8  C002  F068         	movff	?___lldiv+1,sprintf@vd+1
  6950  0008FC  C003  F069         	movff	?___lldiv+2,sprintf@vd+2
  6951  000900  C004  F06A         	movff	?___lldiv+3,sprintf@vd+3
  6952                           
  6953                           ;doprnt.c: 1211: vd %= 10;
  6954  000904  C067  F00E         	movff	sprintf@vd,___llmod@dividend
  6955  000908  C068  F00F         	movff	sprintf@vd+1,___llmod@dividend+1
  6956  00090C  C069  F010         	movff	sprintf@vd+2,___llmod@dividend+2
  6957  000910  C06A  F011         	movff	sprintf@vd+3,___llmod@dividend+3
  6958  000914  0E0A               	movlw	10
  6959  000916  6E12               	movwf	___llmod@divisor,c
  6960  000918  0E00               	movlw	0
  6961  00091A  6E13               	movwf	___llmod@divisor+1,c
  6962  00091C  0E00               	movlw	0
  6963  00091E  6E14               	movwf	___llmod@divisor+2,c
  6964  000920  0E00               	movlw	0
  6965  000922  6E15               	movwf	___llmod@divisor+3,c
  6966  000924  ECB4  F020         	call	___llmod	;wreg free
  6967  000928  C00E  F067         	movff	?___llmod,sprintf@vd
  6968  00092C  C00F  F068         	movff	?___llmod+1,sprintf@vd+1
  6969  000930  C010  F069         	movff	?___llmod+2,sprintf@vd+2
  6970  000934  C011  F06A         	movff	?___llmod+3,sprintf@vd+3
  6971                           
  6972                           ;doprnt.c: 1212: ((*sp++ = ('0' + vd)));
  6973  000938  0100               	movlb	0	; () banked
  6974  00093A  5167               	movf	sprintf@vd& (0+255),w,b
  6975  00093C  0F30               	addlw	48
  6976  00093E  C045  FFD9         	movff	sprintf@sp,fsr2l
  6977  000942  C046  FFDA         	movff	sprintf@sp+1,fsr2h
  6978  000946                     L10:
  6979  000946  6EDF               	movwf	indf2,c
  6980                           
  6981                           ; BSR set to: 0
  6982  000948  4A45               	infsnz	sprintf@sp,f,c
  6983  00094A  2A46               	incf	sprintf@sp+1,f,c
  6984  00094C                     i2l4724:
  6985                           
  6986                           ; BSR set to: 0
  6987  00094C  0100               	movlb	0	; () banked
  6988  00094E  077F               	decf	sprintf@c& (0+255),f,b
  6989  000950  0100               	movlb	0	; () banked
  6990  000952  297F               	incf	sprintf@c& (0+255),w,b
  6991  000954  B4D8               	btfsc	status,2,c
  6992  000956  D00D               	goto	i2l4732
  6993  000958  D7AE               	goto	i2l4716
  6994  00095A                     i2l4726:
  6995                           
  6996                           ; BSR set to: 0
  6997                           ;doprnt.c: 1217: ((*sp++ = ('0')));
  6998  00095A  C045  FFD9         	movff	sprintf@sp,fsr2l
  6999  00095E  C046  FFDA         	movff	sprintf@sp+1,fsr2h
  7000  000962  0E30               	movlw	48
  7001  000964  6EDF               	movwf	indf2,c
  7002                           
  7003                           ; BSR set to: 0
  7004  000966  4A45               	infsnz	sprintf@sp,f,c
  7005  000968  2A46               	incf	sprintf@sp+1,f,c
  7006                           
  7007                           ; BSR set to: 0
  7008                           ;doprnt.c: 1218: exp--;
  7009  00096A  0100               	movlb	0	; () banked
  7010  00096C  0774               	decf	sprintf@exp& (0+255),f,b
  7011  00096E  A0D8               	btfss	status,0,c
  7012  000970  0775               	decf	(sprintf@exp+1)& (0+255),f,b
  7013  000972                     i2l4732:
  7014                           
  7015                           ; BSR set to: 0
  7016  000972  0100               	movlb	0	; () banked
  7017  000974  5175               	movf	(sprintf@exp+1)& (0+255),w,b
  7018  000976  0A80               	xorlw	128
  7019  000978  6EF3               	movwf	prodl,c
  7020  00097A  0E80               	movlw	128
  7021  00097C  5CF3               	subwf	prodl,w,c
  7022  00097E  0E01               	movlw	1
  7023  000980  B4D8               	btfsc	status,2,c
  7024  000982  5D74               	subwf	sprintf@exp& (0+255),w,b
  7025  000984  B0D8               	btfsc	status,0,c
  7026  000986  D7E9               	goto	i2l4726
  7027                           
  7028                           ; BSR set to: 0
  7029                           ;doprnt.c: 1219: }
  7030                           ;doprnt.c: 1220: if(prec > (int)((sizeof dpowers/sizeof dpowers[0])-2))
  7031                           
  7032                           ; BSR set to: 0
  7033  000988  0100               	movlb	0	; () banked
  7034  00098A  517E               	movf	(sprintf@prec+1)& (0+255),w,b
  7035  00098C  0A80               	xorlw	128
  7036  00098E  0F80               	addlw	-128
  7037  000990  0E09               	movlw	9
  7038  000992  B4D8               	btfsc	status,2,c
  7039  000994  5D7D               	subwf	sprintf@prec& (0+255),w,b
  7040  000996  A0D8               	btfss	status,0,c
  7041  000998  D004               	goto	i2l748
  7042                           
  7043                           ; BSR set to: 0
  7044                           ;doprnt.c: 1221: c = (sizeof dpowers/sizeof dpowers[0])-2;
  7045  00099A  0E08               	movlw	8
  7046  00099C  0100               	movlb	0	; () banked
  7047  00099E  6F7F               	movwf	sprintf@c& (0+255),b
  7048  0009A0  D002               	goto	i2l4738
  7049  0009A2                     i2l748:
  7050                           
  7051                           ; BSR set to: 0
  7052                           ;doprnt.c: 1222: else
  7053                           ;doprnt.c: 1223: c = prec;
  7054  0009A2  C07D  F07F         	movff	sprintf@prec,sprintf@c
  7055  0009A6                     i2l4738:
  7056                           
  7057                           ; BSR set to: 0
  7058                           ;doprnt.c: 1224: prec -= c;
  7059  0009A6  0100               	movlb	0	; () banked
  7060  0009A8  517F               	movf	sprintf@c& (0+255),w,b
  7061  0009AA  0100               	movlb	0	; () banked
  7062  0009AC  5F7D               	subwf	sprintf@prec& (0+255),f,b
  7063  0009AE  0E00               	movlw	0
  7064  0009B0  0100               	movlb	0	; () banked
  7065  0009B2  BF7F               	btfsc	sprintf@c& (0+255),7,b
  7066  0009B4  0EFF               	movlw	255
  7067  0009B6  0100               	movlb	0	; () banked
  7068  0009B8  5B7E               	subwfb	(sprintf@prec+1)& (0+255),f,b
  7069                           
  7070                           ; BSR set to: 0
  7071                           ;doprnt.c: 1228: if(c)
  7072  0009BA  0100               	movlb	0	; () banked
  7073  0009BC  517F               	movf	sprintf@c& (0+255),w,b
  7074  0009BE  B4D8               	btfsc	status,2,c
  7075  0009C0  D008               	goto	i2l4746
  7076                           
  7077                           ; BSR set to: 0
  7078                           ;doprnt.c: 1230: ((*sp++ = ('.')));
  7079  0009C2  C045  FFD9         	movff	sprintf@sp,fsr2l
  7080  0009C6  C046  FFDA         	movff	sprintf@sp+1,fsr2h
  7081  0009CA  0E2E               	movlw	46
  7082  0009CC  6EDF               	movwf	indf2,c
  7083                           
  7084                           ; BSR set to: 0
  7085  0009CE  4A45               	infsnz	sprintf@sp,f,c
  7086  0009D0  2A46               	incf	sprintf@sp+1,f,c
  7087  0009D2                     i2l4746:
  7088                           
  7089                           ; BSR set to: 0
  7090                           ;doprnt.c: 1236: _val._val = (long)(fval * scale(c));
  7091  0009D2  0100               	movlb	0	; () banked
  7092  0009D4  517F               	movf	sprintf@c& (0+255),w,b
  7093  0009D6  EC2B  F00E         	call	_scale
  7094  0009DA  C024  F060         	movff	?_scale,_sprintf$1314
  7095  0009DE  C025  F061         	movff	?_scale+1,_sprintf$1314+1
  7096  0009E2  C026  F062         	movff	?_scale+2,_sprintf$1314+2
  7097                           
  7098                           ;doprnt.c: 1236: _val._val = (long)(fval * scale(c));
  7099  0009E6  C078  F018         	movff	sprintf@fval,___ftmul@f2
  7100  0009EA  C079  F019         	movff	sprintf@fval+1,___ftmul@f2+1
  7101  0009EE  C07A  F01A         	movff	sprintf@fval+2,___ftmul@f2+2
  7102  0009F2  C060  F015         	movff	_sprintf$1314,___ftmul@f1
  7103  0009F6  C061  F016         	movff	_sprintf$1314+1,___ftmul@f1+1
  7104  0009FA  C062  F017         	movff	_sprintf$1314+2,___ftmul@f1+2
  7105  0009FE  EC61  F01B         	call	___ftmul	;wreg free
  7106  000A02  C015  F024         	movff	?___ftmul,___fttol@f1
  7107  000A06  C016  F025         	movff	?___ftmul+1,___fttol@f1+1
  7108  000A0A  C017  F026         	movff	?___ftmul+2,___fttol@f1+2
  7109  000A0E  ECAF  F01C         	call	___fttol	;wreg free
  7110  000A12  C024  F080         	movff	?___fttol,sprintf@_val
  7111  000A16  C025  F081         	movff	?___fttol+1,sprintf@_val+1
  7112  000A1A  C026  F082         	movff	?___fttol+2,sprintf@_val+2
  7113  000A1E  C027  F083         	movff	?___fttol+3,sprintf@_val+3
  7114                           
  7115                           ;doprnt.c: 1237: while(c--) {
  7116  000A22  D072               	goto	i2l4760
  7117  000A24                     i2l4750:
  7118                           
  7119                           ;doprnt.c: 1238: unsigned long vd = _val._val/dpowers[c];
  7120  000A24  C080  F001         	movff	sprintf@_val,___lldiv@dividend
  7121  000A28  C081  F002         	movff	sprintf@_val+1,___lldiv@dividend+1
  7122  000A2C  C082  F003         	movff	sprintf@_val+2,___lldiv@dividend+2
  7123  000A30  C083  F004         	movff	sprintf@_val+3,___lldiv@dividend+3
  7124  000A34  0100               	movlb	0	; () banked
  7125  000A36  517F               	movf	sprintf@c& (0+255),w,b
  7126  000A38  0D04               	mullw	4
  7127  000A3A  0EE0               	movlw	low _dpowers
  7128  000A3C  24F3               	addwf	prodl,w,c
  7129  000A3E  6EF6               	movwf	tblptrl,c
  7130  000A40  0E7E               	movlw	high _dpowers
  7131  000A42  20F4               	addwfc	prodh,w,c
  7132  000A44  6EF7               	movwf	tblptrh,c
  7133  000A46                     	if	0	;There are less than 3 active tblptr bytes
  7134  000A46                     	endif
  7135  000A46  0009               	tblrd		*+
  7136  000A48  CFF5 F005          	movff	tablat,___lldiv@divisor
  7137  000A4C  0009               	tblrd		*+
  7138  000A4E  CFF5 F006          	movff	tablat,___lldiv@divisor+1
  7139  000A52  0009               	tblrd		*+
  7140  000A54  CFF5 F007          	movff	tablat,___lldiv@divisor+2
  7141  000A58  000A               	tblrd		*-
  7142  000A5A  CFF5 F008          	movff	tablat,___lldiv@divisor+3
  7143  000A5E  ECC7  F01F         	call	___lldiv	;wreg free
  7144  000A62  C001  F06B         	movff	?___lldiv,sprintf@vd_751
  7145  000A66  C002  F06C         	movff	?___lldiv+1,sprintf@vd_751+1
  7146  000A6A  C003  F06D         	movff	?___lldiv+2,sprintf@vd_751+2
  7147  000A6E  C004  F06E         	movff	?___lldiv+3,sprintf@vd_751+3
  7148                           
  7149                           ;doprnt.c: 1239: vd %= 10;
  7150  000A72  C06B  F00E         	movff	sprintf@vd_751,___llmod@dividend
  7151  000A76  C06C  F00F         	movff	sprintf@vd_751+1,___llmod@dividend+1
  7152  000A7A  C06D  F010         	movff	sprintf@vd_751+2,___llmod@dividend+2
  7153  000A7E  C06E  F011         	movff	sprintf@vd_751+3,___llmod@dividend+3
  7154  000A82  0E0A               	movlw	10
  7155  000A84  6E12               	movwf	___llmod@divisor,c
  7156  000A86  0E00               	movlw	0
  7157  000A88  6E13               	movwf	___llmod@divisor+1,c
  7158  000A8A  0E00               	movlw	0
  7159  000A8C  6E14               	movwf	___llmod@divisor+2,c
  7160  000A8E  0E00               	movlw	0
  7161  000A90  6E15               	movwf	___llmod@divisor+3,c
  7162  000A92  ECB4  F020         	call	___llmod	;wreg free
  7163  000A96  C00E  F06B         	movff	?___llmod,sprintf@vd_751
  7164  000A9A  C00F  F06C         	movff	?___llmod+1,sprintf@vd_751+1
  7165  000A9E  C010  F06D         	movff	?___llmod+2,sprintf@vd_751+2
  7166  000AA2  C011  F06E         	movff	?___llmod+3,sprintf@vd_751+3
  7167                           
  7168                           ;doprnt.c: 1240: ((*sp++ = ('0' + vd)));
  7169  000AA6  0100               	movlb	0	; () banked
  7170  000AA8  516B               	movf	sprintf@vd_751& (0+255),w,b
  7171  000AAA  0F30               	addlw	48
  7172  000AAC  C045  FFD9         	movff	sprintf@sp,fsr2l
  7173  000AB0  C046  FFDA         	movff	sprintf@sp+1,fsr2h
  7174  000AB4  6EDF               	movwf	indf2,c
  7175                           
  7176                           ; BSR set to: 0
  7177  000AB6  4A45               	infsnz	sprintf@sp,f,c
  7178  000AB8  2A46               	incf	sprintf@sp+1,f,c
  7179                           
  7180                           ; BSR set to: 0
  7181                           ;doprnt.c: 1241: _val._val %= dpowers[c];
  7182  000ABA  C080  F00E         	movff	sprintf@_val,___llmod@dividend
  7183  000ABE  C081  F00F         	movff	sprintf@_val+1,___llmod@dividend+1
  7184  000AC2  C082  F010         	movff	sprintf@_val+2,___llmod@dividend+2
  7185  000AC6  C083  F011         	movff	sprintf@_val+3,___llmod@dividend+3
  7186  000ACA  0100               	movlb	0	; () banked
  7187  000ACC  517F               	movf	sprintf@c& (0+255),w,b
  7188  000ACE  0D04               	mullw	4
  7189  000AD0  0EE0               	movlw	low _dpowers
  7190  000AD2  24F3               	addwf	prodl,w,c
  7191  000AD4  6EF6               	movwf	tblptrl,c
  7192  000AD6  0E7E               	movlw	high _dpowers
  7193  000AD8  20F4               	addwfc	prodh,w,c
  7194  000ADA  6EF7               	movwf	tblptrh,c
  7195  000ADC                     	if	0	;There are less than 3 active tblptr bytes
  7196  000ADC                     	endif
  7197  000ADC  0009               	tblrd		*+
  7198  000ADE  CFF5 F012          	movff	tablat,___llmod@divisor
  7199  000AE2  0009               	tblrd		*+
  7200  000AE4  CFF5 F013          	movff	tablat,___llmod@divisor+1
  7201  000AE8  0009               	tblrd		*+
  7202  000AEA  CFF5 F014          	movff	tablat,___llmod@divisor+2
  7203  000AEE  000A               	tblrd		*-
  7204  000AF0  CFF5 F015          	movff	tablat,___llmod@divisor+3
  7205  000AF4  ECB4  F020         	call	___llmod	;wreg free
  7206  000AF8  C00E  F080         	movff	?___llmod,sprintf@_val
  7207  000AFC  C00F  F081         	movff	?___llmod+1,sprintf@_val+1
  7208  000B00  C010  F082         	movff	?___llmod+2,sprintf@_val+2
  7209  000B04  C011  F083         	movff	?___llmod+3,sprintf@_val+3
  7210  000B08                     i2l4760:
  7211  000B08  0100               	movlb	0	; () banked
  7212  000B0A  077F               	decf	sprintf@c& (0+255),f,b
  7213  000B0C  0100               	movlb	0	; () banked
  7214  000B0E  297F               	incf	sprintf@c& (0+255),w,b
  7215  000B10  B4D8               	btfsc	status,2,c
  7216  000B12  D00D               	goto	i2l4768
  7217  000B14  D787               	goto	i2l4750
  7218  000B16                     i2l4762:
  7219                           
  7220                           ; BSR set to: 0
  7221                           ;doprnt.c: 1245: ((*sp++ = ('0')));
  7222  000B16  C045  FFD9         	movff	sprintf@sp,fsr2l
  7223  000B1A  C046  FFDA         	movff	sprintf@sp+1,fsr2h
  7224  000B1E  0E30               	movlw	48
  7225  000B20  6EDF               	movwf	indf2,c
  7226                           
  7227                           ; BSR set to: 0
  7228  000B22  4A45               	infsnz	sprintf@sp,f,c
  7229  000B24  2A46               	incf	sprintf@sp+1,f,c
  7230                           
  7231                           ; BSR set to: 0
  7232                           ;doprnt.c: 1246: prec--;
  7233  000B26  0100               	movlb	0	; () banked
  7234  000B28  077D               	decf	sprintf@prec& (0+255),f,b
  7235  000B2A  A0D8               	btfss	status,0,c
  7236  000B2C  077E               	decf	(sprintf@prec+1)& (0+255),f,b
  7237  000B2E                     i2l4768:
  7238                           
  7239                           ; BSR set to: 0
  7240  000B2E  0100               	movlb	0	; () banked
  7241  000B30  517E               	movf	(sprintf@prec+1)& (0+255),w,b
  7242  000B32  117D               	iorwf	sprintf@prec& (0+255),w,b
  7243  000B34  B4D8               	btfsc	status,2,c
  7244  000B36  D1B3               	goto	i2l4870
  7245  000B38  D7EE               	goto	i2l4762
  7246  000B3A                     i2l708:
  7247                           
  7248                           ; BSR set to: 0
  7249                           ;doprnt.c: 1255: }
  7250                           ;doprnt.c: 1262: {
  7251                           ;doprnt.c: 1264: if(flag & 0x10)
  7252  000B3A  0100               	movlb	0	; () banked
  7253  000B3C  A976               	btfss	sprintf@flag& (0+255),4,b
  7254  000B3E  D012               	goto	i2l4774
  7255                           
  7256                           ; BSR set to: 0
  7257                           ;doprnt.c: 1265: _val._val = (*(long *)__va_arg((*(long **)ap), (long)0));
  7258  000B40  C072  FFD9         	movff	sprintf@ap,fsr2l
  7259  000B44  C073  FFDA         	movff	sprintf@ap+1,fsr2h
  7260  000B48  0100               	movlb	0	; () banked
  7261  000B4A  CFDE F080          	movff	postinc2,sprintf@_val
  7262  000B4E  0100               	movlb	0	; () banked
  7263  000B50  CFDE F081          	movff	postinc2,sprintf@_val+1
  7264  000B54  0100               	movlb	0	; () banked
  7265  000B56  CFDE F082          	movff	postinc2,sprintf@_val+2
  7266  000B5A  0100               	movlb	0	; () banked
  7267  000B5C  CFDE F083          	movff	postinc2,sprintf@_val+3
  7268                           
  7269                           ; BSR set to: 0
  7270  000B60  0E04               	movlw	4
  7271  000B62  D014               	goto	L11
  7272  000B64                     i2l4774:
  7273                           
  7274                           ; BSR set to: 0
  7275                           ;doprnt.c: 1266: else
  7276                           ;doprnt.c: 1268: _val._val = (long)(*(int *)__va_arg((*(int **)ap), (int)0));
  7277  000B64  C072  FFD9         	movff	sprintf@ap,fsr2l
  7278  000B68  C073  FFDA         	movff	sprintf@ap+1,fsr2h
  7279  000B6C  0100               	movlb	0	; () banked
  7280  000B6E  CFDE F080          	movff	postinc2,sprintf@_val
  7281  000B72  0100               	movlb	0	; () banked
  7282  000B74  CFDD F081          	movff	postdec2,sprintf@_val+1
  7283  000B78  0100               	movlb	0	; () banked
  7284  000B7A  0E00               	movlw	0
  7285  000B7C  0100               	movlb	0	; () banked
  7286  000B7E  BF81               	btfsc	(sprintf@_val+1)& (0+255),7,b
  7287  000B80  0EFF               	movlw	-1
  7288  000B82  0100               	movlb	0	; () banked
  7289  000B84  6F82               	movwf	(sprintf@_val+2)& (0+255),b
  7290  000B86  0100               	movlb	0	; () banked
  7291  000B88  6F83               	movwf	(sprintf@_val+3)& (0+255),b
  7292                           
  7293                           ; BSR set to: 0
  7294  000B8A  0E02               	movlw	2
  7295  000B8C                     L11:
  7296  000B8C  0100               	movlb	0	; () banked
  7297  000B8E  2772               	addwf	sprintf@ap& (0+255),f,b
  7298  000B90  0E00               	movlw	0
  7299  000B92  0100               	movlb	0	; () banked
  7300  000B94  2373               	addwfc	(sprintf@ap+1)& (0+255),f,b
  7301                           
  7302                           ; BSR set to: 0
  7303                           ;doprnt.c: 1270: if((long)_val._val < 0) {
  7304                           
  7305                           ; BSR set to: 0
  7306  000B96  0100               	movlb	0	; () banked
  7307  000B98  5183               	movf	(sprintf@_val+3)& (0+255),w,b
  7308  000B9A  0A80               	xorlw	128
  7309  000B9C  0F80               	addlw	128
  7310  000B9E  E10B               	bnz	i2u490_45
  7311  000BA0  0E00               	movlw	0
  7312  000BA2  0100               	movlb	0	; () banked
  7313  000BA4  5D82               	subwf	(sprintf@_val+2)& (0+255),w,b
  7314  000BA6  E107               	bnz	i2u490_45
  7315  000BA8  0E00               	movlw	0
  7316  000BAA  0100               	movlb	0	; () banked
  7317  000BAC  5D81               	subwf	(sprintf@_val+1)& (0+255),w,b
  7318  000BAE  E103               	bnz	i2u490_45
  7319  000BB0  0E00               	movlw	0
  7320  000BB2  0100               	movlb	0	; () banked
  7321  000BB4  5D80               	subwf	sprintf@_val& (0+255),w,b
  7322  000BB6                     i2u490_45:
  7323  000BB6  B0D8               	btfsc	status,0,c
  7324  000BB8  D012               	goto	i2l4784
  7325                           
  7326                           ; BSR set to: 0
  7327                           ;doprnt.c: 1271: flag |= 0x03;
  7328  000BBA  0E03               	movlw	3
  7329  000BBC  0100               	movlb	0	; () banked
  7330  000BBE  1376               	iorwf	sprintf@flag& (0+255),f,b
  7331                           
  7332                           ; BSR set to: 0
  7333                           ;doprnt.c: 1272: _val._val = -_val._val;
  7334  000BC0  0100               	movlb	0	; () banked
  7335  000BC2  1F83               	comf	(sprintf@_val+3)& (0+255),f,b
  7336  000BC4  0100               	movlb	0	; () banked
  7337  000BC6  1F82               	comf	(sprintf@_val+2)& (0+255),f,b
  7338  000BC8  0100               	movlb	0	; () banked
  7339  000BCA  1F81               	comf	(sprintf@_val+1)& (0+255),f,b
  7340  000BCC  0100               	movlb	0	; () banked
  7341  000BCE  6D80               	negf	sprintf@_val& (0+255),b
  7342  000BD0  0E00               	movlw	0
  7343  000BD2  0100               	movlb	0	; () banked
  7344  000BD4  2381               	addwfc	(sprintf@_val+1)& (0+255),f,b
  7345  000BD6  0100               	movlb	0	; () banked
  7346  000BD8  2382               	addwfc	(sprintf@_val+2)& (0+255),f,b
  7347  000BDA  0100               	movlb	0	; () banked
  7348  000BDC  2383               	addwfc	(sprintf@_val+3)& (0+255),f,b
  7349  000BDE                     i2l4784:
  7350                           
  7351                           ; BSR set to: 0
  7352                           ;doprnt.c: 1273: }
  7353                           ;doprnt.c: 1275: }
  7354                           ;doprnt.c: 1299: if(prec == 0 && _val._val == 0)
  7355  000BDE  0100               	movlb	0	; () banked
  7356  000BE0  517E               	movf	(sprintf@prec+1)& (0+255),w,b
  7357  000BE2  117D               	iorwf	sprintf@prec& (0+255),w,b
  7358  000BE4  A4D8               	btfss	status,2,c
  7359  000BE6  D00A               	goto	i2l4790
  7360                           
  7361                           ; BSR set to: 0
  7362  000BE8  0100               	movlb	0	; () banked
  7363  000BEA  5183               	movf	(sprintf@_val+3)& (0+255),w,b
  7364  000BEC  1180               	iorwf	sprintf@_val& (0+255),w,b
  7365  000BEE  1181               	iorwf	(sprintf@_val+1)& (0+255),w,b
  7366  000BF0  1182               	iorwf	(sprintf@_val+2)& (0+255),w,b
  7367  000BF2  A4D8               	btfss	status,2,c
  7368  000BF4  D003               	goto	i2l4790
  7369                           
  7370                           ; BSR set to: 0
  7371                           ;doprnt.c: 1300: prec++;
  7372  000BF6  0100               	movlb	0	; () banked
  7373  000BF8  4B7D               	infsnz	sprintf@prec& (0+255),f,b
  7374  000BFA  2B7E               	incf	(sprintf@prec+1)& (0+255),f,b
  7375  000BFC                     i2l4790:
  7376                           
  7377                           ; BSR set to: 0
  7378                           ;doprnt.c: 1314: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  7379  000BFC  0E01               	movlw	1
  7380  000BFE  0100               	movlb	0	; () banked
  7381  000C00  6F7F               	movwf	sprintf@c& (0+255),b
  7382  000C02                     
  7383                           ; BSR set to: 0
  7384  000C02  0100               	movlb	0	; () banked
  7385  000C04  517F               	movf	sprintf@c& (0+255),w,b
  7386  000C06  0A0A               	xorlw	10
  7387  000C08  B4D8               	btfsc	status,2,c
  7388  000C0A  D01E               	goto	i2l4804
  7389                           
  7390                           ; BSR set to: 0
  7391                           ;doprnt.c: 1315: if(_val._val < dpowers[c])
  7392                           
  7393                           ; BSR set to: 0
  7394                           
  7395                           ; BSR set to: 0
  7396  000C0C  0100               	movlb	0	; () banked
  7397  000C0E  517F               	movf	sprintf@c& (0+255),w,b
  7398  000C10  0D04               	mullw	4
  7399  000C12  0EE0               	movlw	low _dpowers
  7400  000C14  24F3               	addwf	prodl,w,c
  7401  000C16  6EF6               	movwf	tblptrl,c
  7402  000C18  0E7E               	movlw	high _dpowers
  7403  000C1A  20F4               	addwfc	prodh,w,c
  7404  000C1C  6EF7               	movwf	tblptrh,c
  7405  000C1E                     	if	0	;There are less than 3 active tblptr bytes
  7406  000C1E                     	endif
  7407  000C1E  0009               	tblrd		*+
  7408  000C20  50F5               	movf	tablat,w,c
  7409  000C22  0100               	movlb	0	; () banked
  7410  000C24  5D80               	subwf	sprintf@_val& (0+255),w,b
  7411  000C26  0009               	tblrd		*+
  7412  000C28  50F5               	movf	tablat,w,c
  7413  000C2A  0100               	movlb	0	; () banked
  7414  000C2C  5981               	subwfb	(sprintf@_val+1)& (0+255),w,b
  7415  000C2E  0009               	tblrd		*+
  7416  000C30  50F5               	movf	tablat,w,c
  7417  000C32  0100               	movlb	0	; () banked
  7418  000C34  5982               	subwfb	(sprintf@_val+2)& (0+255),w,b
  7419  000C36  0009               	tblrd		*+
  7420  000C38  50F5               	movf	tablat,w,c
  7421  000C3A  0100               	movlb	0	; () banked
  7422  000C3C  5983               	subwfb	(sprintf@_val+3)& (0+255),w,b
  7423  000C3E  A0D8               	btfss	status,0,c
  7424  000C40  D003               	goto	i2l4804
  7425                           
  7426                           ; BSR set to: 0
  7427                           
  7428                           ; BSR set to: 0
  7429                           
  7430                           ; BSR set to: 0
  7431                           ;doprnt.c: 1316: break;
  7432  000C42  0100               	movlb	0	; () banked
  7433  000C44  2B7F               	incf	sprintf@c& (0+255),f,b
  7434  000C46  D7DD               	goto	L12
  7435  000C48                     i2l4804:
  7436                           
  7437                           ; BSR set to: 0
  7438                           ;doprnt.c: 1348: if(c < prec)
  7439  000C48  0E80               	movlw	128
  7440  000C4A  0100               	movlb	0	; () banked
  7441  000C4C  BF7F               	btfsc	sprintf@c& (0+255),7,b
  7442  000C4E  0E7F               	movlw	127
  7443  000C50  6E51               	movwf	??_sprintf& (0+255),c
  7444  000C52  0100               	movlb	0	; () banked
  7445  000C54  517D               	movf	sprintf@prec& (0+255),w,b
  7446  000C56  0100               	movlb	0	; () banked
  7447  000C58  5D7F               	subwf	sprintf@c& (0+255),w,b
  7448  000C5A  0100               	movlb	0	; () banked
  7449  000C5C  517E               	movf	(sprintf@prec+1)& (0+255),w,b
  7450  000C5E  0A80               	xorlw	128
  7451  000C60  5851               	subwfb	??_sprintf& (0+255),w,c
  7452  000C62  B0D8               	btfsc	status,0,c
  7453  000C64  D003               	goto	i2l4808
  7454                           
  7455                           ; BSR set to: 0
  7456                           ;doprnt.c: 1349: c = prec;
  7457  000C66  C07D  F07F         	movff	sprintf@prec,sprintf@c
  7458  000C6A  D018               	goto	i2l4812
  7459  000C6C                     i2l4808:
  7460                           
  7461                           ; BSR set to: 0
  7462                           ;doprnt.c: 1350: else if(prec < c)
  7463  000C6C  0100               	movlb	0	; () banked
  7464  000C6E  517E               	movf	(sprintf@prec+1)& (0+255),w,b
  7465  000C70  0A80               	xorlw	128
  7466  000C72  6E51               	movwf	??_sprintf& (0+255),c
  7467  000C74  0100               	movlb	0	; () banked
  7468  000C76  517F               	movf	sprintf@c& (0+255),w,b
  7469  000C78  0100               	movlb	0	; () banked
  7470  000C7A  5D7D               	subwf	sprintf@prec& (0+255),w,b
  7471  000C7C  0E80               	movlw	128
  7472  000C7E  0100               	movlb	0	; () banked
  7473  000C80  BF7F               	btfsc	sprintf@c& (0+255),7,b
  7474  000C82  0E7F               	movlw	127
  7475  000C84  5851               	subwfb	??_sprintf& (0+255),w,c
  7476  000C86  B0D8               	btfsc	status,0,c
  7477  000C88  D009               	goto	i2l4812
  7478                           
  7479                           ; BSR set to: 0
  7480                           ;doprnt.c: 1351: prec = c;
  7481  000C8A  0100               	movlb	0	; () banked
  7482  000C8C  517F               	movf	sprintf@c& (0+255),w,b
  7483  000C8E  0100               	movlb	0	; () banked
  7484  000C90  6F7D               	movwf	sprintf@prec& (0+255),b
  7485  000C92  0100               	movlb	0	; () banked
  7486  000C94  6B7E               	clrf	(sprintf@prec+1)& (0+255),b
  7487  000C96  0100               	movlb	0	; () banked
  7488  000C98  BF7D               	btfsc	sprintf@prec& (0+255),7,b
  7489  000C9A  077E               	decf	(sprintf@prec+1)& (0+255),f,b
  7490  000C9C                     i2l4812:
  7491                           
  7492                           ; BSR set to: 0
  7493                           ;doprnt.c: 1354: if(width && flag & 0x03)
  7494  000C9C  0100               	movlb	0	; () banked
  7495  000C9E  517C               	movf	(sprintf@width+1)& (0+255),w,b
  7496  000CA0  117B               	iorwf	sprintf@width& (0+255),w,b
  7497  000CA2  B4D8               	btfsc	status,2,c
  7498  000CA4  D010               	goto	i2l4818
  7499                           
  7500                           ; BSR set to: 0
  7501  000CA6  0E03               	movlw	3
  7502  000CA8  0100               	movlb	0	; () banked
  7503  000CAA  1576               	andwf	sprintf@flag& (0+255),w,b
  7504  000CAC  6E51               	movwf	??_sprintf& (0+255),c
  7505  000CAE  0E00               	movlw	0
  7506  000CB0  0100               	movlb	0	; () banked
  7507  000CB2  1577               	andwf	(sprintf@flag+1)& (0+255),w,b
  7508  000CB4  6E52               	movwf	(??_sprintf+1)& (0+255),c
  7509  000CB6  5052               	movf	??_sprintf+1,w,c
  7510  000CB8  1051               	iorwf	??_sprintf,w,c
  7511  000CBA  B4D8               	btfsc	status,2,c
  7512  000CBC  D004               	goto	i2l4818
  7513                           
  7514                           ; BSR set to: 0
  7515                           ;doprnt.c: 1355: width--;
  7516  000CBE  0100               	movlb	0	; () banked
  7517  000CC0  077B               	decf	sprintf@width& (0+255),f,b
  7518  000CC2  A0D8               	btfss	status,0,c
  7519  000CC4  077C               	decf	(sprintf@width+1)& (0+255),f,b
  7520  000CC6                     i2l4818:
  7521                           
  7522                           ; BSR set to: 0
  7523                           ;doprnt.c: 1357: if(flag & 0x4000) {
  7524  000CC6  0100               	movlb	0	; () banked
  7525  000CC8  AD77               	btfss	(sprintf@flag+1)& (0+255),6,b
  7526  000CCA  D01D               	goto	i2l4826
  7527                           
  7528                           ; BSR set to: 0
  7529                           ;doprnt.c: 1358: if(width > prec)
  7530  000CCC  0100               	movlb	0	; () banked
  7531  000CCE  517E               	movf	(sprintf@prec+1)& (0+255),w,b
  7532  000CD0  0A80               	xorlw	128
  7533  000CD2  6E51               	movwf	??_sprintf& (0+255),c
  7534  000CD4  0100               	movlb	0	; () banked
  7535  000CD6  517B               	movf	sprintf@width& (0+255),w,b
  7536  000CD8  0100               	movlb	0	; () banked
  7537  000CDA  5D7D               	subwf	sprintf@prec& (0+255),w,b
  7538  000CDC  0100               	movlb	0	; () banked
  7539  000CDE  517C               	movf	(sprintf@width+1)& (0+255),w,b
  7540  000CE0  0A80               	xorlw	128
  7541  000CE2  5851               	subwfb	??_sprintf& (0+255),w,c
  7542  000CE4  B0D8               	btfsc	status,0,c
  7543  000CE6  D009               	goto	i2l4824
  7544                           
  7545                           ; BSR set to: 0
  7546                           ;doprnt.c: 1359: width -= prec;
  7547  000CE8  0100               	movlb	0	; () banked
  7548  000CEA  517D               	movf	sprintf@prec& (0+255),w,b
  7549  000CEC  0100               	movlb	0	; () banked
  7550  000CEE  5F7B               	subwf	sprintf@width& (0+255),f,b
  7551  000CF0  0100               	movlb	0	; () banked
  7552  000CF2  517E               	movf	(sprintf@prec+1)& (0+255),w,b
  7553  000CF4  0100               	movlb	0	; () banked
  7554  000CF6  5B7C               	subwfb	(sprintf@width+1)& (0+255),f,b
  7555  000CF8  D006               	goto	i2l4826
  7556  000CFA                     i2l4824:
  7557                           
  7558                           ; BSR set to: 0
  7559                           ;doprnt.c: 1360: else
  7560                           ;doprnt.c: 1361: width = 0;
  7561  000CFA  0E00               	movlw	0
  7562  000CFC  0100               	movlb	0	; () banked
  7563  000CFE  6F7C               	movwf	(sprintf@width+1)& (0+255),b
  7564  000D00  0E00               	movlw	0
  7565  000D02  0100               	movlb	0	; () banked
  7566  000D04  6F7B               	movwf	sprintf@width& (0+255),b
  7567  000D06                     i2l4826:
  7568                           
  7569                           ; BSR set to: 0
  7570                           ;doprnt.c: 1362: }
  7571                           ;doprnt.c: 1390: if(width > c)
  7572  000D06  0E80               	movlw	128
  7573  000D08  0100               	movlb	0	; () banked
  7574  000D0A  BF7F               	btfsc	sprintf@c& (0+255),7,b
  7575  000D0C  0E7F               	movlw	127
  7576  000D0E  6E51               	movwf	??_sprintf& (0+255),c
  7577  000D10  0100               	movlb	0	; () banked
  7578  000D12  517B               	movf	sprintf@width& (0+255),w,b
  7579  000D14  0100               	movlb	0	; () banked
  7580  000D16  5D7F               	subwf	sprintf@c& (0+255),w,b
  7581  000D18  0100               	movlb	0	; () banked
  7582  000D1A  517C               	movf	(sprintf@width+1)& (0+255),w,b
  7583  000D1C  0A80               	xorlw	128
  7584  000D1E  5851               	subwfb	??_sprintf& (0+255),w,c
  7585  000D20  B0D8               	btfsc	status,0,c
  7586  000D22  D00B               	goto	i2l4830
  7587                           
  7588                           ; BSR set to: 0
  7589                           ;doprnt.c: 1391: width -= c;
  7590  000D24  0100               	movlb	0	; () banked
  7591  000D26  517F               	movf	sprintf@c& (0+255),w,b
  7592  000D28  0100               	movlb	0	; () banked
  7593  000D2A  5F7B               	subwf	sprintf@width& (0+255),f,b
  7594  000D2C  0E00               	movlw	0
  7595  000D2E  0100               	movlb	0	; () banked
  7596  000D30  BF7F               	btfsc	sprintf@c& (0+255),7,b
  7597  000D32  0EFF               	movlw	255
  7598  000D34  0100               	movlb	0	; () banked
  7599  000D36  5B7C               	subwfb	(sprintf@width+1)& (0+255),f,b
  7600  000D38  D006               	goto	i2l4832
  7601  000D3A                     i2l4830:
  7602                           
  7603                           ; BSR set to: 0
  7604                           ;doprnt.c: 1392: else
  7605                           ;doprnt.c: 1393: width = 0;
  7606  000D3A  0E00               	movlw	0
  7607  000D3C  0100               	movlb	0	; () banked
  7608  000D3E  6F7C               	movwf	(sprintf@width+1)& (0+255),b
  7609  000D40  0E00               	movlw	0
  7610  000D42  0100               	movlb	0	; () banked
  7611  000D44  6F7B               	movwf	sprintf@width& (0+255),b
  7612  000D46                     i2l4832:
  7613                           
  7614                           ; BSR set to: 0
  7615                           ;doprnt.c: 1396: if(flag & 0x04) {
  7616  000D46  0100               	movlb	0	; () banked
  7617  000D48  A576               	btfss	sprintf@flag& (0+255),2,b
  7618  000D4A  D027               	goto	i2l4848
  7619                           
  7620                           ; BSR set to: 0
  7621                           ;doprnt.c: 1401: if(flag & 0x03)
  7622  000D4C  0E03               	movlw	3
  7623  000D4E  0100               	movlb	0	; () banked
  7624  000D50  1576               	andwf	sprintf@flag& (0+255),w,b
  7625  000D52  6E51               	movwf	??_sprintf& (0+255),c
  7626  000D54  0E00               	movlw	0
  7627  000D56  0100               	movlb	0	; () banked
  7628  000D58  1577               	andwf	(sprintf@flag+1)& (0+255),w,b
  7629  000D5A  6E52               	movwf	(??_sprintf+1)& (0+255),c
  7630  000D5C  5052               	movf	??_sprintf+1,w,c
  7631  000D5E  1051               	iorwf	??_sprintf,w,c
  7632  000D60  B4D8               	btfsc	status,2,c
  7633  000D62  D008               	goto	i2l4840
  7634                           
  7635                           ; BSR set to: 0
  7636                           ;doprnt.c: 1402: ((*sp++ = ('-')));
  7637  000D64  C045  FFD9         	movff	sprintf@sp,fsr2l
  7638  000D68  C046  FFDA         	movff	sprintf@sp+1,fsr2h
  7639  000D6C  0E2D               	movlw	45
  7640  000D6E  6EDF               	movwf	indf2,c
  7641                           
  7642                           ; BSR set to: 0
  7643  000D70  4A45               	infsnz	sprintf@sp,f,c
  7644  000D72  2A46               	incf	sprintf@sp+1,f,c
  7645  000D74                     i2l4840:
  7646                           
  7647                           ; BSR set to: 0
  7648                           ;doprnt.c: 1424: if(width)
  7649  000D74  0100               	movlb	0	; () banked
  7650  000D76  0100               	movlb	0	; () banked
  7651  000D78  517C               	movf	(sprintf@width+1)& (0+255),w,b
  7652  000D7A  117B               	iorwf	sprintf@width& (0+255),w,b
  7653  000D7C  B4D8               	btfsc	status,2,c
  7654  000D7E  D085               	goto	i2l4868
  7655                           
  7656                           ; BSR set to: 0
  7657                           ;doprnt.c: 1426: ((*sp++ = ('0')));
  7658                           
  7659                           ; BSR set to: 0
  7660                           
  7661                           ;doprnt.c: 1425: do
  7662  000D80  C045  FFD9         	movff	sprintf@sp,fsr2l
  7663  000D84  C046  FFDA         	movff	sprintf@sp+1,fsr2h
  7664  000D88  0E30               	movlw	48
  7665  000D8A  6EDF               	movwf	indf2,c
  7666                           
  7667                           ; BSR set to: 0
  7668  000D8C  4A45               	infsnz	sprintf@sp,f,c
  7669  000D8E  2A46               	incf	sprintf@sp+1,f,c
  7670                           
  7671                           ; BSR set to: 0
  7672                           ;doprnt.c: 1427: while(--width);
  7673  000D90  0100               	movlb	0	; () banked
  7674  000D92  077B               	decf	sprintf@width& (0+255),f,b
  7675  000D94  A0D8               	btfss	status,0,c
  7676  000D96  077C               	decf	(sprintf@width+1)& (0+255),f,b
  7677  000D98  D7EE               	goto	L14
  7678  000D9A                     i2l4848:
  7679                           
  7680                           ; BSR set to: 0
  7681                           ;doprnt.c: 1431: {
  7682                           ;doprnt.c: 1433: if(width
  7683                           ;doprnt.c: 1437: )
  7684  000D9A  0100               	movlb	0	; () banked
  7685  000D9C  517C               	movf	(sprintf@width+1)& (0+255),w,b
  7686  000D9E  117B               	iorwf	sprintf@width& (0+255),w,b
  7687  000DA0  B4D8               	btfsc	status,2,c
  7688  000DA2  D011               	goto	i2l4856
  7689  000DA4                     i2l4850:
  7690                           
  7691                           ; BSR set to: 0
  7692                           ;doprnt.c: 1439: ((*sp++ = (' ')));
  7693  000DA4  C045  FFD9         	movff	sprintf@sp,fsr2l
  7694  000DA8  C046  FFDA         	movff	sprintf@sp+1,fsr2h
  7695  000DAC  0E20               	movlw	32
  7696  000DAE  6EDF               	movwf	indf2,c
  7697                           
  7698                           ; BSR set to: 0
  7699  000DB0  4A45               	infsnz	sprintf@sp,f,c
  7700  000DB2  2A46               	incf	sprintf@sp+1,f,c
  7701                           
  7702                           ; BSR set to: 0
  7703                           ;doprnt.c: 1440: while(--width);
  7704  000DB4  0100               	movlb	0	; () banked
  7705  000DB6  077B               	decf	sprintf@width& (0+255),f,b
  7706  000DB8  A0D8               	btfss	status,0,c
  7707  000DBA  077C               	decf	(sprintf@width+1)& (0+255),f,b
  7708  000DBC  0100               	movlb	0	; () banked
  7709  000DBE  517C               	movf	(sprintf@width+1)& (0+255),w,b
  7710  000DC0  117B               	iorwf	sprintf@width& (0+255),w,b
  7711  000DC2  A4D8               	btfss	status,2,c
  7712  000DC4  D7EF               	goto	i2l4850
  7713  000DC6                     i2l4856:
  7714                           
  7715                           ; BSR set to: 0
  7716                           ;doprnt.c: 1447: if(flag & 0x03)
  7717  000DC6  0E03               	movlw	3
  7718  000DC8  0100               	movlb	0	; () banked
  7719  000DCA  1576               	andwf	sprintf@flag& (0+255),w,b
  7720  000DCC  6E51               	movwf	??_sprintf& (0+255),c
  7721  000DCE  0E00               	movlw	0
  7722  000DD0  0100               	movlb	0	; () banked
  7723  000DD2  1577               	andwf	(sprintf@flag+1)& (0+255),w,b
  7724  000DD4  6E52               	movwf	(??_sprintf+1)& (0+255),c
  7725  000DD6  5052               	movf	??_sprintf+1,w,c
  7726  000DD8  1051               	iorwf	??_sprintf,w,c
  7727  000DDA  B4D8               	btfsc	status,2,c
  7728  000DDC  D056               	goto	i2l4868
  7729                           
  7730                           ; BSR set to: 0
  7731                           ;doprnt.c: 1448: ((*sp++ = ('-')));
  7732  000DDE  C045  FFD9         	movff	sprintf@sp,fsr2l
  7733  000DE2  C046  FFDA         	movff	sprintf@sp+1,fsr2h
  7734  000DE6  0E2D               	movlw	45
  7735  000DE8  6EDF               	movwf	indf2,c
  7736  000DEA  D04D               	goto	L13
  7737  000DEC                     i2l4862:
  7738                           
  7739                           ; BSR set to: 0
  7740                           ;doprnt.c: 1487: {
  7741                           ;doprnt.c: 1498: c = (_val._val / dpowers[prec]) % 10 + '0';
  7742  000DEC  0100               	movlb	0	; () banked
  7743  000DEE  C07D  F051         	movff	sprintf@prec,??_sprintf
  7744  000DF2  0100               	movlb	0	; () banked
  7745  000DF4  C07E  F052         	movff	sprintf@prec+1,??_sprintf+1
  7746  000DF8  90D8               	bcf	status,0,c
  7747  000DFA  3651               	rlcf	??_sprintf,f,c
  7748  000DFC  3652               	rlcf	??_sprintf+1,f,c
  7749  000DFE  90D8               	bcf	status,0,c
  7750  000E00  3651               	rlcf	??_sprintf,f,c
  7751  000E02  3652               	rlcf	??_sprintf+1,f,c
  7752  000E04  0EE0               	movlw	low _dpowers
  7753  000E06  2451               	addwf	??_sprintf,w,c
  7754  000E08  6EF6               	movwf	tblptrl,c
  7755  000E0A  0E7E               	movlw	high _dpowers
  7756  000E0C  2052               	addwfc	??_sprintf+1,w,c
  7757  000E0E  6EF7               	movwf	tblptrh,c
  7758  000E10                     	if	0	;There are less than 3 active tblptr bytes
  7759  000E10                     	endif
  7760  000E10  0009               	tblrd		*+
  7761  000E12  CFF5 F005          	movff	tablat,___lldiv@divisor
  7762  000E16  0009               	tblrd		*+
  7763  000E18  CFF5 F006          	movff	tablat,___lldiv@divisor+1
  7764  000E1C  0009               	tblrd		*+
  7765  000E1E  CFF5 F007          	movff	tablat,___lldiv@divisor+2
  7766  000E22  000A               	tblrd		*-
  7767  000E24  CFF5 F008          	movff	tablat,___lldiv@divisor+3
  7768  000E28  C080  F001         	movff	sprintf@_val,___lldiv@dividend
  7769  000E2C  C081  F002         	movff	sprintf@_val+1,___lldiv@dividend+1
  7770  000E30  C082  F003         	movff	sprintf@_val+2,___lldiv@dividend+2
  7771  000E34  C083  F004         	movff	sprintf@_val+3,___lldiv@dividend+3
  7772  000E38  ECC7  F01F         	call	___lldiv	;wreg free
  7773  000E3C  C001  F00E         	movff	?___lldiv,___llmod@dividend
  7774  000E40  C002  F00F         	movff	?___lldiv+1,___llmod@dividend+1
  7775  000E44  C003  F010         	movff	?___lldiv+2,___llmod@dividend+2
  7776  000E48  C004  F011         	movff	?___lldiv+3,___llmod@dividend+3
  7777  000E4C  0E0A               	movlw	10
  7778  000E4E  6E12               	movwf	___llmod@divisor,c
  7779  000E50  0E00               	movlw	0
  7780  000E52  6E13               	movwf	___llmod@divisor+1,c
  7781  000E54  0E00               	movlw	0
  7782  000E56  6E14               	movwf	___llmod@divisor+2,c
  7783  000E58  0E00               	movlw	0
  7784  000E5A  6E15               	movwf	___llmod@divisor+3,c
  7785  000E5C  ECB4  F020         	call	___llmod	;wreg free
  7786  000E60  C00E  F053         	movff	?___llmod,??_sprintf+2
  7787  000E64  C00F  F054         	movff	?___llmod+1,??_sprintf+3
  7788  000E68  C010  F055         	movff	?___llmod+2,??_sprintf+4
  7789  000E6C  C011  F056         	movff	?___llmod+3,??_sprintf+5
  7790  000E70  5053               	movf	??_sprintf+2,w,c
  7791  000E72  0F30               	addlw	48
  7792  000E74  0100               	movlb	0	; () banked
  7793  000E76  6F7F               	movwf	sprintf@c& (0+255),b
  7794                           
  7795                           ; BSR set to: 0
  7796                           ;doprnt.c: 1532: }
  7797                           ;doprnt.c: 1533: ((*sp++ = (c)));
  7798  000E78  C045  FFD9         	movff	sprintf@sp,fsr2l
  7799  000E7C  C046  FFDA         	movff	sprintf@sp+1,fsr2h
  7800  000E80  0100               	movlb	0	; () banked
  7801  000E82  C07F  FFDF         	movff	sprintf@c,indf2
  7802  000E86                     L13:
  7803                           
  7804                           ; BSR set to: 0
  7805  000E86  4A45               	infsnz	sprintf@sp,f,c
  7806  000E88  2A46               	incf	sprintf@sp+1,f,c
  7807  000E8A                     i2l4868:
  7808                           
  7809                           ; BSR set to: 0
  7810  000E8A  0100               	movlb	0	; () banked
  7811  000E8C  077D               	decf	sprintf@prec& (0+255),f,b
  7812  000E8E  A0D8               	btfss	status,0,c
  7813  000E90  077E               	decf	(sprintf@prec+1)& (0+255),f,b
  7814  000E92  0100               	movlb	0	; () banked
  7815  000E94  297D               	incf	sprintf@prec& (0+255),w,b
  7816  000E96  B4D8               	btfsc	status,2,c
  7817  000E98  297E               	incf	(sprintf@prec+1)& (0+255),w,b
  7818  000E9A  A4D8               	btfss	status,2,c
  7819  000E9C  D7A7               	goto	i2l4862
  7820  000E9E                     i2l4870:
  7821                           
  7822                           ; BSR set to: 0
  7823  000E9E  C047  FFF6         	movff	sprintf@f,tblptrl
  7824  000EA2  C048  FFF7         	movff	sprintf@f+1,tblptrh
  7825  000EA6  4A47               	infsnz	sprintf@f,f,c
  7826  000EA8  2A48               	incf	sprintf@f+1,f,c
  7827  000EAA                     	if	0	;tblptru may be non-zero
  7828  000EAA                     	endif
  7829  000EAA                     	if	0	;tblptru may be non-zero
  7830  000EAA                     	endif
  7831  000EAA  0008               	tblrd		*
  7832  000EAC  0100               	movlb	0	; () banked
  7833  000EAE  CFF5 F07F          	movff	tablat,sprintf@c
  7834  000EB2  0100               	movlb	0	; () banked
  7835  000EB4  677F               	tstfsz	sprintf@c& (0+255),b
  7836  000EB6  EF16  F000         	goto	i2l4474
  7837  000EBA                     i2l4872:
  7838                           
  7839                           ; BSR set to: 0
  7840                           ;doprnt.c: 1547: *sp = 0;
  7841  000EBA  C045  FFD9         	movff	sprintf@sp,fsr2l
  7842  000EBE  C046  FFDA         	movff	sprintf@sp+1,fsr2h
  7843  000EC2  0E00               	movlw	0
  7844  000EC4  6EDF               	movwf	indf2,c
  7845                           
  7846                           ; BSR set to: 0
  7847                           
  7848                           ; BSR set to: 0
  7849                           ;doprnt.c: 1549: return 0;
  7850                           ;	Return value of _sprintf is never used
  7851  000EC6  0012               	return	
  7852  000EC8                     __end_of_sprintf:
  7853                           	opt stack 0
  7854                           tosu	equ	0xFFF
  7855                           tosh	equ	0xFFE
  7856                           tosl	equ	0xFFD
  7857                           pclatu	equ	0xFFB
  7858                           pclath	equ	0xFFA
  7859                           tblptru	equ	0xFF8
  7860                           tblptrh	equ	0xFF7
  7861                           tblptrl	equ	0xFF6
  7862                           tablat	equ	0xFF5
  7863                           prodh	equ	0xFF4
  7864                           prodl	equ	0xFF3
  7865                           intcon	equ	0xFF2
  7866                           intcon2	equ	0xFF1
  7867                           indf0	equ	0xFEF
  7868                           postinc0	equ	0xFEE
  7869                           fsr0h	equ	0xFEA
  7870                           fsr0l	equ	0xFE9
  7871                           wreg	equ	0xFE8
  7872                           postinc1	equ	0xFE6
  7873                           postdec1	equ	0xFE5
  7874                           fsr1h	equ	0xFE2
  7875                           fsr1l	equ	0xFE1
  7876                           indf2	equ	0xFDF
  7877                           postinc2	equ	0xFDE
  7878                           postdec2	equ	0xFDD
  7879                           fsr2h	equ	0xFDA
  7880                           fsr2l	equ	0xFD9
  7881                           status	equ	0xFD8
  7882                           
  7883 ;; *************** function _scale *****************
  7884 ;; Defined at:
  7885 ;;		line 425 in file "/opt/microchip/xc8/v1.32/sources/common/doprnt.c"
  7886 ;; Parameters:    Size  Location     Type
  7887 ;;  scl             1    wreg     char 
  7888 ;; Auto vars:     Size  Location     Type
  7889 ;;  scl             1   41[COMRAM] char 
  7890 ;; Return value:  Size  Location     Type
  7891 ;;                  3   35[COMRAM] char 
  7892 ;; Registers used:
  7893 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7894 ;; Tracked objects:
  7895 ;;		On entry : 0/0
  7896 ;;		On exit  : 0/0
  7897 ;;		Unchanged: 0/0
  7898 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7899 ;;      Params:         3       0       0       0       0       0       0       0       0
  7900 ;;      Locals:         4       0       0       0       0       0       0       0       0
  7901 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7902 ;;      Totals:         7       0       0       0       0       0       0       0       0
  7903 ;;Total ram usage:        7 bytes
  7904 ;; Hardware stack levels used:    1
  7905 ;; Hardware stack levels required when called:    2
  7906 ;; This function calls:
  7907 ;;		___awdiv
  7908 ;;		___awmod
  7909 ;;		___ftmul
  7910 ;;		___wmul
  7911 ;; This function is called by:
  7912 ;;		_sprintf
  7913 ;; This function uses a non-reentrant model
  7914 ;;
  7915                           
  7916                           	psect	text20
  7917  001C56                     __ptext20:
  7918                           	opt stack 0
  7919  001C56                     _scale:
  7920                           	opt stack 22
  7921                           
  7922                           ; BSR set to: 0
  7923                           ;incstack = 0
  7924                           ;scale@scl stored from wreg
  7925  001C56  6E2A               	movwf	scale@scl,c
  7926                           
  7927                           ;doprnt.c: 428: if(scl < 0) {
  7928  001C58  AE2A               	btfss	scale@scl,7,c
  7929  001C5A  D0EA               	goto	i2l4192
  7930                           
  7931                           ;doprnt.c: 429: scl = -scl;
  7932  001C5C  6C2A               	negf	scale@scl,c
  7933                           
  7934                           ;doprnt.c: 430: if(scl>=110)
  7935  001C5E  502A               	movf	scale@scl,w,c
  7936  001C60  0A80               	xorlw	128
  7937  001C62  0F12               	addlw	-238
  7938  001C64  A0D8               	btfss	status,0,c
  7939  001C66  D08B               	goto	i2l4182
  7940                           
  7941                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  7942  001C68  0E00               	movlw	0
  7943  001C6A  6E12               	movwf	___wmul@multiplicand+1,c
  7944  001C6C  0E03               	movlw	3
  7945  001C6E  6E11               	movwf	___wmul@multiplicand,c
  7946  001C70  0E00               	movlw	0
  7947  001C72  6E0A               	movwf	___awdiv@divisor+1,c
  7948  001C74  0E0A               	movlw	10
  7949  001C76  6E09               	movwf	___awdiv@divisor,c
  7950  001C78  0E00               	movlw	0
  7951  001C7A  6E04               	movwf	___awmod@divisor+1,c
  7952  001C7C  0E64               	movlw	100
  7953  001C7E  6E03               	movwf	___awmod@divisor,c
  7954  001C80  502A               	movf	scale@scl,w,c
  7955  001C82  6E01               	movwf	___awmod@dividend,c
  7956  001C84  6A02               	clrf	___awmod@dividend+1,c
  7957  001C86  BE01               	btfsc	___awmod@dividend,7,c
  7958  001C88  0602               	decf	___awmod@dividend+1,f,c
  7959  001C8A  ECF4  F01E         	call	___awmod	;wreg free
  7960  001C8E  C001  F007         	movff	?___awmod,___awdiv@dividend
  7961  001C92  C002  F008         	movff	?___awmod+1,___awdiv@dividend+1
  7962  001C96  ECC4  F01D         	call	___awdiv	;wreg free
  7963  001C9A  0E09               	movlw	9
  7964  001C9C  2407               	addwf	?___awdiv,w,c
  7965  001C9E  6E0F               	movwf	___wmul@multiplier,c
  7966  001CA0  0E00               	movlw	0
  7967  001CA2  2008               	addwfc	?___awdiv+1,w,c
  7968  001CA4  6E10               	movwf	___wmul@multiplier+1,c
  7969  001CA6  ECD0  F022         	call	___wmul	;wreg free
  7970  001CAA  0E30               	movlw	low __npowers_
  7971  001CAC  240F               	addwf	?___wmul,w,c
  7972  001CAE  6EF6               	movwf	tblptrl,c
  7973  001CB0  0E7F               	movlw	high __npowers_
  7974  001CB2  2010               	addwfc	?___wmul+1,w,c
  7975  001CB4  6EF7               	movwf	tblptrh,c
  7976  001CB6                     	if	0	;There are less than 3 active tblptr bytes
  7977  001CB6                     	endif
  7978  001CB6  0009               	tblrd		*+
  7979  001CB8  CFF5 F018          	movff	tablat,___ftmul@f2
  7980  001CBC  0009               	tblrd		*+
  7981  001CBE  CFF5 F019          	movff	tablat,___ftmul@f2+1
  7982  001CC2  000A               	tblrd		*-
  7983  001CC4  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  7984  001CC8  0E00               	movlw	0
  7985  001CCA  6E0A               	movwf	___awdiv@divisor+1,c
  7986  001CCC  0E64               	movlw	100
  7987  001CCE  6E09               	movwf	___awdiv@divisor,c
  7988  001CD0  502A               	movf	scale@scl,w,c
  7989  001CD2  6E07               	movwf	___awdiv@dividend,c
  7990  001CD4  6A08               	clrf	___awdiv@dividend+1,c
  7991  001CD6  BE07               	btfsc	___awdiv@dividend,7,c
  7992  001CD8  0608               	decf	___awdiv@dividend+1,f,c
  7993  001CDA  ECC4  F01D         	call	___awdiv	;wreg free
  7994  001CDE  0E12               	movlw	18
  7995  001CE0  2407               	addwf	?___awdiv,w,c
  7996  001CE2  6E0F               	movwf	___wmul@multiplier,c
  7997  001CE4  0E00               	movlw	0
  7998  001CE6  2008               	addwfc	?___awdiv+1,w,c
  7999  001CE8  6E10               	movwf	___wmul@multiplier+1,c
  8000  001CEA  0E00               	movlw	0
  8001  001CEC  6E12               	movwf	___wmul@multiplicand+1,c
  8002  001CEE  0E03               	movlw	3
  8003  001CF0  6E11               	movwf	___wmul@multiplicand,c
  8004  001CF2  ECD0  F022         	call	___wmul	;wreg free
  8005  001CF6  0E30               	movlw	low __npowers_
  8006  001CF8  240F               	addwf	?___wmul,w,c
  8007  001CFA  6EF6               	movwf	tblptrl,c
  8008  001CFC  0E7F               	movlw	high __npowers_
  8009  001CFE  2010               	addwfc	?___wmul+1,w,c
  8010  001D00  6EF7               	movwf	tblptrh,c
  8011  001D02                     	if	0	;There are less than 3 active tblptr bytes
  8012  001D02                     	endif
  8013  001D02  0009               	tblrd		*+
  8014  001D04  CFF5 F015          	movff	tablat,___ftmul@f1
  8015  001D08  0009               	tblrd		*+
  8016  001D0A  CFF5 F016          	movff	tablat,___ftmul@f1+1
  8017  001D0E  000A               	tblrd		*-
  8018  001D10  CFF5 F017          	movff	tablat,___ftmul@f1+2
  8019  001D14  EC61  F01B         	call	___ftmul	;wreg free
  8020  001D18  C015  F027         	movff	?___ftmul,_scale$1313
  8021  001D1C  C016  F028         	movff	?___ftmul+1,_scale$1313+1
  8022  001D20  C017  F029         	movff	?___ftmul+2,_scale$1313+2
  8023                           
  8024                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  8025  001D24  C027  F015         	movff	_scale$1313,___ftmul@f1
  8026  001D28  C028  F016         	movff	_scale$1313+1,___ftmul@f1+1
  8027  001D2C  C029  F017         	movff	_scale$1313+2,___ftmul@f1+2
  8028  001D30  0E00               	movlw	0
  8029  001D32  6E12               	movwf	___wmul@multiplicand+1,c
  8030  001D34  0E03               	movlw	3
  8031  001D36  6E11               	movwf	___wmul@multiplicand,c
  8032  001D38  0E00               	movlw	0
  8033  001D3A  6E04               	movwf	___awmod@divisor+1,c
  8034  001D3C  0E0A               	movlw	10
  8035  001D3E  6E03               	movwf	___awmod@divisor,c
  8036  001D40  502A               	movf	scale@scl,w,c
  8037  001D42  6E01               	movwf	___awmod@dividend,c
  8038  001D44  6A02               	clrf	___awmod@dividend+1,c
  8039  001D46  BE01               	btfsc	___awmod@dividend,7,c
  8040  001D48  0602               	decf	___awmod@dividend+1,f,c
  8041  001D4A  ECF4  F01E         	call	___awmod	;wreg free
  8042  001D4E  C001  F00F         	movff	?___awmod,___wmul@multiplier
  8043  001D52  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  8044  001D56  ECD0  F022         	call	___wmul	;wreg free
  8045  001D5A  0E30               	movlw	low __npowers_
  8046  001D5C  240F               	addwf	?___wmul,w,c
  8047  001D5E  6EF6               	movwf	tblptrl,c
  8048  001D60  0E7F               	movlw	high __npowers_
  8049  001D62  2010               	addwfc	?___wmul+1,w,c
  8050  001D64  6EF7               	movwf	tblptrh,c
  8051  001D66                     	if	0	;There are less than 3 active tblptr bytes
  8052  001D66                     	endif
  8053  001D66  0009               	tblrd		*+
  8054  001D68  CFF5 F018          	movff	tablat,___ftmul@f2
  8055  001D6C  0009               	tblrd		*+
  8056  001D6E  CFF5 F019          	movff	tablat,___ftmul@f2+1
  8057  001D72  000A               	tblrd		*-
  8058  001D74  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  8059  001D78  EC61  F01B         	call	___ftmul	;wreg free
  8060  001D7C  D13A               	goto	L18
  8061  001D7E                     i2l4182:
  8062                           
  8063                           ;doprnt.c: 432: else if(scl > 10)
  8064  001D7E  502A               	movf	scale@scl,w,c
  8065  001D80  0A80               	xorlw	128
  8066  001D82  0F75               	addlw	-139
  8067  001D84  A0D8               	btfss	status,0,c
  8068  001D86  D04D               	goto	i2l4188
  8069                           
  8070                           ;doprnt.c: 433: return _npowers_[scl/10+9] * _npowers_[scl%10];
  8071  001D88  0E00               	movlw	0
  8072  001D8A  6E0A               	movwf	___awdiv@divisor+1,c
  8073  001D8C  0E0A               	movlw	10
  8074  001D8E  6E09               	movwf	___awdiv@divisor,c
  8075  001D90  502A               	movf	scale@scl,w,c
  8076  001D92  6E07               	movwf	___awdiv@dividend,c
  8077  001D94  6A08               	clrf	___awdiv@dividend+1,c
  8078  001D96  BE07               	btfsc	___awdiv@dividend,7,c
  8079  001D98  0608               	decf	___awdiv@dividend+1,f,c
  8080  001D9A  ECC4  F01D         	call	___awdiv	;wreg free
  8081  001D9E  0E09               	movlw	9
  8082  001DA0  2407               	addwf	?___awdiv,w,c
  8083  001DA2  6E0F               	movwf	___wmul@multiplier,c
  8084  001DA4  0E00               	movlw	0
  8085  001DA6  2008               	addwfc	?___awdiv+1,w,c
  8086  001DA8  6E10               	movwf	___wmul@multiplier+1,c
  8087  001DAA  0E00               	movlw	0
  8088  001DAC  6E12               	movwf	___wmul@multiplicand+1,c
  8089  001DAE  0E03               	movlw	3
  8090  001DB0  6E11               	movwf	___wmul@multiplicand,c
  8091  001DB2  ECD0  F022         	call	___wmul	;wreg free
  8092  001DB6  0E30               	movlw	low __npowers_
  8093  001DB8  240F               	addwf	?___wmul,w,c
  8094  001DBA  6EF6               	movwf	tblptrl,c
  8095  001DBC  0E7F               	movlw	high __npowers_
  8096  001DBE  2010               	addwfc	?___wmul+1,w,c
  8097  001DC0  6EF7               	movwf	tblptrh,c
  8098  001DC2                     	if	0	;There are less than 3 active tblptr bytes
  8099  001DC2                     	endif
  8100  001DC2  0009               	tblrd		*+
  8101  001DC4  CFF5 F015          	movff	tablat,___ftmul@f1
  8102  001DC8  0009               	tblrd		*+
  8103  001DCA  CFF5 F016          	movff	tablat,___ftmul@f1+1
  8104  001DCE  000A               	tblrd		*-
  8105  001DD0  CFF5 F017          	movff	tablat,___ftmul@f1+2
  8106  001DD4  0E00               	movlw	0
  8107  001DD6  6E12               	movwf	___wmul@multiplicand+1,c
  8108  001DD8  0E03               	movlw	3
  8109  001DDA  6E11               	movwf	___wmul@multiplicand,c
  8110  001DDC  0E00               	movlw	0
  8111  001DDE  6E04               	movwf	___awmod@divisor+1,c
  8112  001DE0  0E0A               	movlw	10
  8113  001DE2  6E03               	movwf	___awmod@divisor,c
  8114  001DE4  502A               	movf	scale@scl,w,c
  8115  001DE6  6E01               	movwf	___awmod@dividend,c
  8116  001DE8  6A02               	clrf	___awmod@dividend+1,c
  8117  001DEA  BE01               	btfsc	___awmod@dividend,7,c
  8118  001DEC  0602               	decf	___awmod@dividend+1,f,c
  8119  001DEE  ECF4  F01E         	call	___awmod	;wreg free
  8120  001DF2  C001  F00F         	movff	?___awmod,___wmul@multiplier
  8121  001DF6  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  8122  001DFA  ECD0  F022         	call	___wmul	;wreg free
  8123  001DFE  0E30               	movlw	low __npowers_
  8124  001E00  240F               	addwf	?___wmul,w,c
  8125  001E02  6EF6               	movwf	tblptrl,c
  8126  001E04  0E7F               	movlw	high __npowers_
  8127  001E06  2010               	addwfc	?___wmul+1,w,c
  8128  001E08  6EF7               	movwf	tblptrh,c
  8129  001E0A                     	if	0	;There are less than 3 active tblptr bytes
  8130  001E0A                     	endif
  8131  001E0A  0009               	tblrd		*+
  8132  001E0C  CFF5 F018          	movff	tablat,___ftmul@f2
  8133  001E10  0009               	tblrd		*+
  8134  001E12  CFF5 F019          	movff	tablat,___ftmul@f2+1
  8135  001E16  000A               	tblrd		*-
  8136  001E18  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  8137  001E1C  EC61  F01B         	call	___ftmul	;wreg free
  8138  001E20  D0E8               	goto	L18
  8139  001E22                     i2l4188:
  8140                           
  8141                           ;doprnt.c: 434: return _npowers_[scl];
  8142  001E22  502A               	movf	scale@scl,w,c
  8143  001E24  0D03               	mullw	3
  8144  001E26  0E30               	movlw	low __npowers_
  8145  001E28  24F3               	addwf	prodl,w,c
  8146  001E2A  6EF6               	movwf	tblptrl,c
  8147  001E2C  0E7F               	movlw	high __npowers_
  8148  001E2E  D0EE               	goto	L17
  8149  001E30                     i2l4192:
  8150                           
  8151                           ;doprnt.c: 435: }
  8152                           ;doprnt.c: 436: if(scl>=110)
  8153  001E30  502A               	movf	scale@scl,w,c
  8154  001E32  0A80               	xorlw	128
  8155  001E34  0F12               	addlw	-238
  8156  001E36  A0D8               	btfss	status,0,c
  8157  001E38  D08B               	goto	i2l4200
  8158                           
  8159                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  8160  001E3A  0E00               	movlw	0
  8161  001E3C  6E12               	movwf	___wmul@multiplicand+1,c
  8162  001E3E  0E03               	movlw	3
  8163  001E40  6E11               	movwf	___wmul@multiplicand,c
  8164  001E42  0E00               	movlw	0
  8165  001E44  6E0A               	movwf	___awdiv@divisor+1,c
  8166  001E46  0E0A               	movlw	10
  8167  001E48  6E09               	movwf	___awdiv@divisor,c
  8168  001E4A  0E00               	movlw	0
  8169  001E4C  6E04               	movwf	___awmod@divisor+1,c
  8170  001E4E  0E64               	movlw	100
  8171  001E50  6E03               	movwf	___awmod@divisor,c
  8172  001E52  502A               	movf	scale@scl,w,c
  8173  001E54  6E01               	movwf	___awmod@dividend,c
  8174  001E56  6A02               	clrf	___awmod@dividend+1,c
  8175  001E58  BE01               	btfsc	___awmod@dividend,7,c
  8176  001E5A  0602               	decf	___awmod@dividend+1,f,c
  8177  001E5C  ECF4  F01E         	call	___awmod	;wreg free
  8178  001E60  C001  F007         	movff	?___awmod,___awdiv@dividend
  8179  001E64  C002  F008         	movff	?___awmod+1,___awdiv@dividend+1
  8180  001E68  ECC4  F01D         	call	___awdiv	;wreg free
  8181  001E6C  0E09               	movlw	9
  8182  001E6E  2407               	addwf	?___awdiv,w,c
  8183  001E70  6E0F               	movwf	___wmul@multiplier,c
  8184  001E72  0E00               	movlw	0
  8185  001E74  2008               	addwfc	?___awdiv+1,w,c
  8186  001E76  6E10               	movwf	___wmul@multiplier+1,c
  8187  001E78  ECD0  F022         	call	___wmul	;wreg free
  8188  001E7C  0E57               	movlw	low __powers_
  8189  001E7E  240F               	addwf	?___wmul,w,c
  8190  001E80  6EF6               	movwf	tblptrl,c
  8191  001E82  0E7F               	movlw	high __powers_
  8192  001E84  2010               	addwfc	?___wmul+1,w,c
  8193  001E86  6EF7               	movwf	tblptrh,c
  8194  001E88                     	if	0	;There are less than 3 active tblptr bytes
  8195  001E88                     	endif
  8196  001E88  0009               	tblrd		*+
  8197  001E8A  CFF5 F018          	movff	tablat,___ftmul@f2
  8198  001E8E  0009               	tblrd		*+
  8199  001E90  CFF5 F019          	movff	tablat,___ftmul@f2+1
  8200  001E94  000A               	tblrd		*-
  8201  001E96  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  8202  001E9A  0E00               	movlw	0
  8203  001E9C  6E0A               	movwf	___awdiv@divisor+1,c
  8204  001E9E  0E64               	movlw	100
  8205  001EA0  6E09               	movwf	___awdiv@divisor,c
  8206  001EA2  502A               	movf	scale@scl,w,c
  8207  001EA4  6E07               	movwf	___awdiv@dividend,c
  8208  001EA6  6A08               	clrf	___awdiv@dividend+1,c
  8209  001EA8  BE07               	btfsc	___awdiv@dividend,7,c
  8210  001EAA  0608               	decf	___awdiv@dividend+1,f,c
  8211  001EAC  ECC4  F01D         	call	___awdiv	;wreg free
  8212  001EB0  0E12               	movlw	18
  8213  001EB2  2407               	addwf	?___awdiv,w,c
  8214  001EB4  6E0F               	movwf	___wmul@multiplier,c
  8215  001EB6  0E00               	movlw	0
  8216  001EB8  2008               	addwfc	?___awdiv+1,w,c
  8217  001EBA  6E10               	movwf	___wmul@multiplier+1,c
  8218  001EBC  0E00               	movlw	0
  8219  001EBE  6E12               	movwf	___wmul@multiplicand+1,c
  8220  001EC0  0E03               	movlw	3
  8221  001EC2  6E11               	movwf	___wmul@multiplicand,c
  8222  001EC4  ECD0  F022         	call	___wmul	;wreg free
  8223  001EC8  0E57               	movlw	low __powers_
  8224  001ECA  240F               	addwf	?___wmul,w,c
  8225  001ECC  6EF6               	movwf	tblptrl,c
  8226  001ECE  0E7F               	movlw	high __powers_
  8227  001ED0  2010               	addwfc	?___wmul+1,w,c
  8228  001ED2  6EF7               	movwf	tblptrh,c
  8229  001ED4                     	if	0	;There are less than 3 active tblptr bytes
  8230  001ED4                     	endif
  8231  001ED4  0009               	tblrd		*+
  8232  001ED6  CFF5 F015          	movff	tablat,___ftmul@f1
  8233  001EDA  0009               	tblrd		*+
  8234  001EDC  CFF5 F016          	movff	tablat,___ftmul@f1+1
  8235  001EE0  000A               	tblrd		*-
  8236  001EE2  CFF5 F017          	movff	tablat,___ftmul@f1+2
  8237  001EE6  EC61  F01B         	call	___ftmul	;wreg free
  8238  001EEA  C015  F027         	movff	?___ftmul,_scale$1313
  8239  001EEE  C016  F028         	movff	?___ftmul+1,_scale$1313+1
  8240  001EF2  C017  F029         	movff	?___ftmul+2,_scale$1313+2
  8241                           
  8242                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  8243  001EF6  C027  F015         	movff	_scale$1313,___ftmul@f1
  8244  001EFA  C028  F016         	movff	_scale$1313+1,___ftmul@f1+1
  8245  001EFE  C029  F017         	movff	_scale$1313+2,___ftmul@f1+2
  8246  001F02  0E00               	movlw	0
  8247  001F04  6E12               	movwf	___wmul@multiplicand+1,c
  8248  001F06  0E03               	movlw	3
  8249  001F08  6E11               	movwf	___wmul@multiplicand,c
  8250  001F0A  0E00               	movlw	0
  8251  001F0C  6E04               	movwf	___awmod@divisor+1,c
  8252  001F0E  0E0A               	movlw	10
  8253  001F10  6E03               	movwf	___awmod@divisor,c
  8254  001F12  502A               	movf	scale@scl,w,c
  8255  001F14  6E01               	movwf	___awmod@dividend,c
  8256  001F16  6A02               	clrf	___awmod@dividend+1,c
  8257  001F18  BE01               	btfsc	___awmod@dividend,7,c
  8258  001F1A  0602               	decf	___awmod@dividend+1,f,c
  8259  001F1C  ECF4  F01E         	call	___awmod	;wreg free
  8260  001F20  C001  F00F         	movff	?___awmod,___wmul@multiplier
  8261  001F24  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  8262  001F28  ECD0  F022         	call	___wmul	;wreg free
  8263  001F2C  0E57               	movlw	low __powers_
  8264  001F2E  240F               	addwf	?___wmul,w,c
  8265  001F30  6EF6               	movwf	tblptrl,c
  8266  001F32  0E7F               	movlw	high __powers_
  8267  001F34  2010               	addwfc	?___wmul+1,w,c
  8268  001F36  6EF7               	movwf	tblptrh,c
  8269  001F38                     	if	0	;There are less than 3 active tblptr bytes
  8270  001F38                     	endif
  8271  001F38  0009               	tblrd		*+
  8272  001F3A  CFF5 F018          	movff	tablat,___ftmul@f2
  8273  001F3E  0009               	tblrd		*+
  8274  001F40  CFF5 F019          	movff	tablat,___ftmul@f2+1
  8275  001F44  000A               	tblrd		*-
  8276  001F46  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  8277  001F4A  EC61  F01B         	call	___ftmul	;wreg free
  8278  001F4E  D051               	goto	L18
  8279  001F50                     i2l4200:
  8280                           
  8281                           ;doprnt.c: 438: else if(scl > 10)
  8282  001F50  502A               	movf	scale@scl,w,c
  8283  001F52  0A80               	xorlw	128
  8284  001F54  0F75               	addlw	-139
  8285  001F56  A0D8               	btfss	status,0,c
  8286  001F58  D053               	goto	i2l4206
  8287                           
  8288                           ;doprnt.c: 439: return _powers_[scl/10+9] * _powers_[scl%10];
  8289  001F5A  0E00               	movlw	0
  8290  001F5C  6E0A               	movwf	___awdiv@divisor+1,c
  8291  001F5E  0E0A               	movlw	10
  8292  001F60  6E09               	movwf	___awdiv@divisor,c
  8293  001F62  502A               	movf	scale@scl,w,c
  8294  001F64  6E07               	movwf	___awdiv@dividend,c
  8295  001F66  6A08               	clrf	___awdiv@dividend+1,c
  8296  001F68  BE07               	btfsc	___awdiv@dividend,7,c
  8297  001F6A  0608               	decf	___awdiv@dividend+1,f,c
  8298  001F6C  ECC4  F01D         	call	___awdiv	;wreg free
  8299  001F70  0E09               	movlw	9
  8300  001F72  2407               	addwf	?___awdiv,w,c
  8301  001F74  6E0F               	movwf	___wmul@multiplier,c
  8302  001F76  0E00               	movlw	0
  8303  001F78  2008               	addwfc	?___awdiv+1,w,c
  8304  001F7A  6E10               	movwf	___wmul@multiplier+1,c
  8305  001F7C  0E00               	movlw	0
  8306  001F7E  6E12               	movwf	___wmul@multiplicand+1,c
  8307  001F80  0E03               	movlw	3
  8308  001F82  6E11               	movwf	___wmul@multiplicand,c
  8309  001F84  ECD0  F022         	call	___wmul	;wreg free
  8310  001F88  0E57               	movlw	low __powers_
  8311  001F8A  240F               	addwf	?___wmul,w,c
  8312  001F8C  6EF6               	movwf	tblptrl,c
  8313  001F8E  0E7F               	movlw	high __powers_
  8314  001F90  2010               	addwfc	?___wmul+1,w,c
  8315  001F92  6EF7               	movwf	tblptrh,c
  8316  001F94                     	if	0	;There are less than 3 active tblptr bytes
  8317  001F94                     	endif
  8318  001F94  0009               	tblrd		*+
  8319  001F96  CFF5 F015          	movff	tablat,___ftmul@f1
  8320  001F9A  0009               	tblrd		*+
  8321  001F9C  CFF5 F016          	movff	tablat,___ftmul@f1+1
  8322  001FA0  000A               	tblrd		*-
  8323  001FA2  CFF5 F017          	movff	tablat,___ftmul@f1+2
  8324  001FA6  0E00               	movlw	0
  8325  001FA8  6E12               	movwf	___wmul@multiplicand+1,c
  8326  001FAA  0E03               	movlw	3
  8327  001FAC  6E11               	movwf	___wmul@multiplicand,c
  8328  001FAE  0E00               	movlw	0
  8329  001FB0  6E04               	movwf	___awmod@divisor+1,c
  8330  001FB2  0E0A               	movlw	10
  8331  001FB4  6E03               	movwf	___awmod@divisor,c
  8332  001FB6  502A               	movf	scale@scl,w,c
  8333  001FB8  6E01               	movwf	___awmod@dividend,c
  8334  001FBA  6A02               	clrf	___awmod@dividend+1,c
  8335  001FBC  BE01               	btfsc	___awmod@dividend,7,c
  8336  001FBE  0602               	decf	___awmod@dividend+1,f,c
  8337  001FC0  ECF4  F01E         	call	___awmod	;wreg free
  8338  001FC4  C001  F00F         	movff	?___awmod,___wmul@multiplier
  8339  001FC8  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  8340  001FCC  ECD0  F022         	call	___wmul	;wreg free
  8341  001FD0  0E57               	movlw	low __powers_
  8342  001FD2  240F               	addwf	?___wmul,w,c
  8343  001FD4  6EF6               	movwf	tblptrl,c
  8344  001FD6  0E7F               	movlw	high __powers_
  8345  001FD8  2010               	addwfc	?___wmul+1,w,c
  8346  001FDA  6EF7               	movwf	tblptrh,c
  8347  001FDC                     	if	0	;There are less than 3 active tblptr bytes
  8348  001FDC                     	endif
  8349  001FDC  0009               	tblrd		*+
  8350  001FDE  CFF5 F018          	movff	tablat,___ftmul@f2
  8351  001FE2  0009               	tblrd		*+
  8352  001FE4  CFF5 F019          	movff	tablat,___ftmul@f2+1
  8353  001FE8  000A               	tblrd		*-
  8354  001FEA  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  8355  001FEE  EC61  F01B         	call	___ftmul	;wreg free
  8356  001FF2                     L18:
  8357  001FF2  C015  F024         	movff	?___ftmul,?_scale
  8358  001FF6  C016  F025         	movff	?___ftmul+1,?_scale+1
  8359  001FFA  C017  F026         	movff	?___ftmul+2,?_scale+2
  8360  001FFE  D011               	goto	i2l653
  8361  002000                     i2l4206:
  8362                           
  8363                           ;doprnt.c: 440: return _powers_[scl];
  8364  002000  502A               	movf	scale@scl,w,c
  8365  002002  0D03               	mullw	3
  8366  002004  0E57               	movlw	low __powers_
  8367  002006  24F3               	addwf	prodl,w,c
  8368  002008  6EF6               	movwf	tblptrl,c
  8369  00200A  0E7F               	movlw	high __powers_
  8370  00200C                     L17:
  8371  00200C  20F4               	addwfc	prodh,w,c
  8372  00200E  6EF7               	movwf	tblptrh,c
  8373  002010                     	if	0	;There are less than 3 active tblptr bytes
  8374  002010                     	endif
  8375  002010  0009               	tblrd		*+
  8376  002012  CFF5 F024          	movff	tablat,?_scale
  8377  002016  0009               	tblrd		*+
  8378  002018  CFF5 F025          	movff	tablat,?_scale+1
  8379  00201C  000A               	tblrd		*-
  8380  00201E  CFF5 F026          	movff	tablat,?_scale+2
  8381  002022                     i2l653:
  8382  002022  0012               	return	
  8383  002024                     __end_of_scale:
  8384                           	opt stack 0
  8385                           tosu	equ	0xFFF
  8386                           tosh	equ	0xFFE
  8387                           tosl	equ	0xFFD
  8388                           pclatu	equ	0xFFB
  8389                           pclath	equ	0xFFA
  8390                           tblptru	equ	0xFF8
  8391                           tblptrh	equ	0xFF7
  8392                           tblptrl	equ	0xFF6
  8393                           tablat	equ	0xFF5
  8394                           prodh	equ	0xFF4
  8395                           prodl	equ	0xFF3
  8396                           intcon	equ	0xFF2
  8397                           intcon2	equ	0xFF1
  8398                           indf0	equ	0xFEF
  8399                           postinc0	equ	0xFEE
  8400                           fsr0h	equ	0xFEA
  8401                           fsr0l	equ	0xFE9
  8402                           wreg	equ	0xFE8
  8403                           postinc1	equ	0xFE6
  8404                           postdec1	equ	0xFE5
  8405                           fsr1h	equ	0xFE2
  8406                           fsr1l	equ	0xFE1
  8407                           indf2	equ	0xFDF
  8408                           postinc2	equ	0xFDE
  8409                           postdec2	equ	0xFDD
  8410                           fsr2h	equ	0xFDA
  8411                           fsr2l	equ	0xFD9
  8412                           status	equ	0xFD8
  8413                           
  8414 ;; *************** function _isdigit *****************
  8415 ;; Defined at:
  8416 ;;		line 8 in file "/opt/microchip/xc8/v1.32/sources/common/isdigit.c"
  8417 ;; Parameters:    Size  Location     Type
  8418 ;;  c               1    wreg     unsigned char 
  8419 ;; Auto vars:     Size  Location     Type
  8420 ;;  c               1    2[COMRAM] unsigned char 
  8421 ;; Return value:  Size  Location     Type
  8422 ;;		None               void
  8423 ;; Registers used:
  8424 ;;		wreg, status,2, status,0
  8425 ;; Tracked objects:
  8426 ;;		On entry : 0/0
  8427 ;;		On exit  : 0/0
  8428 ;;		Unchanged: 0/0
  8429 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8430 ;;      Params:         0       0       0       0       0       0       0       0       0
  8431 ;;      Locals:         2       0       0       0       0       0       0       0       0
  8432 ;;      Temps:          1       0       0       0       0       0       0       0       0
  8433 ;;      Totals:         3       0       0       0       0       0       0       0       0
  8434 ;;Total ram usage:        3 bytes
  8435 ;; Hardware stack levels used:    1
  8436 ;; This function calls:
  8437 ;;		Nothing
  8438 ;; This function is called by:
  8439 ;;		_sprintf
  8440 ;; This function uses a non-reentrant model
  8441 ;;
  8442                           
  8443                           	psect	text21
  8444  0045EA                     __ptext21:
  8445                           	opt stack 0
  8446  0045EA                     _isdigit:
  8447                           	opt stack 24
  8448                           
  8449                           ;incstack = 0
  8450                           ;isdigit@c stored from wreg
  8451  0045EA  6E03               	movwf	isdigit@c,c
  8452  0045EC  0E00               	movlw	0
  8453  0045EE  6E02               	movwf	_isdigit$1032,c
  8454  0045F0  0E3A               	movlw	58
  8455  0045F2  5C03               	subwf	isdigit@c,w,c
  8456  0045F4  B0D8               	btfsc	status,0,c
  8457  0045F6  D005               	goto	i2l4218
  8458  0045F8  0E2F               	movlw	47
  8459  0045FA  6403               	cpfsgt	isdigit@c,c
  8460  0045FC  D002               	goto	i2l4218
  8461  0045FE  0E01               	movlw	1
  8462  004600  6E02               	movwf	_isdigit$1032,c
  8463  004602                     i2l4218:
  8464  004602  C002  F001         	movff	_isdigit$1032,??_isdigit
  8465  004606  3001               	rrcf	??_isdigit,w,c
  8466  004608  0012               	return	
  8467  00460A                     __end_of_isdigit:
  8468                           	opt stack 0
  8469                           tosu	equ	0xFFF
  8470                           tosh	equ	0xFFE
  8471                           tosl	equ	0xFFD
  8472                           pclatu	equ	0xFFB
  8473                           pclath	equ	0xFFA
  8474                           tblptru	equ	0xFF8
  8475                           tblptrh	equ	0xFF7
  8476                           tblptrl	equ	0xFF6
  8477                           tablat	equ	0xFF5
  8478                           prodh	equ	0xFF4
  8479                           prodl	equ	0xFF3
  8480                           intcon	equ	0xFF2
  8481                           intcon2	equ	0xFF1
  8482                           indf0	equ	0xFEF
  8483                           postinc0	equ	0xFEE
  8484                           fsr0h	equ	0xFEA
  8485                           fsr0l	equ	0xFE9
  8486                           wreg	equ	0xFE8
  8487                           postinc1	equ	0xFE6
  8488                           postdec1	equ	0xFE5
  8489                           fsr1h	equ	0xFE2
  8490                           fsr1l	equ	0xFE1
  8491                           indf2	equ	0xFDF
  8492                           postinc2	equ	0xFDE
  8493                           postdec2	equ	0xFDD
  8494                           fsr2h	equ	0xFDA
  8495                           fsr2l	equ	0xFD9
  8496                           status	equ	0xFD8
  8497                           
  8498 ;; *************** function _fround *****************
  8499 ;; Defined at:
  8500 ;;		line 409 in file "/opt/microchip/xc8/v1.32/sources/common/doprnt.c"
  8501 ;; Parameters:    Size  Location     Type
  8502 ;;  prec            1    wreg     unsigned char 
  8503 ;; Auto vars:     Size  Location     Type
  8504 ;;  prec            1   44[COMRAM] unsigned char 
  8505 ;; Return value:  Size  Location     Type
  8506 ;;                  3   35[COMRAM] unsigned char 
  8507 ;; Registers used:
  8508 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8509 ;; Tracked objects:
  8510 ;;		On entry : 0/0
  8511 ;;		On exit  : 0/0
  8512 ;;		Unchanged: 0/0
  8513 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8514 ;;      Params:         3       0       0       0       0       0       0       0       0
  8515 ;;      Locals:         7       0       0       0       0       0       0       0       0
  8516 ;;      Temps:          0       0       0       0       0       0       0       0       0
  8517 ;;      Totals:        10       0       0       0       0       0       0       0       0
  8518 ;;Total ram usage:       10 bytes
  8519 ;; Hardware stack levels used:    1
  8520 ;; Hardware stack levels required when called:    2
  8521 ;; This function calls:
  8522 ;;		___awdiv
  8523 ;;		___awmod
  8524 ;;		___ftmul
  8525 ;;		___wmul
  8526 ;; This function is called by:
  8527 ;;		_sprintf
  8528 ;; This function uses a non-reentrant model
  8529 ;;
  8530                           
  8531                           	psect	text22
  8532  002632                     __ptext22:
  8533                           	opt stack 0
  8534  002632                     _fround:
  8535                           	opt stack 22
  8536                           
  8537                           ;incstack = 0
  8538                           ;fround@prec stored from wreg
  8539  002632  6E2D               	movwf	fround@prec,c
  8540                           
  8541                           ;doprnt.c: 413: if(prec>=110)
  8542  002634  0E6D               	movlw	109
  8543  002636  642D               	cpfsgt	fround@prec,c
  8544  002638  D099               	goto	i2l4160
  8545                           
  8546                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  8547  00263A  0E00               	movlw	0
  8548  00263C  6E12               	movwf	___wmul@multiplicand+1,c
  8549  00263E  0E03               	movlw	3
  8550  002640  6E11               	movwf	___wmul@multiplicand,c
  8551  002642  0E00               	movlw	0
  8552  002644  6E0A               	movwf	___awdiv@divisor+1,c
  8553  002646  0E0A               	movlw	10
  8554  002648  6E09               	movwf	___awdiv@divisor,c
  8555  00264A  0E00               	movlw	0
  8556  00264C  6E04               	movwf	___awmod@divisor+1,c
  8557  00264E  0E64               	movlw	100
  8558  002650  6E03               	movwf	___awmod@divisor,c
  8559  002652  C02D  F001         	movff	fround@prec,___awmod@dividend
  8560  002656  6A02               	clrf	___awmod@dividend+1,c
  8561  002658  ECF4  F01E         	call	___awmod	;wreg free
  8562  00265C  C001  F007         	movff	?___awmod,___awdiv@dividend
  8563  002660  C002  F008         	movff	?___awmod+1,___awdiv@dividend+1
  8564  002664  ECC4  F01D         	call	___awdiv	;wreg free
  8565  002668  0E09               	movlw	9
  8566  00266A  2407               	addwf	?___awdiv,w,c
  8567  00266C  6E0F               	movwf	___wmul@multiplier,c
  8568  00266E  0E00               	movlw	0
  8569  002670  2008               	addwfc	?___awdiv+1,w,c
  8570  002672  6E10               	movwf	___wmul@multiplier+1,c
  8571  002674  ECD0  F022         	call	___wmul	;wreg free
  8572  002678  0E30               	movlw	low __npowers_
  8573  00267A  240F               	addwf	?___wmul,w,c
  8574  00267C  6EF6               	movwf	tblptrl,c
  8575  00267E  0E7F               	movlw	high __npowers_
  8576  002680  2010               	addwfc	?___wmul+1,w,c
  8577  002682  6EF7               	movwf	tblptrh,c
  8578  002684                     	if	0	;There are less than 3 active tblptr bytes
  8579  002684                     	endif
  8580  002684  0009               	tblrd		*+
  8581  002686  CFF5 F018          	movff	tablat,___ftmul@f2
  8582  00268A  0009               	tblrd		*+
  8583  00268C  CFF5 F019          	movff	tablat,___ftmul@f2+1
  8584  002690  000A               	tblrd		*-
  8585  002692  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  8586  002696  0E00               	movlw	0
  8587  002698  6E0A               	movwf	___awdiv@divisor+1,c
  8588  00269A  0E64               	movlw	100
  8589  00269C  6E09               	movwf	___awdiv@divisor,c
  8590  00269E  C02D  F007         	movff	fround@prec,___awdiv@dividend
  8591  0026A2  6A08               	clrf	___awdiv@dividend+1,c
  8592  0026A4  ECC4  F01D         	call	___awdiv	;wreg free
  8593  0026A8  0E12               	movlw	18
  8594  0026AA  2407               	addwf	?___awdiv,w,c
  8595  0026AC  6E0F               	movwf	___wmul@multiplier,c
  8596  0026AE  0E00               	movlw	0
  8597  0026B0  2008               	addwfc	?___awdiv+1,w,c
  8598  0026B2  6E10               	movwf	___wmul@multiplier+1,c
  8599  0026B4  0E00               	movlw	0
  8600  0026B6  6E12               	movwf	___wmul@multiplicand+1,c
  8601  0026B8  0E03               	movlw	3
  8602  0026BA  6E11               	movwf	___wmul@multiplicand,c
  8603  0026BC  ECD0  F022         	call	___wmul	;wreg free
  8604  0026C0  0E30               	movlw	low __npowers_
  8605  0026C2  240F               	addwf	?___wmul,w,c
  8606  0026C4  6EF6               	movwf	tblptrl,c
  8607  0026C6  0E7F               	movlw	high __npowers_
  8608  0026C8  2010               	addwfc	?___wmul+1,w,c
  8609  0026CA  6EF7               	movwf	tblptrh,c
  8610  0026CC                     	if	0	;There are less than 3 active tblptr bytes
  8611  0026CC                     	endif
  8612  0026CC  0009               	tblrd		*+
  8613  0026CE  CFF5 F015          	movff	tablat,___ftmul@f1
  8614  0026D2  0009               	tblrd		*+
  8615  0026D4  CFF5 F016          	movff	tablat,___ftmul@f1+1
  8616  0026D8  000A               	tblrd		*-
  8617  0026DA  CFF5 F017          	movff	tablat,___ftmul@f1+2
  8618  0026DE  EC61  F01B         	call	___ftmul	;wreg free
  8619  0026E2  C015  F02A         	movff	?___ftmul,_fround$1311
  8620  0026E6  C016  F02B         	movff	?___ftmul+1,_fround$1311+1
  8621  0026EA  C017  F02C         	movff	?___ftmul+2,_fround$1311+2
  8622                           
  8623                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  8624  0026EE  0E00               	movlw	0
  8625  0026F0  6E12               	movwf	___wmul@multiplicand+1,c
  8626  0026F2  0E03               	movlw	3
  8627  0026F4  6E11               	movwf	___wmul@multiplicand,c
  8628  0026F6  0E00               	movlw	0
  8629  0026F8  6E04               	movwf	___awmod@divisor+1,c
  8630  0026FA  0E0A               	movlw	10
  8631  0026FC  6E03               	movwf	___awmod@divisor,c
  8632  0026FE  C02D  F001         	movff	fround@prec,___awmod@dividend
  8633  002702  6A02               	clrf	___awmod@dividend+1,c
  8634  002704  ECF4  F01E         	call	___awmod	;wreg free
  8635  002708  C001  F00F         	movff	?___awmod,___wmul@multiplier
  8636  00270C  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  8637  002710  ECD0  F022         	call	___wmul	;wreg free
  8638  002714  0E30               	movlw	low __npowers_
  8639  002716  240F               	addwf	?___wmul,w,c
  8640  002718  6EF6               	movwf	tblptrl,c
  8641  00271A  0E7F               	movlw	high __npowers_
  8642  00271C  2010               	addwfc	?___wmul+1,w,c
  8643  00271E  6EF7               	movwf	tblptrh,c
  8644  002720                     	if	0	;There are less than 3 active tblptr bytes
  8645  002720                     	endif
  8646  002720  0009               	tblrd		*+
  8647  002722  CFF5 F018          	movff	tablat,___ftmul@f2
  8648  002726  0009               	tblrd		*+
  8649  002728  CFF5 F019          	movff	tablat,___ftmul@f2+1
  8650  00272C  000A               	tblrd		*-
  8651  00272E  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  8652  002732  C02A  F015         	movff	_fround$1311,___ftmul@f1
  8653  002736  C02B  F016         	movff	_fround$1311+1,___ftmul@f1+1
  8654  00273A  C02C  F017         	movff	_fround$1311+2,___ftmul@f1+2
  8655  00273E  EC61  F01B         	call	___ftmul	;wreg free
  8656  002742  C015  F027         	movff	?___ftmul,_fround$1312
  8657  002746  C016  F028         	movff	?___ftmul+1,_fround$1312+1
  8658  00274A  C017  F029         	movff	?___ftmul+2,_fround$1312+2
  8659                           
  8660                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  8661  00274E  C027  F015         	movff	_fround$1312,___ftmul@f1
  8662  002752  C028  F016         	movff	_fround$1312+1,___ftmul@f1+1
  8663  002756  C029  F017         	movff	_fround$1312+2,___ftmul@f1+2
  8664  00275A  0E00               	movlw	0
  8665  00275C  6E18               	movwf	___ftmul@f2,c
  8666  00275E  0E00               	movlw	0
  8667  002760  6E19               	movwf	___ftmul@f2+1,c
  8668  002762  0E3F               	movlw	63
  8669  002764  6E1A               	movwf	___ftmul@f2+2,c
  8670  002766  EC61  F01B         	call	___ftmul	;wreg free
  8671  00276A  D079               	goto	L20
  8672  00276C                     i2l4160:
  8673                           
  8674                           ;doprnt.c: 415: else if(prec > 10)
  8675  00276C  0E0A               	movlw	10
  8676  00276E  642D               	cpfsgt	fround@prec,c
  8677  002770  D05D               	goto	i2l4168
  8678                           
  8679                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  8680  002772  0E00               	movlw	0
  8681  002774  6E12               	movwf	___wmul@multiplicand+1,c
  8682  002776  0E03               	movlw	3
  8683  002778  6E11               	movwf	___wmul@multiplicand,c
  8684  00277A  0E00               	movlw	0
  8685  00277C  6E04               	movwf	___awmod@divisor+1,c
  8686  00277E  0E0A               	movlw	10
  8687  002780  6E03               	movwf	___awmod@divisor,c
  8688  002782  C02D  F001         	movff	fround@prec,___awmod@dividend
  8689  002786  6A02               	clrf	___awmod@dividend+1,c
  8690  002788  ECF4  F01E         	call	___awmod	;wreg free
  8691  00278C  C001  F00F         	movff	?___awmod,___wmul@multiplier
  8692  002790  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  8693  002794  ECD0  F022         	call	___wmul	;wreg free
  8694  002798  0E30               	movlw	low __npowers_
  8695  00279A  240F               	addwf	?___wmul,w,c
  8696  00279C  6EF6               	movwf	tblptrl,c
  8697  00279E  0E7F               	movlw	high __npowers_
  8698  0027A0  2010               	addwfc	?___wmul+1,w,c
  8699  0027A2  6EF7               	movwf	tblptrh,c
  8700  0027A4                     	if	0	;There are less than 3 active tblptr bytes
  8701  0027A4                     	endif
  8702  0027A4  0009               	tblrd		*+
  8703  0027A6  CFF5 F018          	movff	tablat,___ftmul@f2
  8704  0027AA  0009               	tblrd		*+
  8705  0027AC  CFF5 F019          	movff	tablat,___ftmul@f2+1
  8706  0027B0  000A               	tblrd		*-
  8707  0027B2  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  8708  0027B6  0E00               	movlw	0
  8709  0027B8  6E0A               	movwf	___awdiv@divisor+1,c
  8710  0027BA  0E0A               	movlw	10
  8711  0027BC  6E09               	movwf	___awdiv@divisor,c
  8712  0027BE  C02D  F007         	movff	fround@prec,___awdiv@dividend
  8713  0027C2  6A08               	clrf	___awdiv@dividend+1,c
  8714  0027C4  ECC4  F01D         	call	___awdiv	;wreg free
  8715  0027C8  0E09               	movlw	9
  8716  0027CA  2407               	addwf	?___awdiv,w,c
  8717  0027CC  6E0F               	movwf	___wmul@multiplier,c
  8718  0027CE  0E00               	movlw	0
  8719  0027D0  2008               	addwfc	?___awdiv+1,w,c
  8720  0027D2  6E10               	movwf	___wmul@multiplier+1,c
  8721  0027D4  0E00               	movlw	0
  8722  0027D6  6E12               	movwf	___wmul@multiplicand+1,c
  8723  0027D8  0E03               	movlw	3
  8724  0027DA  6E11               	movwf	___wmul@multiplicand,c
  8725  0027DC  ECD0  F022         	call	___wmul	;wreg free
  8726  0027E0  0E30               	movlw	low __npowers_
  8727  0027E2  240F               	addwf	?___wmul,w,c
  8728  0027E4  6EF6               	movwf	tblptrl,c
  8729  0027E6  0E7F               	movlw	high __npowers_
  8730  0027E8  2010               	addwfc	?___wmul+1,w,c
  8731  0027EA  6EF7               	movwf	tblptrh,c
  8732  0027EC                     	if	0	;There are less than 3 active tblptr bytes
  8733  0027EC                     	endif
  8734  0027EC  0009               	tblrd		*+
  8735  0027EE  CFF5 F015          	movff	tablat,___ftmul@f1
  8736  0027F2  0009               	tblrd		*+
  8737  0027F4  CFF5 F016          	movff	tablat,___ftmul@f1+1
  8738  0027F8  000A               	tblrd		*-
  8739  0027FA  CFF5 F017          	movff	tablat,___ftmul@f1+2
  8740  0027FE  EC61  F01B         	call	___ftmul	;wreg free
  8741  002802  C015  F02A         	movff	?___ftmul,_fround$1311
  8742  002806  C016  F02B         	movff	?___ftmul+1,_fround$1311+1
  8743  00280A  C017  F02C         	movff	?___ftmul+2,_fround$1311+2
  8744                           
  8745                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  8746  00280E  C02A  F015         	movff	_fround$1311,___ftmul@f1
  8747  002812  C02B  F016         	movff	_fround$1311+1,___ftmul@f1+1
  8748  002816  C02C  F017         	movff	_fround$1311+2,___ftmul@f1+2
  8749  00281A  0E00               	movlw	0
  8750  00281C  6E18               	movwf	___ftmul@f2,c
  8751  00281E  0E00               	movlw	0
  8752  002820  6E19               	movwf	___ftmul@f2+1,c
  8753  002822  0E3F               	movlw	63
  8754  002824  6E1A               	movwf	___ftmul@f2+2,c
  8755  002826  EC61  F01B         	call	___ftmul	;wreg free
  8756  00282A  D019               	goto	L20
  8757  00282C                     i2l4168:
  8758                           
  8759                           ;doprnt.c: 417: return 0.5 * _npowers_[prec];
  8760  00282C  502D               	movf	fround@prec,w,c
  8761  00282E  0D03               	mullw	3
  8762  002830  0E30               	movlw	low __npowers_
  8763  002832  24F3               	addwf	prodl,w,c
  8764  002834  6EF6               	movwf	tblptrl,c
  8765  002836  0E7F               	movlw	high __npowers_
  8766  002838  20F4               	addwfc	prodh,w,c
  8767  00283A  6EF7               	movwf	tblptrh,c
  8768  00283C                     	if	0	;There are less than 3 active tblptr bytes
  8769  00283C                     	endif
  8770  00283C  0009               	tblrd		*+
  8771  00283E  CFF5 F015          	movff	tablat,___ftmul@f1
  8772  002842  0009               	tblrd		*+
  8773  002844  CFF5 F016          	movff	tablat,___ftmul@f1+1
  8774  002848  000A               	tblrd		*-
  8775  00284A  CFF5 F017          	movff	tablat,___ftmul@f1+2
  8776  00284E  0E00               	movlw	0
  8777  002850  6E18               	movwf	___ftmul@f2,c
  8778  002852  0E00               	movlw	0
  8779  002854  6E19               	movwf	___ftmul@f2+1,c
  8780  002856  0E3F               	movlw	63
  8781  002858  6E1A               	movwf	___ftmul@f2+2,c
  8782  00285A  EC61  F01B         	call	___ftmul	;wreg free
  8783  00285E                     L20:
  8784  00285E  C015  F024         	movff	?___ftmul,?_fround
  8785  002862  C016  F025         	movff	?___ftmul+1,?_fround+1
  8786  002866  C017  F026         	movff	?___ftmul+2,?_fround+2
  8787  00286A  0012               	return	
  8788  00286C                     __end_of_fround:
  8789                           	opt stack 0
  8790                           tosu	equ	0xFFF
  8791                           tosh	equ	0xFFE
  8792                           tosl	equ	0xFFD
  8793                           pclatu	equ	0xFFB
  8794                           pclath	equ	0xFFA
  8795                           tblptru	equ	0xFF8
  8796                           tblptrh	equ	0xFF7
  8797                           tblptrl	equ	0xFF6
  8798                           tablat	equ	0xFF5
  8799                           prodh	equ	0xFF4
  8800                           prodl	equ	0xFF3
  8801                           intcon	equ	0xFF2
  8802                           intcon2	equ	0xFF1
  8803                           indf0	equ	0xFEF
  8804                           postinc0	equ	0xFEE
  8805                           fsr0h	equ	0xFEA
  8806                           fsr0l	equ	0xFE9
  8807                           wreg	equ	0xFE8
  8808                           postinc1	equ	0xFE6
  8809                           postdec1	equ	0xFE5
  8810                           fsr1h	equ	0xFE2
  8811                           fsr1l	equ	0xFE1
  8812                           indf2	equ	0xFDF
  8813                           postinc2	equ	0xFDE
  8814                           postdec2	equ	0xFDD
  8815                           fsr2h	equ	0xFDA
  8816                           fsr2l	equ	0xFD9
  8817                           status	equ	0xFD8
  8818                           
  8819 ;; *************** function __tdiv_to_l_ *****************
  8820 ;; Defined at:
  8821 ;;		line 60 in file "/opt/microchip/xc8/v1.32/sources/common/ftdivl.c"
  8822 ;; Parameters:    Size  Location     Type
  8823 ;;  f1              3    0[COMRAM] float 
  8824 ;;  f2              3    3[COMRAM] float 
  8825 ;; Auto vars:     Size  Location     Type
  8826 ;;  quot            4    9[COMRAM] unsigned long 
  8827 ;;  exp1            1   14[COMRAM] unsigned char 
  8828 ;;  cntr            1   13[COMRAM] unsigned char 
  8829 ;; Return value:  Size  Location     Type
  8830 ;;                  4    0[COMRAM] unsigned long 
  8831 ;; Registers used:
  8832 ;;		wreg, status,2, status,0
  8833 ;; Tracked objects:
  8834 ;;		On entry : 0/0
  8835 ;;		On exit  : 0/0
  8836 ;;		Unchanged: 0/0
  8837 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8838 ;;      Params:         6       0       0       0       0       0       0       0       0
  8839 ;;      Locals:         6       0       0       0       0       0       0       0       0
  8840 ;;      Temps:          3       0       0       0       0       0       0       0       0
  8841 ;;      Totals:        15       0       0       0       0       0       0       0       0
  8842 ;;Total ram usage:       15 bytes
  8843 ;; Hardware stack levels used:    1
  8844 ;; This function calls:
  8845 ;;		Nothing
  8846 ;; This function is called by:
  8847 ;;		_sprintf
  8848 ;; This function uses a non-reentrant model
  8849 ;;
  8850                           
  8851                           	psect	text23
  8852  0032F4                     __ptext23:
  8853                           	opt stack 0
  8854  0032F4                     __tdiv_to_l_:
  8855                           	opt stack 24
  8856                           
  8857                           ;incstack = 0
  8858  0032F4  C003  F007         	movff	__tdiv_to_l_@f1+2,??__tdiv_to_l_
  8859  0032F8  6A08               	clrf	(??__tdiv_to_l_+1)& (0+255),c
  8860  0032FA  6A09               	clrf	(??__tdiv_to_l_+2)& (0+255),c
  8861  0032FC  3402               	rlcf	__tdiv_to_l_@f1+1,w,c
  8862  0032FE  3607               	rlcf	??__tdiv_to_l_& (0+255),f,c
  8863  003300  E301               	bnc	u407_41
  8864  003302  8008               	bsf	(??__tdiv_to_l_+1)& (0+255),0,c
  8865  003304                     u407_41:
  8866  003304  5007               	movf	??__tdiv_to_l_,w,c
  8867  003306  6E0F               	movwf	__tdiv_to_l_@exp1,c
  8868  003308  660F               	tstfsz	__tdiv_to_l_@exp1& (0+255),c
  8869  00330A  D001               	goto	i2l4228
  8870  00330C  D059               	goto	i2u414_40
  8871  00330E                     i2l4228:
  8872  00330E  C006  F007         	movff	__tdiv_to_l_@f2+2,??__tdiv_to_l_
  8873  003312  6A08               	clrf	(??__tdiv_to_l_+1)& (0+255),c
  8874  003314  6A09               	clrf	(??__tdiv_to_l_+2)& (0+255),c
  8875  003316  3405               	rlcf	__tdiv_to_l_@f2+1,w,c
  8876  003318  3607               	rlcf	??__tdiv_to_l_& (0+255),f,c
  8877  00331A  E301               	bnc	u409_41
  8878  00331C  8008               	bsf	(??__tdiv_to_l_+1)& (0+255),0,c
  8879  00331E                     u409_41:
  8880  00331E  5007               	movf	??__tdiv_to_l_,w,c
  8881  003320  6E0E               	movwf	__tdiv_to_l_@cntr,c
  8882  003322  660E               	tstfsz	__tdiv_to_l_@cntr& (0+255),c
  8883  003324  D001               	goto	i2l4234
  8884  003326  D04C               	goto	i2u414_40
  8885  003328                     i2l4234:
  8886  003328  8E02               	bsf	__tdiv_to_l_@f1+1,7,c
  8887  00332A  0EFF               	movlw	255
  8888  00332C  1601               	andwf	__tdiv_to_l_@f1,f,c
  8889  00332E  0EFF               	movlw	255
  8890  003330  1602               	andwf	__tdiv_to_l_@f1+1,f,c
  8891  003332  0E00               	movlw	0
  8892  003334  1603               	andwf	__tdiv_to_l_@f1+2,f,c
  8893  003336  8E05               	bsf	__tdiv_to_l_@f2+1,7,c
  8894  003338  0EFF               	movlw	255
  8895  00333A  1604               	andwf	__tdiv_to_l_@f2,f,c
  8896  00333C  0EFF               	movlw	255
  8897  00333E  1605               	andwf	__tdiv_to_l_@f2+1,f,c
  8898  003340  0E00               	movlw	0
  8899  003342  1606               	andwf	__tdiv_to_l_@f2+2,f,c
  8900  003344  0E00               	movlw	0
  8901  003346  6E0A               	movwf	__tdiv_to_l_@quot,c
  8902  003348  0E00               	movlw	0
  8903  00334A  6E0B               	movwf	__tdiv_to_l_@quot+1,c
  8904  00334C  0E00               	movlw	0
  8905  00334E  6E0C               	movwf	__tdiv_to_l_@quot+2,c
  8906  003350  0E00               	movlw	0
  8907  003352  6E0D               	movwf	__tdiv_to_l_@quot+3,c
  8908  003354  0E7F               	movlw	127
  8909  003356  5E0F               	subwf	__tdiv_to_l_@exp1,f,c
  8910  003358  500E               	movf	__tdiv_to_l_@cntr,w,c
  8911  00335A  0F98               	addlw	152
  8912  00335C  5E0F               	subwf	__tdiv_to_l_@exp1,f,c
  8913  00335E  0E18               	movlw	24
  8914  003360  6E0E               	movwf	__tdiv_to_l_@cntr,c
  8915  003362                     i2l1192:
  8916  003362  90D8               	bcf	status,0,c
  8917  003364  360A               	rlcf	__tdiv_to_l_@quot,f,c
  8918  003366  360B               	rlcf	__tdiv_to_l_@quot+1,f,c
  8919  003368  360C               	rlcf	__tdiv_to_l_@quot+2,f,c
  8920  00336A  360D               	rlcf	__tdiv_to_l_@quot+3,f,c
  8921  00336C  5004               	movf	__tdiv_to_l_@f2,w,c
  8922  00336E  5C01               	subwf	__tdiv_to_l_@f1,w,c
  8923  003370  5005               	movf	__tdiv_to_l_@f2+1,w,c
  8924  003372  5802               	subwfb	__tdiv_to_l_@f1+1,w,c
  8925  003374  5006               	movf	__tdiv_to_l_@f2+2,w,c
  8926  003376  5803               	subwfb	__tdiv_to_l_@f1+2,w,c
  8927  003378  A0D8               	btfss	status,0,c
  8928  00337A  D007               	goto	i2l1193
  8929  00337C  5004               	movf	__tdiv_to_l_@f2,w,c
  8930  00337E  5E01               	subwf	__tdiv_to_l_@f1,f,c
  8931  003380  5005               	movf	__tdiv_to_l_@f2+1,w,c
  8932  003382  5A02               	subwfb	__tdiv_to_l_@f1+1,f,c
  8933  003384  5006               	movf	__tdiv_to_l_@f2+2,w,c
  8934  003386  5A03               	subwfb	__tdiv_to_l_@f1+2,f,c
  8935  003388  800A               	bsf	__tdiv_to_l_@quot,0,c
  8936  00338A                     i2l1193:
  8937  00338A  90D8               	bcf	status,0,c
  8938  00338C  3601               	rlcf	__tdiv_to_l_@f1,f,c
  8939  00338E  3602               	rlcf	__tdiv_to_l_@f1+1,f,c
  8940  003390  3603               	rlcf	__tdiv_to_l_@f1+2,f,c
  8941  003392  2E0E               	decfsz	__tdiv_to_l_@cntr,f,c
  8942  003394  D7E6               	goto	i2l1192
  8943  003396  AE0F               	btfss	__tdiv_to_l_@exp1,7,c
  8944  003398  D010               	goto	i2l4266
  8945  00339A  500F               	movf	__tdiv_to_l_@exp1,w,c
  8946  00339C  0A80               	xorlw	128
  8947  00339E  6E07               	movwf	??__tdiv_to_l_& (0+255),c
  8948  0033A0  0EE9               	movlw	233
  8949  0033A2  0A80               	xorlw	128
  8950  0033A4  5C07               	subwf	??__tdiv_to_l_,w,c
  8951  0033A6  A0D8               	btfss	status,0,c
  8952  0033A8  D00B               	goto	i2u414_40
  8953  0033AA                     i2l4262:
  8954  0033AA  90D8               	bcf	status,0,c
  8955  0033AC  320D               	rrcf	__tdiv_to_l_@quot+3,f,c
  8956  0033AE  320C               	rrcf	__tdiv_to_l_@quot+2,f,c
  8957  0033B0  320B               	rrcf	__tdiv_to_l_@quot+1,f,c
  8958  0033B2  320A               	rrcf	__tdiv_to_l_@quot,f,c
  8959  0033B4  3E0F               	incfsz	__tdiv_to_l_@exp1,f,c
  8960  0033B6  D7F9               	goto	i2l4262
  8961  0033B8  D014               	goto	i2l1199
  8962  0033BA                     i2l4266:
  8963  0033BA  0E17               	movlw	23
  8964  0033BC  640F               	cpfsgt	__tdiv_to_l_@exp1,c
  8965  0033BE  D00F               	goto	i2l4274
  8966  0033C0                     i2u414_40:
  8967  0033C0  0E00               	movlw	0
  8968  0033C2  6E01               	movwf	?__tdiv_to_l_,c
  8969  0033C4  0E00               	movlw	0
  8970  0033C6  6E02               	movwf	?__tdiv_to_l_+1,c
  8971  0033C8  0E00               	movlw	0
  8972  0033CA  6E03               	movwf	?__tdiv_to_l_+2,c
  8973  0033CC  0E00               	movlw	0
  8974  0033CE  6E04               	movwf	?__tdiv_to_l_+3,c
  8975  0033D0  D010               	goto	i2l1190
  8976  0033D2                     i2l4272:
  8977  0033D2  90D8               	bcf	status,0,c
  8978  0033D4  360A               	rlcf	__tdiv_to_l_@quot,f,c
  8979  0033D6  360B               	rlcf	__tdiv_to_l_@quot+1,f,c
  8980  0033D8  360C               	rlcf	__tdiv_to_l_@quot+2,f,c
  8981  0033DA  360D               	rlcf	__tdiv_to_l_@quot+3,f,c
  8982  0033DC  060F               	decf	__tdiv_to_l_@exp1,f,c
  8983  0033DE                     i2l4274:
  8984  0033DE  660F               	tstfsz	__tdiv_to_l_@exp1,c
  8985  0033E0  D7F8               	goto	i2l4272
  8986  0033E2                     i2l1199:
  8987  0033E2  C00A  F001         	movff	__tdiv_to_l_@quot,?__tdiv_to_l_
  8988  0033E6  C00B  F002         	movff	__tdiv_to_l_@quot+1,?__tdiv_to_l_+1
  8989  0033EA  C00C  F003         	movff	__tdiv_to_l_@quot+2,?__tdiv_to_l_+2
  8990  0033EE  C00D  F004         	movff	__tdiv_to_l_@quot+3,?__tdiv_to_l_+3
  8991  0033F2                     i2l1190:
  8992  0033F2  0012               	return	
  8993  0033F4                     __end_of__tdiv_to_l_:
  8994                           	opt stack 0
  8995                           tosu	equ	0xFFF
  8996                           tosh	equ	0xFFE
  8997                           tosl	equ	0xFFD
  8998                           pclatu	equ	0xFFB
  8999                           pclath	equ	0xFFA
  9000                           tblptru	equ	0xFF8
  9001                           tblptrh	equ	0xFF7
  9002                           tblptrl	equ	0xFF6
  9003                           tablat	equ	0xFF5
  9004                           prodh	equ	0xFF4
  9005                           prodl	equ	0xFF3
  9006                           intcon	equ	0xFF2
  9007                           intcon2	equ	0xFF1
  9008                           indf0	equ	0xFEF
  9009                           postinc0	equ	0xFEE
  9010                           fsr0h	equ	0xFEA
  9011                           fsr0l	equ	0xFE9
  9012                           wreg	equ	0xFE8
  9013                           postinc1	equ	0xFE6
  9014                           postdec1	equ	0xFE5
  9015                           fsr1h	equ	0xFE2
  9016                           fsr1l	equ	0xFE1
  9017                           indf2	equ	0xFDF
  9018                           postinc2	equ	0xFDE
  9019                           postdec2	equ	0xFDD
  9020                           fsr2h	equ	0xFDA
  9021                           fsr2l	equ	0xFD9
  9022                           status	equ	0xFD8
  9023                           
  9024 ;; *************** function __div_to_l_ *****************
  9025 ;; Defined at:
  9026 ;;		line 60 in file "/opt/microchip/xc8/v1.32/sources/common/fldivl.c"
  9027 ;; Parameters:    Size  Location     Type
  9028 ;;  f1              3    0[COMRAM] unsigned long 
  9029 ;;  f2              3    3[COMRAM] unsigned long 
  9030 ;; Auto vars:     Size  Location     Type
  9031 ;;  quot            4   10[COMRAM] unsigned long 
  9032 ;;  exp1            1   15[COMRAM] unsigned char 
  9033 ;;  cntr            1   14[COMRAM] unsigned char 
  9034 ;; Return value:  Size  Location     Type
  9035 ;;                  4    0[COMRAM] unsigned long 
  9036 ;; Registers used:
  9037 ;;		wreg, status,2, status,0
  9038 ;; Tracked objects:
  9039 ;;		On entry : 0/0
  9040 ;;		On exit  : 0/0
  9041 ;;		Unchanged: 0/0
  9042 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9043 ;;      Params:         6       0       0       0       0       0       0       0       0
  9044 ;;      Locals:         6       0       0       0       0       0       0       0       0
  9045 ;;      Temps:          4       0       0       0       0       0       0       0       0
  9046 ;;      Totals:        16       0       0       0       0       0       0       0       0
  9047 ;;Total ram usage:       16 bytes
  9048 ;; Hardware stack levels used:    1
  9049 ;; This function calls:
  9050 ;;		Nothing
  9051 ;; This function is called by:
  9052 ;;		_sprintf
  9053 ;; This function uses a non-reentrant model
  9054 ;;
  9055                           
  9056                           	psect	text24
  9057  0031BE                     __ptext24:
  9058                           	opt stack 0
  9059  0031BE                     __div_to_l_:
  9060                           	opt stack 24
  9061                           
  9062                           ;incstack = 0
  9063  0031BE  C001  F007         	movff	__div_to_l_@f1,??__div_to_l_
  9064  0031C2  C002  F008         	movff	__div_to_l_@f1+1,??__div_to_l_+1
  9065  0031C6  C003  F009         	movff	__div_to_l_@f1+2,??__div_to_l_+2
  9066  0031CA  C004  F00A         	movff	__div_to_l_@f1+3,??__div_to_l_+3
  9067  0031CE  0E18               	movlw	24
  9068  0031D0  D005               	goto	i2u416_40
  9069  0031D2                     i2u416_45:
  9070  0031D2  90D8               	bcf	status,0,c
  9071  0031D4  320A               	rrcf	??__div_to_l_+3,f,c
  9072  0031D6  3209               	rrcf	??__div_to_l_+2,f,c
  9073  0031D8  3208               	rrcf	??__div_to_l_+1,f,c
  9074  0031DA  3207               	rrcf	??__div_to_l_,f,c
  9075  0031DC                     i2u416_40:
  9076  0031DC  2EE8               	decfsz	wreg,f,c
  9077  0031DE  D7F9               	goto	i2u416_45
  9078  0031E0  5007               	movf	??__div_to_l_,w,c
  9079  0031E2  6E10               	movwf	__div_to_l_@exp1,c
  9080  0031E4  6610               	tstfsz	__div_to_l_@exp1& (0+255),c
  9081  0031E6  D001               	goto	i2l4282
  9082  0031E8  D06B               	goto	i2u423_40
  9083  0031EA                     i2l4282:
  9084  0031EA  C004  F007         	movff	__div_to_l_@f2,??__div_to_l_
  9085  0031EE  C005  F008         	movff	__div_to_l_@f2+1,??__div_to_l_+1
  9086  0031F2  C006  F009         	movff	__div_to_l_@f2+2,??__div_to_l_+2
  9087  0031F6  C007  F00A         	movff	__div_to_l_@f2+3,??__div_to_l_+3
  9088  0031FA  0E18               	movlw	24
  9089  0031FC  D005               	goto	i2u418_40
  9090  0031FE                     i2u418_45:
  9091  0031FE  90D8               	bcf	status,0,c
  9092  003200  320A               	rrcf	??__div_to_l_+3,f,c
  9093  003202  3209               	rrcf	??__div_to_l_+2,f,c
  9094  003204  3208               	rrcf	??__div_to_l_+1,f,c
  9095  003206  3207               	rrcf	??__div_to_l_,f,c
  9096  003208                     i2u418_40:
  9097  003208  2EE8               	decfsz	wreg,f,c
  9098  00320A  D7F9               	goto	i2u418_45
  9099  00320C  5007               	movf	??__div_to_l_,w,c
  9100  00320E  6E0F               	movwf	__div_to_l_@cntr,c
  9101  003210  660F               	tstfsz	__div_to_l_@cntr& (0+255),c
  9102  003212  D001               	goto	i2l4288
  9103  003214  D055               	goto	i2u423_40
  9104  003216                     i2l4288:
  9105  003216  8E03               	bsf	__div_to_l_@f1+2,7,c
  9106  003218  0EFF               	movlw	255
  9107  00321A  1601               	andwf	__div_to_l_@f1,f,c
  9108  00321C  0EFF               	movlw	255
  9109  00321E  1602               	andwf	__div_to_l_@f1+1,f,c
  9110  003220  0EFF               	movlw	255
  9111  003222  1603               	andwf	__div_to_l_@f1+2,f,c
  9112  003224  0E00               	movlw	0
  9113  003226  1604               	andwf	__div_to_l_@f1+3,f,c
  9114  003228  8E06               	bsf	__div_to_l_@f2+2,7,c
  9115  00322A  0EFF               	movlw	255
  9116  00322C  1604               	andwf	__div_to_l_@f2,f,c
  9117  00322E  0EFF               	movlw	255
  9118  003230  1605               	andwf	__div_to_l_@f2+1,f,c
  9119  003232  0EFF               	movlw	255
  9120  003234  1606               	andwf	__div_to_l_@f2+2,f,c
  9121  003236  0E00               	movlw	0
  9122  003238  1607               	andwf	__div_to_l_@f2+3,f,c
  9123  00323A  0E00               	movlw	0
  9124  00323C  6E0B               	movwf	__div_to_l_@quot,c
  9125  00323E  0E00               	movlw	0
  9126  003240  6E0C               	movwf	__div_to_l_@quot+1,c
  9127  003242  0E00               	movlw	0
  9128  003244  6E0D               	movwf	__div_to_l_@quot+2,c
  9129  003246  0E00               	movlw	0
  9130  003248  6E0E               	movwf	__div_to_l_@quot+3,c
  9131  00324A  0E7F               	movlw	127
  9132  00324C  5E10               	subwf	__div_to_l_@exp1,f,c
  9133  00324E  500F               	movf	__div_to_l_@cntr,w,c
  9134  003250  0FA0               	addlw	160
  9135  003252  5E10               	subwf	__div_to_l_@exp1,f,c
  9136  003254  0E20               	movlw	32
  9137  003256  6E0F               	movwf	__div_to_l_@cntr,c
  9138  003258                     i2l4302:
  9139  003258  90D8               	bcf	status,0,c
  9140  00325A  360B               	rlcf	__div_to_l_@quot,f,c
  9141  00325C  360C               	rlcf	__div_to_l_@quot+1,f,c
  9142  00325E  360D               	rlcf	__div_to_l_@quot+2,f,c
  9143  003260  360E               	rlcf	__div_to_l_@quot+3,f,c
  9144  003262  5004               	movf	__div_to_l_@f2,w,c
  9145  003264  5C01               	subwf	__div_to_l_@f1,w,c
  9146  003266  5005               	movf	__div_to_l_@f2+1,w,c
  9147  003268  5802               	subwfb	__div_to_l_@f1+1,w,c
  9148  00326A  5006               	movf	__div_to_l_@f2+2,w,c
  9149  00326C  5803               	subwfb	__div_to_l_@f1+2,w,c
  9150  00326E  5007               	movf	__div_to_l_@f2+3,w,c
  9151  003270  5804               	subwfb	__div_to_l_@f1+3,w,c
  9152  003272  A0D8               	btfss	status,0,c
  9153  003274  D009               	goto	i2l4310
  9154  003276  5004               	movf	__div_to_l_@f2,w,c
  9155  003278  5E01               	subwf	__div_to_l_@f1,f,c
  9156  00327A  5005               	movf	__div_to_l_@f2+1,w,c
  9157  00327C  5A02               	subwfb	__div_to_l_@f1+1,f,c
  9158  00327E  5006               	movf	__div_to_l_@f2+2,w,c
  9159  003280  5A03               	subwfb	__div_to_l_@f1+2,f,c
  9160  003282  5007               	movf	__div_to_l_@f2+3,w,c
  9161  003284  5A04               	subwfb	__div_to_l_@f1+3,f,c
  9162  003286  800B               	bsf	__div_to_l_@quot,0,c
  9163  003288                     i2l4310:
  9164  003288  90D8               	bcf	status,0,c
  9165  00328A  3601               	rlcf	__div_to_l_@f1,f,c
  9166  00328C  3602               	rlcf	__div_to_l_@f1+1,f,c
  9167  00328E  3603               	rlcf	__div_to_l_@f1+2,f,c
  9168  003290  3604               	rlcf	__div_to_l_@f1+3,f,c
  9169  003292  2E0F               	decfsz	__div_to_l_@cntr,f,c
  9170  003294  D7E1               	goto	i2l4302
  9171  003296  AE10               	btfss	__div_to_l_@exp1,7,c
  9172  003298  D010               	goto	i2l4324
  9173  00329A  5010               	movf	__div_to_l_@exp1,w,c
  9174  00329C  0A80               	xorlw	128
  9175  00329E  6E07               	movwf	??__div_to_l_& (0+255),c
  9176  0032A0  0EE1               	movlw	225
  9177  0032A2  0A80               	xorlw	128
  9178  0032A4  5C07               	subwf	??__div_to_l_,w,c
  9179  0032A6  A0D8               	btfss	status,0,c
  9180  0032A8  D00B               	goto	i2u423_40
  9181  0032AA                     i2l4320:
  9182  0032AA  90D8               	bcf	status,0,c
  9183  0032AC  320E               	rrcf	__div_to_l_@quot+3,f,c
  9184  0032AE  320D               	rrcf	__div_to_l_@quot+2,f,c
  9185  0032B0  320C               	rrcf	__div_to_l_@quot+1,f,c
  9186  0032B2  320B               	rrcf	__div_to_l_@quot,f,c
  9187  0032B4  3E10               	incfsz	__div_to_l_@exp1,f,c
  9188  0032B6  D7F9               	goto	i2l4320
  9189  0032B8  D014               	goto	i2l1081
  9190  0032BA                     i2l4324:
  9191  0032BA  0E1F               	movlw	31
  9192  0032BC  6410               	cpfsgt	__div_to_l_@exp1,c
  9193  0032BE  D00F               	goto	i2l4332
  9194  0032C0                     i2u423_40:
  9195  0032C0  0E00               	movlw	0
  9196  0032C2  6E01               	movwf	?__div_to_l_,c
  9197  0032C4  0E00               	movlw	0
  9198  0032C6  6E02               	movwf	?__div_to_l_+1,c
  9199  0032C8  0E00               	movlw	0
  9200  0032CA  6E03               	movwf	?__div_to_l_+2,c
  9201  0032CC  0E00               	movlw	0
  9202  0032CE  6E04               	movwf	?__div_to_l_+3,c
  9203  0032D0  D010               	goto	i2l1072
  9204  0032D2                     i2l4330:
  9205  0032D2  90D8               	bcf	status,0,c
  9206  0032D4  360B               	rlcf	__div_to_l_@quot,f,c
  9207  0032D6  360C               	rlcf	__div_to_l_@quot+1,f,c
  9208  0032D8  360D               	rlcf	__div_to_l_@quot+2,f,c
  9209  0032DA  360E               	rlcf	__div_to_l_@quot+3,f,c
  9210  0032DC  0610               	decf	__div_to_l_@exp1,f,c
  9211  0032DE                     i2l4332:
  9212  0032DE  6610               	tstfsz	__div_to_l_@exp1,c
  9213  0032E0  D7F8               	goto	i2l4330
  9214  0032E2                     i2l1081:
  9215  0032E2  C00B  F001         	movff	__div_to_l_@quot,?__div_to_l_
  9216  0032E6  C00C  F002         	movff	__div_to_l_@quot+1,?__div_to_l_+1
  9217  0032EA  C00D  F003         	movff	__div_to_l_@quot+2,?__div_to_l_+2
  9218  0032EE  C00E  F004         	movff	__div_to_l_@quot+3,?__div_to_l_+3
  9219  0032F2                     i2l1072:
  9220  0032F2  0012               	return	
  9221  0032F4                     __end_of__div_to_l_:
  9222                           	opt stack 0
  9223                           tosu	equ	0xFFF
  9224                           tosh	equ	0xFFE
  9225                           tosl	equ	0xFFD
  9226                           pclatu	equ	0xFFB
  9227                           pclath	equ	0xFFA
  9228                           tblptru	equ	0xFF8
  9229                           tblptrh	equ	0xFF7
  9230                           tblptrl	equ	0xFF6
  9231                           tablat	equ	0xFF5
  9232                           prodh	equ	0xFF4
  9233                           prodl	equ	0xFF3
  9234                           intcon	equ	0xFF2
  9235                           intcon2	equ	0xFF1
  9236                           indf0	equ	0xFEF
  9237                           postinc0	equ	0xFEE
  9238                           fsr0h	equ	0xFEA
  9239                           fsr0l	equ	0xFE9
  9240                           wreg	equ	0xFE8
  9241                           postinc1	equ	0xFE6
  9242                           postdec1	equ	0xFE5
  9243                           fsr1h	equ	0xFE2
  9244                           fsr1l	equ	0xFE1
  9245                           indf2	equ	0xFDF
  9246                           postinc2	equ	0xFDE
  9247                           postdec2	equ	0xFDD
  9248                           fsr2h	equ	0xFDA
  9249                           fsr2l	equ	0xFD9
  9250                           status	equ	0xFD8
  9251                           
  9252 ;; *************** function ___lltoft *****************
  9253 ;; Defined at:
  9254 ;;		line 35 in file "/opt/microchip/xc8/v1.32/sources/common/lltoft.c"
  9255 ;; Parameters:    Size  Location     Type
  9256 ;;  c               4    8[COMRAM] unsigned long 
  9257 ;; Auto vars:     Size  Location     Type
  9258 ;;  exp             1   16[COMRAM] unsigned char 
  9259 ;; Return value:  Size  Location     Type
  9260 ;;                  3    8[COMRAM] float 
  9261 ;; Registers used:
  9262 ;;		wreg, status,2, status,0, cstack
  9263 ;; Tracked objects:
  9264 ;;		On entry : 0/0
  9265 ;;		On exit  : 0/0
  9266 ;;		Unchanged: 0/0
  9267 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9268 ;;      Params:         4       0       0       0       0       0       0       0       0
  9269 ;;      Locals:         1       0       0       0       0       0       0       0       0
  9270 ;;      Temps:          4       0       0       0       0       0       0       0       0
  9271 ;;      Totals:         9       0       0       0       0       0       0       0       0
  9272 ;;Total ram usage:        9 bytes
  9273 ;; Hardware stack levels used:    1
  9274 ;; Hardware stack levels required when called:    1
  9275 ;; This function calls:
  9276 ;;		___ftpack
  9277 ;; This function is called by:
  9278 ;;		_printTemp
  9279 ;;		_sprintf
  9280 ;; This function uses a non-reentrant model
  9281 ;;
  9282                           
  9283                           	psect	text25
  9284  00422E                     __ptext25:
  9285                           	opt stack 0
  9286  00422E                     ___lltoft:
  9287                           	opt stack 23
  9288                           
  9289                           ;incstack = 0
  9290  00422E  0E8E               	movlw	142
  9291  004230  6E11               	movwf	___lltoft@exp,c
  9292  004232  D006               	goto	i2l4434
  9293  004234                     i2l4432:
  9294  004234  90D8               	bcf	status,0,c
  9295  004236  320C               	rrcf	___lltoft@c+3,f,c
  9296  004238  320B               	rrcf	___lltoft@c+2,f,c
  9297  00423A  320A               	rrcf	___lltoft@c+1,f,c
  9298  00423C  3209               	rrcf	___lltoft@c,f,c
  9299  00423E  2A11               	incf	___lltoft@exp,f,c
  9300  004240                     i2l4434:
  9301  004240  0E00               	movlw	0
  9302  004242  1409               	andwf	___lltoft@c,w,c
  9303  004244  6E0D               	movwf	??___lltoft& (0+255),c
  9304  004246  0E00               	movlw	0
  9305  004248  140A               	andwf	___lltoft@c+1,w,c
  9306  00424A  6E0E               	movwf	(??___lltoft+1)& (0+255),c
  9307  00424C  0E00               	movlw	0
  9308  00424E  140B               	andwf	___lltoft@c+2,w,c
  9309  004250  6E0F               	movwf	(??___lltoft+2)& (0+255),c
  9310  004252  0EFF               	movlw	255
  9311  004254  140C               	andwf	___lltoft@c+3,w,c
  9312  004256  6E10               	movwf	(??___lltoft+3)& (0+255),c
  9313  004258  5010               	movf	??___lltoft+3,w,c
  9314  00425A  100D               	iorwf	??___lltoft,w,c
  9315  00425C  100E               	iorwf	??___lltoft+1,w,c
  9316  00425E  100F               	iorwf	??___lltoft+2,w,c
  9317  004260  A4D8               	btfss	status,2,c
  9318  004262  D7E8               	goto	i2l4432
  9319  004264  C009  F001         	movff	___lltoft@c,___ftpack@arg
  9320  004268  C00A  F002         	movff	___lltoft@c+1,___ftpack@arg+1
  9321  00426C  C00B  F003         	movff	___lltoft@c+2,___ftpack@arg+2
  9322  004270  C011  F004         	movff	___lltoft@exp,___ftpack@exp
  9323  004274  0E00               	movlw	0
  9324  004276  6E05               	movwf	___ftpack@sign,c
  9325  004278  EC70  F01D         	call	___ftpack	;wreg free
  9326  00427C  C001  F009         	movff	?___ftpack,?___lltoft
  9327  004280  C002  F00A         	movff	?___ftpack+1,?___lltoft+1
  9328  004284  C003  F00B         	movff	?___ftpack+2,?___lltoft+2
  9329  004288  0012               	return	
  9330  00428A                     __end_of___lltoft:
  9331                           	opt stack 0
  9332                           tosu	equ	0xFFF
  9333                           tosh	equ	0xFFE
  9334                           tosl	equ	0xFFD
  9335                           pclatu	equ	0xFFB
  9336                           pclath	equ	0xFFA
  9337                           tblptru	equ	0xFF8
  9338                           tblptrh	equ	0xFF7
  9339                           tblptrl	equ	0xFF6
  9340                           tablat	equ	0xFF5
  9341                           prodh	equ	0xFF4
  9342                           prodl	equ	0xFF3
  9343                           intcon	equ	0xFF2
  9344                           intcon2	equ	0xFF1
  9345                           indf0	equ	0xFEF
  9346                           postinc0	equ	0xFEE
  9347                           fsr0h	equ	0xFEA
  9348                           fsr0l	equ	0xFE9
  9349                           wreg	equ	0xFE8
  9350                           postinc1	equ	0xFE6
  9351                           postdec1	equ	0xFE5
  9352                           fsr1h	equ	0xFE2
  9353                           fsr1l	equ	0xFE1
  9354                           indf2	equ	0xFDF
  9355                           postinc2	equ	0xFDE
  9356                           postdec2	equ	0xFDD
  9357                           fsr2h	equ	0xFDA
  9358                           fsr2l	equ	0xFD9
  9359                           status	equ	0xFD8
  9360                           
  9361 ;; *************** function ___lldiv *****************
  9362 ;; Defined at:
  9363 ;;		line 8 in file "/opt/microchip/xc8/v1.32/sources/common/lldiv.c"
  9364 ;; Parameters:    Size  Location     Type
  9365 ;;  dividend        4    0[COMRAM] unsigned long 
  9366 ;;  divisor         4    4[COMRAM] unsigned long 
  9367 ;; Auto vars:     Size  Location     Type
  9368 ;;  quotient        4    8[COMRAM] unsigned long 
  9369 ;;  counter         1   12[COMRAM] unsigned char 
  9370 ;; Return value:  Size  Location     Type
  9371 ;;                  4    0[COMRAM] unsigned long 
  9372 ;; Registers used:
  9373 ;;		wreg, status,2, status,0
  9374 ;; Tracked objects:
  9375 ;;		On entry : 0/0
  9376 ;;		On exit  : 0/0
  9377 ;;		Unchanged: 0/0
  9378 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9379 ;;      Params:         8       0       0       0       0       0       0       0       0
  9380 ;;      Locals:         5       0       0       0       0       0       0       0       0
  9381 ;;      Temps:          0       0       0       0       0       0       0       0       0
  9382 ;;      Totals:        13       0       0       0       0       0       0       0       0
  9383 ;;Total ram usage:       13 bytes
  9384 ;; Hardware stack levels used:    1
  9385 ;; This function calls:
  9386 ;;		Nothing
  9387 ;; This function is called by:
  9388 ;;		_sprintf
  9389 ;; This function uses a non-reentrant model
  9390 ;;
  9391                           
  9392                           	psect	text26
  9393  003F8E                     __ptext26:
  9394                           	opt stack 0
  9395  003F8E                     ___lldiv:
  9396                           	opt stack 24
  9397                           
  9398                           ;incstack = 0
  9399  003F8E  0E00               	movlw	0
  9400  003F90  6E09               	movwf	___lldiv@quotient,c
  9401  003F92  0E00               	movlw	0
  9402  003F94  6E0A               	movwf	___lldiv@quotient+1,c
  9403  003F96  0E00               	movlw	0
  9404  003F98  6E0B               	movwf	___lldiv@quotient+2,c
  9405  003F9A  0E00               	movlw	0
  9406  003F9C  6E0C               	movwf	___lldiv@quotient+3,c
  9407  003F9E  5008               	movf	___lldiv@divisor+3,w,c
  9408  003FA0  1005               	iorwf	___lldiv@divisor,w,c
  9409  003FA2  1006               	iorwf	___lldiv@divisor+1,w,c
  9410  003FA4  1007               	iorwf	___lldiv@divisor+2,w,c
  9411  003FA6  B4D8               	btfsc	status,2,c
  9412  003FA8  D02A               	goto	i2l1278
  9413  003FAA  0E01               	movlw	1
  9414  003FAC  6E0D               	movwf	___lldiv@counter,c
  9415  003FAE  D006               	goto	i2l4416
  9416  003FB0                     i2l4414:
  9417  003FB0  90D8               	bcf	status,0,c
  9418  003FB2  3605               	rlcf	___lldiv@divisor,f,c
  9419  003FB4  3606               	rlcf	___lldiv@divisor+1,f,c
  9420  003FB6  3607               	rlcf	___lldiv@divisor+2,f,c
  9421  003FB8  3608               	rlcf	___lldiv@divisor+3,f,c
  9422  003FBA  2A0D               	incf	___lldiv@counter,f,c
  9423  003FBC                     i2l4416:
  9424  003FBC  AE08               	btfss	___lldiv@divisor+3,7,c
  9425  003FBE  D7F8               	goto	i2l4414
  9426  003FC0                     i2l4418:
  9427  003FC0  90D8               	bcf	status,0,c
  9428  003FC2  3609               	rlcf	___lldiv@quotient,f,c
  9429  003FC4  360A               	rlcf	___lldiv@quotient+1,f,c
  9430  003FC6  360B               	rlcf	___lldiv@quotient+2,f,c
  9431  003FC8  360C               	rlcf	___lldiv@quotient+3,f,c
  9432  003FCA  5005               	movf	___lldiv@divisor,w,c
  9433  003FCC  5C01               	subwf	___lldiv@dividend,w,c
  9434  003FCE  5006               	movf	___lldiv@divisor+1,w,c
  9435  003FD0  5802               	subwfb	___lldiv@dividend+1,w,c
  9436  003FD2  5007               	movf	___lldiv@divisor+2,w,c
  9437  003FD4  5803               	subwfb	___lldiv@dividend+2,w,c
  9438  003FD6  5008               	movf	___lldiv@divisor+3,w,c
  9439  003FD8  5804               	subwfb	___lldiv@dividend+3,w,c
  9440  003FDA  A0D8               	btfss	status,0,c
  9441  003FDC  D009               	goto	i2l4426
  9442  003FDE  5005               	movf	___lldiv@divisor,w,c
  9443  003FE0  5E01               	subwf	___lldiv@dividend,f,c
  9444  003FE2  5006               	movf	___lldiv@divisor+1,w,c
  9445  003FE4  5A02               	subwfb	___lldiv@dividend+1,f,c
  9446  003FE6  5007               	movf	___lldiv@divisor+2,w,c
  9447  003FE8  5A03               	subwfb	___lldiv@dividend+2,f,c
  9448  003FEA  5008               	movf	___lldiv@divisor+3,w,c
  9449  003FEC  5A04               	subwfb	___lldiv@dividend+3,f,c
  9450  003FEE  8009               	bsf	___lldiv@quotient,0,c
  9451  003FF0                     i2l4426:
  9452  003FF0  90D8               	bcf	status,0,c
  9453  003FF2  3208               	rrcf	___lldiv@divisor+3,f,c
  9454  003FF4  3207               	rrcf	___lldiv@divisor+2,f,c
  9455  003FF6  3206               	rrcf	___lldiv@divisor+1,f,c
  9456  003FF8  3205               	rrcf	___lldiv@divisor,f,c
  9457  003FFA  2E0D               	decfsz	___lldiv@counter,f,c
  9458  003FFC  D7E1               	goto	i2l4418
  9459  003FFE                     i2l1278:
  9460  003FFE  C009  F001         	movff	___lldiv@quotient,?___lldiv
  9461  004002  C00A  F002         	movff	___lldiv@quotient+1,?___lldiv+1
  9462  004006  C00B  F003         	movff	___lldiv@quotient+2,?___lldiv+2
  9463  00400A  C00C  F004         	movff	___lldiv@quotient+3,?___lldiv+3
  9464  00400E  0012               	return	
  9465  004010                     __end_of___lldiv:
  9466                           	opt stack 0
  9467                           tosu	equ	0xFFF
  9468                           tosh	equ	0xFFE
  9469                           tosl	equ	0xFFD
  9470                           pclatu	equ	0xFFB
  9471                           pclath	equ	0xFFA
  9472                           tblptru	equ	0xFF8
  9473                           tblptrh	equ	0xFF7
  9474                           tblptrl	equ	0xFF6
  9475                           tablat	equ	0xFF5
  9476                           prodh	equ	0xFF4
  9477                           prodl	equ	0xFF3
  9478                           intcon	equ	0xFF2
  9479                           intcon2	equ	0xFF1
  9480                           indf0	equ	0xFEF
  9481                           postinc0	equ	0xFEE
  9482                           fsr0h	equ	0xFEA
  9483                           fsr0l	equ	0xFE9
  9484                           wreg	equ	0xFE8
  9485                           postinc1	equ	0xFE6
  9486                           postdec1	equ	0xFE5
  9487                           fsr1h	equ	0xFE2
  9488                           fsr1l	equ	0xFE1
  9489                           indf2	equ	0xFDF
  9490                           postinc2	equ	0xFDE
  9491                           postdec2	equ	0xFDD
  9492                           fsr2h	equ	0xFDA
  9493                           fsr2l	equ	0xFD9
  9494                           status	equ	0xFD8
  9495                           
  9496 ;; *************** function ___fttol *****************
  9497 ;; Defined at:
  9498 ;;		line 44 in file "/opt/microchip/xc8/v1.32/sources/common/fttol.c"
  9499 ;; Parameters:    Size  Location     Type
  9500 ;;  f1              3   35[COMRAM] float 
  9501 ;; Auto vars:     Size  Location     Type
  9502 ;;  lval            4   45[COMRAM] unsigned long 
  9503 ;;  exp1            1   49[COMRAM] unsigned char 
  9504 ;;  sign1           1   44[COMRAM] unsigned char 
  9505 ;; Return value:  Size  Location     Type
  9506 ;;                  4   35[COMRAM] long 
  9507 ;; Registers used:
  9508 ;;		wreg, status,2, status,0
  9509 ;; Tracked objects:
  9510 ;;		On entry : 0/0
  9511 ;;		On exit  : 0/0
  9512 ;;		Unchanged: 0/0
  9513 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9514 ;;      Params:         4       0       0       0       0       0       0       0       0
  9515 ;;      Locals:         6       0       0       0       0       0       0       0       0
  9516 ;;      Temps:          5       0       0       0       0       0       0       0       0
  9517 ;;      Totals:        15       0       0       0       0       0       0       0       0
  9518 ;;Total ram usage:       15 bytes
  9519 ;; Hardware stack levels used:    1
  9520 ;; This function calls:
  9521 ;;		Nothing
  9522 ;; This function is called by:
  9523 ;;		_printTemp
  9524 ;;		_sprintf
  9525 ;; This function uses a non-reentrant model
  9526 ;;
  9527                           
  9528                           	psect	text27
  9529  00395E                     __ptext27:
  9530                           	opt stack 0
  9531  00395E                     ___fttol:
  9532                           	opt stack 24
  9533                           
  9534                           ;incstack = 0
  9535  00395E  C026  F028         	movff	___fttol@f1+2,??___fttol
  9536  003962  6A29               	clrf	(??___fttol+1)& (0+255),c
  9537  003964  6A2A               	clrf	(??___fttol+2)& (0+255),c
  9538  003966  3425               	rlcf	___fttol@f1+1,w,c
  9539  003968  3628               	rlcf	??___fttol& (0+255),f,c
  9540  00396A  E301               	bnc	u429_41
  9541  00396C  8029               	bsf	(??___fttol+1)& (0+255),0,c
  9542  00396E                     u429_41:
  9543  00396E  5028               	movf	??___fttol,w,c
  9544  003970  6E32               	movwf	___fttol@exp1,c
  9545  003972  6632               	tstfsz	___fttol@exp1& (0+255),c
  9546  003974  D001               	goto	i2l4368
  9547  003976  D038               	goto	i2u434_40
  9548  003978                     i2l4368:
  9549  003978  0E17               	movlw	23
  9550  00397A  6E28               	movwf	??___fttol& (0+255),c
  9551  00397C  C024  F029         	movff	___fttol@f1,??___fttol+1
  9552  003980  C025  F02A         	movff	___fttol@f1+1,??___fttol+2
  9553  003984  C026  F02B         	movff	___fttol@f1+2,??___fttol+3
  9554  003988  2828               	incf	??___fttol,w,c
  9555  00398A  6E2C               	movwf	(??___fttol+4)& (0+255),c
  9556  00398C  D004               	goto	i2u431_40
  9557  00398E                     i2u431_45:
  9558  00398E  90D8               	bcf	status,0,c
  9559  003990  322B               	rrcf	??___fttol+3,f,c
  9560  003992  322A               	rrcf	??___fttol+2,f,c
  9561  003994  3229               	rrcf	??___fttol+1,f,c
  9562  003996                     i2u431_40:
  9563  003996  2E2C               	decfsz	(??___fttol+4)& (0+255),f,c
  9564  003998  D7FA               	goto	i2u431_45
  9565  00399A  5029               	movf	??___fttol+1,w,c
  9566  00399C  6E2D               	movwf	___fttol@sign1,c
  9567  00399E  8E25               	bsf	___fttol@f1+1,7,c
  9568  0039A0  0EFF               	movlw	255
  9569  0039A2  1624               	andwf	___fttol@f1,f,c
  9570  0039A4  0EFF               	movlw	255
  9571  0039A6  1625               	andwf	___fttol@f1+1,f,c
  9572  0039A8  0E00               	movlw	0
  9573  0039AA  1626               	andwf	___fttol@f1+2,f,c
  9574  0039AC  5024               	movf	___fttol@f1,w,c
  9575  0039AE  6E2E               	movwf	___fttol@lval,c
  9576  0039B0  5025               	movf	___fttol@f1+1,w,c
  9577  0039B2  6E2F               	movwf	___fttol@lval+1,c
  9578  0039B4  5026               	movf	___fttol@f1+2,w,c
  9579  0039B6  6E30               	movwf	___fttol@lval+2,c
  9580  0039B8  6A31               	clrf	___fttol@lval+3,c
  9581  0039BA  0E8E               	movlw	142
  9582  0039BC  5E32               	subwf	___fttol@exp1,f,c
  9583  0039BE  AE32               	btfss	___fttol@exp1,7,c
  9584  0039C0  D010               	goto	i2l4390
  9585  0039C2  5032               	movf	___fttol@exp1,w,c
  9586  0039C4  0A80               	xorlw	128
  9587  0039C6  6E28               	movwf	??___fttol& (0+255),c
  9588  0039C8  0EF1               	movlw	241
  9589  0039CA  0A80               	xorlw	128
  9590  0039CC  5C28               	subwf	??___fttol,w,c
  9591  0039CE  A0D8               	btfss	status,0,c
  9592  0039D0  D00B               	goto	i2u434_40
  9593  0039D2                     i2l4386:
  9594  0039D2  90D8               	bcf	status,0,c
  9595  0039D4  3231               	rrcf	___fttol@lval+3,f,c
  9596  0039D6  3230               	rrcf	___fttol@lval+2,f,c
  9597  0039D8  322F               	rrcf	___fttol@lval+1,f,c
  9598  0039DA  322E               	rrcf	___fttol@lval,f,c
  9599  0039DC  3E32               	incfsz	___fttol@exp1,f,c
  9600  0039DE  D7F9               	goto	i2l4386
  9601  0039E0  D014               	goto	i2l4400
  9602  0039E2                     i2l4390:
  9603  0039E2  0E17               	movlw	23
  9604  0039E4  6432               	cpfsgt	___fttol@exp1,c
  9605  0039E6  D00F               	goto	i2l4398
  9606  0039E8                     i2u434_40:
  9607  0039E8  0E00               	movlw	0
  9608  0039EA  6E24               	movwf	?___fttol,c
  9609  0039EC  0E00               	movlw	0
  9610  0039EE  6E25               	movwf	?___fttol+1,c
  9611  0039F0  0E00               	movlw	0
  9612  0039F2  6E26               	movwf	?___fttol+2,c
  9613  0039F4  0E00               	movlw	0
  9614  0039F6  6E27               	movwf	?___fttol+3,c
  9615  0039F8  D01B               	goto	i2l1234
  9616  0039FA                     i2l4396:
  9617  0039FA  90D8               	bcf	status,0,c
  9618  0039FC  362E               	rlcf	___fttol@lval,f,c
  9619  0039FE  362F               	rlcf	___fttol@lval+1,f,c
  9620  003A00  3630               	rlcf	___fttol@lval+2,f,c
  9621  003A02  3631               	rlcf	___fttol@lval+3,f,c
  9622  003A04  0632               	decf	___fttol@exp1,f,c
  9623  003A06                     i2l4398:
  9624  003A06  6632               	tstfsz	___fttol@exp1,c
  9625  003A08  D7F8               	goto	i2l4396
  9626  003A0A                     i2l4400:
  9627  003A0A  502D               	movf	___fttol@sign1,w,c
  9628  003A0C  B4D8               	btfsc	status,2,c
  9629  003A0E  D008               	goto	i2l4404
  9630  003A10  1E31               	comf	___fttol@lval+3,f,c
  9631  003A12  1E30               	comf	___fttol@lval+2,f,c
  9632  003A14  1E2F               	comf	___fttol@lval+1,f,c
  9633  003A16  6C2E               	negf	___fttol@lval,c
  9634  003A18  0E00               	movlw	0
  9635  003A1A  222F               	addwfc	___fttol@lval+1,f,c
  9636  003A1C  2230               	addwfc	___fttol@lval+2,f,c
  9637  003A1E  2231               	addwfc	___fttol@lval+3,f,c
  9638  003A20                     i2l4404:
  9639  003A20  C02E  F024         	movff	___fttol@lval,?___fttol
  9640  003A24  C02F  F025         	movff	___fttol@lval+1,?___fttol+1
  9641  003A28  C030  F026         	movff	___fttol@lval+2,?___fttol+2
  9642  003A2C  C031  F027         	movff	___fttol@lval+3,?___fttol+3
  9643  003A30                     i2l1234:
  9644  003A30  0012               	return	
  9645  003A32                     __end_of___fttol:
  9646                           	opt stack 0
  9647                           tosu	equ	0xFFF
  9648                           tosh	equ	0xFFE
  9649                           tosl	equ	0xFFD
  9650                           pclatu	equ	0xFFB
  9651                           pclath	equ	0xFFA
  9652                           tblptru	equ	0xFF8
  9653                           tblptrh	equ	0xFF7
  9654                           tblptrl	equ	0xFF6
  9655                           tablat	equ	0xFF5
  9656                           prodh	equ	0xFF4
  9657                           prodl	equ	0xFF3
  9658                           intcon	equ	0xFF2
  9659                           intcon2	equ	0xFF1
  9660                           indf0	equ	0xFEF
  9661                           postinc0	equ	0xFEE
  9662                           fsr0h	equ	0xFEA
  9663                           fsr0l	equ	0xFE9
  9664                           wreg	equ	0xFE8
  9665                           postinc1	equ	0xFE6
  9666                           postdec1	equ	0xFE5
  9667                           fsr1h	equ	0xFE2
  9668                           fsr1l	equ	0xFE1
  9669                           indf2	equ	0xFDF
  9670                           postinc2	equ	0xFDE
  9671                           postdec2	equ	0xFDD
  9672                           fsr2h	equ	0xFDA
  9673                           fsr2l	equ	0xFD9
  9674                           status	equ	0xFD8
  9675                           
  9676 ;; *************** function ___ftsub *****************
  9677 ;; Defined at:
  9678 ;;		line 20 in file "/opt/microchip/xc8/v1.32/sources/common/ftsub.c"
  9679 ;; Parameters:    Size  Location     Type
  9680 ;;  f1              3   62[COMRAM] float 
  9681 ;;  f2              3   65[COMRAM] float 
  9682 ;; Auto vars:     Size  Location     Type
  9683 ;;		None
  9684 ;; Return value:  Size  Location     Type
  9685 ;;                  3   62[COMRAM] float 
  9686 ;; Registers used:
  9687 ;;		wreg, status,2, status,0, cstack
  9688 ;; Tracked objects:
  9689 ;;		On entry : 0/0
  9690 ;;		On exit  : 0/0
  9691 ;;		Unchanged: 0/0
  9692 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9693 ;;      Params:         6       0       0       0       0       0       0       0       0
  9694 ;;      Locals:         0       0       0       0       0       0       0       0       0
  9695 ;;      Temps:          0       0       0       0       0       0       0       0       0
  9696 ;;      Totals:         6       0       0       0       0       0       0       0       0
  9697 ;;Total ram usage:        6 bytes
  9698 ;; Hardware stack levels used:    1
  9699 ;; Hardware stack levels required when called:    2
  9700 ;; This function calls:
  9701 ;;		___ftadd
  9702 ;; This function is called by:
  9703 ;;		_sprintf
  9704 ;; This function uses a non-reentrant model
  9705 ;;
  9706                           
  9707                           	psect	text28
  9708  0044EE                     __ptext28:
  9709                           	opt stack 0
  9710  0044EE                     ___ftsub:
  9711                           	opt stack 22
  9712                           
  9713                           ;incstack = 0
  9714  0044EE  0E00               	movlw	0
  9715  0044F0  1A42               	xorwf	___ftsub@f2,f,c
  9716  0044F2  0E00               	movlw	0
  9717  0044F4  1A43               	xorwf	___ftsub@f2+1,f,c
  9718  0044F6  0E80               	movlw	128
  9719  0044F8  1A44               	xorwf	___ftsub@f2+2,f,c
  9720  0044FA  C03F  F033         	movff	___ftsub@f1,___ftadd@f1
  9721  0044FE  C040  F034         	movff	___ftsub@f1+1,___ftadd@f1+1
  9722  004502  C041  F035         	movff	___ftsub@f1+2,___ftadd@f1+2
  9723  004506  C042  F036         	movff	___ftsub@f2,___ftadd@f2
  9724  00450A  C043  F037         	movff	___ftsub@f2+1,___ftadd@f2+1
  9725  00450E  C044  F038         	movff	___ftsub@f2+2,___ftadd@f2+2
  9726  004512  EC44  F017         	call	___ftadd	;wreg free
  9727  004516  C033  F03F         	movff	?___ftadd,?___ftsub
  9728  00451A  C034  F040         	movff	?___ftadd+1,?___ftsub+1
  9729  00451E  C035  F041         	movff	?___ftadd+2,?___ftsub+2
  9730  004522  0012               	return	
  9731  004524                     __end_of___ftsub:
  9732                           	opt stack 0
  9733                           tosu	equ	0xFFF
  9734                           tosh	equ	0xFFE
  9735                           tosl	equ	0xFFD
  9736                           pclatu	equ	0xFFB
  9737                           pclath	equ	0xFFA
  9738                           tblptru	equ	0xFF8
  9739                           tblptrh	equ	0xFF7
  9740                           tblptrl	equ	0xFF6
  9741                           tablat	equ	0xFF5
  9742                           prodh	equ	0xFF4
  9743                           prodl	equ	0xFF3
  9744                           intcon	equ	0xFF2
  9745                           intcon2	equ	0xFF1
  9746                           indf0	equ	0xFEF
  9747                           postinc0	equ	0xFEE
  9748                           fsr0h	equ	0xFEA
  9749                           fsr0l	equ	0xFE9
  9750                           wreg	equ	0xFE8
  9751                           postinc1	equ	0xFE6
  9752                           postdec1	equ	0xFE5
  9753                           fsr1h	equ	0xFE2
  9754                           fsr1l	equ	0xFE1
  9755                           indf2	equ	0xFDF
  9756                           postinc2	equ	0xFDE
  9757                           postdec2	equ	0xFDD
  9758                           fsr2h	equ	0xFDA
  9759                           fsr2l	equ	0xFD9
  9760                           status	equ	0xFD8
  9761                           
  9762 ;; *************** function ___ftneg *****************
  9763 ;; Defined at:
  9764 ;;		line 15 in file "/opt/microchip/xc8/v1.32/sources/common/ftneg.c"
  9765 ;; Parameters:    Size  Location     Type
  9766 ;;  f1              3    0[COMRAM] float 
  9767 ;; Auto vars:     Size  Location     Type
  9768 ;;		None
  9769 ;; Return value:  Size  Location     Type
  9770 ;;                  3    0[COMRAM] float 
  9771 ;; Registers used:
  9772 ;;		wreg, status,2, status,0
  9773 ;; Tracked objects:
  9774 ;;		On entry : 0/0
  9775 ;;		On exit  : 0/0
  9776 ;;		Unchanged: 0/0
  9777 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9778 ;;      Params:         3       0       0       0       0       0       0       0       0
  9779 ;;      Locals:         0       0       0       0       0       0       0       0       0
  9780 ;;      Temps:          0       0       0       0       0       0       0       0       0
  9781 ;;      Totals:         3       0       0       0       0       0       0       0       0
  9782 ;;Total ram usage:        3 bytes
  9783 ;; Hardware stack levels used:    1
  9784 ;; This function calls:
  9785 ;;		Nothing
  9786 ;; This function is called by:
  9787 ;;		_sprintf
  9788 ;; This function uses a non-reentrant model
  9789 ;;
  9790                           
  9791                           	psect	text29
  9792  00457A                     __ptext29:
  9793                           	opt stack 0
  9794  00457A                     ___ftneg:
  9795                           	opt stack 24
  9796                           
  9797                           ;incstack = 0
  9798  00457A  0E7F               	movlw	127
  9799  00457C  1403               	andwf	___ftneg@f1+2,w,c
  9800  00457E  1002               	iorwf	___ftneg@f1+1,w,c
  9801  004580  1001               	iorwf	___ftneg@f1,w,c
  9802  004582  B4D8               	btfsc	status,2,c
  9803  004584  D006               	goto	i2l1224
  9804  004586  0E00               	movlw	0
  9805  004588  1A01               	xorwf	___ftneg@f1,f,c
  9806  00458A  0E00               	movlw	0
  9807  00458C  1A02               	xorwf	___ftneg@f1+1,f,c
  9808  00458E  0E80               	movlw	128
  9809  004590  1A03               	xorwf	___ftneg@f1+2,f,c
  9810  004592                     i2l1224:
  9811  004592  C001  F001         	movff	___ftneg@f1,?___ftneg
  9812  004596  C002  F002         	movff	___ftneg@f1+1,?___ftneg+1
  9813  00459A  C003  F003         	movff	___ftneg@f1+2,?___ftneg+2
  9814  00459E  0012               	return	
  9815  0045A0                     __end_of___ftneg:
  9816                           	opt stack 0
  9817                           tosu	equ	0xFFF
  9818                           tosh	equ	0xFFE
  9819                           tosl	equ	0xFFD
  9820                           pclatu	equ	0xFFB
  9821                           pclath	equ	0xFFA
  9822                           tblptru	equ	0xFF8
  9823                           tblptrh	equ	0xFF7
  9824                           tblptrl	equ	0xFF6
  9825                           tablat	equ	0xFF5
  9826                           prodh	equ	0xFF4
  9827                           prodl	equ	0xFF3
  9828                           intcon	equ	0xFF2
  9829                           intcon2	equ	0xFF1
  9830                           indf0	equ	0xFEF
  9831                           postinc0	equ	0xFEE
  9832                           fsr0h	equ	0xFEA
  9833                           fsr0l	equ	0xFE9
  9834                           wreg	equ	0xFE8
  9835                           postinc1	equ	0xFE6
  9836                           postdec1	equ	0xFE5
  9837                           fsr1h	equ	0xFE2
  9838                           fsr1l	equ	0xFE1
  9839                           indf2	equ	0xFDF
  9840                           postinc2	equ	0xFDE
  9841                           postdec2	equ	0xFDD
  9842                           fsr2h	equ	0xFDA
  9843                           fsr2l	equ	0xFD9
  9844                           status	equ	0xFD8
  9845                           
  9846 ;; *************** function ___ftge *****************
  9847 ;; Defined at:
  9848 ;;		line 4 in file "/opt/microchip/xc8/v1.32/sources/common/ftge.c"
  9849 ;; Parameters:    Size  Location     Type
  9850 ;;  ff1             3    0[COMRAM] float 
  9851 ;;  ff2             3    3[COMRAM] float 
  9852 ;; Auto vars:     Size  Location     Type
  9853 ;;		None
  9854 ;; Return value:  Size  Location     Type
  9855 ;;		None               void
  9856 ;; Registers used:
  9857 ;;		wreg, status,2, status,0
  9858 ;; Tracked objects:
  9859 ;;		On entry : 0/0
  9860 ;;		On exit  : 0/0
  9861 ;;		Unchanged: 0/0
  9862 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9863 ;;      Params:         6       0       0       0       0       0       0       0       0
  9864 ;;      Locals:         0       0       0       0       0       0       0       0       0
  9865 ;;      Temps:          3       0       0       0       0       0       0       0       0
  9866 ;;      Totals:         9       0       0       0       0       0       0       0       0
  9867 ;;Total ram usage:        9 bytes
  9868 ;; Hardware stack levels used:    1
  9869 ;; This function calls:
  9870 ;;		Nothing
  9871 ;; This function is called by:
  9872 ;;		_sprintf
  9873 ;; This function uses a non-reentrant model
  9874 ;;
  9875                           
  9876                           	psect	text30
  9877  003D58                     __ptext30:
  9878                           	opt stack 0
  9879  003D58                     ___ftge:
  9880                           	opt stack 24
  9881                           
  9882                           ;incstack = 0
  9883  003D58  AE03               	btfss	___ftge@ff1+2,7,c
  9884  003D5A  D016               	goto	i2l4344
  9885  003D5C  C001  F007         	movff	___ftge@ff1,??___ftge
  9886  003D60  C002  F008         	movff	___ftge@ff1+1,??___ftge+1
  9887  003D64  C003  F009         	movff	___ftge@ff1+2,??___ftge+2
  9888  003D68  1E07               	comf	??___ftge,f,c
  9889  003D6A  1E08               	comf	??___ftge+1,f,c
  9890  003D6C  1E09               	comf	??___ftge+2,f,c
  9891  003D6E  2A07               	incf	??___ftge,f,c
  9892  003D70  0E00               	movlw	0
  9893  003D72  2208               	addwfc	??___ftge+1,f,c
  9894  003D74  2209               	addwfc	??___ftge+2,f,c
  9895  003D76  0E00               	movlw	0
  9896  003D78  2407               	addwf	??___ftge,w,c
  9897  003D7A  6E01               	movwf	___ftge@ff1,c
  9898  003D7C  0E00               	movlw	0
  9899  003D7E  2008               	addwfc	??___ftge+1,w,c
  9900  003D80  6E02               	movwf	___ftge@ff1+1,c
  9901  003D82  0E80               	movlw	128
  9902  003D84  2009               	addwfc	??___ftge+2,w,c
  9903  003D86  6E03               	movwf	___ftge@ff1+2,c
  9904  003D88                     i2l4344:
  9905  003D88  AE06               	btfss	___ftge@ff2+2,7,c
  9906  003D8A  D016               	goto	i2l4348
  9907  003D8C  C004  F007         	movff	___ftge@ff2,??___ftge
  9908  003D90  C005  F008         	movff	___ftge@ff2+1,??___ftge+1
  9909  003D94  C006  F009         	movff	___ftge@ff2+2,??___ftge+2
  9910  003D98  1E07               	comf	??___ftge,f,c
  9911  003D9A  1E08               	comf	??___ftge+1,f,c
  9912  003D9C  1E09               	comf	??___ftge+2,f,c
  9913  003D9E  2A07               	incf	??___ftge,f,c
  9914  003DA0  0E00               	movlw	0
  9915  003DA2  2208               	addwfc	??___ftge+1,f,c
  9916  003DA4  2209               	addwfc	??___ftge+2,f,c
  9917  003DA6  0E00               	movlw	0
  9918  003DA8  2407               	addwf	??___ftge,w,c
  9919  003DAA  6E04               	movwf	___ftge@ff2,c
  9920  003DAC  0E00               	movlw	0
  9921  003DAE  2008               	addwfc	??___ftge+1,w,c
  9922  003DB0  6E05               	movwf	___ftge@ff2+1,c
  9923  003DB2  0E80               	movlw	128
  9924  003DB4  2009               	addwfc	??___ftge+2,w,c
  9925  003DB6  6E06               	movwf	___ftge@ff2+2,c
  9926  003DB8                     i2l4348:
  9927  003DB8  0E00               	movlw	0
  9928  003DBA  1A01               	xorwf	___ftge@ff1,f,c
  9929  003DBC  0E00               	movlw	0
  9930  003DBE  1A02               	xorwf	___ftge@ff1+1,f,c
  9931  003DC0  0E80               	movlw	128
  9932  003DC2  1A03               	xorwf	___ftge@ff1+2,f,c
  9933  003DC4  0E00               	movlw	0
  9934  003DC6  1A04               	xorwf	___ftge@ff2,f,c
  9935  003DC8  0E00               	movlw	0
  9936  003DCA  1A05               	xorwf	___ftge@ff2+1,f,c
  9937  003DCC  0E80               	movlw	128
  9938  003DCE  1A06               	xorwf	___ftge@ff2+2,f,c
  9939  003DD0  5004               	movf	___ftge@ff2,w,c
  9940  003DD2  5C01               	subwf	___ftge@ff1,w,c
  9941  003DD4  5005               	movf	___ftge@ff2+1,w,c
  9942  003DD6  5802               	subwfb	___ftge@ff1+1,w,c
  9943  003DD8  5006               	movf	___ftge@ff2+2,w,c
  9944  003DDA  5803               	subwfb	___ftge@ff1+2,w,c
  9945  003DDC  B0D8               	btfsc	status,0,c
  9946  003DDE  D002               	goto	i2l4354
  9947  003DE0  90D8               	bcf	status,0,c
  9948  003DE2  D001               	goto	i2l1208
  9949  003DE4                     i2l4354:
  9950  003DE4  80D8               	bsf	status,0,c
  9951  003DE6                     i2l1208:
  9952  003DE6  0012               	return	
  9953  003DE8                     __end_of___ftge:
  9954                           	opt stack 0
  9955                           tosu	equ	0xFFF
  9956                           tosh	equ	0xFFE
  9957                           tosl	equ	0xFFD
  9958                           pclatu	equ	0xFFB
  9959                           pclath	equ	0xFFA
  9960                           tblptru	equ	0xFF8
  9961                           tblptrh	equ	0xFF7
  9962                           tblptrl	equ	0xFF6
  9963                           tablat	equ	0xFF5
  9964                           prodh	equ	0xFF4
  9965                           prodl	equ	0xFF3
  9966                           intcon	equ	0xFF2
  9967                           intcon2	equ	0xFF1
  9968                           indf0	equ	0xFEF
  9969                           postinc0	equ	0xFEE
  9970                           fsr0h	equ	0xFEA
  9971                           fsr0l	equ	0xFE9
  9972                           wreg	equ	0xFE8
  9973                           postinc1	equ	0xFE6
  9974                           postdec1	equ	0xFE5
  9975                           fsr1h	equ	0xFE2
  9976                           fsr1l	equ	0xFE1
  9977                           indf2	equ	0xFDF
  9978                           postinc2	equ	0xFDE
  9979                           postdec2	equ	0xFDD
  9980                           fsr2h	equ	0xFDA
  9981                           fsr2l	equ	0xFD9
  9982                           status	equ	0xFD8
  9983                           
  9984 ;; *************** function _getTemp *****************
  9985 ;; Defined at:
  9986 ;;		line 45 in file "temp.c"
  9987 ;; Parameters:    Size  Location     Type
  9988 ;;		None
  9989 ;; Auto vars:     Size  Location     Type
  9990 ;;  oldTempsTemp    9   62[COMRAM] float [3]
  9991 ;;  tmp             3   83[COMRAM] float 
  9992 ;;  total           3   74[COMRAM] float 
  9993 ;;  cnt             1   86[COMRAM] unsigned char 
  9994 ;; Return value:  Size  Location     Type
  9995 ;;                  3  369[COMRAM] float 
  9996 ;; Registers used:
  9997 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  9998 ;; Tracked objects:
  9999 ;;		On entry : 0/0
 10000 ;;		On exit  : 0/0
 10001 ;;		Unchanged: 0/0
 10002 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10003 ;;      Params:         0       0       0       0       0       0       0       0       0
 10004 ;;      Locals:        25       0       0       0       0       0       0       0       0
 10005 ;;      Temps:          0       0       0       0       0       0       0       0       0
 10006 ;;      Totals:        25       0       0       0       0       0       0       0       0
 10007 ;;Total ram usage:       25 bytes
 10008 ;; Hardware stack levels used:    1
 10009 ;; Hardware stack levels required when called:    2
 10010 ;; This function calls:
 10011 ;;		___ftadd
 10012 ;;		___ftdiv
 10013 ;;		___ftmul
 10014 ;;		___lwtoft
 10015 ;;		___wmul
 10016 ;; This function is called by:
 10017 ;;		_isr
 10018 ;; This function uses a non-reentrant model
 10019 ;;
 10020                           
 10021                           	psect	text31
 10022  002024                     __ptext31:
 10023                           	opt stack 0
 10024  002024                     _getTemp:
 10025                           	opt stack 24
 10026                           
 10027                           ;temp.c: 47: float oldTempsTemp[3];
 10028                           ;temp.c: 48: uint8_t cnt;
 10029                           ;temp.c: 49: for (cnt = 3; cnt > 0; cnt--)
 10030                           
 10031                           ;incstack = 0
 10032  002024  0E03               	movlw	3
 10033  002026  6E57               	movwf	getTemp@cnt,c
 10034  002028  D024               	goto	L22
 10035  00202A                     i2l5200:
 10036                           
 10037                           ;temp.c: 50: {
 10038                           ;temp.c: 51: oldTempsTemp[cnt - 1] = oldTemps[cnt];
 10039  00202A  5057               	movf	getTemp@cnt,w,c
 10040  00202C  0D03               	mullw	3
 10041  00202E  0101               	movlb	1	; () banked
 10042  002030  0E3E               	movlw	low _oldTemps
 10043  002032  24F3               	addwf	prodl,w,c
 10044  002034  6ED9               	movwf	fsr2l,c
 10045  002036  0101               	movlb	1	; () banked
 10046  002038  0E01               	movlw	high _oldTemps
 10047  00203A  20F4               	addwfc	prodh,w,c
 10048  00203C  6EDA               	movwf	fsr2h,c
 10049  00203E  0EFF               	movlw	255
 10050  002040  2457               	addwf	getTemp@cnt,w,c
 10051  002042  6E0F               	movwf	___wmul@multiplier,c
 10052  002044  6A10               	clrf	___wmul@multiplier+1,c
 10053  002046  0EFF               	movlw	255
 10054  002048  2210               	addwfc	___wmul@multiplier+1,f,c
 10055  00204A  0E00               	movlw	0
 10056  00204C  6E12               	movwf	___wmul@multiplicand+1,c
 10057  00204E  0E03               	movlw	3
 10058  002050  6E11               	movwf	___wmul@multiplicand,c
 10059  002052  ECD0  F022         	call	___wmul	;wreg free
 10060  002056  0E3F               	movlw	low getTemp@oldTempsTemp
 10061  002058  240F               	addwf	?___wmul,w,c
 10062  00205A  6EE1               	movwf	fsr1l,c
 10063  00205C  0E00               	movlw	high getTemp@oldTempsTemp
 10064  00205E  2010               	addwfc	?___wmul+1,w,c
 10065  002060  6EE2               	movwf	fsr1h,c
 10066  002062  CFDE FFE6          	movff	postinc2,postinc1
 10067  002066  CFDE FFE6          	movff	postinc2,postinc1
 10068  00206A  CFDE FFE5          	movff	postinc2,postdec1
 10069  00206E  52E5               	movf	postdec1,f,c
 10070  002070  0657               	decf	getTemp@cnt,f,c
 10071  002072                     L22:
 10072  002072  6657               	tstfsz	getTemp@cnt,c
 10073  002074  D7DA               	goto	i2l5200
 10074                           
 10075                           ;temp.c: 52: }
 10076                           ;temp.c: 53: GO = 1;
 10077  002076  82C2               	bsf	4034,1,c	;volatile
 10078  002078                     i2l372:
 10079  002078  B2C2               	btfsc	4034,1,c	;volatile
 10080  00207A  D7FE               	goto	i2l372
 10081                           
 10082                           ;temp.c: 55: float tmp;
 10083                           ;temp.c: 57: tmp = ((double).4 - (((double)5.0)/((((double)12.0) + ((double)1.0))/((doub
      +                          le)1.0))));
 10084  00207C  0E10               	movlw	16
 10085  00207E  6E54               	movwf	getTemp@tmp,c
 10086  002080  0E7C               	movlw	124
 10087  002082  6E55               	movwf	getTemp@tmp+1,c
 10088  002084  0E3C               	movlw	60
 10089  002086  6E56               	movwf	getTemp@tmp+2,c
 10090                           
 10091                           ;temp.c: 58: tmp = (ADRES * ((double)5.0)) / ((double)1024.0);
 10092  002088  0E00               	movlw	0
 10093  00208A  6E18               	movwf	___ftmul@f2,c
 10094  00208C  0EA0               	movlw	160
 10095  00208E  6E19               	movwf	___ftmul@f2+1,c
 10096  002090  0E40               	movlw	64
 10097  002092  6E1A               	movwf	___ftmul@f2+2,c
 10098  002094  CFC3 F009          	movff	4035,___lwtoft@c	;volatile
 10099  002098  CFC4 F00A          	movff	4036,___lwtoft@c+1	;volatile
 10100  00209C  ECE3  F022         	call	___lwtoft	;wreg free
 10101  0020A0  C009  F015         	movff	?___lwtoft,___ftmul@f1
 10102  0020A4  C00A  F016         	movff	?___lwtoft+1,___ftmul@f1+1
 10103  0020A8  C00B  F017         	movff	?___lwtoft+2,___ftmul@f1+2
 10104  0020AC  EC61  F01B         	call	___ftmul	;wreg free
 10105  0020B0  C015  F024         	movff	?___ftmul,___ftdiv@f1
 10106  0020B4  C016  F025         	movff	?___ftmul+1,___ftdiv@f1+1
 10107  0020B8  C017  F026         	movff	?___ftmul+2,___ftdiv@f1+2
 10108  0020BC  0E00               	movlw	0
 10109  0020BE  6E27               	movwf	___ftdiv@f2,c
 10110  0020C0  0E80               	movlw	128
 10111  0020C2  6E28               	movwf	___ftdiv@f2+1,c
 10112  0020C4  0E44               	movlw	68
 10113  0020C6  6E29               	movwf	___ftdiv@f2+2,c
 10114  0020C8  EC44  F01C         	call	___ftdiv	;wreg free
 10115  0020CC  C024  F054         	movff	?___ftdiv,getTemp@tmp
 10116  0020D0  C025  F055         	movff	?___ftdiv+1,getTemp@tmp+1
 10117  0020D4  C026  F056         	movff	?___ftdiv+2,getTemp@tmp+2
 10118                           
 10119                           ;temp.c: 59: tmp = ADRES;
 10120  0020D8  CFC3 F009          	movff	4035,___lwtoft@c	;volatile
 10121  0020DC  CFC4 F00A          	movff	4036,___lwtoft@c+1	;volatile
 10122  0020E0  ECE3  F022         	call	___lwtoft	;wreg free
 10123  0020E4  C009  F054         	movff	?___lwtoft,getTemp@tmp
 10124  0020E8  C00A  F055         	movff	?___lwtoft+1,getTemp@tmp+1
 10125  0020EC  C00B  F056         	movff	?___lwtoft+2,getTemp@tmp+2
 10126                           
 10127                           ;temp.c: 60: if (tempMenu.state == 0)
 10128  0020F0  0100               	movlb	0	; () banked
 10129  0020F2  67E0               	tstfsz	_tempMenu& (0+255),b
 10130  0020F4  D059               	goto	i2l5216
 10131                           
 10132                           ; BSR set to: 0
 10133                           ;temp.c: 61: {
 10134                           ;temp.c: 62: tmp = (( ((double)ADRES) * ((double)5.0)/((double)1024.0) / (((double)56.0)
      +                          /((double)10.0)) / ((double)0.0195) - (((double).4 - (((double)5.0)/((((double)12.0) + (
      +                          (double)1.0))/((double)1.0)))) / ((double)0.0195)) ));
 10135  0020F6  0E00               	movlw	0
 10136  0020F8  6E27               	movwf	___ftdiv@f2,c
 10137  0020FA  0E80               	movlw	128
 10138  0020FC  6E28               	movwf	___ftdiv@f2+1,c
 10139  0020FE  0E44               	movlw	68
 10140  002100  6E29               	movwf	___ftdiv@f2+2,c
 10141  002102  0E00               	movlw	0
 10142  002104  6E18               	movwf	___ftmul@f2,c
 10143  002106  0EA0               	movlw	160
 10144  002108  6E19               	movwf	___ftmul@f2+1,c
 10145  00210A  0E40               	movlw	64
 10146  00210C  6E1A               	movwf	___ftmul@f2+2,c
 10147  00210E  CFC3 F009          	movff	4035,___lwtoft@c	;volatile
 10148  002112  CFC4 F00A          	movff	4036,___lwtoft@c+1	;volatile
 10149  002116  ECE3  F022         	call	___lwtoft	;wreg free
 10150  00211A  C009  F015         	movff	?___lwtoft,___ftmul@f1
 10151  00211E  C00A  F016         	movff	?___lwtoft+1,___ftmul@f1+1
 10152  002122  C00B  F017         	movff	?___lwtoft+2,___ftmul@f1+2
 10153  002126  EC61  F01B         	call	___ftmul	;wreg free
 10154  00212A  C015  F024         	movff	?___ftmul,___ftdiv@f1
 10155  00212E  C016  F025         	movff	?___ftmul+1,___ftdiv@f1+1
 10156  002132  C017  F026         	movff	?___ftmul+2,___ftdiv@f1+2
 10157  002136  EC44  F01C         	call	___ftdiv	;wreg free
 10158  00213A  C024  F04E         	movff	?___ftdiv,_getTemp$1307
 10159  00213E  C025  F04F         	movff	?___ftdiv+1,_getTemp$1307+1
 10160  002142  C026  F050         	movff	?___ftdiv+2,_getTemp$1307+2
 10161                           
 10162                           ;temp.c: 61: {
 10163                           ;temp.c: 62: tmp = (( ((double)ADRES) * ((double)5.0)/((double)1024.0) / (((double)56.0)
      +                          /((double)10.0)) / ((double)0.0195) - (((double).4 - (((double)5.0)/((((double)12.0) + (
      +                          (double)1.0))/((double)1.0)))) / ((double)0.0195)) ));
 10164  002146  0E33               	movlw	51
 10165  002148  6E27               	movwf	___ftdiv@f2,c
 10166  00214A  0EB3               	movlw	179
 10167  00214C  6E28               	movwf	___ftdiv@f2+1,c
 10168  00214E  0E40               	movlw	64
 10169  002150  6E29               	movwf	___ftdiv@f2+2,c
 10170  002152  C04E  F024         	movff	_getTemp$1307,___ftdiv@f1
 10171  002156  C04F  F025         	movff	_getTemp$1307+1,___ftdiv@f1+1
 10172  00215A  C050  F026         	movff	_getTemp$1307+2,___ftdiv@f1+2
 10173  00215E  EC44  F01C         	call	___ftdiv	;wreg free
 10174  002162  C024  F051         	movff	?___ftdiv,_getTemp$1308
 10175  002166  C025  F052         	movff	?___ftdiv+1,_getTemp$1308+1
 10176  00216A  C026  F053         	movff	?___ftdiv+2,_getTemp$1308+2
 10177                           
 10178                           ;temp.c: 61: {
 10179                           ;temp.c: 62: tmp = (( ((double)ADRES) * ((double)5.0)/((double)1024.0) / (((double)56.0)
      +                          /((double)10.0)) / ((double)0.0195) - (((double).4 - (((double)5.0)/((((double)12.0) + (
      +                          (double)1.0))/((double)1.0)))) / ((double)0.0195)) ));
 10180  00216E  0EBE               	movlw	190
 10181  002170  6E27               	movwf	___ftdiv@f2,c
 10182  002172  0E9F               	movlw	159
 10183  002174  6E28               	movwf	___ftdiv@f2+1,c
 10184  002176  0E3C               	movlw	60
 10185  002178  6E29               	movwf	___ftdiv@f2+2,c
 10186  00217A  C051  F024         	movff	_getTemp$1308,___ftdiv@f1
 10187  00217E  C052  F025         	movff	_getTemp$1308+1,___ftdiv@f1+1
 10188  002182  C053  F026         	movff	_getTemp$1308+2,___ftdiv@f1+2
 10189  002186  EC44  F01C         	call	___ftdiv	;wreg free
 10190  00218A  C024  F033         	movff	?___ftdiv,___ftadd@f1
 10191  00218E  C025  F034         	movff	?___ftdiv+1,___ftadd@f1+1
 10192  002192  C026  F035         	movff	?___ftdiv+2,___ftadd@f1+2
 10193  002196  0EF9               	movlw	249
 10194  002198  6E36               	movwf	___ftadd@f2,c
 10195  00219A  0E49               	movlw	73
 10196  00219C  6E37               	movwf	___ftadd@f2+1,c
 10197  00219E  0EBF               	movlw	191
 10198  0021A0  6E38               	movwf	___ftadd@f2+2,c
 10199  0021A2  EC44  F017         	call	___ftadd	;wreg free
 10200  0021A6  D088               	goto	L21
 10201  0021A8                     i2l5216:
 10202                           
 10203                           ;temp.c: 64: else
 10204                           ;temp.c: 65: {
 10205                           ;temp.c: 66: tmp = (( ((double)ADRES) * ((double)5.0)/((double)1024.0) / (((double)56.0)
      +                          /((double)10.0)) / ((double)0.0195) - (((double).4 - (((double)5.0)/((((double)12.0) + (
      +                          (double)1.0))/((double)1.0)))) / ((double)0.0195)) ) * 5.0 / 9.0 + 32.0);
 10206  0021A8  0E00               	movlw	0
 10207  0021AA  6E27               	movwf	___ftdiv@f2,c
 10208  0021AC  0E80               	movlw	128
 10209  0021AE  6E28               	movwf	___ftdiv@f2+1,c
 10210  0021B0  0E44               	movlw	68
 10211  0021B2  6E29               	movwf	___ftdiv@f2+2,c
 10212  0021B4  0E00               	movlw	0
 10213  0021B6  6E18               	movwf	___ftmul@f2,c
 10214  0021B8  0EA0               	movlw	160
 10215  0021BA  6E19               	movwf	___ftmul@f2+1,c
 10216  0021BC  0E40               	movlw	64
 10217  0021BE  6E1A               	movwf	___ftmul@f2+2,c
 10218  0021C0  CFC3 F009          	movff	4035,___lwtoft@c	;volatile
 10219  0021C4  CFC4 F00A          	movff	4036,___lwtoft@c+1	;volatile
 10220  0021C8  ECE3  F022         	call	___lwtoft	;wreg free
 10221  0021CC  C009  F015         	movff	?___lwtoft,___ftmul@f1
 10222  0021D0  C00A  F016         	movff	?___lwtoft+1,___ftmul@f1+1
 10223  0021D4  C00B  F017         	movff	?___lwtoft+2,___ftmul@f1+2
 10224  0021D8  EC61  F01B         	call	___ftmul	;wreg free
 10225  0021DC  C015  F024         	movff	?___ftmul,___ftdiv@f1
 10226  0021E0  C016  F025         	movff	?___ftmul+1,___ftdiv@f1+1
 10227  0021E4  C017  F026         	movff	?___ftmul+2,___ftdiv@f1+2
 10228  0021E8  EC44  F01C         	call	___ftdiv	;wreg free
 10229  0021EC  C024  F04E         	movff	?___ftdiv,_getTemp$1307
 10230  0021F0  C025  F04F         	movff	?___ftdiv+1,_getTemp$1307+1
 10231  0021F4  C026  F050         	movff	?___ftdiv+2,_getTemp$1307+2
 10232                           
 10233                           ;temp.c: 64: else
 10234                           ;temp.c: 65: {
 10235                           ;temp.c: 66: tmp = (( ((double)ADRES) * ((double)5.0)/((double)1024.0) / (((double)56.0)
      +                          /((double)10.0)) / ((double)0.0195) - (((double).4 - (((double)5.0)/((((double)12.0) + (
      +                          (double)1.0))/((double)1.0)))) / ((double)0.0195)) ) * 5.0 / 9.0 + 32.0);
 10236  0021F8  0E33               	movlw	51
 10237  0021FA  6E27               	movwf	___ftdiv@f2,c
 10238  0021FC  0EB3               	movlw	179
 10239  0021FE  6E28               	movwf	___ftdiv@f2+1,c
 10240  002200  0E40               	movlw	64
 10241  002202  6E29               	movwf	___ftdiv@f2+2,c
 10242  002204  C04E  F024         	movff	_getTemp$1307,___ftdiv@f1
 10243  002208  C04F  F025         	movff	_getTemp$1307+1,___ftdiv@f1+1
 10244  00220C  C050  F026         	movff	_getTemp$1307+2,___ftdiv@f1+2
 10245  002210  EC44  F01C         	call	___ftdiv	;wreg free
 10246  002214  C024  F051         	movff	?___ftdiv,_getTemp$1308
 10247  002218  C025  F052         	movff	?___ftdiv+1,_getTemp$1308+1
 10248  00221C  C026  F053         	movff	?___ftdiv+2,_getTemp$1308+2
 10249                           
 10250                           ;temp.c: 64: else
 10251                           ;temp.c: 65: {
 10252                           ;temp.c: 66: tmp = (( ((double)ADRES) * ((double)5.0)/((double)1024.0) / (((double)56.0)
      +                          /((double)10.0)) / ((double)0.0195) - (((double).4 - (((double)5.0)/((((double)12.0) + (
      +                          (double)1.0))/((double)1.0)))) / ((double)0.0195)) ) * 5.0 / 9.0 + 32.0);
 10253  002220  0E00               	movlw	0
 10254  002222  6E18               	movwf	___ftmul@f2,c
 10255  002224  0EA0               	movlw	160
 10256  002226  6E19               	movwf	___ftmul@f2+1,c
 10257  002228  0E40               	movlw	64
 10258  00222A  6E1A               	movwf	___ftmul@f2+2,c
 10259  00222C  0EF9               	movlw	249
 10260  00222E  6E36               	movwf	___ftadd@f2,c
 10261  002230  0E49               	movlw	73
 10262  002232  6E37               	movwf	___ftadd@f2+1,c
 10263  002234  0EBF               	movlw	191
 10264  002236  6E38               	movwf	___ftadd@f2+2,c
 10265  002238  0EBE               	movlw	190
 10266  00223A  6E27               	movwf	___ftdiv@f2,c
 10267  00223C  0E9F               	movlw	159
 10268  00223E  6E28               	movwf	___ftdiv@f2+1,c
 10269  002240  0E3C               	movlw	60
 10270  002242  6E29               	movwf	___ftdiv@f2+2,c
 10271  002244  C051  F024         	movff	_getTemp$1308,___ftdiv@f1
 10272  002248  C052  F025         	movff	_getTemp$1308+1,___ftdiv@f1+1
 10273  00224C  C053  F026         	movff	_getTemp$1308+2,___ftdiv@f1+2
 10274  002250  EC44  F01C         	call	___ftdiv	;wreg free
 10275  002254  C024  F033         	movff	?___ftdiv,___ftadd@f1
 10276  002258  C025  F034         	movff	?___ftdiv+1,___ftadd@f1+1
 10277  00225C  C026  F035         	movff	?___ftdiv+2,___ftadd@f1+2
 10278  002260  EC44  F017         	call	___ftadd	;wreg free
 10279  002264  C033  F015         	movff	?___ftadd,___ftmul@f1
 10280  002268  C034  F016         	movff	?___ftadd+1,___ftmul@f1+1
 10281  00226C  C035  F017         	movff	?___ftadd+2,___ftmul@f1+2
 10282  002270  EC61  F01B         	call	___ftmul	;wreg free
 10283  002274  C015  F048         	movff	?___ftmul,_getTemp$1309
 10284  002278  C016  F049         	movff	?___ftmul+1,_getTemp$1309+1
 10285  00227C  C017  F04A         	movff	?___ftmul+2,_getTemp$1309+2
 10286                           
 10287                           ;temp.c: 64: else
 10288                           ;temp.c: 65: {
 10289                           ;temp.c: 66: tmp = (( ((double)ADRES) * ((double)5.0)/((double)1024.0) / (((double)56.0)
      +                          /((double)10.0)) / ((double)0.0195) - (((double).4 - (((double)5.0)/((((double)12.0) + (
      +                          (double)1.0))/((double)1.0)))) / ((double)0.0195)) ) * 5.0 / 9.0 + 32.0);
 10290  002280  0E00               	movlw	0
 10291  002282  6E27               	movwf	___ftdiv@f2,c
 10292  002284  0E10               	movlw	16
 10293  002286  6E28               	movwf	___ftdiv@f2+1,c
 10294  002288  0E41               	movlw	65
 10295  00228A  6E29               	movwf	___ftdiv@f2+2,c
 10296  00228C  C048  F024         	movff	_getTemp$1309,___ftdiv@f1
 10297  002290  C049  F025         	movff	_getTemp$1309+1,___ftdiv@f1+1
 10298  002294  C04A  F026         	movff	_getTemp$1309+2,___ftdiv@f1+2
 10299  002298  EC44  F01C         	call	___ftdiv	;wreg free
 10300  00229C  C024  F033         	movff	?___ftdiv,___ftadd@f1
 10301  0022A0  C025  F034         	movff	?___ftdiv+1,___ftadd@f1+1
 10302  0022A4  C026  F035         	movff	?___ftdiv+2,___ftadd@f1+2
 10303  0022A8  0E00               	movlw	0
 10304  0022AA  6E36               	movwf	___ftadd@f2,c
 10305  0022AC  0E00               	movlw	0
 10306  0022AE  6E37               	movwf	___ftadd@f2+1,c
 10307  0022B0  0E42               	movlw	66
 10308  0022B2  6E38               	movwf	___ftadd@f2+2,c
 10309  0022B4  EC44  F017         	call	___ftadd	;wreg free
 10310  0022B8                     L21:
 10311  0022B8  C033  F054         	movff	?___ftadd,getTemp@tmp
 10312  0022BC  C034  F055         	movff	?___ftadd+1,getTemp@tmp+1
 10313  0022C0  C035  F056         	movff	?___ftadd+2,getTemp@tmp+2
 10314                           
 10315                           ;temp.c: 67: }
 10316                           ;temp.c: 68: float total = tmp;
 10317  0022C4  C054  F04B         	movff	getTemp@tmp,getTemp@total
 10318  0022C8  C055  F04C         	movff	getTemp@tmp+1,getTemp@total+1
 10319  0022CC  C056  F04D         	movff	getTemp@tmp+2,getTemp@total+2
 10320                           
 10321                           ;temp.c: 69: oldTemps[3] = tmp;
 10322  0022D0  C054  F147         	movff	getTemp@tmp,_oldTemps+9
 10323  0022D4  C055  F148         	movff	getTemp@tmp+1,_oldTemps+10
 10324  0022D8  C056  F149         	movff	getTemp@tmp+2,_oldTemps+11
 10325                           
 10326                           ;temp.c: 70: for (cnt = 0; cnt < 3; cnt++)
 10327  0022DC  0E00               	movlw	0
 10328  0022DE  6E57               	movwf	getTemp@cnt,c
 10329  0022E0  D038               	goto	L23
 10330  0022E2                     i2l5228:
 10331                           
 10332                           ;temp.c: 71: {
 10333                           ;temp.c: 72: oldTemps[cnt] = oldTempsTemp[cnt];
 10334  0022E2  5057               	movf	getTemp@cnt,w,c
 10335  0022E4  0D03               	mullw	3
 10336  0022E6  0E3F               	movlw	low getTemp@oldTempsTemp
 10337  0022E8  24F3               	addwf	prodl,w,c
 10338  0022EA  6ED9               	movwf	fsr2l,c
 10339  0022EC  0E00               	movlw	high getTemp@oldTempsTemp
 10340  0022EE  20F4               	addwfc	prodh,w,c
 10341  0022F0  6EDA               	movwf	fsr2h,c
 10342  0022F2  5057               	movf	getTemp@cnt,w,c
 10343  0022F4  0D03               	mullw	3
 10344  0022F6  0101               	movlb	1	; () banked
 10345  0022F8  0E3E               	movlw	low _oldTemps
 10346  0022FA  24F3               	addwf	prodl,w,c
 10347  0022FC  6EE1               	movwf	fsr1l,c
 10348  0022FE  0101               	movlb	1	; () banked
 10349  002300  0E01               	movlw	high _oldTemps
 10350  002302  20F4               	addwfc	prodh,w,c
 10351  002304  6EE2               	movwf	fsr1h,c
 10352  002306  CFDE FFE6          	movff	postinc2,postinc1
 10353  00230A  CFDE FFE6          	movff	postinc2,postinc1
 10354  00230E  CFDE FFE5          	movff	postinc2,postdec1
 10355  002312  52E5               	movf	postdec1,f,c
 10356                           
 10357                           ; BSR set to: 1
 10358                           ;temp.c: 73: total += oldTemps[cnt];
 10359  002314  C04B  F033         	movff	getTemp@total,___ftadd@f1
 10360  002318  C04C  F034         	movff	getTemp@total+1,___ftadd@f1+1
 10361  00231C  C04D  F035         	movff	getTemp@total+2,___ftadd@f1+2
 10362  002320  5057               	movf	getTemp@cnt,w,c
 10363  002322  0D03               	mullw	3
 10364  002324  0101               	movlb	1	; () banked
 10365  002326  0E3E               	movlw	low _oldTemps
 10366  002328  24F3               	addwf	prodl,w,c
 10367  00232A  6ED9               	movwf	fsr2l,c
 10368  00232C  0101               	movlb	1	; () banked
 10369  00232E  0E01               	movlw	high _oldTemps
 10370  002330  20F4               	addwfc	prodh,w,c
 10371  002332  6EDA               	movwf	fsr2h,c
 10372  002334  CFDE F036          	movff	postinc2,___ftadd@f2
 10373  002338  CFDE F037          	movff	postinc2,___ftadd@f2+1
 10374  00233C  CFDD F038          	movff	postdec2,___ftadd@f2+2
 10375  002340  EC44  F017         	call	___ftadd	;wreg free
 10376  002344  C033  F04B         	movff	?___ftadd,getTemp@total
 10377  002348  C034  F04C         	movff	?___ftadd+1,getTemp@total+1
 10378  00234C  C035  F04D         	movff	?___ftadd+2,getTemp@total+2
 10379  002350  2A57               	incf	getTemp@cnt,f,c
 10380  002352                     L23:
 10381  002352  0E02               	movlw	2
 10382  002354  6457               	cpfsgt	getTemp@cnt,c
 10383  002356  D7C5               	goto	i2l5228
 10384                           
 10385                           ;temp.c: 74: }
 10386                           ;temp.c: 76: temp = total / 4;
 10387  002358  C04B  F024         	movff	getTemp@total,___ftdiv@f1
 10388  00235C  C04C  F025         	movff	getTemp@total+1,___ftdiv@f1+1
 10389  002360  C04D  F026         	movff	getTemp@total+2,___ftdiv@f1+2
 10390  002364  0E00               	movlw	0
 10391  002366  6E27               	movwf	___ftdiv@f2,c
 10392  002368  0E80               	movlw	128
 10393  00236A  6E28               	movwf	___ftdiv@f2+1,c
 10394  00236C  0E40               	movlw	64
 10395  00236E  6E29               	movwf	___ftdiv@f2+2,c
 10396  002370  EC44  F01C         	call	___ftdiv	;wreg free
 10397  002374  C024  F0B9         	movff	?___ftdiv,_temp
 10398  002378  C025  F0BA         	movff	?___ftdiv+1,_temp+1
 10399  00237C  C026  F0BB         	movff	?___ftdiv+2,_temp+2
 10400                           
 10401                           ;temp.c: 77: return temp;
 10402                           ;	Return value of _getTemp is never used
 10403  002380  0012               	return	
 10404  002382                     __end_of_getTemp:
 10405                           	opt stack 0
 10406                           tosu	equ	0xFFF
 10407                           tosh	equ	0xFFE
 10408                           tosl	equ	0xFFD
 10409                           pclatu	equ	0xFFB
 10410                           pclath	equ	0xFFA
 10411                           tblptru	equ	0xFF8
 10412                           tblptrh	equ	0xFF7
 10413                           tblptrl	equ	0xFF6
 10414                           tablat	equ	0xFF5
 10415                           prodh	equ	0xFF4
 10416                           prodl	equ	0xFF3
 10417                           intcon	equ	0xFF2
 10418                           intcon2	equ	0xFF1
 10419                           indf0	equ	0xFEF
 10420                           postinc0	equ	0xFEE
 10421                           fsr0h	equ	0xFEA
 10422                           fsr0l	equ	0xFE9
 10423                           wreg	equ	0xFE8
 10424                           postinc1	equ	0xFE6
 10425                           postdec1	equ	0xFE5
 10426                           fsr1h	equ	0xFE2
 10427                           fsr1l	equ	0xFE1
 10428                           indf2	equ	0xFDF
 10429                           postinc2	equ	0xFDE
 10430                           postdec2	equ	0xFDD
 10431                           fsr2h	equ	0xFDA
 10432                           fsr2l	equ	0xFD9
 10433                           status	equ	0xFD8
 10434                           
 10435 ;; *************** function ___lwtoft *****************
 10436 ;; Defined at:
 10437 ;;		line 28 in file "/opt/microchip/xc8/v1.32/sources/common/lwtoft.c"
 10438 ;; Parameters:    Size  Location     Type
 10439 ;;  c               2    8[COMRAM] unsigned int 
 10440 ;; Auto vars:     Size  Location     Type
 10441 ;;		None
 10442 ;; Return value:  Size  Location     Type
 10443 ;;                  3    8[COMRAM] float 
 10444 ;; Registers used:
 10445 ;;		wreg, status,2, status,0, cstack
 10446 ;; Tracked objects:
 10447 ;;		On entry : 0/0
 10448 ;;		On exit  : 0/0
 10449 ;;		Unchanged: 0/0
 10450 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10451 ;;      Params:         3       0       0       0       0       0       0       0       0
 10452 ;;      Locals:         0       0       0       0       0       0       0       0       0
 10453 ;;      Temps:          0       0       0       0       0       0       0       0       0
 10454 ;;      Totals:         3       0       0       0       0       0       0       0       0
 10455 ;;Total ram usage:        3 bytes
 10456 ;; Hardware stack levels used:    1
 10457 ;; Hardware stack levels required when called:    1
 10458 ;; This function calls:
 10459 ;;		___ftpack
 10460 ;; This function is called by:
 10461 ;;		_getTemp
 10462 ;; This function uses a non-reentrant model
 10463 ;;
 10464                           
 10465                           	psect	text32
 10466  0045C6                     __ptext32:
 10467                           	opt stack 0
 10468  0045C6                     ___lwtoft:
 10469                           	opt stack 24
 10470                           
 10471                           ;incstack = 0
 10472  0045C6  C009  F001         	movff	___lwtoft@c,___ftpack@arg
 10473  0045CA  C00A  F002         	movff	___lwtoft@c+1,___ftpack@arg+1
 10474  0045CE  6A03               	clrf	___ftpack@arg+2,c
 10475  0045D0  0E8E               	movlw	142
 10476  0045D2  6E04               	movwf	___ftpack@exp,c
 10477  0045D4  0E00               	movlw	0
 10478  0045D6  6E05               	movwf	___ftpack@sign,c
 10479  0045D8  EC70  F01D         	call	___ftpack	;wreg free
 10480  0045DC  C001  F009         	movff	?___ftpack,?___lwtoft
 10481  0045E0  C002  F00A         	movff	?___ftpack+1,?___lwtoft+1
 10482  0045E4  C003  F00B         	movff	?___ftpack+2,?___lwtoft+2
 10483  0045E8  0012               	return	
 10484  0045EA                     __end_of___lwtoft:
 10485                           	opt stack 0
 10486                           tosu	equ	0xFFF
 10487                           tosh	equ	0xFFE
 10488                           tosl	equ	0xFFD
 10489                           pclatu	equ	0xFFB
 10490                           pclath	equ	0xFFA
 10491                           tblptru	equ	0xFF8
 10492                           tblptrh	equ	0xFF7
 10493                           tblptrl	equ	0xFF6
 10494                           tablat	equ	0xFF5
 10495                           prodh	equ	0xFF4
 10496                           prodl	equ	0xFF3
 10497                           intcon	equ	0xFF2
 10498                           intcon2	equ	0xFF1
 10499                           indf0	equ	0xFEF
 10500                           postinc0	equ	0xFEE
 10501                           fsr0h	equ	0xFEA
 10502                           fsr0l	equ	0xFE9
 10503                           wreg	equ	0xFE8
 10504                           postinc1	equ	0xFE6
 10505                           postdec1	equ	0xFE5
 10506                           fsr1h	equ	0xFE2
 10507                           fsr1l	equ	0xFE1
 10508                           indf2	equ	0xFDF
 10509                           postinc2	equ	0xFDE
 10510                           postdec2	equ	0xFDD
 10511                           fsr2h	equ	0xFDA
 10512                           fsr2l	equ	0xFD9
 10513                           status	equ	0xFD8
 10514                           
 10515 ;; *************** function ___ftmul *****************
 10516 ;; Defined at:
 10517 ;;		line 62 in file "/opt/microchip/xc8/v1.32/sources/common/ftmul.c"
 10518 ;; Parameters:    Size  Location     Type
 10519 ;;  f1              3   20[COMRAM] float 
 10520 ;;  f2              3   23[COMRAM] float 
 10521 ;; Auto vars:     Size  Location     Type
 10522 ;;  f3_as_produc    3   30[COMRAM] unsigned um
 10523 ;;  sign            1   34[COMRAM] unsigned char 
 10524 ;;  cntr            1   33[COMRAM] unsigned char 
 10525 ;;  exp             1   29[COMRAM] unsigned char 
 10526 ;; Return value:  Size  Location     Type
 10527 ;;                  3   20[COMRAM] float 
 10528 ;; Registers used:
 10529 ;;		wreg, status,2, status,0, cstack
 10530 ;; Tracked objects:
 10531 ;;		On entry : 0/0
 10532 ;;		On exit  : 0/0
 10533 ;;		Unchanged: 0/0
 10534 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10535 ;;      Params:         6       0       0       0       0       0       0       0       0
 10536 ;;      Locals:         6       0       0       0       0       0       0       0       0
 10537 ;;      Temps:          3       0       0       0       0       0       0       0       0
 10538 ;;      Totals:        15       0       0       0       0       0       0       0       0
 10539 ;;Total ram usage:       15 bytes
 10540 ;; Hardware stack levels used:    1
 10541 ;; Hardware stack levels required when called:    1
 10542 ;; This function calls:
 10543 ;;		___ftpack
 10544 ;; This function is called by:
 10545 ;;		_getTemp
 10546 ;;		_printTemp
 10547 ;;		_fround
 10548 ;;		_scale
 10549 ;;		_sprintf
 10550 ;; This function uses a non-reentrant model
 10551 ;;
 10552                           
 10553                           	psect	text33
 10554  0036C2                     __ptext33:
 10555                           	opt stack 0
 10556  0036C2                     ___ftmul:
 10557                           	opt stack 22
 10558                           
 10559                           ;incstack = 0
 10560  0036C2  C017  F01B         	movff	___ftmul@f1+2,??___ftmul
 10561  0036C6  6A1C               	clrf	(??___ftmul+1)& (0+255),c
 10562  0036C8  6A1D               	clrf	(??___ftmul+2)& (0+255),c
 10563  0036CA  3416               	rlcf	___ftmul@f1+1,w,c
 10564  0036CC  361B               	rlcf	??___ftmul& (0+255),f,c
 10565  0036CE  E301               	bnc	u351_41
 10566  0036D0  801C               	bsf	(??___ftmul+1)& (0+255),0,c
 10567  0036D2                     u351_41:
 10568  0036D2  501B               	movf	??___ftmul,w,c
 10569  0036D4  6E1E               	movwf	___ftmul@exp,c
 10570  0036D6  661E               	tstfsz	___ftmul@exp& (0+255),c
 10571  0036D8  D001               	goto	i2l3826
 10572  0036DA  D00C               	goto	i2u354_40
 10573  0036DC                     i2l3826:
 10574  0036DC  C01A  F01B         	movff	___ftmul@f2+2,??___ftmul
 10575  0036E0  6A1C               	clrf	(??___ftmul+1)& (0+255),c
 10576  0036E2  6A1D               	clrf	(??___ftmul+2)& (0+255),c
 10577  0036E4  3419               	rlcf	___ftmul@f2+1,w,c
 10578  0036E6  361B               	rlcf	??___ftmul& (0+255),f,c
 10579  0036E8  E301               	bnc	u353_41
 10580  0036EA  801C               	bsf	(??___ftmul+1)& (0+255),0,c
 10581  0036EC                     u353_41:
 10582  0036EC  501B               	movf	??___ftmul,w,c
 10583  0036EE  6E23               	movwf	___ftmul@sign,c
 10584  0036F0  6623               	tstfsz	___ftmul@sign& (0+255),c
 10585  0036F2  D007               	goto	i2l3832
 10586  0036F4                     i2u354_40:
 10587  0036F4  0E00               	movlw	0
 10588  0036F6  6E15               	movwf	?___ftmul,c
 10589  0036F8  0E00               	movlw	0
 10590  0036FA  6E16               	movwf	?___ftmul+1,c
 10591  0036FC  0E00               	movlw	0
 10592  0036FE  6E17               	movwf	?___ftmul+2,c
 10593  003700  D051               	goto	i2l1214
 10594  003702                     i2l3832:
 10595  003702  5023               	movf	___ftmul@sign,w,c
 10596  003704  0F7B               	addlw	123
 10597  003706  261E               	addwf	___ftmul@exp,f,c
 10598  003708  C017  F023         	movff	___ftmul@f1+2,___ftmul@sign
 10599  00370C  501A               	movf	___ftmul@f2+2,w,c
 10600  00370E  1A23               	xorwf	___ftmul@sign,f,c
 10601  003710  0E80               	movlw	128
 10602  003712  1623               	andwf	___ftmul@sign,f,c
 10603  003714  8E16               	bsf	___ftmul@f1+1,7,c
 10604  003716  8E19               	bsf	___ftmul@f2+1,7,c
 10605  003718  0EFF               	movlw	255
 10606  00371A  1618               	andwf	___ftmul@f2,f,c
 10607  00371C  0EFF               	movlw	255
 10608  00371E  1619               	andwf	___ftmul@f2+1,f,c
 10609  003720  0E00               	movlw	0
 10610  003722  161A               	andwf	___ftmul@f2+2,f,c
 10611  003724  0E00               	movlw	0
 10612  003726  6E1F               	movwf	___ftmul@f3_as_product,c
 10613  003728  0E00               	movlw	0
 10614  00372A  6E20               	movwf	___ftmul@f3_as_product+1,c
 10615  00372C  0E00               	movlw	0
 10616  00372E  6E21               	movwf	___ftmul@f3_as_product+2,c
 10617  003730  0E07               	movlw	7
 10618  003732  6E22               	movwf	___ftmul@cntr,c
 10619  003734                     i2l3846:
 10620  003734  A015               	btfss	___ftmul@f1,0,c
 10621  003736  D006               	goto	i2l3850
 10622  003738  5018               	movf	___ftmul@f2,w,c
 10623  00373A  261F               	addwf	___ftmul@f3_as_product,f,c
 10624  00373C  5019               	movf	___ftmul@f2+1,w,c
 10625  00373E  2220               	addwfc	___ftmul@f3_as_product+1,f,c
 10626  003740  501A               	movf	___ftmul@f2+2,w,c
 10627  003742  2221               	addwfc	___ftmul@f3_as_product+2,f,c
 10628  003744                     i2l3850:
 10629  003744  90D8               	bcf	status,0,c
 10630  003746  3217               	rrcf	___ftmul@f1+2,f,c
 10631  003748  3216               	rrcf	___ftmul@f1+1,f,c
 10632  00374A  3215               	rrcf	___ftmul@f1,f,c
 10633  00374C  90D8               	bcf	status,0,c
 10634  00374E  3618               	rlcf	___ftmul@f2,f,c
 10635  003750  3619               	rlcf	___ftmul@f2+1,f,c
 10636  003752  361A               	rlcf	___ftmul@f2+2,f,c
 10637  003754  2E22               	decfsz	___ftmul@cntr,f,c
 10638  003756  D7EE               	goto	i2l3846
 10639  003758  0E09               	movlw	9
 10640  00375A  6E22               	movwf	___ftmul@cntr,c
 10641  00375C                     i2l3856:
 10642  00375C  A015               	btfss	___ftmul@f1,0,c
 10643  00375E  D006               	goto	i2l3860
 10644  003760  5018               	movf	___ftmul@f2,w,c
 10645  003762  261F               	addwf	___ftmul@f3_as_product,f,c
 10646  003764  5019               	movf	___ftmul@f2+1,w,c
 10647  003766  2220               	addwfc	___ftmul@f3_as_product+1,f,c
 10648  003768  501A               	movf	___ftmul@f2+2,w,c
 10649  00376A  2221               	addwfc	___ftmul@f3_as_product+2,f,c
 10650  00376C                     i2l3860:
 10651  00376C  90D8               	bcf	status,0,c
 10652  00376E  3217               	rrcf	___ftmul@f1+2,f,c
 10653  003770  3216               	rrcf	___ftmul@f1+1,f,c
 10654  003772  3215               	rrcf	___ftmul@f1,f,c
 10655  003774  90D8               	bcf	status,0,c
 10656  003776  3221               	rrcf	___ftmul@f3_as_product+2,f,c
 10657  003778  3220               	rrcf	___ftmul@f3_as_product+1,f,c
 10658  00377A  321F               	rrcf	___ftmul@f3_as_product,f,c
 10659  00377C  2E22               	decfsz	___ftmul@cntr,f,c
 10660  00377E  D7EE               	goto	i2l3856
 10661  003780  C01F  F001         	movff	___ftmul@f3_as_product,___ftpack@arg
 10662  003784  C020  F002         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
 10663  003788  C021  F003         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
 10664  00378C  C01E  F004         	movff	___ftmul@exp,___ftpack@exp
 10665  003790  C023  F005         	movff	___ftmul@sign,___ftpack@sign
 10666  003794  EC70  F01D         	call	___ftpack	;wreg free
 10667  003798  C001  F015         	movff	?___ftpack,?___ftmul
 10668  00379C  C002  F016         	movff	?___ftpack+1,?___ftmul+1
 10669  0037A0  C003  F017         	movff	?___ftpack+2,?___ftmul+2
 10670  0037A4                     i2l1214:
 10671  0037A4  0012               	return	
 10672  0037A6                     __end_of___ftmul:
 10673                           	opt stack 0
 10674                           tosu	equ	0xFFF
 10675                           tosh	equ	0xFFE
 10676                           tosl	equ	0xFFD
 10677                           pclatu	equ	0xFFB
 10678                           pclath	equ	0xFFA
 10679                           tblptru	equ	0xFF8
 10680                           tblptrh	equ	0xFF7
 10681                           tblptrl	equ	0xFF6
 10682                           tablat	equ	0xFF5
 10683                           prodh	equ	0xFF4
 10684                           prodl	equ	0xFF3
 10685                           intcon	equ	0xFF2
 10686                           intcon2	equ	0xFF1
 10687                           indf0	equ	0xFEF
 10688                           postinc0	equ	0xFEE
 10689                           fsr0h	equ	0xFEA
 10690                           fsr0l	equ	0xFE9
 10691                           wreg	equ	0xFE8
 10692                           postinc1	equ	0xFE6
 10693                           postdec1	equ	0xFE5
 10694                           fsr1h	equ	0xFE2
 10695                           fsr1l	equ	0xFE1
 10696                           indf2	equ	0xFDF
 10697                           postinc2	equ	0xFDE
 10698                           postdec2	equ	0xFDD
 10699                           fsr2h	equ	0xFDA
 10700                           fsr2l	equ	0xFD9
 10701                           status	equ	0xFD8
 10702                           
 10703 ;; *************** function ___ftdiv *****************
 10704 ;; Defined at:
 10705 ;;		line 49 in file "/opt/microchip/xc8/v1.32/sources/common/ftdiv.c"
 10706 ;; Parameters:    Size  Location     Type
 10707 ;;  f1              3   35[COMRAM] float 
 10708 ;;  f2              3   38[COMRAM] float 
 10709 ;; Auto vars:     Size  Location     Type
 10710 ;;  f3              3   45[COMRAM] float 
 10711 ;;  sign            1   49[COMRAM] unsigned char 
 10712 ;;  exp             1   48[COMRAM] unsigned char 
 10713 ;;  cntr            1   44[COMRAM] unsigned char 
 10714 ;; Return value:  Size  Location     Type
 10715 ;;                  3   35[COMRAM] float 
 10716 ;; Registers used:
 10717 ;;		wreg, status,2, status,0, cstack
 10718 ;; Tracked objects:
 10719 ;;		On entry : 0/0
 10720 ;;		On exit  : 0/0
 10721 ;;		Unchanged: 0/0
 10722 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10723 ;;      Params:         6       0       0       0       0       0       0       0       0
 10724 ;;      Locals:         6       0       0       0       0       0       0       0       0
 10725 ;;      Temps:          3       0       0       0       0       0       0       0       0
 10726 ;;      Totals:        15       0       0       0       0       0       0       0       0
 10727 ;;Total ram usage:       15 bytes
 10728 ;; Hardware stack levels used:    1
 10729 ;; Hardware stack levels required when called:    1
 10730 ;; This function calls:
 10731 ;;		___ftpack
 10732 ;; This function is called by:
 10733 ;;		_getTemp
 10734 ;;		_printTemp
 10735 ;; This function uses a non-reentrant model
 10736 ;;
 10737                           
 10738                           	psect	text34
 10739  003888                     __ptext34:
 10740                           	opt stack 0
 10741  003888                     ___ftdiv:
 10742                           	opt stack 24
 10743                           
 10744                           ;incstack = 0
 10745  003888  C026  F02A         	movff	___ftdiv@f1+2,??___ftdiv
 10746  00388C  6A2B               	clrf	(??___ftdiv+1)& (0+255),c
 10747  00388E  6A2C               	clrf	(??___ftdiv+2)& (0+255),c
 10748  003890  3425               	rlcf	___ftdiv@f1+1,w,c
 10749  003892  362A               	rlcf	??___ftdiv& (0+255),f,c
 10750  003894  E301               	bnc	u531_41
 10751  003896  802B               	bsf	(??___ftdiv+1)& (0+255),0,c
 10752  003898                     u531_41:
 10753  003898  502A               	movf	??___ftdiv,w,c
 10754  00389A  6E31               	movwf	___ftdiv@exp,c
 10755  00389C  6631               	tstfsz	___ftdiv@exp& (0+255),c
 10756  00389E  D001               	goto	i2l5006
 10757  0038A0  D00C               	goto	i2u534_40
 10758  0038A2                     i2l5006:
 10759  0038A2  C029  F02A         	movff	___ftdiv@f2+2,??___ftdiv
 10760  0038A6  6A2B               	clrf	(??___ftdiv+1)& (0+255),c
 10761  0038A8  6A2C               	clrf	(??___ftdiv+2)& (0+255),c
 10762  0038AA  3428               	rlcf	___ftdiv@f2+1,w,c
 10763  0038AC  362A               	rlcf	??___ftdiv& (0+255),f,c
 10764  0038AE  E301               	bnc	u533_41
 10765  0038B0  802B               	bsf	(??___ftdiv+1)& (0+255),0,c
 10766  0038B2                     u533_41:
 10767  0038B2  502A               	movf	??___ftdiv,w,c
 10768  0038B4  6E32               	movwf	___ftdiv@sign,c
 10769  0038B6  6632               	tstfsz	___ftdiv@sign& (0+255),c
 10770  0038B8  D007               	goto	i2l5012
 10771  0038BA                     i2u534_40:
 10772  0038BA  0E00               	movlw	0
 10773  0038BC  6E24               	movwf	?___ftdiv,c
 10774  0038BE  0E00               	movlw	0
 10775  0038C0  6E25               	movwf	?___ftdiv+1,c
 10776  0038C2  0E00               	movlw	0
 10777  0038C4  6E26               	movwf	?___ftdiv+2,c
 10778  0038C6  D04A               	goto	i2l1182
 10779  0038C8                     i2l5012:
 10780  0038C8  0E00               	movlw	0
 10781  0038CA  6E2E               	movwf	___ftdiv@f3,c
 10782  0038CC  0E00               	movlw	0
 10783  0038CE  6E2F               	movwf	___ftdiv@f3+1,c
 10784  0038D0  0E00               	movlw	0
 10785  0038D2  6E30               	movwf	___ftdiv@f3+2,c
 10786  0038D4  5032               	movf	___ftdiv@sign,w,c
 10787  0038D6  0F89               	addlw	137
 10788  0038D8  5E31               	subwf	___ftdiv@exp,f,c
 10789  0038DA  C026  F032         	movff	___ftdiv@f1+2,___ftdiv@sign
 10790  0038DE  5029               	movf	___ftdiv@f2+2,w,c
 10791  0038E0  1A32               	xorwf	___ftdiv@sign,f,c
 10792  0038E2  0E80               	movlw	128
 10793  0038E4  1632               	andwf	___ftdiv@sign,f,c
 10794  0038E6  8E25               	bsf	___ftdiv@f1+1,7,c
 10795  0038E8  0EFF               	movlw	255
 10796  0038EA  1624               	andwf	___ftdiv@f1,f,c
 10797  0038EC  0EFF               	movlw	255
 10798  0038EE  1625               	andwf	___ftdiv@f1+1,f,c
 10799  0038F0  0E00               	movlw	0
 10800  0038F2  1626               	andwf	___ftdiv@f1+2,f,c
 10801  0038F4  8E28               	bsf	___ftdiv@f2+1,7,c
 10802  0038F6  0EFF               	movlw	255
 10803  0038F8  1627               	andwf	___ftdiv@f2,f,c
 10804  0038FA  0EFF               	movlw	255
 10805  0038FC  1628               	andwf	___ftdiv@f2+1,f,c
 10806  0038FE  0E00               	movlw	0
 10807  003900  1629               	andwf	___ftdiv@f2+2,f,c
 10808  003902  0E18               	movlw	24
 10809  003904  6E2D               	movwf	___ftdiv@cntr,c
 10810  003906                     i2l5032:
 10811  003906  90D8               	bcf	status,0,c
 10812  003908  362E               	rlcf	___ftdiv@f3,f,c
 10813  00390A  362F               	rlcf	___ftdiv@f3+1,f,c
 10814  00390C  3630               	rlcf	___ftdiv@f3+2,f,c
 10815  00390E  5027               	movf	___ftdiv@f2,w,c
 10816  003910  5C24               	subwf	___ftdiv@f1,w,c
 10817  003912  5028               	movf	___ftdiv@f2+1,w,c
 10818  003914  5825               	subwfb	___ftdiv@f1+1,w,c
 10819  003916  5029               	movf	___ftdiv@f2+2,w,c
 10820  003918  5826               	subwfb	___ftdiv@f1+2,w,c
 10821  00391A  A0D8               	btfss	status,0,c
 10822  00391C  D007               	goto	i2l1185
 10823  00391E  5027               	movf	___ftdiv@f2,w,c
 10824  003920  5E24               	subwf	___ftdiv@f1,f,c
 10825  003922  5028               	movf	___ftdiv@f2+1,w,c
 10826  003924  5A25               	subwfb	___ftdiv@f1+1,f,c
 10827  003926  5029               	movf	___ftdiv@f2+2,w,c
 10828  003928  5A26               	subwfb	___ftdiv@f1+2,f,c
 10829  00392A  802E               	bsf	___ftdiv@f3,0,c
 10830  00392C                     i2l1185:
 10831  00392C  90D8               	bcf	status,0,c
 10832  00392E  3624               	rlcf	___ftdiv@f1,f,c
 10833  003930  3625               	rlcf	___ftdiv@f1+1,f,c
 10834  003932  3626               	rlcf	___ftdiv@f1+2,f,c
 10835  003934  2E2D               	decfsz	___ftdiv@cntr,f,c
 10836  003936  D7E7               	goto	i2l5032
 10837  003938  C02E  F001         	movff	___ftdiv@f3,___ftpack@arg
 10838  00393C  C02F  F002         	movff	___ftdiv@f3+1,___ftpack@arg+1
 10839  003940  C030  F003         	movff	___ftdiv@f3+2,___ftpack@arg+2
 10840  003944  C031  F004         	movff	___ftdiv@exp,___ftpack@exp
 10841  003948  C032  F005         	movff	___ftdiv@sign,___ftpack@sign
 10842  00394C  EC70  F01D         	call	___ftpack	;wreg free
 10843  003950  C001  F024         	movff	?___ftpack,?___ftdiv
 10844  003954  C002  F025         	movff	?___ftpack+1,?___ftdiv+1
 10845  003958  C003  F026         	movff	?___ftpack+2,?___ftdiv+2
 10846  00395C                     i2l1182:
 10847  00395C  0012               	return	
 10848  00395E                     __end_of___ftdiv:
 10849                           	opt stack 0
 10850                           tosu	equ	0xFFF
 10851                           tosh	equ	0xFFE
 10852                           tosl	equ	0xFFD
 10853                           pclatu	equ	0xFFB
 10854                           pclath	equ	0xFFA
 10855                           tblptru	equ	0xFF8
 10856                           tblptrh	equ	0xFF7
 10857                           tblptrl	equ	0xFF6
 10858                           tablat	equ	0xFF5
 10859                           prodh	equ	0xFF4
 10860                           prodl	equ	0xFF3
 10861                           intcon	equ	0xFF2
 10862                           intcon2	equ	0xFF1
 10863                           indf0	equ	0xFEF
 10864                           postinc0	equ	0xFEE
 10865                           fsr0h	equ	0xFEA
 10866                           fsr0l	equ	0xFE9
 10867                           wreg	equ	0xFE8
 10868                           postinc1	equ	0xFE6
 10869                           postdec1	equ	0xFE5
 10870                           fsr1h	equ	0xFE2
 10871                           fsr1l	equ	0xFE1
 10872                           indf2	equ	0xFDF
 10873                           postinc2	equ	0xFDE
 10874                           postdec2	equ	0xFDD
 10875                           fsr2h	equ	0xFDA
 10876                           fsr2l	equ	0xFD9
 10877                           status	equ	0xFD8
 10878                           
 10879 ;; *************** function ___ftadd *****************
 10880 ;; Defined at:
 10881 ;;		line 86 in file "/opt/microchip/xc8/v1.32/sources/common/ftadd.c"
 10882 ;; Parameters:    Size  Location     Type
 10883 ;;  f1              3   50[COMRAM] float 
 10884 ;;  f2              3   53[COMRAM] float 
 10885 ;; Auto vars:     Size  Location     Type
 10886 ;;  exp1            1   61[COMRAM] unsigned char 
 10887 ;;  exp2            1   60[COMRAM] unsigned char 
 10888 ;;  sign            1   59[COMRAM] unsigned char 
 10889 ;; Return value:  Size  Location     Type
 10890 ;;                  3   50[COMRAM] float 
 10891 ;; Registers used:
 10892 ;;		wreg, status,2, status,0, cstack
 10893 ;; Tracked objects:
 10894 ;;		On entry : 0/0
 10895 ;;		On exit  : 0/0
 10896 ;;		Unchanged: 0/0
 10897 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10898 ;;      Params:         6       0       0       0       0       0       0       0       0
 10899 ;;      Locals:         3       0       0       0       0       0       0       0       0
 10900 ;;      Temps:          3       0       0       0       0       0       0       0       0
 10901 ;;      Totals:        12       0       0       0       0       0       0       0       0
 10902 ;;Total ram usage:       12 bytes
 10903 ;; Hardware stack levels used:    1
 10904 ;; Hardware stack levels required when called:    1
 10905 ;; This function calls:
 10906 ;;		___ftpack
 10907 ;; This function is called by:
 10908 ;;		_getTemp
 10909 ;;		_sprintf
 10910 ;;		___ftsub
 10911 ;; This function uses a non-reentrant model
 10912 ;;
 10913                           
 10914                           	psect	text35
 10915  002E88                     __ptext35:
 10916                           	opt stack 0
 10917  002E88                     ___ftadd:
 10918                           	opt stack 22
 10919                           
 10920                           ;incstack = 0
 10921  002E88  C035  F039         	movff	___ftadd@f1+2,??___ftadd
 10922  002E8C  6A3A               	clrf	(??___ftadd+1)& (0+255),c
 10923  002E8E  6A3B               	clrf	(??___ftadd+2)& (0+255),c
 10924  002E90  3434               	rlcf	___ftadd@f1+1,w,c
 10925  002E92  3639               	rlcf	??___ftadd& (0+255),f,c
 10926  002E94  E301               	bnc	u330_41
 10927  002E96  803A               	bsf	(??___ftadd+1)& (0+255),0,c
 10928  002E98                     u330_41:
 10929  002E98  5039               	movf	??___ftadd,w,c
 10930  002E9A  6E3E               	movwf	___ftadd@exp1,c
 10931  002E9C  C038  F039         	movff	___ftadd@f2+2,??___ftadd
 10932  002EA0  6A3A               	clrf	(??___ftadd+1)& (0+255),c
 10933  002EA2  6A3B               	clrf	(??___ftadd+2)& (0+255),c
 10934  002EA4  3437               	rlcf	___ftadd@f2+1,w,c
 10935  002EA6  3639               	rlcf	??___ftadd& (0+255),f,c
 10936  002EA8  E301               	bnc	u331_41
 10937  002EAA  803A               	bsf	(??___ftadd+1)& (0+255),0,c
 10938  002EAC                     u331_41:
 10939  002EAC  5039               	movf	??___ftadd,w,c
 10940  002EAE  6E3D               	movwf	___ftadd@exp2,c
 10941  002EB0  503E               	movf	___ftadd@exp1,w,c
 10942  002EB2  B4D8               	btfsc	status,2,c
 10943  002EB4  D00C               	goto	i2l1150
 10944  002EB6  503D               	movf	___ftadd@exp2,w,c
 10945  002EB8  5C3E               	subwf	___ftadd@exp1,w,c
 10946  002EBA  B0D8               	btfsc	status,0,c
 10947  002EBC  D00F               	goto	i2l3758
 10948  002EBE  503E               	movf	___ftadd@exp1,w,c
 10949  002EC0  0800               	sublw	0
 10950  002EC2  243D               	addwf	___ftadd@exp2,w,c
 10951  002EC4  6E39               	movwf	??___ftadd& (0+255),c
 10952  002EC6  0E19               	movlw	25
 10953  002EC8  5C39               	subwf	??___ftadd,w,c
 10954  002ECA  A0D8               	btfss	status,0,c
 10955  002ECC  D007               	goto	i2l3758
 10956  002ECE                     i2l1150:
 10957  002ECE  C036  F033         	movff	___ftadd@f2,?___ftadd
 10958  002ED2  C037  F034         	movff	___ftadd@f2+1,?___ftadd+1
 10959  002ED6  C038  F035         	movff	___ftadd@f2+2,?___ftadd+2
 10960  002EDA  D0AB               	goto	i2l1151
 10961  002EDC                     i2l3758:
 10962  002EDC  503D               	movf	___ftadd@exp2,w,c
 10963  002EDE  B4D8               	btfsc	status,2,c
 10964  002EE0  D00C               	goto	i2l1154
 10965  002EE2  503E               	movf	___ftadd@exp1,w,c
 10966  002EE4  5C3D               	subwf	___ftadd@exp2,w,c
 10967  002EE6  B0D8               	btfsc	status,0,c
 10968  002EE8  D00F               	goto	i2l3764
 10969  002EEA  503D               	movf	___ftadd@exp2,w,c
 10970  002EEC  0800               	sublw	0
 10971  002EEE  243E               	addwf	___ftadd@exp1,w,c
 10972  002EF0  6E39               	movwf	??___ftadd& (0+255),c
 10973  002EF2  0E19               	movlw	25
 10974  002EF4  5C39               	subwf	??___ftadd,w,c
 10975  002EF6  A0D8               	btfss	status,0,c
 10976  002EF8  D007               	goto	i2l3764
 10977  002EFA                     i2l1154:
 10978  002EFA  C033  F033         	movff	___ftadd@f1,?___ftadd
 10979  002EFE  C034  F034         	movff	___ftadd@f1+1,?___ftadd+1
 10980  002F02  C035  F035         	movff	___ftadd@f1+2,?___ftadd+2
 10981  002F06  D095               	goto	i2l1151
 10982  002F08                     i2l3764:
 10983  002F08  0E06               	movlw	6
 10984  002F0A  6E3C               	movwf	___ftadd@sign,c
 10985  002F0C  BE35               	btfsc	___ftadd@f1+2,7,c
 10986  002F0E  8E3C               	bsf	___ftadd@sign,7,c
 10987  002F10  BE38               	btfsc	___ftadd@f2+2,7,c
 10988  002F12  8C3C               	bsf	___ftadd@sign,6,c
 10989  002F14  8E34               	bsf	___ftadd@f1+1,7,c
 10990  002F16  0EFF               	movlw	255
 10991  002F18  1633               	andwf	___ftadd@f1,f,c
 10992  002F1A  0EFF               	movlw	255
 10993  002F1C  1634               	andwf	___ftadd@f1+1,f,c
 10994  002F1E  0E00               	movlw	0
 10995  002F20  1635               	andwf	___ftadd@f1+2,f,c
 10996  002F22  8E37               	bsf	___ftadd@f2+1,7,c
 10997  002F24  0EFF               	movlw	255
 10998  002F26  1636               	andwf	___ftadd@f2,f,c
 10999  002F28  0EFF               	movlw	255
 11000  002F2A  1637               	andwf	___ftadd@f2+1,f,c
 11001  002F2C  0E00               	movlw	0
 11002  002F2E  1638               	andwf	___ftadd@f2+2,f,c
 11003  002F30  503D               	movf	___ftadd@exp2,w,c
 11004  002F32  5C3E               	subwf	___ftadd@exp1,w,c
 11005  002F34  B0D8               	btfsc	status,0,c
 11006  002F36  D01A               	goto	i2l3790
 11007  002F38                     i2l3780:
 11008  002F38  90D8               	bcf	status,0,c
 11009  002F3A  3636               	rlcf	___ftadd@f2,f,c
 11010  002F3C  3637               	rlcf	___ftadd@f2+1,f,c
 11011  002F3E  3638               	rlcf	___ftadd@f2+2,f,c
 11012  002F40  063D               	decf	___ftadd@exp2,f,c
 11013  002F42  503D               	movf	___ftadd@exp2,w,c
 11014  002F44  183E               	xorwf	___ftadd@exp1,w,c
 11015  002F46  B4D8               	btfsc	status,2,c
 11016  002F48  D00D               	goto	i2l3788
 11017  002F4A  063C               	decf	___ftadd@sign,f,c
 11018  002F4C  C03C  F039         	movff	___ftadd@sign,??___ftadd
 11019  002F50  0E07               	movlw	7
 11020  002F52  1639               	andwf	??___ftadd,f,c
 11021  002F54  B4D8               	btfsc	status,2,c
 11022  002F56  D006               	goto	i2l3788
 11023  002F58  D7EF               	goto	i2l3780
 11024  002F5A                     i2l3786:
 11025  002F5A  90D8               	bcf	status,0,c
 11026  002F5C  3235               	rrcf	___ftadd@f1+2,f,c
 11027  002F5E  3234               	rrcf	___ftadd@f1+1,f,c
 11028  002F60  3233               	rrcf	___ftadd@f1,f,c
 11029  002F62  2A3E               	incf	___ftadd@exp1,f,c
 11030  002F64                     i2l3788:
 11031  002F64  503D               	movf	___ftadd@exp2,w,c
 11032  002F66  623E               	cpfseq	___ftadd@exp1,c
 11033  002F68  D7F8               	goto	i2l3786
 11034  002F6A  D01D               	goto	i2l1165
 11035  002F6C                     i2l3790:
 11036  002F6C  503E               	movf	___ftadd@exp1,w,c
 11037  002F6E  5C3D               	subwf	___ftadd@exp2,w,c
 11038  002F70  B0D8               	btfsc	status,0,c
 11039  002F72  D019               	goto	i2l1165
 11040  002F74                     i2l3792:
 11041  002F74  90D8               	bcf	status,0,c
 11042  002F76  3633               	rlcf	___ftadd@f1,f,c
 11043  002F78  3634               	rlcf	___ftadd@f1+1,f,c
 11044  002F7A  3635               	rlcf	___ftadd@f1+2,f,c
 11045  002F7C  063E               	decf	___ftadd@exp1,f,c
 11046  002F7E  503D               	movf	___ftadd@exp2,w,c
 11047  002F80  183E               	xorwf	___ftadd@exp1,w,c
 11048  002F82  B4D8               	btfsc	status,2,c
 11049  002F84  D00D               	goto	i2l3800
 11050  002F86  063C               	decf	___ftadd@sign,f,c
 11051  002F88  C03C  F039         	movff	___ftadd@sign,??___ftadd
 11052  002F8C  0E07               	movlw	7
 11053  002F8E  1639               	andwf	??___ftadd,f,c
 11054  002F90  B4D8               	btfsc	status,2,c
 11055  002F92  D006               	goto	i2l3800
 11056  002F94  D7EF               	goto	i2l3792
 11057  002F96                     i2l3798:
 11058  002F96  90D8               	bcf	status,0,c
 11059  002F98  3238               	rrcf	___ftadd@f2+2,f,c
 11060  002F9A  3237               	rrcf	___ftadd@f2+1,f,c
 11061  002F9C  3236               	rrcf	___ftadd@f2,f,c
 11062  002F9E  2A3D               	incf	___ftadd@exp2,f,c
 11063  002FA0                     i2l3800:
 11064  002FA0  503D               	movf	___ftadd@exp2,w,c
 11065  002FA2  623E               	cpfseq	___ftadd@exp1,c
 11066  002FA4  D7F8               	goto	i2l3798
 11067  002FA6                     i2l1165:
 11068  002FA6  AE3C               	btfss	___ftadd@sign,7,c
 11069  002FA8  D00C               	goto	i2l1174
 11070  002FAA  0EFF               	movlw	255
 11071  002FAC  1A33               	xorwf	___ftadd@f1,f,c
 11072  002FAE  0EFF               	movlw	255
 11073  002FB0  1A34               	xorwf	___ftadd@f1+1,f,c
 11074  002FB2  0EFF               	movlw	255
 11075  002FB4  1A35               	xorwf	___ftadd@f1+2,f,c
 11076  002FB6  0E01               	movlw	1
 11077  002FB8  2633               	addwf	___ftadd@f1,f,c
 11078  002FBA  0E00               	movlw	0
 11079  002FBC  2234               	addwfc	___ftadd@f1+1,f,c
 11080  002FBE  0E00               	movlw	0
 11081  002FC0  2235               	addwfc	___ftadd@f1+2,f,c
 11082  002FC2                     i2l1174:
 11083  002FC2  AC3C               	btfss	___ftadd@sign,6,c
 11084  002FC4  D00C               	goto	i2l3806
 11085  002FC6  0EFF               	movlw	255
 11086  002FC8  1A36               	xorwf	___ftadd@f2,f,c
 11087  002FCA  0EFF               	movlw	255
 11088  002FCC  1A37               	xorwf	___ftadd@f2+1,f,c
 11089  002FCE  0EFF               	movlw	255
 11090  002FD0  1A38               	xorwf	___ftadd@f2+2,f,c
 11091  002FD2  0E01               	movlw	1
 11092  002FD4  2636               	addwf	___ftadd@f2,f,c
 11093  002FD6  0E00               	movlw	0
 11094  002FD8  2237               	addwfc	___ftadd@f2+1,f,c
 11095  002FDA  0E00               	movlw	0
 11096  002FDC  2238               	addwfc	___ftadd@f2+2,f,c
 11097  002FDE                     i2l3806:
 11098  002FDE  0E00               	movlw	0
 11099  002FE0  6E3C               	movwf	___ftadd@sign,c
 11100  002FE2  5033               	movf	___ftadd@f1,w,c
 11101  002FE4  2636               	addwf	___ftadd@f2,f,c
 11102  002FE6  5034               	movf	___ftadd@f1+1,w,c
 11103  002FE8  2237               	addwfc	___ftadd@f2+1,f,c
 11104  002FEA  5035               	movf	___ftadd@f1+2,w,c
 11105  002FEC  2238               	addwfc	___ftadd@f2+2,f,c
 11106  002FEE  AE38               	btfss	___ftadd@f2+2,7,c
 11107  002FF0  D00E               	goto	i2l3816
 11108  002FF2  0EFF               	movlw	255
 11109  002FF4  1A36               	xorwf	___ftadd@f2,f,c
 11110  002FF6  0EFF               	movlw	255
 11111  002FF8  1A37               	xorwf	___ftadd@f2+1,f,c
 11112  002FFA  0EFF               	movlw	255
 11113  002FFC  1A38               	xorwf	___ftadd@f2+2,f,c
 11114  002FFE  0E01               	movlw	1
 11115  003000  2636               	addwf	___ftadd@f2,f,c
 11116  003002  0E00               	movlw	0
 11117  003004  2237               	addwfc	___ftadd@f2+1,f,c
 11118  003006  0E00               	movlw	0
 11119  003008  2238               	addwfc	___ftadd@f2+2,f,c
 11120  00300A  0E01               	movlw	1
 11121  00300C  6E3C               	movwf	___ftadd@sign,c
 11122  00300E                     i2l3816:
 11123  00300E  C036  F001         	movff	___ftadd@f2,___ftpack@arg
 11124  003012  C037  F002         	movff	___ftadd@f2+1,___ftpack@arg+1
 11125  003016  C038  F003         	movff	___ftadd@f2+2,___ftpack@arg+2
 11126  00301A  C03E  F004         	movff	___ftadd@exp1,___ftpack@exp
 11127  00301E  C03C  F005         	movff	___ftadd@sign,___ftpack@sign
 11128  003022  EC70  F01D         	call	___ftpack	;wreg free
 11129  003026  C001  F033         	movff	?___ftpack,?___ftadd
 11130  00302A  C002  F034         	movff	?___ftpack+1,?___ftadd+1
 11131  00302E  C003  F035         	movff	?___ftpack+2,?___ftadd+2
 11132  003032                     i2l1151:
 11133  003032  0012               	return	
 11134  003034                     __end_of___ftadd:
 11135                           	opt stack 0
 11136                           tosu	equ	0xFFF
 11137                           tosh	equ	0xFFE
 11138                           tosl	equ	0xFFD
 11139                           pclatu	equ	0xFFB
 11140                           pclath	equ	0xFFA
 11141                           tblptru	equ	0xFF8
 11142                           tblptrh	equ	0xFF7
 11143                           tblptrl	equ	0xFF6
 11144                           tablat	equ	0xFF5
 11145                           prodh	equ	0xFF4
 11146                           prodl	equ	0xFF3
 11147                           intcon	equ	0xFF2
 11148                           intcon2	equ	0xFF1
 11149                           indf0	equ	0xFEF
 11150                           postinc0	equ	0xFEE
 11151                           fsr0h	equ	0xFEA
 11152                           fsr0l	equ	0xFE9
 11153                           wreg	equ	0xFE8
 11154                           postinc1	equ	0xFE6
 11155                           postdec1	equ	0xFE5
 11156                           fsr1h	equ	0xFE2
 11157                           fsr1l	equ	0xFE1
 11158                           indf2	equ	0xFDF
 11159                           postinc2	equ	0xFDE
 11160                           postdec2	equ	0xFDD
 11161                           fsr2h	equ	0xFDA
 11162                           fsr2l	equ	0xFD9
 11163                           status	equ	0xFD8
 11164                           
 11165 ;; *************** function ___ftpack *****************
 11166 ;; Defined at:
 11167 ;;		line 62 in file "/opt/microchip/xc8/v1.32/sources/common/float.c"
 11168 ;; Parameters:    Size  Location     Type
 11169 ;;  arg             3    0[COMRAM] unsigned um
 11170 ;;  exp             1    3[COMRAM] unsigned char 
 11171 ;;  sign            1    4[COMRAM] unsigned char 
 11172 ;; Auto vars:     Size  Location     Type
 11173 ;;		None
 11174 ;; Return value:  Size  Location     Type
 11175 ;;                  3    0[COMRAM] float 
 11176 ;; Registers used:
 11177 ;;		wreg, status,2, status,0
 11178 ;; Tracked objects:
 11179 ;;		On entry : 0/0
 11180 ;;		On exit  : 0/0
 11181 ;;		Unchanged: 0/0
 11182 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11183 ;;      Params:         5       0       0       0       0       0       0       0       0
 11184 ;;      Locals:         0       0       0       0       0       0       0       0       0
 11185 ;;      Temps:          3       0       0       0       0       0       0       0       0
 11186 ;;      Totals:         8       0       0       0       0       0       0       0       0
 11187 ;;Total ram usage:        8 bytes
 11188 ;; Hardware stack levels used:    1
 11189 ;; This function calls:
 11190 ;;		Nothing
 11191 ;; This function is called by:
 11192 ;;		___altoft
 11193 ;;		___ftadd
 11194 ;;		___ftdiv
 11195 ;;		___ftmul
 11196 ;;		___lltoft
 11197 ;;		___lwtoft
 11198 ;; This function uses a non-reentrant model
 11199 ;;
 11200                           
 11201                           	psect	text36
 11202  003AE0                     __ptext36:
 11203                           	opt stack 0
 11204  003AE0                     ___ftpack:
 11205                           	opt stack 22
 11206                           
 11207                           ;incstack = 0
 11208  003AE0  5004               	movf	___ftpack@exp,w,c
 11209  003AE2  B4D8               	btfsc	status,2,c
 11210  003AE4  D005               	goto	i2l3598
 11211  003AE6  5001               	movf	___ftpack@arg,w,c
 11212  003AE8  1002               	iorwf	___ftpack@arg+1,w,c
 11213  003AEA  1003               	iorwf	___ftpack@arg+2,w,c
 11214  003AEC  A4D8               	btfss	status,2,c
 11215  003AEE  D00C               	goto	i2l3604
 11216  003AF0                     i2l3598:
 11217  003AF0  0E00               	movlw	0
 11218  003AF2  6E01               	movwf	?___ftpack,c
 11219  003AF4  0E00               	movlw	0
 11220  003AF6  6E02               	movwf	?___ftpack+1,c
 11221  003AF8  0E00               	movlw	0
 11222  003AFA  6E03               	movwf	?___ftpack+2,c
 11223  003AFC  D044               	goto	i2l1113
 11224  003AFE                     i2l3602:
 11225  003AFE  2A04               	incf	___ftpack@exp,f,c
 11226  003B00  90D8               	bcf	status,0,c
 11227  003B02  3203               	rrcf	___ftpack@arg+2,f,c
 11228  003B04  3202               	rrcf	___ftpack@arg+1,f,c
 11229  003B06  3201               	rrcf	___ftpack@arg,f,c
 11230  003B08                     i2l3604:
 11231  003B08  0E00               	movlw	0
 11232  003B0A  1401               	andwf	___ftpack@arg,w,c
 11233  003B0C  6E06               	movwf	??___ftpack& (0+255),c
 11234  003B0E  0E00               	movlw	0
 11235  003B10  1402               	andwf	___ftpack@arg+1,w,c
 11236  003B12  6E07               	movwf	(??___ftpack+1)& (0+255),c
 11237  003B14  0EFE               	movlw	254
 11238  003B16  1403               	andwf	___ftpack@arg+2,w,c
 11239  003B18  6E08               	movwf	(??___ftpack+2)& (0+255),c
 11240  003B1A  5006               	movf	??___ftpack,w,c
 11241  003B1C  1007               	iorwf	??___ftpack+1,w,c
 11242  003B1E  1008               	iorwf	??___ftpack+2,w,c
 11243  003B20  B4D8               	btfsc	status,2,c
 11244  003B22  D00C               	goto	i2l3610
 11245  003B24  D7EC               	goto	i2l3602
 11246  003B26                     i2l3606:
 11247  003B26  2A04               	incf	___ftpack@exp,f,c
 11248  003B28  0E01               	movlw	1
 11249  003B2A  2601               	addwf	___ftpack@arg,f,c
 11250  003B2C  0E00               	movlw	0
 11251  003B2E  2202               	addwfc	___ftpack@arg+1,f,c
 11252  003B30  0E00               	movlw	0
 11253  003B32  2203               	addwfc	___ftpack@arg+2,f,c
 11254  003B34  90D8               	bcf	status,0,c
 11255  003B36  3203               	rrcf	___ftpack@arg+2,f,c
 11256  003B38  3202               	rrcf	___ftpack@arg+1,f,c
 11257  003B3A  3201               	rrcf	___ftpack@arg,f,c
 11258  003B3C                     i2l3610:
 11259  003B3C  0E00               	movlw	0
 11260  003B3E  1401               	andwf	___ftpack@arg,w,c
 11261  003B40  6E06               	movwf	??___ftpack& (0+255),c
 11262  003B42  0E00               	movlw	0
 11263  003B44  1402               	andwf	___ftpack@arg+1,w,c
 11264  003B46  6E07               	movwf	(??___ftpack+1)& (0+255),c
 11265  003B48  0EFF               	movlw	255
 11266  003B4A  1403               	andwf	___ftpack@arg+2,w,c
 11267  003B4C  6E08               	movwf	(??___ftpack+2)& (0+255),c
 11268  003B4E  5006               	movf	??___ftpack,w,c
 11269  003B50  1007               	iorwf	??___ftpack+1,w,c
 11270  003B52  1008               	iorwf	??___ftpack+2,w,c
 11271  003B54  B4D8               	btfsc	status,2,c
 11272  003B56  D006               	goto	i2l3614
 11273  003B58  D7E6               	goto	i2l3606
 11274  003B5A                     i2l3612:
 11275  003B5A  0604               	decf	___ftpack@exp,f,c
 11276  003B5C  90D8               	bcf	status,0,c
 11277  003B5E  3601               	rlcf	___ftpack@arg,f,c
 11278  003B60  3602               	rlcf	___ftpack@arg+1,f,c
 11279  003B62  3603               	rlcf	___ftpack@arg+2,f,c
 11280  003B64                     i2l3614:
 11281  003B64  AE02               	btfss	___ftpack@arg+1,7,c
 11282  003B66  D7F9               	goto	i2l3612
 11283  003B68  A004               	btfss	___ftpack@exp,0,c
 11284  003B6A  9E02               	bcf	___ftpack@arg+1,7,c
 11285  003B6C  90D8               	bcf	status,0,c
 11286  003B6E  3204               	rrcf	___ftpack@exp,f,c
 11287  003B70  5004               	movf	___ftpack@exp,w,c
 11288  003B72  1203               	iorwf	___ftpack@arg+2,f,c
 11289  003B74  5005               	movf	___ftpack@sign,w,c
 11290  003B76  A4D8               	btfss	status,2,c
 11291  003B78  8E03               	bsf	___ftpack@arg+2,7,c
 11292  003B7A  C001  F001         	movff	___ftpack@arg,?___ftpack
 11293  003B7E  C002  F002         	movff	___ftpack@arg+1,?___ftpack+1
 11294  003B82  C003  F003         	movff	___ftpack@arg+2,?___ftpack+2
 11295  003B86                     i2l1113:
 11296  003B86  0012               	return	
 11297  003B88                     __end_of___ftpack:
 11298                           	opt stack 0
 11299                           tosu	equ	0xFFF
 11300                           tosh	equ	0xFFE
 11301                           tosl	equ	0xFFD
 11302                           pclatu	equ	0xFFB
 11303                           pclath	equ	0xFFA
 11304                           tblptru	equ	0xFF8
 11305                           tblptrh	equ	0xFF7
 11306                           tblptrl	equ	0xFF6
 11307                           tablat	equ	0xFF5
 11308                           prodh	equ	0xFF4
 11309                           prodl	equ	0xFF3
 11310                           intcon	equ	0xFF2
 11311                           intcon2	equ	0xFF1
 11312                           indf0	equ	0xFEF
 11313                           postinc0	equ	0xFEE
 11314                           fsr0h	equ	0xFEA
 11315                           fsr0l	equ	0xFE9
 11316                           wreg	equ	0xFE8
 11317                           postinc1	equ	0xFE6
 11318                           postdec1	equ	0xFE5
 11319                           fsr1h	equ	0xFE2
 11320                           fsr1l	equ	0xFE1
 11321                           indf2	equ	0xFDF
 11322                           postinc2	equ	0xFDE
 11323                           postdec2	equ	0xFDD
 11324                           fsr2h	equ	0xFDA
 11325                           fsr2l	equ	0xFD9
 11326                           status	equ	0xFD8
 11327                           
 11328 ;; *************** function _buttons *****************
 11329 ;; Defined at:
 11330 ;;		line 23 in file "buttons.c"
 11331 ;; Parameters:    Size  Location     Type
 11332 ;;		None
 11333 ;; Auto vars:     Size  Location     Type
 11334 ;;		None
 11335 ;; Return value:  Size  Location     Type
 11336 ;;		None               void
 11337 ;; Registers used:
 11338 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11339 ;; Tracked objects:
 11340 ;;		On entry : 0/0
 11341 ;;		On exit  : 0/0
 11342 ;;		Unchanged: 0/0
 11343 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11344 ;;      Params:         0       0       0       0       0       0       0       0       0
 11345 ;;      Locals:         0       0       0       0       0       0       0       0       0
 11346 ;;      Temps:          8       0       0       0       0       0       0       0       0
 11347 ;;      Totals:         8       0       0       0       0       0       0       0       0
 11348 ;;Total ram usage:        8 bytes
 11349 ;; Hardware stack levels used:    1
 11350 ;; Hardware stack levels required when called:    5
 11351 ;; This function calls:
 11352 ;;		_advMenu
 11353 ;;		_advState
 11354 ;; This function is called by:
 11355 ;;		_isr
 11356 ;; This function uses a non-reentrant model
 11357 ;;
 11358                           
 11359                           	psect	text37
 11360  000EC8                     __ptext37:
 11361                           	opt stack 0
 11362  000EC8                     _buttons:
 11363                           	opt stack 21
 11364                           
 11365                           ;buttons.c: 25: waitcnt++;
 11366                           
 11367                           ;incstack = 0
 11368  000EC8  0E01               	movlw	1
 11369  000ECA  0100               	movlb	0	; () banked
 11370  000ECC  27B5               	addwf	_waitcnt& (0+255),f,b
 11371  000ECE  0E00               	movlw	0
 11372  000ED0  0100               	movlb	0	; () banked
 11373  000ED2  23B6               	addwfc	(_waitcnt+1)& (0+255),f,b
 11374  000ED4  0100               	movlb	0	; () banked
 11375  000ED6  23B7               	addwfc	(_waitcnt+2)& (0+255),f,b
 11376  000ED8  0100               	movlb	0	; () banked
 11377  000EDA  23B8               	addwfc	(_waitcnt+3)& (0+255),f,b
 11378                           
 11379                           ; BSR set to: 0
 11380                           ;buttons.c: 28: if ((( PORTB) & 0b1) && ((int32_t) (waitCnt[0] - waitcnt) <= 0))
 11381  000EDC  A081               	btfss	3969,0,c	;volatile
 11382  000EDE  D051               	goto	i2l5274
 11383                           
 11384                           ; BSR set to: 0
 11385  000EE0  0100               	movlb	0	; () banked
 11386  000EE2  C0B5  F028         	movff	_waitcnt,??_buttons
 11387  000EE6  0100               	movlb	0	; () banked
 11388  000EE8  C0B6  F029         	movff	_waitcnt+1,??_buttons+1
 11389  000EEC  0100               	movlb	0	; () banked
 11390  000EEE  C0B7  F02A         	movff	_waitcnt+2,??_buttons+2
 11391  000EF2  0100               	movlb	0	; () banked
 11392  000EF4  C0B8  F02B         	movff	_waitcnt+3,??_buttons+3
 11393  000EF8  1E28               	comf	??_buttons,f,c
 11394  000EFA  1E29               	comf	??_buttons+1,f,c
 11395  000EFC  1E2A               	comf	??_buttons+2,f,c
 11396  000EFE  1E2B               	comf	??_buttons+3,f,c
 11397  000F00  2A28               	incf	??_buttons,f,c
 11398  000F02  0E00               	movlw	0
 11399  000F04  2229               	addwfc	??_buttons+1,f,c
 11400  000F06  222A               	addwfc	??_buttons+2,f,c
 11401  000F08  222B               	addwfc	??_buttons+3,f,c
 11402  000F0A  0101               	movlb	1	; () banked
 11403  000F0C  5100               	movf	_waitCnt& (0+255),w,b
 11404  000F0E  2428               	addwf	??_buttons,w,c
 11405  000F10  6E2C               	movwf	(??_buttons+4)& (0+255),c
 11406  000F12  0101               	movlb	1	; () banked
 11407  000F14  5101               	movf	(_waitCnt+1)& (0+255),w,b
 11408  000F16  2029               	addwfc	??_buttons+1,w,c
 11409  000F18  6E2D               	movwf	(??_buttons+5)& (0+255),c
 11410  000F1A  0101               	movlb	1	; () banked
 11411  000F1C  5102               	movf	(_waitCnt+2)& (0+255),w,b
 11412  000F1E  202A               	addwfc	??_buttons+2,w,c
 11413  000F20  6E2E               	movwf	(??_buttons+6)& (0+255),c
 11414  000F22  0101               	movlb	1	; () banked
 11415  000F24  5103               	movf	(_waitCnt+3)& (0+255),w,b
 11416  000F26  202B               	addwfc	??_buttons+3,w,c
 11417  000F28  6E2F               	movwf	(??_buttons+7)& (0+255),c
 11418  000F2A  502F               	movf	??_buttons+7,w,c
 11419  000F2C  0A80               	xorlw	128
 11420  000F2E  0F80               	addlw	128
 11421  000F30  E108               	bnz	i2u553_45
 11422  000F32  0E00               	movlw	0
 11423  000F34  5C2E               	subwf	??_buttons+6,w,c
 11424  000F36  E105               	bnz	i2u553_45
 11425  000F38  0E00               	movlw	0
 11426  000F3A  5C2D               	subwf	??_buttons+5,w,c
 11427  000F3C  E102               	bnz	i2u553_45
 11428  000F3E  0E01               	movlw	1
 11429  000F40  5C2C               	subwf	??_buttons+4,w,c
 11430  000F42                     i2u553_45:
 11431  000F42  B0D8               	btfsc	status,0,c
 11432  000F44  D01E               	goto	i2l5274
 11433                           
 11434                           ; BSR set to: 1
 11435                           ;buttons.c: 29: {
 11436                           ;buttons.c: 30: waitCnt[0] = waitcnt + 150;
 11437  000F46  0E96               	movlw	150
 11438  000F48  0100               	movlb	0	; () banked
 11439  000F4A  25B5               	addwf	_waitcnt& (0+255),w,b
 11440  000F4C  0101               	movlb	1	; () banked
 11441  000F4E  6F00               	movwf	_waitCnt& (0+255),b
 11442  000F50  0E00               	movlw	0
 11443  000F52  0100               	movlb	0	; () banked
 11444  000F54  21B6               	addwfc	(_waitcnt+1)& (0+255),w,b
 11445  000F56  0101               	movlb	1	; () banked
 11446  000F58  6F01               	movwf	(_waitCnt+1)& (0+255),b
 11447  000F5A  0E00               	movlw	0
 11448  000F5C  0100               	movlb	0	; () banked
 11449  000F5E  21B7               	addwfc	(_waitcnt+2)& (0+255),w,b
 11450  000F60  0101               	movlb	1	; () banked
 11451  000F62  6F02               	movwf	(_waitCnt+2)& (0+255),b
 11452  000F64  0E00               	movlw	0
 11453  000F66  0100               	movlb	0	; () banked
 11454  000F68  21B8               	addwfc	(_waitcnt+3)& (0+255),w,b
 11455  000F6A  0101               	movlb	1	; () banked
 11456  000F6C  6F03               	movwf	(_waitCnt+3)& (0+255),b
 11457                           
 11458                           ; BSR set to: 1
 11459                           ;buttons.c: 31: LATC7 = advState();
 11460  000F6E  ECD3  F01B         	call	_advState	;wreg free
 11461  000F72  6E28               	movwf	??_buttons& (0+255),c
 11462  000F74  3028               	rrcf	??_buttons,w,c
 11463  000F76  A0D8               	btfss	status,0,c
 11464  000F78  D001               	bra	i2u554_45
 11465  000F7A  8E8B               	bsf	3979,7,c	;volatile
 11466  000F7C                     i2u554_45:
 11467  000F7C  B0D8               	btfsc	status,0,c
 11468  000F7E  D001               	bra	i2u554_46
 11469  000F80  9E8B               	bcf	3979,7,c	;volatile
 11470  000F82                     i2u554_46:
 11471  000F82                     i2l5274:
 11472                           
 11473                           ;buttons.c: 32: }
 11474                           ;buttons.c: 33: if ((( PORTB) & 0b10) && ((int32_t) (waitCnt[1] - waitcnt) <= 0))
 11475  000F82  A281               	btfss	3969,1,c	;volatile
 11476  000F84  D058               	goto	i2l5282
 11477  000F86  0100               	movlb	0	; () banked
 11478  000F88  C0B5  F028         	movff	_waitcnt,??_buttons
 11479  000F8C  0100               	movlb	0	; () banked
 11480  000F8E  C0B6  F029         	movff	_waitcnt+1,??_buttons+1
 11481  000F92  0100               	movlb	0	; () banked
 11482  000F94  C0B7  F02A         	movff	_waitcnt+2,??_buttons+2
 11483  000F98  0100               	movlb	0	; () banked
 11484  000F9A  C0B8  F02B         	movff	_waitcnt+3,??_buttons+3
 11485  000F9E  1E28               	comf	??_buttons,f,c
 11486  000FA0  1E29               	comf	??_buttons+1,f,c
 11487  000FA2  1E2A               	comf	??_buttons+2,f,c
 11488  000FA4  1E2B               	comf	??_buttons+3,f,c
 11489  000FA6  2A28               	incf	??_buttons,f,c
 11490  000FA8  0E00               	movlw	0
 11491  000FAA  2229               	addwfc	??_buttons+1,f,c
 11492  000FAC  222A               	addwfc	??_buttons+2,f,c
 11493  000FAE  222B               	addwfc	??_buttons+3,f,c
 11494  000FB0  0101               	movlb	1	; () banked
 11495  000FB2  5104               	movf	(_waitCnt+4)& (0+255),w,b
 11496  000FB4  2428               	addwf	??_buttons,w,c
 11497  000FB6  6E2C               	movwf	(??_buttons+4)& (0+255),c
 11498  000FB8  0101               	movlb	1	; () banked
 11499  000FBA  5105               	movf	(_waitCnt+5)& (0+255),w,b
 11500  000FBC  2029               	addwfc	??_buttons+1,w,c
 11501  000FBE  6E2D               	movwf	(??_buttons+5)& (0+255),c
 11502  000FC0  0101               	movlb	1	; () banked
 11503  000FC2  5106               	movf	(_waitCnt+6)& (0+255),w,b
 11504  000FC4  202A               	addwfc	??_buttons+2,w,c
 11505  000FC6  6E2E               	movwf	(??_buttons+6)& (0+255),c
 11506  000FC8  0101               	movlb	1	; () banked
 11507  000FCA  5107               	movf	(_waitCnt+7)& (0+255),w,b
 11508  000FCC  202B               	addwfc	??_buttons+3,w,c
 11509  000FCE  6E2F               	movwf	(??_buttons+7)& (0+255),c
 11510  000FD0  502F               	movf	??_buttons+7,w,c
 11511  000FD2  0A80               	xorlw	128
 11512  000FD4  0F80               	addlw	128
 11513  000FD6  E108               	bnz	i2u556_45
 11514  000FD8  0E00               	movlw	0
 11515  000FDA  5C2E               	subwf	??_buttons+6,w,c
 11516  000FDC  E105               	bnz	i2u556_45
 11517  000FDE  0E00               	movlw	0
 11518  000FE0  5C2D               	subwf	??_buttons+5,w,c
 11519  000FE2  E102               	bnz	i2u556_45
 11520  000FE4  0E01               	movlw	1
 11521  000FE6  5C2C               	subwf	??_buttons+4,w,c
 11522  000FE8                     i2u556_45:
 11523  000FE8  B0D8               	btfsc	status,0,c
 11524  000FEA  D025               	goto	i2l5282
 11525                           
 11526                           ; BSR set to: 1
 11527                           ;buttons.c: 34: {
 11528                           ;buttons.c: 35: waitCnt[1] = waitcnt + 150;
 11529  000FEC  0E96               	movlw	150
 11530  000FEE  0100               	movlb	0	; () banked
 11531  000FF0  25B5               	addwf	_waitcnt& (0+255),w,b
 11532  000FF2  0101               	movlb	1	; () banked
 11533  000FF4  6F04               	movwf	(_waitCnt+4)& (0+255),b
 11534  000FF6  0E00               	movlw	0
 11535  000FF8  0100               	movlb	0	; () banked
 11536  000FFA  21B6               	addwfc	(_waitcnt+1)& (0+255),w,b
 11537  000FFC  0101               	movlb	1	; () banked
 11538  000FFE  6F05               	movwf	(_waitCnt+5)& (0+255),b
 11539  001000  0E00               	movlw	0
 11540  001002  0100               	movlb	0	; () banked
 11541  001004  21B7               	addwfc	(_waitcnt+2)& (0+255),w,b
 11542  001006  0101               	movlb	1	; () banked
 11543  001008  6F06               	movwf	(_waitCnt+6)& (0+255),b
 11544  00100A  0E00               	movlw	0
 11545  00100C  0100               	movlb	0	; () banked
 11546  00100E  21B8               	addwfc	(_waitcnt+3)& (0+255),w,b
 11547  001010  0101               	movlb	1	; () banked
 11548  001012  6F07               	movwf	(_waitCnt+7)& (0+255),b
 11549                           
 11550                           ;buttons.c: 36: screen.brightness++;
 11551  001014  0E01               	movlw	1
 11552  001016  6E28               	movwf	??_buttons& (0+255),c
 11553  001018  0100               	movlb	0	; () banked
 11554  00101A  51DC               	movf	(_screen+9)& (0+255),w,b
 11555  00101C  0B0F               	andlw	15
 11556  00101E  6E29               	movwf	(??_buttons+1)& (0+255),c
 11557  001020  5028               	movf	??_buttons,w,c
 11558  001022  2629               	addwf	??_buttons+1,f,c
 11559  001024  0100               	movlb	0	; () banked
 11560  001026  51DC               	movf	(_screen+9)& (0+255),w,b
 11561  001028  1829               	xorwf	(??_buttons+1)& (0+255),w,c
 11562  00102A  0BF0               	andlw	-16
 11563  00102C  1829               	xorwf	(??_buttons+1)& (0+255),w,c
 11564  00102E  0100               	movlb	0	; () banked
 11565  001030  6FDC               	movwf	(_screen+9)& (0+255),b
 11566                           
 11567                           ; BSR set to: 0
 11568                           ;buttons.c: 37: screen.changed |= (1 << 10);
 11569  001032  0100               	movlb	0	; () banked
 11570  001034  85DF               	bsf	(_screen+12)& (0+255),2,b
 11571  001036                     i2l5282:
 11572                           
 11573                           ;buttons.c: 38: }
 11574                           ;buttons.c: 39: if ((( PORTB) & 0b100) && ((int32_t) (waitCnt[2] - waitcnt) <= 0))
 11575  001036  A481               	btfss	3969,2,c	;volatile
 11576  001038  D049               	goto	i2l5290
 11577  00103A  0100               	movlb	0	; () banked
 11578  00103C  C0B5  F028         	movff	_waitcnt,??_buttons
 11579  001040  0100               	movlb	0	; () banked
 11580  001042  C0B6  F029         	movff	_waitcnt+1,??_buttons+1
 11581  001046  0100               	movlb	0	; () banked
 11582  001048  C0B7  F02A         	movff	_waitcnt+2,??_buttons+2
 11583  00104C  0100               	movlb	0	; () banked
 11584  00104E  C0B8  F02B         	movff	_waitcnt+3,??_buttons+3
 11585  001052  1E28               	comf	??_buttons,f,c
 11586  001054  1E29               	comf	??_buttons+1,f,c
 11587  001056  1E2A               	comf	??_buttons+2,f,c
 11588  001058  1E2B               	comf	??_buttons+3,f,c
 11589  00105A  2A28               	incf	??_buttons,f,c
 11590  00105C  0E00               	movlw	0
 11591  00105E  2229               	addwfc	??_buttons+1,f,c
 11592  001060  222A               	addwfc	??_buttons+2,f,c
 11593  001062  222B               	addwfc	??_buttons+3,f,c
 11594  001064  0101               	movlb	1	; () banked
 11595  001066  5108               	movf	(_waitCnt+8)& (0+255),w,b
 11596  001068  2428               	addwf	??_buttons,w,c
 11597  00106A  6E2C               	movwf	(??_buttons+4)& (0+255),c
 11598  00106C  0101               	movlb	1	; () banked
 11599  00106E  5109               	movf	(_waitCnt+9)& (0+255),w,b
 11600  001070  2029               	addwfc	??_buttons+1,w,c
 11601  001072  6E2D               	movwf	(??_buttons+5)& (0+255),c
 11602  001074  0101               	movlb	1	; () banked
 11603  001076  510A               	movf	(_waitCnt+10)& (0+255),w,b
 11604  001078  202A               	addwfc	??_buttons+2,w,c
 11605  00107A  6E2E               	movwf	(??_buttons+6)& (0+255),c
 11606  00107C  0101               	movlb	1	; () banked
 11607  00107E  510B               	movf	(_waitCnt+11)& (0+255),w,b
 11608  001080  202B               	addwfc	??_buttons+3,w,c
 11609  001082  6E2F               	movwf	(??_buttons+7)& (0+255),c
 11610  001084  502F               	movf	??_buttons+7,w,c
 11611  001086  0A80               	xorlw	128
 11612  001088  0F80               	addlw	128
 11613  00108A  E108               	bnz	i2u558_45
 11614  00108C  0E00               	movlw	0
 11615  00108E  5C2E               	subwf	??_buttons+6,w,c
 11616  001090  E105               	bnz	i2u558_45
 11617  001092  0E00               	movlw	0
 11618  001094  5C2D               	subwf	??_buttons+5,w,c
 11619  001096  E102               	bnz	i2u558_45
 11620  001098  0E01               	movlw	1
 11621  00109A  5C2C               	subwf	??_buttons+4,w,c
 11622  00109C                     i2u558_45:
 11623  00109C  B0D8               	btfsc	status,0,c
 11624  00109E  D016               	goto	i2l5290
 11625                           
 11626                           ; BSR set to: 1
 11627                           ;buttons.c: 40: {
 11628                           ;buttons.c: 41: waitCnt[2] = waitcnt + 150;
 11629  0010A0  0E96               	movlw	150
 11630  0010A2  0100               	movlb	0	; () banked
 11631  0010A4  25B5               	addwf	_waitcnt& (0+255),w,b
 11632  0010A6  0101               	movlb	1	; () banked
 11633  0010A8  6F08               	movwf	(_waitCnt+8)& (0+255),b
 11634  0010AA  0E00               	movlw	0
 11635  0010AC  0100               	movlb	0	; () banked
 11636  0010AE  21B6               	addwfc	(_waitcnt+1)& (0+255),w,b
 11637  0010B0  0101               	movlb	1	; () banked
 11638  0010B2  6F09               	movwf	(_waitCnt+9)& (0+255),b
 11639  0010B4  0E00               	movlw	0
 11640  0010B6  0100               	movlb	0	; () banked
 11641  0010B8  21B7               	addwfc	(_waitcnt+2)& (0+255),w,b
 11642  0010BA  0101               	movlb	1	; () banked
 11643  0010BC  6F0A               	movwf	(_waitCnt+10)& (0+255),b
 11644  0010BE  0E00               	movlw	0
 11645  0010C0  0100               	movlb	0	; () banked
 11646  0010C2  21B8               	addwfc	(_waitcnt+3)& (0+255),w,b
 11647  0010C4  0101               	movlb	1	; () banked
 11648  0010C6  6F0B               	movwf	(_waitCnt+11)& (0+255),b
 11649                           
 11650                           ; BSR set to: 1
 11651                           ;buttons.c: 42: advMenu();
 11652  0010C8  EC83  F01F         	call	_advMenu	;wreg free
 11653  0010CC                     i2l5290:
 11654                           
 11655                           ;buttons.c: 43: }
 11656                           ;buttons.c: 44: if ((( PORTB) & 0b1000) && ((int32_t) (waitCnt[3] - waitcnt) <= 0))
 11657  0010CC  A681               	btfss	3969,3,c	;volatile
 11658  0010CE  D058               	goto	i2l5298
 11659  0010D0  0100               	movlb	0	; () banked
 11660  0010D2  C0B5  F028         	movff	_waitcnt,??_buttons
 11661  0010D6  0100               	movlb	0	; () banked
 11662  0010D8  C0B6  F029         	movff	_waitcnt+1,??_buttons+1
 11663  0010DC  0100               	movlb	0	; () banked
 11664  0010DE  C0B7  F02A         	movff	_waitcnt+2,??_buttons+2
 11665  0010E2  0100               	movlb	0	; () banked
 11666  0010E4  C0B8  F02B         	movff	_waitcnt+3,??_buttons+3
 11667  0010E8  1E28               	comf	??_buttons,f,c
 11668  0010EA  1E29               	comf	??_buttons+1,f,c
 11669  0010EC  1E2A               	comf	??_buttons+2,f,c
 11670  0010EE  1E2B               	comf	??_buttons+3,f,c
 11671  0010F0  2A28               	incf	??_buttons,f,c
 11672  0010F2  0E00               	movlw	0
 11673  0010F4  2229               	addwfc	??_buttons+1,f,c
 11674  0010F6  222A               	addwfc	??_buttons+2,f,c
 11675  0010F8  222B               	addwfc	??_buttons+3,f,c
 11676  0010FA  0101               	movlb	1	; () banked
 11677  0010FC  510C               	movf	(_waitCnt+12)& (0+255),w,b
 11678  0010FE  2428               	addwf	??_buttons,w,c
 11679  001100  6E2C               	movwf	(??_buttons+4)& (0+255),c
 11680  001102  0101               	movlb	1	; () banked
 11681  001104  510D               	movf	(_waitCnt+13)& (0+255),w,b
 11682  001106  2029               	addwfc	??_buttons+1,w,c
 11683  001108  6E2D               	movwf	(??_buttons+5)& (0+255),c
 11684  00110A  0101               	movlb	1	; () banked
 11685  00110C  510E               	movf	(_waitCnt+14)& (0+255),w,b
 11686  00110E  202A               	addwfc	??_buttons+2,w,c
 11687  001110  6E2E               	movwf	(??_buttons+6)& (0+255),c
 11688  001112  0101               	movlb	1	; () banked
 11689  001114  510F               	movf	(_waitCnt+15)& (0+255),w,b
 11690  001116  202B               	addwfc	??_buttons+3,w,c
 11691  001118  6E2F               	movwf	(??_buttons+7)& (0+255),c
 11692  00111A  502F               	movf	??_buttons+7,w,c
 11693  00111C  0A80               	xorlw	128
 11694  00111E  0F80               	addlw	128
 11695  001120  E108               	bnz	i2u560_45
 11696  001122  0E00               	movlw	0
 11697  001124  5C2E               	subwf	??_buttons+6,w,c
 11698  001126  E105               	bnz	i2u560_45
 11699  001128  0E00               	movlw	0
 11700  00112A  5C2D               	subwf	??_buttons+5,w,c
 11701  00112C  E102               	bnz	i2u560_45
 11702  00112E  0E01               	movlw	1
 11703  001130  5C2C               	subwf	??_buttons+4,w,c
 11704  001132                     i2u560_45:
 11705  001132  B0D8               	btfsc	status,0,c
 11706  001134  D025               	goto	i2l5298
 11707                           
 11708                           ; BSR set to: 1
 11709                           ;buttons.c: 45: {
 11710                           ;buttons.c: 46: waitCnt[3] = waitcnt + 150;
 11711  001136  0E96               	movlw	150
 11712  001138  0100               	movlb	0	; () banked
 11713  00113A  25B5               	addwf	_waitcnt& (0+255),w,b
 11714  00113C  0101               	movlb	1	; () banked
 11715  00113E  6F0C               	movwf	(_waitCnt+12)& (0+255),b
 11716  001140  0E00               	movlw	0
 11717  001142  0100               	movlb	0	; () banked
 11718  001144  21B6               	addwfc	(_waitcnt+1)& (0+255),w,b
 11719  001146  0101               	movlb	1	; () banked
 11720  001148  6F0D               	movwf	(_waitCnt+13)& (0+255),b
 11721  00114A  0E00               	movlw	0
 11722  00114C  0100               	movlb	0	; () banked
 11723  00114E  21B7               	addwfc	(_waitcnt+2)& (0+255),w,b
 11724  001150  0101               	movlb	1	; () banked
 11725  001152  6F0E               	movwf	(_waitCnt+14)& (0+255),b
 11726  001154  0E00               	movlw	0
 11727  001156  0100               	movlb	0	; () banked
 11728  001158  21B8               	addwfc	(_waitcnt+3)& (0+255),w,b
 11729  00115A  0101               	movlb	1	; () banked
 11730  00115C  6F0F               	movwf	(_waitCnt+15)& (0+255),b
 11731                           
 11732                           ;buttons.c: 47: screen.brightness--;
 11733  00115E  0E01               	movlw	1
 11734  001160  6E28               	movwf	??_buttons& (0+255),c
 11735  001162  0100               	movlb	0	; () banked
 11736  001164  51DC               	movf	(_screen+9)& (0+255),w,b
 11737  001166  0B0F               	andlw	15
 11738  001168  6E29               	movwf	(??_buttons+1)& (0+255),c
 11739  00116A  5028               	movf	??_buttons,w,c
 11740  00116C  5E29               	subwf	??_buttons+1,f,c
 11741  00116E  0100               	movlb	0	; () banked
 11742  001170  51DC               	movf	(_screen+9)& (0+255),w,b
 11743  001172  1829               	xorwf	(??_buttons+1)& (0+255),w,c
 11744  001174  0BF0               	andlw	-16
 11745  001176  1829               	xorwf	(??_buttons+1)& (0+255),w,c
 11746  001178  0100               	movlb	0	; () banked
 11747  00117A  6FDC               	movwf	(_screen+9)& (0+255),b
 11748                           
 11749                           ; BSR set to: 0
 11750                           ;buttons.c: 48: screen.changed |= (1 << 10);
 11751  00117C  0100               	movlb	0	; () banked
 11752  00117E  85DF               	bsf	(_screen+12)& (0+255),2,b
 11753  001180                     i2l5298:
 11754                           
 11755                           ;buttons.c: 49: }
 11756                           ;buttons.c: 50: if ((( PORTB) & 0b10000) && ((int32_t) (waitCnt[4] - waitcnt) <= 0))
 11757  001180  A881               	btfss	3969,4,c	;volatile
 11758  001182  D047               	goto	i2l5304
 11759  001184  0100               	movlb	0	; () banked
 11760  001186  C0B5  F028         	movff	_waitcnt,??_buttons
 11761  00118A  0100               	movlb	0	; () banked
 11762  00118C  C0B6  F029         	movff	_waitcnt+1,??_buttons+1
 11763  001190  0100               	movlb	0	; () banked
 11764  001192  C0B7  F02A         	movff	_waitcnt+2,??_buttons+2
 11765  001196  0100               	movlb	0	; () banked
 11766  001198  C0B8  F02B         	movff	_waitcnt+3,??_buttons+3
 11767  00119C  1E28               	comf	??_buttons,f,c
 11768  00119E  1E29               	comf	??_buttons+1,f,c
 11769  0011A0  1E2A               	comf	??_buttons+2,f,c
 11770  0011A2  1E2B               	comf	??_buttons+3,f,c
 11771  0011A4  2A28               	incf	??_buttons,f,c
 11772  0011A6  0E00               	movlw	0
 11773  0011A8  2229               	addwfc	??_buttons+1,f,c
 11774  0011AA  222A               	addwfc	??_buttons+2,f,c
 11775  0011AC  222B               	addwfc	??_buttons+3,f,c
 11776  0011AE  0101               	movlb	1	; () banked
 11777  0011B0  5110               	movf	(_waitCnt+16)& (0+255),w,b
 11778  0011B2  2428               	addwf	??_buttons,w,c
 11779  0011B4  6E2C               	movwf	(??_buttons+4)& (0+255),c
 11780  0011B6  0101               	movlb	1	; () banked
 11781  0011B8  5111               	movf	(_waitCnt+17)& (0+255),w,b
 11782  0011BA  2029               	addwfc	??_buttons+1,w,c
 11783  0011BC  6E2D               	movwf	(??_buttons+5)& (0+255),c
 11784  0011BE  0101               	movlb	1	; () banked
 11785  0011C0  5112               	movf	(_waitCnt+18)& (0+255),w,b
 11786  0011C2  202A               	addwfc	??_buttons+2,w,c
 11787  0011C4  6E2E               	movwf	(??_buttons+6)& (0+255),c
 11788  0011C6  0101               	movlb	1	; () banked
 11789  0011C8  5113               	movf	(_waitCnt+19)& (0+255),w,b
 11790  0011CA  202B               	addwfc	??_buttons+3,w,c
 11791  0011CC  6E2F               	movwf	(??_buttons+7)& (0+255),c
 11792  0011CE  502F               	movf	??_buttons+7,w,c
 11793  0011D0  0A80               	xorlw	128
 11794  0011D2  0F80               	addlw	128
 11795  0011D4  E108               	bnz	i2u562_45
 11796  0011D6  0E00               	movlw	0
 11797  0011D8  5C2E               	subwf	??_buttons+6,w,c
 11798  0011DA  E105               	bnz	i2u562_45
 11799  0011DC  0E00               	movlw	0
 11800  0011DE  5C2D               	subwf	??_buttons+5,w,c
 11801  0011E0  E102               	bnz	i2u562_45
 11802  0011E2  0E01               	movlw	1
 11803  0011E4  5C2C               	subwf	??_buttons+4,w,c
 11804  0011E6                     i2u562_45:
 11805  0011E6  B0D8               	btfsc	status,0,c
 11806  0011E8  D014               	goto	i2l5304
 11807                           
 11808                           ; BSR set to: 1
 11809                           ;buttons.c: 51: {
 11810                           ;buttons.c: 52: waitCnt[4] = waitcnt + 150;
 11811  0011EA  0E96               	movlw	150
 11812  0011EC  0100               	movlb	0	; () banked
 11813  0011EE  25B5               	addwf	_waitcnt& (0+255),w,b
 11814  0011F0  0101               	movlb	1	; () banked
 11815  0011F2  6F10               	movwf	(_waitCnt+16)& (0+255),b
 11816  0011F4  0E00               	movlw	0
 11817  0011F6  0100               	movlb	0	; () banked
 11818  0011F8  21B6               	addwfc	(_waitcnt+1)& (0+255),w,b
 11819  0011FA  0101               	movlb	1	; () banked
 11820  0011FC  6F11               	movwf	(_waitCnt+17)& (0+255),b
 11821  0011FE  0E00               	movlw	0
 11822  001200  0100               	movlb	0	; () banked
 11823  001202  21B7               	addwfc	(_waitcnt+2)& (0+255),w,b
 11824  001204  0101               	movlb	1	; () banked
 11825  001206  6F12               	movwf	(_waitCnt+18)& (0+255),b
 11826  001208  0E00               	movlw	0
 11827  00120A  0100               	movlb	0	; () banked
 11828  00120C  21B8               	addwfc	(_waitcnt+3)& (0+255),w,b
 11829  00120E  0101               	movlb	1	; () banked
 11830  001210  6F13               	movwf	(_waitCnt+19)& (0+255),b
 11831  001212                     i2l5304:
 11832                           
 11833                           ;buttons.c: 53: }
 11834                           ;buttons.c: 54: if ((( PORTB) & 0b100000) && ((int32_t) (waitCnt[5] - waitcnt) <= 0))
 11835  001212  AA81               	btfss	3969,5,c	;volatile
 11836  001214  D047               	goto	i2l5310
 11837  001216  0100               	movlb	0	; () banked
 11838  001218  C0B5  F028         	movff	_waitcnt,??_buttons
 11839  00121C  0100               	movlb	0	; () banked
 11840  00121E  C0B6  F029         	movff	_waitcnt+1,??_buttons+1
 11841  001222  0100               	movlb	0	; () banked
 11842  001224  C0B7  F02A         	movff	_waitcnt+2,??_buttons+2
 11843  001228  0100               	movlb	0	; () banked
 11844  00122A  C0B8  F02B         	movff	_waitcnt+3,??_buttons+3
 11845  00122E  1E28               	comf	??_buttons,f,c
 11846  001230  1E29               	comf	??_buttons+1,f,c
 11847  001232  1E2A               	comf	??_buttons+2,f,c
 11848  001234  1E2B               	comf	??_buttons+3,f,c
 11849  001236  2A28               	incf	??_buttons,f,c
 11850  001238  0E00               	movlw	0
 11851  00123A  2229               	addwfc	??_buttons+1,f,c
 11852  00123C  222A               	addwfc	??_buttons+2,f,c
 11853  00123E  222B               	addwfc	??_buttons+3,f,c
 11854  001240  0101               	movlb	1	; () banked
 11855  001242  5114               	movf	(_waitCnt+20)& (0+255),w,b
 11856  001244  2428               	addwf	??_buttons,w,c
 11857  001246  6E2C               	movwf	(??_buttons+4)& (0+255),c
 11858  001248  0101               	movlb	1	; () banked
 11859  00124A  5115               	movf	(_waitCnt+21)& (0+255),w,b
 11860  00124C  2029               	addwfc	??_buttons+1,w,c
 11861  00124E  6E2D               	movwf	(??_buttons+5)& (0+255),c
 11862  001250  0101               	movlb	1	; () banked
 11863  001252  5116               	movf	(_waitCnt+22)& (0+255),w,b
 11864  001254  202A               	addwfc	??_buttons+2,w,c
 11865  001256  6E2E               	movwf	(??_buttons+6)& (0+255),c
 11866  001258  0101               	movlb	1	; () banked
 11867  00125A  5117               	movf	(_waitCnt+23)& (0+255),w,b
 11868  00125C  202B               	addwfc	??_buttons+3,w,c
 11869  00125E  6E2F               	movwf	(??_buttons+7)& (0+255),c
 11870  001260  502F               	movf	??_buttons+7,w,c
 11871  001262  0A80               	xorlw	128
 11872  001264  0F80               	addlw	128
 11873  001266  E108               	bnz	i2u564_45
 11874  001268  0E00               	movlw	0
 11875  00126A  5C2E               	subwf	??_buttons+6,w,c
 11876  00126C  E105               	bnz	i2u564_45
 11877  00126E  0E00               	movlw	0
 11878  001270  5C2D               	subwf	??_buttons+5,w,c
 11879  001272  E102               	bnz	i2u564_45
 11880  001274  0E01               	movlw	1
 11881  001276  5C2C               	subwf	??_buttons+4,w,c
 11882  001278                     i2u564_45:
 11883  001278  B0D8               	btfsc	status,0,c
 11884  00127A  D014               	goto	i2l5310
 11885                           
 11886                           ; BSR set to: 1
 11887                           ;buttons.c: 55: {
 11888                           ;buttons.c: 56: waitCnt[5] = waitcnt + 150;
 11889  00127C  0E96               	movlw	150
 11890  00127E  0100               	movlb	0	; () banked
 11891  001280  25B5               	addwf	_waitcnt& (0+255),w,b
 11892  001282  0101               	movlb	1	; () banked
 11893  001284  6F14               	movwf	(_waitCnt+20)& (0+255),b
 11894  001286  0E00               	movlw	0
 11895  001288  0100               	movlb	0	; () banked
 11896  00128A  21B6               	addwfc	(_waitcnt+1)& (0+255),w,b
 11897  00128C  0101               	movlb	1	; () banked
 11898  00128E  6F15               	movwf	(_waitCnt+21)& (0+255),b
 11899  001290  0E00               	movlw	0
 11900  001292  0100               	movlb	0	; () banked
 11901  001294  21B7               	addwfc	(_waitcnt+2)& (0+255),w,b
 11902  001296  0101               	movlb	1	; () banked
 11903  001298  6F16               	movwf	(_waitCnt+22)& (0+255),b
 11904  00129A  0E00               	movlw	0
 11905  00129C  0100               	movlb	0	; () banked
 11906  00129E  21B8               	addwfc	(_waitcnt+3)& (0+255),w,b
 11907  0012A0  0101               	movlb	1	; () banked
 11908  0012A2  6F17               	movwf	(_waitCnt+23)& (0+255),b
 11909  0012A4                     i2l5310:
 11910                           
 11911                           ;buttons.c: 57: }
 11912                           ;buttons.c: 58: if ((( PORTB) & 0b1000000) && ((int32_t) (waitCnt[6] - waitcnt) <= 0))
 11913  0012A4  AC81               	btfss	3969,6,c	;volatile
 11914  0012A6  D047               	goto	i2l5316
 11915  0012A8  0100               	movlb	0	; () banked
 11916  0012AA  C0B5  F028         	movff	_waitcnt,??_buttons
 11917  0012AE  0100               	movlb	0	; () banked
 11918  0012B0  C0B6  F029         	movff	_waitcnt+1,??_buttons+1
 11919  0012B4  0100               	movlb	0	; () banked
 11920  0012B6  C0B7  F02A         	movff	_waitcnt+2,??_buttons+2
 11921  0012BA  0100               	movlb	0	; () banked
 11922  0012BC  C0B8  F02B         	movff	_waitcnt+3,??_buttons+3
 11923  0012C0  1E28               	comf	??_buttons,f,c
 11924  0012C2  1E29               	comf	??_buttons+1,f,c
 11925  0012C4  1E2A               	comf	??_buttons+2,f,c
 11926  0012C6  1E2B               	comf	??_buttons+3,f,c
 11927  0012C8  2A28               	incf	??_buttons,f,c
 11928  0012CA  0E00               	movlw	0
 11929  0012CC  2229               	addwfc	??_buttons+1,f,c
 11930  0012CE  222A               	addwfc	??_buttons+2,f,c
 11931  0012D0  222B               	addwfc	??_buttons+3,f,c
 11932  0012D2  0101               	movlb	1	; () banked
 11933  0012D4  5118               	movf	(_waitCnt+24)& (0+255),w,b
 11934  0012D6  2428               	addwf	??_buttons,w,c
 11935  0012D8  6E2C               	movwf	(??_buttons+4)& (0+255),c
 11936  0012DA  0101               	movlb	1	; () banked
 11937  0012DC  5119               	movf	(_waitCnt+25)& (0+255),w,b
 11938  0012DE  2029               	addwfc	??_buttons+1,w,c
 11939  0012E0  6E2D               	movwf	(??_buttons+5)& (0+255),c
 11940  0012E2  0101               	movlb	1	; () banked
 11941  0012E4  511A               	movf	(_waitCnt+26)& (0+255),w,b
 11942  0012E6  202A               	addwfc	??_buttons+2,w,c
 11943  0012E8  6E2E               	movwf	(??_buttons+6)& (0+255),c
 11944  0012EA  0101               	movlb	1	; () banked
 11945  0012EC  511B               	movf	(_waitCnt+27)& (0+255),w,b
 11946  0012EE  202B               	addwfc	??_buttons+3,w,c
 11947  0012F0  6E2F               	movwf	(??_buttons+7)& (0+255),c
 11948  0012F2  502F               	movf	??_buttons+7,w,c
 11949  0012F4  0A80               	xorlw	128
 11950  0012F6  0F80               	addlw	128
 11951  0012F8  E108               	bnz	i2u566_45
 11952  0012FA  0E00               	movlw	0
 11953  0012FC  5C2E               	subwf	??_buttons+6,w,c
 11954  0012FE  E105               	bnz	i2u566_45
 11955  001300  0E00               	movlw	0
 11956  001302  5C2D               	subwf	??_buttons+5,w,c
 11957  001304  E102               	bnz	i2u566_45
 11958  001306  0E01               	movlw	1
 11959  001308  5C2C               	subwf	??_buttons+4,w,c
 11960  00130A                     i2u566_45:
 11961  00130A  B0D8               	btfsc	status,0,c
 11962  00130C  D014               	goto	i2l5316
 11963                           
 11964                           ; BSR set to: 1
 11965                           ;buttons.c: 59: {
 11966                           ;buttons.c: 60: waitCnt[6] = waitcnt + 150;
 11967  00130E  0E96               	movlw	150
 11968  001310  0100               	movlb	0	; () banked
 11969  001312  25B5               	addwf	_waitcnt& (0+255),w,b
 11970  001314  0101               	movlb	1	; () banked
 11971  001316  6F18               	movwf	(_waitCnt+24)& (0+255),b
 11972  001318  0E00               	movlw	0
 11973  00131A  0100               	movlb	0	; () banked
 11974  00131C  21B6               	addwfc	(_waitcnt+1)& (0+255),w,b
 11975  00131E  0101               	movlb	1	; () banked
 11976  001320  6F19               	movwf	(_waitCnt+25)& (0+255),b
 11977  001322  0E00               	movlw	0
 11978  001324  0100               	movlb	0	; () banked
 11979  001326  21B7               	addwfc	(_waitcnt+2)& (0+255),w,b
 11980  001328  0101               	movlb	1	; () banked
 11981  00132A  6F1A               	movwf	(_waitCnt+26)& (0+255),b
 11982  00132C  0E00               	movlw	0
 11983  00132E  0100               	movlb	0	; () banked
 11984  001330  21B8               	addwfc	(_waitcnt+3)& (0+255),w,b
 11985  001332  0101               	movlb	1	; () banked
 11986  001334  6F1B               	movwf	(_waitCnt+27)& (0+255),b
 11987  001336                     i2l5316:
 11988                           
 11989                           ;buttons.c: 61: }
 11990                           ;buttons.c: 62: if ((( PORTB) & 0b10000000) && ((int32_t) (waitCnt[7] - waitcnt) <= 0))
 11991  001336  AE81               	btfss	3969,7,c	;volatile
 11992  001338  D047               	goto	i2l5322
 11993  00133A  0100               	movlb	0	; () banked
 11994  00133C  C0B5  F028         	movff	_waitcnt,??_buttons
 11995  001340  0100               	movlb	0	; () banked
 11996  001342  C0B6  F029         	movff	_waitcnt+1,??_buttons+1
 11997  001346  0100               	movlb	0	; () banked
 11998  001348  C0B7  F02A         	movff	_waitcnt+2,??_buttons+2
 11999  00134C  0100               	movlb	0	; () banked
 12000  00134E  C0B8  F02B         	movff	_waitcnt+3,??_buttons+3
 12001  001352  1E28               	comf	??_buttons,f,c
 12002  001354  1E29               	comf	??_buttons+1,f,c
 12003  001356  1E2A               	comf	??_buttons+2,f,c
 12004  001358  1E2B               	comf	??_buttons+3,f,c
 12005  00135A  2A28               	incf	??_buttons,f,c
 12006  00135C  0E00               	movlw	0
 12007  00135E  2229               	addwfc	??_buttons+1,f,c
 12008  001360  222A               	addwfc	??_buttons+2,f,c
 12009  001362  222B               	addwfc	??_buttons+3,f,c
 12010  001364  0101               	movlb	1	; () banked
 12011  001366  511C               	movf	(_waitCnt+28)& (0+255),w,b
 12012  001368  2428               	addwf	??_buttons,w,c
 12013  00136A  6E2C               	movwf	(??_buttons+4)& (0+255),c
 12014  00136C  0101               	movlb	1	; () banked
 12015  00136E  511D               	movf	(_waitCnt+29)& (0+255),w,b
 12016  001370  2029               	addwfc	??_buttons+1,w,c
 12017  001372  6E2D               	movwf	(??_buttons+5)& (0+255),c
 12018  001374  0101               	movlb	1	; () banked
 12019  001376  511E               	movf	(_waitCnt+30)& (0+255),w,b
 12020  001378  202A               	addwfc	??_buttons+2,w,c
 12021  00137A  6E2E               	movwf	(??_buttons+6)& (0+255),c
 12022  00137C  0101               	movlb	1	; () banked
 12023  00137E  511F               	movf	(_waitCnt+31)& (0+255),w,b
 12024  001380  202B               	addwfc	??_buttons+3,w,c
 12025  001382  6E2F               	movwf	(??_buttons+7)& (0+255),c
 12026  001384  502F               	movf	??_buttons+7,w,c
 12027  001386  0A80               	xorlw	128
 12028  001388  0F80               	addlw	128
 12029  00138A  E108               	bnz	i2u568_45
 12030  00138C  0E00               	movlw	0
 12031  00138E  5C2E               	subwf	??_buttons+6,w,c
 12032  001390  E105               	bnz	i2u568_45
 12033  001392  0E00               	movlw	0
 12034  001394  5C2D               	subwf	??_buttons+5,w,c
 12035  001396  E102               	bnz	i2u568_45
 12036  001398  0E01               	movlw	1
 12037  00139A  5C2C               	subwf	??_buttons+4,w,c
 12038  00139C                     i2u568_45:
 12039  00139C  B0D8               	btfsc	status,0,c
 12040  00139E  D014               	goto	i2l5322
 12041                           
 12042                           ; BSR set to: 1
 12043                           ;buttons.c: 63: {
 12044                           ;buttons.c: 64: waitCnt[7] = waitcnt + 150;
 12045  0013A0  0E96               	movlw	150
 12046  0013A2  0100               	movlb	0	; () banked
 12047  0013A4  25B5               	addwf	_waitcnt& (0+255),w,b
 12048  0013A6  0101               	movlb	1	; () banked
 12049  0013A8  6F1C               	movwf	(_waitCnt+28)& (0+255),b
 12050  0013AA  0E00               	movlw	0
 12051  0013AC  0100               	movlb	0	; () banked
 12052  0013AE  21B6               	addwfc	(_waitcnt+1)& (0+255),w,b
 12053  0013B0  0101               	movlb	1	; () banked
 12054  0013B2  6F1D               	movwf	(_waitCnt+29)& (0+255),b
 12055  0013B4  0E00               	movlw	0
 12056  0013B6  0100               	movlb	0	; () banked
 12057  0013B8  21B7               	addwfc	(_waitcnt+2)& (0+255),w,b
 12058  0013BA  0101               	movlb	1	; () banked
 12059  0013BC  6F1E               	movwf	(_waitCnt+30)& (0+255),b
 12060  0013BE  0E00               	movlw	0
 12061  0013C0  0100               	movlb	0	; () banked
 12062  0013C2  21B8               	addwfc	(_waitcnt+3)& (0+255),w,b
 12063  0013C4  0101               	movlb	1	; () banked
 12064  0013C6  6F1F               	movwf	(_waitCnt+31)& (0+255),b
 12065  0013C8                     i2l5322:
 12066                           
 12067                           ;buttons.c: 65: }
 12068                           ;buttons.c: 66: if ( PORTB)
 12069  0013C8  5081               	movf	3969,w,c	;volatile
 12070                           
 12071                           ;buttons.c: 69: }
 12072                           ;buttons.c: 70: if (! PORTB)
 12073                           
 12074                           ;buttons.c: 67: {
 12075  0013CA  6681               	tstfsz	3969,c	;volatile
 12076  0013CC  D00C               	goto	i2l442
 12077                           
 12078                           ;buttons.c: 71: {
 12079                           ;buttons.c: 73: *waitCnt = 0;
 12080  0013CE  0E00               	movlw	0
 12081  0013D0  0101               	movlb	1	; () banked
 12082  0013D2  6F00               	movwf	_waitCnt& (0+255),b
 12083  0013D4  0E00               	movlw	0
 12084  0013D6  0101               	movlb	1	; () banked
 12085  0013D8  6F01               	movwf	(_waitCnt+1)& (0+255),b
 12086  0013DA  0E00               	movlw	0
 12087  0013DC  0101               	movlb	1	; () banked
 12088  0013DE  6F02               	movwf	(_waitCnt+2)& (0+255),b
 12089  0013E0  0E00               	movlw	0
 12090  0013E2  0101               	movlb	1	; () banked
 12091  0013E4  6F03               	movwf	(_waitCnt+3)& (0+255),b
 12092  0013E6                     i2l442:
 12093  0013E6  0012               	return	
 12094  0013E8                     __end_of_buttons:
 12095                           	opt stack 0
 12096                           tosu	equ	0xFFF
 12097                           tosh	equ	0xFFE
 12098                           tosl	equ	0xFFD
 12099                           pclatu	equ	0xFFB
 12100                           pclath	equ	0xFFA
 12101                           tblptru	equ	0xFF8
 12102                           tblptrh	equ	0xFF7
 12103                           tblptrl	equ	0xFF6
 12104                           tablat	equ	0xFF5
 12105                           prodh	equ	0xFF4
 12106                           prodl	equ	0xFF3
 12107                           intcon	equ	0xFF2
 12108                           intcon2	equ	0xFF1
 12109                           indf0	equ	0xFEF
 12110                           postinc0	equ	0xFEE
 12111                           fsr0h	equ	0xFEA
 12112                           fsr0l	equ	0xFE9
 12113                           wreg	equ	0xFE8
 12114                           postinc1	equ	0xFE6
 12115                           postdec1	equ	0xFE5
 12116                           fsr1h	equ	0xFE2
 12117                           fsr1l	equ	0xFE1
 12118                           indf2	equ	0xFDF
 12119                           postinc2	equ	0xFDE
 12120                           postdec2	equ	0xFDD
 12121                           fsr2h	equ	0xFDA
 12122                           fsr2l	equ	0xFD9
 12123                           status	equ	0xFD8
 12124                           
 12125 ;; *************** function _advState *****************
 12126 ;; Defined at:
 12127 ;;		line 6 in file "menu.c"
 12128 ;; Parameters:    Size  Location     Type
 12129 ;;		None
 12130 ;; Auto vars:     Size  Location     Type
 12131 ;;		None
 12132 ;; Return value:  Size  Location     Type
 12133 ;;                  1    wreg      unsigned char 
 12134 ;; Registers used:
 12135 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, cstack
 12136 ;; Tracked objects:
 12137 ;;		On entry : 0/0
 12138 ;;		On exit  : 0/0
 12139 ;;		Unchanged: 0/0
 12140 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12141 ;;      Params:         0       0       0       0       0       0       0       0       0
 12142 ;;      Locals:         0       0       0       0       0       0       0       0       0
 12143 ;;      Temps:          5       0       0       0       0       0       0       0       0
 12144 ;;      Totals:         5       0       0       0       0       0       0       0       0
 12145 ;;Total ram usage:        5 bytes
 12146 ;; Hardware stack levels used:    1
 12147 ;; Hardware stack levels required when called:    1
 12148 ;; This function calls:
 12149 ;;		___awmod
 12150 ;; This function is called by:
 12151 ;;		_printRTC
 12152 ;;		_buttons
 12153 ;; This function uses a non-reentrant model
 12154 ;;
 12155                           
 12156                           	psect	text38
 12157  0037A6                     __ptext38:
 12158                           	opt stack 0
 12159  0037A6                     _advState:
 12160                           	opt stack 24
 12161                           
 12162                           ;menu.c: 8: menu->state = (menu->state + 1) % menu->num_states;
 12163                           
 12164                           ;incstack = 0
 12165  0037A6  C0BC  FFD9         	movff	_menu,fsr2l
 12166  0037AA  C0BD  FFDA         	movff	_menu+1,fsr2h
 12167  0037AE  50DF               	movf	indf2,w,c
 12168  0037B0  6E07               	movwf	??_advState& (0+255),c
 12169  0037B2  0E01               	movlw	1
 12170  0037B4  2407               	addwf	??_advState,w,c
 12171  0037B6  6E01               	movwf	___awmod@dividend,c
 12172  0037B8  6A02               	clrf	___awmod@dividend+1,c
 12173  0037BA  0E00               	movlw	0
 12174  0037BC  2202               	addwfc	___awmod@dividend+1,f,c
 12175  0037BE  0100               	movlb	0	; () banked
 12176  0037C0  EE20 F002          	lfsr	2,2
 12177  0037C4  0100               	movlb	0	; () banked
 12178  0037C6  51BC               	movf	_menu& (0+255),w,b
 12179  0037C8  26D9               	addwf	fsr2l,f,c
 12180  0037CA  0100               	movlb	0	; () banked
 12181  0037CC  51BD               	movf	(_menu+1)& (0+255),w,b
 12182  0037CE  22DA               	addwfc	fsr2h,f,c
 12183  0037D0  50DF               	movf	indf2,w,c
 12184  0037D2  6E08               	movwf	(??_advState+1)& (0+255),c
 12185  0037D4  5008               	movf	??_advState+1,w,c
 12186  0037D6  6E03               	movwf	___awmod@divisor,c
 12187  0037D8  6A04               	clrf	___awmod@divisor+1,c
 12188  0037DA  ECF4  F01E         	call	___awmod	;wreg free
 12189  0037DE  5001               	movf	?___awmod,w,c
 12190  0037E0  C0BC  FFD9         	movff	_menu,fsr2l
 12191  0037E4  C0BD  FFDA         	movff	_menu+1,fsr2h
 12192  0037E8  6EDF               	movwf	indf2,c
 12193                           
 12194                           ;menu.c: 9: screen.changed |= menu->digits;
 12195  0037EA  0100               	movlb	0	; () banked
 12196  0037EC  EE20 F001          	lfsr	2,1
 12197  0037F0  0100               	movlb	0	; () banked
 12198  0037F2  51BC               	movf	_menu& (0+255),w,b
 12199  0037F4  26D9               	addwf	fsr2l,f,c
 12200  0037F6  0100               	movlb	0	; () banked
 12201  0037F8  51BD               	movf	(_menu+1)& (0+255),w,b
 12202  0037FA  22DA               	addwfc	fsr2h,f,c
 12203  0037FC  50DF               	movf	indf2,w,c
 12204  0037FE  6E07               	movwf	??_advState& (0+255),c
 12205  003800  5007               	movf	??_advState,w,c
 12206  003802  0100               	movlb	0	; () banked
 12207  003804  13DE               	iorwf	(_screen+11)& (0+255),f,b
 12208                           
 12209                           ; BSR set to: 0
 12210                           ;menu.c: 10: LATC = ((((menu->state)&(0b1<<(0)))>>(0))<<0) | ((((menu->state)&(0b1<<(1))
      +                          )>>(1))<<1) | ((((menu->state)&(0b1<<(2)))>>(2))<<2)| ((((menu->state)&(0b1<<(3)))>>(3))
      +                          <<6);
 12211  003806  C0BC  FFD9         	movff	_menu,fsr2l
 12212  00380A  C0BD  FFDA         	movff	_menu+1,fsr2h
 12213  00380E  50DF               	movf	indf2,w,c
 12214  003810  6E07               	movwf	??_advState& (0+255),c
 12215  003812  90D8               	bcf	status,0,c
 12216  003814  3207               	rrcf	??_advState,f,c
 12217  003816  90D8               	bcf	status,0,c
 12218  003818  3207               	rrcf	??_advState,f,c
 12219  00381A  90D8               	bcf	status,0,c
 12220  00381C  3207               	rrcf	??_advState,f,c
 12221  00381E  0E01               	movlw	1
 12222  003820  1607               	andwf	??_advState,f,c
 12223  003822  0E06               	movlw	6
 12224  003824  6E08               	movwf	(??_advState+1)& (0+255),c
 12225  003826                     i2u521_45:
 12226  003826  90D8               	bcf	status,0,c
 12227  003828  3607               	rlcf	??_advState,f,c
 12228  00382A  2E08               	decfsz	(??_advState+1)& (0+255),f,c
 12229  00382C  D7FC               	goto	i2u521_45
 12230  00382E  C0BC  FFD9         	movff	_menu,fsr2l
 12231  003832  C0BD  FFDA         	movff	_menu+1,fsr2h
 12232  003836  50DF               	movf	indf2,w,c
 12233  003838  6E09               	movwf	(??_advState+2)& (0+255),c
 12234  00383A  90D8               	bcf	status,0,c
 12235  00383C  3209               	rrcf	??_advState+2,f,c
 12236  00383E  90D8               	bcf	status,0,c
 12237  003840  3209               	rrcf	??_advState+2,f,c
 12238  003842  0E01               	movlw	1
 12239  003844  1609               	andwf	??_advState+2,f,c
 12240  003846  90D8               	bcf	status,0,c
 12241  003848  3609               	rlcf	??_advState+2,f,c
 12242  00384A  90D8               	bcf	status,0,c
 12243  00384C  3609               	rlcf	??_advState+2,f,c
 12244  00384E  C0BC  FFD9         	movff	_menu,fsr2l
 12245  003852  C0BD  FFDA         	movff	_menu+1,fsr2h
 12246  003856  50DF               	movf	indf2,w,c
 12247  003858  6E0A               	movwf	(??_advState+3)& (0+255),c
 12248  00385A  90D8               	bcf	status,0,c
 12249  00385C  320A               	rrcf	??_advState+3,f,c
 12250  00385E  0E01               	movlw	1
 12251  003860  160A               	andwf	??_advState+3,f,c
 12252  003862  90D8               	bcf	status,0,c
 12253  003864  340A               	rlcf	??_advState+3,w,c
 12254  003866  6E0B               	movwf	(??_advState+4)& (0+255),c
 12255  003868  C0BC  FFD9         	movff	_menu,fsr2l
 12256  00386C  C0BD  FFDA         	movff	_menu+1,fsr2h
 12257  003870  50DF               	movf	indf2,w,c
 12258  003872  0B01               	andlw	1
 12259  003874  100B               	iorwf	??_advState+4,w,c
 12260  003876  1009               	iorwf	??_advState+2,w,c
 12261  003878  1007               	iorwf	??_advState,w,c
 12262  00387A  6E8B               	movwf	3979,c	;volatile
 12263                           
 12264                           ; BSR set to: 0
 12265                           ;menu.c: 11: return menu->state;
 12266  00387C  C0BC  FFD9         	movff	_menu,fsr2l
 12267  003880  C0BD  FFDA         	movff	_menu+1,fsr2h
 12268  003884  50DF               	movf	indf2,w,c
 12269                           
 12270                           ; BSR set to: 0
 12271                           
 12272                           ; BSR set to: 0
 12273  003886  0012               	return	
 12274  003888                     __end_of_advState:
 12275                           	opt stack 0
 12276                           tosu	equ	0xFFF
 12277                           tosh	equ	0xFFE
 12278                           tosl	equ	0xFFD
 12279                           pclatu	equ	0xFFB
 12280                           pclath	equ	0xFFA
 12281                           tblptru	equ	0xFF8
 12282                           tblptrh	equ	0xFF7
 12283                           tblptrl	equ	0xFF6
 12284                           tablat	equ	0xFF5
 12285                           prodh	equ	0xFF4
 12286                           prodl	equ	0xFF3
 12287                           intcon	equ	0xFF2
 12288                           intcon2	equ	0xFF1
 12289                           indf0	equ	0xFEF
 12290                           postinc0	equ	0xFEE
 12291                           fsr0h	equ	0xFEA
 12292                           fsr0l	equ	0xFE9
 12293                           wreg	equ	0xFE8
 12294                           postinc1	equ	0xFE6
 12295                           postdec1	equ	0xFE5
 12296                           fsr1h	equ	0xFE2
 12297                           fsr1l	equ	0xFE1
 12298                           indf2	equ	0xFDF
 12299                           postinc2	equ	0xFDE
 12300                           postdec2	equ	0xFDD
 12301                           fsr2h	equ	0xFDA
 12302                           fsr2l	equ	0xFD9
 12303                           status	equ	0xFD8
 12304                           
 12305 ;; *************** function _advMenu *****************
 12306 ;; Defined at:
 12307 ;;		line 14 in file "menu.c"
 12308 ;; Parameters:    Size  Location     Type
 12309 ;;		None
 12310 ;; Auto vars:     Size  Location     Type
 12311 ;;		None
 12312 ;; Return value:  Size  Location     Type
 12313 ;;		None               void
 12314 ;; Registers used:
 12315 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12316 ;; Tracked objects:
 12317 ;;		On entry : 0/0
 12318 ;;		On exit  : 0/0
 12319 ;;		Unchanged: 0/0
 12320 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12321 ;;      Params:         0       0       0       0       0       0       0       0       0
 12322 ;;      Locals:         0       0       0       0       0       0       0       0       0
 12323 ;;      Temps:          2       0       0       0       0       0       0       0       0
 12324 ;;      Totals:         2       0       0       0       0       0       0       0       0
 12325 ;;Total ram usage:        2 bytes
 12326 ;; Hardware stack levels used:    1
 12327 ;; Hardware stack levels required when called:    4
 12328 ;; This function calls:
 12329 ;;		_clearScreen
 12330 ;; This function is called by:
 12331 ;;		_buttons
 12332 ;; This function uses a non-reentrant model
 12333 ;;
 12334                           
 12335                           	psect	text39
 12336  003F06                     __ptext39:
 12337                           	opt stack 0
 12338  003F06                     _advMenu:
 12339                           	opt stack 21
 12340                           
 12341                           ;menu.c: 16: if (menu == &rtcMenu)
 12342                           
 12343                           ; BSR set to: 0
 12344                           ;incstack = 0
 12345  003F06  0EE5               	movlw	low _rtcMenu
 12346  003F08  6E26               	movwf	??_advMenu& (0+255),c
 12347  003F0A  0E00               	movlw	high _rtcMenu
 12348  003F0C  6E27               	movwf	(??_advMenu+1)& (0+255),c
 12349  003F0E  5027               	movf	??_advMenu+1,w,c
 12350  003F10  0100               	movlb	0	; () banked
 12351  003F12  19BD               	xorwf	(_menu+1)& (0+255),w,b
 12352  003F14  E103               	bnz	i2u525_45
 12353  003F16  5026               	movf	??_advMenu,w,c
 12354  003F18  0100               	movlb	0	; () banked
 12355  003F1A  19BC               	xorwf	_menu& (0+255),w,b
 12356  003F1C                     i2u525_45:
 12357  003F1C  A4D8               	btfss	status,2,c
 12358  003F1E  D007               	goto	i2l4974
 12359                           
 12360                           ; BSR set to: 0
 12361                           ;menu.c: 17: {
 12362                           ;menu.c: 18: menu = &tempMenu;
 12363  003F20  0100               	movlb	0	; () banked
 12364  003F22  0E00               	movlw	high _tempMenu
 12365  003F24  0100               	movlb	0	; () banked
 12366  003F26  6FBD               	movwf	(_menu+1)& (0+255),b
 12367  003F28  0100               	movlb	0	; () banked
 12368  003F2A  0EE0               	movlw	low _tempMenu
 12369  003F2C  D013               	goto	L25
 12370  003F2E                     i2l4974:
 12371                           
 12372                           ; BSR set to: 0
 12373                           ;menu.c: 20: else if (menu == &tempMenu)
 12374  003F2E  0EE0               	movlw	low _tempMenu
 12375  003F30  6E26               	movwf	??_advMenu& (0+255),c
 12376  003F32  0E00               	movlw	high _tempMenu
 12377  003F34  6E27               	movwf	(??_advMenu+1)& (0+255),c
 12378  003F36  5027               	movf	??_advMenu+1,w,c
 12379  003F38  0100               	movlb	0	; () banked
 12380  003F3A  19BD               	xorwf	(_menu+1)& (0+255),w,b
 12381  003F3C  E103               	bnz	i2u526_45
 12382  003F3E  5026               	movf	??_advMenu,w,c
 12383  003F40  0100               	movlb	0	; () banked
 12384  003F42  19BC               	xorwf	_menu& (0+255),w,b
 12385  003F44                     i2u526_45:
 12386  003F44  A4D8               	btfss	status,2,c
 12387  003F46  D008               	goto	i2l4978
 12388                           
 12389                           ; BSR set to: 0
 12390                           ;menu.c: 21: {
 12391                           ;menu.c: 22: menu = &rtcMenu;
 12392  003F48  0100               	movlb	0	; () banked
 12393  003F4A  0E00               	movlw	high _rtcMenu
 12394  003F4C  0100               	movlb	0	; () banked
 12395  003F4E  6FBD               	movwf	(_menu+1)& (0+255),b
 12396  003F50  0100               	movlb	0	; () banked
 12397  003F52  0EE5               	movlw	low _rtcMenu
 12398  003F54                     L25:
 12399  003F54  0100               	movlb	0	; () banked
 12400  003F56  6FBC               	movwf	_menu& (0+255),b
 12401  003F58                     i2l4978:
 12402                           
 12403                           ; BSR set to: 0
 12404                           ;menu.c: 23: }
 12405                           ;menu.c: 24: clearScreen();
 12406  003F58  EC3D  F023         	call	_clearScreen	;wreg free
 12407                           
 12408                           ;menu.c: 25: screen.changed |= rtcMenu.digits | tempMenu.digits;
 12409  003F5C  0100               	movlb	0	; () banked
 12410  003F5E  51E6               	movf	(_rtcMenu+1)& (0+255),w,b
 12411  003F60  0100               	movlb	0	; () banked
 12412  003F62  11E1               	iorwf	(_tempMenu+1)& (0+255),w,b
 12413  003F64  6E26               	movwf	??_advMenu& (0+255),c
 12414  003F66  5026               	movf	??_advMenu,w,c
 12415  003F68  0100               	movlb	0	; () banked
 12416  003F6A  13DE               	iorwf	(_screen+11)& (0+255),f,b
 12417                           
 12418                           ; BSR set to: 0
 12419                           ;menu.c: 26: LATA5 = (menu != &tempMenu);
 12420  003F6C  0EE0               	movlw	low _tempMenu
 12421  003F6E  6E26               	movwf	??_advMenu& (0+255),c
 12422  003F70  0E00               	movlw	high _tempMenu
 12423  003F72  6E27               	movwf	(??_advMenu+1)& (0+255),c
 12424  003F74  5027               	movf	??_advMenu+1,w,c
 12425  003F76  0100               	movlb	0	; () banked
 12426  003F78  19BD               	xorwf	(_menu+1)& (0+255),w,b
 12427  003F7A  E103               	bnz	i2u527_45
 12428  003F7C  5026               	movf	??_advMenu,w,c
 12429  003F7E  0100               	movlb	0	; () banked
 12430  003F80  19BC               	xorwf	_menu& (0+255),w,b
 12431  003F82                     i2u527_45:
 12432  003F82  B4D8               	btfsc	status,2,c
 12433  003F84  D002               	goto	i2u527_40
 12434  003F86  8A89               	bsf	3977,5,c	;volatile
 12435  003F88  D001               	goto	i2u528_45
 12436  003F8A                     i2u527_40:
 12437  003F8A  9A89               	bcf	3977,5,c	;volatile
 12438  003F8C                     i2u528_45:
 12439  003F8C  0012               	return	
 12440  003F8E                     __end_of_advMenu:
 12441                           	opt stack 0
 12442                           tosu	equ	0xFFF
 12443                           tosh	equ	0xFFE
 12444                           tosl	equ	0xFFD
 12445                           pclatu	equ	0xFFB
 12446                           pclath	equ	0xFFA
 12447                           tblptru	equ	0xFF8
 12448                           tblptrh	equ	0xFF7
 12449                           tblptrl	equ	0xFF6
 12450                           tablat	equ	0xFF5
 12451                           prodh	equ	0xFF4
 12452                           prodl	equ	0xFF3
 12453                           intcon	equ	0xFF2
 12454                           intcon2	equ	0xFF1
 12455                           indf0	equ	0xFEF
 12456                           postinc0	equ	0xFEE
 12457                           fsr0h	equ	0xFEA
 12458                           fsr0l	equ	0xFE9
 12459                           wreg	equ	0xFE8
 12460                           postinc1	equ	0xFE6
 12461                           postdec1	equ	0xFE5
 12462                           fsr1h	equ	0xFE2
 12463                           fsr1l	equ	0xFE1
 12464                           indf2	equ	0xFDF
 12465                           postinc2	equ	0xFDE
 12466                           postdec2	equ	0xFDD
 12467                           fsr2h	equ	0xFDA
 12468                           fsr2l	equ	0xFD9
 12469                           status	equ	0xFD8
 12470                           
 12471 ;; *************** function _clearScreen *****************
 12472 ;; Defined at:
 12473 ;;		line 86 in file "disp.c"
 12474 ;; Parameters:    Size  Location     Type
 12475 ;;		None
 12476 ;; Auto vars:     Size  Location     Type
 12477 ;;		None
 12478 ;; Return value:  Size  Location     Type
 12479 ;;		None               void
 12480 ;; Registers used:
 12481 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12482 ;; Tracked objects:
 12483 ;;		On entry : 0/0
 12484 ;;		On exit  : 0/0
 12485 ;;		Unchanged: 0/0
 12486 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12487 ;;      Params:         0       0       0       0       0       0       0       0       0
 12488 ;;      Locals:         0       0       0       0       0       0       0       0       0
 12489 ;;      Temps:          0       0       0       0       0       0       0       0       0
 12490 ;;      Totals:         0       0       0       0       0       0       0       0       0
 12491 ;;Total ram usage:        0 bytes
 12492 ;; Hardware stack levels used:    1
 12493 ;; Hardware stack levels required when called:    3
 12494 ;; This function calls:
 12495 ;;		_writeString
 12496 ;; This function is called by:
 12497 ;;		_advMenu
 12498 ;; This function uses a non-reentrant model
 12499 ;;
 12500                           
 12501                           	psect	text40
 12502  00467A                     __ptext40:
 12503                           	opt stack 0
 12504  00467A                     _clearScreen:
 12505                           	opt stack 21
 12506                           
 12507                           ;disp.c: 88: writeString(0b11111111, (char*)"");
 12508                           
 12509                           ;incstack = 0
 12510  00467A  0E7F               	movlw	high (STR_14+4)
 12511  00467C  6E1D               	movwf	writeString@string+1,c
 12512  00467E  0EE1               	movlw	low (STR_14+4)
 12513  004680  6E1C               	movwf	writeString@string,c
 12514  004682  0EFF               	movlw	255
 12515  004684  ECC1  F011         	call	_writeString
 12516  004688  0012               	return	
 12517  00468A                     __end_of_clearScreen:
 12518                           	opt stack 0
 12519                           tosu	equ	0xFFF
 12520                           tosh	equ	0xFFE
 12521                           tosl	equ	0xFFD
 12522                           pclatu	equ	0xFFB
 12523                           pclath	equ	0xFFA
 12524                           tblptru	equ	0xFF8
 12525                           tblptrh	equ	0xFF7
 12526                           tblptrl	equ	0xFF6
 12527                           tablat	equ	0xFF5
 12528                           prodh	equ	0xFF4
 12529                           prodl	equ	0xFF3
 12530                           intcon	equ	0xFF2
 12531                           intcon2	equ	0xFF1
 12532                           indf0	equ	0xFEF
 12533                           postinc0	equ	0xFEE
 12534                           fsr0h	equ	0xFEA
 12535                           fsr0l	equ	0xFE9
 12536                           wreg	equ	0xFE8
 12537                           postinc1	equ	0xFE6
 12538                           postdec1	equ	0xFE5
 12539                           fsr1h	equ	0xFE2
 12540                           fsr1l	equ	0xFE1
 12541                           indf2	equ	0xFDF
 12542                           postinc2	equ	0xFDE
 12543                           postdec2	equ	0xFDD
 12544                           fsr2h	equ	0xFDA
 12545                           fsr2l	equ	0xFD9
 12546                           status	equ	0xFD8
 12547                           
 12548 ;; *************** function _writeString *****************
 12549 ;; Defined at:
 12550 ;;		line 178 in file "disp.c"
 12551 ;; Parameters:    Size  Location     Type
 12552 ;;  digits          1    wreg     unsigned char 
 12553 ;;  string          2   27[COMRAM] PTR unsigned char 
 12554 ;;		 -> printTemp@str(15), STR_17(3), STR_16(3), printRTC@str(15), 
 12555 ;;		 -> writeFloat@str(15), writeLong@str(15), STR_1(1), 
 12556 ;; Auto vars:     Size  Location     Type
 12557 ;;  digits          1   34[COMRAM] unsigned char 
 12558 ;;  cnt             1   36[COMRAM] char 
 12559 ;;  i               1   35[COMRAM] char 
 12560 ;;  bits            1   33[COMRAM] unsigned char 
 12561 ;; Return value:  Size  Location     Type
 12562 ;;		None               void
 12563 ;; Registers used:
 12564 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12565 ;; Tracked objects:
 12566 ;;		On entry : 0/0
 12567 ;;		On exit  : 0/0
 12568 ;;		Unchanged: 0/0
 12569 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12570 ;;      Params:         2       0       0       0       0       0       0       0       0
 12571 ;;      Locals:         4       0       0       0       0       0       0       0       0
 12572 ;;      Temps:          4       0       0       0       0       0       0       0       0
 12573 ;;      Totals:        10       0       0       0       0       0       0       0       0
 12574 ;;Total ram usage:       10 bytes
 12575 ;; Hardware stack levels used:    1
 12576 ;; Hardware stack levels required when called:    2
 12577 ;; This function calls:
 12578 ;;		___wmul
 12579 ;;		_countBits
 12580 ;;		_getFontChar
 12581 ;;		_hibit
 12582 ;;		_log2
 12583 ;;		_writeChar
 12584 ;; This function is called by:
 12585 ;;		_clearScreen
 12586 ;;		_printRTC
 12587 ;;		_printTemp
 12588 ;;		_writeLong
 12589 ;;		_writeFloat
 12590 ;; This function uses a non-reentrant model
 12591 ;;
 12592                           
 12593                           	psect	text41
 12594  002382                     __ptext41:
 12595                           	opt stack 0
 12596  002382                     _writeString:
 12597                           	opt stack 23
 12598                           
 12599                           ;incstack = 0
 12600                           ;writeString@digits stored from wreg
 12601  002382  6E23               	movwf	writeString@digits,c
 12602                           
 12603                           ;disp.c: 184: int8_t cnt = 0, i = 0;
 12604  002384  0E00               	movlw	0
 12605  002386  6E25               	movwf	writeString@cnt,c
 12606  002388  0E00               	movlw	0
 12607  00238A  6E24               	movwf	writeString@i,c
 12608                           
 12609                           ;disp.c: 185: uint8_t bits = countBits(digits);
 12610  00238C  5023               	movf	writeString@digits,w,c
 12611  00238E  6E01               	movwf	countBits@num,c
 12612  002390  6A02               	clrf	countBits@num+1,c
 12613  002392  6A03               	clrf	countBits@num+2,c
 12614  002394  6A04               	clrf	countBits@num+3,c
 12615  002396  ECA9  F022         	call	_countBits	;wreg free
 12616  00239A  6E22               	movwf	writeString@bits,c
 12617                           
 12618                           ;disp.c: 187: for (cnt = 0;cnt < 8;cnt++)
 12619  00239C  0E00               	movlw	0
 12620  00239E  6E25               	movwf	writeString@cnt,c
 12621  0023A0  5025               	movf	writeString@cnt,w,c
 12622  0023A2  0A80               	xorlw	128
 12623  0023A4  0F78               	addlw	-136
 12624  0023A6  B0D8               	btfsc	status,0,c
 12625  0023A8  D022               	goto	i2l3662
 12626                           
 12627                           ;disp.c: 188: {
 12628                           ;disp.c: 189: if ((1<<cnt) & digits)
 12629  0023AA  C025  F01E         	movff	writeString@cnt,??_writeString
 12630  0023AE  0E01               	movlw	1
 12631  0023B0  6E1F               	movwf	(??_writeString+1)& (0+255),c
 12632  0023B2  6A20               	clrf	(??_writeString+2)& (0+255),c
 12633  0023B4  2A1E               	incf	??_writeString,f,c
 12634  0023B6  D003               	goto	i2u307_44
 12635  0023B8                     i2u307_45:
 12636  0023B8  90D8               	bcf	status,0,c
 12637  0023BA  361F               	rlcf	??_writeString+1,f,c
 12638  0023BC  3620               	rlcf	??_writeString+2,f,c
 12639  0023BE                     i2u307_44:
 12640  0023BE  2E1E               	decfsz	??_writeString,f,c
 12641  0023C0  D7FB               	goto	i2u307_45
 12642  0023C2  5023               	movf	writeString@digits,w,c
 12643  0023C4  161F               	andwf	??_writeString+1,f,c
 12644  0023C6  0E00               	movlw	0
 12645  0023C8  1620               	andwf	??_writeString+2,f,c
 12646  0023CA  5020               	movf	??_writeString+2,w,c
 12647  0023CC  101F               	iorwf	??_writeString+1,w,c
 12648  0023CE  B4D8               	btfsc	status,2,c
 12649  0023D0  D00C               	goto	i2l3658
 12650                           
 12651                           ;disp.c: 190: {
 12652                           ;disp.c: 191: screen.digits.screen[cnt].bits = 0;
 12653  0023D2  5025               	movf	writeString@cnt,w,c
 12654  0023D4  0D01               	mullw	1
 12655  0023D6  0100               	movlb	0	; () banked
 12656  0023D8  0ED3               	movlw	low _screen
 12657  0023DA  24F3               	addwf	prodl,w,c
 12658  0023DC  6ED9               	movwf	fsr2l,c
 12659  0023DE  0100               	movlb	0	; () banked
 12660  0023E0  0E00               	movlw	high _screen
 12661  0023E2  20F4               	addwfc	prodh,w,c
 12662  0023E4  6EDA               	movwf	fsr2h,c
 12663  0023E6  0E00               	movlw	0
 12664  0023E8  6EDF               	movwf	indf2,c
 12665  0023EA                     i2l3658:
 12666  0023EA  2A25               	incf	writeString@cnt,f,c
 12667  0023EC  D7D9               	goto	L26
 12668  0023EE                     i2l3662:
 12669                           
 12670                           ;disp.c: 192: }
 12671                           ;disp.c: 193: }
 12672                           ;disp.c: 195: bits += 1;
 12673  0023EE  2A22               	incf	writeString@bits,f,c
 12674                           
 12675                           ;disp.c: 196: for (cnt = log2(hibit(digits)); --bits; cnt--)
 12676  0023F0  5023               	movf	writeString@digits,w,c
 12677  0023F2  6E01               	movwf	hibit@x,c
 12678  0023F4  6A02               	clrf	hibit@x+1,c
 12679  0023F6  6A03               	clrf	hibit@x+2,c
 12680  0023F8  6A04               	clrf	hibit@x+3,c
 12681  0023FA  ECE7  F020         	call	_hibit	;wreg free
 12682  0023FE  C001  F00C         	movff	?_hibit,log2@num
 12683  002402  C002  F00D         	movff	?_hibit+1,log2@num+1
 12684  002406  C003  F00E         	movff	?_hibit+2,log2@num+2
 12685  00240A  C004  F00F         	movff	?_hibit+3,log2@num+3
 12686  00240E  EC11  F022         	call	_log2	;wreg free
 12687  002412  C00C  F01E         	movff	?_log2,??_writeString
 12688  002416  C00D  F01F         	movff	?_log2+1,??_writeString+1
 12689  00241A  C00E  F020         	movff	?_log2+2,??_writeString+2
 12690  00241E  C00F  F021         	movff	?_log2+3,??_writeString+3
 12691  002422  501E               	movf	??_writeString,w,c
 12692  002424  6E25               	movwf	writeString@cnt,c
 12693  002426  D102               	goto	i2l3692
 12694  002428                     i2l3666:
 12695                           
 12696                           ;disp.c: 197: {
 12697                           ;disp.c: 198: if (0x1 & (digits >> cnt))
 12698  002428  C025  F01E         	movff	writeString@cnt,??_writeString
 12699  00242C  C023  F01F         	movff	writeString@digits,??_writeString+1
 12700  002430  2A1E               	incf	??_writeString,f,c
 12701  002432  D002               	goto	i2u310_44
 12702  002434                     i2u310_45:
 12703  002434  90D8               	bcf	status,0,c
 12704  002436  321F               	rrcf	??_writeString+1,f,c
 12705  002438                     i2u310_44:
 12706  002438  2E1E               	decfsz	??_writeString,f,c
 12707  00243A  D7FC               	goto	i2u310_45
 12708  00243C  A01F               	btfss	??_writeString+1,0,c
 12709  00243E  D0F5               	goto	i2l3690
 12710                           
 12711                           ;disp.c: 199: {
 12712                           ;disp.c: 200: if (string[i] == '\0')
 12713  002440  5024               	movf	writeString@i,w,c
 12714  002442  6E0F               	movwf	___wmul@multiplier,c
 12715  002444  6A10               	clrf	___wmul@multiplier+1,c
 12716  002446  BE0F               	btfsc	___wmul@multiplier,7,c
 12717  002448  0610               	decf	___wmul@multiplier+1,f,c
 12718  00244A  0E00               	movlw	0
 12719  00244C  6E12               	movwf	___wmul@multiplicand+1,c
 12720  00244E  0E01               	movlw	1
 12721  002450  6E11               	movwf	___wmul@multiplicand,c
 12722  002452  ECD0  F022         	call	___wmul	;wreg free
 12723  002456  C01C  F01E         	movff	writeString@string,??_writeString
 12724  00245A  C01D  F01F         	movff	writeString@string+1,??_writeString+1
 12725  00245E  500F               	movf	?___wmul,w,c
 12726  002460  261E               	addwf	??_writeString,f,c
 12727  002462  5010               	movf	?___wmul+1,w,c
 12728  002464  221F               	addwfc	??_writeString+1,f,c
 12729  002466  C01E  FFF6         	movff	??_writeString,tblptrl
 12730  00246A  C01F  FFF7         	movff	??_writeString+1,tblptrh
 12731  00246E  6AF8               	clrf	tblptru,c
 12732  002470  0E07               	movlw	(high __ramtop+-1)
 12733  002472  64F7               	cpfsgt	tblptrh,c
 12734  002474  D003               	bra	i2u312_47
 12735  002476  0008               	tblrd		*
 12736  002478  50F5               	movf	tablat,w,c
 12737  00247A  D005               	bra	i2u312_40
 12738  00247C                     i2u312_47:
 12739  00247C  CFF6 FFE9          	movff	tblptrl,fsr0l
 12740  002480  CFF7 FFEA          	movff	tblptrh,fsr0h
 12741  002484  50EF               	movf	indf0,w,c
 12742  002486                     i2u312_40:
 12743  002486  0900               	iorlw	0
 12744  002488  B4D8               	btfsc	status,2,c
 12745  00248A  D0D2               	goto	i2l119
 12746                           
 12747                           ;disp.c: 203: }
 12748                           ;disp.c: 204: if (string[i] == '.')
 12749                           
 12750                           ;disp.c: 201: {
 12751                           ;disp.c: 202: break;
 12752  00248C  5024               	movf	writeString@i,w,c
 12753  00248E  6E0F               	movwf	___wmul@multiplier,c
 12754  002490  6A10               	clrf	___wmul@multiplier+1,c
 12755  002492  BE0F               	btfsc	___wmul@multiplier,7,c
 12756  002494  0610               	decf	___wmul@multiplier+1,f,c
 12757  002496  0E00               	movlw	0
 12758  002498  6E12               	movwf	___wmul@multiplicand+1,c
 12759  00249A  0E01               	movlw	1
 12760  00249C  6E11               	movwf	___wmul@multiplicand,c
 12761  00249E  ECD0  F022         	call	___wmul	;wreg free
 12762  0024A2  C01C  F01E         	movff	writeString@string,??_writeString
 12763  0024A6  C01D  F01F         	movff	writeString@string+1,??_writeString+1
 12764  0024AA  500F               	movf	?___wmul,w,c
 12765  0024AC  261E               	addwf	??_writeString,f,c
 12766  0024AE  5010               	movf	?___wmul+1,w,c
 12767  0024B0  221F               	addwfc	??_writeString+1,f,c
 12768  0024B2  C01E  FFF6         	movff	??_writeString,tblptrl
 12769  0024B6  C01F  FFF7         	movff	??_writeString+1,tblptrh
 12770  0024BA  6AF8               	clrf	tblptru,c
 12771  0024BC  0E07               	movlw	(high __ramtop+-1)
 12772  0024BE  64F7               	cpfsgt	tblptrh,c
 12773  0024C0  D003               	bra	i2u314_47
 12774  0024C2  0008               	tblrd		*
 12775  0024C4  50F5               	movf	tablat,w,c
 12776  0024C6  D005               	bra	i2u314_40
 12777  0024C8                     i2u314_47:
 12778  0024C8  CFF6 FFE9          	movff	tblptrl,fsr0l
 12779  0024CC  CFF7 FFEA          	movff	tblptrh,fsr0h
 12780  0024D0  50EF               	movf	indf0,w,c
 12781  0024D2                     i2u314_40:
 12782  0024D2  0A2E               	xorlw	46
 12783  0024D4  A4D8               	btfss	status,2,c
 12784  0024D6  D029               	goto	i2l3682
 12785                           
 12786                           ;disp.c: 205: {
 12787                           ;disp.c: 206: screen.digits.screen[cnt + 1].bits |= 0b10000000;
 12788  0024D8  C025  F01E         	movff	writeString@cnt,??_writeString
 12789  0024DC  6A1F               	clrf	(??_writeString+1)& (0+255),c
 12790  0024DE  BE1E               	btfsc	??_writeString& (0+255),7,c
 12791  0024E0  061F               	decf	(??_writeString+1)& (0+255),f,c
 12792  0024E2  0E01               	movlw	1
 12793  0024E4  261E               	addwf	??_writeString,f,c
 12794  0024E6  0E00               	movlw	0
 12795  0024E8  221F               	addwfc	??_writeString+1,f,c
 12796  0024EA  0100               	movlb	0	; () banked
 12797  0024EC  0ED3               	movlw	low _screen
 12798  0024EE  241E               	addwf	??_writeString,w,c
 12799  0024F0  6ED9               	movwf	fsr2l,c
 12800  0024F2  0100               	movlb	0	; () banked
 12801  0024F4  0E00               	movlw	high _screen
 12802  0024F6  201F               	addwfc	??_writeString+1,w,c
 12803  0024F8  6EDA               	movwf	fsr2h,c
 12804  0024FA  0E00               	movlw	0
 12805  0024FC  8EDB               	bsf	plusw2,7,c
 12806                           
 12807                           ; BSR set to: 0
 12808                           ;disp.c: 207: screen.changed |= 1 << (cnt + 1);
 12809  0024FE  C025  F01E         	movff	writeString@cnt,??_writeString
 12810  002502  0E01               	movlw	1
 12811  002504  261E               	addwf	??_writeString,f,c
 12812  002506  0E01               	movlw	1
 12813  002508  6E1F               	movwf	(??_writeString+1)& (0+255),c
 12814  00250A  6A20               	clrf	(??_writeString+2)& (0+255),c
 12815  00250C  2A1E               	incf	??_writeString,f,c
 12816  00250E  D003               	goto	i2u316_44
 12817  002510                     i2u316_45:
 12818  002510  90D8               	bcf	status,0,c
 12819  002512  361F               	rlcf	??_writeString+1,f,c
 12820  002514  3620               	rlcf	??_writeString+2,f,c
 12821  002516                     i2u316_44:
 12822  002516  2E1E               	decfsz	??_writeString,f,c
 12823  002518  D7FB               	goto	i2u316_45
 12824  00251A  501F               	movf	??_writeString+1,w,c
 12825  00251C  0100               	movlb	0	; () banked
 12826  00251E  13DE               	iorwf	(_screen+11)& (0+255),f,b
 12827  002520  5020               	movf	??_writeString+2,w,c
 12828  002522  0100               	movlb	0	; () banked
 12829  002524  13DF               	iorwf	(_screen+12)& (0+255),f,b
 12830                           
 12831                           ; BSR set to: 0
 12832                           ;disp.c: 208: bits++;
 12833  002526  2A22               	incf	writeString@bits,f,c
 12834                           
 12835                           ; BSR set to: 0
 12836                           ;disp.c: 209: i++;
 12837  002528  2A24               	incf	writeString@i,f,c
 12838  00252A                     i2l3682:
 12839                           
 12840                           ;disp.c: 210: }
 12841                           ;disp.c: 211: if (getFontChar(string[i]) || string[i] == ' ')
 12842  00252A  5024               	movf	writeString@i,w,c
 12843  00252C  6E0F               	movwf	___wmul@multiplier,c
 12844  00252E  6A10               	clrf	___wmul@multiplier+1,c
 12845  002530  BE0F               	btfsc	___wmul@multiplier,7,c
 12846  002532  0610               	decf	___wmul@multiplier+1,f,c
 12847  002534  0E00               	movlw	0
 12848  002536  6E12               	movwf	___wmul@multiplicand+1,c
 12849  002538  0E01               	movlw	1
 12850  00253A  6E11               	movwf	___wmul@multiplicand,c
 12851  00253C  ECD0  F022         	call	___wmul	;wreg free
 12852  002540  C01C  F01E         	movff	writeString@string,??_writeString
 12853  002544  C01D  F01F         	movff	writeString@string+1,??_writeString+1
 12854  002548  500F               	movf	?___wmul,w,c
 12855  00254A  261E               	addwf	??_writeString,f,c
 12856  00254C  5010               	movf	?___wmul+1,w,c
 12857  00254E  221F               	addwfc	??_writeString+1,f,c
 12858  002550  C01E  FFF6         	movff	??_writeString,tblptrl
 12859  002554  C01F  FFF7         	movff	??_writeString+1,tblptrh
 12860  002558  6AF8               	clrf	tblptru,c
 12861  00255A  0E07               	movlw	(high __ramtop+-1)
 12862  00255C  64F7               	cpfsgt	tblptrh,c
 12863  00255E  D003               	bra	i2u317_47
 12864  002560  0008               	tblrd		*
 12865  002562  50F5               	movf	tablat,w,c
 12866  002564  D005               	bra	i2u317_40
 12867  002566                     i2u317_47:
 12868  002566  CFF6 FFE9          	movff	tblptrl,fsr0l
 12869  00256A  CFF7 FFEA          	movff	tblptrh,fsr0h
 12870  00256E  50EF               	movf	indf0,w,c
 12871  002570                     i2u317_40:
 12872  002570  EC51  F015         	call	_getFontChar
 12873  002574  0900               	iorlw	0
 12874  002576  A4D8               	btfss	status,2,c
 12875  002578  D026               	goto	i2l3686
 12876  00257A  5024               	movf	writeString@i,w,c
 12877  00257C  6E0F               	movwf	___wmul@multiplier,c
 12878  00257E  6A10               	clrf	___wmul@multiplier+1,c
 12879  002580  BE0F               	btfsc	___wmul@multiplier,7,c
 12880  002582  0610               	decf	___wmul@multiplier+1,f,c
 12881  002584  0E00               	movlw	0
 12882  002586  6E12               	movwf	___wmul@multiplicand+1,c
 12883  002588  0E01               	movlw	1
 12884  00258A  6E11               	movwf	___wmul@multiplicand,c
 12885  00258C  ECD0  F022         	call	___wmul	;wreg free
 12886  002590  C01C  F01E         	movff	writeString@string,??_writeString
 12887  002594  C01D  F01F         	movff	writeString@string+1,??_writeString+1
 12888  002598  500F               	movf	?___wmul,w,c
 12889  00259A  261E               	addwf	??_writeString,f,c
 12890  00259C  5010               	movf	?___wmul+1,w,c
 12891  00259E  221F               	addwfc	??_writeString+1,f,c
 12892  0025A0  C01E  FFF6         	movff	??_writeString,tblptrl
 12893  0025A4  C01F  FFF7         	movff	??_writeString+1,tblptrh
 12894  0025A8  6AF8               	clrf	tblptru,c
 12895  0025AA  0E07               	movlw	(high __ramtop+-1)
 12896  0025AC  64F7               	cpfsgt	tblptrh,c
 12897  0025AE  D003               	bra	i2u319_47
 12898  0025B0  0008               	tblrd		*
 12899  0025B2  50F5               	movf	tablat,w,c
 12900  0025B4  D005               	bra	i2u319_40
 12901  0025B6                     i2u319_47:
 12902  0025B6  CFF6 FFE9          	movff	tblptrl,fsr0l
 12903  0025BA  CFF7 FFEA          	movff	tblptrh,fsr0h
 12904  0025BE  50EF               	movf	indf0,w,c
 12905  0025C0                     i2u319_40:
 12906  0025C0  0A20               	xorlw	32
 12907  0025C2  A4D8               	btfss	status,2,c
 12908  0025C4  D031               	goto	i2l3688
 12909  0025C6                     i2l3686:
 12910                           
 12911                           ;disp.c: 212: {
 12912                           ;disp.c: 213: writeChar(1 << cnt, string[i]);
 12913  0025C6  5024               	movf	writeString@i,w,c
 12914  0025C8  6E0F               	movwf	___wmul@multiplier,c
 12915  0025CA  6A10               	clrf	___wmul@multiplier+1,c
 12916  0025CC  BE0F               	btfsc	___wmul@multiplier,7,c
 12917  0025CE  0610               	decf	___wmul@multiplier+1,f,c
 12918  0025D0  0E00               	movlw	0
 12919  0025D2  6E12               	movwf	___wmul@multiplicand+1,c
 12920  0025D4  0E01               	movlw	1
 12921  0025D6  6E11               	movwf	___wmul@multiplicand,c
 12922  0025D8  ECD0  F022         	call	___wmul	;wreg free
 12923  0025DC  C01C  F01E         	movff	writeString@string,??_writeString
 12924  0025E0  C01D  F01F         	movff	writeString@string+1,??_writeString+1
 12925  0025E4  500F               	movf	?___wmul,w,c
 12926  0025E6  261E               	addwf	??_writeString,f,c
 12927  0025E8  5010               	movf	?___wmul+1,w,c
 12928  0025EA  221F               	addwfc	??_writeString+1,f,c
 12929  0025EC  C01E  FFF6         	movff	??_writeString,tblptrl
 12930  0025F0  C01F  FFF7         	movff	??_writeString+1,tblptrh
 12931  0025F4  6AF8               	clrf	tblptru,c
 12932  0025F6  0E07               	movlw	(high __ramtop+-1)
 12933  0025F8  64F7               	cpfsgt	tblptrh,c
 12934  0025FA  D003               	bra	i2u321_47
 12935  0025FC  0008               	tblrd		*
 12936  0025FE  50F5               	movf	tablat,w,c
 12937  002600  D005               	bra	i2u321_40
 12938  002602                     i2u321_47:
 12939  002602  CFF6 FFE9          	movff	tblptrl,fsr0l
 12940  002606  CFF7 FFEA          	movff	tblptrh,fsr0h
 12941  00260A  50EF               	movf	indf0,w,c
 12942  00260C                     i2u321_40:
 12943  00260C  6E15               	movwf	writeChar@ch,c
 12944  00260E  C025  F020         	movff	writeString@cnt,??_writeString+2
 12945  002612  0E01               	movlw	1
 12946  002614  6E21               	movwf	(??_writeString+3)& (0+255),c
 12947  002616  2A20               	incf	??_writeString+2,f,c
 12948  002618  D002               	goto	i2u322_44
 12949  00261A                     i2u322_45:
 12950  00261A  90D8               	bcf	status,0,c
 12951  00261C  3621               	rlcf	??_writeString+3,f,c
 12952  00261E                     i2u322_44:
 12953  00261E  2E20               	decfsz	??_writeString+2,f,c
 12954  002620  D7FC               	goto	i2u322_45
 12955  002622  5021               	movf	??_writeString+3,w,c
 12956  002624  ECED  F021         	call	_writeChar
 12957  002628                     i2l3688:
 12958                           
 12959                           ;disp.c: 214: }
 12960                           ;disp.c: 215: i++;
 12961  002628  2A24               	incf	writeString@i,f,c
 12962  00262A                     i2l3690:
 12963  00262A  0625               	decf	writeString@cnt,f,c
 12964  00262C                     i2l3692:
 12965  00262C  2E22               	decfsz	writeString@bits,f,c
 12966  00262E  D6FC               	goto	i2l3666
 12967  002630                     i2l119:
 12968  002630  0012               	return	
 12969  002632                     __end_of_writeString:
 12970                           	opt stack 0
 12971                           tosu	equ	0xFFF
 12972                           tosh	equ	0xFFE
 12973                           tosl	equ	0xFFD
 12974                           pclatu	equ	0xFFB
 12975                           pclath	equ	0xFFA
 12976                           tblptru	equ	0xFF8
 12977                           tblptrh	equ	0xFF7
 12978                           tblptrl	equ	0xFF6
 12979                           tablat	equ	0xFF5
 12980                           prodh	equ	0xFF4
 12981                           prodl	equ	0xFF3
 12982                           intcon	equ	0xFF2
 12983                           intcon2	equ	0xFF1
 12984                           indf0	equ	0xFEF
 12985                           postinc0	equ	0xFEE
 12986                           fsr0h	equ	0xFEA
 12987                           fsr0l	equ	0xFE9
 12988                           wreg	equ	0xFE8
 12989                           postinc1	equ	0xFE6
 12990                           postdec1	equ	0xFE5
 12991                           fsr1h	equ	0xFE2
 12992                           fsr1l	equ	0xFE1
 12993                           indf2	equ	0xFDF
 12994                           postinc2	equ	0xFDE
 12995                           postdec2	equ	0xFDD
 12996                           plusw2	equ	0xFDB
 12997                           fsr2h	equ	0xFDA
 12998                           fsr2l	equ	0xFD9
 12999                           status	equ	0xFD8
 13000                           
 13001 ;; *************** function _writeChar *****************
 13002 ;; Defined at:
 13003 ;;		line 127 in file "disp.c"
 13004 ;; Parameters:    Size  Location     Type
 13005 ;;  digit           1    wreg     unsigned char 
 13006 ;;  ch              1   20[COMRAM] unsigned char 
 13007 ;; Auto vars:     Size  Location     Type
 13008 ;;  digit           1   26[COMRAM] unsigned char 
 13009 ;;  dig             1   25[COMRAM] unsigned char 
 13010 ;; Return value:  Size  Location     Type
 13011 ;;		None               void
 13012 ;; Registers used:
 13013 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13014 ;; Tracked objects:
 13015 ;;		On entry : 0/0
 13016 ;;		On exit  : 0/0
 13017 ;;		Unchanged: 0/0
 13018 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13019 ;;      Params:         1       0       0       0       0       0       0       0       0
 13020 ;;      Locals:         2       0       0       0       0       0       0       0       0
 13021 ;;      Temps:          4       0       0       0       0       0       0       0       0
 13022 ;;      Totals:         7       0       0       0       0       0       0       0       0
 13023 ;;Total ram usage:        7 bytes
 13024 ;; Hardware stack levels used:    1
 13025 ;; Hardware stack levels required when called:    1
 13026 ;; This function calls:
 13027 ;;		_getFontChar
 13028 ;;		_log2
 13029 ;; This function is called by:
 13030 ;;		_writeString
 13031 ;; This function uses a non-reentrant model
 13032 ;;
 13033                           
 13034                           	psect	text42
 13035  0043DA                     __ptext42:
 13036                           	opt stack 0
 13037  0043DA                     _writeChar:
 13038                           	opt stack 23
 13039                           
 13040                           ;incstack = 0
 13041                           ;writeChar@digit stored from wreg
 13042  0043DA  6E1B               	movwf	writeChar@digit,c
 13043                           
 13044                           ;disp.c: 129: uint8_t dig = (uint8_t) log2(digit);
 13045  0043DC  501B               	movf	writeChar@digit,w,c
 13046  0043DE  6E0C               	movwf	log2@num,c
 13047  0043E0  6A0D               	clrf	log2@num+1,c
 13048  0043E2  6A0E               	clrf	log2@num+2,c
 13049  0043E4  6A0F               	clrf	log2@num+3,c
 13050  0043E6  EC11  F022         	call	_log2	;wreg free
 13051  0043EA  C00C  F016         	movff	?_log2,??_writeChar
 13052  0043EE  C00D  F017         	movff	?_log2+1,??_writeChar+1
 13053  0043F2  C00E  F018         	movff	?_log2+2,??_writeChar+2
 13054  0043F6  C00F  F019         	movff	?_log2+3,??_writeChar+3
 13055  0043FA  5016               	movf	??_writeChar,w,c
 13056  0043FC  6E1A               	movwf	writeChar@dig,c
 13057                           
 13058                           ;disp.c: 130: screen.digits.screen[dig].bits = getFontChar(ch);
 13059  0043FE  501A               	movf	writeChar@dig,w,c
 13060  004400  0D01               	mullw	1
 13061  004402  0100               	movlb	0	; () banked
 13062  004404  0ED3               	movlw	low _screen
 13063  004406  24F3               	addwf	prodl,w,c
 13064  004408  6ED9               	movwf	fsr2l,c
 13065  00440A  0100               	movlb	0	; () banked
 13066  00440C  0E00               	movlw	high _screen
 13067  00440E  20F4               	addwfc	prodh,w,c
 13068  004410  6EDA               	movwf	fsr2h,c
 13069  004412  5015               	movf	writeChar@ch,w,c
 13070  004414  EC51  F015         	call	_getFontChar
 13071  004418  6EDF               	movwf	indf2,c
 13072                           
 13073                           ;disp.c: 131: screen.changed |= digit;
 13074  00441A  501B               	movf	writeChar@digit,w,c
 13075  00441C  0100               	movlb	0	; () banked
 13076  00441E  13DE               	iorwf	(_screen+11)& (0+255),f,b
 13077                           
 13078                           ; BSR set to: 0
 13079  004420  0012               	return	
 13080  004422                     __end_of_writeChar:
 13081                           	opt stack 0
 13082                           tosu	equ	0xFFF
 13083                           tosh	equ	0xFFE
 13084                           tosl	equ	0xFFD
 13085                           pclatu	equ	0xFFB
 13086                           pclath	equ	0xFFA
 13087                           tblptru	equ	0xFF8
 13088                           tblptrh	equ	0xFF7
 13089                           tblptrl	equ	0xFF6
 13090                           tablat	equ	0xFF5
 13091                           prodh	equ	0xFF4
 13092                           prodl	equ	0xFF3
 13093                           intcon	equ	0xFF2
 13094                           intcon2	equ	0xFF1
 13095                           indf0	equ	0xFEF
 13096                           postinc0	equ	0xFEE
 13097                           fsr0h	equ	0xFEA
 13098                           fsr0l	equ	0xFE9
 13099                           wreg	equ	0xFE8
 13100                           postinc1	equ	0xFE6
 13101                           postdec1	equ	0xFE5
 13102                           fsr1h	equ	0xFE2
 13103                           fsr1l	equ	0xFE1
 13104                           indf2	equ	0xFDF
 13105                           postinc2	equ	0xFDE
 13106                           postdec2	equ	0xFDD
 13107                           plusw2	equ	0xFDB
 13108                           fsr2h	equ	0xFDA
 13109                           fsr2l	equ	0xFD9
 13110                           status	equ	0xFD8
 13111                           
 13112 ;; *************** function _log2 *****************
 13113 ;; Defined at:
 13114 ;;		line 47 in file "defs.c"
 13115 ;; Parameters:    Size  Location     Type
 13116 ;;  num             4   11[COMRAM] unsigned long 
 13117 ;; Auto vars:     Size  Location     Type
 13118 ;;  log2Val         4   15[COMRAM] unsigned long 
 13119 ;; Return value:  Size  Location     Type
 13120 ;;                  4   11[COMRAM] unsigned long 
 13121 ;; Registers used:
 13122 ;;		wreg, status,2, status,0
 13123 ;; Tracked objects:
 13124 ;;		On entry : 0/0
 13125 ;;		On exit  : 0/0
 13126 ;;		Unchanged: 0/0
 13127 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13128 ;;      Params:         4       0       0       0       0       0       0       0       0
 13129 ;;      Locals:         4       0       0       0       0       0       0       0       0
 13130 ;;      Temps:          0       0       0       0       0       0       0       0       0
 13131 ;;      Totals:         8       0       0       0       0       0       0       0       0
 13132 ;;Total ram usage:        8 bytes
 13133 ;; Hardware stack levels used:    1
 13134 ;; This function calls:
 13135 ;;		Nothing
 13136 ;; This function is called by:
 13137 ;;		_writeDigit
 13138 ;;		_writeChar
 13139 ;;		_writeString
 13140 ;; This function uses a non-reentrant model
 13141 ;;
 13142                           
 13143                           	psect	text43
 13144  004422                     __ptext43:
 13145                           	opt stack 0
 13146  004422                     _log2:
 13147                           	opt stack 24
 13148                           
 13149                           ;defs.c: 49: uint32_t log2Val = 0;
 13150                           
 13151                           ; BSR set to: 0
 13152                           ;incstack = 0
 13153  004422  0E00               	movlw	0
 13154  004424  6E10               	movwf	log2@log2Val,c
 13155  004426  0E00               	movlw	0
 13156  004428  6E11               	movwf	log2@log2Val+1,c
 13157  00442A  0E00               	movlw	0
 13158  00442C  6E12               	movwf	log2@log2Val+2,c
 13159  00442E  0E00               	movlw	0
 13160  004430  6E13               	movwf	log2@log2Val+3,c
 13161                           
 13162                           ;defs.c: 50: while (num >>= 1) log2Val++;
 13163  004432  D006               	goto	i2l510
 13164  004434                     i2l3564:
 13165  004434  0E01               	movlw	1
 13166  004436  2610               	addwf	log2@log2Val,f,c
 13167  004438  0E00               	movlw	0
 13168  00443A  2211               	addwfc	log2@log2Val+1,f,c
 13169  00443C  2212               	addwfc	log2@log2Val+2,f,c
 13170  00443E  2213               	addwfc	log2@log2Val+3,f,c
 13171  004440                     i2l510:
 13172  004440  90D8               	bcf	status,0,c
 13173  004442  320F               	rrcf	log2@num+3,f,c
 13174  004444  320E               	rrcf	log2@num+2,f,c
 13175  004446  320D               	rrcf	log2@num+1,f,c
 13176  004448  320C               	rrcf	log2@num,f,c
 13177  00444A  500F               	movf	(log2@num+3)& (0+255),w,c
 13178  00444C  100C               	iorwf	log2@num& (0+255),w,c
 13179  00444E  100D               	iorwf	(log2@num+1)& (0+255),w,c
 13180  004450  100E               	iorwf	(log2@num+2)& (0+255),w,c
 13181  004452  A4D8               	btfss	status,2,c
 13182  004454  D7EF               	goto	i2l3564
 13183                           
 13184                           ;defs.c: 51: return log2Val;
 13185  004456  C010  F00C         	movff	log2@log2Val,?_log2
 13186  00445A  C011  F00D         	movff	log2@log2Val+1,?_log2+1
 13187  00445E  C012  F00E         	movff	log2@log2Val+2,?_log2+2
 13188  004462  C013  F00F         	movff	log2@log2Val+3,?_log2+3
 13189  004466  0012               	return	
 13190  004468                     __end_of_log2:
 13191                           	opt stack 0
 13192                           tosu	equ	0xFFF
 13193                           tosh	equ	0xFFE
 13194                           tosl	equ	0xFFD
 13195                           pclatu	equ	0xFFB
 13196                           pclath	equ	0xFFA
 13197                           tblptru	equ	0xFF8
 13198                           tblptrh	equ	0xFF7
 13199                           tblptrl	equ	0xFF6
 13200                           tablat	equ	0xFF5
 13201                           prodh	equ	0xFF4
 13202                           prodl	equ	0xFF3
 13203                           intcon	equ	0xFF2
 13204                           intcon2	equ	0xFF1
 13205                           indf0	equ	0xFEF
 13206                           postinc0	equ	0xFEE
 13207                           fsr0h	equ	0xFEA
 13208                           fsr0l	equ	0xFE9
 13209                           wreg	equ	0xFE8
 13210                           postinc1	equ	0xFE6
 13211                           postdec1	equ	0xFE5
 13212                           fsr1h	equ	0xFE2
 13213                           fsr1l	equ	0xFE1
 13214                           indf2	equ	0xFDF
 13215                           postinc2	equ	0xFDE
 13216                           postdec2	equ	0xFDD
 13217                           plusw2	equ	0xFDB
 13218                           fsr2h	equ	0xFDA
 13219                           fsr2l	equ	0xFD9
 13220                           status	equ	0xFD8
 13221                           
 13222 ;; *************** function _getFontChar *****************
 13223 ;; Defined at:
 13224 ;;		line 116 in file "display1.h"
 13225 ;; Parameters:    Size  Location     Type
 13226 ;;  ch              1    wreg     unsigned char 
 13227 ;; Auto vars:     Size  Location     Type
 13228 ;;  ch              1    4[COMRAM] unsigned char 
 13229 ;; Return value:  Size  Location     Type
 13230 ;;                  1    wreg      unsigned char 
 13231 ;; Registers used:
 13232 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru
 13233 ;; Tracked objects:
 13234 ;;		On entry : 0/0
 13235 ;;		On exit  : 0/0
 13236 ;;		Unchanged: 0/0
 13237 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13238 ;;      Params:         0       0       0       0       0       0       0       0       0
 13239 ;;      Locals:         1       0       0       0       0       0       0       0       0
 13240 ;;      Temps:          4       0       0       0       0       0       0       0       0
 13241 ;;      Totals:         5       0       0       0       0       0       0       0       0
 13242 ;;Total ram usage:        5 bytes
 13243 ;; Hardware stack levels used:    1
 13244 ;; This function calls:
 13245 ;;		Nothing
 13246 ;; This function is called by:
 13247 ;;		_writeChar
 13248 ;;		_writeString
 13249 ;; This function uses a non-reentrant model
 13250 ;;
 13251                           
 13252                           	psect	text44
 13253  002AA2                     __ptext44:
 13254                           	opt stack 0
 13255  002AA2                     _getFontChar:
 13256                           	opt stack 23
 13257                           
 13258                           ;incstack = 0
 13259                           ;getFontChar@ch stored from wreg
 13260  002AA2  6E05               	movwf	getFontChar@ch,c
 13261                           
 13262                           ;display1.h: 118: switch (ch)
 13263  002AA4  D024               	goto	i2l3560
 13264  002AA6                     i2l3518:
 13265                           
 13266                           ;display1.h: 121: return lcd_font[ch - '0'];
 13267  002AA6  0ED0               	movlw	208
 13268  002AA8  D001               	goto	L27
 13269  002AAA                     i2l3522:
 13270                           
 13271                           ;display1.h: 123: return lcd_font[ch - ('0' + ('a' - 'A'))];
 13272  002AAA  0EB0               	movlw	176
 13273  002AAC                     L27:
 13274  002AAC  6E01               	movwf	??_getFontChar& (0+255),c
 13275  002AAE  0EFF               	movlw	255
 13276  002AB0  6E02               	movwf	(??_getFontChar+1)& (0+255),c
 13277  002AB2  5005               	movf	getFontChar@ch,w,c
 13278  002AB4  6E03               	movwf	(??_getFontChar+2)& (0+255),c
 13279  002AB6  6A04               	clrf	(??_getFontChar+3)& (0+255),c
 13280  002AB8  5001               	movf	??_getFontChar,w,c
 13281  002ABA  2603               	addwf	??_getFontChar+2,f,c
 13282  002ABC  5002               	movf	??_getFontChar+1,w,c
 13283  002ABE  2204               	addwfc	??_getFontChar+3,f,c
 13284  002AC0  0EB5               	movlw	low _lcd_font
 13285  002AC2  2403               	addwf	??_getFontChar+2,w,c
 13286  002AC4  6EF6               	movwf	tblptrl,c
 13287  002AC6  0E7E               	movlw	high _lcd_font
 13288  002AC8  2004               	addwfc	??_getFontChar+3,w,c
 13289  002ACA  6EF7               	movwf	tblptrh,c
 13290  002ACC                     	if	0	;There are less than 3 active tblptr bytes
 13291  002ACC                     	endif
 13292  002ACC  0008               	tblrd		*
 13293  002ACE  50F5               	movf	tablat,w,c
 13294  002AD0  D0F7               	goto	i2l43
 13295  002AD2                     i2l3526:
 13296                           
 13297                           ;display1.h: 125: return 0b01000000;
 13298  002AD2  0E40               	movlw	64
 13299  002AD4  D0F5               	goto	i2l43
 13300  002AD6                     i2l3530:
 13301                           
 13302                           ;display1.h: 127: case ',':
 13303                           ;display1.h: 128: return 0b10000000;
 13304  002AD6  0E80               	movlw	128
 13305  002AD8  D0F3               	goto	i2l43
 13306  002ADA                     i2l3534:
 13307                           
 13308                           ;display1.h: 130: return 0b00000001 + 0b00001000 + 0b00010000 + 0b00100000;
 13309  002ADA  0E39               	movlw	57
 13310  002ADC  D0F1               	goto	i2l43
 13311  002ADE                     i2l3538:
 13312                           
 13313                           ;display1.h: 132: return 0b00000001 + 0b00000010 + 0b00000100 + 0b00001000;
 13314  002ADE  0E0F               	movlw	15
 13315  002AE0  D0EF               	goto	i2l43
 13316  002AE2                     i2l3542:
 13317                           
 13318                           ;display1.h: 134: return 0b00001000;
 13319  002AE2  0E08               	movlw	8
 13320  002AE4  D0ED               	goto	i2l43
 13321  002AE6                     i2l3546:
 13322                           
 13323                           ;display1.h: 136: return 0b00000001 + 0b00000010 + 0b00100000 + 0b01000000;
 13324  002AE6  0E63               	movlw	99
 13325  002AE8  D0EB               	goto	i2l43
 13326  002AEA                     i2l3554:
 13327                           
 13328                           ;display1.h: 140: return 0;
 13329  002AEA  0E00               	movlw	0
 13330  002AEC  D0E9               	goto	i2l43
 13331  002AEE                     i2l3560:
 13332  002AEE  5005               	movf	getFontChar@ch,w,c
 13333                           
 13334                           ; Switch size 1, requested type "space"
 13335                           ; Number of cases is 77, Range of values is 32 to 122
 13336                           ; switch strategies available:
 13337                           ; Name         Instructions Cycles
 13338                           ; simple_byte          232   117 (average)
 13339                           ;	Chosen strategy is simple_byte
 13340  002AF0  0A20               	xorlw	32	; case 32
 13341  002AF2  B4D8               	btfsc	status,2,c
 13342  002AF4  D7FA               	goto	i2l3554
 13343  002AF6  0A0A               	xorlw	10	; case 42
 13344  002AF8  B4D8               	btfsc	status,2,c
 13345  002AFA  D7F5               	goto	i2l3546
 13346  002AFC  0A06               	xorlw	6	; case 44
 13347  002AFE  B4D8               	btfsc	status,2,c
 13348  002B00  D7EA               	goto	i2l3530
 13349  002B02  0A01               	xorlw	1	; case 45
 13350  002B04  B4D8               	btfsc	status,2,c
 13351  002B06  D7E5               	goto	i2l3526
 13352  002B08  0A03               	xorlw	3	; case 46
 13353  002B0A  B4D8               	btfsc	status,2,c
 13354  002B0C  D7E4               	goto	i2l3530
 13355  002B0E  0A1E               	xorlw	30	; case 48
 13356  002B10  B4D8               	btfsc	status,2,c
 13357  002B12  D7C9               	goto	i2l3518
 13358  002B14  0A01               	xorlw	1	; case 49
 13359  002B16  B4D8               	btfsc	status,2,c
 13360  002B18  D7C6               	goto	i2l3518
 13361  002B1A  0A03               	xorlw	3	; case 50
 13362  002B1C  B4D8               	btfsc	status,2,c
 13363  002B1E  D7C3               	goto	i2l3518
 13364  002B20  0A01               	xorlw	1	; case 51
 13365  002B22  B4D8               	btfsc	status,2,c
 13366  002B24  D7C0               	goto	i2l3518
 13367  002B26  0A07               	xorlw	7	; case 52
 13368  002B28  B4D8               	btfsc	status,2,c
 13369  002B2A  D7BD               	goto	i2l3518
 13370  002B2C  0A01               	xorlw	1	; case 53
 13371  002B2E  B4D8               	btfsc	status,2,c
 13372  002B30  D7BA               	goto	i2l3518
 13373  002B32  0A03               	xorlw	3	; case 54
 13374  002B34  B4D8               	btfsc	status,2,c
 13375  002B36  D7B7               	goto	i2l3518
 13376  002B38  0A01               	xorlw	1	; case 55
 13377  002B3A  B4D8               	btfsc	status,2,c
 13378  002B3C  D7B4               	goto	i2l3518
 13379  002B3E  0A0F               	xorlw	15	; case 56
 13380  002B40  B4D8               	btfsc	status,2,c
 13381  002B42  D7B1               	goto	i2l3518
 13382  002B44  0A01               	xorlw	1	; case 57
 13383  002B46  B4D8               	btfsc	status,2,c
 13384  002B48  D7AE               	goto	i2l3518
 13385  002B4A  0A03               	xorlw	3	; case 58
 13386  002B4C  B4D8               	btfsc	status,2,c
 13387  002B4E  D7AB               	goto	i2l3518
 13388  002B50  0A01               	xorlw	1	; case 59
 13389  002B52  B4D8               	btfsc	status,2,c
 13390  002B54  D7A8               	goto	i2l3518
 13391  002B56  0A07               	xorlw	7	; case 60
 13392  002B58  B4D8               	btfsc	status,2,c
 13393  002B5A  D7A5               	goto	i2l3518
 13394  002B5C  0A01               	xorlw	1	; case 61
 13395  002B5E  B4D8               	btfsc	status,2,c
 13396  002B60  D7A2               	goto	i2l3518
 13397  002B62  0A03               	xorlw	3	; case 62
 13398  002B64  B4D8               	btfsc	status,2,c
 13399  002B66  D79F               	goto	i2l3518
 13400  002B68  0A01               	xorlw	1	; case 63
 13401  002B6A  B4D8               	btfsc	status,2,c
 13402  002B6C  D79C               	goto	i2l3518
 13403  002B6E  0A7F               	xorlw	127	; case 64
 13404  002B70  B4D8               	btfsc	status,2,c
 13405  002B72  D799               	goto	i2l3518
 13406  002B74  0A01               	xorlw	1	; case 65
 13407  002B76  B4D8               	btfsc	status,2,c
 13408  002B78  D796               	goto	i2l3518
 13409  002B7A  0A03               	xorlw	3	; case 66
 13410  002B7C  B4D8               	btfsc	status,2,c
 13411  002B7E  D793               	goto	i2l3518
 13412  002B80  0A01               	xorlw	1	; case 67
 13413  002B82  B4D8               	btfsc	status,2,c
 13414  002B84  D790               	goto	i2l3518
 13415  002B86  0A07               	xorlw	7	; case 68
 13416  002B88  B4D8               	btfsc	status,2,c
 13417  002B8A  D78D               	goto	i2l3518
 13418  002B8C  0A01               	xorlw	1	; case 69
 13419  002B8E  B4D8               	btfsc	status,2,c
 13420  002B90  D78A               	goto	i2l3518
 13421  002B92  0A03               	xorlw	3	; case 70
 13422  002B94  B4D8               	btfsc	status,2,c
 13423  002B96  D787               	goto	i2l3518
 13424  002B98  0A01               	xorlw	1	; case 71
 13425  002B9A  B4D8               	btfsc	status,2,c
 13426  002B9C  D784               	goto	i2l3518
 13427  002B9E  0A0F               	xorlw	15	; case 72
 13428  002BA0  B4D8               	btfsc	status,2,c
 13429  002BA2  D781               	goto	i2l3518
 13430  002BA4  0A01               	xorlw	1	; case 73
 13431  002BA6  B4D8               	btfsc	status,2,c
 13432  002BA8  D77E               	goto	i2l3518
 13433  002BAA  0A03               	xorlw	3	; case 74
 13434  002BAC  B4D8               	btfsc	status,2,c
 13435  002BAE  D77B               	goto	i2l3518
 13436  002BB0  0A01               	xorlw	1	; case 75
 13437  002BB2  B4D8               	btfsc	status,2,c
 13438  002BB4  D778               	goto	i2l3518
 13439  002BB6  0A07               	xorlw	7	; case 76
 13440  002BB8  B4D8               	btfsc	status,2,c
 13441  002BBA  D775               	goto	i2l3518
 13442  002BBC  0A01               	xorlw	1	; case 77
 13443  002BBE  B4D8               	btfsc	status,2,c
 13444  002BC0  D772               	goto	i2l3518
 13445  002BC2  0A03               	xorlw	3	; case 78
 13446  002BC4  B4D8               	btfsc	status,2,c
 13447  002BC6  D76F               	goto	i2l3518
 13448  002BC8  0A01               	xorlw	1	; case 79
 13449  002BCA  B4D8               	btfsc	status,2,c
 13450  002BCC  D76C               	goto	i2l3518
 13451  002BCE  0A1F               	xorlw	31	; case 80
 13452  002BD0  B4D8               	btfsc	status,2,c
 13453  002BD2  D769               	goto	i2l3518
 13454  002BD4  0A01               	xorlw	1	; case 81
 13455  002BD6  B4D8               	btfsc	status,2,c
 13456  002BD8  D766               	goto	i2l3518
 13457  002BDA  0A03               	xorlw	3	; case 82
 13458  002BDC  B4D8               	btfsc	status,2,c
 13459  002BDE  D763               	goto	i2l3518
 13460  002BE0  0A01               	xorlw	1	; case 83
 13461  002BE2  B4D8               	btfsc	status,2,c
 13462  002BE4  D760               	goto	i2l3518
 13463  002BE6  0A07               	xorlw	7	; case 84
 13464  002BE8  B4D8               	btfsc	status,2,c
 13465  002BEA  D75D               	goto	i2l3518
 13466  002BEC  0A01               	xorlw	1	; case 85
 13467  002BEE  B4D8               	btfsc	status,2,c
 13468  002BF0  D75A               	goto	i2l3518
 13469  002BF2  0A03               	xorlw	3	; case 86
 13470  002BF4  B4D8               	btfsc	status,2,c
 13471  002BF6  D757               	goto	i2l3518
 13472  002BF8  0A01               	xorlw	1	; case 87
 13473  002BFA  B4D8               	btfsc	status,2,c
 13474  002BFC  D754               	goto	i2l3518
 13475  002BFE  0A0F               	xorlw	15	; case 88
 13476  002C00  B4D8               	btfsc	status,2,c
 13477  002C02  D751               	goto	i2l3518
 13478  002C04  0A01               	xorlw	1	; case 89
 13479  002C06  B4D8               	btfsc	status,2,c
 13480  002C08  D74E               	goto	i2l3518
 13481  002C0A  0A03               	xorlw	3	; case 90
 13482  002C0C  B4D8               	btfsc	status,2,c
 13483  002C0E  D74B               	goto	i2l3518
 13484  002C10  0A01               	xorlw	1	; case 91
 13485  002C12  B4D8               	btfsc	status,2,c
 13486  002C14  D762               	goto	i2l3534
 13487  002C16  0A06               	xorlw	6	; case 93
 13488  002C18  B4D8               	btfsc	status,2,c
 13489  002C1A  D761               	goto	i2l3538
 13490  002C1C  0A02               	xorlw	2	; case 95
 13491  002C1E  B4D8               	btfsc	status,2,c
 13492  002C20  D760               	goto	i2l3542
 13493  002C22  0A3E               	xorlw	62	; case 97
 13494  002C24  B4D8               	btfsc	status,2,c
 13495  002C26  D741               	goto	i2l3522
 13496  002C28  0A03               	xorlw	3	; case 98
 13497  002C2A  B4D8               	btfsc	status,2,c
 13498  002C2C  D73E               	goto	i2l3522
 13499  002C2E  0A01               	xorlw	1	; case 99
 13500  002C30  B4D8               	btfsc	status,2,c
 13501  002C32  D73B               	goto	i2l3522
 13502  002C34  0A07               	xorlw	7	; case 100
 13503  002C36  B4D8               	btfsc	status,2,c
 13504  002C38  D738               	goto	i2l3522
 13505  002C3A  0A01               	xorlw	1	; case 101
 13506  002C3C  B4D8               	btfsc	status,2,c
 13507  002C3E  D735               	goto	i2l3522
 13508  002C40  0A03               	xorlw	3	; case 102
 13509  002C42  B4D8               	btfsc	status,2,c
 13510  002C44  D732               	goto	i2l3522
 13511  002C46  0A01               	xorlw	1	; case 103
 13512  002C48  B4D8               	btfsc	status,2,c
 13513  002C4A  D72F               	goto	i2l3522
 13514  002C4C  0A0F               	xorlw	15	; case 104
 13515  002C4E  B4D8               	btfsc	status,2,c
 13516  002C50  D72C               	goto	i2l3522
 13517  002C52  0A01               	xorlw	1	; case 105
 13518  002C54  B4D8               	btfsc	status,2,c
 13519  002C56  D729               	goto	i2l3522
 13520  002C58  0A03               	xorlw	3	; case 106
 13521  002C5A  B4D8               	btfsc	status,2,c
 13522  002C5C  D726               	goto	i2l3522
 13523  002C5E  0A01               	xorlw	1	; case 107
 13524  002C60  B4D8               	btfsc	status,2,c
 13525  002C62  D723               	goto	i2l3522
 13526  002C64  0A07               	xorlw	7	; case 108
 13527  002C66  B4D8               	btfsc	status,2,c
 13528  002C68  D720               	goto	i2l3522
 13529  002C6A  0A01               	xorlw	1	; case 109
 13530  002C6C  B4D8               	btfsc	status,2,c
 13531  002C6E  D71D               	goto	i2l3522
 13532  002C70  0A03               	xorlw	3	; case 110
 13533  002C72  B4D8               	btfsc	status,2,c
 13534  002C74  D71A               	goto	i2l3522
 13535  002C76  0A01               	xorlw	1	; case 111
 13536  002C78  B4D8               	btfsc	status,2,c
 13537  002C7A  D717               	goto	i2l3522
 13538  002C7C  0A1F               	xorlw	31	; case 112
 13539  002C7E  B4D8               	btfsc	status,2,c
 13540  002C80  D714               	goto	i2l3522
 13541  002C82  0A01               	xorlw	1	; case 113
 13542  002C84  B4D8               	btfsc	status,2,c
 13543  002C86  D711               	goto	i2l3522
 13544  002C88  0A03               	xorlw	3	; case 114
 13545  002C8A  B4D8               	btfsc	status,2,c
 13546  002C8C  D70E               	goto	i2l3522
 13547  002C8E  0A01               	xorlw	1	; case 115
 13548  002C90  B4D8               	btfsc	status,2,c
 13549  002C92  D70B               	goto	i2l3522
 13550  002C94  0A07               	xorlw	7	; case 116
 13551  002C96  B4D8               	btfsc	status,2,c
 13552  002C98  D708               	goto	i2l3522
 13553  002C9A  0A01               	xorlw	1	; case 117
 13554  002C9C  B4D8               	btfsc	status,2,c
 13555  002C9E  D705               	goto	i2l3522
 13556  002CA0  0A03               	xorlw	3	; case 118
 13557  002CA2  B4D8               	btfsc	status,2,c
 13558  002CA4  D702               	goto	i2l3522
 13559  002CA6  0A01               	xorlw	1	; case 119
 13560  002CA8  B4D8               	btfsc	status,2,c
 13561  002CAA  D6FF               	goto	i2l3522
 13562  002CAC  0A0F               	xorlw	15	; case 120
 13563  002CAE  B4D8               	btfsc	status,2,c
 13564  002CB0  D6FC               	goto	i2l3522
 13565  002CB2  0A01               	xorlw	1	; case 121
 13566  002CB4  B4D8               	btfsc	status,2,c
 13567  002CB6  D6F9               	goto	i2l3522
 13568  002CB8  0A03               	xorlw	3	; case 122
 13569  002CBA  B4D8               	btfsc	status,2,c
 13570  002CBC  D6F6               	goto	i2l3522
 13571  002CBE  D715               	goto	i2l3554
 13572  002CC0                     i2l43:
 13573  002CC0  0012               	return	
 13574  002CC2                     __end_of_getFontChar:
 13575                           	opt stack 0
 13576                           tosu	equ	0xFFF
 13577                           tosh	equ	0xFFE
 13578                           tosl	equ	0xFFD
 13579                           pclatu	equ	0xFFB
 13580                           pclath	equ	0xFFA
 13581                           tblptru	equ	0xFF8
 13582                           tblptrh	equ	0xFF7
 13583                           tblptrl	equ	0xFF6
 13584                           tablat	equ	0xFF5
 13585                           prodh	equ	0xFF4
 13586                           prodl	equ	0xFF3
 13587                           intcon	equ	0xFF2
 13588                           intcon2	equ	0xFF1
 13589                           indf0	equ	0xFEF
 13590                           postinc0	equ	0xFEE
 13591                           fsr0h	equ	0xFEA
 13592                           fsr0l	equ	0xFE9
 13593                           wreg	equ	0xFE8
 13594                           postinc1	equ	0xFE6
 13595                           postdec1	equ	0xFE5
 13596                           fsr1h	equ	0xFE2
 13597                           fsr1l	equ	0xFE1
 13598                           indf2	equ	0xFDF
 13599                           postinc2	equ	0xFDE
 13600                           postdec2	equ	0xFDD
 13601                           plusw2	equ	0xFDB
 13602                           fsr2h	equ	0xFDA
 13603                           fsr2l	equ	0xFD9
 13604                           status	equ	0xFD8
 13605                           
 13606 ;; *************** function _hibit *****************
 13607 ;; Defined at:
 13608 ;;		line 18 in file "defs.c"
 13609 ;; Parameters:    Size  Location     Type
 13610 ;;  x               4    0[COMRAM] unsigned long 
 13611 ;; Auto vars:     Size  Location     Type
 13612 ;;  log2Val         4    7[COMRAM] unsigned long 
 13613 ;; Return value:  Size  Location     Type
 13614 ;;                  4    0[COMRAM] unsigned long 
 13615 ;; Registers used:
 13616 ;;		wreg, status,2, status,0
 13617 ;; Tracked objects:
 13618 ;;		On entry : 0/0
 13619 ;;		On exit  : 0/0
 13620 ;;		Unchanged: 0/0
 13621 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13622 ;;      Params:         4       0       0       0       0       0       0       0       0
 13623 ;;      Locals:         4       0       0       0       0       0       0       0       0
 13624 ;;      Temps:          3       0       0       0       0       0       0       0       0
 13625 ;;      Totals:        11       0       0       0       0       0       0       0       0
 13626 ;;Total ram usage:       11 bytes
 13627 ;; Hardware stack levels used:    1
 13628 ;; This function calls:
 13629 ;;		Nothing
 13630 ;; This function is called by:
 13631 ;;		_writeString
 13632 ;; This function uses a non-reentrant model
 13633 ;;
 13634                           
 13635                           	psect	text45
 13636  0041CE                     __ptext45:
 13637                           	opt stack 0
 13638  0041CE                     _hibit:
 13639                           	opt stack 24
 13640                           
 13641                           ;defs.c: 20: uint32_t log2Val = 0;
 13642                           
 13643                           ;incstack = 0
 13644  0041CE  0E00               	movlw	0
 13645  0041D0  6E08               	movwf	hibit@log2Val,c
 13646  0041D2  0E00               	movlw	0
 13647  0041D4  6E09               	movwf	hibit@log2Val+1,c
 13648  0041D6  0E00               	movlw	0
 13649  0041D8  6E0A               	movwf	hibit@log2Val+2,c
 13650  0041DA  0E00               	movlw	0
 13651  0041DC  6E0B               	movwf	hibit@log2Val+3,c
 13652                           
 13653                           ;defs.c: 21: while (x >>= 1) log2Val++;
 13654  0041DE  D006               	goto	i2l494
 13655  0041E0                     i2l3582:
 13656  0041E0  0E01               	movlw	1
 13657  0041E2  2608               	addwf	hibit@log2Val,f,c
 13658  0041E4  0E00               	movlw	0
 13659  0041E6  2209               	addwfc	hibit@log2Val+1,f,c
 13660  0041E8  220A               	addwfc	hibit@log2Val+2,f,c
 13661  0041EA  220B               	addwfc	hibit@log2Val+3,f,c
 13662  0041EC                     i2l494:
 13663  0041EC  90D8               	bcf	status,0,c
 13664  0041EE  3204               	rrcf	hibit@x+3,f,c
 13665  0041F0  3203               	rrcf	hibit@x+2,f,c
 13666  0041F2  3202               	rrcf	hibit@x+1,f,c
 13667  0041F4  3201               	rrcf	hibit@x,f,c
 13668  0041F6  5004               	movf	(hibit@x+3)& (0+255),w,c
 13669  0041F8  1001               	iorwf	hibit@x& (0+255),w,c
 13670  0041FA  1002               	iorwf	(hibit@x+1)& (0+255),w,c
 13671  0041FC  1003               	iorwf	(hibit@x+2)& (0+255),w,c
 13672  0041FE  A4D8               	btfss	status,2,c
 13673  004200  D7EF               	goto	i2l3582
 13674                           
 13675                           ;defs.c: 22: return 1 << log2Val;
 13676  004202  C008  F005         	movff	hibit@log2Val,??_hibit
 13677  004206  0E01               	movlw	1
 13678  004208  6E06               	movwf	(??_hibit+1)& (0+255),c
 13679  00420A  6A07               	clrf	(??_hibit+2)& (0+255),c
 13680  00420C  2A05               	incf	??_hibit,f,c
 13681  00420E  D003               	goto	i2u295_44
 13682  004210                     i2u295_45:
 13683  004210  90D8               	bcf	status,0,c
 13684  004212  3606               	rlcf	??_hibit+1,f,c
 13685  004214  3607               	rlcf	??_hibit+2,f,c
 13686  004216                     i2u295_44:
 13687  004216  2E05               	decfsz	??_hibit,f,c
 13688  004218  D7FB               	goto	i2u295_45
 13689  00421A  C006  F001         	movff	??_hibit+1,?_hibit
 13690  00421E  C007  F002         	movff	??_hibit+2,?_hibit+1
 13691  004222  0E00               	movlw	0
 13692  004224  BE02               	btfsc	?_hibit+1,7,c
 13693  004226  0EFF               	movlw	-1
 13694  004228  6E03               	movwf	?_hibit+2,c
 13695  00422A  6E04               	movwf	?_hibit+3,c
 13696  00422C  0012               	return	
 13697  00422E                     __end_of_hibit:
 13698                           	opt stack 0
 13699                           tosu	equ	0xFFF
 13700                           tosh	equ	0xFFE
 13701                           tosl	equ	0xFFD
 13702                           pclatu	equ	0xFFB
 13703                           pclath	equ	0xFFA
 13704                           tblptru	equ	0xFF8
 13705                           tblptrh	equ	0xFF7
 13706                           tblptrl	equ	0xFF6
 13707                           tablat	equ	0xFF5
 13708                           prodh	equ	0xFF4
 13709                           prodl	equ	0xFF3
 13710                           intcon	equ	0xFF2
 13711                           intcon2	equ	0xFF1
 13712                           indf0	equ	0xFEF
 13713                           postinc0	equ	0xFEE
 13714                           fsr0h	equ	0xFEA
 13715                           fsr0l	equ	0xFE9
 13716                           wreg	equ	0xFE8
 13717                           postinc1	equ	0xFE6
 13718                           postdec1	equ	0xFE5
 13719                           fsr1h	equ	0xFE2
 13720                           fsr1l	equ	0xFE1
 13721                           indf2	equ	0xFDF
 13722                           postinc2	equ	0xFDE
 13723                           postdec2	equ	0xFDD
 13724                           plusw2	equ	0xFDB
 13725                           fsr2h	equ	0xFDA
 13726                           fsr2l	equ	0xFD9
 13727                           status	equ	0xFD8
 13728                           
 13729 ;; *************** function _countBits *****************
 13730 ;; Defined at:
 13731 ;;		line 8 in file "defs.c"
 13732 ;; Parameters:    Size  Location     Type
 13733 ;;  num             4    0[COMRAM] unsigned long 
 13734 ;; Auto vars:     Size  Location     Type
 13735 ;;  ret             1    4[COMRAM] unsigned char 
 13736 ;; Return value:  Size  Location     Type
 13737 ;;                  1    wreg      unsigned char 
 13738 ;; Registers used:
 13739 ;;		wreg, status,2, status,0
 13740 ;; Tracked objects:
 13741 ;;		On entry : 0/0
 13742 ;;		On exit  : 0/0
 13743 ;;		Unchanged: 0/0
 13744 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13745 ;;      Params:         4       0       0       0       0       0       0       0       0
 13746 ;;      Locals:         1       0       0       0       0       0       0       0       0
 13747 ;;      Temps:          0       0       0       0       0       0       0       0       0
 13748 ;;      Totals:         5       0       0       0       0       0       0       0       0
 13749 ;;Total ram usage:        5 bytes
 13750 ;; Hardware stack levels used:    1
 13751 ;; This function calls:
 13752 ;;		Nothing
 13753 ;; This function is called by:
 13754 ;;		_writeString
 13755 ;;		_printRTC
 13756 ;;		_printTemp
 13757 ;;		_writeLong
 13758 ;;		_writeFloat
 13759 ;;		_maxSize
 13760 ;; This function uses a non-reentrant model
 13761 ;;
 13762                           
 13763                           	psect	text46
 13764  004552                     __ptext46:
 13765                           	opt stack 0
 13766  004552                     _countBits:
 13767                           	opt stack 24
 13768                           
 13769                           ;defs.c: 10: uint8_t ret = num & 1;
 13770                           
 13771                           ;incstack = 0
 13772  004552  5001               	movf	countBits@num,w,c
 13773  004554  0B01               	andlw	1
 13774  004556  6E05               	movwf	countBits@ret,c
 13775                           
 13776                           ;defs.c: 11: while (num) ret += (0x1 & (num >>= 1));
 13777  004558  D008               	goto	i2l488
 13778  00455A                     i2l3574:
 13779  00455A  90D8               	bcf	status,0,c
 13780  00455C  3204               	rrcf	countBits@num+3,f,c
 13781  00455E  3203               	rrcf	countBits@num+2,f,c
 13782  004560  3202               	rrcf	countBits@num+1,f,c
 13783  004562  3201               	rrcf	countBits@num,f,c
 13784  004564  5001               	movf	countBits@num& (0+255),w,c
 13785  004566  0B01               	andlw	1
 13786  004568  2605               	addwf	countBits@ret,f,c
 13787  00456A                     i2l488:
 13788  00456A  5004               	movf	countBits@num+3,w,c
 13789  00456C  1001               	iorwf	countBits@num,w,c
 13790  00456E  1002               	iorwf	countBits@num+1,w,c
 13791  004570  1003               	iorwf	countBits@num+2,w,c
 13792  004572  A4D8               	btfss	status,2,c
 13793  004574  D7F2               	goto	i2l3574
 13794                           
 13795                           ;defs.c: 12: return ret;
 13796  004576  5005               	movf	countBits@ret,w,c
 13797  004578  0012               	return	
 13798  00457A                     __end_of_countBits:
 13799                           	opt stack 0
 13800                           tosu	equ	0xFFF
 13801                           tosh	equ	0xFFE
 13802                           tosl	equ	0xFFD
 13803                           pclatu	equ	0xFFB
 13804                           pclath	equ	0xFFA
 13805                           tblptru	equ	0xFF8
 13806                           tblptrh	equ	0xFF7
 13807                           tblptrl	equ	0xFF6
 13808                           tablat	equ	0xFF5
 13809                           prodh	equ	0xFF4
 13810                           prodl	equ	0xFF3
 13811                           intcon	equ	0xFF2
 13812                           intcon2	equ	0xFF1
 13813                           indf0	equ	0xFEF
 13814                           postinc0	equ	0xFEE
 13815                           fsr0h	equ	0xFEA
 13816                           fsr0l	equ	0xFE9
 13817                           wreg	equ	0xFE8
 13818                           postinc1	equ	0xFE6
 13819                           postdec1	equ	0xFE5
 13820                           fsr1h	equ	0xFE2
 13821                           fsr1l	equ	0xFE1
 13822                           indf2	equ	0xFDF
 13823                           postinc2	equ	0xFDE
 13824                           postdec2	equ	0xFDD
 13825                           plusw2	equ	0xFDB
 13826                           fsr2h	equ	0xFDA
 13827                           fsr2l	equ	0xFD9
 13828                           status	equ	0xFD8
 13829                           
 13830 ;; *************** function _saveTime *****************
 13831 ;; Defined at:
 13832 ;;		line 77 in file "RTC.c"
 13833 ;; Parameters:    Size  Location     Type
 13834 ;;  date            9    0[COMRAM] struct sDate
 13835 ;; Auto vars:     Size  Location     Type
 13836 ;;  cnt             1   10[COMRAM] unsigned char 
 13837 ;; Return value:  Size  Location     Type
 13838 ;;		None               void
 13839 ;; Registers used:
 13840 ;;		wreg, status,2, status,0
 13841 ;; Tracked objects:
 13842 ;;		On entry : 0/0
 13843 ;;		On exit  : 0/0
 13844 ;;		Unchanged: 0/0
 13845 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13846 ;;      Params:         9       0       0       0       0       0       0       0       0
 13847 ;;      Locals:         2       0       0       0       0       0       0       0       0
 13848 ;;      Temps:          0       0       0       0       0       0       0       0       0
 13849 ;;      Totals:        11       0       0       0       0       0       0       0       0
 13850 ;;Total ram usage:       11 bytes
 13851 ;; Hardware stack levels used:    1
 13852 ;; This function calls:
 13853 ;;		Nothing
 13854 ;; This function is called by:
 13855 ;;		_tick
 13856 ;; This function uses a non-reentrant model
 13857 ;;
 13858                           
 13859                           	psect	text47
 13860  00408E                     __ptext47:
 13861                           	opt stack 0
 13862  00408E                     _saveTime:
 13863                           	opt stack 25
 13864                           
 13865                           ;RTC.c: 79: WREN = 1;
 13866                           
 13867                           ;incstack = 0
 13868  00408E  84A6               	bsf	4006,2,c	;volatile
 13869                           
 13870                           ;RTC.c: 80: uint8_t cnt;
 13871                           ;RTC.c: 82: for (cnt = 1; cnt < 7; cnt++)
 13872  004090  0E01               	movlw	1
 13873  004092  6E0B               	movwf	saveTime@cnt,c
 13874  004094  D030               	goto	L28
 13875  004096                     i2l197:
 13876                           
 13877                           ;RTC.c: 83: {
 13878                           ;RTC.c: 84: EEADR = 0 + cnt;
 13879  004096  C00B  FFA9         	movff	saveTime@cnt,4009	;volatile
 13880                           
 13881                           ;RTC.c: 85: switch (cnt)
 13882  00409A  D00F               	goto	i2l3708
 13883  00409C                     i2l200:
 13884                           
 13885                           ;RTC.c: 88: EEDATA = date.minute;
 13886  00409C  C002  FFA8         	movff	saveTime@date+1,4008	;volatile
 13887                           
 13888                           ;RTC.c: 89: break;
 13889  0040A0  D01F               	goto	i2l3710
 13890  0040A2                     i2l202:
 13891                           
 13892                           ;RTC.c: 91: EEDATA = date.hour;
 13893  0040A2  C003  FFA8         	movff	saveTime@date+2,4008	;volatile
 13894                           
 13895                           ;RTC.c: 92: break;
 13896  0040A6  D01C               	goto	i2l3710
 13897  0040A8                     i2l203:
 13898                           
 13899                           ;RTC.c: 94: EEDATA = date.day;
 13900  0040A8  C004  FFA8         	movff	saveTime@date+3,4008	;volatile
 13901                           
 13902                           ;RTC.c: 95: break;
 13903  0040AC  D019               	goto	i2l3710
 13904  0040AE                     i2l204:
 13905                           
 13906                           ;RTC.c: 97: EEDATA = date.month;
 13907  0040AE  C006  FFA8         	movff	saveTime@date+5,4008	;volatile
 13908                           
 13909                           ;RTC.c: 98: break;
 13910  0040B2  D016               	goto	i2l3710
 13911  0040B4                     i2l206:
 13912                           
 13913                           ;RTC.c: 103: EEDATA = date.year;
 13914  0040B4  C007  FFA8         	movff	saveTime@date+6,4008	;volatile
 13915                           
 13916                           ;RTC.c: 104: break;
 13917  0040B8  D013               	goto	i2l3710
 13918  0040BA                     i2l3708:
 13919  0040BA  500B               	movf	saveTime@cnt,w,c
 13920                           
 13921                           ; Switch size 1, requested type "space"
 13922                           ; Number of cases is 6, Range of values is 1 to 6
 13923                           ; switch strategies available:
 13924                           ; Name         Instructions Cycles
 13925                           ; simple_byte           19    10 (average)
 13926                           ;	Chosen strategy is simple_byte
 13927  0040BC  0A01               	xorlw	1	; case 1
 13928  0040BE  B4D8               	btfsc	status,2,c
 13929  0040C0  D7ED               	goto	i2l200
 13930  0040C2  0A03               	xorlw	3	; case 2
 13931  0040C4  B4D8               	btfsc	status,2,c
 13932  0040C6  D7ED               	goto	i2l202
 13933  0040C8  0A01               	xorlw	1	; case 3
 13934  0040CA  B4D8               	btfsc	status,2,c
 13935  0040CC  D7ED               	goto	i2l203
 13936  0040CE  0A07               	xorlw	7	; case 4
 13937  0040D0  B4D8               	btfsc	status,2,c
 13938  0040D2  D7ED               	goto	i2l204
 13939  0040D4  0A01               	xorlw	1	; case 5
 13940  0040D6  B4D8               	btfsc	status,2,c
 13941  0040D8  D7ED               	goto	i2l206
 13942  0040DA  0A03               	xorlw	3	; case 6
 13943  0040DC  B4D8               	btfsc	status,2,c
 13944  0040DE  D7EA               	goto	i2l206
 13945  0040E0                     i2l3710:
 13946                           
 13947                           ;RTC.c: 106: EECON2 = 0x55;
 13948  0040E0  0E55               	movlw	85
 13949  0040E2  6EA7               	movwf	4007,c	;volatile
 13950                           
 13951                           ;RTC.c: 107: EECON2 = 0xAA;
 13952  0040E4  0EAA               	movlw	170
 13953  0040E6  6EA7               	movwf	4007,c	;volatile
 13954                           
 13955                           ;RTC.c: 108: WR = 1;
 13956  0040E8  82A6               	bsf	4006,1,c	;volatile
 13957                           
 13958                           ;RTC.c: 109: while (WR)
 13959  0040EA  D001               	goto	i2l207
 13960  0040EC                     i2l208:
 13961                           
 13962                           ;RTC.c: 110: {
 13963                           ;RTC.c: 111: LATC6 = 1;
 13964  0040EC  8C8B               	bsf	3979,6,c	;volatile
 13965  0040EE                     i2l207:
 13966  0040EE  B2A6               	btfsc	4006,1,c	;volatile
 13967  0040F0  D7FD               	goto	i2l208
 13968                           
 13969                           ;RTC.c: 112: }
 13970                           ;RTC.c: 113: LATC6 = 0;
 13971  0040F2  9C8B               	bcf	3979,6,c	;volatile
 13972  0040F4  2A0B               	incf	saveTime@cnt,f,c
 13973  0040F6                     L28:
 13974  0040F6  0E06               	movlw	6
 13975  0040F8  640B               	cpfsgt	saveTime@cnt,c
 13976  0040FA  D7CD               	goto	i2l197
 13977  0040FC  0012               	return	
 13978  0040FE                     __end_of_saveTime:
 13979                           	opt stack 0
 13980                           tosu	equ	0xFFF
 13981                           tosh	equ	0xFFE
 13982                           tosl	equ	0xFFD
 13983                           pclatu	equ	0xFFB
 13984                           pclath	equ	0xFFA
 13985                           tblptru	equ	0xFF8
 13986                           tblptrh	equ	0xFF7
 13987                           tblptrl	equ	0xFF6
 13988                           tablat	equ	0xFF5
 13989                           prodh	equ	0xFF4
 13990                           prodl	equ	0xFF3
 13991                           intcon	equ	0xFF2
 13992                           intcon2	equ	0xFF1
 13993                           indf0	equ	0xFEF
 13994                           postinc0	equ	0xFEE
 13995                           fsr0h	equ	0xFEA
 13996                           fsr0l	equ	0xFE9
 13997                           wreg	equ	0xFE8
 13998                           postinc1	equ	0xFE6
 13999                           postdec1	equ	0xFE5
 14000                           fsr1h	equ	0xFE2
 14001                           fsr1l	equ	0xFE1
 14002                           indf2	equ	0xFDF
 14003                           postinc2	equ	0xFDE
 14004                           postdec2	equ	0xFDD
 14005                           plusw2	equ	0xFDB
 14006                           fsr2h	equ	0xFDA
 14007                           fsr2l	equ	0xFD9
 14008                           status	equ	0xFD8
 14009                           
 14010 ;; *************** function _daysOfMonth *****************
 14011 ;; Defined at:
 14012 ;;		line 117 in file "RTC.c"
 14013 ;; Parameters:    Size  Location     Type
 14014 ;;  month           1    wreg     unsigned char 
 14015 ;;  year            2    5[COMRAM] unsigned int 
 14016 ;; Auto vars:     Size  Location     Type
 14017 ;;  month           1   10[COMRAM] unsigned char 
 14018 ;; Return value:  Size  Location     Type
 14019 ;;                  1    wreg      unsigned char 
 14020 ;; Registers used:
 14021 ;;		wreg, status,2, status,0, cstack
 14022 ;; Tracked objects:
 14023 ;;		On entry : 0/0
 14024 ;;		On exit  : 0/0
 14025 ;;		Unchanged: 0/0
 14026 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 14027 ;;      Params:         2       0       0       0       0       0       0       0       0
 14028 ;;      Locals:         2       0       0       0       0       0       0       0       0
 14029 ;;      Temps:          2       0       0       0       0       0       0       0       0
 14030 ;;      Totals:         6       0       0       0       0       0       0       0       0
 14031 ;;Total ram usage:        6 bytes
 14032 ;; Hardware stack levels used:    1
 14033 ;; Hardware stack levels required when called:    1
 14034 ;; This function calls:
 14035 ;;		___lwmod
 14036 ;; This function is called by:
 14037 ;;		_tick
 14038 ;; This function uses a non-reentrant model
 14039 ;;
 14040                           
 14041                           	psect	text48
 14042  003A32                     __ptext48:
 14043                           	opt stack 0
 14044  003A32                     _daysOfMonth:
 14045                           	opt stack 24
 14046                           
 14047                           ;incstack = 0
 14048                           ;daysOfMonth@month stored from wreg
 14049  003A32  6E0B               	movwf	daysOfMonth@month,c
 14050                           
 14051                           ;RTC.c: 119: switch (month)
 14052  003A34  D02E               	goto	i2l3744
 14053  003A36                     i2l3720:
 14054                           
 14055                           ;RTC.c: 122: case 3:
 14056                           ;RTC.c: 123: case 5:
 14057                           ;RTC.c: 124: case 7:
 14058                           ;RTC.c: 125: case 8:
 14059                           ;RTC.c: 126: case 10:
 14060                           ;RTC.c: 127: case 12:
 14061                           ;RTC.c: 128: return 31;
 14062  003A36  0E1F               	movlw	31
 14063  003A38  D052               	goto	i2l221
 14064  003A3A                     i2l3724:
 14065                           
 14066                           ;RTC.c: 131: case 6:
 14067                           ;RTC.c: 132: case 9:
 14068                           ;RTC.c: 133: case 11:
 14069                           ;RTC.c: 134: return 30;
 14070  003A3A  0E1E               	movlw	30
 14071  003A3C  D050               	goto	i2l221
 14072  003A3E                     i2l3728:
 14073                           
 14074                           ;RTC.c: 137: if ((((year)%4 == 0) && (((year)%100 != 0) || ((year)%400 == 0))))
 14075  003A3E  0E03               	movlw	3
 14076  003A40  1406               	andwf	daysOfMonth@year,w,c
 14077  003A42  6E08               	movwf	??_daysOfMonth& (0+255),c
 14078  003A44  0E00               	movlw	0
 14079  003A46  1407               	andwf	daysOfMonth@year+1,w,c
 14080  003A48  6E09               	movwf	(??_daysOfMonth+1)& (0+255),c
 14081  003A4A  5009               	movf	??_daysOfMonth+1,w,c
 14082  003A4C  1008               	iorwf	??_daysOfMonth,w,c
 14083  003A4E  A4D8               	btfss	status,2,c
 14084  003A50  D01E               	goto	i2l3740
 14085  003A52  C006  F001         	movff	daysOfMonth@year,___lwmod@dividend
 14086  003A56  C007  F002         	movff	daysOfMonth@year+1,___lwmod@dividend+1
 14087  003A5A  0E00               	movlw	0
 14088  003A5C  6E04               	movwf	___lwmod@divisor+1,c
 14089  003A5E  0E64               	movlw	100
 14090  003A60  6E03               	movwf	___lwmod@divisor,c
 14091  003A62  EC56  F022         	call	___lwmod	;wreg free
 14092  003A66  5002               	movf	?___lwmod+1,w,c
 14093  003A68  1001               	iorwf	?___lwmod,w,c
 14094  003A6A  A4D8               	btfss	status,2,c
 14095  003A6C  D00E               	goto	i2l3734
 14096  003A6E  C006  F001         	movff	daysOfMonth@year,___lwmod@dividend
 14097  003A72  C007  F002         	movff	daysOfMonth@year+1,___lwmod@dividend+1
 14098  003A76  0E01               	movlw	1
 14099  003A78  6E04               	movwf	___lwmod@divisor+1,c
 14100  003A7A  0E90               	movlw	144
 14101  003A7C  6E03               	movwf	___lwmod@divisor,c
 14102  003A7E  EC56  F022         	call	___lwmod	;wreg free
 14103  003A82  5002               	movf	?___lwmod+1,w,c
 14104  003A84  1001               	iorwf	?___lwmod,w,c
 14105  003A86  A4D8               	btfss	status,2,c
 14106  003A88  D002               	goto	i2l3740
 14107  003A8A                     i2l3734:
 14108                           
 14109                           ;RTC.c: 138: return 29;
 14110  003A8A  0E1D               	movlw	29
 14111  003A8C  D028               	goto	i2l221
 14112  003A8E                     i2l3740:
 14113                           
 14114                           ;RTC.c: 139: else
 14115                           ;RTC.c: 140: return 28;
 14116  003A8E  0E1C               	movlw	28
 14117  003A90  D026               	goto	i2l221
 14118  003A92                     i2l3744:
 14119  003A92  500B               	movf	daysOfMonth@month,w,c
 14120                           
 14121                           ; Switch size 1, requested type "space"
 14122                           ; Number of cases is 12, Range of values is 1 to 12
 14123                           ; switch strategies available:
 14124                           ; Name         Instructions Cycles
 14125                           ; simple_byte           37    19 (average)
 14126                           ;	Chosen strategy is simple_byte
 14127  003A94  0A01               	xorlw	1	; case 1
 14128  003A96  B4D8               	btfsc	status,2,c
 14129  003A98  D7CE               	goto	i2l3720
 14130  003A9A  0A03               	xorlw	3	; case 2
 14131  003A9C  B4D8               	btfsc	status,2,c
 14132  003A9E  D7CF               	goto	i2l3728
 14133  003AA0  0A01               	xorlw	1	; case 3
 14134  003AA2  B4D8               	btfsc	status,2,c
 14135  003AA4  D7C8               	goto	i2l3720
 14136  003AA6  0A07               	xorlw	7	; case 4
 14137  003AA8  B4D8               	btfsc	status,2,c
 14138  003AAA  D7C7               	goto	i2l3724
 14139  003AAC  0A01               	xorlw	1	; case 5
 14140  003AAE  B4D8               	btfsc	status,2,c
 14141  003AB0  D7C2               	goto	i2l3720
 14142  003AB2  0A03               	xorlw	3	; case 6
 14143  003AB4  B4D8               	btfsc	status,2,c
 14144  003AB6  D7C1               	goto	i2l3724
 14145  003AB8  0A01               	xorlw	1	; case 7
 14146  003ABA  B4D8               	btfsc	status,2,c
 14147  003ABC  D7BC               	goto	i2l3720
 14148  003ABE  0A0F               	xorlw	15	; case 8
 14149  003AC0  B4D8               	btfsc	status,2,c
 14150  003AC2  D7B9               	goto	i2l3720
 14151  003AC4  0A01               	xorlw	1	; case 9
 14152  003AC6  B4D8               	btfsc	status,2,c
 14153  003AC8  D7B8               	goto	i2l3724
 14154  003ACA  0A03               	xorlw	3	; case 10
 14155  003ACC  B4D8               	btfsc	status,2,c
 14156  003ACE  D7B3               	goto	i2l3720
 14157  003AD0  0A01               	xorlw	1	; case 11
 14158  003AD2  B4D8               	btfsc	status,2,c
 14159  003AD4  D7B2               	goto	i2l3724
 14160  003AD6  0A07               	xorlw	7	; case 12
 14161  003AD8  B4D8               	btfsc	status,2,c
 14162  003ADA  D7AD               	goto	i2l3720
 14163                           
 14164                           ;RTC.c: 143: return 0;
 14165  003ADC  0E00               	movlw	0
 14166  003ADE                     i2l221:
 14167  003ADE  0012               	return	
 14168  003AE0                     __end_of_daysOfMonth:
 14169                           	opt stack 0
 14170                           tosu	equ	0xFFF
 14171                           tosh	equ	0xFFE
 14172                           tosl	equ	0xFFD
 14173                           pclatu	equ	0xFFB
 14174                           pclath	equ	0xFFA
 14175                           tblptru	equ	0xFF8
 14176                           tblptrh	equ	0xFF7
 14177                           tblptrl	equ	0xFF6
 14178                           tablat	equ	0xFF5
 14179                           prodh	equ	0xFF4
 14180                           prodl	equ	0xFF3
 14181                           intcon	equ	0xFF2
 14182                           intcon2	equ	0xFF1
 14183                           indf0	equ	0xFEF
 14184                           postinc0	equ	0xFEE
 14185                           fsr0h	equ	0xFEA
 14186                           fsr0l	equ	0xFE9
 14187                           wreg	equ	0xFE8
 14188                           postinc1	equ	0xFE6
 14189                           postdec1	equ	0xFE5
 14190                           fsr1h	equ	0xFE2
 14191                           fsr1l	equ	0xFE1
 14192                           indf2	equ	0xFDF
 14193                           postinc2	equ	0xFDE
 14194                           postdec2	equ	0xFDD
 14195                           plusw2	equ	0xFDB
 14196                           fsr2h	equ	0xFDA
 14197                           fsr2l	equ	0xFD9
 14198                           status	equ	0xFD8
 14199                           
 14200 ;; *************** function ___lwmod *****************
 14201 ;; Defined at:
 14202 ;;		line 8 in file "/opt/microchip/xc8/v1.32/sources/common/lwmod.c"
 14203 ;; Parameters:    Size  Location     Type
 14204 ;;  dividend        2    0[COMRAM] unsigned int 
 14205 ;;  divisor         2    2[COMRAM] unsigned int 
 14206 ;; Auto vars:     Size  Location     Type
 14207 ;;  counter         1    4[COMRAM] unsigned char 
 14208 ;; Return value:  Size  Location     Type
 14209 ;;                  2    0[COMRAM] unsigned int 
 14210 ;; Registers used:
 14211 ;;		wreg, status,2, status,0
 14212 ;; Tracked objects:
 14213 ;;		On entry : 0/0
 14214 ;;		On exit  : 0/0
 14215 ;;		Unchanged: 0/0
 14216 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 14217 ;;      Params:         4       0       0       0       0       0       0       0       0
 14218 ;;      Locals:         1       0       0       0       0       0       0       0       0
 14219 ;;      Temps:          0       0       0       0       0       0       0       0       0
 14220 ;;      Totals:         5       0       0       0       0       0       0       0       0
 14221 ;;Total ram usage:        5 bytes
 14222 ;; Hardware stack levels used:    1
 14223 ;; This function calls:
 14224 ;;		Nothing
 14225 ;; This function is called by:
 14226 ;;		_daysOfMonth
 14227 ;;		_printRTC
 14228 ;; This function uses a non-reentrant model
 14229 ;;
 14230                           
 14231                           	psect	text49
 14232  0044AC                     __ptext49:
 14233                           	opt stack 0
 14234  0044AC                     ___lwmod:
 14235                           	opt stack 24
 14236                           
 14237                           ;incstack = 0
 14238  0044AC  5004               	movf	___lwmod@divisor+1,w,c
 14239  0044AE  1003               	iorwf	___lwmod@divisor,w,c
 14240  0044B0  B4D8               	btfsc	status,2,c
 14241  0044B2  D018               	goto	i2l1351
 14242  0044B4  0E01               	movlw	1
 14243  0044B6  6E05               	movwf	___lwmod@counter,c
 14244  0044B8  D004               	goto	i2l3634
 14245  0044BA                     i2l3632:
 14246  0044BA  90D8               	bcf	status,0,c
 14247  0044BC  3603               	rlcf	___lwmod@divisor,f,c
 14248  0044BE  3604               	rlcf	___lwmod@divisor+1,f,c
 14249  0044C0  2A05               	incf	___lwmod@counter,f,c
 14250  0044C2                     i2l3634:
 14251  0044C2  AE04               	btfss	___lwmod@divisor+1,7,c
 14252  0044C4  D7FA               	goto	i2l3632
 14253  0044C6                     i2l3636:
 14254  0044C6  5003               	movf	___lwmod@divisor,w,c
 14255  0044C8  5C01               	subwf	___lwmod@dividend,w,c
 14256  0044CA  5004               	movf	___lwmod@divisor+1,w,c
 14257  0044CC  5802               	subwfb	___lwmod@dividend+1,w,c
 14258  0044CE  A0D8               	btfss	status,0,c
 14259  0044D0  D004               	goto	i2l3640
 14260  0044D2  5003               	movf	___lwmod@divisor,w,c
 14261  0044D4  5E01               	subwf	___lwmod@dividend,f,c
 14262  0044D6  5004               	movf	___lwmod@divisor+1,w,c
 14263  0044D8  5A02               	subwfb	___lwmod@dividend+1,f,c
 14264  0044DA                     i2l3640:
 14265  0044DA  90D8               	bcf	status,0,c
 14266  0044DC  3204               	rrcf	___lwmod@divisor+1,f,c
 14267  0044DE  3203               	rrcf	___lwmod@divisor,f,c
 14268  0044E0  2E05               	decfsz	___lwmod@counter,f,c
 14269  0044E2  D7F1               	goto	i2l3636
 14270  0044E4                     i2l1351:
 14271  0044E4  C001  F001         	movff	___lwmod@dividend,?___lwmod
 14272  0044E8  C002  F002         	movff	___lwmod@dividend+1,?___lwmod+1
 14273  0044EC  0012               	return	
 14274  0044EE                     __end_of___lwmod:
 14275                           	opt stack 0
 14276                           tosu	equ	0xFFF
 14277                           tosh	equ	0xFFE
 14278                           tosl	equ	0xFFD
 14279                           pclatu	equ	0xFFB
 14280                           pclath	equ	0xFFA
 14281                           tblptru	equ	0xFF8
 14282                           tblptrh	equ	0xFF7
 14283                           tblptrl	equ	0xFF6
 14284                           tablat	equ	0xFF5
 14285                           prodh	equ	0xFF4
 14286                           prodl	equ	0xFF3
 14287                           intcon	equ	0xFF2
 14288                           intcon2	equ	0xFF1
 14289                           indf0	equ	0xFEF
 14290                           postinc0	equ	0xFEE
 14291                           fsr0h	equ	0xFEA
 14292                           fsr0l	equ	0xFE9
 14293                           wreg	equ	0xFE8
 14294                           postinc1	equ	0xFE6
 14295                           postdec1	equ	0xFE5
 14296                           fsr1h	equ	0xFE2
 14297                           fsr1l	equ	0xFE1
 14298                           indf2	equ	0xFDF
 14299                           postinc2	equ	0xFDE
 14300                           postdec2	equ	0xFDD
 14301                           plusw2	equ	0xFDB
 14302                           fsr2h	equ	0xFDA
 14303                           fsr2l	equ	0xFD9
 14304                           status	equ	0xFD8
 14305                           
 14306 ;; *************** function _checkDST *****************
 14307 ;; Defined at:
 14308 ;;		line 146 in file "RTC.c"
 14309 ;; Parameters:    Size  Location     Type
 14310 ;;		None
 14311 ;; Auto vars:     Size  Location     Type
 14312 ;;		None
 14313 ;; Return value:  Size  Location     Type
 14314 ;;		None               void
 14315 ;; Registers used:
 14316 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, btemp+8, btemp+9, btemp+10, btemp+11, tosl, structret, tblptrl, tblptrh, tblp
      +tru, prodl, prodh, bsr, cstack
 14317 ;; Tracked objects:
 14318 ;;		On entry : 0/0
 14319 ;;		On exit  : 0/0
 14320 ;;		Unchanged: 0/0
 14321 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 14322 ;;      Params:         0       0       0       0       0       0       0       0       0
 14323 ;;      Locals:         2       0       0       0       0       0       0       0       0
 14324 ;;      Temps:          5       0       0       0       0       0       0       0       0
 14325 ;;      Totals:         7       0       0       0       0       0       0       0       0
 14326 ;;Total ram usage:        7 bytes
 14327 ;; Hardware stack levels used:    1
 14328 ;; Hardware stack levels required when called:    2
 14329 ;; This function calls:
 14330 ;;		_dayOfWeek
 14331 ;;		_tick
 14332 ;; This function is called by:
 14333 ;;		_tick
 14334 ;; This function uses a non-reentrant model
 14335 ;;
 14336                           
 14337                           	psect	text50
 14338  0034E6                     __ptext50:
 14339                           	opt stack 0
 14340  0034E6                     _checkDST:
 14341                           	opt stack 23
 14342                           
 14343                           ;RTC.c: 148: if ((date.dst ^ (1 & ((date.day >= ((((2)*7)-dayOfWeek((date.year),(3),((2)
      +                          *7)))) && date.month >= 3) && (date.day < ((((1)*7)-dayOfWeek((date.year),(11),((1)*7)))
      +                          ) && date.month < 11)))) && date.hour == 1)
 14344                           
 14345                           ;incstack = 0
 14346  0034E6  0E00               	movlw	0
 14347  0034E8  6E28               	movwf	_checkDST$309,c
 14348  0034EA  0E03               	movlw	3
 14349  0034EC  6E17               	movwf	dayOfWeek@month,c
 14350  0034EE  0E0E               	movlw	14
 14351  0034F0  6E18               	movwf	dayOfWeek@day,c
 14352  0034F2  0100               	movlb	0	; () banked
 14353  0034F4  51AE               	movf	(_date+6)& (0+255),w,b
 14354  0034F6  EC61  F016         	call	_dayOfWeek
 14355  0034FA  6E22               	movwf	??_checkDST& (0+255),c
 14356  0034FC  6A23               	clrf	(??_checkDST+1)& (0+255),c
 14357  0034FE  1E22               	comf	??_checkDST,f,c
 14358  003500  1E23               	comf	??_checkDST+1,f,c
 14359  003502  4A22               	infsnz	??_checkDST,f,c
 14360  003504  2A23               	incf	??_checkDST+1,f,c
 14361  003506  0E0E               	movlw	14
 14362  003508  2622               	addwf	??_checkDST,f,c
 14363  00350A  0E00               	movlw	0
 14364  00350C  2223               	addwfc	??_checkDST+1,f,c
 14365  00350E  0100               	movlb	0	; () banked
 14366  003510  51AB               	movf	(_date+3)& (0+255),w,b
 14367  003512  6E24               	movwf	(??_checkDST+2)& (0+255),c
 14368  003514  6A25               	clrf	(??_checkDST+3)& (0+255),c
 14369  003516  5025               	movf	??_checkDST+3,w,c
 14370  003518  0A80               	xorlw	128
 14371  00351A  6E26               	movwf	(??_checkDST+4)& (0+255),c
 14372  00351C  5022               	movf	??_checkDST,w,c
 14373  00351E  5C24               	subwf	??_checkDST+2,w,c
 14374  003520  5023               	movf	??_checkDST+1,w,c
 14375  003522  0A80               	xorlw	128
 14376  003524  5826               	subwfb	(??_checkDST+4)& (0+255),w,c
 14377  003526  A0D8               	btfss	status,0,c
 14378  003528  D02D               	goto	i2l4914
 14379                           
 14380                           ; BSR set to: 0
 14381  00352A  0100               	movlb	0	; () banked
 14382  00352C  EE20  F0AD         	lfsr	2,_date+5
 14383  003530  0E02               	movlw	2
 14384  003532  64DF               	cpfsgt	indf2,c
 14385  003534  D027               	goto	i2l4914
 14386                           
 14387                           ; BSR set to: 0
 14388  003536  0E0B               	movlw	11
 14389  003538  6E17               	movwf	dayOfWeek@month,c
 14390  00353A  0E07               	movlw	7
 14391  00353C  6E18               	movwf	dayOfWeek@day,c
 14392  00353E  0100               	movlb	0	; () banked
 14393  003540  51AE               	movf	(_date+6)& (0+255),w,b
 14394  003542  EC61  F016         	call	_dayOfWeek
 14395  003546  6E22               	movwf	??_checkDST& (0+255),c
 14396  003548  6A23               	clrf	(??_checkDST+1)& (0+255),c
 14397  00354A  1E22               	comf	??_checkDST,f,c
 14398  00354C  1E23               	comf	??_checkDST+1,f,c
 14399  00354E  4A22               	infsnz	??_checkDST,f,c
 14400  003550  2A23               	incf	??_checkDST+1,f,c
 14401  003552  0E07               	movlw	7
 14402  003554  2622               	addwf	??_checkDST,f,c
 14403  003556  0E00               	movlw	0
 14404  003558  2223               	addwfc	??_checkDST+1,f,c
 14405  00355A  0100               	movlb	0	; () banked
 14406  00355C  51AB               	movf	(_date+3)& (0+255),w,b
 14407  00355E  6E24               	movwf	(??_checkDST+2)& (0+255),c
 14408  003560  6A25               	clrf	(??_checkDST+3)& (0+255),c
 14409  003562  5025               	movf	??_checkDST+3,w,c
 14410  003564  0A80               	xorlw	128
 14411  003566  6E26               	movwf	(??_checkDST+4)& (0+255),c
 14412  003568  5022               	movf	??_checkDST,w,c
 14413  00356A  5C24               	subwf	??_checkDST+2,w,c
 14414  00356C  5023               	movf	??_checkDST+1,w,c
 14415  00356E  0A80               	xorlw	128
 14416  003570  5826               	subwfb	(??_checkDST+4)& (0+255),w,c
 14417  003572  B0D8               	btfsc	status,0,c
 14418  003574  D007               	goto	i2l4914
 14419                           
 14420                           ; BSR set to: 0
 14421  003576  0E0B               	movlw	11
 14422  003578  0100               	movlb	0	; () banked
 14423  00357A  5DAD               	subwf	(_date+5)& (0+255),w,b
 14424  00357C  B0D8               	btfsc	status,0,c
 14425  00357E  D002               	goto	i2l4914
 14426                           
 14427                           ; BSR set to: 0
 14428  003580  0E01               	movlw	1
 14429  003582  6E28               	movwf	_checkDST$309,c
 14430  003584                     i2l4914:
 14431                           
 14432                           ; BSR set to: 0
 14433  003584  5028               	movf	_checkDST$309,w,c
 14434  003586  0B01               	andlw	1
 14435  003588  0100               	movlb	0	; () banked
 14436  00358A  19B0               	xorwf	(_date+8)& (0+255),w,b
 14437  00358C  0900               	iorlw	0
 14438  00358E  B4D8               	btfsc	status,2,c
 14439  003590  D021               	goto	i2l241
 14440                           
 14441                           ; BSR set to: 0
 14442  003592  0100               	movlb	0	; () banked
 14443  003594  05AA               	decf	(_date+2)& (0+255),w,b
 14444  003596  A4D8               	btfss	status,2,c
 14445  003598  D01D               	goto	i2l241
 14446                           
 14447                           ; BSR set to: 0
 14448                           ;RTC.c: 149: {
 14449                           ;RTC.c: 150: date.dst = !date.dst;
 14450  00359A  0100               	movlb	0	; () banked
 14451  00359C  51B0               	movf	(_date+8)& (0+255),w,b
 14452  00359E  A4D8               	btfss	status,2,c
 14453  0035A0  D002               	goto	i2u518_40
 14454  0035A2  0E01               	movlw	1
 14455  0035A4  D001               	goto	i2u518_46
 14456  0035A6                     i2u518_40:
 14457  0035A6  0E00               	movlw	0
 14458  0035A8                     i2u518_46:
 14459  0035A8  0100               	movlb	0	; () banked
 14460  0035AA  6FB0               	movwf	(_date+8)& (0+255),b
 14461                           
 14462                           ;RTC.c: 151: if (date.dst)
 14463  0035AC  0100               	movlb	0	; () banked
 14464  0035AE  51B0               	movf	(_date+8)& (0+255),w,b
 14465  0035B0  B4D8               	btfsc	status,2,c
 14466  0035B2  D004               	goto	i2l4922
 14467                           
 14468                           ; BSR set to: 0
 14469                           ;RTC.c: 152: {
 14470                           ;RTC.c: 153: tick(hour);
 14471  0035B4  0E02               	movlw	2
 14472  0035B6  ECEB  F01A         	call	_tick
 14473                           
 14474                           ;RTC.c: 154: }
 14475  0035BA  D00C               	goto	i2l241
 14476  0035BC                     i2l4922:
 14477                           
 14478                           ;RTC.c: 155: else
 14479                           ;RTC.c: 156: {
 14480                           ;RTC.c: 157: if (date.hour > 0)
 14481  0035BC  0100               	movlb	0	; () banked
 14482  0035BE  51AA               	movf	(_date+2)& (0+255),w,b
 14483  0035C0  B4D8               	btfsc	status,2,c
 14484  0035C2  D003               	goto	i2l4926
 14485                           
 14486                           ; BSR set to: 0
 14487                           ;RTC.c: 158: {
 14488                           ;RTC.c: 159: date.hour--;
 14489  0035C4  0100               	movlb	0	; () banked
 14490  0035C6  07AA               	decf	(_date+2)& (0+255),f,b
 14491                           
 14492                           ;RTC.c: 160: }
 14493  0035C8  D005               	goto	i2l241
 14494  0035CA                     i2l4926:
 14495                           
 14496                           ; BSR set to: 0
 14497                           ;RTC.c: 161: else
 14498                           ;RTC.c: 162: {
 14499                           ;RTC.c: 163: date.hour = 0;
 14500  0035CA  0E00               	movlw	0
 14501  0035CC  0100               	movlb	0	; () banked
 14502  0035CE  6FAA               	movwf	(_date+2)& (0+255),b
 14503                           
 14504                           ; BSR set to: 0
 14505                           ;RTC.c: 164: date.day--;
 14506  0035D0  0100               	movlb	0	; () banked
 14507  0035D2  07AB               	decf	(_date+3)& (0+255),f,b
 14508  0035D4                     i2l241:
 14509  0035D4  0012               	return	
 14510  0035D6                     __end_of_checkDST:
 14511                           	opt stack 0
 14512                           tosu	equ	0xFFF
 14513                           tosh	equ	0xFFE
 14514                           tosl	equ	0xFFD
 14515                           pclatu	equ	0xFFB
 14516                           pclath	equ	0xFFA
 14517                           tblptru	equ	0xFF8
 14518                           tblptrh	equ	0xFF7
 14519                           tblptrl	equ	0xFF6
 14520                           tablat	equ	0xFF5
 14521                           prodh	equ	0xFF4
 14522                           prodl	equ	0xFF3
 14523                           intcon	equ	0xFF2
 14524                           intcon2	equ	0xFF1
 14525                           indf0	equ	0xFEF
 14526                           postinc0	equ	0xFEE
 14527                           fsr0h	equ	0xFEA
 14528                           fsr0l	equ	0xFE9
 14529                           wreg	equ	0xFE8
 14530                           postinc1	equ	0xFE6
 14531                           postdec1	equ	0xFE5
 14532                           fsr1h	equ	0xFE2
 14533                           fsr1l	equ	0xFE1
 14534                           indf2	equ	0xFDF
 14535                           postinc2	equ	0xFDE
 14536                           postdec2	equ	0xFDD
 14537                           plusw2	equ	0xFDB
 14538                           fsr2h	equ	0xFDA
 14539                           fsr2l	equ	0xFD9
 14540                           status	equ	0xFD8
 14541                           
 14542 ;; *************** function _tick *****************
 14543 ;; Defined at:
 14544 ;;		line 170 in file "RTC.c"
 14545 ;; Parameters:    Size  Location     Type
 14546 ;;  val             1    wreg     unsigned char 
 14547 ;; Auto vars:     Size  Location     Type
 14548 ;;  val             1   11[COMRAM] unsigned char 
 14549 ;;  ret             1   13[COMRAM] unsigned char 
 14550 ;;  save_t          1   12[COMRAM] unsigned char 
 14551 ;; Return value:  Size  Location     Type
 14552 ;;                  1    wreg      unsigned char 
 14553 ;; Registers used:
 14554 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, btemp+8, btemp+9, btemp+10, btemp+11, tosl, structret, tblptrl, tblptrh, tblp
      +tru, prodl, prodh, bsr, cstack
 14555 ;; Tracked objects:
 14556 ;;		On entry : 0/0
 14557 ;;		On exit  : 0/0
 14558 ;;		Unchanged: 0/0
 14559 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 14560 ;;      Params:         0       0       0       0       0       0       0       0       0
 14561 ;;      Locals:         3       0       0       0       0       0       0       0       0
 14562 ;;      Temps:          0       0       0       0       0       0       0       0       0
 14563 ;;      Totals:         3       0       0       0       0       0       0       0       0
 14564 ;;Total ram usage:        3 bytes
 14565 ;; Hardware stack levels used:    1
 14566 ;; Hardware stack levels required when called:    3
 14567 ;; This function calls:
 14568 ;;		_checkDST
 14569 ;;		_daysOfMonth
 14570 ;;		_saveTime
 14571 ;; This function is called by:
 14572 ;;		_checkDST
 14573 ;;		_isr
 14574 ;; This function uses a non-reentrant model
 14575 ;;
 14576                           
 14577                           	psect	text51
 14578  0035D6                     __ptext51:
 14579                           	opt stack 0
 14580  0035D6                     _tick:
 14581                           	opt stack 23
 14582                           
 14583                           ;incstack = 0
 14584                           ;tick@val stored from wreg
 14585  0035D6  6E0C               	movwf	tick@val,c
 14586                           
 14587                           ;RTC.c: 172: uint8_t save_t = 0;
 14588  0035D8  0E00               	movlw	0
 14589  0035DA  6E0D               	movwf	tick@save_t,c
 14590                           
 14591                           ;RTC.c: 173: uint8_t ret = 0;
 14592  0035DC  0E00               	movlw	0
 14593  0035DE  6E0E               	movwf	tick@ret,c
 14594                           
 14595                           ;RTC.c: 174: switch (val)
 14596  0035E0  D04E               	goto	i2l4142
 14597  0035E2                     i2l4096:
 14598                           
 14599                           ;RTC.c: 177: date.second++;
 14600  0035E2  0100               	movlb	0	; () banked
 14601  0035E4  2BA8               	incf	_date& (0+255),f,b
 14602                           
 14603                           ; BSR set to: 0
 14604                           ;RTC.c: 178: ret = date.second;
 14605  0035E6  C0A8  F00E         	movff	_date,tick@ret
 14606                           
 14607                           ; BSR set to: 0
 14608                           ;RTC.c: 179: if (date.second >= 60)
 14609  0035EA  0E3B               	movlw	59
 14610  0035EC  0100               	movlb	0	; () banked
 14611  0035EE  65A8               	cpfsgt	_date& (0+255),b
 14612  0035F0  D059               	goto	i2l4144
 14613                           
 14614                           ; BSR set to: 0
 14615                           ;RTC.c: 180: {
 14616                           ;RTC.c: 181: date.second = 0;
 14617  0035F2  0E00               	movlw	0
 14618  0035F4  0100               	movlb	0	; () banked
 14619  0035F6  6FA8               	movwf	_date& (0+255),b
 14620  0035F8                     i2l4104:
 14621                           
 14622                           ;RTC.c: 183: date.minute++;
 14623  0035F8  0100               	movlb	0	; () banked
 14624  0035FA  2BA9               	incf	(_date+1)& (0+255),f,b
 14625                           
 14626                           ; BSR set to: 0
 14627                           ;RTC.c: 184: save_t = 1;
 14628  0035FC  0E01               	movlw	1
 14629  0035FE  6E0D               	movwf	tick@save_t,c
 14630                           
 14631                           ; BSR set to: 0
 14632                           ;RTC.c: 185: ret = date.second;
 14633  003600  C0A8  F00E         	movff	_date,tick@ret
 14634                           
 14635                           ; BSR set to: 0
 14636                           ;RTC.c: 186: if (date.minute >= 60)
 14637  003604  0100               	movlb	0	; () banked
 14638  003606  EE20  F0A9         	lfsr	2,_date+1
 14639  00360A  0E3B               	movlw	59
 14640  00360C  64DF               	cpfsgt	indf2,c
 14641  00360E  D04A               	goto	i2l4144
 14642                           
 14643                           ; BSR set to: 0
 14644                           ;RTC.c: 187: {
 14645                           ;RTC.c: 188: date.minute = 0;
 14646  003610  0E00               	movlw	0
 14647  003612  0100               	movlb	0	; () banked
 14648  003614  6FA9               	movwf	(_date+1)& (0+255),b
 14649  003616                     i2l4114:
 14650                           
 14651                           ;RTC.c: 190: date.hour++;
 14652  003616  0100               	movlb	0	; () banked
 14653  003618  2BAA               	incf	(_date+2)& (0+255),f,b
 14654                           
 14655                           ; BSR set to: 0
 14656                           ;RTC.c: 191: checkDST();
 14657  00361A  EC73  F01A         	call	_checkDST	;wreg free
 14658                           
 14659                           ;RTC.c: 192: ret = date.hour;
 14660  00361E  C0AA  F00E         	movff	_date+2,tick@ret
 14661                           
 14662                           ;RTC.c: 193: if (date.hour >= 24)
 14663  003622  0100               	movlb	0	; () banked
 14664  003624  EE20  F0AA         	lfsr	2,_date+2
 14665  003628  0E17               	movlw	23
 14666  00362A  64DF               	cpfsgt	indf2,c
 14667  00362C  D03B               	goto	i2l4144
 14668                           
 14669                           ; BSR set to: 0
 14670                           ;RTC.c: 194: {
 14671                           ;RTC.c: 195: date.hour = 0;
 14672  00362E  0E00               	movlw	0
 14673  003630  0100               	movlb	0	; () banked
 14674  003632  6FAA               	movwf	(_date+2)& (0+255),b
 14675  003634                     i2l4124:
 14676                           
 14677                           ;RTC.c: 197: date.day++;
 14678  003634  0100               	movlb	0	; () banked
 14679  003636  2BAB               	incf	(_date+3)& (0+255),f,b
 14680                           
 14681                           ; BSR set to: 0
 14682                           ;RTC.c: 198: ret = date.hour;
 14683  003638  C0AA  F00E         	movff	_date+2,tick@ret
 14684                           
 14685                           ; BSR set to: 0
 14686                           ;RTC.c: 199: if (date.day >= daysOfMonth(date.month, date.year))
 14687  00363C  C0AE  F006         	movff	_date+6,daysOfMonth@year
 14688  003640  C0AF  F007         	movff	_date+7,daysOfMonth@year+1
 14689  003644  0100               	movlb	0	; () banked
 14690  003646  51AD               	movf	(_date+5)& (0+255),w,b
 14691  003648  EC19  F01D         	call	_daysOfMonth
 14692  00364C  0100               	movlb	0	; () banked
 14693  00364E  5DAB               	subwf	(_date+3)& (0+255),w,b
 14694  003650  A0D8               	btfss	status,0,c
 14695  003652  D028               	goto	i2l4144
 14696                           
 14697                           ; BSR set to: 0
 14698                           ;RTC.c: 200: {
 14699                           ;RTC.c: 201: date.day = 1;
 14700  003654  0E01               	movlw	1
 14701  003656  0100               	movlb	0	; () banked
 14702  003658  6FAB               	movwf	(_date+3)& (0+255),b
 14703  00365A                     i2l4132:
 14704                           
 14705                           ;RTC.c: 203: date.month++;
 14706  00365A  0100               	movlb	0	; () banked
 14707  00365C  2BAD               	incf	(_date+5)& (0+255),f,b
 14708                           
 14709                           ; BSR set to: 0
 14710                           ;RTC.c: 204: ret = date.hour;
 14711  00365E  C0AA  F00E         	movff	_date+2,tick@ret
 14712                           
 14713                           ; BSR set to: 0
 14714                           ;RTC.c: 205: if (++date.month > 12)
 14715  003662  0100               	movlb	0	; () banked
 14716  003664  EE20  F0AD         	lfsr	2,_date+5
 14717  003668  2ADF               	incf	indf2,f,c
 14718  00366A  0E0C               	movlw	12
 14719  00366C  64DF               	cpfsgt	indf2,c
 14720  00366E  D01A               	goto	i2l4144
 14721                           
 14722                           ; BSR set to: 0
 14723                           ;RTC.c: 206: {
 14724                           ;RTC.c: 207: date.month = 1;
 14725  003670  0E01               	movlw	1
 14726  003672  0100               	movlb	0	; () banked
 14727  003674  6FAD               	movwf	(_date+5)& (0+255),b
 14728  003676                     i2l4140:
 14729                           
 14730                           ;RTC.c: 209: ++date.year;
 14731  003676  0100               	movlb	0	; () banked
 14732  003678  4BAE               	infsnz	(_date+6)& (0+255),f,b
 14733  00367A  2BAF               	incf	(_date+7)& (0+255),f,b
 14734  00367C  D013               	goto	i2l4144
 14735  00367E                     i2l4142:
 14736  00367E  500C               	movf	tick@val,w,c
 14737                           
 14738                           ; Switch size 1, requested type "space"
 14739                           ; Number of cases is 6, Range of values is 0 to 5
 14740                           ; switch strategies available:
 14741                           ; Name         Instructions Cycles
 14742                           ; simple_byte           19    10 (average)
 14743                           ;	Chosen strategy is simple_byte
 14744  003680  0A00               	xorlw	0	; case 0
 14745  003682  B4D8               	btfsc	status,2,c
 14746  003684  D7AE               	goto	i2l4096
 14747  003686  0A01               	xorlw	1	; case 1
 14748  003688  B4D8               	btfsc	status,2,c
 14749  00368A  D7B6               	goto	i2l4104
 14750  00368C  0A03               	xorlw	3	; case 2
 14751  00368E  B4D8               	btfsc	status,2,c
 14752  003690  D7C2               	goto	i2l4114
 14753  003692  0A01               	xorlw	1	; case 3
 14754  003694  B4D8               	btfsc	status,2,c
 14755  003696  D7CE               	goto	i2l4124
 14756  003698  0A07               	xorlw	7	; case 4
 14757  00369A  B4D8               	btfsc	status,2,c
 14758  00369C  D7DE               	goto	i2l4132
 14759  00369E  0A01               	xorlw	1	; case 5
 14760  0036A0  B4D8               	btfsc	status,2,c
 14761  0036A2  D7E9               	goto	i2l4140
 14762  0036A4                     i2l4144:
 14763                           
 14764                           ;RTC.c: 216: if (save_t)
 14765  0036A4  500D               	movf	tick@save_t,w,c
 14766  0036A6  B4D8               	btfsc	status,2,c
 14767  0036A8  D00B               	goto	i2l258
 14768                           
 14769                           ;RTC.c: 217: {
 14770                           ;RTC.c: 218: saveTime(date);
 14771  0036AA  EE20  F0A8         	lfsr	2,_date
 14772  0036AE  EE10  F001         	lfsr	1,saveTime@date
 14773  0036B2  0E09               	movlw	9
 14774  0036B4                     i2u397_41:
 14775  0036B4  CFDE FFE6          	movff	postinc2,postinc1
 14776  0036B8  2EE8               	decfsz	wreg,f,c
 14777  0036BA  D7FC               	goto	i2u397_41
 14778  0036BC  EC47  F020         	call	_saveTime	;wreg free
 14779  0036C0                     i2l258:
 14780  0036C0  0012               	return	
 14781  0036C2                     __end_of_tick:
 14782                           	opt stack 0
 14783                           tosu	equ	0xFFF
 14784                           tosh	equ	0xFFE
 14785                           tosl	equ	0xFFD
 14786                           pclatu	equ	0xFFB
 14787                           pclath	equ	0xFFA
 14788                           tblptru	equ	0xFF8
 14789                           tblptrh	equ	0xFF7
 14790                           tblptrl	equ	0xFF6
 14791                           tablat	equ	0xFF5
 14792                           prodh	equ	0xFF4
 14793                           prodl	equ	0xFF3
 14794                           intcon	equ	0xFF2
 14795                           intcon2	equ	0xFF1
 14796                           indf0	equ	0xFEF
 14797                           postinc0	equ	0xFEE
 14798                           fsr0h	equ	0xFEA
 14799                           fsr0l	equ	0xFE9
 14800                           wreg	equ	0xFE8
 14801                           postinc1	equ	0xFE6
 14802                           postdec1	equ	0xFE5
 14803                           fsr1h	equ	0xFE2
 14804                           fsr1l	equ	0xFE1
 14805                           indf2	equ	0xFDF
 14806                           postinc2	equ	0xFDE
 14807                           postdec2	equ	0xFDD
 14808                           plusw2	equ	0xFDB
 14809                           fsr2h	equ	0xFDA
 14810                           fsr2l	equ	0xFD9
 14811                           status	equ	0xFD8
 14812                           
 14813 ;; *************** function _dayOfWeek *****************
 14814 ;; Defined at:
 14815 ;;		line 223 in file "RTC.c"
 14816 ;; Parameters:    Size  Location     Type
 14817 ;;  year            1    wreg     unsigned char 
 14818 ;;  month           1   22[COMRAM] unsigned char 
 14819 ;;  day             1   23[COMRAM] unsigned char 
 14820 ;; Auto vars:     Size  Location     Type
 14821 ;;  year            1   28[COMRAM] unsigned char 
 14822 ;;  tmp             4   29[COMRAM] unsigned long 
 14823 ;; Return value:  Size  Location     Type
 14824 ;;                  1    wreg      unsigned char 
 14825 ;; Registers used:
 14826 ;;		wreg, status,2, status,0, prodl, prodh, cstack
 14827 ;; Tracked objects:
 14828 ;;		On entry : 0/0
 14829 ;;		On exit  : 0/0
 14830 ;;		Unchanged: 0/0
 14831 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 14832 ;;      Params:         2       0       0       0       0       0       0       0       0
 14833 ;;      Locals:         5       0       0       0       0       0       0       0       0
 14834 ;;      Temps:          4       0       0       0       0       0       0       0       0
 14835 ;;      Totals:        11       0       0       0       0       0       0       0       0
 14836 ;;Total ram usage:       11 bytes
 14837 ;; Hardware stack levels used:    1
 14838 ;; Hardware stack levels required when called:    1
 14839 ;; This function calls:
 14840 ;;		___awdiv
 14841 ;;		___awmod
 14842 ;;		___llmod
 14843 ;;		___wmul
 14844 ;; This function is called by:
 14845 ;;		_checkDST
 14846 ;; This function uses a non-reentrant model
 14847 ;;
 14848                           
 14849                           	psect	text52
 14850  002CC2                     __ptext52:
 14851                           	opt stack 0
 14852  002CC2                     _dayOfWeek:
 14853                           	opt stack 23
 14854                           
 14855                           ;incstack = 0
 14856                           ;dayOfWeek@year stored from wreg
 14857  002CC2  6E1D               	movwf	dayOfWeek@year,c
 14858                           
 14859                           ;RTC.c: 226: uint32_t tmp = (year % 200) * 365;
 14860  002CC4  0E00               	movlw	0
 14861  002CC6  6E04               	movwf	___awmod@divisor+1,c
 14862  002CC8  0EC8               	movlw	200
 14863  002CCA  6E03               	movwf	___awmod@divisor,c
 14864  002CCC  C01D  F001         	movff	dayOfWeek@year,___awmod@dividend
 14865  002CD0  6A02               	clrf	___awmod@dividend+1,c
 14866  002CD2  ECF4  F01E         	call	___awmod	;wreg free
 14867  002CD6  C001  F00F         	movff	?___awmod,___wmul@multiplier
 14868  002CDA  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
 14869  002CDE  0E01               	movlw	1
 14870  002CE0  6E12               	movwf	___wmul@multiplicand+1,c
 14871  002CE2  0E6D               	movlw	109
 14872  002CE4  6E11               	movwf	___wmul@multiplicand,c
 14873  002CE6  ECD0  F022         	call	___wmul	;wreg free
 14874  002CEA  C00F  F01E         	movff	?___wmul,dayOfWeek@tmp
 14875  002CEE  C010  F01F         	movff	?___wmul+1,dayOfWeek@tmp+1
 14876  002CF2  0E00               	movlw	0
 14877  002CF4  BE1F               	btfsc	dayOfWeek@tmp+1,7,c
 14878  002CF6  0EFF               	movlw	-1
 14879  002CF8  6E20               	movwf	dayOfWeek@tmp+2,c
 14880  002CFA  6E21               	movwf	dayOfWeek@tmp+3,c
 14881                           
 14882                           ;RTC.c: 227: tmp += (((year % 200) + 3) / 4);
 14883  002CFC  0E00               	movlw	0
 14884  002CFE  6E04               	movwf	___awmod@divisor+1,c
 14885  002D00  0EC8               	movlw	200
 14886  002D02  6E03               	movwf	___awmod@divisor,c
 14887  002D04  C01D  F001         	movff	dayOfWeek@year,___awmod@dividend
 14888  002D08  6A02               	clrf	___awmod@dividend+1,c
 14889  002D0A  ECF4  F01E         	call	___awmod	;wreg free
 14890  002D0E  0E03               	movlw	3
 14891  002D10  2401               	addwf	?___awmod,w,c
 14892  002D12  6E07               	movwf	___awdiv@dividend,c
 14893  002D14  0E00               	movlw	0
 14894  002D16  2002               	addwfc	?___awmod+1,w,c
 14895  002D18  6E08               	movwf	___awdiv@dividend+1,c
 14896  002D1A  0E00               	movlw	0
 14897  002D1C  6E0A               	movwf	___awdiv@divisor+1,c
 14898  002D1E  0E04               	movlw	4
 14899  002D20  6E09               	movwf	___awdiv@divisor,c
 14900  002D22  ECC4  F01D         	call	___awdiv	;wreg free
 14901  002D26  C007  F019         	movff	?___awdiv,??_dayOfWeek
 14902  002D2A  C008  F01A         	movff	?___awdiv+1,??_dayOfWeek+1
 14903  002D2E  0E00               	movlw	0
 14904  002D30  BE1A               	btfsc	(??_dayOfWeek+1)& (0+255),7,c
 14905  002D32  0EFF               	movlw	255
 14906  002D34  6E1B               	movwf	(??_dayOfWeek+2)& (0+255),c
 14907  002D36  6E1C               	movwf	(??_dayOfWeek+3)& (0+255),c
 14908  002D38  5019               	movf	??_dayOfWeek,w,c
 14909  002D3A  261E               	addwf	dayOfWeek@tmp,f,c
 14910  002D3C  501A               	movf	??_dayOfWeek+1,w,c
 14911  002D3E  221F               	addwfc	dayOfWeek@tmp+1,f,c
 14912  002D40  501B               	movf	??_dayOfWeek+2,w,c
 14913  002D42  2220               	addwfc	dayOfWeek@tmp+2,f,c
 14914  002D44  501C               	movf	??_dayOfWeek+3,w,c
 14915  002D46  2221               	addwfc	dayOfWeek@tmp+3,f,c
 14916                           
 14917                           ;RTC.c: 229: switch (month)
 14918  002D48  D04F               	goto	i2l4086
 14919  002D4A                     i2l4080:
 14920                           
 14921                           ;RTC.c: 232: tmp += 30;
 14922  002D4A  0E1E               	movlw	30
 14923  002D4C  261E               	addwf	dayOfWeek@tmp,f,c
 14924  002D4E  0E00               	movlw	0
 14925  002D50  221F               	addwfc	dayOfWeek@tmp+1,f,c
 14926  002D52  2220               	addwfc	dayOfWeek@tmp+2,f,c
 14927  002D54  2221               	addwfc	dayOfWeek@tmp+3,f,c
 14928  002D56                     i2l263:
 14929                           
 14930                           ;RTC.c: 235: tmp += 31;
 14931  002D56  0E1F               	movlw	31
 14932  002D58  261E               	addwf	dayOfWeek@tmp,f,c
 14933  002D5A  0E00               	movlw	0
 14934  002D5C  221F               	addwfc	dayOfWeek@tmp+1,f,c
 14935  002D5E  2220               	addwfc	dayOfWeek@tmp+2,f,c
 14936  002D60  2221               	addwfc	dayOfWeek@tmp+3,f,c
 14937  002D62                     i2l264:
 14938                           
 14939                           ;RTC.c: 238: tmp += 30;
 14940  002D62  0E1E               	movlw	30
 14941  002D64  261E               	addwf	dayOfWeek@tmp,f,c
 14942  002D66  0E00               	movlw	0
 14943  002D68  221F               	addwfc	dayOfWeek@tmp+1,f,c
 14944  002D6A  2220               	addwfc	dayOfWeek@tmp+2,f,c
 14945  002D6C  2221               	addwfc	dayOfWeek@tmp+3,f,c
 14946  002D6E                     i2l265:
 14947                           
 14948                           ;RTC.c: 241: tmp += 31;
 14949  002D6E  0E1F               	movlw	31
 14950  002D70  261E               	addwf	dayOfWeek@tmp,f,c
 14951  002D72  0E00               	movlw	0
 14952  002D74  221F               	addwfc	dayOfWeek@tmp+1,f,c
 14953  002D76  2220               	addwfc	dayOfWeek@tmp+2,f,c
 14954  002D78  2221               	addwfc	dayOfWeek@tmp+3,f,c
 14955  002D7A                     i2l266:
 14956                           
 14957                           ;RTC.c: 244: tmp += 31;
 14958  002D7A  0E1F               	movlw	31
 14959  002D7C  261E               	addwf	dayOfWeek@tmp,f,c
 14960  002D7E  0E00               	movlw	0
 14961  002D80  221F               	addwfc	dayOfWeek@tmp+1,f,c
 14962  002D82  2220               	addwfc	dayOfWeek@tmp+2,f,c
 14963  002D84  2221               	addwfc	dayOfWeek@tmp+3,f,c
 14964  002D86                     i2l267:
 14965                           
 14966                           ;RTC.c: 247: tmp += 30;
 14967  002D86  0E1E               	movlw	30
 14968  002D88  261E               	addwf	dayOfWeek@tmp,f,c
 14969  002D8A  0E00               	movlw	0
 14970  002D8C  221F               	addwfc	dayOfWeek@tmp+1,f,c
 14971  002D8E  2220               	addwfc	dayOfWeek@tmp+2,f,c
 14972  002D90  2221               	addwfc	dayOfWeek@tmp+3,f,c
 14973  002D92                     i2l268:
 14974                           
 14975                           ;RTC.c: 250: tmp += 31;
 14976  002D92  0E1F               	movlw	31
 14977  002D94  261E               	addwf	dayOfWeek@tmp,f,c
 14978  002D96  0E00               	movlw	0
 14979  002D98  221F               	addwfc	dayOfWeek@tmp+1,f,c
 14980  002D9A  2220               	addwfc	dayOfWeek@tmp+2,f,c
 14981  002D9C  2221               	addwfc	dayOfWeek@tmp+3,f,c
 14982  002D9E                     i2l269:
 14983                           
 14984                           ;RTC.c: 253: tmp += 30;
 14985  002D9E  0E1E               	movlw	30
 14986  002DA0  261E               	addwf	dayOfWeek@tmp,f,c
 14987  002DA2  0E00               	movlw	0
 14988  002DA4  221F               	addwfc	dayOfWeek@tmp+1,f,c
 14989  002DA6  2220               	addwfc	dayOfWeek@tmp+2,f,c
 14990  002DA8  2221               	addwfc	dayOfWeek@tmp+3,f,c
 14991  002DAA                     i2l270:
 14992                           
 14993                           ;RTC.c: 256: tmp += 31;
 14994  002DAA  0E1F               	movlw	31
 14995  002DAC  261E               	addwf	dayOfWeek@tmp,f,c
 14996  002DAE  0E00               	movlw	0
 14997  002DB0  221F               	addwfc	dayOfWeek@tmp+1,f,c
 14998  002DB2  2220               	addwfc	dayOfWeek@tmp+2,f,c
 14999  002DB4  2221               	addwfc	dayOfWeek@tmp+3,f,c
 15000  002DB6                     i2l271:
 15001                           
 15002                           ;RTC.c: 259: tmp += 28;
 15003  002DB6  0E1C               	movlw	28
 15004  002DB8  261E               	addwf	dayOfWeek@tmp,f,c
 15005  002DBA  0E00               	movlw	0
 15006  002DBC  221F               	addwfc	dayOfWeek@tmp+1,f,c
 15007  002DBE  2220               	addwfc	dayOfWeek@tmp+2,f,c
 15008  002DC0  2221               	addwfc	dayOfWeek@tmp+3,f,c
 15009                           
 15010                           ;RTC.c: 261: if ((year % 4) == 0)
 15011  002DC2  C01D  F019         	movff	dayOfWeek@year,??_dayOfWeek
 15012  002DC6  0E03               	movlw	3
 15013  002DC8  1619               	andwf	??_dayOfWeek,f,c
 15014  002DCA  A4D8               	btfss	status,2,c
 15015  002DCC  D006               	goto	i2l273
 15016                           
 15017                           ;RTC.c: 262: {
 15018                           ;RTC.c: 263: tmp++;
 15019  002DCE  0E01               	movlw	1
 15020  002DD0  261E               	addwf	dayOfWeek@tmp,f,c
 15021  002DD2  0E00               	movlw	0
 15022  002DD4  221F               	addwfc	dayOfWeek@tmp+1,f,c
 15023  002DD6  2220               	addwfc	dayOfWeek@tmp+2,f,c
 15024  002DD8  2221               	addwfc	dayOfWeek@tmp+3,f,c
 15025  002DDA                     i2l273:
 15026                           
 15027                           ;RTC.c: 267: tmp += 31;
 15028  002DDA  0E1F               	movlw	31
 15029  002DDC  261E               	addwf	dayOfWeek@tmp,f,c
 15030  002DDE  0E00               	movlw	0
 15031  002DE0  221F               	addwfc	dayOfWeek@tmp+1,f,c
 15032  002DE2  2220               	addwfc	dayOfWeek@tmp+2,f,c
 15033  002DE4  2221               	addwfc	dayOfWeek@tmp+3,f,c
 15034  002DE6  D025               	goto	i2l4088
 15035  002DE8                     i2l4086:
 15036  002DE8  5017               	movf	dayOfWeek@month,w,c
 15037                           
 15038                           ; Switch size 1, requested type "space"
 15039                           ; Number of cases is 12, Range of values is 1 to 12
 15040                           ; switch strategies available:
 15041                           ; Name         Instructions Cycles
 15042                           ; simple_byte           37    19 (average)
 15043                           ;	Chosen strategy is simple_byte
 15044  002DEA  0A01               	xorlw	1	; case 1
 15045  002DEC  B4D8               	btfsc	status,2,c
 15046  002DEE  D021               	goto	i2l4088
 15047  002DF0  0A03               	xorlw	3	; case 2
 15048  002DF2  B4D8               	btfsc	status,2,c
 15049  002DF4  D7F2               	goto	i2l273
 15050  002DF6  0A01               	xorlw	1	; case 3
 15051  002DF8  B4D8               	btfsc	status,2,c
 15052  002DFA  D7DD               	goto	i2l271
 15053  002DFC  0A07               	xorlw	7	; case 4
 15054  002DFE  B4D8               	btfsc	status,2,c
 15055  002E00  D7D4               	goto	i2l270
 15056  002E02  0A01               	xorlw	1	; case 5
 15057  002E04  B4D8               	btfsc	status,2,c
 15058  002E06  D7CB               	goto	i2l269
 15059  002E08  0A03               	xorlw	3	; case 6
 15060  002E0A  B4D8               	btfsc	status,2,c
 15061  002E0C  D7C2               	goto	i2l268
 15062  002E0E  0A01               	xorlw	1	; case 7
 15063  002E10  B4D8               	btfsc	status,2,c
 15064  002E12  D7B9               	goto	i2l267
 15065  002E14  0A0F               	xorlw	15	; case 8
 15066  002E16  B4D8               	btfsc	status,2,c
 15067  002E18  D7B0               	goto	i2l266
 15068  002E1A  0A01               	xorlw	1	; case 9
 15069  002E1C  B4D8               	btfsc	status,2,c
 15070  002E1E  D7A7               	goto	i2l265
 15071  002E20  0A03               	xorlw	3	; case 10
 15072  002E22  B4D8               	btfsc	status,2,c
 15073  002E24  D79E               	goto	i2l264
 15074  002E26  0A01               	xorlw	1	; case 11
 15075  002E28  B4D8               	btfsc	status,2,c
 15076  002E2A  D795               	goto	i2l263
 15077  002E2C  0A07               	xorlw	7	; case 12
 15078  002E2E  B4D8               	btfsc	status,2,c
 15079  002E30  D78C               	goto	i2l4080
 15080  002E32                     i2l4088:
 15081                           
 15082                           ;RTC.c: 275: tmp += day;
 15083  002E32  5018               	movf	dayOfWeek@day,w,c
 15084  002E34  261E               	addwf	dayOfWeek@tmp,f,c
 15085  002E36  0E00               	movlw	0
 15086  002E38  221F               	addwfc	dayOfWeek@tmp+1,f,c
 15087  002E3A  2220               	addwfc	dayOfWeek@tmp+2,f,c
 15088  002E3C  2221               	addwfc	dayOfWeek@tmp+3,f,c
 15089                           
 15090                           ;RTC.c: 276: tmp--;
 15091  002E3E  061E               	decf	dayOfWeek@tmp,f,c
 15092  002E40  0E00               	movlw	0
 15093  002E42  5A1F               	subwfb	dayOfWeek@tmp+1,f,c
 15094  002E44  5A20               	subwfb	dayOfWeek@tmp+2,f,c
 15095  002E46  5A21               	subwfb	dayOfWeek@tmp+3,f,c
 15096                           
 15097                           ;RTC.c: 279: return (uint8_t) ((tmp + 6) % 7);
 15098  002E48  0E06               	movlw	6
 15099  002E4A  241E               	addwf	dayOfWeek@tmp,w,c
 15100  002E4C  6E0E               	movwf	___llmod@dividend,c
 15101  002E4E  0E00               	movlw	0
 15102  002E50  201F               	addwfc	dayOfWeek@tmp+1,w,c
 15103  002E52  6E0F               	movwf	___llmod@dividend+1,c
 15104  002E54  0E00               	movlw	0
 15105  002E56  2020               	addwfc	dayOfWeek@tmp+2,w,c
 15106  002E58  6E10               	movwf	___llmod@dividend+2,c
 15107  002E5A  0E00               	movlw	0
 15108  002E5C  2021               	addwfc	dayOfWeek@tmp+3,w,c
 15109  002E5E  6E11               	movwf	___llmod@dividend+3,c
 15110  002E60  0E07               	movlw	7
 15111  002E62  6E12               	movwf	___llmod@divisor,c
 15112  002E64  0E00               	movlw	0
 15113  002E66  6E13               	movwf	___llmod@divisor+1,c
 15114  002E68  0E00               	movlw	0
 15115  002E6A  6E14               	movwf	___llmod@divisor+2,c
 15116  002E6C  0E00               	movlw	0
 15117  002E6E  6E15               	movwf	___llmod@divisor+3,c
 15118  002E70  ECB4  F020         	call	___llmod	;wreg free
 15119  002E74  C00E  F019         	movff	?___llmod,??_dayOfWeek
 15120  002E78  C00F  F01A         	movff	?___llmod+1,??_dayOfWeek+1
 15121  002E7C  C010  F01B         	movff	?___llmod+2,??_dayOfWeek+2
 15122  002E80  C011  F01C         	movff	?___llmod+3,??_dayOfWeek+3
 15123  002E84  5019               	movf	??_dayOfWeek,w,c
 15124  002E86  0012               	return	
 15125  002E88                     __end_of_dayOfWeek:
 15126                           	opt stack 0
 15127                           tosu	equ	0xFFF
 15128                           tosh	equ	0xFFE
 15129                           tosl	equ	0xFFD
 15130                           pclatu	equ	0xFFB
 15131                           pclath	equ	0xFFA
 15132                           tblptru	equ	0xFF8
 15133                           tblptrh	equ	0xFF7
 15134                           tblptrl	equ	0xFF6
 15135                           tablat	equ	0xFF5
 15136                           prodh	equ	0xFF4
 15137                           prodl	equ	0xFF3
 15138                           intcon	equ	0xFF2
 15139                           intcon2	equ	0xFF1
 15140                           indf0	equ	0xFEF
 15141                           postinc0	equ	0xFEE
 15142                           fsr0h	equ	0xFEA
 15143                           fsr0l	equ	0xFE9
 15144                           wreg	equ	0xFE8
 15145                           postinc1	equ	0xFE6
 15146                           postdec1	equ	0xFE5
 15147                           fsr1h	equ	0xFE2
 15148                           fsr1l	equ	0xFE1
 15149                           indf2	equ	0xFDF
 15150                           postinc2	equ	0xFDE
 15151                           postdec2	equ	0xFDD
 15152                           plusw2	equ	0xFDB
 15153                           fsr2h	equ	0xFDA
 15154                           fsr2l	equ	0xFD9
 15155                           status	equ	0xFD8
 15156                           
 15157 ;; *************** function ___wmul *****************
 15158 ;; Defined at:
 15159 ;;		line 15 in file "/opt/microchip/xc8/v1.32/sources/common/Umul16.c"
 15160 ;; Parameters:    Size  Location     Type
 15161 ;;  multiplier      2   14[COMRAM] unsigned int 
 15162 ;;  multiplicand    2   16[COMRAM] unsigned int 
 15163 ;; Auto vars:     Size  Location     Type
 15164 ;;  product         2   18[COMRAM] unsigned int 
 15165 ;; Return value:  Size  Location     Type
 15166 ;;                  2   14[COMRAM] unsigned int 
 15167 ;; Registers used:
 15168 ;;		wreg, status,2, status,0, prodl, prodh
 15169 ;; Tracked objects:
 15170 ;;		On entry : 0/0
 15171 ;;		On exit  : 0/0
 15172 ;;		Unchanged: 0/0
 15173 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 15174 ;;      Params:         4       0       0       0       0       0       0       0       0
 15175 ;;      Locals:         2       0       0       0       0       0       0       0       0
 15176 ;;      Temps:          0       0       0       0       0       0       0       0       0
 15177 ;;      Totals:         6       0       0       0       0       0       0       0       0
 15178 ;;Total ram usage:        6 bytes
 15179 ;; Hardware stack levels used:    1
 15180 ;; This function calls:
 15181 ;;		Nothing
 15182 ;; This function is called by:
 15183 ;;		_writeString
 15184 ;;		_dayOfWeek
 15185 ;;		_getTemp
 15186 ;;		_fround
 15187 ;;		_scale
 15188 ;;		_sprintf
 15189 ;; This function uses a non-reentrant model
 15190 ;;
 15191                           
 15192                           	psect	text53
 15193  0045A0                     __ptext53:
 15194                           	opt stack 0
 15195  0045A0                     ___wmul:
 15196                           	opt stack 23
 15197                           
 15198                           ;incstack = 0
 15199  0045A0  500F               	movf	___wmul@multiplier,w,c
 15200  0045A2  0211               	mulwf	___wmul@multiplicand,c
 15201  0045A4  CFF3 F013          	movff	prodl,___wmul@product
 15202  0045A8  CFF4 F014          	movff	prodh,___wmul@product+1
 15203  0045AC  500F               	movf	___wmul@multiplier,w,c
 15204  0045AE  0212               	mulwf	___wmul@multiplicand+1,c
 15205  0045B0  50F3               	movf	prodl,w,c
 15206  0045B2  2614               	addwf	___wmul@product+1,f,c
 15207  0045B4  5010               	movf	___wmul@multiplier+1,w,c
 15208  0045B6  0211               	mulwf	___wmul@multiplicand,c
 15209  0045B8  50F3               	movf	prodl,w,c
 15210  0045BA  2614               	addwf	___wmul@product+1,f,c
 15211  0045BC  C013  F00F         	movff	___wmul@product,?___wmul
 15212  0045C0  C014  F010         	movff	___wmul@product+1,?___wmul+1
 15213  0045C4  0012               	return	
 15214  0045C6                     __end_of___wmul:
 15215                           	opt stack 0
 15216                           tosu	equ	0xFFF
 15217                           tosh	equ	0xFFE
 15218                           tosl	equ	0xFFD
 15219                           pclatu	equ	0xFFB
 15220                           pclath	equ	0xFFA
 15221                           tblptru	equ	0xFF8
 15222                           tblptrh	equ	0xFF7
 15223                           tblptrl	equ	0xFF6
 15224                           tablat	equ	0xFF5
 15225                           prodh	equ	0xFF4
 15226                           prodl	equ	0xFF3
 15227                           intcon	equ	0xFF2
 15228                           intcon2	equ	0xFF1
 15229                           indf0	equ	0xFEF
 15230                           postinc0	equ	0xFEE
 15231                           fsr0h	equ	0xFEA
 15232                           fsr0l	equ	0xFE9
 15233                           wreg	equ	0xFE8
 15234                           postinc1	equ	0xFE6
 15235                           postdec1	equ	0xFE5
 15236                           fsr1h	equ	0xFE2
 15237                           fsr1l	equ	0xFE1
 15238                           indf2	equ	0xFDF
 15239                           postinc2	equ	0xFDE
 15240                           postdec2	equ	0xFDD
 15241                           plusw2	equ	0xFDB
 15242                           fsr2h	equ	0xFDA
 15243                           fsr2l	equ	0xFD9
 15244                           status	equ	0xFD8
 15245                           
 15246 ;; *************** function ___llmod *****************
 15247 ;; Defined at:
 15248 ;;		line 8 in file "/opt/microchip/xc8/v1.32/sources/common/llmod.c"
 15249 ;; Parameters:    Size  Location     Type
 15250 ;;  dividend        4   13[COMRAM] unsigned long 
 15251 ;;  divisor         4   17[COMRAM] unsigned long 
 15252 ;; Auto vars:     Size  Location     Type
 15253 ;;  counter         1   21[COMRAM] unsigned char 
 15254 ;; Return value:  Size  Location     Type
 15255 ;;                  4   13[COMRAM] unsigned long 
 15256 ;; Registers used:
 15257 ;;		wreg, status,2, status,0
 15258 ;; Tracked objects:
 15259 ;;		On entry : 0/0
 15260 ;;		On exit  : 0/0
 15261 ;;		Unchanged: 0/0
 15262 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 15263 ;;      Params:         8       0       0       0       0       0       0       0       0
 15264 ;;      Locals:         1       0       0       0       0       0       0       0       0
 15265 ;;      Temps:          0       0       0       0       0       0       0       0       0
 15266 ;;      Totals:         9       0       0       0       0       0       0       0       0
 15267 ;;Total ram usage:        9 bytes
 15268 ;; Hardware stack levels used:    1
 15269 ;; This function calls:
 15270 ;;		Nothing
 15271 ;; This function is called by:
 15272 ;;		_dayOfWeek
 15273 ;;		_sprintf
 15274 ;; This function uses a non-reentrant model
 15275 ;;
 15276                           
 15277                           	psect	text54
 15278  004168                     __ptext54:
 15279                           	opt stack 0
 15280  004168                     ___llmod:
 15281                           	opt stack 23
 15282                           
 15283                           ;incstack = 0
 15284  004168  5015               	movf	___llmod@divisor+3,w,c
 15285  00416A  1012               	iorwf	___llmod@divisor,w,c
 15286  00416C  1013               	iorwf	___llmod@divisor+1,w,c
 15287  00416E  1014               	iorwf	___llmod@divisor+2,w,c
 15288  004170  B4D8               	btfsc	status,2,c
 15289  004172  D024               	goto	i2l1288
 15290  004174  0E01               	movlw	1
 15291  004176  6E16               	movwf	___llmod@counter,c
 15292  004178  D006               	goto	i2l3954
 15293  00417A                     i2l3952:
 15294  00417A  90D8               	bcf	status,0,c
 15295  00417C  3612               	rlcf	___llmod@divisor,f,c
 15296  00417E  3613               	rlcf	___llmod@divisor+1,f,c
 15297  004180  3614               	rlcf	___llmod@divisor+2,f,c
 15298  004182  3615               	rlcf	___llmod@divisor+3,f,c
 15299  004184  2A16               	incf	___llmod@counter,f,c
 15300  004186                     i2l3954:
 15301  004186  AE15               	btfss	___llmod@divisor+3,7,c
 15302  004188  D7F8               	goto	i2l3952
 15303  00418A                     i2l3956:
 15304  00418A  5012               	movf	___llmod@divisor,w,c
 15305  00418C  5C0E               	subwf	___llmod@dividend,w,c
 15306  00418E  5013               	movf	___llmod@divisor+1,w,c
 15307  004190  580F               	subwfb	___llmod@dividend+1,w,c
 15308  004192  5014               	movf	___llmod@divisor+2,w,c
 15309  004194  5810               	subwfb	___llmod@dividend+2,w,c
 15310  004196  5015               	movf	___llmod@divisor+3,w,c
 15311  004198  5811               	subwfb	___llmod@dividend+3,w,c
 15312  00419A  A0D8               	btfss	status,0,c
 15313  00419C  D008               	goto	i2l3960
 15314  00419E  5012               	movf	___llmod@divisor,w,c
 15315  0041A0  5E0E               	subwf	___llmod@dividend,f,c
 15316  0041A2  5013               	movf	___llmod@divisor+1,w,c
 15317  0041A4  5A0F               	subwfb	___llmod@dividend+1,f,c
 15318  0041A6  5014               	movf	___llmod@divisor+2,w,c
 15319  0041A8  5A10               	subwfb	___llmod@dividend+2,f,c
 15320  0041AA  5015               	movf	___llmod@divisor+3,w,c
 15321  0041AC  5A11               	subwfb	___llmod@dividend+3,f,c
 15322  0041AE                     i2l3960:
 15323  0041AE  90D8               	bcf	status,0,c
 15324  0041B0  3215               	rrcf	___llmod@divisor+3,f,c
 15325  0041B2  3214               	rrcf	___llmod@divisor+2,f,c
 15326  0041B4  3213               	rrcf	___llmod@divisor+1,f,c
 15327  0041B6  3212               	rrcf	___llmod@divisor,f,c
 15328  0041B8  2E16               	decfsz	___llmod@counter,f,c
 15329  0041BA  D7E7               	goto	i2l3956
 15330  0041BC                     i2l1288:
 15331  0041BC  C00E  F00E         	movff	___llmod@dividend,?___llmod
 15332  0041C0  C00F  F00F         	movff	___llmod@dividend+1,?___llmod+1
 15333  0041C4  C010  F010         	movff	___llmod@dividend+2,?___llmod+2
 15334  0041C8  C011  F011         	movff	___llmod@dividend+3,?___llmod+3
 15335  0041CC  0012               	return	
 15336  0041CE                     __end_of___llmod:
 15337                           	opt stack 0
 15338                           tosu	equ	0xFFF
 15339                           tosh	equ	0xFFE
 15340                           tosl	equ	0xFFD
 15341                           pclatu	equ	0xFFB
 15342                           pclath	equ	0xFFA
 15343                           tblptru	equ	0xFF8
 15344                           tblptrh	equ	0xFF7
 15345                           tblptrl	equ	0xFF6
 15346                           tablat	equ	0xFF5
 15347                           prodh	equ	0xFF4
 15348                           prodl	equ	0xFF3
 15349                           intcon	equ	0xFF2
 15350                           intcon2	equ	0xFF1
 15351                           indf0	equ	0xFEF
 15352                           postinc0	equ	0xFEE
 15353                           fsr0h	equ	0xFEA
 15354                           fsr0l	equ	0xFE9
 15355                           wreg	equ	0xFE8
 15356                           postinc1	equ	0xFE6
 15357                           postdec1	equ	0xFE5
 15358                           fsr1h	equ	0xFE2
 15359                           fsr1l	equ	0xFE1
 15360                           indf2	equ	0xFDF
 15361                           postinc2	equ	0xFDE
 15362                           postdec2	equ	0xFDD
 15363                           plusw2	equ	0xFDB
 15364                           fsr2h	equ	0xFDA
 15365                           fsr2l	equ	0xFD9
 15366                           status	equ	0xFD8
 15367                           
 15368 ;; *************** function ___awmod *****************
 15369 ;; Defined at:
 15370 ;;		line 8 in file "/opt/microchip/xc8/v1.32/sources/common/awmod.c"
 15371 ;; Parameters:    Size  Location     Type
 15372 ;;  dividend        2    0[COMRAM] int 
 15373 ;;  divisor         2    2[COMRAM] int 
 15374 ;; Auto vars:     Size  Location     Type
 15375 ;;  sign            1    5[COMRAM] unsigned char 
 15376 ;;  counter         1    4[COMRAM] unsigned char 
 15377 ;; Return value:  Size  Location     Type
 15378 ;;                  2    0[COMRAM] int 
 15379 ;; Registers used:
 15380 ;;		wreg, status,2, status,0, prodl
 15381 ;; Tracked objects:
 15382 ;;		On entry : 0/0
 15383 ;;		On exit  : 0/0
 15384 ;;		Unchanged: 0/0
 15385 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 15386 ;;      Params:         4       0       0       0       0       0       0       0       0
 15387 ;;      Locals:         2       0       0       0       0       0       0       0       0
 15388 ;;      Temps:          0       0       0       0       0       0       0       0       0
 15389 ;;      Totals:         6       0       0       0       0       0       0       0       0
 15390 ;;Total ram usage:        6 bytes
 15391 ;; Hardware stack levels used:    1
 15392 ;; This function calls:
 15393 ;;		Nothing
 15394 ;; This function is called by:
 15395 ;;		_dayOfWeek
 15396 ;;		_advState
 15397 ;;		_fround
 15398 ;;		_scale
 15399 ;; This function uses a non-reentrant model
 15400 ;;
 15401                           
 15402                           	psect	text55
 15403  003DE8                     __ptext55:
 15404                           	opt stack 0
 15405  003DE8                     ___awmod:
 15406                           	opt stack 23
 15407                           
 15408                           ;incstack = 0
 15409  003DE8  0E00               	movlw	0
 15410  003DEA  6E06               	movwf	___awmod@sign,c
 15411  003DEC  5002               	movf	___awmod@dividend+1,w,c
 15412  003DEE  0A80               	xorlw	128
 15413  003DF0  6EF3               	movwf	prodl,c
 15414  003DF2  0E80               	movlw	128
 15415  003DF4  5CF3               	subwf	prodl,w,c
 15416  003DF6  0E00               	movlw	0
 15417  003DF8  B4D8               	btfsc	status,2,c
 15418  003DFA  5C01               	subwf	___awmod@dividend,w,c
 15419  003DFC  B0D8               	btfsc	status,0,c
 15420  003DFE  D006               	goto	i2l3920
 15421  003E00  6C01               	negf	___awmod@dividend,c
 15422  003E02  1E02               	comf	___awmod@dividend+1,f,c
 15423  003E04  B0D8               	btfsc	status,0,c
 15424  003E06  2A02               	incf	___awmod@dividend+1,f,c
 15425  003E08  0E01               	movlw	1
 15426  003E0A  6E06               	movwf	___awmod@sign,c
 15427  003E0C                     i2l3920:
 15428  003E0C  5004               	movf	___awmod@divisor+1,w,c
 15429  003E0E  0A80               	xorlw	128
 15430  003E10  6EF3               	movwf	prodl,c
 15431  003E12  0E80               	movlw	128
 15432  003E14  5CF3               	subwf	prodl,w,c
 15433  003E16  0E00               	movlw	0
 15434  003E18  B4D8               	btfsc	status,2,c
 15435  003E1A  5C03               	subwf	___awmod@divisor,w,c
 15436  003E1C  B0D8               	btfsc	status,0,c
 15437  003E1E  D004               	goto	i2l3924
 15438  003E20  6C03               	negf	___awmod@divisor,c
 15439  003E22  1E04               	comf	___awmod@divisor+1,f,c
 15440  003E24  B0D8               	btfsc	status,0,c
 15441  003E26  2A04               	incf	___awmod@divisor+1,f,c
 15442  003E28                     i2l3924:
 15443  003E28  5004               	movf	___awmod@divisor+1,w,c
 15444  003E2A  1003               	iorwf	___awmod@divisor,w,c
 15445  003E2C  B4D8               	btfsc	status,2,c
 15446  003E2E  D018               	goto	i2l3940
 15447  003E30  0E01               	movlw	1
 15448  003E32  6E05               	movwf	___awmod@counter,c
 15449  003E34  D004               	goto	i2l3930
 15450  003E36                     i2l3928:
 15451  003E36  90D8               	bcf	status,0,c
 15452  003E38  3603               	rlcf	___awmod@divisor,f,c
 15453  003E3A  3604               	rlcf	___awmod@divisor+1,f,c
 15454  003E3C  2A05               	incf	___awmod@counter,f,c
 15455  003E3E                     i2l3930:
 15456  003E3E  AE04               	btfss	___awmod@divisor+1,7,c
 15457  003E40  D7FA               	goto	i2l3928
 15458  003E42                     i2l3932:
 15459  003E42  5003               	movf	___awmod@divisor,w,c
 15460  003E44  5C01               	subwf	___awmod@dividend,w,c
 15461  003E46  5004               	movf	___awmod@divisor+1,w,c
 15462  003E48  5802               	subwfb	___awmod@dividend+1,w,c
 15463  003E4A  A0D8               	btfss	status,0,c
 15464  003E4C  D004               	goto	i2l3936
 15465  003E4E  5003               	movf	___awmod@divisor,w,c
 15466  003E50  5E01               	subwf	___awmod@dividend,f,c
 15467  003E52  5004               	movf	___awmod@divisor+1,w,c
 15468  003E54  5A02               	subwfb	___awmod@dividend+1,f,c
 15469  003E56                     i2l3936:
 15470  003E56  90D8               	bcf	status,0,c
 15471  003E58  3204               	rrcf	___awmod@divisor+1,f,c
 15472  003E5A  3203               	rrcf	___awmod@divisor,f,c
 15473  003E5C  2E05               	decfsz	___awmod@counter,f,c
 15474  003E5E  D7F1               	goto	i2l3932
 15475  003E60                     i2l3940:
 15476  003E60  5006               	movf	___awmod@sign,w,c
 15477  003E62  B4D8               	btfsc	status,2,c
 15478  003E64  D004               	goto	i2l3944
 15479  003E66  6C01               	negf	___awmod@dividend,c
 15480  003E68  1E02               	comf	___awmod@dividend+1,f,c
 15481  003E6A  B0D8               	btfsc	status,0,c
 15482  003E6C  2A02               	incf	___awmod@dividend+1,f,c
 15483  003E6E                     i2l3944:
 15484  003E6E  C001  F001         	movff	___awmod@dividend,?___awmod
 15485  003E72  C002  F002         	movff	___awmod@dividend+1,?___awmod+1
 15486  003E76  0012               	return	
 15487  003E78                     __end_of___awmod:
 15488                           	opt stack 0
 15489                           tosu	equ	0xFFF
 15490                           tosh	equ	0xFFE
 15491                           tosl	equ	0xFFD
 15492                           pclatu	equ	0xFFB
 15493                           pclath	equ	0xFFA
 15494                           tblptru	equ	0xFF8
 15495                           tblptrh	equ	0xFF7
 15496                           tblptrl	equ	0xFF6
 15497                           tablat	equ	0xFF5
 15498                           prodh	equ	0xFF4
 15499                           prodl	equ	0xFF3
 15500                           intcon	equ	0xFF2
 15501                           intcon2	equ	0xFF1
 15502                           indf0	equ	0xFEF
 15503                           postinc0	equ	0xFEE
 15504                           fsr0h	equ	0xFEA
 15505                           fsr0l	equ	0xFE9
 15506                           wreg	equ	0xFE8
 15507                           postinc1	equ	0xFE6
 15508                           postdec1	equ	0xFE5
 15509                           fsr1h	equ	0xFE2
 15510                           fsr1l	equ	0xFE1
 15511                           indf2	equ	0xFDF
 15512                           postinc2	equ	0xFDE
 15513                           postdec2	equ	0xFDD
 15514                           plusw2	equ	0xFDB
 15515                           fsr2h	equ	0xFDA
 15516                           fsr2l	equ	0xFD9
 15517                           status	equ	0xFD8
 15518                           
 15519 ;; *************** function ___awdiv *****************
 15520 ;; Defined at:
 15521 ;;		line 8 in file "/opt/microchip/xc8/v1.32/sources/common/awdiv.c"
 15522 ;; Parameters:    Size  Location     Type
 15523 ;;  dividend        2    6[COMRAM] int 
 15524 ;;  divisor         2    8[COMRAM] int 
 15525 ;; Auto vars:     Size  Location     Type
 15526 ;;  quotient        2   12[COMRAM] int 
 15527 ;;  sign            1   11[COMRAM] unsigned char 
 15528 ;;  counter         1   10[COMRAM] unsigned char 
 15529 ;; Return value:  Size  Location     Type
 15530 ;;                  2    6[COMRAM] int 
 15531 ;; Registers used:
 15532 ;;		wreg, status,2, status,0, prodl
 15533 ;; Tracked objects:
 15534 ;;		On entry : 0/0
 15535 ;;		On exit  : 0/0
 15536 ;;		Unchanged: 0/0
 15537 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 15538 ;;      Params:         4       0       0       0       0       0       0       0       0
 15539 ;;      Locals:         4       0       0       0       0       0       0       0       0
 15540 ;;      Temps:          0       0       0       0       0       0       0       0       0
 15541 ;;      Totals:         8       0       0       0       0       0       0       0       0
 15542 ;;Total ram usage:        8 bytes
 15543 ;; Hardware stack levels used:    1
 15544 ;; This function calls:
 15545 ;;		Nothing
 15546 ;; This function is called by:
 15547 ;;		_dayOfWeek
 15548 ;;		_fround
 15549 ;;		_scale
 15550 ;;		_sprintf
 15551 ;; This function uses a non-reentrant model
 15552 ;;
 15553                           
 15554                           	psect	text56
 15555  003B88                     __ptext56:
 15556                           	opt stack 0
 15557  003B88                     ___awdiv:
 15558                           	opt stack 23
 15559                           
 15560                           ;incstack = 0
 15561  003B88  0E00               	movlw	0
 15562  003B8A  6E0C               	movwf	___awdiv@sign,c
 15563  003B8C  500A               	movf	___awdiv@divisor+1,w,c
 15564  003B8E  0A80               	xorlw	128
 15565  003B90  6EF3               	movwf	prodl,c
 15566  003B92  0E80               	movlw	128
 15567  003B94  5CF3               	subwf	prodl,w,c
 15568  003B96  0E00               	movlw	0
 15569  003B98  B4D8               	btfsc	status,2,c
 15570  003B9A  5C09               	subwf	___awdiv@divisor,w,c
 15571  003B9C  B0D8               	btfsc	status,0,c
 15572  003B9E  D006               	goto	i2l3876
 15573  003BA0  6C09               	negf	___awdiv@divisor,c
 15574  003BA2  1E0A               	comf	___awdiv@divisor+1,f,c
 15575  003BA4  B0D8               	btfsc	status,0,c
 15576  003BA6  2A0A               	incf	___awdiv@divisor+1,f,c
 15577  003BA8  0E01               	movlw	1
 15578  003BAA  6E0C               	movwf	___awdiv@sign,c
 15579  003BAC                     i2l3876:
 15580  003BAC  5008               	movf	___awdiv@dividend+1,w,c
 15581  003BAE  0A80               	xorlw	128
 15582  003BB0  6EF3               	movwf	prodl,c
 15583  003BB2  0E80               	movlw	128
 15584  003BB4  5CF3               	subwf	prodl,w,c
 15585  003BB6  0E00               	movlw	0
 15586  003BB8  B4D8               	btfsc	status,2,c
 15587  003BBA  5C07               	subwf	___awdiv@dividend,w,c
 15588  003BBC  B0D8               	btfsc	status,0,c
 15589  003BBE  D006               	goto	i2l3882
 15590  003BC0  6C07               	negf	___awdiv@dividend,c
 15591  003BC2  1E08               	comf	___awdiv@dividend+1,f,c
 15592  003BC4  B0D8               	btfsc	status,0,c
 15593  003BC6  2A08               	incf	___awdiv@dividend+1,f,c
 15594  003BC8  0E01               	movlw	1
 15595  003BCA  1A0C               	xorwf	___awdiv@sign,f,c
 15596  003BCC                     i2l3882:
 15597  003BCC  0E00               	movlw	0
 15598  003BCE  6E0E               	movwf	___awdiv@quotient+1,c
 15599  003BD0  0E00               	movlw	0
 15600  003BD2  6E0D               	movwf	___awdiv@quotient,c
 15601  003BD4  500A               	movf	___awdiv@divisor+1,w,c
 15602  003BD6  1009               	iorwf	___awdiv@divisor,w,c
 15603  003BD8  B4D8               	btfsc	status,2,c
 15604  003BDA  D01C               	goto	i2l3904
 15605  003BDC  0E01               	movlw	1
 15606  003BDE  6E0B               	movwf	___awdiv@counter,c
 15607  003BE0  D004               	goto	i2l3890
 15608  003BE2                     i2l3888:
 15609  003BE2  90D8               	bcf	status,0,c
 15610  003BE4  3609               	rlcf	___awdiv@divisor,f,c
 15611  003BE6  360A               	rlcf	___awdiv@divisor+1,f,c
 15612  003BE8  2A0B               	incf	___awdiv@counter,f,c
 15613  003BEA                     i2l3890:
 15614  003BEA  AE0A               	btfss	___awdiv@divisor+1,7,c
 15615  003BEC  D7FA               	goto	i2l3888
 15616  003BEE                     i2l3892:
 15617  003BEE  90D8               	bcf	status,0,c
 15618  003BF0  360D               	rlcf	___awdiv@quotient,f,c
 15619  003BF2  360E               	rlcf	___awdiv@quotient+1,f,c
 15620  003BF4  5009               	movf	___awdiv@divisor,w,c
 15621  003BF6  5C07               	subwf	___awdiv@dividend,w,c
 15622  003BF8  500A               	movf	___awdiv@divisor+1,w,c
 15623  003BFA  5808               	subwfb	___awdiv@dividend+1,w,c
 15624  003BFC  A0D8               	btfss	status,0,c
 15625  003BFE  D005               	goto	i2l3900
 15626  003C00  5009               	movf	___awdiv@divisor,w,c
 15627  003C02  5E07               	subwf	___awdiv@dividend,f,c
 15628  003C04  500A               	movf	___awdiv@divisor+1,w,c
 15629  003C06  5A08               	subwfb	___awdiv@dividend+1,f,c
 15630  003C08  800D               	bsf	___awdiv@quotient,0,c
 15631  003C0A                     i2l3900:
 15632  003C0A  90D8               	bcf	status,0,c
 15633  003C0C  320A               	rrcf	___awdiv@divisor+1,f,c
 15634  003C0E  3209               	rrcf	___awdiv@divisor,f,c
 15635  003C10  2E0B               	decfsz	___awdiv@counter,f,c
 15636  003C12  D7ED               	goto	i2l3892
 15637  003C14                     i2l3904:
 15638  003C14  500C               	movf	___awdiv@sign,w,c
 15639  003C16  B4D8               	btfsc	status,2,c
 15640  003C18  D004               	goto	i2l3908
 15641  003C1A  6C0D               	negf	___awdiv@quotient,c
 15642  003C1C  1E0E               	comf	___awdiv@quotient+1,f,c
 15643  003C1E  B0D8               	btfsc	status,0,c
 15644  003C20  2A0E               	incf	___awdiv@quotient+1,f,c
 15645  003C22                     i2l3908:
 15646  003C22  C00D  F007         	movff	___awdiv@quotient,?___awdiv
 15647  003C26  C00E  F008         	movff	___awdiv@quotient+1,?___awdiv+1
 15648  003C2A  0012               	return	
 15649  003C2C                     __end_of___awdiv:
 15650                           	opt stack 0
 15651                           tosu	equ	0xFFF
 15652                           tosh	equ	0xFFE
 15653                           tosl	equ	0xFFD
 15654                           pclatu	equ	0xFFB
 15655                           pclath	equ	0xFFA
 15656                           tblptru	equ	0xFF8
 15657                           tblptrh	equ	0xFF7
 15658                           tblptrl	equ	0xFF6
 15659                           tablat	equ	0xFF5
 15660                           prodh	equ	0xFF4
 15661                           prodl	equ	0xFF3
 15662                           intcon	equ	0xFF2
 15663                           intcon2	equ	0xFF1
 15664                           indf0	equ	0xFEF
 15665                           postinc0	equ	0xFEE
 15666                           fsr0h	equ	0xFEA
 15667                           fsr0l	equ	0xFE9
 15668                           wreg	equ	0xFE8
 15669                           postinc1	equ	0xFE6
 15670                           postdec1	equ	0xFE5
 15671                           fsr1h	equ	0xFE2
 15672                           fsr1l	equ	0xFE1
 15673                           indf2	equ	0xFDF
 15674                           postinc2	equ	0xFDE
 15675                           postdec2	equ	0xFDD
 15676                           plusw2	equ	0xFDB
 15677                           fsr2h	equ	0xFDA
 15678                           fsr2l	equ	0xFD9
 15679                           status	equ	0xFD8
 15680                           tosu	equ	0xFFF
 15681                           tosh	equ	0xFFE
 15682                           tosl	equ	0xFFD
 15683                           pclatu	equ	0xFFB
 15684                           pclath	equ	0xFFA
 15685                           tblptru	equ	0xFF8
 15686                           tblptrh	equ	0xFF7
 15687                           tblptrl	equ	0xFF6
 15688                           tablat	equ	0xFF5
 15689                           prodh	equ	0xFF4
 15690                           prodl	equ	0xFF3
 15691                           intcon	equ	0xFF2
 15692                           intcon2	equ	0xFF1
 15693                           indf0	equ	0xFEF
 15694                           postinc0	equ	0xFEE
 15695                           fsr0h	equ	0xFEA
 15696                           fsr0l	equ	0xFE9
 15697                           wreg	equ	0xFE8
 15698                           postinc1	equ	0xFE6
 15699                           postdec1	equ	0xFE5
 15700                           fsr1h	equ	0xFE2
 15701                           fsr1l	equ	0xFE1
 15702                           indf2	equ	0xFDF
 15703                           postinc2	equ	0xFDE
 15704                           postdec2	equ	0xFDD
 15705                           plusw2	equ	0xFDB
 15706                           fsr2h	equ	0xFDA
 15707                           fsr2l	equ	0xFD9
 15708                           status	equ	0xFD8
 15709                           
 15710                           	psect	text57
 15711  000000                     __ptext57:
 15712                           	opt stack 0
 15713                           tosu	equ	0xFFF
 15714                           tosh	equ	0xFFE
 15715                           tosl	equ	0xFFD
 15716                           pclatu	equ	0xFFB
 15717                           pclath	equ	0xFFA
 15718                           tblptru	equ	0xFF8
 15719                           tblptrh	equ	0xFF7
 15720                           tblptrl	equ	0xFF6
 15721                           tablat	equ	0xFF5
 15722                           prodh	equ	0xFF4
 15723                           prodl	equ	0xFF3
 15724                           intcon	equ	0xFF2
 15725                           intcon2	equ	0xFF1
 15726                           indf0	equ	0xFEF
 15727                           postinc0	equ	0xFEE
 15728                           fsr0h	equ	0xFEA
 15729                           fsr0l	equ	0xFE9
 15730                           wreg	equ	0xFE8
 15731                           postinc1	equ	0xFE6
 15732                           postdec1	equ	0xFE5
 15733                           fsr1h	equ	0xFE2
 15734                           fsr1l	equ	0xFE1
 15735                           indf2	equ	0xFDF
 15736                           postinc2	equ	0xFDE
 15737                           postdec2	equ	0xFDD
 15738                           plusw2	equ	0xFDB
 15739                           fsr2h	equ	0xFDA
 15740                           fsr2l	equ	0xFD9
 15741                           status	equ	0xFD8
 15742                           
 15743                           	psect	rparam
 15744  0000                     tosu	equ	0xFFF
 15745                           tosh	equ	0xFFE
 15746                           tosl	equ	0xFFD
 15747                           pclatu	equ	0xFFB
 15748                           pclath	equ	0xFFA
 15749                           tblptru	equ	0xFF8
 15750                           tblptrh	equ	0xFF7
 15751                           tblptrl	equ	0xFF6
 15752                           tablat	equ	0xFF5
 15753                           prodh	equ	0xFF4
 15754                           prodl	equ	0xFF3
 15755                           intcon	equ	0xFF2
 15756                           intcon2	equ	0xFF1
 15757                           indf0	equ	0xFEF
 15758                           postinc0	equ	0xFEE
 15759                           fsr0h	equ	0xFEA
 15760                           fsr0l	equ	0xFE9
 15761                           wreg	equ	0xFE8
 15762                           postinc1	equ	0xFE6
 15763                           postdec1	equ	0xFE5
 15764                           fsr1h	equ	0xFE2
 15765                           fsr1l	equ	0xFE1
 15766                           indf2	equ	0xFDF
 15767                           postinc2	equ	0xFDE
 15768                           postdec2	equ	0xFDD
 15769                           plusw2	equ	0xFDB
 15770                           fsr2h	equ	0xFDA
 15771                           fsr2l	equ	0xFD9
 15772                           status	equ	0xFD8


Data Sizes:
    Strings     101
    Constant    229
    Data        27
    BSS         109
    Persistent  5
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     94      95
    BANK0           160     72     138
    BANK1           256     22      96
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    sprintf@_val._cp	PTR const unsigned char  size(2) Largest target is 28
		 -> STR_19(CODE[7]), sprintf@c(BANK0[1]), dow(CODE[28]), 

    sprintf@f	PTR const unsigned char  size(2) Largest target is 17
		 -> STR_18(CODE[4]), STR_15(CODE[4]), STR_14(CODE[5]), STR_13(CODE[5]), 
		 -> STR_12(CODE[10]), STR_11(CODE[10]), STR_10(CODE[10]), STR_9(CODE[15]), 
		 -> STR_8(CODE[15]), STR_7(CODE[15]), STR_6(CODE[17]), STR_5(CODE[15]), 
		 -> STR_4(CODE[13]), STR_3(CODE[5]), STR_2(CODE[5]), 

    sprintf@sp	PTR unsigned char  size(2) Largest target is 15
		 -> printTemp@str(BANK0[15]), printRTC@str(BANK0[15]), writeFloat@str(COMRAM[15]), writeLong@str(COMRAM[15]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(COMRAM[2]), 

    S732$_cp	PTR const unsigned char  size(2) Largest target is 28
		 -> STR_19(CODE[7]), sprintf@c(BANK0[1]), dow(CODE[28]), 

    _val._str._cp	PTR const unsigned char  size(2) Largest target is 28
		 -> STR_19(CODE[7]), sprintf@c(BANK0[1]), dow(CODE[28]), 

    LATA5.printFn	PTR FTN(unsigned char ,)void  size(2) Largest target is 0
		 -> printTemp(), printRTC(), 

    menu.printFn	PTR FTN(unsigned char ,)void  size(2) Largest target is 0
		 -> printTemp(), printRTC(), 

    menu	PTR struct sMenu size(2) Largest target is 5
		 -> NULL(NULL[0]), tempMenu(BANK0[5]), rtcMenu(BANK0[5]), 

    tempMenu.printFn	PTR FTN(unsigned char ,)void  size(2) Largest target is 0
		 -> printTemp(), printRTC(), 

    S165sMenu$printFn	PTR FTN(unsigned char ,)void  size(2) Largest target is 0
		 -> printTemp(), printRTC(), 

    rtcMenu.printFn	PTR FTN(unsigned char ,)void  size(2) Largest target is 0
		 -> printTemp(), printRTC(), 

    writeString@string	PTR unsigned char  size(2) Largest target is 15
		 -> printTemp@str(BANK0[15]), STR_17(CODE[3]), STR_16(CODE[3]), printRTC@str(BANK0[15]), 
		 -> writeFloat@str(COMRAM[15]), writeLong@str(COMRAM[15]), STR_1(CODE[1]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _isr in COMRAM

    _isr->_printRTC
    _update->_writeDigit
    _writeDigit->_log2
    _spi->_rotate
    _printTemp->_sprintf
    ___altoft->___fttol
    _printRTC->_sprintf
    _sprintf->___ftsub
    _scale->___ftmul
    _fround->___ftmul
    ___lltoft->___ftpack
    ___fttol->___ftmul
    ___ftsub->___ftadd
    _getTemp->___ftadd
    ___lwtoft->___ftpack
    ___ftmul->___wmul
    ___ftdiv->___ftmul
    ___ftadd->___ftdiv
    _buttons->_advMenu
    _advState->___awmod
    _clearScreen->_writeString
    _writeString->_writeChar
    _writeChar->___wmul
    _log2->_hibit
    _daysOfMonth->___lwmod
    _checkDST->_dayOfWeek
    _tick->_daysOfMonth
    _tick->_saveTime
    _daysOfMonth->___lwmod
    _checkDST->_dayOfWeek
    _dayOfWeek->___llmod
    ___wmul->___awdiv
    ___llmod->___lldiv
    ___awdiv->___awmod

Critical Paths under _main in BANK0

    None.

Critical Paths under _isr in BANK0

    _isr->_printTemp
    _printTemp->_sprintf
    _printRTC->_sprintf

Critical Paths under _main in BANK1

    _startDisp->_setBrightness
    _startDisp->_setTest
    _initRTC->_loadTime

Critical Paths under _isr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _isr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _isr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _isr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _isr in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _isr in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _isr in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 9     4      5     882
                                             13 BANK1      9     4      5
                              _setup
 ---------------------------------------------------------------------------------
 (1) _setup                                                0     0      0     845
                            _initRTC
                           _initTemp
                       _setupButtons
                          _startDisp
 ---------------------------------------------------------------------------------
 (2) _startDisp                                            0     0      0      62
                      _setBrightness
                            _setTest
 ---------------------------------------------------------------------------------
 (3) _setTest                                              1     1      0      31
                                              0 BANK1      1     1      0
 ---------------------------------------------------------------------------------
 (3) _setBrightness                                        1     1      0      31
                                              0 BANK1      1     1      0
 ---------------------------------------------------------------------------------
 (2) _setupButtons                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _initTemp                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _initRTC                                              0     0      0     783
                           _loadTime
 ---------------------------------------------------------------------------------
 (3) _loadTime                                            13    13      0     783
                                              0 BANK1     13    13      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _isr                                                 14    14      0  167809
                                             58 BANK0     14    14      0
                            _buttons
                            _getTemp
                           _printRTC *
                          _printTemp *
                               _tick
                             _update
 ---------------------------------------------------------------------------------
 (5) _update                                               6     6      0    2195
                                             27 COMRAM     6     6      0
                                _spi
                         _writeDigit
 ---------------------------------------------------------------------------------
 (6) _writeDigit                                           8     7      1    1328
                                             19 COMRAM     8     7      1
                               _log2
                             _rotate
                                _spi
 ---------------------------------------------------------------------------------
 (7) _spi                                                  8     7      1     733
                                              6 COMRAM     8     7      1
                             _rotate (ARG)
                               _wait
 ---------------------------------------------------------------------------------
 (8) _wait                                                 4     0      4     214
                                              0 COMRAM     4     0      4
 ---------------------------------------------------------------------------------
 (7) _rotate                                               6     6      0     136
                                              0 COMRAM     6     6      0
 ---------------------------------------------------------------------------------
 (5) _printTemp                                           27    27      0   74645
                                             86 COMRAM     5     5      0
                                             36 BANK0     22    22      0
                           ___altoft
                            ___ftdiv
                            ___ftmul
                            ___fttol
                           ___lltoft
                          _countBits
                             _lowbit
                            _sprintf
                        _writeString
 ---------------------------------------------------------------------------------
 (6) _lowbit                                              11     7      4     261
                                              0 COMRAM    11     7      4
 ---------------------------------------------------------------------------------
 (6) ___altoft                                            10     6      4    2328
                                             50 COMRAM    10     6      4
                           ___ftpack
                            ___fttol (ARG)
 ---------------------------------------------------------------------------------
 (5) _printRTC                                             8     8      0   62752
                                             86 COMRAM     8     8      0
                            ___lwmod
                           _advState
                          _countBits
                            _sprintf
                        _writeString
 ---------------------------------------------------------------------------------
 (6) _sprintf                                             58    46     12   53889
                                             68 COMRAM    18     6     12
                                              0 BANK0     36    36      0
                            ___awdiv
                            ___ftadd
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                            ___lldiv
                            ___llmod
                           ___lltoft
                            ___lwmod (ARG)
                             ___wmul
                         __div_to_l_
                        __tdiv_to_l_
                             _fround
                            _isdigit
                              _scale
 ---------------------------------------------------------------------------------
 (7) _scale                                               10     7      3   12298
                                             35 COMRAM     7     4      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (7) _isdigit                                              3     3      0      68
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (7) _fround                                              13    10      3   12100
                                             35 COMRAM    10     7      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (7) __tdiv_to_l_                                         15     9      6     431
                                              0 COMRAM    15     9      6
 ---------------------------------------------------------------------------------
 (7) __div_to_l_                                          16    10      6     574
                                              0 COMRAM    16    10      6
 ---------------------------------------------------------------------------------
 (7) ___lltoft                                             9     5      4    2387
                                              8 COMRAM     9     5      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (7) ___lldiv                                             13     5      8     546
                                              0 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (7) ___fttol                                             15    11      4     508
                                             35 COMRAM    15    11      4
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (7) ___ftsub                                              6     0      6    4111
                                             62 COMRAM     6     0      6
                            ___ftadd
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (7) ___ftneg                                              3     0      3     109
                                              0 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (7) ___ftge                                               9     3      6     520
                                              0 COMRAM     9     3      6
 ---------------------------------------------------------------------------------
 (5) _getTemp                                             31    31      0   18924
                                             62 COMRAM    25    25      0
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                           ___lwtoft
                             ___wmul
 ---------------------------------------------------------------------------------
 (6) ___lwtoft                                             3     0      3    2404
                                              8 COMRAM     3     0      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (8) ___ftmul                                             15     9      6    4986
                                             20 COMRAM    15     9      6
                            ___awdiv (ARG)
                            ___awmod (ARG)
                           ___ftpack
                           ___lltoft (ARG)
                           ___lwtoft (ARG)
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (6) ___ftdiv                                             15     9      6    3788
                                             35 COMRAM    15     9      6
                            ___ftmul (ARG)
                           ___ftpack
                           ___lltoft (ARG)
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (8) ___ftadd                                             12     6      6    3836
                                             50 COMRAM    12     6      6
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                           ___ftpack
                             _fround (ARG)
 ---------------------------------------------------------------------------------
 (9) ___ftpack                                             8     3      5    2126
                                              0 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (5) _buttons                                              8     8      0    7425
                                             39 COMRAM     8     8      0
                            _advMenu
                           _advState
 ---------------------------------------------------------------------------------
 (6) _advState                                             5     5      0    1756
                                              6 COMRAM     5     5      0
                            ___awmod
 ---------------------------------------------------------------------------------
 (6) _advMenu                                              2     2      0    5669
                                             37 COMRAM     2     2      0
                        _clearScreen
 ---------------------------------------------------------------------------------
 (7) _clearScreen                                          0     0      0    5669
                        _writeString
 ---------------------------------------------------------------------------------
 (6) _writeString                                         10     8      2    5669
                                             27 COMRAM    10     8      2
                             ___wmul
                          _countBits
                        _getFontChar
                              _hibit
                               _log2
                          _writeChar
 ---------------------------------------------------------------------------------
 (7) _writeChar                                            7     6      1     457
                                             20 COMRAM     7     6      1
                             ___wmul (ARG)
                        _getFontChar
                               _log2
 ---------------------------------------------------------------------------------
 (7) _log2                                                 8     4      4     238
                                             11 COMRAM     8     4      4
                              _hibit (ARG)
 ---------------------------------------------------------------------------------
 (8) _getFontChar                                          5     5      0      66
                                              0 COMRAM     5     5      0
 ---------------------------------------------------------------------------------
 (7) _hibit                                               11     7      4     110
                                              0 COMRAM    11     7      4
 ---------------------------------------------------------------------------------
 (7) _countBits                                            5     1      4     474
                                              0 COMRAM     5     1      4
 ---------------------------------------------------------------------------------
 (6) _saveTime                                            10     1      9     292
                                              0 COMRAM    11     2      9
 ---------------------------------------------------------------------------------
 (6) _daysOfMonth                                          5     3      2    1494
                                              5 COMRAM     6     4      2
                            ___lwmod
 ---------------------------------------------------------------------------------
 (7) ___lwmod                                              5     1      4     671
                                              0 COMRAM     5     1      4
 ---------------------------------------------------------------------------------
 (6) _checkDST                                             6     6      0   19812
                                             33 COMRAM     7     7      0
                          _dayOfWeek
                               _tick
 ---------------------------------------------------------------------------------
 (5) _tick                                                 3     3      0    1868
                                             11 COMRAM     3     3      0
                           _checkDST
                        _daysOfMonth
                           _saveTime
 ---------------------------------------------------------------------------------
 (6) _saveTime                                            10     1      9     292
                                              0 COMRAM    11     2      9
 ---------------------------------------------------------------------------------
 (6) _daysOfMonth                                          5     3      2    1494
                                              5 COMRAM     6     4      2
                            ___lwmod
 ---------------------------------------------------------------------------------
 (6) _checkDST                                             6     6      0   19812
                                             33 COMRAM     7     7      0
                          _dayOfWeek
                               _tick
 ---------------------------------------------------------------------------------
 (7) _dayOfWeek                                           11     9      2    8026
                                             22 COMRAM    11     9      2
                            ___awdiv
                            ___awmod
                            ___llmod
                             ___wmul
 ---------------------------------------------------------------------------------
 (8) ___wmul                                               6     2      4    3359
                                             14 COMRAM     6     2      4
                            ___awdiv (ARG)
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (8) ___llmod                                              9     1      8     799
                                             13 COMRAM     9     1      8
                            ___lldiv (ARG)
 ---------------------------------------------------------------------------------
 (8) ___awmod                                              6     2      4    1756
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (8) ___awdiv                                              8     4      4    1708
                                              6 COMRAM     8     4      4
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _setup
     _initRTC
       _loadTime
     _initTemp
     _setupButtons
     _startDisp
       _setBrightness
       _setTest

 _isr (ROOT)
   _buttons
     _advMenu
       _clearScreen
         _writeString
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _countBits
           _getFontChar
           _hibit
           _log2
             _hibit (ARG)
           _writeChar
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _getFontChar (ARG)
             _log2 (ARG)
               _hibit (ARG)
     _advState
       ___awmod
   _getTemp
     ___ftadd
       ___ftdiv (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___lltoft (ARG)
             ___ftpack
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftpack (ARG)
         ___lltoft (ARG)
           ___ftpack
         ___lwtoft (ARG)
           ___ftpack
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___lltoft (ARG)
           ___ftpack
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftpack (ARG)
       _fround (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___lltoft (ARG)
             ___ftpack
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___ftdiv
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___lltoft (ARG)
           ___ftpack
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftpack (ARG)
       ___lltoft (ARG)
         ___ftpack
       ___lwtoft (ARG)
         ___ftpack
     ___ftmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___ftpack (ARG)
       ___lltoft (ARG)
         ___ftpack
       ___lwtoft (ARG)
         ___ftpack
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     ___lwtoft
       ___ftpack
     ___wmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
   _printRTC *
     ___lwmod
     _advState
       ___awmod
     _countBits
     _sprintf
       ___awdiv
         ___awmod (ARG)
       ___ftadd
         ___ftdiv (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftpack (ARG)
           ___lltoft (ARG)
             ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___lltoft (ARG)
             ___ftpack
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftpack (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftge
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___lltoft (ARG)
           ___ftpack
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftneg
       ___ftsub
         ___ftadd
           ___ftdiv (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftpack (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lltoft (ARG)
           ___ftpack
       ___fttol
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___lltoft (ARG)
             ___ftpack
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___lldiv
       ___llmod
         ___lldiv (ARG)
       ___lltoft
         ___ftpack
       ___lwmod (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       __div_to_l_ (ARG)
       __tdiv_to_l_ (ARG)
       _fround (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___lltoft (ARG)
             ___ftpack
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       _isdigit (ARG)
       _scale (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___lltoft (ARG)
             ___ftpack
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     _writeString
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       _countBits
       _getFontChar
       _hibit
       _log2
         _hibit (ARG)
       _writeChar
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _getFontChar (ARG)
         _log2 (ARG)
           _hibit (ARG)
   _printTemp *
     ___altoft
       ___ftpack
       ___fttol (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___lltoft (ARG)
             ___ftpack
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
     ___ftdiv
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___lltoft (ARG)
           ___ftpack
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftpack (ARG)
       ___lltoft (ARG)
         ___ftpack
       ___lwtoft (ARG)
         ___ftpack
     ___ftmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___ftpack (ARG)
       ___lltoft (ARG)
         ___ftpack
       ___lwtoft (ARG)
         ___ftpack
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     ___fttol
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___lltoft (ARG)
           ___ftpack
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___lltoft
       ___ftpack
     _countBits
     _lowbit
     _sprintf
       ___awdiv
         ___awmod (ARG)
       ___ftadd
         ___ftdiv (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftpack (ARG)
           ___lltoft (ARG)
             ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___lltoft (ARG)
             ___ftpack
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftpack (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftge
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___lltoft (ARG)
           ___ftpack
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftneg
       ___ftsub
         ___ftadd
           ___ftdiv (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftpack (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lltoft (ARG)
           ___ftpack
       ___fttol
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___lltoft (ARG)
             ___ftpack
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___lldiv
       ___llmod
         ___lldiv (ARG)
       ___lltoft
         ___ftpack
       ___lwmod (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       __div_to_l_ (ARG)
       __tdiv_to_l_ (ARG)
       _fround (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___lltoft (ARG)
             ___ftpack
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       _isdigit (ARG)
       _scale (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___lltoft (ARG)
             ___ftpack
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     _writeString
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       _countBits
       _getFontChar
       _hibit
       _log2
         _hibit (ARG)
       _writeChar
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _getFontChar (ARG)
         _log2 (ARG)
           _hibit (ARG)
   _tick *
     _checkDST
       _dayOfWeek
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___llmod
           ___lldiv (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     _daysOfMonth
       ___lwmod
     _saveTime
   _update *
     _spi
       _rotate (ARG)
       _wait (ARG)
     _writeDigit
       _log2
         _hibit (ARG)
       _rotate
       _spi
         _rotate (ARG)
         _wait (ARG)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0       0      21        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100     16      60       7       37.5%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     48      8A       5       86.2%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     5E      5F       1      100.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     149      20        0.0%
DATA                 0      0     149       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.32 build 58300 
Symbol Table                                                                                   Mon Aug 18 03:59:12 2014

           ___altoft@exp 003B            ___altoft@sign 003C                       _GO 007E11  
                     _RD 007D30                       _WR 007D31             ___awdiv@sign 000C  
    ___wmul@multiplicand 0011             ___ftadd@exp1 003E             ___ftadd@exp2 003D  
           ___ftadd@sign 003C                      l183 34C4                      l178 33FC  
                    _GIE 007F97                      _dow 7F7E                      _isr 0008  
                    _spi 3C2C             ___awmod@sign 0006                      prod 000FF3  
                    tosl 000FFD                      wreg 000FE8             __CFG_FOSC$HS 000000  
            _sprintf$749 0063             printTemp@str 0084             __CFG_LVP$OFF 000000  
           ___ftdiv@cntr 002D             ___ftdiv@sign 0032             __CFG_WDT$OFF 000000  
                   l5602 3408                     l5620 3444                     l5612 342A  
                   l5630 3466                     l5614 3430                     l5606 3416  
                   l5632 3472                     l5624 3452                     l5608 341C  
                   l5640 349C                     l5626 3458                     l5618 343E  
                   l5636 3480                     ?_isr 0001                     l5766 43A8  
                   ?_spi 0007                     STR_1 7FE1                     STR_2 7FEC  
                   STR_3 7FE7                     STR_4 7FC9                     STR_5 7FAB  
                   STR_6 7F9A                     STR_7 7F9C                     STR_8 7FBA  
                   STR_9 7F9C                     _LATA 000F89                     _LATB 000F8A  
                   _LATC 000F8B                     _IPEN 007E87                     _PEIE 007F96  
                   i2l43 2CC0                     u5921 34DC                     i2l58 1838  
                   i2l91 42E0                     u5835 4670                     u5836 4674  
                   i2l85 3CAC                     _TMR0 000FD6                     _TMR1 000FCE  
                   _TMR2 000FCC                     _WREN 007D32    __end_of_setBrightness 4644  
                   _date 00A8                     _log2 4422                     _main 438C  
           ___ftpack@arg 0001                     _menu 00BC             ___ftpack@exp 0004  
                   _tick 35D6                     _temp 00B9                     _wait 460A  
                   fsr0h 000FEA                     fsr1h 000FE2                     indf0 000FEF  
                   fsr0l 000FE9                     fsr2h 000FDA                     fsr1l 000FE1  
                   indf2 000FDF                     fsr2l 000FD9                     pclat 000FFA  
                   prodh 000FF4                     prodl 000FF3                     start 0018  
           _sprintf$1314 0060            __CFG_MCLRE$ON 000000             ___ftmul@cntr 0022  
         writeString@cnt 0025             ___ftmul@sign 0023            printTemp@bits 0097  
           ___fttol@exp1 0032             ___fttol@lval 002E                    ??_isr 009A  
                  ??_spi 0008            __CFG_PLLDIV$4 000000                    ?_log2 000C  
                  ?_main 0157          __end_of___awdiv 3C2C                    _ADRES 000FC3  
                  _EEADR 000FA9          __end_of___ftadd 3034                    STR_10 7FBF  
                  STR_11 7FBF                    STR_12 7FBF                    STR_13 7FE2  
                  STR_14 7FDD                    STR_15 7FF5                    STR_16 7FF9  
                  ?_tick 0001                    STR_17 7FFC                    STR_18 7FF1  
                  STR_19 7FD6          __end_of___awmod 3E78                    ?_wait 0001  
        __end_of___ftdiv 395E          __end_of___ftneg 45A0          __end_of___lldiv 4010  
        __end_of___ftmul 37A6                    _T0CON 000FD5          ___awdiv@divisor 0009  
                  _T1CON 000FCD          __end_of___llmod 41CE          __end_of___ftsub 4524  
        __end_of___fttol 3A32                    _T2CON 000FCA                    _LATA1 007C49  
                  _LATA3 007C4B                    _LATC0 007C58                    _LATA4 007C4C  
                  _LATA5 007C4D                    _LATC6 007C5E                    _LATC7 007C5F  
         __CFG_DEBUG$OFF 000000                    i2l200 409C          __end_of___lwmod 44EE  
                  i2l202 40A2                    i2l203 40A8                    i2l204 40AE  
                  i2l221 3ADE                    i2l206 40B4                    i2l207 40EE  
                  i2l119 2630                    i2l208 40EC                    i2l241 35D4  
                  i2l270 2DAA                    i2l510 4440                    i2l271 2DB6  
                  i2l263 2D56                    i2l327 1C3C                    i2l264 2D62  
                  i2l273 2DDA                    i2l265 2D6E                    i2l266 2D7A  
                  i2l258 36C0                    i2l442 13E6                    i2l267 2D86  
                  i2l268 2D92                    i2l372 2078                    i2l269 2D9E  
                  i2l197 4096                    i2l294 1C10                    i2l708 0B3A  
                  i2l653 2022                    i2l494 41EC                    i2l488 456A  
                  i2l748 09A2          ___awdiv@counter 000B          __end_of_advMenu 3F8E  
                  _PORTB 000F81            __CFG_USBDIV$2 000000                    _TRISA 000F92  
                  _TRISB 000F93                    _TRISC 000F94            __CFG_PWRT$OFF 000000  
            _writeString 2382             ___lltoft@exp 0011          __end_of_getTemp 2382  
                  _nRBPU 007F8F          __end_of_initRTC 438C                    _hibit 41CE  
        __end_of_dpowers 7F08                    _pow10 7F08                    _scale 1C56  
        __end_of_isdigit 460A          __end_of_buttons 13E8            ___ftpack@sign 0005  
                  _setup 3E78          __end_of_setTest 467A                    pclath 000FFA  
                  tablat 000FF5                    plusw2 000FDB                    status 000FD8  
        __end_of_sprintf 0EC8     __size_of_clearScreen 0010          __initialization 4468  
        writeString@bits 0022             __end_of_log2 4468             __end_of_main 43DA  
           __end_of_tick 36C2             __end_of_wait 4628     __size_of_daysOfMonth 00AE  
         printTemp@units 0098                   ??_log2 0010                   ??_main 015C  
          ___fttol@sign1 002D                   ??_tick 000C                   ??_wait 0005  
          __activetblptr 000002     __size_of_getFontChar 0220     __size_of__tdiv_to_l_ 0100  
                 ?_hibit 0001                   _ADCON0 000FC2                   _ADCON1 000FC1  
                 _ADCON2 000FC0         __end_of___altoft 3D58         ___llmod@dividend 000E  
                 ?_scale 0024                   _EEDATA 000FA8                   _EECON1 000FA6  
                 _EECON2 000FA7              loadTime@cnt 014C         ___awdiv@dividend 0007  
                 ?_setup 0001         __end_of___ftpack 3B88         __end_of___lltoft 428A  
                 i2l1113 3B86                   i2l1150 2ECE                   i2l1214 37A4  
                 i2l1151 3032                   i2l1208 3DE6                   i2l1224 4592  
                 i2l1072 32F2                   i2l1081 32E2                   i2l1154 2EFA  
                 i2l1234 3A30                   i2l1165 2FA6                   i2l1174 2FC2  
                 i2l1182 395C                   i2l1190 33F2                   i2l1351 44E4  
                 i2l1192 3362                   i2l1185 392C                   i2l1193 338A  
                 i2l1278 3FFE                   i2l1199 33E2                   i2l1288 41BC  
                 i2l4104 35F8                   i2l4200 1F50                   i2l4114 3616  
                 i2l4018 4334                   i2l4140 3676                   i2l4132 365A  
                 i2l4124 3634                   i2l5012 38C8                   i2l4142 367E  
                 i2l5006 38A2                   i2l4310 3288                   i2l4302 3258  
                 i2l4206 2000                   i2l5110 1852                   i2l4080 2D4A  
                 i2l4144 36A4                   i2l5032 3906                   i2l5200 202A  
                 i2l4400 3A0A                   i2l4320 32AA                   i2l4160 276C  
                 i2l5120 1936                   i2l5112 188E                   i2l3530 2AD6  
                 i2l3522 2AAA                   i2l3610 3B3C                   i2l3602 3AFE  
                 i2l4330 32D2                   i2l4234 3328                   i2l4218 4602  
                 i2l5130 19EC                   i2l5114 18D4                   i2l3612 3B5A  
                 i2l3604 3B08                   i2l4404 3A20                   i2l4332 32DE  
                 i2l4324 32BA                   i2l4228 330E                   i2l4500 0102  
                 i2l5132 1A32                   i2l5140 1A68                   i2l5116 1906  
                 i2l5124 193C                   i2l5060 13FC                   i2l4086 2DE8  
                 i2l3710 40E0                   i2l3542 2AE2                   i2l3534 2ADA  
                 i2l3526 2AD2                   i2l3518 2AA6                   i2l5310 12A4  
                 i2l3614 3B64                   i2l3606 3B26                   i2l4414 3FB0  
                 i2l4262 33AA                   i2l4182 1D7E                   i2l5150 1B04  
                 i2l5142 1A80                   i2l5134 1A38                   i2l5126 1954  
                 i2l5118 190C                   i2l5070 1472                   i2l5062 1430  
                 i2l4088 2E32                   i2l4096 35E2                   i2l3640 44DA  
                 i2l3632 44BA                   i2l3720 3A36                   i2l3560 2AEE  
                 i2l5304 1212                   i2l3800 2FA0                   i2l5216 21A8  
                 i2l4344 3D88                   i2l4416 3FBC                   i2l4432 4234  
                 i2l4272 33D2                   i2l4168 282C                   i2l4192 1E30  
                 i2l4520 018A                   i2l5160 1B46                   i2l5144 1AAA  
                 i2l5136 1A62                   i2l5128 1986                   i2l5064 1440  
                 i2l3634 44C2                   i2l3554 2AEA                   i2l3546 2AE6  
                 i2l3538 2ADE                   i2l5322 13C8                   i2l4354 3DE4  
                 i2l4426 3FF0                   i2l4418 3FC0                   i2l4434 4240  
                 i2l4282 31EA                   i2l4274 33DE                   i2l4266 33BA  
                 i2l4522 0198                   i2l5162 1B52                   i2l5146 1AD4  
                 i2l5154 1B0A                   i2l5066 1450                   i2l5074 1488  
                 i2l3900 3C0A                   i2l3636 44C6                   i2l3740 3A8E  
                 i2l3724 3A3A                   i2l3708 40BA                   i2l3564 4434  
                 i2l5316 1336                   i2l5228 22E2                   i2l4348 3DB8  
                 i2l4188 1E22                   i2l4700 084C                   i2l4620 051C  
                 i2l4604 045E                   i2l4532 01FA                   i2l4508 0138  
                 i2l5164 1B7C                   i2l5172 1BB2                   i2l5156 1B1C  
                 i2l5148 1ADA                   i2l5068 1460                   i2l5076 1808  
                 i2l3734 3A8A                   i2l3574 455A                   i2l3582 41E0  
                 i2l3662 23EE                   i2l3806 2FDE                   i2l4390 39E2  
                 i2l4702 0864                   i2l4550 028E                   i2l4534 0200  
                 i2l4526 01D2                   i2l5254 2924                   i2l5174 1BBE  
                 i2l5166 1B82                   i2l5430 30AA                   i2l3904 3C14  
                 i2l3920 3E0C                   i2l3728 3A3E                   i2l3744 3A92  
                 i2l3816 300E                   i2l3832 3702                   i2l4368 3978  
                 i2l4288 3216                   i2l4632 05AA                   i2l4560 02DC  
                 i2l4544 023C                   i2l4536 0206                   i2l4528 01E8  
                 i2l4480 004C                   i2l5256 2934                   i2l5168 1BAC  
                 i2l3930 3E3E                   i2l3682 252A                   i2l3690 262A  
                 i2l3666 2428                   i2l3658 23EA                   i2l5290 10CC  
                 i2l5282 1036                   i2l5274 0F82                   i2l3850 3744  
                 i2l3826 36DC                   i2l4386 39D2                   i2l4562 02EA  
                 i2l4546 024A                   i2l4482 0066                   i2l4474 002C  
                 i2l5178 1BD8                   i2l3908 3C22                   i2l3932 3E42  
                 i2l3940 3E60                   i2l3924 3E28                   i2l3692 262C  
                 i2l3780 2F38                   i2l3764 2F08                   i2l3860 376C  
                 i2l4396 39FA                   i2l4812 0C9C                   i2l4804 0C48  
                 i2l4732 0972                   i2l4716 08B6                   i2l4724 094C  
                 i2l4708 087C                   i2l4660 06EE                   i2l4644 0656  
                 i2l4636 05F0                   i2l4628 0584                   i2l4580 037A  
                 i2l4556 02B4                   i2l4548 0250                   i2l4492 00A0  
                 i2l5444 30E4                   i2l5428 30A8                   i2l3686 25C6  
                 i2l3598 3AF0                   i2l3790 2F6C                   i2l3758 2EDC  
                 i2l3846 3734                   i2l4398 3A06                   i2l4830 0D3A  
                 i2l4750 0A24                   i2l4726 095A                   i2l4574 0348  
                 i2l4566 02FA                   i2l4486 006E                   i2l3944 3E6E  
                 i2l3936 3E56                   i2l3928 3E36                   i2l3960 41AE  
                 i2l3952 417A                   i2l3688 2628                   i2l3792 2F74  
                 i2l3856 375C                   i2l4840 0D74                   i2l4832 0D46  
                 i2l4824 0CFA                   i2l4808 0C6C                   i2l4760 0B08  
                 i2l4664 0756                   i2l4648 067C                   i2l4576 0360  
                 i2l4568 0310                   i2l3696 460A                   i2l5464 3180  
                 i2l3890 3BEA                   i2l3882 3BCC                   i2l3954 4186  
                 i2l4922 35BC                   i2l4914 3584                   i2l5298 1180  
                 i2l3786 2F5A                   i2l4850 0DA4                   i2l4826 0D06  
                 i2l4818 0CC6                   i2l4762 0B16                   i2l4746 09D2  
                 i2l4738 09A6                   i2l4682 07E4                   i2l4594 03FA  
                 i2l4586 0398                   i2l5466 3182                   i2l3892 3BEE  
                 i2l3876 3BAC                   i2l3956 418A                   i2l3788 2F64  
                 i2l4588 03DE                   i2l5900 1800                   i2l4926 35CA  
                 i2l3798 2F96                   i2l4862 0DEC                   i2l4790 0BFC  
                 i2l4774 0B64                   i2l4694 0834                   i2l4686 0804  
                 i2l4678 07A2                   i2l4870 0E9E                   i2l3888 3BE2  
                 i2l4856 0DC6                   i2l4848 0D9A                   i2l4784 0BDE  
                 i2l4768 0B2E                   i2l4872 0EBA                   i2l4868 0E8A  
                 i2l4956 4122                   u330_41 2E98                   i2l4974 3F2E  
                 i2l4992 3D02                   i2l4978 3F58                   i2l4994 3D0E  
                 i2l5890 14D4                   i2l5892 17D8                   u331_41 2EAC  
                 i2l5894 17E2                   i2l5896 17EC                   i2l5898 17F6  
                 u351_41 36D2                   u407_41 3304                   u353_41 36EC  
                 u409_41 331E         __end_of___lwtoft 45EA                   u531_41 3898  
                 u533_41 38B2                   u429_41 396E         daysOfMonth@month 000B  
                 _TMR0IE 007F95                   _TMR0IF 007F92                   _TMR1IE 007CE8  
                 _TMR1IF 007CF0                   _TMR2IE 007CE9                   _TMR2IF 007CF1  
                 _TMR0ON 007EAF                   _TMR1ON 007E68                   _TMR2ON 007E52  
       __end_of_checkDST 35D6                   _TRISA0 007C90                   _TRISA1 007C91  
                 _TRISA2 007C92                   _TRISA3 007C93                   _TRISA4 007C94  
       __end_of_advState 3888             _checkDST$309 0028            dayOfWeek@year 001D  
       __end_of__powers_ 7F7E         __end_of_lcd_font 7EE0                   ___ftge 3D58  
                 ___wmul 45A0                ??___awdiv 000B                ??___ftadd 0039  
              ??___awmod 0005                ??___ftdiv 002A                ??___ftneg 0004  
              ??___lldiv 0009                ??___ftmul 001B                ??___llmod 0016  
              ??___ftsub 0045                ??___fttol 0028                ??___lwmod 0005  
       __end_of_loadTime 34E6                ??_advMenu 0026         __end_of_initTemp 4552  
                 _fround 2632                   clear_0 446E                   clear_1 447A  
       ___awdiv@quotient 000D          ___awmod@divisor 0003                   _screen 00D3  
                 _lowbit 40FE          ___awmod@counter 0005                   hibit@x 0001  
              ??_getTemp 003F                   _update 13E8                   _rotate 42E2  
       __end_of_saveTime 40FE    ___ftmul@f3_as_product 001F                ??_initRTC 0157  
              ??_isdigit 0001                ??_buttons 0028             countBits@ret 0005  
           countBits@num 0001         __end_of_printRTC 1C56                   spi@cnt 000E  
           __mediumconst 7EB4                ??_setTest 014A                   tblptrh 000FF7  
                 tblptrl 000FF6                   tblptru 000FF8                ??_sprintf 0051  
             __accesstop 0060  __end_of__initialization 44A2               ___altoft@c 0033  
        __CFG_PBADEN$OFF 000000               ___ftadd@f1 0033               ___ftadd@f2 0036  
             ___ftge@ff1 0001               ___ftge@ff2 0004               ___ftdiv@f1 0024  
             ___ftdiv@f2 0027               ___ftdiv@f3 002E               ___ftneg@f1 0001  
             ___ftmul@f1 0015               ___ftmul@f2 0018               ___ftsub@f1 003F  
             ___ftsub@f2 0042               ___fttol@f1 0024           __pcstackCOMRAM 0001  
           __pidataBANK1 4644       __size_of_dayOfWeek 01C6               ___lltoft@c 0009  
          __end_of_hibit 422E            __end_of_pow10 7F30            __end_of_scale 2024  
          __end_of_setup 3F06               ___lwtoft@c 0009          printTemp@digits 0099  
             __div_to_l_ 31BE                  ??_hibit 0005          __div_to_l_@exp1 0010  
        __div_to_l_@cntr 000F             sprintf@integ 006F                  ??_scale 0027  
        __div_to_l_@quot 000B             sprintf@width 007B                  ??_setup 0157  
             __pbssBANK0 00A8               __pbssBANK1 0100       __size_of_countBits 0028  
          __div_to_l_@f1 0001            __div_to_l_@f2 0004                  ?___ftge 0001  
                ?___wmul 000F                ?___altoft 0033                  ?_fround 0024  
           loadTime@data 0156                ?___ftpack 0001                  ?_lowbit 0001  
              ?___lltoft 0009                  ?_update 0001                  ?_rotate 0001  
              ?___lwtoft 0009              saveTime@cnt 000B                ?_checkDST 0001  
              ?_advState 0001             ?_writeString 001C       __size_of_printTemp 0236  
     __size_of_startDisp 007E        __end_of_dayOfWeek 2E88             _getTemp$1307 004E  
           _getTemp$1308 0051             _getTemp$1309 0048                ?_loadTime 0001  
              ?_initTemp 0001       __size_of_writeChar 0048                ?_saveTime 0001  
      __end_of__npowers_ 7F57                  __Hparam 0000           dayOfWeek@month 0017  
             _scale$1313 0027                  __Lparam 0000                ?_printRTC 0001  
        __size_of___ftge 0090                  ___awdiv 3B88                  ___ftadd 2E88  
                ___awmod 3DE8                  ___ftdiv 3888                  ___ftneg 457A  
                ___lldiv 3F8E          __size_of___wmul 0026                  ___ftmul 36C2  
                ___llmod 4168                  ___ftsub 44EE                  ___fttol 395E  
                ___lwmod 44AC                  _advMenu 3F06               ??___altoft 0037  
      __end_of_countBits 457A                  __pcinit 4468               ??___ftpack 0006  
        __size_of_fround 023A                  __ramtop 0800               ??___lltoft 000D  
        __size_of_lowbit 006A                  _getTemp 2024                  __ptext0 438C  
                __ptext1 3E78                  __ptext2 4010                  __ptext3 4660  
                __ptext4 4628                  __ptext5 468A                  __ptext6 4524  
                __ptext7 4338                  __ptext8 33F4          __size_of_update 0452  
        __size_of_rotate 0056               ??___lwtoft 000C                  _oldLATB 005F  
 __size_of_setBrightness 001C              ?__div_to_l_ 0001                  _initRTC 4338  
                _dpowers 7EE0               ??_checkDST 0022               ??_advState 0007  
                _isdigit 45EA             __size_of_isr 31B6                  _buttons 0EC8  
           __size_of_spi 009C         ___awmod@dividend 0001                  _setTest 4660  
                _waitCnt 0100                  _rtcMenu 00E5                  _waitcnt 00B5  
                log2@num 000C                  main@cnt 015C                  _sprintf 001C  
         __pintcode_body 3034     end_of_initialization 44A2               ??_loadTime 014A  
          _tmr0BigCounts 00B1               ??_initTemp 014A               _tmr2_count 00C2  
          __Lmediumconst 7EB4                  int_func 3034            ??_clearScreen 0026  
           writeChar@dig 001A                  tick@ret 000E                  tick@val 000C  
                spi@addr 000D                  spi@data 0007          ___lldiv@divisor 0005  
             ??_saveTime 000A                  lowbit@x 0001                  spi@send 000B  
        ___lldiv@counter 000D        __end_of_printTemp 2AA2            ??_daysOfMonth 0008  
             ??_printRTC 0057                  postdec1 000FE5                  postdec2 000FDD  
                postinc0 000FEE                  postinc1 000FE6                  postinc2 000FDE  
          ?_setupButtons 0001        __end_of_startDisp 408E           __tdiv_to_l_@f1 0001  
         __tdiv_to_l_@f2 0004            ??_getFontChar 0001            ??__tdiv_to_l_ 0007  
             getTemp@cnt 0057               getTemp@tmp 0054        __end_of_writeChar 4422  
            printRTC@cnt 005C              printRTC@str 00C4             writeString@i 0024  
            ___ftdiv@exp 0031            _setBrightness 4628      __size_of__div_to_l_ 0136  
            ___ftmul@exp 001E           ??_setupButtons 014A      __end_of_clearScreen 468A  
      writeString@digits 0023               _writeDigit 428A           __end_of___ftge 3DE8  
         __end_of___wmul 45C6        writeString@string 001C           __end_of_fround 286C  
    __end_of_daysOfMonth 3AE0           __end_of_lowbit 4168           __end_of_update 183A  
         __end_of_rotate 4338      start_initialization 4468            lowbit@log2Val 0008  
    __end_of_getFontChar 2CC2      __end_of__tdiv_to_l_ 33F4              __end_of_dow 7F9A  
            __end_of_isr 31BE              __end_of_spi 3CC8     __size_of_writeString 02B0  
         ?_setBrightness 0001          ___llmod@divisor 0012          ___llmod@counter 0016  
        daysOfMonth@year 0006             dayOfWeek@day 0018             dayOfWeek@tmp 001E  
               ??___ftge 0007                 ??___wmul 0013            sprintf@vd_751 006B  
            __pdataBANK1 012F                 ??_fround 0027                 ??_lowbit 0005  
               ??_update 001C                 ??_rotate 0001        __size_of___altoft 0090  
             fround@prec 002D        __size_of___ftpack 00A8        __size_of___lltoft 005C  
            __pbssCOMRAM 005F        __size_of___lwtoft 0024            __pcstackBANK0 0060  
          __pcstackBANK1 014A        __size_of_checkDST 00F0      __end_of__stringdata 7FFF  
      __size_of_advState 00E2             _isdigit$1032 0002              sprintf@_val 0080  
            sprintf@flag 0076              sprintf@fval 0078              sprintf@prec 007D  
              _dayOfWeek 2CC2                __pnvBANK0 00E5              _clearScreen 467A  
      __size_of_loadTime 00F2        __size_of_initTemp 002E                __pintcode 0008  
          __pmediumconst 7EB4        __size_of_saveTime 0070              _daysOfMonth 3A32  
               ?___awdiv 0007                 ?___ftadd 0033                 ?___awmod 0001  
               ?___ftdiv 0024              ?_writeDigit 0014                 ?___ftneg 0001  
               ?___lldiv 0001                 ?___ftmul 0015                 ?___llmod 000E  
               ?___ftsub 003F                __npowers_ 7F30                 ?___fttol 0024  
               ?___lwmod 0001                 ?_advMenu 0001      getTemp@oldTempsTemp 003F  
      __size_of_printRTC 041C               tick@save_t 000D              _getFontChar 2AA2  
            __tdiv_to_l_ 32F4                 ?_getTemp 0001             ??__div_to_l_ 0007  
               ?_initRTC 0001                _countBits 4552                 ?_isdigit 0001  
               ?_buttons 0001          _rtc_small_ticks 00C0                 ?_setTest 0001  
   __end_of_setupButtons 4694           __size_of_hibit 0060                 ?_sprintf 0045  
         __size_of_scale 03CE          ??_setBrightness 014A           __size_of_setup 008E  
           saveTime@date 0001           ___wmul@product 0013               ?_dayOfWeek 0017  
          getFontChar@ch 0005              writeChar@ch 0015                 i2u310_44 2438  
               i2u310_45 2434                 i2u312_40 2486                 i2u312_47 247C  
               i2u321_40 260C                 i2u321_47 2602                 i2u314_40 24D2  
               i2u322_44 261E                 i2u322_45 261A                 i2u314_47 24C8  
               i2u307_44 23BE                 i2u307_45 23B8                 i2u316_44 2516  
               i2u316_45 2510                 i2u317_40 2570                 i2u317_47 2566  
               i2u414_40 33C0                 i2u319_40 25C0                 i2u431_40 3996  
               i2u423_40 32C0                 i2u431_45 398E                 i2u319_47 25B6  
               i2u416_40 31DC                 i2u416_45 31D2                 i2u521_45 3826  
     __end_of__div_to_l_ 32F4                 i2u354_40 36F4                 i2u434_40 39E8  
               i2u418_40 3208                 i2u418_45 31FE                 i2u451_40 0288  
               i2u451_47 027E                 i2u524_44 4150                 i2u540_44 149C  
               i2u524_45 414A                 i2u540_45 1496                 i2u373_44 3C68  
               i2u541_44 181C                 i2u525_45 3F1C                 i2u461_45 0438  
               i2u373_45 3C62                 i2u541_45 1816                 i2u518_40 35A6  
               i2u534_40 38BA                 i2u526_45 3F44                 i2u374_45 3C74  
               i2u518_46 35A8                 i2u374_46 3C7A                 i2u527_40 3F8A  
               i2u463_40 04AA                 i2u295_44 4216                 i2u295_45 4210  
               i2u527_45 3F82                 i2u463_45 04A0                 i2u528_45 3F8C  
               i2u560_45 1132                 i2u457_40 033C                 i2u553_45 0F42  
               i2u529_45 3CE8                 i2u457_47 0332                 i2u378_44 4318  
               i2u538_44 1424                 i2u562_45 11E6                 i2u554_45 0F7C  
               i2u490_45 0BB6                 i2u378_45 4314                 i2u538_45 1420  
               i2u554_46 0F82                 i2u539_40 147C                 i2u379_44 4328  
               i2u379_45 4324                 i2u539_46 147E                 i2u564_45 1278  
               i2u556_45 0FE8                 i2u397_41 36B4                 i2u566_45 130A  
               i2u558_45 109C                 i2u582_48 3158                 i2u568_45 139C  
        writeDigit@digit 0019                _printTemp 286C                _startDisp 4010  
            __stringdata 7F9A        ___wmul@multiplier 000F               ?_countBits 0001  
           setTest@state 014A                _writeChar 43DA                copy_data0 4496  
    __size_of_writeDigit 0058           _printTemp$1310 0093          writeFloat@F5135 0120  
               __Hrparam 0000                 __Lrparam 0000          loadTime@newDate 014D  
             ?_printTemp 0001         __size_of___awdiv 00A4         __size_of___ftadd 01AC  
       __size_of___awmod 0090         __size_of___ftdiv 00D6         __size_of___ftneg 0026  
       __size_of___lldiv 0082                 ___altoft 3CC8         __size_of___ftmul 00E4  
       __size_of___llmod 0066         __size_of___ftsub 0036         __size_of___fttol 00D4  
       __size_of___lwmod 0042                 ___ftpack 3AE0         __size_of_advMenu 0088  
            _fround$1311 002A              _fround$1312 0027                 ___lltoft 422E  
             ?_startDisp 0001                 ___lwtoft 45C6         __size_of_getTemp 035E  
               _checkDST 34E6                 _advState 37A6               sprintf@exp 0074  
       __size_of_initRTC 0054         __size_of_isdigit 0020         __size_of_buttons 0520  
         writeChar@digit 001B         __size_of_setTest 001A               ?_writeChar 0015  
               __ptext10 13E8                 __ptext11 428A                 __ptext20 1C56  
               __ptext12 3C2C                 __ptext21 45EA                 __ptext13 460A  
               __ptext30 3D58                 __ptext22 2632                 __ptext14 42E2  
               __ptext31 2024                 __ptext23 32F4                 __ptext15 183A  
               __ptext40 467A                 __ptext32 45C6                 __ptext24 31BE  
               __ptext16 286C                 __ptext41 2382                 __ptext33 36C2  
               __ptext25 422E                 __ptext17 40FE                 __ptext50 34E6  
               __ptext42 43DA                 __ptext34 3888                 __ptext26 3F8E  
               __ptext18 3CC8                 __ptext51 35D6                 __ptext43 4422  
               __ptext35 2E88                 __ptext27 395E                 __ptext19 001C  
               __ptext52 2CC2                 __ptext44 2AA2                 __ptext36 3AE0  
               __ptext28 44EE                 __ptext53 45A0                 __ptext45 41CE  
               __ptext37 0EC8                 __ptext29 457A                 __ptext54 4168  
               __ptext46 4552                 __ptext38 37A6                 __ptext55 3DE8  
               __ptext47 408E                 __ptext39 3F06                 __ptext56 3B88  
               __ptext48 3A32                 __ptext57 0000                 __ptext49 44AC  
               __powers_ 7F57                 _lcd_font 7EB5         __size_of_sprintf 0EAC  
          _rtc_big_ticks 00BE                 _loadTime 33F4                 _initTemp 4524  
              wait@count 0001            __size_of_log2 0046            __size_of_main 004E  
            ??_dayOfWeek 0019                 _oldTemps 013E            __size_of_tick 00EC  
          __size_of_wait 001E                 _saveTime 408E                 _tempMenu 00E0  
               _printRTC 183A           writeDigit@segs 0014                printRTC@i 005E  
               main@argc 0157                 main@argv 0159    __CFG_CPUDIV$OSC1_PLL2 000000  
              update@cnt 0021    __size_of_setupButtons 000A              ??_countBits 0005  
              rotate@cnt 0006            ??_writeString 001E                rotate@seg 0004  
              rotate@ret 0005                 isdigit@c 0003                 scale@scl 002A  
               intlevel2 0000                sprintf@ap 0072         __tdiv_to_l_@exp1 000F  
              sprintf@vd 0067                sprintf@sp 0045         __tdiv_to_l_@cntr 000E  
       __tdiv_to_l_@quot 000A         ___lwmod@dividend 0001         ___lldiv@dividend 0001  
           ?_clearScreen 0001            writeDigit@dig 001A            writeDigit@cnt 001B  
         writeLong@F5131 012F           printRTC@digits 005D             getTemp@total 004B  
           ?_daysOfMonth 0006             ??_writeDigit 0015             _setupButtons 468A  
            ??_printTemp 0057             ?_getFontChar 0001      setBrightness@bright 014A  
           ?__tdiv_to_l_ 0001              ??_startDisp 014B                 sprintf@c 007F  
               sprintf@f 0047         ___lldiv@quotient 0009          ___lwmod@divisor 0003  
        ___lwmod@counter 0005              ??_writeChar 0016              log2@log2Val 0010  
    __end_of_writeString 2632       __end_of_writeDigit 42E2             printRTC@bits 005B  
           hibit@log2Val 0008  
