

Microchip Technology PIC18 LITE Macro Assembler V1.20 build 52243 
                                                                                               Sun Mar 30 20:49:59 2014

Microchip Technology Omniscient Code Generator (Lite mode) build 52243
     1                           	processor	18F2550
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataBANK1,global,class=CODE,delta=1
     6                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1
     7                           	psect	nvBANK1,global,class=BANK1,space=1,delta=1
     8                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    11                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    12                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    13                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    14                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    15                           	psect	text0,global,reloc=2,class=CODE,delta=1
    16                           	psect	text1,global,reloc=2,class=CODE,delta=1
    17                           	psect	text2,global,reloc=2,class=CODE,delta=1
    18                           	psect	text3,global,reloc=2,class=CODE,delta=1
    19                           	psect	text4,global,reloc=2,class=CODE,delta=1
    20                           	psect	text5,global,reloc=2,class=CODE,delta=1
    21                           	psect	text6,global,reloc=2,class=CODE,delta=1
    22                           	psect	text7,global,reloc=2,class=CODE,delta=1
    23                           	psect	text8,global,reloc=2,class=CODE,delta=1
    24                           	psect	text9,global,reloc=2,class=CODE,delta=1
    25                           	psect	text10,global,reloc=2,class=CODE,delta=1
    26                           	psect	text11,global,reloc=2,class=CODE,delta=1
    27                           	psect	text12,global,reloc=2,class=CODE,delta=1
    28                           	psect	text13,global,reloc=2,class=CODE,delta=1
    29                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    30                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    31                           	psect	text15,global,reloc=2,class=CODE,delta=1
    32                           	psect	text16,global,reloc=2,class=CODE,delta=1
    33                           	psect	text17,global,reloc=2,class=CODE,delta=1
    34                           	psect	text18,global,reloc=2,class=CODE,delta=1
    35                           	psect	text19,global,reloc=2,class=CODE,delta=1
    36                           	psect	text20,global,reloc=2,class=CODE,delta=1
    37                           	psect	text21,global,reloc=2,class=CODE,delta=1
    38                           	psect	text22,global,reloc=2,class=CODE,delta=1
    39                           	psect	text23,global,reloc=2,class=CODE,delta=1
    40                           	psect	text24,global,reloc=2,class=CODE,delta=1
    41                           	psect	text25,global,reloc=2,class=CODE,delta=1
    42                           	psect	text26,global,reloc=2,class=CODE,delta=1
    43                           	psect	text27,global,reloc=2,class=CODE,delta=1
    44                           	psect	text28,global,reloc=2,class=CODE,delta=1
    45                           	psect	text29,global,reloc=2,class=CODE,delta=1
    46                           	psect	text30,global,reloc=2,class=CODE,delta=1
    47                           	psect	text31,global,reloc=2,class=CODE,delta=1
    48                           	psect	text32,global,reloc=2,class=CODE,delta=1
    49                           	psect	text33,global,reloc=2,class=CODE,delta=1
    50                           	psect	text34,global,reloc=2,class=CODE,delta=1
    51                           	psect	text35,global,reloc=2,class=CODE,delta=1
    52                           	psect	text36,global,reloc=2,class=CODE,delta=1
    53                           	psect	text37,global,reloc=2,class=CODE,delta=1
    54                           	psect	text38,global,reloc=2,class=CODE,delta=1
    55                           	psect	text39,global,reloc=2,class=CODE,delta=1
    56                           	psect	text40,global,reloc=2,class=CODE,delta=1
    57                           	psect	text41,global,reloc=2,class=CODE,delta=1
    58                           	psect	text42,global,reloc=2,class=CODE,delta=1
    59                           	psect	text43,global,reloc=2,class=CODE,delta=1
    60                           	psect	text44,global,reloc=2,class=CODE,delta=1
    61                           	psect	text45,global,reloc=2,class=CODE,delta=1
    62                           	psect	text46,global,reloc=2,class=CODE,delta=1
    63                           	psect	text47,global,reloc=2,class=CODE,delta=1
    64                           	psect	text48,global,reloc=2,class=CODE,delta=1
    65                           	psect	text49,global,reloc=2,class=CODE,delta=1
    66                           	psect	text50,global,reloc=2,class=CODE,delta=1
    67                           	psect	text51,global,reloc=2,class=CODE,delta=1
    68                           	psect	text52,global,reloc=2,class=CODE,delta=1
    69                           	psect	text53,global,reloc=2,class=CODE,delta=1
    70                           	psect	text54,global,reloc=2,class=CODE,delta=1
    71                           	psect	text55,global,reloc=2,class=CODE,delta=1
    72                           	psect	text56,global,reloc=2,class=CODE,delta=1
    73                           	psect	text57,global,reloc=2,class=CODE,delta=1
    74                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    75                           	psect	text58,global,reloc=2,class=CODE,delta=1
    76                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    77  0000                     
    78                           	psect	idataBANK1
    79  004A60                     __pidataBANK1:
    80                           	opt stack 0
    81                           
    82                           ;initializer for writeLong@F5021
    83  004A60  30                 	db	48
    84  004A61  30                 	db	48
    85  004A62  30                 	db	48
    86  004A63  30                 	db	48
    87  004A64  30                 	db	48
    88  004A65  30                 	db	48
    89  004A66  30                 	db	48
    90  004A67  30                 	db	48
    91  004A68  00                 	db	0
    92                           
    93                           	psect	mediumconst
    94  007EB8                     __pmediumconst:
    95                           	opt stack 0
    96  007EB8                     _lcd_font:
    97                           	opt stack 0
    98  007EB8  3F                 	db	63
    99  007EB9  06                 	db	6
   100  007EBA  5B                 	db	91
   101  007EBB  4F                 	db	79
   102  007EBC  66                 	db	102
   103  007EBD  6D                 	db	109
   104  007EBE  7C                 	db	124
   105  007EBF  07                 	db	7
   106  007EC0  7F                 	db	127
   107  007EC1  67                 	db	103
   108  007EC2  00                 	db	0
   109  007EC3  00                 	db	0
   110  007EC4  61                 	db	97
   111  007EC5  48                 	db	72
   112  007EC6  00                 	db	0
   113  007EC7  53                 	db	83
   114  007EC8  00                 	db	0
   115  007EC9  77                 	db	119
   116  007ECA  7C                 	db	124
   117  007ECB  58                 	db	88
   118  007ECC  5E                 	db	94
   119  007ECD  79                 	db	121
   120  007ECE  71                 	db	113
   121  007ECF  6F                 	db	111
   122  007ED0  74                 	db	116
   123  007ED1  10                 	db	16
   124  007ED2  0F                 	db	15
   125  007ED3  68                 	db	104
   126  007ED4  38                 	db	56
   127  007ED5  37                 	db	55
   128  007ED6  54                 	db	84
   129  007ED7  5C                 	db	92
   130  007ED8  73                 	db	115
   131  007ED9  67                 	db	103
   132  007EDA  50                 	db	80
   133  007EDB  6D                 	db	109
   134  007EDC  78                 	db	120
   135  007EDD  1C                 	db	28
   136  007EDE  1C                 	db	28
   137  007EDF  7E                 	db	126
   138  007EE0  76                 	db	118
   139  007EE1  6E                 	db	110
   140  007EE2  5B                 	db	91
   141  007EE3                     __end_of_lcd_font:
   142                           	opt stack 0
   143  007EE3                     _dpowers:
   144                           	opt stack 0
   145  007EE3  0001               	dw	1
   146  007EE5  0000               	dw	0
   147  007EE7  000A               	dw	10
   148  007EE9  0000               	dw	0
   149  007EEB  0064               	dw	100
   150  007EED  0000               	dw	0
   151  007EEF  03E8               	dw	1000
   152  007EF1  0000               	dw	0
   153  007EF3  2710               	dw	10000
   154  007EF5  0000               	dw	0
   155  007EF7  86A0               	dw	34464
   156  007EF9  0001               	dw	1
   157  007EFB  4240               	dw	16960
   158  007EFD  000F               	dw	15
   159  007EFF  9680               	dw	38528
   160  007F01  0098               	dw	152
   161  007F03  E100               	dw	57600
   162  007F05  05F5               	dw	1525
   163  007F07  CA00               	dw	51712
   164  007F09  3B9A               	dw	15258
   165  007F0B                     __end_of_dpowers:
   166                           	opt stack 0
   167  007F0B                     _pow10:
   168                           	opt stack 0
   169  007F0B  0001               	dw	1
   170  007F0D  0000               	dw	0
   171  007F0F  000A               	dw	10
   172  007F11  0000               	dw	0
   173  007F13  0064               	dw	100
   174  007F15  0000               	dw	0
   175  007F17  03E8               	dw	1000
   176  007F19  0000               	dw	0
   177  007F1B  2710               	dw	10000
   178  007F1D  0000               	dw	0
   179  007F1F  86A0               	dw	34464
   180  007F21  0001               	dw	1
   181  007F23  4240               	dw	16960
   182  007F25  000F               	dw	15
   183  007F27  9680               	dw	38528
   184  007F29  0098               	dw	152
   185  007F2B  E100               	dw	57600
   186  007F2D  05F5               	dw	1525
   187  007F2F  CA00               	dw	51712
   188  007F31  3B9A               	dw	15258
   189  007F33                     __end_of_pow10:
   190                           	opt stack 0
   191  007F33                     __npowers_:
   192                           	opt stack 0
   193  007F33  00                 	db	0
   194  007F34  80                 	db	128
   195  007F35  3F                 	db	63
   196  007F36  CD                 	db	205
   197  007F37  CC                 	db	204
   198  007F38  3D                 	db	61
   199  007F39  D7                 	db	215
   200  007F3A  23                 	db	35
   201  007F3B  3C                 	db	60
   202  007F3C  12                 	db	18
   203  007F3D  83                 	db	131
   204  007F3E  3A                 	db	58
   205  007F3F  B7                 	db	183
   206  007F40  D1                 	db	209
   207  007F41  38                 	db	56
   208  007F42  C6                 	db	198
   209  007F43  27                 	db	39
   210  007F44  37                 	db	55
   211  007F45  38                 	db	56
   212  007F46  86                 	db	134
   213  007F47  35                 	db	53
   214  007F48  C0                 	db	192
   215  007F49  D6                 	db	214
   216  007F4A  33                 	db	51
   217  007F4B  CC                 	db	204
   218  007F4C  2B                 	db	43
   219  007F4D  32                 	db	50
   220  007F4E  70                 	db	112
   221  007F4F  89                 	db	137
   222  007F50  30                 	db	48
   223  007F51  E7                 	db	231
   224  007F52  DB                 	db	219
   225  007F53  2E                 	db	46
   226  007F54  E5                 	db	229
   227  007F55  3C                 	db	60
   228  007F56  1E                 	db	30
   229  007F57  42                 	db	66
   230  007F58  A2                 	db	162
   231  007F59  0D                 	db	13
   232  007F5A                     __end_of__npowers_:
   233                           	opt stack 0
   234  007F5A                     __powers_:
   235                           	opt stack 0
   236  007F5A  00                 	db	0
   237  007F5B  80                 	db	128
   238  007F5C  3F                 	db	63
   239  007F5D  00                 	db	0
   240  007F5E  20                 	db	32
   241  007F5F  41                 	db	65
   242  007F60  00                 	db	0
   243  007F61  C8                 	db	200
   244  007F62  42                 	db	66
   245  007F63  00                 	db	0
   246  007F64  7A                 	db	122
   247  007F65  44                 	db	68
   248  007F66  40                 	db	64
   249  007F67  1C                 	db	28
   250  007F68  46                 	db	70
   251  007F69  50                 	db	80
   252  007F6A  C3                 	db	195
   253  007F6B  47                 	db	71
   254  007F6C  24                 	db	36
   255  007F6D  74                 	db	116
   256  007F6E  49                 	db	73
   257  007F6F  97                 	db	151
   258  007F70  18                 	db	24
   259  007F71  4B                 	db	75
   260  007F72  BC                 	db	188
   261  007F73  BE                 	db	190
   262  007F74  4C                 	db	76
   263  007F75  6B                 	db	107
   264  007F76  6E                 	db	110
   265  007F77  4E                 	db	78
   266  007F78  03                 	db	3
   267  007F79  15                 	db	21
   268  007F7A  50                 	db	80
   269  007F7B  79                 	db	121
   270  007F7C  AD                 	db	173
   271  007F7D  60                 	db	96
   272  007F7E  F3                 	db	243
   273  007F7F  49                 	db	73
   274  007F80  71                 	db	113
   275  007F81                     __end_of__powers_:
   276                           	opt stack 0
   277  007F81                     _dow:
   278                           	opt stack 0
   279  007F81  53                 	db	83
   280  007F82  6F                 	db	111
   281  007F83  6E                 	db	110
   282  007F84  00                 	db	0
   283  007F85  4D                 	db	77
   284  007F86  6F                 	db	111
   285  007F87  6E                 	db	110
   286  007F88  00                 	db	0
   287  007F89  44                 	db	68
   288  007F8A  65                 	db	101
   289  007F8B  69                 	db	105
   290  007F8C  00                 	db	0
   291  007F8D  4D                 	db	77
   292  007F8E  69                 	db	105
   293  007F8F  74                 	db	116
   294  007F90  00                 	db	0
   295  007F91  44                 	db	68
   296  007F92  6F                 	db	111
   297  007F93  6E                 	db	110
   298  007F94  00                 	db	0
   299  007F95  46                 	db	70
   300  007F96  72                 	db	114
   301  007F97  69                 	db	105
   302  007F98  00                 	db	0
   303  007F99  53                 	db	83
   304  007F9A  61                 	db	97
   305  007F9B  6D                 	db	109
   306  007F9C  00                 	db	0
   307  007F9D                     __end_of_dow:
   308                           	opt stack 0
   309  0000                     _TMR0	set	4054
   310  0000                     _TMR1	set	4046
   311  0000                     _EEADR	set	4009
   312  0000                     _EECON1	set	4006
   313  0000                     _EECON2	set	4007
   314  0000                     _EEDATA	set	4008
   315  0000                     _LATA	set	3977
   316  0000                     _LATB	set	3978
   317  0000                     _LATC	set	3979
   318  0000                     _PORTB	set	3969
   319  0000                     _RCON	set	4048
   320  0000                     _T0CON	set	4053
   321  0000                     _T1CON	set	4045
   322  0000                     _TRISA	set	3986
   323  0000                     _TRISB	set	3987
   324  0000                     _TRISC	set	3988
   325  0000                     _GIE	set	32663
   326  0000                     _IPEN	set	32391
   327  0000                     _LATA1	set	31817
   328  0000                     _LATA3	set	31819
   329  0000                     _LATA4	set	31820
   330  0000                     _LATA5	set	31821
   331  0000                     _LATC0	set	31832
   332  0000                     _LATC1	set	31833
   333  0000                     _LATC2	set	31834
   334  0000                     _PEIE	set	32662
   335  0000                     _RD	set	32048
   336  0000                     _TMR0IE	set	32661
   337  0000                     _TMR0IF	set	32658
   338  0000                     _TMR0ON	set	32431
   339  0000                     _TMR1IE	set	31976
   340  0000                     _TMR1IF	set	31984
   341  0000                     _TMR1ON	set	32360
   342  0000                     _TRISA1	set	31889
   343  0000                     _TRISA2	set	31890
   344  0000                     _TRISA3	set	31891
   345  0000                     _TRISA4	set	31892
   346  0000                     _WR	set	32049
   347  0000                     _WREN	set	32050
   348  0000                     _nRBPU	set	32655
   349  007F9D                     __stringdata:
   350                           	opt stack 0
   351  007F9D                     STR_5:
   352  007F9D  20                 	db	32
   353  007F9E  20                 	db	32
   354  007F9F  25                 	db	37
   355  007FA0  30                 	db	48	;'0'
   356  007FA1  32                 	db	50	;'2'
   357  007FA2  64                 	db	100	;'d'
   358  007FA3  2E                 	db	46
   359  007FA4  25                 	db	37
   360  007FA5  30                 	db	48	;'0'
   361  007FA6  32                 	db	50	;'2'
   362  007FA7  64                 	db	100	;'d'
   363  007FA8  2E                 	db	46
   364  007FA9  25                 	db	37
   365  007FAA  30                 	db	48	;'0'
   366  007FAB  32                 	db	50	;'2'
   367  007FAC  64                 	db	100	;'d'
   368  007FAD  00                 	db	0
   369  007FAE                     STR_6:
   370  007FAE  20                 	db	32
   371  007FAF  25                 	db	37
   372  007FB0  63                 	db	99	;'c'
   373  007FB1  25                 	db	37
   374  007FB2  63                 	db	99	;'c'
   375  007FB3  20                 	db	32
   376  007FB4  25                 	db	37
   377  007FB5  30                 	db	48	;'0'
   378  007FB6  32                 	db	50	;'2'
   379  007FB7  64                 	db	100	;'d'
   380  007FB8  2E                 	db	46
   381  007FB9  25                 	db	37
   382  007FBA  30                 	db	48	;'0'
   383  007FBB  32                 	db	50	;'2'
   384  007FBC  64                 	db	100	;'d'
   385  007FBD  00                 	db	0
   386  007FBE                     STR_4:
   387  007FBE  25                 	db	37
   388  007FBF  30                 	db	48	;'0'
   389  007FC0  32                 	db	50	;'2'
   390  007FC1  64                 	db	100	;'d'
   391  007FC2  20                 	db	32
   392  007FC3  25                 	db	37
   393  007FC4  30                 	db	48	;'0'
   394  007FC5  32                 	db	50	;'2'
   395  007FC6  64                 	db	100	;'d'
   396  007FC7  20                 	db	32
   397  007FC8  25                 	db	37
   398  007FC9  30                 	db	48	;'0'
   399  007FCA  32                 	db	50	;'2'
   400  007FCB  64                 	db	100	;'d'
   401  007FCC  00                 	db	0
   402  007FCD                     STR_8:
   403  007FCD  20                 	db	32
   404  007FCE  20                 	db	32
   405  007FCF  20                 	db	32
   406  007FD0  20                 	db	32
   407  007FD1  25                 	db	37
   408  007FD2  30                 	db	48	;'0'
   409  007FD3  32                 	db	50	;'2'
   410  007FD4  64                 	db	100	;'d'
   411  007FD5  2E                 	db	46
   412  007FD6  25                 	db	37
   413  007FD7  30                 	db	48	;'0'
   414  007FD8  32                 	db	50	;'2'
   415  007FD9  64                 	db	100	;'d'
   416  007FDA  00                 	db	0
   417  007FDB                     STR_3:
   418  007FDB  25                 	db	37
   419  007FDC  73                 	db	115	;'s'
   420  007FDD  20                 	db	32
   421  007FDE  25                 	db	37
   422  007FDF  30                 	db	48	;'0'
   423  007FE0  32                 	db	50	;'2'
   424  007FE1  64                 	db	100	;'d'
   425  007FE2  2E                 	db	46
   426  007FE3  25                 	db	37
   427  007FE4  30                 	db	48	;'0'
   428  007FE5  32                 	db	50	;'2'
   429  007FE6  64                 	db	100	;'d'
   430  007FE7  00                 	db	0
   431  007FE8                     STR_18:
   432  007FE8  28                 	db	40
   433  007FE9  6E                 	db	110	;'n'
   434  007FEA  75                 	db	117	;'u'
   435  007FEB  6C                 	db	108	;'l'
   436  007FEC  6C                 	db	108	;'l'
   437  007FED  29                 	db	41
   438  007FEE  00                 	db	0
   439  007FEF                     STR_17:
   440  007FEF  20                 	db	32
   441  007FF0  20                 	db	32
   442  007FF1  20                 	db	32
   443  007FF2  20                 	db	32
   444  007FF3  00                 	db	0
   445  007FF4  25                 	db	37
   446  007FF5  2E                 	db	46
   447  007FF6  2A                 	db	42
   448  007FF7  66                 	db	102	;'f'
   449  007FF8  00                 	db	0
   450  007FF9  25                 	db	37
   451  007FFA  2A                 	db	42
   452  007FFB  6C                 	db	108	;'l'
   453  007FFC  69                 	db	105	;'i'
   454  007FFD  00                 	db	0
   455  007FFE                     __end_of__stringdata:
   456                           	opt stack 0
   457                           
   458                           ; #config settings
   459  007FFE  00                 	db	0	; dummy byte at the end
   460  0000                     
   461                           	psect	nvBANK1
   462  000151                     __pnvBANK1:
   463                           	opt stack 0
   464  000151                     _rtcMenu:
   465                           	opt stack 0
   466  000151                     	ds	5
   467                           
   468                           	psect	cinit
   469  0047BA                     __pcinit:
   470                           	opt stack 0
   471  0047BA                     start_initialization:
   472                           	opt stack 0
   473  0047BA                     __initialization:
   474                           	opt stack 0
   475                           
   476                           ; Clear objects allocated to BANK1 (38 bytes)
   477  0047BA  EE01  F000         	lfsr	0,__pbssBANK1
   478  0047BE  0E26               	movlw	38
   479  0047C0                     clear_0:
   480  0047C0  6AEE               	clrf	postinc0,c
   481  0047C2  06E8               	decf	wreg,f,c
   482  0047C4  E1FD               	bnz	clear_0
   483                           
   484                           ; Clear objects allocated to BANK0 (69 bytes)
   485  0047C6  EE00  F0A6         	lfsr	0,__pbssBANK0
   486  0047CA  0E45               	movlw	69
   487  0047CC                     clear_1:
   488  0047CC  6AEE               	clrf	postinc0,c
   489  0047CE  06E8               	decf	wreg,f,c
   490  0047D0  E1FD               	bnz	clear_1
   491                           
   492                           ; Initialize objects allocated to BANK1 (9 bytes)
   493                           ; load TBLPTR registers with __pidataBANK1
   494  0047D2  0E60               	movlw	low __pidataBANK1
   495  0047D4  6EF6               	movwf	tblptrl,c
   496  0047D6  0E4A               	movlw	high __pidataBANK1
   497  0047D8  6EF7               	movwf	tblptrh,c
   498  0047DA  0E00               	movlw	low (__pidataBANK1 shr (0+16))
   499  0047DC  6EF8               	movwf	tblptru,c
   500  0047DE  EE01  F048         	lfsr	0,__pdataBANK1
   501  0047E2  EE10 F009          	lfsr	1,9
   502  0047E6                     copy_data0:
   503  0047E6  0009               	tblrd		*+
   504  0047E8  CFF5 FFEE          	movff	tablat,postinc0
   505  0047EC  50E5               	movf	postdec1,w,c
   506  0047EE  50E1               	movf	fsr1l,w,c
   507  0047F0  E1FA               	bnz	copy_data0
   508  0047F2                     end_of_initialization:
   509                           	opt stack 0
   510  0047F2                     __end_of__initialization:
   511                           	opt stack 0
   512  0047F2  0E00               	movlw	low (__Lmediumconst shr (0+16))
   513  0047F4  6EF8               	movwf	tblptru,c
   514  0047F6  0100               	movlb	0
   515  0047F8  EFC5  F021         	goto	_main	;jump to C main() function
   516                           tblptru	equ	0xFF8
   517                           tblptrh	equ	0xFF7
   518                           tblptrl	equ	0xFF6
   519                           tablat	equ	0xFF5
   520                           postinc0	equ	0xFEE
   521                           wreg	equ	0xFE8
   522                           postdec1	equ	0xFE5
   523                           fsr1l	equ	0xFE1
   524                           
   525                           	psect	bssBANK0
   526  0000A6                     __pbssBANK0:
   527                           	opt stack 0
   528  0000A6                     _waitCnt:
   529                           	opt stack 0
   530  0000A6                     	ds	32
   531  0000C6                     _date:
   532                           	opt stack 0
   533  0000C6                     	ds	9
   534  0000CF                     _tmr0BigCounts:
   535                           	opt stack 0
   536  0000CF                     	ds	4
   537  0000D3                     _waitcnt:
   538                           	opt stack 0
   539  0000D3                     	ds	4
   540  0000D7                     _menu:
   541                           	opt stack 0
   542  0000D7                     	ds	2
   543  0000D9                     _rtc_big_ticks:
   544                           	opt stack 0
   545  0000D9                     	ds	2
   546  0000DB                     _rtc_small_ticks:
   547                           	opt stack 0
   548  0000DB                     	ds	2
   549  0000DD                     _oldLATB:
   550                           	opt stack 0
   551  0000DD                     	ds	1
   552  0000DE                     _screen:
   553                           	opt stack 0
   554  0000DE                     	ds	13
   555                           tblptru	equ	0xFF8
   556                           tblptrh	equ	0xFF7
   557                           tblptrl	equ	0xFF6
   558                           tablat	equ	0xFF5
   559                           postinc0	equ	0xFEE
   560                           wreg	equ	0xFE8
   561                           postdec1	equ	0xFE5
   562                           fsr1l	equ	0xFE1
   563                           
   564                           	psect	bssBANK1
   565  000100                     __pbssBANK1:
   566                           	opt stack 0
   567  000100                     _oldTemps:
   568                           	opt stack 0
   569  000100                     	ds	12
   570  00010C                     printRTC@F5073:
   571                           	opt stack 0
   572  00010C                     	ds	12
   573  000118                     writeFloat@F5025:
   574                           	opt stack 0
   575  000118                     	ds	9
   576  000121                     _tempMenu:
   577                           	opt stack 0
   578  000121                     	ds	5
   579                           tblptru	equ	0xFF8
   580                           tblptrh	equ	0xFF7
   581                           tblptrl	equ	0xFF6
   582                           tablat	equ	0xFF5
   583                           postinc0	equ	0xFEE
   584                           wreg	equ	0xFE8
   585                           postdec1	equ	0xFE5
   586                           fsr1l	equ	0xFE1
   587                           
   588                           	psect	dataBANK1
   589  000148                     __pdataBANK1:
   590                           	opt stack 0
   591  000148                     writeLong@F5021:
   592                           	opt stack 0
   593  000148                     	ds	9
   594                           tblptru	equ	0xFF8
   595                           tblptrh	equ	0xFF7
   596                           tblptrl	equ	0xFF6
   597                           tablat	equ	0xFF5
   598                           postinc0	equ	0xFEE
   599                           wreg	equ	0xFE8
   600                           postdec1	equ	0xFE5
   601                           fsr1l	equ	0xFE1
   602                           
   603                           	psect	cstackBANK1
   604  000126                     __pcstackBANK1:
   605                           	opt stack 0
   606  000126                     ?_wait:
   607                           	opt stack 0
   608  000126                     ??_loadTime:
   609  000126                     ?_setBrightness:
   610                           	opt stack 0
   611  000126                     ?_setTest:
   612                           	opt stack 0
   613  000126                     ?_rotate:
   614                           	opt stack 0
   615  000126                     ?_log2:
   616                           	opt stack 0
   617  000126                     setBrightness@bright:
   618                           	opt stack 0
   619  000126                     setTest@state:
   620                           	opt stack 0
   621  000126                     rotate@seg:
   622                           	opt stack 0
   623  000126                     wait@count:
   624                           	opt stack 0
   625  000126                     log2@num:
   626                           	opt stack 0
   627                           
   628                           ; 4 bytes @ 0x0
   629  000126                     	ds	1
   630  000127                     ??_rotate:
   631  000127                     ??_startDisp:
   632                           
   633                           ; 0 bytes @ 0x1
   634  000127                     	ds	1
   635  000128                     loadTime@cnt:
   636                           	opt stack 0
   637                           
   638                           ; 1 bytes @ 0x2
   639  000128                     	ds	1
   640  000129                     loadTime@newDate:
   641                           	opt stack 0
   642                           
   643                           ; 9 bytes @ 0x3
   644  000129                     	ds	1
   645  00012A                     rotate@ret:
   646                           	opt stack 0
   647  00012A                     log2@log2Val:
   648                           	opt stack 0
   649                           
   650                           ; 4 bytes @ 0x4
   651  00012A                     	ds	1
   652  00012B                     rotate@cnt:
   653                           	opt stack 0
   654                           
   655                           ; 1 bytes @ 0x5
   656  00012B                     	ds	1
   657  00012C                     ?_spi:
   658                           	opt stack 0
   659  00012C                     spi@addr:
   660                           	opt stack 0
   661                           
   662                           ; 1 bytes @ 0x6
   663  00012C                     	ds	1
   664  00012D                     spi@data:
   665                           	opt stack 0
   666                           
   667                           ; 1 bytes @ 0x7
   668  00012D                     	ds	1
   669  00012E                     ??_spi:
   670                           
   671                           ; 0 bytes @ 0x8
   672  00012E                     	ds	3
   673  000131                     spi@send:
   674                           	opt stack 0
   675                           
   676                           ; 2 bytes @ 0xB
   677  000131                     	ds	1
   678  000132                     ??_initRTC:
   679                           
   680                           ; 0 bytes @ 0xC
   681  000132                     	ds	1
   682  000133                     ??_setup:
   683  000133                     spi@cnt:
   684                           	opt stack 0
   685                           
   686                           ; 1 bytes @ 0xD
   687  000133                     	ds	1
   688  000134                     ?_writeDigit:
   689                           	opt stack 0
   690  000134                     writeDigit@digit:
   691                           	opt stack 0
   692                           
   693                           ; 1 bytes @ 0xE
   694  000134                     	ds	1
   695  000135                     writeDigit@segs:
   696                           	opt stack 0
   697                           
   698                           ; 1 bytes @ 0xF
   699  000135                     	ds	1
   700  000136                     ??_writeDigit:
   701                           
   702                           ; 0 bytes @ 0x10
   703  000136                     	ds	1
   704  000137                     writeDigit@dig:
   705                           	opt stack 0
   706                           
   707                           ; 1 bytes @ 0x11
   708  000137                     	ds	1
   709  000138                     writeDigit@cnt:
   710                           	opt stack 0
   711                           
   712                           ; 1 bytes @ 0x12
   713  000138                     	ds	1
   714  000139                     ??_update:
   715                           
   716                           ; 0 bytes @ 0x13
   717  000139                     	ds	5
   718  00013E                     update@cnt:
   719                           	opt stack 0
   720                           
   721                           ; 1 bytes @ 0x18
   722  00013E                     	ds	1
   723  00013F                     
   724                           ; 2 bytes @ 0x19
   725  00013F                     	ds	2
   726  000141                     
   727                           ; 3 bytes @ 0x1B
   728  000141                     	ds	3
   729  000144                     main@cnt:
   730                           	opt stack 0
   731                           
   732                           ; 4 bytes @ 0x1E
   733  000144                     	ds	4
   734                           tblptru	equ	0xFF8
   735                           tblptrh	equ	0xFF7
   736                           tblptrl	equ	0xFF6
   737                           tablat	equ	0xFF5
   738                           postinc0	equ	0xFEE
   739                           wreg	equ	0xFE8
   740                           postdec1	equ	0xFE5
   741                           fsr1l	equ	0xFE1
   742                           
   743                           	psect	cstackBANK0
   744  000060                     __pcstackBANK0:
   745                           	opt stack 0
   746  000060                     ??_sprintf:
   747                           
   748                           ; 0 bytes @ 0x0
   749  000060                     	ds	6
   750  000066                     _sprintf$1313:
   751                           	opt stack 0
   752                           
   753                           ; 3 bytes @ 0x6
   754  000066                     	ds	3
   755  000069                     _sprintf$663:
   756                           	opt stack 0
   757                           
   758                           ; 4 bytes @ 0x9
   759  000069                     	ds	4
   760  00006D                     sprintf@vd:
   761                           	opt stack 0
   762                           
   763                           ; 2 bytes @ 0xD
   764  00006D                     	ds	2
   765  00006F                     sprintf@vd_665:
   766                           	opt stack 0
   767                           
   768                           ; 2 bytes @ 0xF
   769  00006F                     	ds	2
   770  000071                     sprintf@integ:
   771                           	opt stack 0
   772                           
   773                           ; 3 bytes @ 0x11
   774  000071                     	ds	3
   775  000074                     sprintf@ap:
   776                           	opt stack 0
   777                           
   778                           ; 2 bytes @ 0x14
   779  000074                     	ds	2
   780  000076                     sprintf@exp:
   781                           	opt stack 0
   782                           
   783                           ; 2 bytes @ 0x16
   784  000076                     	ds	2
   785  000078                     sprintf@flag:
   786                           	opt stack 0
   787                           
   788                           ; 2 bytes @ 0x18
   789  000078                     	ds	2
   790  00007A                     sprintf@fval:
   791                           	opt stack 0
   792                           
   793                           ; 3 bytes @ 0x1A
   794  00007A                     	ds	3
   795  00007D                     sprintf@width:
   796                           	opt stack 0
   797                           
   798                           ; 2 bytes @ 0x1D
   799  00007D                     	ds	2
   800  00007F                     sprintf@prec:
   801                           	opt stack 0
   802                           
   803                           ; 2 bytes @ 0x1F
   804  00007F                     	ds	2
   805  000081                     sprintf@c:
   806                           	opt stack 0
   807                           
   808                           ; 1 bytes @ 0x21
   809  000081                     	ds	1
   810  000082                     sprintf@_val:
   811                           	opt stack 0
   812                           
   813                           ; 4 bytes @ 0x22
   814  000082                     	ds	4
   815  000086                     ??_printRTC:
   816                           
   817                           ; 0 bytes @ 0x26
   818  000086                     	ds	1
   819  000087                     printRTC@first:
   820                           	opt stack 0
   821                           
   822                           ; 1 bytes @ 0x27
   823  000087                     	ds	1
   824  000088                     printRTC@str:
   825                           	opt stack 0
   826                           
   827                           ; 12 bytes @ 0x28
   828  000088                     	ds	12
   829  000094                     _printRTC$1309:
   830                           	opt stack 0
   831                           
   832                           ; 2 bytes @ 0x34
   833  000094                     	ds	2
   834  000096                     printRTC@cnt:
   835                           	opt stack 0
   836                           
   837                           ; 1 bytes @ 0x36
   838  000096                     	ds	1
   839  000097                     ??_isr:
   840                           
   841                           ; 0 bytes @ 0x37
   842  000097                     	ds	15
   843                           tblptru	equ	0xFF8
   844                           tblptrh	equ	0xFF7
   845                           tblptrl	equ	0xFF6
   846                           tablat	equ	0xFF5
   847                           postinc0	equ	0xFEE
   848                           wreg	equ	0xFE8
   849                           postdec1	equ	0xFE5
   850                           fsr1l	equ	0xFE1
   851                           
   852                           	psect	cstackCOMRAM
   853  000001                     __pcstackCOMRAM:
   854                           	opt stack 0
   855  000001                     ??_advMenu:
   856  000001                     ?_isdigit:
   857                           	opt stack 0
   858  000001                     ?_saveTime:
   859                           	opt stack 0
   860  000001                     ?___ftge:
   861                           	opt stack 0
   862  000001                     ?i2_wait:
   863                           	opt stack 0
   864  000001                     ?_countBits:
   865                           	opt stack 0
   866  000001                     ?i2_rotate:
   867                           	opt stack 0
   868  000001                     ?___awmod:
   869                           	opt stack 0
   870  000001                     ?___lwmod:
   871                           	opt stack 0
   872  000001                     ?___ftpack:
   873                           	opt stack 0
   874  000001                     ?___ftneg:
   875                           	opt stack 0
   876  000001                     ?_hibit:
   877                           	opt stack 0
   878  000001                     ?__tdiv_to_l_:
   879                           	opt stack 0
   880  000001                     ?__div_to_l_:
   881                           	opt stack 0
   882  000001                     ?___lldiv:
   883                           	opt stack 0
   884  000001                     isdigit@c:
   885                           	opt stack 0
   886  000001                     i2rotate@seg:
   887                           	opt stack 0
   888  000001                     ___awmod@dividend:
   889                           	opt stack 0
   890  000001                     ___lwmod@dividend:
   891                           	opt stack 0
   892  000001                     __div_to_l_@f1:
   893                           	opt stack 0
   894  000001                     ___ftpack@arg:
   895                           	opt stack 0
   896  000001                     __tdiv_to_l_@f1:
   897                           	opt stack 0
   898  000001                     ___ftge@ff1:
   899                           	opt stack 0
   900  000001                     ___ftneg@f1:
   901                           	opt stack 0
   902  000001                     countBits@num:
   903                           	opt stack 0
   904  000001                     hibit@x:
   905                           	opt stack 0
   906  000001                     ___lldiv@dividend:
   907                           	opt stack 0
   908  000001                     i2wait@count:
   909                           	opt stack 0
   910  000001                     saveTime@date:
   911                           	opt stack 0
   912                           
   913                           ; 9 bytes @ 0x0
   914  000001                     	ds	1
   915  000002                     ??_isdigit:
   916  000002                     ??i2_rotate:
   917                           
   918                           ; 0 bytes @ 0x1
   919  000002                     	ds	1
   920  000003                     _isdigit$938:
   921                           	opt stack 0
   922  000003                     ___awmod@divisor:
   923                           	opt stack 0
   924  000003                     ___lwmod@divisor:
   925                           	opt stack 0
   926                           
   927                           ; 2 bytes @ 0x2
   928  000003                     	ds	1
   929  000004                     ___ftpack@exp:
   930                           	opt stack 0
   931  000004                     __div_to_l_@f2:
   932                           	opt stack 0
   933  000004                     __tdiv_to_l_@f2:
   934                           	opt stack 0
   935  000004                     ___ftge@ff2:
   936                           	opt stack 0
   937                           
   938                           ; 3 bytes @ 0x3
   939  000004                     	ds	1
   940  000005                     ??_hibit:
   941  000005                     ??___awmod:
   942  000005                     ??___lwmod:
   943  000005                     countBits@ret:
   944                           	opt stack 0
   945  000005                     ___ftpack@sign:
   946                           	opt stack 0
   947  000005                     i2rotate@ret:
   948                           	opt stack 0
   949  000005                     ___lldiv@divisor:
   950                           	opt stack 0
   951                           
   952                           ; 4 bytes @ 0x4
   953  000005                     	ds	1
   954  000006                     ??___ftpack:
   955  000006                     i2rotate@cnt:
   956                           	opt stack 0
   957                           
   958                           ; 1 bytes @ 0x5
   959  000006                     	ds	1
   960  000007                     ??__tdiv_to_l_:
   961  000007                     ??__div_to_l_:
   962  000007                     ??___ftge:
   963  000007                     ?i2_spi:
   964                           	opt stack 0
   965  000007                     ___lwmod@counter:
   966                           	opt stack 0
   967  000007                     i2spi@addr:
   968                           	opt stack 0
   969                           
   970                           ; 1 bytes @ 0x6
   971  000007                     	ds	1
   972  000008                     ?_daysOfMonth:
   973                           	opt stack 0
   974  000008                     daysOfMonth@month:
   975                           	opt stack 0
   976  000008                     ___awmod@counter:
   977                           	opt stack 0
   978  000008                     i2spi@data:
   979                           	opt stack 0
   980  000008                     hibit@log2Val:
   981                           	opt stack 0
   982  000008                     __div_to_l_@quot:
   983                           	opt stack 0
   984                           
   985                           ; 4 bytes @ 0x7
   986  000008                     	ds	1
   987  000009                     ??___lldiv:
   988  000009                     ??i2_spi:
   989  000009                     ?___ftadd:
   990                           	opt stack 0
   991  000009                     ?___lltoft:
   992                           	opt stack 0
   993  000009                     ___awmod@sign:
   994                           	opt stack 0
   995  000009                     daysOfMonth@year:
   996                           	opt stack 0
   997  000009                     ___ftadd@f1:
   998                           	opt stack 0
   999  000009                     ___lltoft@c:
  1000                           	opt stack 0
  1001                           
  1002                           ; 4 bytes @ 0x8
  1003  000009                     	ds	1
  1004  00000A                     ??_advState:
  1005  00000A                     ??_saveTime:
  1006  00000A                     ?___awdiv:
  1007                           	opt stack 0
  1008  00000A                     ___awdiv@dividend:
  1009                           	opt stack 0
  1010                           
  1011                           ; 2 bytes @ 0x9
  1012  00000A                     	ds	1
  1013  00000B                     ??_daysOfMonth:
  1014                           
  1015                           ; 0 bytes @ 0xA
  1016  00000B                     	ds	1
  1017  00000C                     ?i2_log2:
  1018                           	opt stack 0
  1019  00000C                     saveTime@cnt:
  1020                           	opt stack 0
  1021  00000C                     __div_to_l_@cntr:
  1022                           	opt stack 0
  1023  00000C                     ___awdiv@divisor:
  1024                           	opt stack 0
  1025  00000C                     i2spi@send:
  1026                           	opt stack 0
  1027  00000C                     ___ftadd@f2:
  1028                           	opt stack 0
  1029  00000C                     __tdiv_to_l_@quot:
  1030                           	opt stack 0
  1031  00000C                     i2log2@num:
  1032                           	opt stack 0
  1033                           
  1034                           ; 4 bytes @ 0xB
  1035  00000C                     	ds	1
  1036  00000D                     ??___lltoft:
  1037  00000D                     __div_to_l_@exp1:
  1038                           	opt stack 0
  1039                           
  1040                           ; 1 bytes @ 0xC
  1041  00000D                     	ds	1
  1042  00000E                     ??___awdiv:
  1043  00000E                     i2spi@cnt:
  1044                           	opt stack 0
  1045                           
  1046                           ; 1 bytes @ 0xD
  1047  00000E                     	ds	1
  1048  00000F                     ??___ftadd:
  1049  00000F                     ___lldiv@quotient:
  1050                           	opt stack 0
  1051                           
  1052                           ; 4 bytes @ 0xE
  1053  00000F                     	ds	1
  1054  000010                     __tdiv_to_l_@cntr:
  1055                           	opt stack 0
  1056  000010                     i2log2@log2Val:
  1057                           	opt stack 0
  1058                           
  1059                           ; 4 bytes @ 0xF
  1060  000010                     	ds	1
  1061  000011                     __tdiv_to_l_@exp1:
  1062                           	opt stack 0
  1063  000011                     ___lltoft@exp:
  1064                           	opt stack 0
  1065                           
  1066                           ; 1 bytes @ 0x10
  1067  000011                     	ds	2
  1068  000013                     ___awdiv@counter:
  1069                           	opt stack 0
  1070  000013                     ___lldiv@counter:
  1071                           	opt stack 0
  1072                           
  1073                           ; 1 bytes @ 0x12
  1074  000013                     	ds	1
  1075  000014                     ?i2_writeDigit:
  1076                           	opt stack 0
  1077  000014                     ?___llmod:
  1078                           	opt stack 0
  1079  000014                     ___awdiv@sign:
  1080                           	opt stack 0
  1081  000014                     ___ftadd@sign:
  1082                           	opt stack 0
  1083  000014                     i2writeDigit@digit:
  1084                           	opt stack 0
  1085  000014                     ___llmod@dividend:
  1086                           	opt stack 0
  1087                           
  1088                           ; 4 bytes @ 0x13
  1089  000014                     	ds	1
  1090  000015                     ___ftadd@exp2:
  1091                           	opt stack 0
  1092  000015                     i2writeDigit@segs:
  1093                           	opt stack 0
  1094  000015                     ___awdiv@quotient:
  1095                           	opt stack 0
  1096                           
  1097                           ; 2 bytes @ 0x14
  1098  000015                     	ds	1
  1099  000016                     ??i2_writeDigit:
  1100  000016                     ___ftadd@exp1:
  1101                           	opt stack 0
  1102                           
  1103                           ; 1 bytes @ 0x15
  1104  000016                     	ds	1
  1105  000017                     ?___wmul:
  1106                           	opt stack 0
  1107  000017                     ?___ftsub:
  1108                           	opt stack 0
  1109  000017                     i2writeDigit@dig:
  1110                           	opt stack 0
  1111  000017                     ___wmul@multiplier:
  1112                           	opt stack 0
  1113  000017                     ___ftsub@f1:
  1114                           	opt stack 0
  1115                           
  1116                           ; 3 bytes @ 0x16
  1117  000017                     	ds	1
  1118  000018                     i2writeDigit@cnt:
  1119                           	opt stack 0
  1120  000018                     ___llmod@divisor:
  1121                           	opt stack 0
  1122                           
  1123                           ; 4 bytes @ 0x17
  1124  000018                     	ds	1
  1125  000019                     ??i2_update:
  1126  000019                     ___wmul@multiplicand:
  1127                           	opt stack 0
  1128                           
  1129                           ; 2 bytes @ 0x18
  1130  000019                     	ds	1
  1131  00001A                     ___ftsub@f2:
  1132                           	opt stack 0
  1133                           
  1134                           ; 3 bytes @ 0x19
  1135  00001A                     	ds	1
  1136  00001B                     
  1137                           ; 0 bytes @ 0x1A
  1138  00001B                     	ds	1
  1139  00001C                     ??___llmod:
  1140                           
  1141                           ; 0 bytes @ 0x1B
  1142  00001C                     	ds	1
  1143  00001D                     ?___asftsub:
  1144                           	opt stack 0
  1145  00001D                     ___asftsub@f1p:
  1146                           	opt stack 0
  1147  00001D                     ___wmul@product:
  1148                           	opt stack 0
  1149                           
  1150                           ; 2 bytes @ 0x1C
  1151  00001D                     	ds	1
  1152  00001E                     ___llmod@counter:
  1153                           	opt stack 0
  1154  00001E                     i2update@cnt:
  1155                           	opt stack 0
  1156                           
  1157                           ; 1 bytes @ 0x1D
  1158  00001E                     	ds	1
  1159  00001F                     ??_buttons:
  1160  00001F                     ?_dayOfWeek:
  1161                           	opt stack 0
  1162  00001F                     ?_getFontChar:
  1163                           	opt stack 0
  1164  00001F                     ?___fttol:
  1165                           	opt stack 0
  1166  00001F                     getFontChar@ch:
  1167                           	opt stack 0
  1168  00001F                     dayOfWeek@year:
  1169                           	opt stack 0
  1170  00001F                     ___asftsub@f2:
  1171                           	opt stack 0
  1172  00001F                     ___fttol@f1:
  1173                           	opt stack 0
  1174                           
  1175                           ; 3 bytes @ 0x1E
  1176  00001F                     	ds	1
  1177  000020                     ??_getFontChar:
  1178  000020                     dayOfWeek@month:
  1179                           	opt stack 0
  1180                           
  1181                           ; 1 bytes @ 0x1F
  1182  000020                     	ds	1
  1183  000021                     dayOfWeek@day:
  1184                           	opt stack 0
  1185                           
  1186                           ; 1 bytes @ 0x20
  1187  000021                     	ds	1
  1188  000022                     ??_dayOfWeek:
  1189  000022                     ?_writeChar:
  1190                           	opt stack 0
  1191  000022                     writeChar@digit:
  1192                           	opt stack 0
  1193                           
  1194                           ; 1 bytes @ 0x21
  1195  000022                     	ds	1
  1196  000023                     ??___fttol:
  1197  000023                     writeChar@ch:
  1198                           	opt stack 0
  1199                           
  1200                           ; 1 bytes @ 0x22
  1201  000023                     	ds	1
  1202  000024                     writeChar@dig:
  1203                           	opt stack 0
  1204                           
  1205                           ; 1 bytes @ 0x23
  1206  000024                     	ds	1
  1207  000025                     ?_writeString:
  1208                           	opt stack 0
  1209  000025                     writeString@digits:
  1210                           	opt stack 0
  1211                           
  1212                           ; 1 bytes @ 0x24
  1213  000025                     	ds	1
  1214  000026                     writeString@string:
  1215                           	opt stack 0
  1216                           
  1217                           ; 2 bytes @ 0x25
  1218  000026                     	ds	2
  1219  000028                     ??_writeString:
  1220  000028                     ___fttol@sign1:
  1221                           	opt stack 0
  1222                           
  1223                           ; 1 bytes @ 0x27
  1224  000028                     	ds	1
  1225  000029                     ___fttol@lval:
  1226                           	opt stack 0
  1227                           
  1228                           ; 4 bytes @ 0x28
  1229  000029                     	ds	1
  1230  00002A                     dayOfWeek@tmp:
  1231                           	opt stack 0
  1232                           
  1233                           ; 4 bytes @ 0x29
  1234  00002A                     	ds	1
  1235  00002B                     writeString@bits:
  1236                           	opt stack 0
  1237                           
  1238                           ; 1 bytes @ 0x2A
  1239  00002B                     	ds	1
  1240  00002C                     writeString@cnt:
  1241                           	opt stack 0
  1242                           
  1243                           ; 1 bytes @ 0x2B
  1244  00002C                     	ds	1
  1245  00002D                     writeString@i:
  1246                           	opt stack 0
  1247  00002D                     ___fttol@exp1:
  1248                           	opt stack 0
  1249                           
  1250                           ; 1 bytes @ 0x2C
  1251  00002D                     	ds	1
  1252  00002E                     ??_checkDST:
  1253  00002E                     ?___ftmul:
  1254                           	opt stack 0
  1255  00002E                     ___ftmul@f1:
  1256                           	opt stack 0
  1257                           
  1258                           ; 3 bytes @ 0x2D
  1259  00002E                     	ds	3
  1260  000031                     ___ftmul@f2:
  1261                           	opt stack 0
  1262                           
  1263                           ; 3 bytes @ 0x30
  1264  000031                     	ds	3
  1265  000034                     ??___ftmul:
  1266                           
  1267                           ; 0 bytes @ 0x33
  1268  000034                     	ds	2
  1269  000036                     _checkDST$299:
  1270                           	opt stack 0
  1271                           
  1272                           ; 1 bytes @ 0x35
  1273  000036                     	ds	1
  1274  000037                     ?_tick:
  1275                           	opt stack 0
  1276  000037                     tick@val:
  1277                           	opt stack 0
  1278                           
  1279                           ; 1 bytes @ 0x36
  1280  000037                     	ds	1
  1281  000038                     ??_tick:
  1282                           
  1283                           ; 0 bytes @ 0x37
  1284  000038                     	ds	1
  1285  000039                     ___ftmul@exp:
  1286                           	opt stack 0
  1287                           
  1288                           ; 1 bytes @ 0x38
  1289  000039                     	ds	1
  1290  00003A                     ___ftmul@f3_as_product:
  1291                           	opt stack 0
  1292                           
  1293                           ; 3 bytes @ 0x39
  1294  00003A                     	ds	3
  1295  00003D                     ___ftmul@cntr:
  1296                           	opt stack 0
  1297                           
  1298                           ; 1 bytes @ 0x3C
  1299  00003D                     	ds	1
  1300  00003E                     ___ftmul@sign:
  1301                           	opt stack 0
  1302                           
  1303                           ; 1 bytes @ 0x3D
  1304  00003E                     	ds	1
  1305  00003F                     ?_fround:
  1306                           	opt stack 0
  1307  00003F                     ?_scale:
  1308                           	opt stack 0
  1309  00003F                     ?___asftmul:
  1310                           	opt stack 0
  1311  00003F                     fround@prec:
  1312                           	opt stack 0
  1313  00003F                     scale@scl:
  1314                           	opt stack 0
  1315  00003F                     ___asftmul@f1p:
  1316                           	opt stack 0
  1317                           
  1318                           ; 2 bytes @ 0x3E
  1319  00003F                     	ds	2
  1320  000041                     ___asftmul@f2:
  1321                           	opt stack 0
  1322                           
  1323                           ; 3 bytes @ 0x40
  1324  000041                     	ds	1
  1325  000042                     ??_fround:
  1326  000042                     ??_scale:
  1327                           
  1328                           ; 0 bytes @ 0x41
  1329  000042                     	ds	2
  1330  000044                     
  1331                           ; 0 bytes @ 0x43
  1332  000044                     	ds	4
  1333  000048                     _fround$1311:
  1334                           	opt stack 0
  1335  000048                     _scale$1312:
  1336                           	opt stack 0
  1337                           
  1338                           ; 3 bytes @ 0x47
  1339  000048                     	ds	3
  1340  00004B                     _fround$1310:
  1341                           	opt stack 0
  1342                           
  1343                           ; 3 bytes @ 0x4A
  1344  00004B                     	ds	3
  1345  00004E                     ?___asftadd:
  1346                           	opt stack 0
  1347  00004E                     ___asftadd@f1p:
  1348                           	opt stack 0
  1349                           
  1350                           ; 2 bytes @ 0x4D
  1351  00004E                     	ds	2
  1352  000050                     ___asftadd@f2:
  1353                           	opt stack 0
  1354                           
  1355                           ; 3 bytes @ 0x4F
  1356  000050                     	ds	3
  1357  000053                     ?_sprintf:
  1358                           	opt stack 0
  1359  000053                     sprintf@sp:
  1360                           	opt stack 0
  1361                           
  1362                           ; 2 bytes @ 0x52
  1363  000053                     	ds	2
  1364  000055                     sprintf@f:
  1365                           	opt stack 0
  1366                           
  1367                           ; 2 bytes @ 0x54
  1368  000055                     	ds	10
  1369  00005F                     ?_printRTC:
  1370                           	opt stack 0
  1371  00005F                     printRTC@digits:
  1372                           	opt stack 0
  1373                           
  1374                           ; 1 bytes @ 0x5E
  1375  00005F                     	ds	1
  1376                           tblptru	equ	0xFF8
  1377                           tblptrh	equ	0xFF7
  1378                           tblptrl	equ	0xFF6
  1379                           tablat	equ	0xFF5
  1380                           postinc0	equ	0xFEE
  1381                           wreg	equ	0xFE8
  1382                           postdec1	equ	0xFE5
  1383                           fsr1l	equ	0xFE1
  1384                           
  1385 ;;
  1386 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1387 ;;
  1388 ;; *************** function _main *****************
  1389 ;; Defined at:
  1390 ;;		line 43 in file "temp-clock_main.c"
  1391 ;; Parameters:    Size  Location     Type
  1392 ;;  argc            2   25[BANK1 ] int 
  1393 ;;  argv            3   27[BANK1 ] PTR PTR unsigned char 
  1394 ;; Auto vars:     Size  Location     Type
  1395 ;;  cnt             4   30[BANK1 ] unsigned long 
  1396 ;; Return value:  Size  Location     Type
  1397 ;;                  2   25[BANK1 ] int 
  1398 ;; Registers used:
  1399 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  1400 ;; Tracked objects:
  1401 ;;		On entry : 0/0
  1402 ;;		On exit  : 0/0
  1403 ;;		Unchanged: 0/0
  1404 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1405 ;;      Params:         0       0       5       0       0       0       0       0       0
  1406 ;;      Locals:         0       0       4       0       0       0       0       0       0
  1407 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1408 ;;      Totals:         0       0       9       0       0       0       0       0       0
  1409 ;;Total ram usage:        9 bytes
  1410 ;; Hardware stack levels required when called:   11
  1411 ;; This function calls:
  1412 ;;		_update
  1413 ;;		_setup
  1414 ;; This function is called by:
  1415 ;;		Startup code after reset
  1416 ;; This function uses a non-reentrant model
  1417 ;;
  1418                           
  1419                           	psect	text0
  1420  00438A                     __ptext0:
  1421                           	opt stack 0
  1422  00438A                     _main:
  1423                           	opt stack 20
  1424                           
  1425                           ;temp-clock_main.c: 44: setup();
  1426                           
  1427                           ;incstack = 0
  1428                           ;incstack = 0
  1429  00438A  EC94  F01D         	call	_setup	;wreg free
  1430                           
  1431                           ;temp-clock_main.c: 45: uint32_t cnt = 0;
  1432  00438E  0E00               	movlw	0
  1433  004390  0101               	movlb	1	; () banked
  1434  004392  0101               	movlb	1	; () banked
  1435  004394  6F44               	movwf	main@cnt& (0+255),b
  1436  004396  0E00               	movlw	0
  1437  004398  0101               	movlb	1	; () banked
  1438  00439A  6F45               	movwf	(main@cnt+1)& (0+255),b
  1439  00439C  0E00               	movlw	0
  1440  00439E  0101               	movlb	1	; () banked
  1441  0043A0  6F46               	movwf	(main@cnt+2)& (0+255),b
  1442  0043A2  0E00               	movlw	0
  1443  0043A4  0101               	movlb	1	; () banked
  1444  0043A6  6F47               	movwf	(main@cnt+3)& (0+255),b
  1445  0043A8                     l8679:
  1446                           
  1447                           ; BSR set to: 1
  1448                           ;temp-clock_main.c: 47: {
  1449                           ;temp-clock_main.c: 48: if (cnt > 20L)
  1450  0043A8  0E15               	movlw	21
  1451  0043AA  0101               	movlb	1	; () banked
  1452  0043AC  0101               	movlb	1	; () banked
  1453  0043AE  5D44               	subwf	main@cnt& (0+255),w,b
  1454  0043B0  0E00               	movlw	0
  1455  0043B2  0101               	movlb	1	; () banked
  1456  0043B4  5945               	subwfb	(main@cnt+1)& (0+255),w,b
  1457  0043B6  0E00               	movlw	0
  1458  0043B8  0101               	movlb	1	; () banked
  1459  0043BA  5946               	subwfb	(main@cnt+2)& (0+255),w,b
  1460  0043BC  0E00               	movlw	0
  1461  0043BE  0101               	movlb	1	; () banked
  1462  0043C0  0101               	movlb	1	; () banked
  1463  0043C2  5947               	subwfb	(main@cnt+3)& (0+255),w,b
  1464  0043C4  A0D8               	btfss	status,0,c
  1465  0043C6  D00F               	goto	l8685
  1466                           
  1467                           ; BSR set to: 1
  1468                           ;temp-clock_main.c: 49: {
  1469                           ;temp-clock_main.c: 50: cnt = 0;
  1470  0043C8  0E00               	movlw	0
  1471  0043CA  0101               	movlb	1	; () banked
  1472  0043CC  0101               	movlb	1	; () banked
  1473  0043CE  6F44               	movwf	main@cnt& (0+255),b
  1474  0043D0  0E00               	movlw	0
  1475  0043D2  0101               	movlb	1	; () banked
  1476  0043D4  6F45               	movwf	(main@cnt+1)& (0+255),b
  1477  0043D6  0E00               	movlw	0
  1478  0043D8  0101               	movlb	1	; () banked
  1479  0043DA  6F46               	movwf	(main@cnt+2)& (0+255),b
  1480  0043DC  0E00               	movlw	0
  1481  0043DE  0101               	movlb	1	; () banked
  1482  0043E0  6F47               	movwf	(main@cnt+3)& (0+255),b
  1483                           
  1484                           ; BSR set to: 1
  1485                           ;temp-clock_main.c: 53: update();
  1486  0043E2  EC0D  F00B         	call	_update	;wreg free
  1487  0043E6                     l8685:
  1488                           
  1489                           ;temp-clock_main.c: 55: }
  1490                           ;temp-clock_main.c: 56: cnt++;
  1491  0043E6  0E01               	movlw	1
  1492  0043E8  0101               	movlb	1	; () banked
  1493  0043EA  0101               	movlb	1	; () banked
  1494  0043EC  2744               	addwf	main@cnt& (0+255),f,b
  1495  0043EE  0E00               	movlw	0
  1496  0043F0  0101               	movlb	1	; () banked
  1497  0043F2  2345               	addwfc	(main@cnt+1)& (0+255),f,b
  1498  0043F4  0E00               	movlw	0
  1499  0043F6  0101               	movlb	1	; () banked
  1500  0043F8  2346               	addwfc	(main@cnt+2)& (0+255),f,b
  1501  0043FA  0E00               	movlw	0
  1502  0043FC  0101               	movlb	1	; () banked
  1503  0043FE  2347               	addwfc	(main@cnt+3)& (0+255),f,b
  1504  004400  D7D3               	goto	l8679
  1505  004402                     __end_of_main:
  1506                           	opt stack 0
  1507                           tblptru	equ	0xFF8
  1508                           tblptrh	equ	0xFF7
  1509                           tblptrl	equ	0xFF6
  1510                           tablat	equ	0xFF5
  1511                           postinc0	equ	0xFEE
  1512                           wreg	equ	0xFE8
  1513                           postdec1	equ	0xFE5
  1514                           fsr1l	equ	0xFE1
  1515                           status	equ	0xFD8
  1516                           
  1517 ;; *************** function _setup *****************
  1518 ;; Defined at:
  1519 ;;		line 63 in file "temp-clock_main.c"
  1520 ;; Parameters:    Size  Location     Type
  1521 ;;		None
  1522 ;; Auto vars:     Size  Location     Type
  1523 ;;		None
  1524 ;; Return value:  Size  Location     Type
  1525 ;;		None               void
  1526 ;; Registers used:
  1527 ;;		wreg, status,2, status,0, cstack
  1528 ;; Tracked objects:
  1529 ;;		On entry : 0/0
  1530 ;;		On exit  : 0/0
  1531 ;;		Unchanged: 0/0
  1532 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1533 ;;      Params:         0       0       0       0       0       0       0       0       0
  1534 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1535 ;;      Temps:          0       0       4       0       0       0       0       0       0
  1536 ;;      Totals:         0       0       4       0       0       0       0       0       0
  1537 ;;Total ram usage:        4 bytes
  1538 ;; Hardware stack levels used:    1
  1539 ;; Hardware stack levels required when called:    9
  1540 ;; This function calls:
  1541 ;;		_startDisp
  1542 ;;		_initRTC
  1543 ;;		_setupButtons
  1544 ;; This function is called by:
  1545 ;;		_main
  1546 ;; This function uses a non-reentrant model
  1547 ;;
  1548                           
  1549                           	psect	text1
  1550  003B28                     __ptext1:
  1551                           	opt stack 0
  1552  003B28                     _setup:
  1553                           	opt stack 21
  1554                           
  1555                           ;temp-clock_main.c: 65: TRISA = 0;
  1556                           
  1557                           ; BSR set to: 1
  1558                           ;incstack = 0
  1559                           ;incstack = 0
  1560  003B28  0E00               	movlw	0
  1561  003B2A  6E92               	movwf	3986,c	;volatile
  1562                           
  1563                           ;temp-clock_main.c: 66: TRISB = 0;
  1564  003B2C  0E00               	movlw	0
  1565  003B2E  6E93               	movwf	3987,c	;volatile
  1566                           
  1567                           ;temp-clock_main.c: 67: TRISC = 0;
  1568  003B30  0E00               	movlw	0
  1569  003B32  6E94               	movwf	3988,c	;volatile
  1570                           
  1571                           ;temp-clock_main.c: 68: LATA = 0;
  1572  003B34  0E00               	movlw	0
  1573  003B36  6E89               	movwf	3977,c	;volatile
  1574                           
  1575                           ;temp-clock_main.c: 69: LATB = 0;
  1576  003B38  0E00               	movlw	0
  1577  003B3A  6E8A               	movwf	3978,c	;volatile
  1578                           
  1579                           ;temp-clock_main.c: 71: LATC = (RCON & 0b1)>> 0 | (RCON & 0b10) >> 0 | (RCON & 0b100) >>
      +                           0 | (RCON & 0b1000) >> 2 | (RCON & 0b100000) >> 2;
  1580  003B3C  CFD0 F133          	movff	4048,??_setup	;volatile
  1581  003B40  0101               	movlb	1	; () banked
  1582  003B42  90D8               	bcf	status,0,c
  1583  003B44  3333               	rrcf	??_setup& (0+255),f,b
  1584  003B46  0101               	movlb	1	; () banked
  1585  003B48  90D8               	bcf	status,0,c
  1586  003B4A  3333               	rrcf	??_setup& (0+255),f,b
  1587  003B4C  0E08               	movlw	8
  1588  003B4E  0101               	movlb	1	; () banked
  1589  003B50  1733               	andwf	??_setup& (0+255),f,b
  1590  003B52  CFD0 F134          	movff	4048,??_setup+1	;volatile
  1591  003B56  0101               	movlb	1	; () banked
  1592  003B58  90D8               	bcf	status,0,c
  1593  003B5A  3334               	rrcf	(??_setup+1)& (0+255),f,b
  1594  003B5C  0101               	movlb	1	; () banked
  1595  003B5E  90D8               	bcf	status,0,c
  1596  003B60  3334               	rrcf	(??_setup+1)& (0+255),f,b
  1597  003B62  0E02               	movlw	2
  1598  003B64  0101               	movlb	1	; () banked
  1599  003B66  1734               	andwf	(??_setup+1)& (0+255),f,b
  1600  003B68  CFD0 F135          	movff	4048,??_setup+2	;volatile
  1601  003B6C  0E04               	movlw	4
  1602  003B6E  0101               	movlb	1	; () banked
  1603  003B70  1735               	andwf	(??_setup+2)& (0+255),f,b
  1604  003B72  CFD0 F136          	movff	4048,??_setup+3	;volatile
  1605  003B76  0E02               	movlw	2
  1606  003B78  0101               	movlb	1	; () banked
  1607  003B7A  1736               	andwf	(??_setup+3)& (0+255),f,b
  1608  003B7C  50D0               	movf	4048,w,c	;volatile
  1609  003B7E  0B01               	andlw	1
  1610  003B80  0101               	movlb	1	; () banked
  1611  003B82  1136               	iorwf	(??_setup+3)& (0+255),w,b
  1612  003B84  0101               	movlb	1	; () banked
  1613  003B86  1135               	iorwf	(??_setup+2)& (0+255),w,b
  1614  003B88  0101               	movlb	1	; () banked
  1615  003B8A  1134               	iorwf	(??_setup+1)& (0+255),w,b
  1616  003B8C  0101               	movlb	1	; () banked
  1617  003B8E  1133               	iorwf	??_setup& (0+255),w,b
  1618  003B90  6E8B               	movwf	3979,c	;volatile
  1619                           
  1620                           ; BSR set to: 1
  1621                           ;temp-clock_main.c: 73: LATA5 = 1;
  1622  003B92  8A89               	bsf	3977,5,c	;volatile
  1623                           
  1624                           ; BSR set to: 1
  1625                           ;temp-clock_main.c: 78: GIE = 1;
  1626  003B94  8EF2               	bsf	intcon,7,c	;volatile
  1627                           
  1628                           ; BSR set to: 1
  1629                           ;temp-clock_main.c: 79: PEIE = 1;
  1630  003B96  8CF2               	bsf	intcon,6,c	;volatile
  1631                           
  1632                           ; BSR set to: 1
  1633                           ;temp-clock_main.c: 80: IPEN = 0;
  1634  003B98  9ED0               	bcf	4048,7,c	;volatile
  1635                           
  1636                           ; BSR set to: 1
  1637                           ;temp-clock_main.c: 82: startDisp();
  1638  003B9A  ECB1  F01E         	call	_startDisp	;wreg free
  1639                           
  1640                           ;temp-clock_main.c: 83: LATC0 = 1;
  1641  003B9E  808B               	bsf	3979,0,c	;volatile
  1642                           
  1643                           ;temp-clock_main.c: 85: initRTC();
  1644  003BA0  EC88  F021         	call	_initRTC	;wreg free
  1645                           
  1646                           ;temp-clock_main.c: 87: LATC0 = 0;
  1647  003BA4  908B               	bcf	3979,0,c	;volatile
  1648                           
  1649                           ;temp-clock_main.c: 91: setupButtons();
  1650  003BA6  EC29  F025         	call	_setupButtons	;wreg free
  1651                           
  1652                           ;temp-clock_main.c: 96: menu = &rtcMenu;
  1653  003BAA  0101               	movlb	1	; () banked
  1654  003BAC  0E01               	movlw	high _rtcMenu
  1655  003BAE  0100               	movlb	0	; () banked
  1656  003BB0  0100               	movlb	0	; () banked
  1657  003BB2  6FD8               	movwf	(_menu+1)& (0+255),b
  1658  003BB4  0101               	movlb	1	; () banked
  1659  003BB6  0E51               	movlw	low _rtcMenu
  1660  003BB8  0100               	movlb	0	; () banked
  1661  003BBA  6FD7               	movwf	_menu& (0+255),b
  1662                           
  1663                           ; BSR set to: 0
  1664                           ;temp-clock_main.c: 100: LATA5 = 0;
  1665  003BBC  9A89               	bcf	3977,5,c	;volatile
  1666                           
  1667                           ; BSR set to: 0
  1668                           ;temp-clock_main.c: 103: tmr0BigCounts = 0;
  1669  003BBE  0E00               	movlw	0
  1670  003BC0  0100               	movlb	0	; () banked
  1671  003BC2  0100               	movlb	0	; () banked
  1672  003BC4  6FCF               	movwf	_tmr0BigCounts& (0+255),b
  1673  003BC6  0E00               	movlw	0
  1674  003BC8  0100               	movlb	0	; () banked
  1675  003BCA  6FD0               	movwf	(_tmr0BigCounts+1)& (0+255),b
  1676  003BCC  0E00               	movlw	0
  1677  003BCE  0100               	movlb	0	; () banked
  1678  003BD0  6FD1               	movwf	(_tmr0BigCounts+2)& (0+255),b
  1679  003BD2  0E00               	movlw	0
  1680  003BD4  0100               	movlb	0	; () banked
  1681  003BD6  6FD2               	movwf	(_tmr0BigCounts+3)& (0+255),b
  1682                           
  1683                           ; BSR set to: 0
  1684                           ;temp-clock_main.c: 104: T0CON = (0b00001000);
  1685  003BD8  0E08               	movlw	8
  1686  003BDA  6ED5               	movwf	4053,c	;volatile
  1687                           
  1688                           ; BSR set to: 0
  1689                           ;temp-clock_main.c: 105: TMR0 = (65536-32767);
  1690  003BDC  0E80               	movlw	128
  1691  003BDE  6ED7               	movwf	4055,c	;volatile
  1692  003BE0  0E01               	movlw	1
  1693  003BE2  6ED6               	movwf	4054,c	;volatile
  1694                           
  1695                           ; BSR set to: 0
  1696                           ;temp-clock_main.c: 106: TMR0IF = CLEAR;
  1697  003BE4  94F2               	bcf	intcon,2,c	;volatile
  1698                           
  1699                           ; BSR set to: 0
  1700                           ;temp-clock_main.c: 107: TMR0IE = 1;
  1701  003BE6  8AF2               	bsf	intcon,5,c	;volatile
  1702                           
  1703                           ; BSR set to: 0
  1704                           ;temp-clock_main.c: 108: TMR0ON = 1;
  1705  003BE8  8ED5               	bsf	4053,7,c	;volatile
  1706                           
  1707                           ; BSR set to: 0
  1708                           ;temp-clock_main.c: 112: T1CON = 0b10110000;
  1709  003BEA  0EB0               	movlw	176
  1710  003BEC  6ECD               	movwf	4045,c	;volatile
  1711                           
  1712                           ; BSR set to: 0
  1713                           ;temp-clock_main.c: 113: TMR1 = (65536-16960);
  1714  003BEE  0EBD               	movlw	189
  1715  003BF0  6ECF               	movwf	4047,c	;volatile
  1716  003BF2  0EC0               	movlw	192
  1717  003BF4  6ECE               	movwf	4046,c	;volatile
  1718                           
  1719                           ; BSR set to: 0
  1720                           ;temp-clock_main.c: 114: TMR1IF = CLEAR;
  1721  003BF6  909E               	bcf	3998,0,c	;volatile
  1722                           
  1723                           ; BSR set to: 0
  1724                           ;temp-clock_main.c: 115: TMR1IE = 1;
  1725  003BF8  809D               	bsf	3997,0,c	;volatile
  1726                           
  1727                           ; BSR set to: 0
  1728                           ;temp-clock_main.c: 116: TMR1ON = 1;
  1729  003BFA  80CD               	bsf	4045,0,c	;volatile
  1730                           
  1731                           ; BSR set to: 0
  1732  003BFC  0012               	return	
  1733  003BFE                     __end_of_setup:
  1734                           	opt stack 0
  1735                           tblptru	equ	0xFF8
  1736                           tblptrh	equ	0xFF7
  1737                           tblptrl	equ	0xFF6
  1738                           tablat	equ	0xFF5
  1739                           intcon	equ	0xFF2
  1740                           postinc0	equ	0xFEE
  1741                           wreg	equ	0xFE8
  1742                           postdec1	equ	0xFE5
  1743                           fsr1l	equ	0xFE1
  1744                           status	equ	0xFD8
  1745                           
  1746 ;; *************** function _setupButtons *****************
  1747 ;; Defined at:
  1748 ;;		line 13 in file "buttons.c"
  1749 ;; Parameters:    Size  Location     Type
  1750 ;;		None
  1751 ;; Auto vars:     Size  Location     Type
  1752 ;;		None
  1753 ;; Return value:  Size  Location     Type
  1754 ;;		None               void
  1755 ;; Registers used:
  1756 ;;		wreg, status,2
  1757 ;; Tracked objects:
  1758 ;;		On entry : 0/0
  1759 ;;		On exit  : 0/0
  1760 ;;		Unchanged: 0/0
  1761 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1762 ;;      Params:         0       0       0       0       0       0       0       0       0
  1763 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1764 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1765 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1766 ;;Total ram usage:        0 bytes
  1767 ;; Hardware stack levels used:    1
  1768 ;; Hardware stack levels required when called:    7
  1769 ;; This function calls:
  1770 ;;		Nothing
  1771 ;; This function is called by:
  1772 ;;		_setup
  1773 ;; This function uses a non-reentrant model
  1774 ;;
  1775                           
  1776                           	psect	text2
  1777  004A52                     __ptext2:
  1778                           	opt stack 0
  1779  004A52                     _setupButtons:
  1780                           	opt stack 22
  1781                           
  1782                           ;buttons.c: 14: LATC = 0;
  1783                           
  1784                           ; BSR set to: 0
  1785                           ;incstack = 0
  1786                           ;incstack = 0
  1787  004A52  0E00               	movlw	0
  1788  004A54  6E8B               	movwf	3979,c	;volatile
  1789                           
  1790                           ;buttons.c: 15: LATB = 0;
  1791  004A56  0E00               	movlw	0
  1792  004A58  6E8A               	movwf	3978,c	;volatile
  1793                           
  1794                           ;buttons.c: 18: TRISB = 0b11111111;
  1795  004A5A  6893               	setf	3987,c	;volatile
  1796                           
  1797                           ;buttons.c: 20: nRBPU = !0;
  1798  004A5C  8EF1               	bsf	intcon2,7,c	;volatile
  1799  004A5E  0012               	return	
  1800  004A60                     __end_of_setupButtons:
  1801                           	opt stack 0
  1802                           tblptru	equ	0xFF8
  1803                           tblptrh	equ	0xFF7
  1804                           tblptrl	equ	0xFF6
  1805                           tablat	equ	0xFF5
  1806                           intcon	equ	0xFF2
  1807                           intcon2	equ	0xFF1
  1808                           postinc0	equ	0xFEE
  1809                           wreg	equ	0xFE8
  1810                           postdec1	equ	0xFE5
  1811                           fsr1l	equ	0xFE1
  1812                           status	equ	0xFD8
  1813                           
  1814 ;; *************** function _initRTC *****************
  1815 ;; Defined at:
  1816 ;;		line 9 in file "RTC.c"
  1817 ;; Parameters:    Size  Location     Type
  1818 ;;		None
  1819 ;; Auto vars:     Size  Location     Type
  1820 ;;		None
  1821 ;; Return value:  Size  Location     Type
  1822 ;;		None               void
  1823 ;; Registers used:
  1824 ;;		wreg, status,2, status,0, cstack
  1825 ;; Tracked objects:
  1826 ;;		On entry : 0/0
  1827 ;;		On exit  : 0/0
  1828 ;;		Unchanged: 0/0
  1829 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1830 ;;      Params:         0       0       0       0       0       0       0       0       0
  1831 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1832 ;;      Temps:          0       0       1       0       0       0       0       0       0
  1833 ;;      Totals:         0       0       1       0       0       0       0       0       0
  1834 ;;Total ram usage:        1 bytes
  1835 ;; Hardware stack levels used:    1
  1836 ;; Hardware stack levels required when called:    8
  1837 ;; This function calls:
  1838 ;;		_loadTime
  1839 ;; This function is called by:
  1840 ;;		_setup
  1841 ;; This function uses a non-reentrant model
  1842 ;;
  1843                           
  1844                           	psect	text3
  1845  004310                     __ptext3:
  1846                           	opt stack 0
  1847  004310                     _initRTC:
  1848                           	opt stack 21
  1849                           
  1850                           ;RTC.c: 10: rtcMenu.state = hhmmss;
  1851                           
  1852                           ;incstack = 0
  1853                           ;incstack = 0
  1854  004310  0101               	movlb	1	; () banked
  1855  004312  6F32               	movwf	??_initRTC& (0+255),b
  1856  004314  0E01               	movlw	1
  1857  004316  0101               	movlb	1	; () banked
  1858  004318  0101               	movlb	1	; () banked
  1859  00431A  6F51               	movwf	_rtcMenu& (0+255),b
  1860  00431C  0101               	movlb	1	; () banked
  1861  00431E  5132               	movf	??_initRTC& (0+255),w,b
  1862                           
  1863                           ;RTC.c: 11: rtcMenu.digits = 0b01111111;
  1864  004320  0101               	movlb	1	; () banked
  1865  004322  6F32               	movwf	??_initRTC& (0+255),b
  1866  004324  0E7F               	movlw	127
  1867  004326  0101               	movlb	1	; () banked
  1868  004328  0101               	movlb	1	; () banked
  1869  00432A  6F52               	movwf	(_rtcMenu+1)& (0+255),b
  1870  00432C  0101               	movlb	1	; () banked
  1871  00432E  5132               	movf	??_initRTC& (0+255),w,b
  1872                           
  1873                           ;RTC.c: 12: rtcMenu.num_states = 10;
  1874  004330  0101               	movlb	1	; () banked
  1875  004332  6F32               	movwf	??_initRTC& (0+255),b
  1876  004334  0E0A               	movlw	10
  1877  004336  0101               	movlb	1	; () banked
  1878  004338  0101               	movlb	1	; () banked
  1879  00433A  6F53               	movwf	(_rtcMenu+2)& (0+255),b
  1880  00433C  0101               	movlb	1	; () banked
  1881  00433E  5132               	movf	??_initRTC& (0+255),w,b
  1882                           
  1883                           ; BSR set to: 1
  1884                           ;RTC.c: 13: rtcMenu.printFn = &printRTC;
  1885  004340  0E1B               	movlw	high _printRTC
  1886  004342  0101               	movlb	1	; () banked
  1887  004344  0101               	movlb	1	; () banked
  1888  004346  6F55               	movwf	(_rtcMenu+4)& (0+255),b
  1889  004348  0E32               	movlw	low _printRTC
  1890  00434A  0101               	movlb	1	; () banked
  1891  00434C  6F54               	movwf	(_rtcMenu+3)& (0+255),b
  1892                           
  1893                           ; BSR set to: 1
  1894                           ;RTC.c: 15: date.month = 1;
  1895  00434E  0101               	movlb	1	; () banked
  1896  004350  6F32               	movwf	??_initRTC& (0+255),b
  1897  004352  0E01               	movlw	1
  1898  004354  0100               	movlb	0	; () banked
  1899  004356  0100               	movlb	0	; () banked
  1900  004358  6FCB               	movwf	(_date+5)& (0+255),b
  1901  00435A  0101               	movlb	1	; () banked
  1902  00435C  5132               	movf	??_initRTC& (0+255),w,b
  1903                           
  1904                           ; BSR set to: 1
  1905                           ;RTC.c: 16: date.day = 1;
  1906  00435E  0101               	movlb	1	; () banked
  1907  004360  6F32               	movwf	??_initRTC& (0+255),b
  1908  004362  0E01               	movlw	1
  1909  004364  0100               	movlb	0	; () banked
  1910  004366  0100               	movlb	0	; () banked
  1911  004368  6FC9               	movwf	(_date+3)& (0+255),b
  1912  00436A  0101               	movlb	1	; () banked
  1913  00436C  5132               	movf	??_initRTC& (0+255),w,b
  1914                           
  1915                           ; BSR set to: 1
  1916                           ;RTC.c: 17: date.year = 2013;
  1917  00436E  0E07               	movlw	7
  1918  004370  0100               	movlb	0	; () banked
  1919  004372  0100               	movlb	0	; () banked
  1920  004374  6FCD               	movwf	(_date+7)& (0+255),b
  1921  004376  0EDD               	movlw	221
  1922  004378  0100               	movlb	0	; () banked
  1923  00437A  6FCC               	movwf	(_date+6)& (0+255),b
  1924                           
  1925                           ; BSR set to: 0
  1926                           ;RTC.c: 19: EECON1 = 0b0000000;
  1927  00437C  0E00               	movlw	0
  1928  00437E  6EA6               	movwf	4006,c	;volatile
  1929                           
  1930                           ; BSR set to: 0
  1931                           ;RTC.c: 20: LATC1 = 1;
  1932  004380  828B               	bsf	3979,1,c	;volatile
  1933                           
  1934                           ; BSR set to: 0
  1935                           ;RTC.c: 21: loadTime();
  1936  004382  EC51  F01F         	call	_loadTime	;wreg free
  1937                           
  1938                           ;RTC.c: 22: LATC1 = 0;
  1939  004386  928B               	bcf	3979,1,c	;volatile
  1940  004388  0012               	return	
  1941  00438A                     __end_of_initRTC:
  1942                           	opt stack 0
  1943                           tblptru	equ	0xFF8
  1944                           tblptrh	equ	0xFF7
  1945                           tblptrl	equ	0xFF6
  1946                           tablat	equ	0xFF5
  1947                           intcon	equ	0xFF2
  1948                           intcon2	equ	0xFF1
  1949                           postinc0	equ	0xFEE
  1950                           wreg	equ	0xFE8
  1951                           postdec1	equ	0xFE5
  1952                           fsr1l	equ	0xFE1
  1953                           status	equ	0xFD8
  1954                           
  1955 ;; *************** function _loadTime *****************
  1956 ;; Defined at:
  1957 ;;		line 26 in file "RTC.c"
  1958 ;; Parameters:    Size  Location     Type
  1959 ;;		None
  1960 ;; Auto vars:     Size  Location     Type
  1961 ;;  newDate         9    3[BANK1 ] struct sDate
  1962 ;;  cnt             1    2[BANK1 ] unsigned char 
  1963 ;; Return value:  Size  Location     Type
  1964 ;;                  9  126[COMRAM] struct sDate
  1965 ;; Registers used:
  1966 ;;		wreg, status,2, status,0
  1967 ;; Tracked objects:
  1968 ;;		On entry : 0/0
  1969 ;;		On exit  : 0/0
  1970 ;;		Unchanged: 0/0
  1971 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1972 ;;      Params:         0       0       0       0       0       0       0       0       0
  1973 ;;      Locals:         0       0      10       0       0       0       0       0       0
  1974 ;;      Temps:          0       0       2       0       0       0       0       0       0
  1975 ;;      Totals:         0       0      12       0       0       0       0       0       0
  1976 ;;Total ram usage:       12 bytes
  1977 ;; Hardware stack levels used:    1
  1978 ;; Hardware stack levels required when called:    7
  1979 ;; This function calls:
  1980 ;;		Nothing
  1981 ;; This function is called by:
  1982 ;;		_initRTC
  1983 ;; This function uses a non-reentrant model
  1984 ;;
  1985                           
  1986                           	psect	text4
  1987  003EA2                     __ptext4:
  1988                           	opt stack 0
  1989  003EA2                     _loadTime:
  1990                           	opt stack 21
  1991                           
  1992                           ;RTC.c: 27: struct sDate newDate;
  1993                           ;RTC.c: 28: uint8_t cnt;
  1994                           ;RTC.c: 30: for (cnt = 1; cnt < 7; cnt++)
  1995                           
  1996                           ;incstack = 0
  1997                           ;incstack = 0
  1998  003EA2  0101               	movlb	1	; () banked
  1999  003EA4  6F26               	movwf	??_loadTime& (0+255),b
  2000  003EA6  0E01               	movlw	1
  2001  003EA8  0101               	movlb	1	; () banked
  2002  003EAA  0101               	movlb	1	; () banked
  2003  003EAC  6F28               	movwf	loadTime@cnt& (0+255),b
  2004  003EAE  0101               	movlb	1	; () banked
  2005  003EB0  5126               	movf	??_loadTime& (0+255),w,b
  2006  003EB2  D03E               	goto	L1
  2007  003EB4                     l172:
  2008                           
  2009                           ; BSR set to: 1
  2010                           ;RTC.c: 31: {
  2011                           ;RTC.c: 32: EEADR = 0 + cnt;
  2012  003EB4  C128  FFA9         	movff	loadTime@cnt,4009	;volatile
  2013                           
  2014                           ;RTC.c: 33: RD = 1;
  2015  003EB8  80A6               	bsf	4006,0,c	;volatile
  2016                           
  2017                           ;RTC.c: 34: switch (cnt)
  2018  003EBA  D022               	goto	l7383
  2019  003EBC                     l175:
  2020                           
  2021                           ; BSR set to: 1
  2022                           ;RTC.c: 37: newDate.minute = EEDATA;
  2023  003EBC  CFA8 F12A          	movff	4008,loadTime@newDate+1	;volatile
  2024                           
  2025                           ;RTC.c: 38: break;
  2026  003EC0  D034               	goto	l7385
  2027  003EC2                     l177:
  2028                           
  2029                           ; BSR set to: 1
  2030                           ;RTC.c: 40: newDate.hour = EEDATA;
  2031  003EC2  CFA8 F12B          	movff	4008,loadTime@newDate+2	;volatile
  2032                           
  2033                           ;RTC.c: 41: break;
  2034  003EC6  D031               	goto	l7385
  2035  003EC8                     l178:
  2036                           
  2037                           ; BSR set to: 1
  2038                           ;RTC.c: 43: newDate.day = EEDATA;
  2039  003EC8  CFA8 F12C          	movff	4008,loadTime@newDate+3	;volatile
  2040                           
  2041                           ;RTC.c: 44: break;
  2042  003ECC  D02E               	goto	l7385
  2043  003ECE                     l179:
  2044                           
  2045                           ; BSR set to: 1
  2046                           ;RTC.c: 46: newDate.month = EEDATA;
  2047  003ECE  CFA8 F12E          	movff	4008,loadTime@newDate+5	;volatile
  2048                           
  2049                           ;RTC.c: 47: break;
  2050  003ED2  D02B               	goto	l7385
  2051  003ED4                     l180:
  2052                           
  2053                           ; BSR set to: 1
  2054                           ;RTC.c: 49: newDate.year = EEDATA;
  2055  003ED4  0101               	movlb	1	; () banked
  2056  003ED6  CFA8 F12F          	movff	4008,loadTime@newDate+6	;volatile
  2057  003EDA  0101               	movlb	1	; () banked
  2058  003EDC  0101               	movlb	1	; () banked
  2059  003EDE  6B30               	clrf	(loadTime@newDate+7)& (0+255),b
  2060                           
  2061                           ;RTC.c: 50: break;
  2062  003EE0  D024               	goto	l7385
  2063  003EE2                     l7379:
  2064                           
  2065                           ; BSR set to: 1
  2066                           ;RTC.c: 52: newDate.year |= EEDATA << 8;
  2067  003EE2  50A8               	movf	4008,w,c	;volatile
  2068  003EE4  0101               	movlb	1	; () banked
  2069  003EE6  6F27               	movwf	(??_loadTime+1)& (0+255),b
  2070  003EE8  6B26               	clrf	??_loadTime& (0+255),b
  2071  003EEA  0101               	movlb	1	; () banked
  2072  003EEC  5126               	movf	??_loadTime& (0+255),w,b
  2073  003EEE  0101               	movlb	1	; () banked
  2074  003EF0  0101               	movlb	1	; () banked
  2075  003EF2  132F               	iorwf	(loadTime@newDate+6)& (0+255),f,b
  2076  003EF4  0101               	movlb	1	; () banked
  2077  003EF6  5127               	movf	(??_loadTime+1)& (0+255),w,b
  2078  003EF8  0101               	movlb	1	; () banked
  2079  003EFA  0101               	movlb	1	; () banked
  2080  003EFC  1330               	iorwf	(loadTime@newDate+7)& (0+255),f,b
  2081                           
  2082                           ;RTC.c: 53: break;
  2083  003EFE  D015               	goto	l7385
  2084  003F00                     l7383:
  2085                           
  2086                           ; BSR set to: 1
  2087  003F00  0101               	movlb	1	; () banked
  2088  003F02  0101               	movlb	1	; () banked
  2089  003F04  5128               	movf	loadTime@cnt& (0+255),w,b
  2090                           
  2091                           ; Switch size 1, requested type "space"
  2092                           ; Number of cases is 6, Range of values is 1 to 6
  2093                           ; switch strategies available:
  2094                           ; Name         Instructions Cycles
  2095                           ; simple_byte           19    10 (average)
  2096                           ;	Chosen strategy is simple_byte
  2097  003F06  0A01               	xorlw	1	; case 1
  2098  003F08  B4D8               	btfsc	status,2,c
  2099  003F0A  D7D8               	goto	l175
  2100  003F0C  0A03               	xorlw	3	; case 2
  2101  003F0E  B4D8               	btfsc	status,2,c
  2102  003F10  D7D8               	goto	l177
  2103  003F12  0A01               	xorlw	1	; case 3
  2104  003F14  B4D8               	btfsc	status,2,c
  2105  003F16  D7D8               	goto	l178
  2106  003F18  0A07               	xorlw	7	; case 4
  2107  003F1A  B4D8               	btfsc	status,2,c
  2108  003F1C  D7D8               	goto	l179
  2109  003F1E  0A01               	xorlw	1	; case 5
  2110  003F20  B4D8               	btfsc	status,2,c
  2111  003F22  D7D8               	goto	l180
  2112  003F24  0A03               	xorlw	3	; case 6
  2113  003F26  B4D8               	btfsc	status,2,c
  2114  003F28  D7DC               	goto	l7379
  2115  003F2A                     l7385:
  2116                           
  2117                           ; BSR set to: 1
  2118  003F2A  0101               	movlb	1	; () banked
  2119  003F2C  0101               	movlb	1	; () banked
  2120  003F2E  2B28               	incf	loadTime@cnt& (0+255),f,b
  2121  003F30                     L1:
  2122                           
  2123                           ; BSR set to: 1
  2124  003F30  0E06               	movlw	6
  2125  003F32  0101               	movlb	1	; () banked
  2126  003F34  0101               	movlb	1	; () banked
  2127  003F36  6528               	cpfsgt	loadTime@cnt& (0+255),b
  2128  003F38  D7BD               	goto	l172
  2129                           
  2130                           ; BSR set to: 1
  2131                           
  2132                           ; BSR set to: 1
  2133                           ;RTC.c: 55: }
  2134                           ;RTC.c: 56: return newDate;
  2135                           ;	Return value of _loadTime is never used
  2136  003F3A  0012               	return	
  2137  003F3C                     __end_of_loadTime:
  2138                           	opt stack 0
  2139                           tblptru	equ	0xFF8
  2140                           tblptrh	equ	0xFF7
  2141                           tblptrl	equ	0xFF6
  2142                           tablat	equ	0xFF5
  2143                           intcon	equ	0xFF2
  2144                           intcon2	equ	0xFF1
  2145                           postinc0	equ	0xFEE
  2146                           wreg	equ	0xFE8
  2147                           postdec1	equ	0xFE5
  2148                           fsr1l	equ	0xFE1
  2149                           status	equ	0xFD8
  2150                           
  2151 ;; *************** function _startDisp *****************
  2152 ;; Defined at:
  2153 ;;		line 62 in file "disp.c"
  2154 ;; Parameters:    Size  Location     Type
  2155 ;;		None
  2156 ;; Auto vars:     Size  Location     Type
  2157 ;;		None
  2158 ;; Return value:  Size  Location     Type
  2159 ;;		None               void
  2160 ;; Registers used:
  2161 ;;		wreg, status,2, status,0, cstack
  2162 ;; Tracked objects:
  2163 ;;		On entry : 0/0
  2164 ;;		On exit  : 0/0
  2165 ;;		Unchanged: 0/0
  2166 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2167 ;;      Params:         0       0       0       0       0       0       0       0       0
  2168 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2169 ;;      Temps:          0       0       1       0       0       0       0       0       0
  2170 ;;      Totals:         0       0       1       0       0       0       0       0       0
  2171 ;;Total ram usage:        1 bytes
  2172 ;; Hardware stack levels used:    1
  2173 ;; Hardware stack levels required when called:    8
  2174 ;; This function calls:
  2175 ;;		_setBrightness
  2176 ;;		_setTest
  2177 ;; This function is called by:
  2178 ;;		_setup
  2179 ;; This function uses a non-reentrant model
  2180 ;;
  2181                           
  2182                           	psect	text5
  2183  003D62                     __ptext5:
  2184                           	opt stack 0
  2185  003D62                     _startDisp:
  2186                           	opt stack 21
  2187                           
  2188                           ;disp.c: 64: TRISA1 = 0;
  2189                           
  2190                           ; BSR set to: 1
  2191                           ;incstack = 0
  2192                           ;incstack = 0
  2193  003D62  9292               	bcf	3986,1,c	;volatile
  2194                           
  2195                           ;disp.c: 65: TRISA3 = 0;
  2196  003D64  9692               	bcf	3986,3,c	;volatile
  2197                           
  2198                           ;disp.c: 66: TRISA4 = 0;
  2199  003D66  9892               	bcf	3986,4,c	;volatile
  2200                           
  2201                           ;disp.c: 67: TRISA2 = 1;
  2202  003D68  8492               	bsf	3986,2,c	;volatile
  2203                           
  2204                           ;disp.c: 70: screen.digits.bits[0] = 0;
  2205  003D6A  0E00               	movlw	0
  2206  003D6C  0100               	movlb	0	; () banked
  2207  003D6E  0100               	movlb	0	; () banked
  2208  003D70  6FDE               	movwf	_screen& (0+255),b
  2209  003D72  0E00               	movlw	0
  2210  003D74  0100               	movlb	0	; () banked
  2211  003D76  6FDF               	movwf	(_screen+1)& (0+255),b
  2212  003D78  0E00               	movlw	0
  2213  003D7A  0100               	movlb	0	; () banked
  2214  003D7C  6FE0               	movwf	(_screen+2)& (0+255),b
  2215  003D7E  0E00               	movlw	0
  2216  003D80  0100               	movlb	0	; () banked
  2217  003D82  6FE1               	movwf	(_screen+3)& (0+255),b
  2218                           
  2219                           ;disp.c: 71: screen.digits.bits[1] = 0;
  2220  003D84  0E00               	movlw	0
  2221  003D86  0100               	movlb	0	; () banked
  2222  003D88  0100               	movlb	0	; () banked
  2223  003D8A  6FE2               	movwf	(_screen+4)& (0+255),b
  2224  003D8C  0E00               	movlw	0
  2225  003D8E  0100               	movlb	0	; () banked
  2226  003D90  6FE3               	movwf	(_screen+5)& (0+255),b
  2227  003D92  0E00               	movlw	0
  2228  003D94  0100               	movlb	0	; () banked
  2229  003D96  6FE4               	movwf	(_screen+6)& (0+255),b
  2230  003D98  0E00               	movlw	0
  2231  003D9A  0100               	movlb	0	; () banked
  2232  003D9C  6FE5               	movwf	(_screen+7)& (0+255),b
  2233                           
  2234                           ; BSR set to: 0
  2235                           ;disp.c: 73: setBrightness(0b0111);
  2236  003D9E  0101               	movlb	1	; () banked
  2237  003DA0  6F27               	movwf	??_startDisp& (0+255),b
  2238  003DA2  0E07               	movlw	7
  2239  003DA4  0101               	movlb	1	; () banked
  2240  003DA6  0101               	movlb	1	; () banked
  2241  003DA8  6F26               	movwf	?_setBrightness& (0+255),b
  2242  003DAA  0101               	movlb	1	; () banked
  2243  003DAC  5127               	movf	??_startDisp& (0+255),w,b
  2244  003DAE  ECFB  F024         	call	_setBrightness	;wreg free
  2245                           
  2246                           ;disp.c: 75: screen.decode = 0;
  2247  003DB2  0100               	movlb	0	; () banked
  2248  003DB4  91E6               	bcf	(_screen+8)& (0+255),0,b
  2249  003DB6  0100               	movlb	0	; () banked
  2250  003DB8  93E6               	bcf	(_screen+8)& (0+255),1,b
  2251  003DBA  0100               	movlb	0	; () banked
  2252  003DBC  95E6               	bcf	(_screen+8)& (0+255),2,b
  2253  003DBE  0100               	movlb	0	; () banked
  2254  003DC0  97E6               	bcf	(_screen+8)& (0+255),3,b
  2255  003DC2  0100               	movlb	0	; () banked
  2256  003DC4  99E6               	bcf	(_screen+8)& (0+255),4,b
  2257  003DC6  0100               	movlb	0	; () banked
  2258  003DC8  9BE6               	bcf	(_screen+8)& (0+255),5,b
  2259  003DCA  0100               	movlb	0	; () banked
  2260  003DCC  9DE6               	bcf	(_screen+8)& (0+255),6,b
  2261  003DCE  0100               	movlb	0	; () banked
  2262  003DD0  9FE6               	bcf	(_screen+8)& (0+255),7,b
  2263                           
  2264                           ; BSR set to: 0
  2265                           ;disp.c: 77: screen.scan = 0b111;
  2266  003DD2  0100               	movlb	0	; () banked
  2267  003DD4  89E7               	bsf	(_screen+9)& (0+255),4,b
  2268  003DD6  0100               	movlb	0	; () banked
  2269  003DD8  8BE7               	bsf	(_screen+9)& (0+255),5,b
  2270  003DDA  0100               	movlb	0	; () banked
  2271  003DDC  8DE7               	bsf	(_screen+9)& (0+255),6,b
  2272                           
  2273                           ; BSR set to: 0
  2274                           ;disp.c: 79: setTest(0);
  2275  003DDE  0101               	movlb	1	; () banked
  2276  003DE0  6F27               	movwf	??_startDisp& (0+255),b
  2277  003DE2  0E00               	movlw	0
  2278  003DE4  0101               	movlb	1	; () banked
  2279  003DE6  0101               	movlb	1	; () banked
  2280  003DE8  6F26               	movwf	?_setTest& (0+255),b
  2281  003DEA  0101               	movlb	1	; () banked
  2282  003DEC  5127               	movf	??_startDisp& (0+255),w,b
  2283  003DEE  EC0B  F025         	call	_setTest	;wreg free
  2284                           
  2285                           ;disp.c: 81: screen.shutdown = 0;
  2286  003DF2  0100               	movlb	0	; () banked
  2287  003DF4  0100               	movlb	0	; () banked
  2288  003DF6  91E8               	bcf	(_screen+10)& (0+255),0,b
  2289                           
  2290                           ; BSR set to: 0
  2291                           ;disp.c: 83: screen.changed = 0xFFFF;
  2292  003DF8  0100               	movlb	0	; () banked
  2293  003DFA  0100               	movlb	0	; () banked
  2294  003DFC  69E9               	setf	(_screen+11)& (0+255),b
  2295  003DFE  0100               	movlb	0	; () banked
  2296  003E00  69EA               	setf	(_screen+12)& (0+255),b
  2297                           
  2298                           ; BSR set to: 0
  2299  003E02  0012               	return	
  2300  003E04                     __end_of_startDisp:
  2301                           	opt stack 0
  2302                           tblptru	equ	0xFF8
  2303                           tblptrh	equ	0xFF7
  2304                           tblptrl	equ	0xFF6
  2305                           tablat	equ	0xFF5
  2306                           intcon	equ	0xFF2
  2307                           intcon2	equ	0xFF1
  2308                           postinc0	equ	0xFEE
  2309                           wreg	equ	0xFE8
  2310                           postdec1	equ	0xFE5
  2311                           fsr1l	equ	0xFE1
  2312                           status	equ	0xFD8
  2313                           
  2314 ;; *************** function _setTest *****************
  2315 ;; Defined at:
  2316 ;;		line 56 in file "disp.c"
  2317 ;; Parameters:    Size  Location     Type
  2318 ;;  state           1    0[BANK1 ] unsigned char 
  2319 ;; Auto vars:     Size  Location     Type
  2320 ;;		None
  2321 ;; Return value:  Size  Location     Type
  2322 ;;		None               void
  2323 ;; Registers used:
  2324 ;;		status,2, status,0
  2325 ;; Tracked objects:
  2326 ;;		On entry : 0/0
  2327 ;;		On exit  : 0/0
  2328 ;;		Unchanged: 0/0
  2329 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2330 ;;      Params:         0       0       1       0       0       0       0       0       0
  2331 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2332 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2333 ;;      Totals:         0       0       1       0       0       0       0       0       0
  2334 ;;Total ram usage:        1 bytes
  2335 ;; Hardware stack levels used:    1
  2336 ;; Hardware stack levels required when called:    7
  2337 ;; This function calls:
  2338 ;;		Nothing
  2339 ;; This function is called by:
  2340 ;;		_startDisp
  2341 ;; This function uses a non-reentrant model
  2342 ;;
  2343                           
  2344                           	psect	text6
  2345  004A16                     __ptext6:
  2346                           	opt stack 0
  2347  004A16                     _setTest:
  2348                           	opt stack 21
  2349                           
  2350                           ;disp.c: 57: screen.test = state;
  2351                           
  2352                           ; BSR set to: 0
  2353                           ;incstack = 0
  2354                           ;incstack = 0
  2355  004A16  0101               	movlb	1	; () banked
  2356  004A18  0101               	movlb	1	; () banked
  2357  004A1A  B126               	btfsc	setTest@state& (0+255),0,b
  2358  004A1C  D004               	bra	u5795
  2359  004A1E  0100               	movlb	0	; () banked
  2360  004A20  0100               	movlb	0	; () banked
  2361  004A22  9FE7               	bcf	(_screen+9)& (0+255),7,b
  2362  004A24  D003               	bra	u5796
  2363  004A26                     u5795:
  2364  004A26  0100               	movlb	0	; () banked
  2365  004A28  0100               	movlb	0	; () banked
  2366  004A2A  8FE7               	bsf	(_screen+9)& (0+255),7,b
  2367  004A2C                     u5796:
  2368                           
  2369                           ; BSR set to: 0
  2370                           ;disp.c: 58: screen.changed |= (1 << 12);
  2371  004A2C  0100               	movlb	0	; () banked
  2372  004A2E  0100               	movlb	0	; () banked
  2373  004A30  89EA               	bsf	(_screen+12)& (0+255),4,b
  2374                           
  2375                           ; BSR set to: 0
  2376  004A32  0012               	return	
  2377  004A34                     __end_of_setTest:
  2378                           	opt stack 0
  2379                           tblptru	equ	0xFF8
  2380                           tblptrh	equ	0xFF7
  2381                           tblptrl	equ	0xFF6
  2382                           tablat	equ	0xFF5
  2383                           intcon	equ	0xFF2
  2384                           intcon2	equ	0xFF1
  2385                           postinc0	equ	0xFEE
  2386                           wreg	equ	0xFE8
  2387                           postdec1	equ	0xFE5
  2388                           fsr1l	equ	0xFE1
  2389                           status	equ	0xFD8
  2390                           
  2391 ;; *************** function _setBrightness *****************
  2392 ;; Defined at:
  2393 ;;		line 49 in file "disp.c"
  2394 ;; Parameters:    Size  Location     Type
  2395 ;;  bright          1    0[BANK1 ] unsigned char 
  2396 ;; Auto vars:     Size  Location     Type
  2397 ;;		None
  2398 ;; Return value:  Size  Location     Type
  2399 ;;		None               void
  2400 ;; Registers used:
  2401 ;;		wreg, status,2, status,0
  2402 ;; Tracked objects:
  2403 ;;		On entry : 0/0
  2404 ;;		On exit  : 0/0
  2405 ;;		Unchanged: 0/0
  2406 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2407 ;;      Params:         0       0       1       0       0       0       0       0       0
  2408 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2409 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2410 ;;      Totals:         0       0       1       0       0       0       0       0       0
  2411 ;;Total ram usage:        1 bytes
  2412 ;; Hardware stack levels used:    1
  2413 ;; Hardware stack levels required when called:    7
  2414 ;; This function calls:
  2415 ;;		Nothing
  2416 ;; This function is called by:
  2417 ;;		_startDisp
  2418 ;; This function uses a non-reentrant model
  2419 ;;
  2420                           
  2421                           	psect	text7
  2422  0049F6                     __ptext7:
  2423                           	opt stack 0
  2424  0049F6                     _setBrightness:
  2425                           	opt stack 21
  2426                           
  2427                           ;disp.c: 50: screen.brightness = bright;
  2428                           
  2429                           ; BSR set to: 0
  2430                           ;incstack = 0
  2431                           ;incstack = 0
  2432  0049F6  0100               	movlb	0	; () banked
  2433  0049F8  0100               	movlb	0	; () banked
  2434  0049FA  51E7               	movf	(_screen+9)& (0+255),w,b
  2435  0049FC  0101               	movlb	1	; () banked
  2436  0049FE  0101               	movlb	1	; () banked
  2437  004A00  1926               	xorwf	setBrightness@bright& (0+255),w,b
  2438  004A02  0BF0               	andlw	-16
  2439  004A04  0101               	movlb	1	; () banked
  2440  004A06  1926               	xorwf	setBrightness@bright& (0+255),w,b
  2441  004A08  0100               	movlb	0	; () banked
  2442  004A0A  0100               	movlb	0	; () banked
  2443  004A0C  6FE7               	movwf	(_screen+9)& (0+255),b
  2444                           
  2445                           ; BSR set to: 0
  2446                           ;disp.c: 51: screen.changed |= (1 << 10);
  2447  004A0E  0100               	movlb	0	; () banked
  2448  004A10  0100               	movlb	0	; () banked
  2449  004A12  85EA               	bsf	(_screen+12)& (0+255),2,b
  2450                           
  2451                           ; BSR set to: 0
  2452  004A14  0012               	return	
  2453  004A16                     __end_of_setBrightness:
  2454                           	opt stack 0
  2455                           tblptru	equ	0xFF8
  2456                           tblptrh	equ	0xFF7
  2457                           tblptrl	equ	0xFF6
  2458                           tablat	equ	0xFF5
  2459                           intcon	equ	0xFF2
  2460                           intcon2	equ	0xFF1
  2461                           postinc0	equ	0xFEE
  2462                           wreg	equ	0xFE8
  2463                           postdec1	equ	0xFE5
  2464                           fsr1l	equ	0xFE1
  2465                           status	equ	0xFD8
  2466                           
  2467 ;; *************** function _update *****************
  2468 ;; Defined at:
  2469 ;;		line 13 in file "disp.c"
  2470 ;; Parameters:    Size  Location     Type
  2471 ;;		None
  2472 ;; Auto vars:     Size  Location     Type
  2473 ;;  cnt             1   24[BANK1 ] char 
  2474 ;; Return value:  Size  Location     Type
  2475 ;;		None               void
  2476 ;; Registers used:
  2477 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  2478 ;; Tracked objects:
  2479 ;;		On entry : 0/0
  2480 ;;		On exit  : 0/0
  2481 ;;		Unchanged: 0/0
  2482 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2483 ;;      Params:         0       0       0       0       0       0       0       0       0
  2484 ;;      Locals:         0       0       1       0       0       0       0       0       0
  2485 ;;      Temps:          0       0       5       0       0       0       0       0       0
  2486 ;;      Totals:         0       0       6       0       0       0       0       0       0
  2487 ;;Total ram usage:        6 bytes
  2488 ;; Hardware stack levels used:    1
  2489 ;; Hardware stack levels required when called:   10
  2490 ;; This function calls:
  2491 ;;		_writeDigit
  2492 ;;		_spi
  2493 ;; This function is called by:
  2494 ;;		_main
  2495 ;; This function uses a non-reentrant model
  2496 ;;
  2497                           
  2498                           	psect	text8
  2499  00161A                     __ptext8:
  2500                           	opt stack 0
  2501  00161A                     _update:
  2502                           	opt stack 20
  2503                           
  2504                           ;disp.c: 14: if (!screen.changed)
  2505                           
  2506                           ; BSR set to: 0
  2507                           ;incstack = 0
  2508                           ;incstack = 0
  2509  00161A  0100               	movlb	0	; () banked
  2510  00161C  0100               	movlb	0	; () banked
  2511  00161E  51EA               	movf	(_screen+12)& (0+255),w,b
  2512  001620  11E9               	iorwf	(_screen+11)& (0+255),w,b
  2513  001622  B4D8               	btfsc	status,2,c
  2514  001624  D285               	goto	l58
  2515                           
  2516                           ; BSR set to: 0
  2517                           ;disp.c: 17: }
  2518                           ;disp.c: 18: int8_t cnt;
  2519                           ;disp.c: 19: for (cnt = 15; cnt >= 0; cnt--)
  2520                           
  2521                           ; BSR set to: 0
  2522                           
  2523                           ; BSR set to: 0
  2524                           ;disp.c: 15: {
  2525                           ;disp.c: 16: return;
  2526  001626  0101               	movlb	1	; () banked
  2527  001628  6F39               	movwf	??_update& (0+255),b
  2528  00162A  0E0F               	movlw	15
  2529  00162C  0101               	movlb	1	; () banked
  2530  00162E  0101               	movlb	1	; () banked
  2531  001630  6F3E               	movwf	update@cnt& (0+255),b
  2532  001632  0101               	movlb	1	; () banked
  2533  001634  5139               	movf	??_update& (0+255),w,b
  2534  001636                     
  2535                           ; BSR set to: 1
  2536  001636  0101               	movlb	1	; () banked
  2537  001638  0101               	movlb	1	; () banked
  2538  00163A  BF3E               	btfsc	update@cnt& (0+255),7,b
  2539  00163C  D279               	goto	l58
  2540  00163E  D083               	goto	l7227
  2541  001640                     l7213:
  2542                           
  2543                           ; BSR set to: 1
  2544                           ;disp.c: 24: writeDigit(1 << cnt, screen.digits.screen[cnt].bits);
  2545  001640  C13E  F139         	movff	update@cnt,??_update
  2546  001644  0E01               	movlw	1
  2547  001646  0101               	movlb	1	; () banked
  2548  001648  6F3A               	movwf	(??_update+1)& (0+255),b
  2549  00164A  0101               	movlb	1	; () banked
  2550  00164C  2B39               	incf	??_update& (0+255),f,b
  2551  00164E  D003               	goto	u5684
  2552  001650                     u5685:
  2553  001650  0101               	movlb	1	; () banked
  2554  001652  90D8               	bcf	status,0,c
  2555  001654  373A               	rlcf	(??_update+1)& (0+255),f,b
  2556  001656                     u5684:
  2557  001656  0101               	movlb	1	; () banked
  2558  001658  2F39               	decfsz	??_update& (0+255),f,b
  2559  00165A  D7FA               	goto	u5685
  2560  00165C  0101               	movlb	1	; () banked
  2561  00165E  513A               	movf	(??_update+1)& (0+255),w,b
  2562  001660  0101               	movlb	1	; () banked
  2563  001662  0101               	movlb	1	; () banked
  2564  001664  6F34               	movwf	?_writeDigit& (0+255),b
  2565  001666  0101               	movlb	1	; () banked
  2566  001668  0101               	movlb	1	; () banked
  2567  00166A  513E               	movf	update@cnt& (0+255),w,b
  2568  00166C  0D01               	mullw	1
  2569  00166E  0100               	movlb	0	; () banked
  2570  001670  0EDE               	movlw	low _screen
  2571  001672  24F3               	addwf	prodl,w,c
  2572  001674  6ED9               	movwf	fsr2l,c
  2573  001676  0100               	movlb	0	; () banked
  2574  001678  0E00               	movlw	high _screen
  2575  00167A  20F4               	addwfc	prodh,w,c
  2576  00167C  6EDA               	movwf	fsr2h,c
  2577  00167E  50DF               	movf	indf2,w,c
  2578  001680  0101               	movlb	1	; () banked
  2579  001682  0101               	movlb	1	; () banked
  2580  001684  6F35               	movwf	(?_writeDigit+1)& (0+255),b
  2581  001686  ECC4  F020         	call	_writeDigit	;wreg free
  2582                           
  2583                           ;disp.c: 25: break;
  2584  00168A  D22C               	goto	l7229
  2585  00168C                     l7215:
  2586                           
  2587                           ;disp.c: 27: spi(0b1001, screen.decode);
  2588  00168C  0101               	movlb	1	; () banked
  2589  00168E  6F39               	movwf	??_update& (0+255),b
  2590  001690  0E09               	movlw	9
  2591  001692  0101               	movlb	1	; () banked
  2592  001694  0101               	movlb	1	; () banked
  2593  001696  6F2C               	movwf	?_spi& (0+255),b
  2594  001698  0101               	movlb	1	; () banked
  2595  00169A  5139               	movf	??_update& (0+255),w,b
  2596  00169C  0100               	movlb	0	; () banked
  2597  00169E  0100               	movlb	0	; () banked
  2598  0016A0  51E6               	movf	(_screen+8)& (0+255),w,b
  2599  0016A2  0BFF               	andlw	255
  2600  0016A4  0101               	movlb	1	; () banked
  2601  0016A6  0101               	movlb	1	; () banked
  2602  0016A8  6F2D               	movwf	(?_spi+1)& (0+255),b
  2603  0016AA  EC3A  F01C         	call	_spi	;wreg free
  2604                           
  2605                           ;disp.c: 28: break;
  2606  0016AE  D21A               	goto	l7229
  2607  0016B0                     l7217:
  2608                           
  2609                           ;disp.c: 30: spi(0b1010, screen.brightness);
  2610  0016B0  0101               	movlb	1	; () banked
  2611  0016B2  6F39               	movwf	??_update& (0+255),b
  2612  0016B4  0E0A               	movlw	10
  2613  0016B6  0101               	movlb	1	; () banked
  2614  0016B8  0101               	movlb	1	; () banked
  2615  0016BA  6F2C               	movwf	?_spi& (0+255),b
  2616  0016BC  0101               	movlb	1	; () banked
  2617  0016BE  5139               	movf	??_update& (0+255),w,b
  2618  0016C0  0100               	movlb	0	; () banked
  2619  0016C2  0100               	movlb	0	; () banked
  2620  0016C4  51E7               	movf	(_screen+9)& (0+255),w,b
  2621  0016C6  0B0F               	andlw	15
  2622  0016C8  0101               	movlb	1	; () banked
  2623  0016CA  0101               	movlb	1	; () banked
  2624  0016CC  6F2D               	movwf	(?_spi+1)& (0+255),b
  2625  0016CE  EC3A  F01C         	call	_spi	;wreg free
  2626                           
  2627                           ;disp.c: 31: break;
  2628  0016D2  D208               	goto	l7229
  2629  0016D4                     l7219:
  2630                           
  2631                           ;disp.c: 33: spi(0b1011, screen.scan);
  2632  0016D4  0101               	movlb	1	; () banked
  2633  0016D6  6F39               	movwf	??_update& (0+255),b
  2634  0016D8  0E0B               	movlw	11
  2635  0016DA  0101               	movlb	1	; () banked
  2636  0016DC  0101               	movlb	1	; () banked
  2637  0016DE  6F2C               	movwf	?_spi& (0+255),b
  2638  0016E0  0101               	movlb	1	; () banked
  2639  0016E2  5139               	movf	??_update& (0+255),w,b
  2640  0016E4  0100               	movlb	0	; () banked
  2641  0016E6  0100               	movlb	0	; () banked
  2642  0016E8  39E7               	swapf	(_screen+9)& (0+255),w,b
  2643  0016EA  0B07               	andlw	7
  2644  0016EC  0101               	movlb	1	; () banked
  2645  0016EE  0101               	movlb	1	; () banked
  2646  0016F0  6F2D               	movwf	(?_spi+1)& (0+255),b
  2647  0016F2  EC3A  F01C         	call	_spi	;wreg free
  2648                           
  2649                           ;disp.c: 34: break;
  2650  0016F6  D1F6               	goto	l7229
  2651  0016F8                     l7221:
  2652                           
  2653                           ;disp.c: 36: spi(0b1111, screen.test);
  2654  0016F8  0101               	movlb	1	; () banked
  2655  0016FA  6F39               	movwf	??_update& (0+255),b
  2656  0016FC  0E0F               	movlw	15
  2657  0016FE  0101               	movlb	1	; () banked
  2658  001700  0101               	movlb	1	; () banked
  2659  001702  6F2C               	movwf	?_spi& (0+255),b
  2660  001704  0101               	movlb	1	; () banked
  2661  001706  5139               	movf	??_update& (0+255),w,b
  2662  001708  0E00               	movlw	0
  2663  00170A  0100               	movlb	0	; () banked
  2664  00170C  BFE7               	btfsc	(_screen+9)& (0+255),7,b
  2665  00170E  0E01               	movlw	1
  2666  001710  0101               	movlb	1	; () banked
  2667  001712  0101               	movlb	1	; () banked
  2668  001714  6F2D               	movwf	(?_spi+1)& (0+255),b
  2669  001716  EC3A  F01C         	call	_spi	;wreg free
  2670                           
  2671                           ;disp.c: 37: break;
  2672  00171A  D1E4               	goto	l7229
  2673  00171C                     l7223:
  2674                           
  2675                           ;disp.c: 39: spi(0b1100, !screen.shutdown);
  2676  00171C  0101               	movlb	1	; () banked
  2677  00171E  6F39               	movwf	??_update& (0+255),b
  2678  001720  0E0C               	movlw	12
  2679  001722  0101               	movlb	1	; () banked
  2680  001724  0101               	movlb	1	; () banked
  2681  001726  6F2C               	movwf	?_spi& (0+255),b
  2682  001728  0101               	movlb	1	; () banked
  2683  00172A  5139               	movf	??_update& (0+255),w,b
  2684  00172C  0100               	movlb	0	; () banked
  2685  00172E  0100               	movlb	0	; () banked
  2686  001730  B1E8               	btfsc	(_screen+10)& (0+255),0,b
  2687  001732  D002               	goto	u5690
  2688  001734  0E01               	movlw	1
  2689  001736  D001               	goto	u5696
  2690  001738                     u5690:
  2691  001738  0E00               	movlw	0
  2692  00173A                     u5696:
  2693  00173A  0101               	movlb	1	; () banked
  2694  00173C  0101               	movlb	1	; () banked
  2695  00173E  6F2D               	movwf	(?_spi+1)& (0+255),b
  2696  001740  EC3A  F01C         	call	_spi	;wreg free
  2697                           
  2698                           ;disp.c: 40: break;
  2699  001744  D1CF               	goto	l7229
  2700  001746                     l7227:
  2701  001746  C13E  F139         	movff	update@cnt,??_update
  2702  00174A  0E01               	movlw	1
  2703  00174C  0101               	movlb	1	; () banked
  2704  00174E  6F3A               	movwf	(??_update+1)& (0+255),b
  2705  001750  6B3B               	clrf	(??_update+2)& (0+255),b
  2706  001752  0101               	movlb	1	; () banked
  2707  001754  2B39               	incf	??_update& (0+255),f,b
  2708  001756  D004               	goto	u5704
  2709  001758                     u5705:
  2710  001758  90D8               	bcf	status,0,c
  2711  00175A  0101               	movlb	1	; () banked
  2712  00175C  373A               	rlcf	(??_update+1)& (0+255),f,b
  2713  00175E  373B               	rlcf	(??_update+2)& (0+255),f,b
  2714  001760                     u5704:
  2715  001760  0101               	movlb	1	; () banked
  2716  001762  2F39               	decfsz	??_update& (0+255),f,b
  2717  001764  D7F9               	goto	u5705
  2718  001766  0100               	movlb	0	; () banked
  2719  001768  0100               	movlb	0	; () banked
  2720  00176A  51E9               	movf	(_screen+11)& (0+255),w,b
  2721  00176C  0101               	movlb	1	; () banked
  2722  00176E  173A               	andwf	(??_update+1)& (0+255),f,b
  2723  001770  0100               	movlb	0	; () banked
  2724  001772  0100               	movlb	0	; () banked
  2725  001774  51EA               	movf	(_screen+12)& (0+255),w,b
  2726  001776  0101               	movlb	1	; () banked
  2727  001778  173B               	andwf	(??_update+2)& (0+255),f,b
  2728                           
  2729                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 6 sub-sw
      +                          itches
  2730                           ; Switch size 1, requested type "space"
  2731                           ; Number of cases is 6, Range of values is 0 to 32
  2732                           ; switch strategies available:
  2733                           ; Name         Instructions Cycles
  2734                           ; simple_byte           19    10 (average)
  2735                           ;	Chosen strategy is simple_byte
  2736  00177A  0101               	movlb	1	; () banked
  2737  00177C  513B               	movf	(??_update+2)& (0+255),w,b
  2738  00177E  0A00               	xorlw	0	; case 0
  2739  001780  B4D8               	btfsc	status,2,c
  2740  001782  D010               	goto	l9487
  2741  001784  0A02               	xorlw	2	; case 2
  2742  001786  B4D8               	btfsc	status,2,c
  2743  001788  D190               	goto	l9489
  2744  00178A  0A06               	xorlw	6	; case 4
  2745  00178C  B4D8               	btfsc	status,2,c
  2746  00178E  D193               	goto	l9491
  2747  001790  0A0C               	xorlw	12	; case 8
  2748  001792  B4D8               	btfsc	status,2,c
  2749  001794  D196               	goto	l9493
  2750  001796  0A18               	xorlw	24	; case 16
  2751  001798  B4D8               	btfsc	status,2,c
  2752  00179A  D199               	goto	l9495
  2753  00179C  0A30               	xorlw	48	; case 32
  2754  00179E  B4D8               	btfsc	status,2,c
  2755  0017A0  D19C               	goto	l9497
  2756  0017A2  D1A0               	goto	l7229
  2757  0017A4                     l9487:
  2758                           
  2759                           ; BSR set to: 1
  2760                           ; Switch size 1, requested type "space"
  2761                           ; Number of cases is 128, Range of values is 1 to 128
  2762                           ; switch strategies available:
  2763                           ; Name         Instructions Cycles
  2764                           ; simple_byte          385   193 (average)
  2765                           ;	Chosen strategy is simple_byte
  2766  0017A4  0101               	movlb	1	; () banked
  2767  0017A6  513A               	movf	(??_update+1)& (0+255),w,b
  2768  0017A8  0A01               	xorlw	1	; case 1
  2769  0017AA  B4D8               	btfsc	status,2,c
  2770  0017AC  D749               	goto	l7213
  2771  0017AE  0A03               	xorlw	3	; case 2
  2772  0017B0  B4D8               	btfsc	status,2,c
  2773  0017B2  D746               	goto	l7213
  2774  0017B4  0A01               	xorlw	1	; case 3
  2775  0017B6  B4D8               	btfsc	status,2,c
  2776  0017B8  D743               	goto	l7213
  2777  0017BA  0A07               	xorlw	7	; case 4
  2778  0017BC  B4D8               	btfsc	status,2,c
  2779  0017BE  D740               	goto	l7213
  2780  0017C0  0A01               	xorlw	1	; case 5
  2781  0017C2  B4D8               	btfsc	status,2,c
  2782  0017C4  D73D               	goto	l7213
  2783  0017C6  0A03               	xorlw	3	; case 6
  2784  0017C8  B4D8               	btfsc	status,2,c
  2785  0017CA  D73A               	goto	l7213
  2786  0017CC  0A01               	xorlw	1	; case 7
  2787  0017CE  B4D8               	btfsc	status,2,c
  2788  0017D0  D737               	goto	l7213
  2789  0017D2  0A0F               	xorlw	15	; case 8
  2790  0017D4  B4D8               	btfsc	status,2,c
  2791  0017D6  D734               	goto	l7213
  2792  0017D8  0A01               	xorlw	1	; case 9
  2793  0017DA  B4D8               	btfsc	status,2,c
  2794  0017DC  D731               	goto	l7213
  2795  0017DE  0A03               	xorlw	3	; case 10
  2796  0017E0  B4D8               	btfsc	status,2,c
  2797  0017E2  D72E               	goto	l7213
  2798  0017E4  0A01               	xorlw	1	; case 11
  2799  0017E6  B4D8               	btfsc	status,2,c
  2800  0017E8  D72B               	goto	l7213
  2801  0017EA  0A07               	xorlw	7	; case 12
  2802  0017EC  B4D8               	btfsc	status,2,c
  2803  0017EE  D728               	goto	l7213
  2804  0017F0  0A01               	xorlw	1	; case 13
  2805  0017F2  B4D8               	btfsc	status,2,c
  2806  0017F4  D725               	goto	l7213
  2807  0017F6  0A03               	xorlw	3	; case 14
  2808  0017F8  B4D8               	btfsc	status,2,c
  2809  0017FA  D722               	goto	l7213
  2810  0017FC  0A01               	xorlw	1	; case 15
  2811  0017FE  B4D8               	btfsc	status,2,c
  2812  001800  D71F               	goto	l7213
  2813  001802  0A1F               	xorlw	31	; case 16
  2814  001804  B4D8               	btfsc	status,2,c
  2815  001806  D71C               	goto	l7213
  2816  001808  0A01               	xorlw	1	; case 17
  2817  00180A  B4D8               	btfsc	status,2,c
  2818  00180C  D719               	goto	l7213
  2819  00180E  0A03               	xorlw	3	; case 18
  2820  001810  B4D8               	btfsc	status,2,c
  2821  001812  D716               	goto	l7213
  2822  001814  0A01               	xorlw	1	; case 19
  2823  001816  B4D8               	btfsc	status,2,c
  2824  001818  D713               	goto	l7213
  2825  00181A  0A07               	xorlw	7	; case 20
  2826  00181C  B4D8               	btfsc	status,2,c
  2827  00181E  D710               	goto	l7213
  2828  001820  0A01               	xorlw	1	; case 21
  2829  001822  B4D8               	btfsc	status,2,c
  2830  001824  D70D               	goto	l7213
  2831  001826  0A03               	xorlw	3	; case 22
  2832  001828  B4D8               	btfsc	status,2,c
  2833  00182A  D70A               	goto	l7213
  2834  00182C  0A01               	xorlw	1	; case 23
  2835  00182E  B4D8               	btfsc	status,2,c
  2836  001830  D707               	goto	l7213
  2837  001832  0A0F               	xorlw	15	; case 24
  2838  001834  B4D8               	btfsc	status,2,c
  2839  001836  D704               	goto	l7213
  2840  001838  0A01               	xorlw	1	; case 25
  2841  00183A  B4D8               	btfsc	status,2,c
  2842  00183C  D701               	goto	l7213
  2843  00183E  0A03               	xorlw	3	; case 26
  2844  001840  B4D8               	btfsc	status,2,c
  2845  001842  D6FE               	goto	l7213
  2846  001844  0A01               	xorlw	1	; case 27
  2847  001846  B4D8               	btfsc	status,2,c
  2848  001848  D6FB               	goto	l7213
  2849  00184A  0A07               	xorlw	7	; case 28
  2850  00184C  B4D8               	btfsc	status,2,c
  2851  00184E  D6F8               	goto	l7213
  2852  001850  0A01               	xorlw	1	; case 29
  2853  001852  B4D8               	btfsc	status,2,c
  2854  001854  D6F5               	goto	l7213
  2855  001856  0A03               	xorlw	3	; case 30
  2856  001858  B4D8               	btfsc	status,2,c
  2857  00185A  D6F2               	goto	l7213
  2858  00185C  0A01               	xorlw	1	; case 31
  2859  00185E  B4D8               	btfsc	status,2,c
  2860  001860  D6EF               	goto	l7213
  2861  001862  0A3F               	xorlw	63	; case 32
  2862  001864  B4D8               	btfsc	status,2,c
  2863  001866  D6EC               	goto	l7213
  2864  001868  0A01               	xorlw	1	; case 33
  2865  00186A  B4D8               	btfsc	status,2,c
  2866  00186C  D6E9               	goto	l7213
  2867  00186E  0A03               	xorlw	3	; case 34
  2868  001870  B4D8               	btfsc	status,2,c
  2869  001872  D6E6               	goto	l7213
  2870  001874  0A01               	xorlw	1	; case 35
  2871  001876  B4D8               	btfsc	status,2,c
  2872  001878  D6E3               	goto	l7213
  2873  00187A  0A07               	xorlw	7	; case 36
  2874  00187C  B4D8               	btfsc	status,2,c
  2875  00187E  D6E0               	goto	l7213
  2876  001880  0A01               	xorlw	1	; case 37
  2877  001882  B4D8               	btfsc	status,2,c
  2878  001884  D6DD               	goto	l7213
  2879  001886  0A03               	xorlw	3	; case 38
  2880  001888  B4D8               	btfsc	status,2,c
  2881  00188A  D6DA               	goto	l7213
  2882  00188C  0A01               	xorlw	1	; case 39
  2883  00188E  B4D8               	btfsc	status,2,c
  2884  001890  D6D7               	goto	l7213
  2885  001892  0A0F               	xorlw	15	; case 40
  2886  001894  B4D8               	btfsc	status,2,c
  2887  001896  D6D4               	goto	l7213
  2888  001898  0A01               	xorlw	1	; case 41
  2889  00189A  B4D8               	btfsc	status,2,c
  2890  00189C  D6D1               	goto	l7213
  2891  00189E  0A03               	xorlw	3	; case 42
  2892  0018A0  B4D8               	btfsc	status,2,c
  2893  0018A2  D6CE               	goto	l7213
  2894  0018A4  0A01               	xorlw	1	; case 43
  2895  0018A6  B4D8               	btfsc	status,2,c
  2896  0018A8  D6CB               	goto	l7213
  2897  0018AA  0A07               	xorlw	7	; case 44
  2898  0018AC  B4D8               	btfsc	status,2,c
  2899  0018AE  D6C8               	goto	l7213
  2900  0018B0  0A01               	xorlw	1	; case 45
  2901  0018B2  B4D8               	btfsc	status,2,c
  2902  0018B4  D6C5               	goto	l7213
  2903  0018B6  0A03               	xorlw	3	; case 46
  2904  0018B8  B4D8               	btfsc	status,2,c
  2905  0018BA  D6C2               	goto	l7213
  2906  0018BC  0A01               	xorlw	1	; case 47
  2907  0018BE  B4D8               	btfsc	status,2,c
  2908  0018C0  D6BF               	goto	l7213
  2909  0018C2  0A1F               	xorlw	31	; case 48
  2910  0018C4  B4D8               	btfsc	status,2,c
  2911  0018C6  D6BC               	goto	l7213
  2912  0018C8  0A01               	xorlw	1	; case 49
  2913  0018CA  B4D8               	btfsc	status,2,c
  2914  0018CC  D6B9               	goto	l7213
  2915  0018CE  0A03               	xorlw	3	; case 50
  2916  0018D0  B4D8               	btfsc	status,2,c
  2917  0018D2  D6B6               	goto	l7213
  2918  0018D4  0A01               	xorlw	1	; case 51
  2919  0018D6  B4D8               	btfsc	status,2,c
  2920  0018D8  D6B3               	goto	l7213
  2921  0018DA  0A07               	xorlw	7	; case 52
  2922  0018DC  B4D8               	btfsc	status,2,c
  2923  0018DE  D6B0               	goto	l7213
  2924  0018E0  0A01               	xorlw	1	; case 53
  2925  0018E2  B4D8               	btfsc	status,2,c
  2926  0018E4  D6AD               	goto	l7213
  2927  0018E6  0A03               	xorlw	3	; case 54
  2928  0018E8  B4D8               	btfsc	status,2,c
  2929  0018EA  D6AA               	goto	l7213
  2930  0018EC  0A01               	xorlw	1	; case 55
  2931  0018EE  B4D8               	btfsc	status,2,c
  2932  0018F0  D6A7               	goto	l7213
  2933  0018F2  0A0F               	xorlw	15	; case 56
  2934  0018F4  B4D8               	btfsc	status,2,c
  2935  0018F6  D6A4               	goto	l7213
  2936  0018F8  0A01               	xorlw	1	; case 57
  2937  0018FA  B4D8               	btfsc	status,2,c
  2938  0018FC  D6A1               	goto	l7213
  2939  0018FE  0A03               	xorlw	3	; case 58
  2940  001900  B4D8               	btfsc	status,2,c
  2941  001902  D69E               	goto	l7213
  2942  001904  0A01               	xorlw	1	; case 59
  2943  001906  B4D8               	btfsc	status,2,c
  2944  001908  D69B               	goto	l7213
  2945  00190A  0A07               	xorlw	7	; case 60
  2946  00190C  B4D8               	btfsc	status,2,c
  2947  00190E  D698               	goto	l7213
  2948  001910  0A01               	xorlw	1	; case 61
  2949  001912  B4D8               	btfsc	status,2,c
  2950  001914  D695               	goto	l7213
  2951  001916  0A03               	xorlw	3	; case 62
  2952  001918  B4D8               	btfsc	status,2,c
  2953  00191A  D692               	goto	l7213
  2954  00191C  0A01               	xorlw	1	; case 63
  2955  00191E  B4D8               	btfsc	status,2,c
  2956  001920  D68F               	goto	l7213
  2957  001922  0A7F               	xorlw	127	; case 64
  2958  001924  B4D8               	btfsc	status,2,c
  2959  001926  D68C               	goto	l7213
  2960  001928  0A01               	xorlw	1	; case 65
  2961  00192A  B4D8               	btfsc	status,2,c
  2962  00192C  D689               	goto	l7213
  2963  00192E  0A03               	xorlw	3	; case 66
  2964  001930  B4D8               	btfsc	status,2,c
  2965  001932  D686               	goto	l7213
  2966  001934  0A01               	xorlw	1	; case 67
  2967  001936  B4D8               	btfsc	status,2,c
  2968  001938  D683               	goto	l7213
  2969  00193A  0A07               	xorlw	7	; case 68
  2970  00193C  B4D8               	btfsc	status,2,c
  2971  00193E  D680               	goto	l7213
  2972  001940  0A01               	xorlw	1	; case 69
  2973  001942  B4D8               	btfsc	status,2,c
  2974  001944  D67D               	goto	l7213
  2975  001946  0A03               	xorlw	3	; case 70
  2976  001948  B4D8               	btfsc	status,2,c
  2977  00194A  D67A               	goto	l7213
  2978  00194C  0A01               	xorlw	1	; case 71
  2979  00194E  B4D8               	btfsc	status,2,c
  2980  001950  D677               	goto	l7213
  2981  001952  0A0F               	xorlw	15	; case 72
  2982  001954  B4D8               	btfsc	status,2,c
  2983  001956  D674               	goto	l7213
  2984  001958  0A01               	xorlw	1	; case 73
  2985  00195A  B4D8               	btfsc	status,2,c
  2986  00195C  D671               	goto	l7213
  2987  00195E  0A03               	xorlw	3	; case 74
  2988  001960  B4D8               	btfsc	status,2,c
  2989  001962  D66E               	goto	l7213
  2990  001964  0A01               	xorlw	1	; case 75
  2991  001966  B4D8               	btfsc	status,2,c
  2992  001968  D66B               	goto	l7213
  2993  00196A  0A07               	xorlw	7	; case 76
  2994  00196C  B4D8               	btfsc	status,2,c
  2995  00196E  D668               	goto	l7213
  2996  001970  0A01               	xorlw	1	; case 77
  2997  001972  B4D8               	btfsc	status,2,c
  2998  001974  D665               	goto	l7213
  2999  001976  0A03               	xorlw	3	; case 78
  3000  001978  B4D8               	btfsc	status,2,c
  3001  00197A  D662               	goto	l7213
  3002  00197C  0A01               	xorlw	1	; case 79
  3003  00197E  B4D8               	btfsc	status,2,c
  3004  001980  D65F               	goto	l7213
  3005  001982  0A1F               	xorlw	31	; case 80
  3006  001984  B4D8               	btfsc	status,2,c
  3007  001986  D65C               	goto	l7213
  3008  001988  0A01               	xorlw	1	; case 81
  3009  00198A  B4D8               	btfsc	status,2,c
  3010  00198C  D659               	goto	l7213
  3011  00198E  0A03               	xorlw	3	; case 82
  3012  001990  B4D8               	btfsc	status,2,c
  3013  001992  D656               	goto	l7213
  3014  001994  0A01               	xorlw	1	; case 83
  3015  001996  B4D8               	btfsc	status,2,c
  3016  001998  D653               	goto	l7213
  3017  00199A  0A07               	xorlw	7	; case 84
  3018  00199C  B4D8               	btfsc	status,2,c
  3019  00199E  D650               	goto	l7213
  3020  0019A0  0A01               	xorlw	1	; case 85
  3021  0019A2  B4D8               	btfsc	status,2,c
  3022  0019A4  D64D               	goto	l7213
  3023  0019A6  0A03               	xorlw	3	; case 86
  3024  0019A8  B4D8               	btfsc	status,2,c
  3025  0019AA  D64A               	goto	l7213
  3026  0019AC  0A01               	xorlw	1	; case 87
  3027  0019AE  B4D8               	btfsc	status,2,c
  3028  0019B0  D647               	goto	l7213
  3029  0019B2  0A0F               	xorlw	15	; case 88
  3030  0019B4  B4D8               	btfsc	status,2,c
  3031  0019B6  D644               	goto	l7213
  3032  0019B8  0A01               	xorlw	1	; case 89
  3033  0019BA  B4D8               	btfsc	status,2,c
  3034  0019BC  D641               	goto	l7213
  3035  0019BE  0A03               	xorlw	3	; case 90
  3036  0019C0  B4D8               	btfsc	status,2,c
  3037  0019C2  D63E               	goto	l7213
  3038  0019C4  0A01               	xorlw	1	; case 91
  3039  0019C6  B4D8               	btfsc	status,2,c
  3040  0019C8  D63B               	goto	l7213
  3041  0019CA  0A07               	xorlw	7	; case 92
  3042  0019CC  B4D8               	btfsc	status,2,c
  3043  0019CE  D638               	goto	l7213
  3044  0019D0  0A01               	xorlw	1	; case 93
  3045  0019D2  B4D8               	btfsc	status,2,c
  3046  0019D4  D635               	goto	l7213
  3047  0019D6  0A03               	xorlw	3	; case 94
  3048  0019D8  B4D8               	btfsc	status,2,c
  3049  0019DA  D632               	goto	l7213
  3050  0019DC  0A01               	xorlw	1	; case 95
  3051  0019DE  B4D8               	btfsc	status,2,c
  3052  0019E0  D62F               	goto	l7213
  3053  0019E2  0A3F               	xorlw	63	; case 96
  3054  0019E4  B4D8               	btfsc	status,2,c
  3055  0019E6  D62C               	goto	l7213
  3056  0019E8  0A01               	xorlw	1	; case 97
  3057  0019EA  B4D8               	btfsc	status,2,c
  3058  0019EC  D629               	goto	l7213
  3059  0019EE  0A03               	xorlw	3	; case 98
  3060  0019F0  B4D8               	btfsc	status,2,c
  3061  0019F2  D626               	goto	l7213
  3062  0019F4  0A01               	xorlw	1	; case 99
  3063  0019F6  B4D8               	btfsc	status,2,c
  3064  0019F8  D623               	goto	l7213
  3065  0019FA  0A07               	xorlw	7	; case 100
  3066  0019FC  B4D8               	btfsc	status,2,c
  3067  0019FE  D620               	goto	l7213
  3068  001A00  0A01               	xorlw	1	; case 101
  3069  001A02  B4D8               	btfsc	status,2,c
  3070  001A04  D61D               	goto	l7213
  3071  001A06  0A03               	xorlw	3	; case 102
  3072  001A08  B4D8               	btfsc	status,2,c
  3073  001A0A  D61A               	goto	l7213
  3074  001A0C  0A01               	xorlw	1	; case 103
  3075  001A0E  B4D8               	btfsc	status,2,c
  3076  001A10  D617               	goto	l7213
  3077  001A12  0A0F               	xorlw	15	; case 104
  3078  001A14  B4D8               	btfsc	status,2,c
  3079  001A16  D614               	goto	l7213
  3080  001A18  0A01               	xorlw	1	; case 105
  3081  001A1A  B4D8               	btfsc	status,2,c
  3082  001A1C  D611               	goto	l7213
  3083  001A1E  0A03               	xorlw	3	; case 106
  3084  001A20  B4D8               	btfsc	status,2,c
  3085  001A22  D60E               	goto	l7213
  3086  001A24  0A01               	xorlw	1	; case 107
  3087  001A26  B4D8               	btfsc	status,2,c
  3088  001A28  D60B               	goto	l7213
  3089  001A2A  0A07               	xorlw	7	; case 108
  3090  001A2C  B4D8               	btfsc	status,2,c
  3091  001A2E  D608               	goto	l7213
  3092  001A30  0A01               	xorlw	1	; case 109
  3093  001A32  B4D8               	btfsc	status,2,c
  3094  001A34  D605               	goto	l7213
  3095  001A36  0A03               	xorlw	3	; case 110
  3096  001A38  B4D8               	btfsc	status,2,c
  3097  001A3A  D602               	goto	l7213
  3098  001A3C  0A01               	xorlw	1	; case 111
  3099  001A3E  B4D8               	btfsc	status,2,c
  3100  001A40  D5FF               	goto	l7213
  3101  001A42  0A1F               	xorlw	31	; case 112
  3102  001A44  B4D8               	btfsc	status,2,c
  3103  001A46  D5FC               	goto	l7213
  3104  001A48  0A01               	xorlw	1	; case 113
  3105  001A4A  B4D8               	btfsc	status,2,c
  3106  001A4C  D5F9               	goto	l7213
  3107  001A4E  0A03               	xorlw	3	; case 114
  3108  001A50  B4D8               	btfsc	status,2,c
  3109  001A52  D5F6               	goto	l7213
  3110  001A54  0A01               	xorlw	1	; case 115
  3111  001A56  B4D8               	btfsc	status,2,c
  3112  001A58  D5F3               	goto	l7213
  3113  001A5A  0A07               	xorlw	7	; case 116
  3114  001A5C  B4D8               	btfsc	status,2,c
  3115  001A5E  D5F0               	goto	l7213
  3116  001A60  0A01               	xorlw	1	; case 117
  3117  001A62  B4D8               	btfsc	status,2,c
  3118  001A64  D5ED               	goto	l7213
  3119  001A66  0A03               	xorlw	3	; case 118
  3120  001A68  B4D8               	btfsc	status,2,c
  3121  001A6A  D5EA               	goto	l7213
  3122  001A6C  0A01               	xorlw	1	; case 119
  3123  001A6E  B4D8               	btfsc	status,2,c
  3124  001A70  D5E7               	goto	l7213
  3125  001A72  0A0F               	xorlw	15	; case 120
  3126  001A74  B4D8               	btfsc	status,2,c
  3127  001A76  D5E4               	goto	l7213
  3128  001A78  0A01               	xorlw	1	; case 121
  3129  001A7A  B4D8               	btfsc	status,2,c
  3130  001A7C  D5E1               	goto	l7213
  3131  001A7E  0A03               	xorlw	3	; case 122
  3132  001A80  B4D8               	btfsc	status,2,c
  3133  001A82  D5DE               	goto	l7213
  3134  001A84  0A01               	xorlw	1	; case 123
  3135  001A86  B4D8               	btfsc	status,2,c
  3136  001A88  D5DB               	goto	l7213
  3137  001A8A  0A07               	xorlw	7	; case 124
  3138  001A8C  B4D8               	btfsc	status,2,c
  3139  001A8E  D5D8               	goto	l7213
  3140  001A90  0A01               	xorlw	1	; case 125
  3141  001A92  B4D8               	btfsc	status,2,c
  3142  001A94  D5D5               	goto	l7213
  3143  001A96  0A03               	xorlw	3	; case 126
  3144  001A98  B4D8               	btfsc	status,2,c
  3145  001A9A  D5D2               	goto	l7213
  3146  001A9C  0A01               	xorlw	1	; case 127
  3147  001A9E  B4D8               	btfsc	status,2,c
  3148  001AA0  D5CF               	goto	l7213
  3149  001AA2  0AFF               	xorlw	255	; case 128
  3150  001AA4  B4D8               	btfsc	status,2,c
  3151  001AA6  D5CC               	goto	l7213
  3152  001AA8  D01D               	goto	l7229
  3153  001AAA                     l9489:
  3154                           
  3155                           ; BSR set to: 1
  3156                           ; Switch size 1, requested type "space"
  3157                           ; Number of cases is 1, Range of values is 0 to 0
  3158                           ; switch strategies available:
  3159                           ; Name         Instructions Cycles
  3160                           ; simple_byte            4     3 (average)
  3161                           ;	Chosen strategy is simple_byte
  3162  001AAA  0101               	movlb	1	; () banked
  3163  001AAC  513A               	movf	(??_update+1)& (0+255),w,b
  3164  001AAE  0A00               	xorlw	0	; case 0
  3165  001AB0  B4D8               	btfsc	status,2,c
  3166  001AB2  D5EC               	goto	l7215
  3167  001AB4  D017               	goto	l7229
  3168  001AB6                     l9491:
  3169                           
  3170                           ; BSR set to: 1
  3171                           ; Switch size 1, requested type "space"
  3172                           ; Number of cases is 1, Range of values is 0 to 0
  3173                           ; switch strategies available:
  3174                           ; Name         Instructions Cycles
  3175                           ; simple_byte            4     3 (average)
  3176                           ;	Chosen strategy is simple_byte
  3177  001AB6  0101               	movlb	1	; () banked
  3178  001AB8  513A               	movf	(??_update+1)& (0+255),w,b
  3179  001ABA  0A00               	xorlw	0	; case 0
  3180  001ABC  B4D8               	btfsc	status,2,c
  3181  001ABE  D5F8               	goto	l7217
  3182  001AC0  D011               	goto	l7229
  3183  001AC2                     l9493:
  3184                           
  3185                           ; BSR set to: 1
  3186                           ; Switch size 1, requested type "space"
  3187                           ; Number of cases is 1, Range of values is 0 to 0
  3188                           ; switch strategies available:
  3189                           ; Name         Instructions Cycles
  3190                           ; simple_byte            4     3 (average)
  3191                           ;	Chosen strategy is simple_byte
  3192  001AC2  0101               	movlb	1	; () banked
  3193  001AC4  513A               	movf	(??_update+1)& (0+255),w,b
  3194  001AC6  0A00               	xorlw	0	; case 0
  3195  001AC8  B4D8               	btfsc	status,2,c
  3196  001ACA  D604               	goto	l7219
  3197  001ACC  D00B               	goto	l7229
  3198  001ACE                     l9495:
  3199                           
  3200                           ; BSR set to: 1
  3201                           ; Switch size 1, requested type "space"
  3202                           ; Number of cases is 1, Range of values is 0 to 0
  3203                           ; switch strategies available:
  3204                           ; Name         Instructions Cycles
  3205                           ; simple_byte            4     3 (average)
  3206                           ;	Chosen strategy is simple_byte
  3207  001ACE  0101               	movlb	1	; () banked
  3208  001AD0  513A               	movf	(??_update+1)& (0+255),w,b
  3209  001AD2  0A00               	xorlw	0	; case 0
  3210  001AD4  B4D8               	btfsc	status,2,c
  3211  001AD6  D610               	goto	l7221
  3212  001AD8  D005               	goto	l7229
  3213  001ADA                     l9497:
  3214                           
  3215                           ; BSR set to: 1
  3216                           ; Switch size 1, requested type "space"
  3217                           ; Number of cases is 1, Range of values is 0 to 0
  3218                           ; switch strategies available:
  3219                           ; Name         Instructions Cycles
  3220                           ; simple_byte            4     3 (average)
  3221                           ;	Chosen strategy is simple_byte
  3222  001ADA  0101               	movlb	1	; () banked
  3223  001ADC  513A               	movf	(??_update+1)& (0+255),w,b
  3224  001ADE  0A00               	xorlw	0	; case 0
  3225  001AE0  B4D8               	btfsc	status,2,c
  3226  001AE2  D61C               	goto	l7223
  3227  001AE4                     l7229:
  3228                           
  3229                           ;disp.c: 44: screen.changed &= ~(1 << cnt);
  3230  001AE4  C13E  F139         	movff	update@cnt,??_update
  3231  001AE8  0E01               	movlw	1
  3232  001AEA  0101               	movlb	1	; () banked
  3233  001AEC  6F3A               	movwf	(??_update+1)& (0+255),b
  3234  001AEE  6B3B               	clrf	(??_update+2)& (0+255),b
  3235  001AF0  0101               	movlb	1	; () banked
  3236  001AF2  2B39               	incf	??_update& (0+255),f,b
  3237  001AF4  D004               	goto	u5714
  3238  001AF6                     u5715:
  3239  001AF6  90D8               	bcf	status,0,c
  3240  001AF8  0101               	movlb	1	; () banked
  3241  001AFA  373A               	rlcf	(??_update+1)& (0+255),f,b
  3242  001AFC  373B               	rlcf	(??_update+2)& (0+255),f,b
  3243  001AFE                     u5714:
  3244  001AFE  0101               	movlb	1	; () banked
  3245  001B00  2F39               	decfsz	??_update& (0+255),f,b
  3246  001B02  D7F9               	goto	u5715
  3247  001B04  0101               	movlb	1	; () banked
  3248  001B06  1D3A               	comf	(??_update+1)& (0+255),w,b
  3249  001B08  0101               	movlb	1	; () banked
  3250  001B0A  6F3C               	movwf	(??_update+3)& (0+255),b
  3251  001B0C  0101               	movlb	1	; () banked
  3252  001B0E  0101               	movlb	1	; () banked
  3253  001B10  1D3B               	comf	(??_update+2)& (0+255),w,b
  3254  001B12  6F3D               	movwf	(??_update+4)& (0+255),b
  3255  001B14  0101               	movlb	1	; () banked
  3256  001B16  513C               	movf	(??_update+3)& (0+255),w,b
  3257  001B18  0100               	movlb	0	; () banked
  3258  001B1A  0100               	movlb	0	; () banked
  3259  001B1C  17E9               	andwf	(_screen+11)& (0+255),f,b
  3260  001B1E  0101               	movlb	1	; () banked
  3261  001B20  513D               	movf	(??_update+4)& (0+255),w,b
  3262  001B22  0100               	movlb	0	; () banked
  3263  001B24  0100               	movlb	0	; () banked
  3264  001B26  17EA               	andwf	(_screen+12)& (0+255),f,b
  3265                           
  3266                           ; BSR set to: 0
  3267  001B28  0101               	movlb	1	; () banked
  3268  001B2A  0101               	movlb	1	; () banked
  3269  001B2C  073E               	decf	update@cnt& (0+255),f,b
  3270  001B2E  D583               	goto	L2
  3271  001B30                     l58:
  3272  001B30  0012               	return	
  3273  001B32                     __end_of_update:
  3274                           	opt stack 0
  3275                           tblptru	equ	0xFF8
  3276                           tblptrh	equ	0xFF7
  3277                           tblptrl	equ	0xFF6
  3278                           tablat	equ	0xFF5
  3279                           prodh	equ	0xFF4
  3280                           prodl	equ	0xFF3
  3281                           intcon	equ	0xFF2
  3282                           intcon2	equ	0xFF1
  3283                           postinc0	equ	0xFEE
  3284                           wreg	equ	0xFE8
  3285                           postdec1	equ	0xFE5
  3286                           fsr1l	equ	0xFE1
  3287                           indf2	equ	0xFDF
  3288                           fsr2h	equ	0xFDA
  3289                           fsr2l	equ	0xFD9
  3290                           status	equ	0xFD8
  3291                           
  3292 ;; *************** function _writeDigit *****************
  3293 ;; Defined at:
  3294 ;;		line 109 in file "disp.c"
  3295 ;; Parameters:    Size  Location     Type
  3296 ;;  digit           1   14[BANK1 ] unsigned char 
  3297 ;;  segs            1   15[BANK1 ] unsigned char 
  3298 ;; Auto vars:     Size  Location     Type
  3299 ;;  cnt             1   18[BANK1 ] char 
  3300 ;;  dig             1   17[BANK1 ] unsigned char 
  3301 ;; Return value:  Size  Location     Type
  3302 ;;		None               void
  3303 ;; Registers used:
  3304 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3305 ;; Tracked objects:
  3306 ;;		On entry : 0/0
  3307 ;;		On exit  : 0/0
  3308 ;;		Unchanged: 0/0
  3309 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3310 ;;      Params:         0       0       2       0       0       0       0       0       0
  3311 ;;      Locals:         0       0       2       0       0       0       0       0       0
  3312 ;;      Temps:          0       0       1       0       0       0       0       0       0
  3313 ;;      Totals:         0       0       5       0       0       0       0       0       0
  3314 ;;Total ram usage:        5 bytes
  3315 ;; Hardware stack levels used:    1
  3316 ;; Hardware stack levels required when called:    9
  3317 ;; This function calls:
  3318 ;;		_spi
  3319 ;;		_log2
  3320 ;;		_rotate
  3321 ;; This function is called by:
  3322 ;;		_update
  3323 ;; This function uses a non-reentrant model
  3324 ;;
  3325                           
  3326                           	psect	text9
  3327  004188                     __ptext9:
  3328                           	opt stack 0
  3329  004188                     _writeDigit:
  3330                           	opt stack 20
  3331                           
  3332                           ;disp.c: 110: uint8_t dig = (uint8_t) log2(digit);
  3333                           
  3334                           ;incstack = 0
  3335                           ;incstack = 0
  3336  004188  0101               	movlb	1	; () banked
  3337  00418A  0101               	movlb	1	; () banked
  3338  00418C  5134               	movf	writeDigit@digit& (0+255),w,b
  3339  00418E  0101               	movlb	1	; () banked
  3340  004190  0101               	movlb	1	; () banked
  3341  004192  6F26               	movwf	?_log2& (0+255),b
  3342  004194  0101               	movlb	1	; () banked
  3343  004196  6B27               	clrf	(?_log2+1)& (0+255),b
  3344  004198  0101               	movlb	1	; () banked
  3345  00419A  6B28               	clrf	(?_log2+2)& (0+255),b
  3346  00419C  0101               	movlb	1	; () banked
  3347  00419E  6B29               	clrf	(?_log2+3)& (0+255),b
  3348  0041A0  EC72  F022         	call	_log2	;wreg free
  3349  0041A4  0101               	movlb	1	; () banked
  3350  0041A6  0101               	movlb	1	; () banked
  3351  0041A8  5126               	movf	?_log2& (0+255),w,b
  3352  0041AA  0101               	movlb	1	; () banked
  3353  0041AC  0101               	movlb	1	; () banked
  3354  0041AE  6F37               	movwf	writeDigit@dig& (0+255),b
  3355                           
  3356                           ; BSR set to: 1
  3357                           ;disp.c: 111: screen.digits.screen[dig].bits = segs;
  3358  0041B0  0101               	movlb	1	; () banked
  3359  0041B2  0101               	movlb	1	; () banked
  3360  0041B4  5137               	movf	writeDigit@dig& (0+255),w,b
  3361  0041B6  0D01               	mullw	1
  3362  0041B8  0100               	movlb	0	; () banked
  3363  0041BA  0EDE               	movlw	low _screen
  3364  0041BC  24F3               	addwf	prodl,w,c
  3365  0041BE  6ED9               	movwf	fsr2l,c
  3366  0041C0  0100               	movlb	0	; () banked
  3367  0041C2  0E00               	movlw	high _screen
  3368  0041C4  20F4               	addwfc	prodh,w,c
  3369  0041C6  6EDA               	movwf	fsr2h,c
  3370  0041C8  0101               	movlb	1	; () banked
  3371  0041CA  C135  FFDF         	movff	writeDigit@segs,indf2
  3372                           
  3373                           ; BSR set to: 1
  3374                           ;disp.c: 114: int8_t cnt;
  3375                           ;disp.c: 115: for (cnt = 7; cnt >= 0; cnt--)
  3376  0041CE  0101               	movlb	1	; () banked
  3377  0041D0  6F36               	movwf	??_writeDigit& (0+255),b
  3378  0041D2  0E07               	movlw	7
  3379  0041D4  0101               	movlb	1	; () banked
  3380  0041D6  0101               	movlb	1	; () banked
  3381  0041D8  6F38               	movwf	writeDigit@cnt& (0+255),b
  3382  0041DA  0101               	movlb	1	; () banked
  3383  0041DC  5136               	movf	??_writeDigit& (0+255),w,b
  3384  0041DE                     
  3385                           ; BSR set to: 1
  3386  0041DE  0101               	movlb	1	; () banked
  3387  0041E0  0101               	movlb	1	; () banked
  3388  0041E2  BF38               	btfsc	writeDigit@cnt& (0+255),7,b
  3389  0041E4  D013               	goto	l88
  3390                           
  3391                           ; BSR set to: 1
  3392                           ;disp.c: 116: {
  3393                           ;disp.c: 118: spi(cnt + 1, rotate(cnt));
  3394                           
  3395                           ; BSR set to: 1
  3396                           
  3397                           ; BSR set to: 1
  3398  0041E6  0101               	movlb	1	; () banked
  3399  0041E8  0101               	movlb	1	; () banked
  3400  0041EA  2938               	incf	writeDigit@cnt& (0+255),w,b
  3401  0041EC  0101               	movlb	1	; () banked
  3402  0041EE  0101               	movlb	1	; () banked
  3403  0041F0  6F2C               	movwf	?_spi& (0+255),b
  3404  0041F2  C138  F126         	movff	writeDigit@cnt,?_rotate
  3405  0041F6  ECEB  F01F         	call	_rotate	;wreg free
  3406  0041FA  0101               	movlb	1	; () banked
  3407  0041FC  0101               	movlb	1	; () banked
  3408  0041FE  6F2D               	movwf	(?_spi+1)& (0+255),b
  3409  004200  EC3A  F01C         	call	_spi	;wreg free
  3410  004204  0101               	movlb	1	; () banked
  3411  004206  0101               	movlb	1	; () banked
  3412  004208  0738               	decf	writeDigit@cnt& (0+255),f,b
  3413  00420A  D7E9               	goto	L3
  3414  00420C                     l88:
  3415                           
  3416                           ; BSR set to: 1
  3417  00420C  0012               	return	
  3418  00420E                     __end_of_writeDigit:
  3419                           	opt stack 0
  3420                           tblptru	equ	0xFF8
  3421                           tblptrh	equ	0xFF7
  3422                           tblptrl	equ	0xFF6
  3423                           tablat	equ	0xFF5
  3424                           prodh	equ	0xFF4
  3425                           prodl	equ	0xFF3
  3426                           intcon	equ	0xFF2
  3427                           intcon2	equ	0xFF1
  3428                           postinc0	equ	0xFEE
  3429                           wreg	equ	0xFE8
  3430                           postdec1	equ	0xFE5
  3431                           fsr1l	equ	0xFE1
  3432                           indf2	equ	0xFDF
  3433                           fsr2h	equ	0xFDA
  3434                           fsr2l	equ	0xFD9
  3435                           status	equ	0xFD8
  3436                           
  3437 ;; *************** function _rotate *****************
  3438 ;; Defined at:
  3439 ;;		line 208 in file "disp.c"
  3440 ;; Parameters:    Size  Location     Type
  3441 ;;  seg             1    0[BANK1 ] unsigned char 
  3442 ;; Auto vars:     Size  Location     Type
  3443 ;;  cnt             1    5[BANK1 ] char 
  3444 ;;  ret             1    4[BANK1 ] unsigned char 
  3445 ;; Return value:  Size  Location     Type
  3446 ;;                  1    wreg      unsigned char 
  3447 ;; Registers used:
  3448 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  3449 ;; Tracked objects:
  3450 ;;		On entry : 0/0
  3451 ;;		On exit  : 0/0
  3452 ;;		Unchanged: 0/0
  3453 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3454 ;;      Params:         0       0       1       0       0       0       0       0       0
  3455 ;;      Locals:         0       0       2       0       0       0       0       0       0
  3456 ;;      Temps:          0       0       3       0       0       0       0       0       0
  3457 ;;      Totals:         0       0       6       0       0       0       0       0       0
  3458 ;;Total ram usage:        6 bytes
  3459 ;; Hardware stack levels used:    1
  3460 ;; Hardware stack levels required when called:    7
  3461 ;; This function calls:
  3462 ;;		Nothing
  3463 ;; This function is called by:
  3464 ;;		_writeDigit
  3465 ;; This function uses a non-reentrant model
  3466 ;;
  3467                           
  3468                           	psect	text10
  3469  003FD6                     __ptext10:
  3470                           	opt stack 0
  3471  003FD6                     _rotate:
  3472                           	opt stack 21
  3473                           
  3474                           ;disp.c: 209: uint8_t ret = 0;
  3475                           
  3476                           ; BSR set to: 1
  3477                           ;incstack = 0
  3478                           ;incstack = 0
  3479  003FD6  0101               	movlb	1	; () banked
  3480  003FD8  6F27               	movwf	??_rotate& (0+255),b
  3481  003FDA  0E00               	movlw	0
  3482  003FDC  0101               	movlb	1	; () banked
  3483  003FDE  0101               	movlb	1	; () banked
  3484  003FE0  6F2A               	movwf	rotate@ret& (0+255),b
  3485  003FE2  0101               	movlb	1	; () banked
  3486  003FE4  5127               	movf	??_rotate& (0+255),w,b
  3487                           
  3488                           ;disp.c: 210: int8_t cnt;
  3489                           ;disp.c: 211: for (cnt = 7; cnt >= 0; cnt--)
  3490  003FE6  0101               	movlb	1	; () banked
  3491  003FE8  6F27               	movwf	??_rotate& (0+255),b
  3492  003FEA  0E07               	movlw	7
  3493  003FEC  0101               	movlb	1	; () banked
  3494  003FEE  0101               	movlb	1	; () banked
  3495  003FF0  6F2B               	movwf	rotate@cnt& (0+255),b
  3496  003FF2  0101               	movlb	1	; () banked
  3497  003FF4  5127               	movf	??_rotate& (0+255),w,b
  3498  003FF6                     
  3499                           ; BSR set to: 1
  3500  003FF6  0101               	movlb	1	; () banked
  3501  003FF8  0101               	movlb	1	; () banked
  3502  003FFA  BF2B               	btfsc	rotate@cnt& (0+255),7,b
  3503  003FFC  D031               	goto	l7351
  3504                           
  3505                           ; BSR set to: 1
  3506                           ;disp.c: 212: {
  3507                           ;disp.c: 213: ret |= ((screen.digits.screen[cnt].bits >> seg) & 1) << cnt;
  3508                           
  3509                           ; BSR set to: 1
  3510                           
  3511                           ; BSR set to: 1
  3512  003FFE  C12B  F127         	movff	rotate@cnt,??_rotate
  3513  004002  C126  F128         	movff	rotate@seg,??_rotate+1
  3514  004006  0101               	movlb	1	; () banked
  3515  004008  0101               	movlb	1	; () banked
  3516  00400A  512B               	movf	rotate@cnt& (0+255),w,b
  3517  00400C  0D01               	mullw	1
  3518  00400E  0100               	movlb	0	; () banked
  3519  004010  0EDE               	movlw	low _screen
  3520  004012  24F3               	addwf	prodl,w,c
  3521  004014  6ED9               	movwf	fsr2l,c
  3522  004016  0100               	movlb	0	; () banked
  3523  004018  0E00               	movlw	high _screen
  3524  00401A  20F4               	addwfc	prodh,w,c
  3525  00401C  6EDA               	movwf	fsr2h,c
  3526  00401E  50DF               	movf	indf2,w,c
  3527  004020  0101               	movlb	1	; () banked
  3528  004022  6F29               	movwf	(??_rotate+2)& (0+255),b
  3529  004024  0101               	movlb	1	; () banked
  3530  004026  2B28               	incf	(??_rotate+1)& (0+255),f,b
  3531  004028  D003               	goto	u5834
  3532  00402A                     u5835:
  3533  00402A  0101               	movlb	1	; () banked
  3534  00402C  90D8               	bcf	status,0,c
  3535  00402E  3329               	rrcf	(??_rotate+2)& (0+255),f,b
  3536  004030                     u5834:
  3537  004030  0101               	movlb	1	; () banked
  3538  004032  2F28               	decfsz	(??_rotate+1)& (0+255),f,b
  3539  004034  D7FA               	goto	u5835
  3540  004036  0E01               	movlw	1
  3541  004038  0101               	movlb	1	; () banked
  3542  00403A  1729               	andwf	(??_rotate+2)& (0+255),f,b
  3543  00403C  0101               	movlb	1	; () banked
  3544  00403E  2B27               	incf	??_rotate& (0+255),f,b
  3545  004040  D003               	goto	u5844
  3546  004042                     u5845:
  3547  004042  0101               	movlb	1	; () banked
  3548  004044  90D8               	bcf	status,0,c
  3549  004046  3729               	rlcf	(??_rotate+2)& (0+255),f,b
  3550  004048                     u5844:
  3551  004048  0101               	movlb	1	; () banked
  3552  00404A  2F27               	decfsz	??_rotate& (0+255),f,b
  3553  00404C  D7FA               	goto	u5845
  3554  00404E  0101               	movlb	1	; () banked
  3555  004050  5129               	movf	(??_rotate+2)& (0+255),w,b
  3556  004052  0101               	movlb	1	; () banked
  3557  004054  0101               	movlb	1	; () banked
  3558  004056  132A               	iorwf	rotate@ret& (0+255),f,b
  3559                           
  3560                           ; BSR set to: 1
  3561  004058  0101               	movlb	1	; () banked
  3562  00405A  0101               	movlb	1	; () banked
  3563  00405C  072B               	decf	rotate@cnt& (0+255),f,b
  3564  00405E  D7CB               	goto	L4
  3565  004060                     l7351:
  3566                           
  3567                           ; BSR set to: 1
  3568                           ;disp.c: 214: }
  3569                           ;disp.c: 215: return ret;
  3570  004060  0101               	movlb	1	; () banked
  3571  004062  0101               	movlb	1	; () banked
  3572  004064  512A               	movf	rotate@ret& (0+255),w,b
  3573                           
  3574                           ; BSR set to: 1
  3575                           
  3576                           ; BSR set to: 1
  3577  004066  0012               	return	
  3578  004068                     __end_of_rotate:
  3579                           	opt stack 0
  3580                           tblptru	equ	0xFF8
  3581                           tblptrh	equ	0xFF7
  3582                           tblptrl	equ	0xFF6
  3583                           tablat	equ	0xFF5
  3584                           prodh	equ	0xFF4
  3585                           prodl	equ	0xFF3
  3586                           intcon	equ	0xFF2
  3587                           intcon2	equ	0xFF1
  3588                           postinc0	equ	0xFEE
  3589                           wreg	equ	0xFE8
  3590                           postdec1	equ	0xFE5
  3591                           fsr1l	equ	0xFE1
  3592                           indf2	equ	0xFDF
  3593                           fsr2h	equ	0xFDA
  3594                           fsr2l	equ	0xFD9
  3595                           status	equ	0xFD8
  3596                           
  3597 ;; *************** function _log2 *****************
  3598 ;; Defined at:
  3599 ;;		line 48 in file "defs.c"
  3600 ;; Parameters:    Size  Location     Type
  3601 ;;  num             4    0[BANK1 ] unsigned long 
  3602 ;; Auto vars:     Size  Location     Type
  3603 ;;  log2Val         4    4[BANK1 ] unsigned long 
  3604 ;; Return value:  Size  Location     Type
  3605 ;;                  4    0[BANK1 ] unsigned long 
  3606 ;; Registers used:
  3607 ;;		wreg, status,2, status,0
  3608 ;; Tracked objects:
  3609 ;;		On entry : 0/0
  3610 ;;		On exit  : 0/0
  3611 ;;		Unchanged: 0/0
  3612 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3613 ;;      Params:         0       0       4       0       0       0       0       0       0
  3614 ;;      Locals:         0       0       4       0       0       0       0       0       0
  3615 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3616 ;;      Totals:         0       0       8       0       0       0       0       0       0
  3617 ;;Total ram usage:        8 bytes
  3618 ;; Hardware stack levels used:    1
  3619 ;; Hardware stack levels required when called:    7
  3620 ;; This function calls:
  3621 ;;		Nothing
  3622 ;; This function is called by:
  3623 ;;		_writeDigit
  3624 ;; This function uses a non-reentrant model
  3625 ;;
  3626                           
  3627                           	psect	text11
  3628  0044E4                     __ptext11:
  3629                           	opt stack 0
  3630  0044E4                     _log2:
  3631                           	opt stack 21
  3632                           
  3633                           ;defs.c: 49: uint32_t log2Val = 0;
  3634                           
  3635                           ; BSR set to: 1
  3636                           ;incstack = 0
  3637                           ;incstack = 0
  3638  0044E4  0E00               	movlw	0
  3639  0044E6  0101               	movlb	1	; () banked
  3640  0044E8  0101               	movlb	1	; () banked
  3641  0044EA  6F2A               	movwf	log2@log2Val& (0+255),b
  3642  0044EC  0E00               	movlw	0
  3643  0044EE  0101               	movlb	1	; () banked
  3644  0044F0  6F2B               	movwf	(log2@log2Val+1)& (0+255),b
  3645  0044F2  0E00               	movlw	0
  3646  0044F4  0101               	movlb	1	; () banked
  3647  0044F6  6F2C               	movwf	(log2@log2Val+2)& (0+255),b
  3648  0044F8  0E00               	movlw	0
  3649  0044FA  0101               	movlb	1	; () banked
  3650  0044FC  6F2D               	movwf	(log2@log2Val+3)& (0+255),b
  3651                           
  3652                           ;defs.c: 50: while (num >>= 1) log2Val++;
  3653  0044FE  D00D               	goto	l440
  3654  004500                     l7337:
  3655                           
  3656                           ; BSR set to: 1
  3657  004500  0E01               	movlw	1
  3658  004502  0101               	movlb	1	; () banked
  3659  004504  0101               	movlb	1	; () banked
  3660  004506  272A               	addwf	log2@log2Val& (0+255),f,b
  3661  004508  0E00               	movlw	0
  3662  00450A  0101               	movlb	1	; () banked
  3663  00450C  232B               	addwfc	(log2@log2Val+1)& (0+255),f,b
  3664  00450E  0E00               	movlw	0
  3665  004510  0101               	movlb	1	; () banked
  3666  004512  232C               	addwfc	(log2@log2Val+2)& (0+255),f,b
  3667  004514  0E00               	movlw	0
  3668  004516  0101               	movlb	1	; () banked
  3669  004518  232D               	addwfc	(log2@log2Val+3)& (0+255),f,b
  3670  00451A                     l440:
  3671                           
  3672                           ; BSR set to: 1
  3673  00451A  0101               	movlb	1	; () banked
  3674  00451C  90D8               	bcf	status,0,c
  3675  00451E  0101               	movlb	1	; () banked
  3676  004520  3329               	rrcf	(log2@num+3)& (0+255),f,b
  3677  004522  0101               	movlb	1	; () banked
  3678  004524  3328               	rrcf	(log2@num+2)& (0+255),f,b
  3679  004526  0101               	movlb	1	; () banked
  3680  004528  3327               	rrcf	(log2@num+1)& (0+255),f,b
  3681  00452A  0101               	movlb	1	; () banked
  3682  00452C  3326               	rrcf	log2@num& (0+255),f,b
  3683  00452E  0101               	movlb	1	; () banked
  3684  004530  5129               	movf	(log2@num+3)& (0+255),w,b
  3685  004532  1126               	iorwf	log2@num& (0+255),w,b
  3686  004534  1127               	iorwf	(log2@num+1)& (0+255),w,b
  3687  004536  1128               	iorwf	(log2@num+2)& (0+255),w,b
  3688  004538  A4D8               	btfss	status,2,c
  3689  00453A  D7E2               	goto	l7337
  3690                           
  3691                           ; BSR set to: 1
  3692                           ;defs.c: 51: return log2Val;
  3693  00453C  C12A  F126         	movff	log2@log2Val,?_log2
  3694  004540  C12B  F127         	movff	log2@log2Val+1,?_log2+1
  3695  004544  C12C  F128         	movff	log2@log2Val+2,?_log2+2
  3696  004548  C12D  F129         	movff	log2@log2Val+3,?_log2+3
  3697                           
  3698                           ; BSR set to: 1
  3699  00454C  0012               	return	
  3700  00454E                     __end_of_log2:
  3701                           	opt stack 0
  3702                           tblptru	equ	0xFF8
  3703                           tblptrh	equ	0xFF7
  3704                           tblptrl	equ	0xFF6
  3705                           tablat	equ	0xFF5
  3706                           prodh	equ	0xFF4
  3707                           prodl	equ	0xFF3
  3708                           intcon	equ	0xFF2
  3709                           intcon2	equ	0xFF1
  3710                           postinc0	equ	0xFEE
  3711                           wreg	equ	0xFE8
  3712                           postdec1	equ	0xFE5
  3713                           fsr1l	equ	0xFE1
  3714                           indf2	equ	0xFDF
  3715                           fsr2h	equ	0xFDA
  3716                           fsr2l	equ	0xFD9
  3717                           status	equ	0xFD8
  3718                           
  3719 ;; *************** function _spi *****************
  3720 ;; Defined at:
  3721 ;;		line 87 in file "disp.c"
  3722 ;; Parameters:    Size  Location     Type
  3723 ;;  addr            1    6[BANK1 ] unsigned char 
  3724 ;;  data            1    7[BANK1 ] unsigned char 
  3725 ;; Auto vars:     Size  Location     Type
  3726 ;;  send            2   11[BANK1 ] unsigned int 
  3727 ;;  cnt             1   13[BANK1 ] char 
  3728 ;; Return value:  Size  Location     Type
  3729 ;;		None               void
  3730 ;; Registers used:
  3731 ;;		wreg, status,2, status,0, cstack
  3732 ;; Tracked objects:
  3733 ;;		On entry : 0/0
  3734 ;;		On exit  : 0/0
  3735 ;;		Unchanged: 0/0
  3736 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3737 ;;      Params:         0       0       2       0       0       0       0       0       0
  3738 ;;      Locals:         0       0       3       0       0       0       0       0       0
  3739 ;;      Temps:          0       0       3       0       0       0       0       0       0
  3740 ;;      Totals:         0       0       8       0       0       0       0       0       0
  3741 ;;Total ram usage:        8 bytes
  3742 ;; Hardware stack levels used:    1
  3743 ;; Hardware stack levels required when called:    8
  3744 ;; This function calls:
  3745 ;;		_wait
  3746 ;; This function is called by:
  3747 ;;		_update
  3748 ;;		_writeDigit
  3749 ;; This function uses a non-reentrant model
  3750 ;;
  3751                           
  3752                           	psect	text12
  3753  003874                     __ptext12:
  3754                           	opt stack 0
  3755  003874                     _spi:
  3756                           	opt stack 21
  3757                           
  3758                           ;disp.c: 88: uint16_t send = (addr << 8) | data;
  3759                           
  3760                           ; BSR set to: 1
  3761                           ;incstack = 0
  3762                           ;incstack = 0
  3763  003874  0101               	movlb	1	; () banked
  3764  003876  0101               	movlb	1	; () banked
  3765  003878  512D               	movf	spi@data& (0+255),w,b
  3766  00387A  0101               	movlb	1	; () banked
  3767  00387C  C12C  F12E         	movff	spi@addr,??_spi
  3768  003880  0101               	movlb	1	; () banked
  3769  003882  6B2F               	clrf	(??_spi+1)& (0+255),b
  3770  003884  C12E  F12F         	movff	??_spi,??_spi+1
  3771  003888  0101               	movlb	1	; () banked
  3772  00388A  6B2E               	clrf	??_spi& (0+255),b
  3773  00388C  0101               	movlb	1	; () banked
  3774  00388E  112E               	iorwf	??_spi& (0+255),w,b
  3775  003890  0101               	movlb	1	; () banked
  3776  003892  0101               	movlb	1	; () banked
  3777  003894  6F31               	movwf	spi@send& (0+255),b
  3778  003896  0101               	movlb	1	; () banked
  3779  003898  512F               	movf	(??_spi+1)& (0+255),w,b
  3780  00389A  0101               	movlb	1	; () banked
  3781  00389C  6F32               	movwf	(spi@send+1)& (0+255),b
  3782                           
  3783                           ; BSR set to: 1
  3784                           ;disp.c: 89: LATA4 = 0;
  3785  00389E  9889               	bcf	3977,4,c	;volatile
  3786                           
  3787                           ; BSR set to: 1
  3788                           ;disp.c: 90: LATA1 = 0;
  3789  0038A0  9289               	bcf	3977,1,c	;volatile
  3790                           
  3791                           ; BSR set to: 1
  3792                           ;disp.c: 91: LATA3 = 0;
  3793  0038A2  9689               	bcf	3977,3,c	;volatile
  3794                           
  3795                           ; BSR set to: 1
  3796                           ;disp.c: 92: int8_t cnt;
  3797                           ;disp.c: 93: for (cnt = 15; cnt >= 0; cnt--)
  3798  0038A4  0101               	movlb	1	; () banked
  3799  0038A6  6F2E               	movwf	??_spi& (0+255),b
  3800  0038A8  0E0F               	movlw	15
  3801  0038AA  0101               	movlb	1	; () banked
  3802  0038AC  0101               	movlb	1	; () banked
  3803  0038AE  6F33               	movwf	spi@cnt& (0+255),b
  3804  0038B0  0101               	movlb	1	; () banked
  3805  0038B2  512E               	movf	??_spi& (0+255),w,b
  3806  0038B4                     
  3807                           ; BSR set to: 1
  3808  0038B4  0101               	movlb	1	; () banked
  3809  0038B6  0101               	movlb	1	; () banked
  3810  0038B8  BF33               	btfsc	spi@cnt& (0+255),7,b
  3811  0038BA  D041               	goto	l82
  3812                           
  3813                           ; BSR set to: 1
  3814                           ;disp.c: 94: {
  3815                           ;disp.c: 95: LATA1 = 0x1 & (send >> cnt);
  3816                           
  3817                           ; BSR set to: 1
  3818                           
  3819                           ; BSR set to: 1
  3820  0038BC  C133  F12E         	movff	spi@cnt,??_spi
  3821  0038C0  0101               	movlb	1	; () banked
  3822  0038C2  C131  F12F         	movff	spi@send,??_spi+1
  3823  0038C6  0101               	movlb	1	; () banked
  3824  0038C8  C132  F130         	movff	spi@send+1,??_spi+2
  3825  0038CC  0101               	movlb	1	; () banked
  3826  0038CE  2B2E               	incf	??_spi& (0+255),f,b
  3827  0038D0  D004               	goto	u5764
  3828  0038D2                     u5765:
  3829  0038D2  0101               	movlb	1	; () banked
  3830  0038D4  90D8               	bcf	status,0,c
  3831  0038D6  3330               	rrcf	(??_spi+2)& (0+255),f,b
  3832  0038D8  332F               	rrcf	(??_spi+1)& (0+255),f,b
  3833  0038DA                     u5764:
  3834  0038DA  0101               	movlb	1	; () banked
  3835  0038DC  2F2E               	decfsz	??_spi& (0+255),f,b
  3836  0038DE  D7F9               	goto	u5765
  3837  0038E0  0101               	movlb	1	; () banked
  3838  0038E2  312F               	rrcf	(??_spi+1)& (0+255),w,b
  3839  0038E4  0101               	movlb	1	; () banked
  3840  0038E6  A0D8               	btfss	status,0,c
  3841  0038E8  D001               	bra	u5775
  3842  0038EA  8289               	bsf	3977,1,c	;volatile
  3843  0038EC                     u5775:
  3844  0038EC  0101               	movlb	1	; () banked
  3845  0038EE  B0D8               	btfsc	status,0,c
  3846  0038F0  D001               	bra	u5776
  3847  0038F2  9289               	bcf	3977,1,c	;volatile
  3848  0038F4                     u5776:
  3849                           
  3850                           ; BSR set to: 1
  3851                           ;disp.c: 96: wait(0);
  3852  0038F4  0E00               	movlw	0
  3853  0038F6  0101               	movlb	1	; () banked
  3854  0038F8  0101               	movlb	1	; () banked
  3855  0038FA  6F26               	movwf	?_wait& (0+255),b
  3856  0038FC  0E00               	movlw	0
  3857  0038FE  0101               	movlb	1	; () banked
  3858  003900  6F27               	movwf	(?_wait+1)& (0+255),b
  3859  003902  0E00               	movlw	0
  3860  003904  0101               	movlb	1	; () banked
  3861  003906  6F28               	movwf	(?_wait+2)& (0+255),b
  3862  003908  0E00               	movlw	0
  3863  00390A  0101               	movlb	1	; () banked
  3864  00390C  6F29               	movwf	(?_wait+3)& (0+255),b
  3865  00390E  ECAD  F024         	call	_wait	;wreg free
  3866                           
  3867                           ;disp.c: 97: LATA3 = 1;
  3868  003912  8689               	bsf	3977,3,c	;volatile
  3869                           
  3870                           ;disp.c: 98: wait(0);
  3871  003914  0E00               	movlw	0
  3872  003916  0101               	movlb	1	; () banked
  3873  003918  0101               	movlb	1	; () banked
  3874  00391A  6F26               	movwf	?_wait& (0+255),b
  3875  00391C  0E00               	movlw	0
  3876  00391E  0101               	movlb	1	; () banked
  3877  003920  6F27               	movwf	(?_wait+1)& (0+255),b
  3878  003922  0E00               	movlw	0
  3879  003924  0101               	movlb	1	; () banked
  3880  003926  6F28               	movwf	(?_wait+2)& (0+255),b
  3881  003928  0E00               	movlw	0
  3882  00392A  0101               	movlb	1	; () banked
  3883  00392C  6F29               	movwf	(?_wait+3)& (0+255),b
  3884  00392E  ECAD  F024         	call	_wait	;wreg free
  3885                           
  3886                           ;disp.c: 99: LATA3 = 0;
  3887  003932  9689               	bcf	3977,3,c	;volatile
  3888                           
  3889                           ;disp.c: 100: LATA1 = 0;
  3890  003934  9289               	bcf	3977,1,c	;volatile
  3891  003936  0101               	movlb	1	; () banked
  3892  003938  0101               	movlb	1	; () banked
  3893  00393A  0733               	decf	spi@cnt& (0+255),f,b
  3894  00393C  D7BB               	goto	L5
  3895  00393E                     l82:
  3896                           
  3897                           ; BSR set to: 1
  3898                           ;disp.c: 101: }
  3899                           ;disp.c: 102: LATA4 = 1;
  3900  00393E  8889               	bsf	3977,4,c	;volatile
  3901                           
  3902                           ;disp.c: 103: LATA3 = 0;
  3903  003940  9689               	bcf	3977,3,c	;volatile
  3904                           
  3905                           ;disp.c: 104: LATA1 = 0;
  3906  003942  9289               	bcf	3977,1,c	;volatile
  3907                           
  3908                           ; BSR set to: 1
  3909                           ;disp.c: 105: wait(0);
  3910  003944  0E00               	movlw	0
  3911  003946  0101               	movlb	1	; () banked
  3912  003948  0101               	movlb	1	; () banked
  3913  00394A  6F26               	movwf	?_wait& (0+255),b
  3914  00394C  0E00               	movlw	0
  3915  00394E  0101               	movlb	1	; () banked
  3916  003950  6F27               	movwf	(?_wait+1)& (0+255),b
  3917  003952  0E00               	movlw	0
  3918  003954  0101               	movlb	1	; () banked
  3919  003956  6F28               	movwf	(?_wait+2)& (0+255),b
  3920  003958  0E00               	movlw	0
  3921  00395A  0101               	movlb	1	; () banked
  3922  00395C  6F29               	movwf	(?_wait+3)& (0+255),b
  3923  00395E  ECAD  F024         	call	_wait	;wreg free
  3924  003962  0012               	return	
  3925  003964                     __end_of_spi:
  3926                           	opt stack 0
  3927                           tblptru	equ	0xFF8
  3928                           tblptrh	equ	0xFF7
  3929                           tblptrl	equ	0xFF6
  3930                           tablat	equ	0xFF5
  3931                           prodh	equ	0xFF4
  3932                           prodl	equ	0xFF3
  3933                           intcon	equ	0xFF2
  3934                           intcon2	equ	0xFF1
  3935                           postinc0	equ	0xFEE
  3936                           wreg	equ	0xFE8
  3937                           postdec1	equ	0xFE5
  3938                           fsr1l	equ	0xFE1
  3939                           indf2	equ	0xFDF
  3940                           fsr2h	equ	0xFDA
  3941                           fsr2l	equ	0xFD9
  3942                           status	equ	0xFD8
  3943                           
  3944 ;; *************** function _wait *****************
  3945 ;; Defined at:
  3946 ;;		line 4 in file "defs.c"
  3947 ;; Parameters:    Size  Location     Type
  3948 ;;  count           4    0[BANK1 ] unsigned long 
  3949 ;; Auto vars:     Size  Location     Type
  3950 ;;		None
  3951 ;; Return value:  Size  Location     Type
  3952 ;;		None               void
  3953 ;; Registers used:
  3954 ;;		wreg, status,2, status,0
  3955 ;; Tracked objects:
  3956 ;;		On entry : 0/0
  3957 ;;		On exit  : 0/0
  3958 ;;		Unchanged: 0/0
  3959 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3960 ;;      Params:         0       0       4       0       0       0       0       0       0
  3961 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3962 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3963 ;;      Totals:         0       0       4       0       0       0       0       0       0
  3964 ;;Total ram usage:        4 bytes
  3965 ;; Hardware stack levels used:    1
  3966 ;; Hardware stack levels required when called:    7
  3967 ;; This function calls:
  3968 ;;		Nothing
  3969 ;; This function is called by:
  3970 ;;		_spi
  3971 ;; This function uses a non-reentrant model
  3972 ;;
  3973                           
  3974                           	psect	text13
  3975  00495A                     __ptext13:
  3976                           	opt stack 0
  3977  00495A                     _wait:
  3978                           	opt stack 21
  3979  00495A                     l7333:
  3980  00495A  0101               	movlb	1	; () banked
  3981  00495C  0101               	movlb	1	; () banked
  3982  00495E  0726               	decf	wait@count& (0+255),f,b
  3983  004960  0E00               	movlw	0
  3984  004962  0101               	movlb	1	; () banked
  3985  004964  5B27               	subwfb	(wait@count+1)& (0+255),f,b
  3986  004966  0101               	movlb	1	; () banked
  3987  004968  5B28               	subwfb	(wait@count+2)& (0+255),f,b
  3988  00496A  0101               	movlb	1	; () banked
  3989  00496C  5B29               	subwfb	(wait@count+3)& (0+255),f,b
  3990  00496E  0101               	movlb	1	; () banked
  3991  004970  2926               	incf	wait@count& (0+255),w,b
  3992  004972  B4D8               	btfsc	status,2,c
  3993  004974  2927               	incf	(wait@count+1)& (0+255),w,b
  3994  004976  B4D8               	btfsc	status,2,c
  3995  004978  2928               	incf	(wait@count+2)& (0+255),w,b
  3996  00497A  B4D8               	btfsc	status,2,c
  3997  00497C  2929               	incf	(wait@count+3)& (0+255),w,b
  3998  00497E  B4D8               	btfsc	status,2,c
  3999                           
  4000                           ; BSR set to: 1
  4001                           
  4002                           ; BSR set to: 1
  4003  004980  0012               	return	
  4004  004982  D7EB               	goto	l7333
  4005  004984                     __end_of_wait:
  4006                           	opt stack 0
  4007                           tblptru	equ	0xFF8
  4008                           tblptrh	equ	0xFF7
  4009                           tblptrl	equ	0xFF6
  4010                           tablat	equ	0xFF5
  4011                           prodh	equ	0xFF4
  4012                           prodl	equ	0xFF3
  4013                           intcon	equ	0xFF2
  4014                           intcon2	equ	0xFF1
  4015                           postinc0	equ	0xFEE
  4016                           wreg	equ	0xFE8
  4017                           postdec1	equ	0xFE5
  4018                           fsr1l	equ	0xFE1
  4019                           indf2	equ	0xFDF
  4020                           fsr2h	equ	0xFDA
  4021                           fsr2l	equ	0xFD9
  4022                           status	equ	0xFD8
  4023                           
  4024 ;; *************** function _isr *****************
  4025 ;; Defined at:
  4026 ;;		line 120 in file "temp-clock_main.c"
  4027 ;; Parameters:    Size  Location     Type
  4028 ;;		None
  4029 ;; Auto vars:     Size  Location     Type
  4030 ;;		None
  4031 ;; Return value:  Size  Location     Type
  4032 ;;		None               void
  4033 ;; Registers used:
  4034 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  4035 ;; Tracked objects:
  4036 ;;		On entry : 0/0
  4037 ;;		On exit  : 0/0
  4038 ;;		Unchanged: 0/0
  4039 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4040 ;;      Params:         0       0       0       0       0       0       0       0       0
  4041 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4042 ;;      Temps:          0      15       0       0       0       0       0       0       0
  4043 ;;      Totals:         0      15       0       0       0       0       0       0       0
  4044 ;;Total ram usage:       15 bytes
  4045 ;; Hardware stack levels used:    1
  4046 ;; Hardware stack levels required when called:    6
  4047 ;; This function calls:
  4048 ;;		_tick
  4049 ;;		_printRTC
  4050 ;;		_buttons
  4051 ;; This function is called by:
  4052 ;;		Interrupt level 2
  4053 ;; This function uses a non-reentrant model
  4054 ;;
  4055                           
  4056                           	psect	intcode
  4057  000008                     __pintcode:
  4058                           	opt stack 0
  4059  000008                     _isr:
  4060                           	opt stack 20
  4061                           
  4062                           ; BSR set to: 1
  4063                           ;incstack = 0
  4064  000008  CFFA F098          	movff	pclath,??_isr+1
  4065  00000C  CFFB F099          	movff	pclatu,??_isr+2
  4066  000010  CFE9 F09A          	movff	fsr0l,??_isr+3
  4067  000014  ED51  F019         	call	int_func,f	;refresh shadow registers
  4068                           pclatu	equ	0xFFB
  4069                           pclath	equ	0xFFA
  4070                           tblptru	equ	0xFF8
  4071                           tblptrh	equ	0xFF7
  4072                           tblptrl	equ	0xFF6
  4073                           tablat	equ	0xFF5
  4074                           prodh	equ	0xFF4
  4075                           prodl	equ	0xFF3
  4076                           intcon	equ	0xFF2
  4077                           intcon2	equ	0xFF1
  4078                           postinc0	equ	0xFEE
  4079                           fsr0l	equ	0xFE9
  4080                           wreg	equ	0xFE8
  4081                           postdec1	equ	0xFE5
  4082                           fsr1l	equ	0xFE1
  4083                           indf2	equ	0xFDF
  4084                           fsr2h	equ	0xFDA
  4085                           fsr2l	equ	0xFD9
  4086                           status	equ	0xFD8
  4087                           
  4088                           	psect	intcode_body
  4089  0032A2                     __pintcode_body:
  4090                           	opt stack 20
  4091  0032A2                     int_func:
  4092                           	opt stack 20
  4093  0032A2  0006               	pop		; remove dummy address from shadow register refresh
  4094  0032A4  CFEA F09B          	movff	fsr0h,??_isr+4
  4095  0032A8  CFE1 F09C          	movff	fsr1l,??_isr+5
  4096  0032AC  CFE2 F09D          	movff	fsr1h,??_isr+6
  4097  0032B0  CFD9 F09E          	movff	fsr2l,??_isr+7
  4098  0032B4  CFDA F09F          	movff	fsr2h,??_isr+8
  4099  0032B8  CFF3 F0A0          	movff	prodl,??_isr+9
  4100  0032BC  CFF4 F0A1          	movff	prodh,??_isr+10
  4101  0032C0  CFF6 F0A2          	movff	tblptrl,??_isr+11
  4102  0032C4  CFF7 F0A3          	movff	tblptrh,??_isr+12
  4103  0032C8  CFF8 F0A4          	movff	tblptru,??_isr+13
  4104  0032CC  CFF5 F0A5          	movff	tablat,??_isr+14
  4105  0032D0                     
  4106                           ;temp-clock_main.c: 121: if (TMR1IE && TMR1IF)
  4107  0032D0  A09D               	btfss	3997,0,c	;volatile
  4108  0032D2  D001               	goto	i2u746_41
  4109  0032D4  D001               	goto	i2u746_40
  4110  0032D6                     i2u746_41:
  4111  0032D6  D04F               	goto	i2l9229
  4112  0032D8                     i2u746_40:
  4113  0032D8  A09E               	btfss	3998,0,c	;volatile
  4114  0032DA  D001               	goto	i2u747_41
  4115  0032DC  D001               	goto	i2u747_40
  4116  0032DE                     i2u747_41:
  4117  0032DE  D04B               	goto	i2l9229
  4118  0032E0                     i2u747_40:
  4119  0032E0                     
  4120                           ;temp-clock_main.c: 122: {
  4121                           ;temp-clock_main.c: 123: TMR1IF = CLEAR;
  4122  0032E0  909E               	bcf	3998,0,c	;volatile
  4123                           
  4124                           ;temp-clock_main.c: 124: TMR1ON = 0;
  4125  0032E2  90CD               	bcf	4045,0,c	;volatile
  4126  0032E4                     
  4127                           ;temp-clock_main.c: 125: TMR1 = 0;
  4128  0032E4  0E00               	movlw	0
  4129  0032E6  6ECF               	movwf	4047,c	;volatile
  4130  0032E8  0E00               	movlw	0
  4131  0032EA  6ECE               	movwf	4046,c	;volatile
  4132  0032EC                     
  4133                           ;temp-clock_main.c: 126: if (++rtc_big_ticks > (15+1))
  4134  0032EC  0100               	movlb	0	; () banked
  4135  0032EE  0100               	movlb	0	; () banked
  4136  0032F0  4BD9               	infsnz	_rtc_big_ticks& (0+255),f,b
  4137  0032F2  2BDA               	incf	(_rtc_big_ticks+1)& (0+255),f,b
  4138  0032F4  0E11               	movlw	17
  4139  0032F6  0100               	movlb	0	; () banked
  4140  0032F8  5DD9               	subwf	_rtc_big_ticks& (0+255),w,b
  4141  0032FA  0E00               	movlw	0
  4142  0032FC  0100               	movlb	0	; () banked
  4143  0032FE  59DA               	subwfb	(_rtc_big_ticks+1)& (0+255),w,b
  4144  003300  A0D8               	btfss	status,0,c
  4145  003302  D001               	goto	i2u748_41
  4146  003304  D001               	goto	i2u748_40
  4147  003306                     i2u748_41:
  4148  003306  D035               	goto	i2l537
  4149  003308                     i2u748_40:
  4150  003308                     
  4151                           ; BSR set to: 0
  4152                           ;temp-clock_main.c: 127: {
  4153                           ;temp-clock_main.c: 128: rtc_big_ticks = 0;
  4154  003308  0E00               	movlw	0
  4155  00330A  0100               	movlb	0	; () banked
  4156  00330C  0100               	movlb	0	; () banked
  4157  00330E  6FDA               	movwf	(_rtc_big_ticks+1)& (0+255),b
  4158  003310  0E00               	movlw	0
  4159  003312  0100               	movlb	0	; () banked
  4160  003314  6FD9               	movwf	_rtc_big_ticks& (0+255),b
  4161                           
  4162                           ;temp-clock_main.c: 129: TMR1 = (65536-16960);
  4163  003316  0EBD               	movlw	189
  4164  003318  6ECF               	movwf	4047,c	;volatile
  4165  00331A  0EC0               	movlw	192
  4166  00331C  6ECE               	movwf	4046,c	;volatile
  4167  00331E                     
  4168                           ; BSR set to: 0
  4169                           ;temp-clock_main.c: 130: TMR1ON = 1;
  4170  00331E  80CD               	bsf	4045,0,c	;volatile
  4171  003320                     
  4172                           ; BSR set to: 0
  4173                           ;temp-clock_main.c: 132: tick(second);
  4174  003320  0100               	movlb	0	; () banked
  4175  003322  6F97               	movwf	??_isr& (0+255),b
  4176  003324  0E00               	movlw	0
  4177  003326  6E37               	movwf	?_tick,c
  4178  003328  0100               	movlb	0	; () banked
  4179  00332A  5197               	movf	??_isr& (0+255),w,b
  4180  00332C  ECB2  F01C         	call	_tick	;wreg free
  4181  003330                     
  4182                           ;temp-clock_main.c: 137: menu->printFn(menu->digits);
  4183  003330  0100               	movlb	0	; () banked
  4184  003332  EE20 F001          	lfsr	2,1
  4185  003336  0100               	movlb	0	; () banked
  4186  003338  51D7               	movf	_menu& (0+255),w,b
  4187  00333A  26D9               	addwf	fsr2l,f,c
  4188  00333C  0100               	movlb	0	; () banked
  4189  00333E  51D8               	movf	(_menu+1)& (0+255),w,b
  4190  003340  22DA               	addwfc	fsr2h,f,c
  4191  003342  50DF               	movf	indf2,w,c
  4192  003344  6E5F               	movwf	?_printRTC,c
  4193  003346  0100               	movlb	0	; () banked
  4194  003348  EE20 F003          	lfsr	2,3
  4195  00334C  0100               	movlb	0	; () banked
  4196  00334E  51D7               	movf	_menu& (0+255),w,b
  4197  003350  26D9               	addwf	fsr2l,f,c
  4198  003352  0100               	movlb	0	; () banked
  4199  003354  51D8               	movf	(_menu+1)& (0+255),w,b
  4200  003356  22DA               	addwfc	fsr2h,f,c
  4201  003358  D801               	call	i2u749_48
  4202  00335A  D00A               	goto	i2u749_49
  4203  00335C                     i2u749_48:
  4204  00335C  0005               	push	
  4205  00335E  6EFA               	movwf	pclath,c
  4206  003360  50DE               	movf	postinc2,w,c
  4207  003362  6EFD               	movwf	tosl,c
  4208  003364  50DE               	movf	postinc2,w,c
  4209  003366  6EFE               	movwf	tosh,c
  4210  003368  50F8               	movf	tblptru,w,c
  4211  00336A  6EFF               	movwf	tosu,c
  4212  00336C  50FA               	movf	pclath,w,c
  4213  00336E  0012               	return		;indir
  4214  003370                     i2u749_49:
  4215  003370                     
  4216                           ;temp-clock_main.c: 138: LATA5 = ~LATA5;
  4217  003370  7A89               	btg	3977,5,c	;volatile
  4218  003372                     i2l537:
  4219  003372  0004               	clrwdt		;# 
  4220  003374  D000               	goto	i2l9229
  4221  003376                     i2l9229:
  4222                           
  4223                           ;temp-clock_main.c: 142: }
  4224                           ;temp-clock_main.c: 144: if (TMR0IE && TMR0IF)
  4225  003376  AAF2               	btfss	intcon,5,c	;volatile
  4226  003378  D001               	goto	i2u750_41
  4227  00337A  D001               	goto	i2u750_40
  4228  00337C                     i2u750_41:
  4229  00337C  D036               	goto	i2l9245
  4230  00337E                     i2u750_40:
  4231  00337E  A4F2               	btfss	intcon,2,c	;volatile
  4232  003380  D001               	goto	i2u751_41
  4233  003382  D001               	goto	i2u751_40
  4234  003384                     i2u751_41:
  4235  003384  D032               	goto	i2l9245
  4236  003386                     i2u751_40:
  4237  003386                     
  4238                           ;temp-clock_main.c: 145: {
  4239                           ;temp-clock_main.c: 146: TMR0IF = CLEAR;
  4240  003386  94F2               	bcf	intcon,2,c	;volatile
  4241                           
  4242                           ;temp-clock_main.c: 147: TMR0ON = 0;
  4243  003388  9ED5               	bcf	4053,7,c	;volatile
  4244  00338A                     
  4245                           ;temp-clock_main.c: 148: TMR0 = 0;
  4246  00338A  0E00               	movlw	0
  4247  00338C  6ED7               	movwf	4055,c	;volatile
  4248  00338E  0E00               	movlw	0
  4249  003390  6ED6               	movwf	4054,c	;volatile
  4250  003392                     
  4251                           ;temp-clock_main.c: 149: if (++tmr0BigCounts > (0))
  4252  003392  0E01               	movlw	1
  4253  003394  0100               	movlb	0	; () banked
  4254  003396  0100               	movlb	0	; () banked
  4255  003398  27CF               	addwf	_tmr0BigCounts& (0+255),f,b
  4256  00339A  0E00               	movlw	0
  4257  00339C  0100               	movlb	0	; () banked
  4258  00339E  23D0               	addwfc	(_tmr0BigCounts+1)& (0+255),f,b
  4259  0033A0  0E00               	movlw	0
  4260  0033A2  0100               	movlb	0	; () banked
  4261  0033A4  23D1               	addwfc	(_tmr0BigCounts+2)& (0+255),f,b
  4262  0033A6  0E00               	movlw	0
  4263  0033A8  0100               	movlb	0	; () banked
  4264  0033AA  23D2               	addwfc	(_tmr0BigCounts+3)& (0+255),f,b
  4265  0033AC  0100               	movlb	0	; () banked
  4266  0033AE  51D2               	movf	(_tmr0BigCounts+3)& (0+255),w,b
  4267  0033B0  11CF               	iorwf	_tmr0BigCounts& (0+255),w,b
  4268  0033B2  11D0               	iorwf	(_tmr0BigCounts+1)& (0+255),w,b
  4269  0033B4  11D1               	iorwf	(_tmr0BigCounts+2)& (0+255),w,b
  4270  0033B6  B4D8               	btfsc	status,2,c
  4271  0033B8  D001               	goto	i2u752_41
  4272  0033BA  D001               	goto	i2u752_40
  4273  0033BC                     i2u752_41:
  4274  0033BC  D016               	goto	i2l9245
  4275  0033BE                     i2u752_40:
  4276  0033BE                     
  4277                           ; BSR set to: 0
  4278                           ;temp-clock_main.c: 150: {
  4279                           ;temp-clock_main.c: 151: tmr0BigCounts = 0;
  4280  0033BE  0E00               	movlw	0
  4281  0033C0  0100               	movlb	0	; () banked
  4282  0033C2  0100               	movlb	0	; () banked
  4283  0033C4  6FCF               	movwf	_tmr0BigCounts& (0+255),b
  4284  0033C6  0E00               	movlw	0
  4285  0033C8  0100               	movlb	0	; () banked
  4286  0033CA  6FD0               	movwf	(_tmr0BigCounts+1)& (0+255),b
  4287  0033CC  0E00               	movlw	0
  4288  0033CE  0100               	movlb	0	; () banked
  4289  0033D0  6FD1               	movwf	(_tmr0BigCounts+2)& (0+255),b
  4290  0033D2  0E00               	movlw	0
  4291  0033D4  0100               	movlb	0	; () banked
  4292  0033D6  6FD2               	movwf	(_tmr0BigCounts+3)& (0+255),b
  4293                           
  4294                           ;temp-clock_main.c: 152: TMR0 = (65536-32767);
  4295  0033D8  0E80               	movlw	128
  4296  0033DA  6ED7               	movwf	4055,c	;volatile
  4297  0033DC  0E01               	movlw	1
  4298  0033DE  6ED6               	movwf	4054,c	;volatile
  4299  0033E0                     
  4300                           ; BSR set to: 0
  4301                           ;temp-clock_main.c: 153: TMR0ON = 1;
  4302  0033E0  8ED5               	bsf	4053,7,c	;volatile
  4303  0033E2                     
  4304                           ; BSR set to: 0
  4305                           ;temp-clock_main.c: 155: buttons();
  4306  0033E2  ECC7  F007         	call	_buttons	;wreg free
  4307  0033E6  D001               	goto	i2l9245
  4308  0033E8  D000               	goto	i2l9245
  4309  0033EA                     i2l9245:
  4310                           
  4311                           ;temp-clock_main.c: 156: }
  4312                           ;temp-clock_main.c: 157: }
  4313                           ;temp-clock_main.c: 158: GIE = 1;
  4314  0033EA  8EF2               	bsf	intcon,7,c	;volatile
  4315  0033EC  C0A5  FFF5         	movff	??_isr+14,tablat
  4316  0033F0  C0A4  FFF8         	movff	??_isr+13,tblptru
  4317  0033F4  C0A3  FFF7         	movff	??_isr+12,tblptrh
  4318  0033F8  C0A2  FFF6         	movff	??_isr+11,tblptrl
  4319  0033FC  C0A1  FFF4         	movff	??_isr+10,prodh
  4320  003400  C0A0  FFF3         	movff	??_isr+9,prodl
  4321  003404  C09F  FFDA         	movff	??_isr+8,fsr2h
  4322  003408  C09E  FFD9         	movff	??_isr+7,fsr2l
  4323  00340C  C09D  FFE2         	movff	??_isr+6,fsr1h
  4324  003410  C09C  FFE1         	movff	??_isr+5,fsr1l
  4325  003414  C09B  FFEA         	movff	??_isr+4,fsr0h
  4326  003418  C09A  FFE9         	movff	??_isr+3,fsr0l
  4327  00341C  C099  FFFB         	movff	??_isr+2,pclatu
  4328  003420  C098  FFFA         	movff	??_isr+1,pclath
  4329  003424  0011               	retfie		f
  4330  003426                     __end_of_isr:
  4331                           	opt stack 0
  4332                           tosu	equ	0xFFF
  4333                           tosh	equ	0xFFE
  4334                           tosl	equ	0xFFD
  4335                           pclatu	equ	0xFFB
  4336                           pclath	equ	0xFFA
  4337                           tblptru	equ	0xFF8
  4338                           tblptrh	equ	0xFF7
  4339                           tblptrl	equ	0xFF6
  4340                           tablat	equ	0xFF5
  4341                           prodh	equ	0xFF4
  4342                           prodl	equ	0xFF3
  4343                           intcon	equ	0xFF2
  4344                           intcon2	equ	0xFF1
  4345                           postinc0	equ	0xFEE
  4346                           fsr0h	equ	0xFEA
  4347                           fsr0l	equ	0xFE9
  4348                           wreg	equ	0xFE8
  4349                           postdec1	equ	0xFE5
  4350                           fsr1h	equ	0xFE2
  4351                           fsr1l	equ	0xFE1
  4352                           indf2	equ	0xFDF
  4353                           postinc2	equ	0xFDE
  4354                           fsr2h	equ	0xFDA
  4355                           fsr2l	equ	0xFD9
  4356                           status	equ	0xFD8
  4357                           
  4358 ;; *************** function _buttons *****************
  4359 ;; Defined at:
  4360 ;;		line 24 in file "buttons.c"
  4361 ;; Parameters:    Size  Location     Type
  4362 ;;		None
  4363 ;; Auto vars:     Size  Location     Type
  4364 ;;		None
  4365 ;; Return value:  Size  Location     Type
  4366 ;;		None               void
  4367 ;; Registers used:
  4368 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4369 ;; Tracked objects:
  4370 ;;		On entry : 0/0
  4371 ;;		On exit  : 0/0
  4372 ;;		Unchanged: 0/0
  4373 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4374 ;;      Params:         0       0       0       0       0       0       0       0       0
  4375 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4376 ;;      Temps:          8       0       0       0       0       0       0       0       0
  4377 ;;      Totals:         8       0       0       0       0       0       0       0       0
  4378 ;;Total ram usage:        8 bytes
  4379 ;; Hardware stack levels used:    1
  4380 ;; Hardware stack levels required when called:    4
  4381 ;; This function calls:
  4382 ;;		_advState
  4383 ;;		_advMenu
  4384 ;;		i2_update
  4385 ;; This function is called by:
  4386 ;;		_isr
  4387 ;; This function uses a non-reentrant model
  4388 ;;
  4389                           
  4390                           	psect	text15
  4391  000F8E                     __ptext15:
  4392                           	opt stack 0
  4393  000F8E                     _buttons:
  4394                           	opt stack 21
  4395                           
  4396                           ;buttons.c: 25: waitcnt++;
  4397                           
  4398                           ;incstack = 0
  4399                           ;incstack = 0
  4400  000F8E  0E01               	movlw	1
  4401  000F90  0100               	movlb	0	; () banked
  4402  000F92  0100               	movlb	0	; () banked
  4403  000F94  27D3               	addwf	_waitcnt& (0+255),f,b
  4404  000F96  0E00               	movlw	0
  4405  000F98  0100               	movlb	0	; () banked
  4406  000F9A  23D4               	addwfc	(_waitcnt+1)& (0+255),f,b
  4407  000F9C  0E00               	movlw	0
  4408  000F9E  0100               	movlb	0	; () banked
  4409  000FA0  23D5               	addwfc	(_waitcnt+2)& (0+255),f,b
  4410  000FA2  0E00               	movlw	0
  4411  000FA4  0100               	movlb	0	; () banked
  4412  000FA6  23D6               	addwfc	(_waitcnt+3)& (0+255),f,b
  4413                           
  4414                           ; BSR set to: 0
  4415                           ;buttons.c: 27: LATC2 = 0;
  4416  000FA8  948B               	bcf	3979,2,c	;volatile
  4417                           
  4418                           ; BSR set to: 0
  4419                           ;buttons.c: 28: if ((( PORTB) & 0b1) && ((int32_t) (waitCnt[0] - waitcnt) <= 0))
  4420  000FAA  A081               	btfss	3969,0,c	;volatile
  4421  000FAC  D05A               	goto	i2l6385
  4422                           
  4423                           ; BSR set to: 0
  4424  000FAE  0100               	movlb	0	; () banked
  4425  000FB0  C0D3  F01F         	movff	_waitcnt,??_buttons
  4426  000FB4  0100               	movlb	0	; () banked
  4427  000FB6  C0D4  F020         	movff	_waitcnt+1,??_buttons+1
  4428  000FBA  0100               	movlb	0	; () banked
  4429  000FBC  C0D5  F021         	movff	_waitcnt+2,??_buttons+2
  4430  000FC0  0100               	movlb	0	; () banked
  4431  000FC2  C0D6  F022         	movff	_waitcnt+3,??_buttons+3
  4432  000FC6  1E1F               	comf	??_buttons,f,c
  4433  000FC8  1E20               	comf	??_buttons+1,f,c
  4434  000FCA  1E21               	comf	??_buttons+2,f,c
  4435  000FCC  1E22               	comf	??_buttons+3,f,c
  4436  000FCE  2A1F               	incf	??_buttons,f,c
  4437  000FD0  0E00               	movlw	0
  4438  000FD2  2220               	addwfc	??_buttons+1,f,c
  4439  000FD4  2221               	addwfc	??_buttons+2,f,c
  4440  000FD6  2222               	addwfc	??_buttons+3,f,c
  4441  000FD8  0100               	movlb	0	; () banked
  4442  000FDA  0100               	movlb	0	; () banked
  4443  000FDC  51A6               	movf	_waitCnt& (0+255),w,b
  4444  000FDE  241F               	addwf	??_buttons,w,c
  4445  000FE0  6E23               	movwf	(??_buttons+4)& (0+255),c
  4446  000FE2  0100               	movlb	0	; () banked
  4447  000FE4  0100               	movlb	0	; () banked
  4448  000FE6  51A7               	movf	(_waitCnt+1)& (0+255),w,b
  4449  000FE8  2020               	addwfc	??_buttons+1,w,c
  4450  000FEA  6E24               	movwf	(??_buttons+5)& (0+255),c
  4451  000FEC  0100               	movlb	0	; () banked
  4452  000FEE  0100               	movlb	0	; () banked
  4453  000FF0  51A8               	movf	(_waitCnt+2)& (0+255),w,b
  4454  000FF2  2021               	addwfc	??_buttons+2,w,c
  4455  000FF4  6E25               	movwf	(??_buttons+6)& (0+255),c
  4456  000FF6  0100               	movlb	0	; () banked
  4457  000FF8  0100               	movlb	0	; () banked
  4458  000FFA  51A9               	movf	(_waitCnt+3)& (0+255),w,b
  4459  000FFC  2022               	addwfc	??_buttons+3,w,c
  4460  000FFE  6E26               	movwf	(??_buttons+7)& (0+255),c
  4461  001000  5026               	movf	??_buttons+7,w,c
  4462  001002  0A80               	xorlw	128
  4463  001004  0F80               	addlw	128
  4464  001006  E108               	bnz	i2u469_45
  4465  001008  0E00               	movlw	0
  4466  00100A  5C25               	subwf	??_buttons+6,w,c
  4467  00100C  E105               	bnz	i2u469_45
  4468  00100E  0E00               	movlw	0
  4469  001010  5C24               	subwf	??_buttons+5,w,c
  4470  001012  E102               	bnz	i2u469_45
  4471  001014  0E01               	movlw	1
  4472  001016  5C23               	subwf	??_buttons+4,w,c
  4473  001018                     i2u469_45:
  4474  001018  B0D8               	btfsc	status,0,c
  4475  00101A  D023               	goto	i2l6385
  4476                           
  4477                           ; BSR set to: 0
  4478                           ;buttons.c: 29: {
  4479                           ;buttons.c: 30: waitCnt[0] = waitcnt + 15;
  4480  00101C  0E0F               	movlw	15
  4481  00101E  0100               	movlb	0	; () banked
  4482  001020  0100               	movlb	0	; () banked
  4483  001022  25D3               	addwf	_waitcnt& (0+255),w,b
  4484  001024  0100               	movlb	0	; () banked
  4485  001026  0100               	movlb	0	; () banked
  4486  001028  6FA6               	movwf	_waitCnt& (0+255),b
  4487  00102A  0E00               	movlw	0
  4488  00102C  0100               	movlb	0	; () banked
  4489  00102E  0100               	movlb	0	; () banked
  4490  001030  21D4               	addwfc	(_waitcnt+1)& (0+255),w,b
  4491  001032  0100               	movlb	0	; () banked
  4492  001034  6FA7               	movwf	(_waitCnt+1)& (0+255),b
  4493  001036  0E00               	movlw	0
  4494  001038  0100               	movlb	0	; () banked
  4495  00103A  0100               	movlb	0	; () banked
  4496  00103C  21D5               	addwfc	(_waitcnt+2)& (0+255),w,b
  4497  00103E  0100               	movlb	0	; () banked
  4498  001040  6FA8               	movwf	(_waitCnt+2)& (0+255),b
  4499  001042  0E00               	movlw	0
  4500  001044  0100               	movlb	0	; () banked
  4501  001046  0100               	movlb	0	; () banked
  4502  001048  21D6               	addwfc	(_waitcnt+3)& (0+255),w,b
  4503  00104A  0100               	movlb	0	; () banked
  4504  00104C  6FA9               	movwf	(_waitCnt+3)& (0+255),b
  4505                           
  4506                           ; BSR set to: 0
  4507                           ;buttons.c: 31: LATC2 = advState();
  4508  00104E  EC3B  F022         	call	_advState	;wreg free
  4509  001052  6E1F               	movwf	??_buttons& (0+255),c
  4510  001054  301F               	rrcf	??_buttons,w,c
  4511  001056  A0D8               	btfss	status,0,c
  4512  001058  D001               	bra	i2u470_45
  4513  00105A  848B               	bsf	3979,2,c	;volatile
  4514  00105C                     i2u470_45:
  4515  00105C  B0D8               	btfsc	status,0,c
  4516  00105E  D001               	bra	i2u470_46
  4517  001060  948B               	bcf	3979,2,c	;volatile
  4518  001062                     i2u470_46:
  4519  001062                     i2l6385:
  4520                           
  4521                           ;buttons.c: 32: }
  4522                           ;buttons.c: 33: if ((( PORTB) & 0b10) && ((int32_t) (waitCnt[1] - waitcnt) <= 0))
  4523  001062  A281               	btfss	3969,1,c	;volatile
  4524  001064  D065               	goto	i2l6393
  4525  001066  0100               	movlb	0	; () banked
  4526  001068  C0D3  F01F         	movff	_waitcnt,??_buttons
  4527  00106C  0100               	movlb	0	; () banked
  4528  00106E  C0D4  F020         	movff	_waitcnt+1,??_buttons+1
  4529  001072  0100               	movlb	0	; () banked
  4530  001074  C0D5  F021         	movff	_waitcnt+2,??_buttons+2
  4531  001078  0100               	movlb	0	; () banked
  4532  00107A  C0D6  F022         	movff	_waitcnt+3,??_buttons+3
  4533  00107E  1E1F               	comf	??_buttons,f,c
  4534  001080  1E20               	comf	??_buttons+1,f,c
  4535  001082  1E21               	comf	??_buttons+2,f,c
  4536  001084  1E22               	comf	??_buttons+3,f,c
  4537  001086  2A1F               	incf	??_buttons,f,c
  4538  001088  0E00               	movlw	0
  4539  00108A  2220               	addwfc	??_buttons+1,f,c
  4540  00108C  2221               	addwfc	??_buttons+2,f,c
  4541  00108E  2222               	addwfc	??_buttons+3,f,c
  4542  001090  0100               	movlb	0	; () banked
  4543  001092  0100               	movlb	0	; () banked
  4544  001094  51AA               	movf	(_waitCnt+4)& (0+255),w,b
  4545  001096  241F               	addwf	??_buttons,w,c
  4546  001098  6E23               	movwf	(??_buttons+4)& (0+255),c
  4547  00109A  0100               	movlb	0	; () banked
  4548  00109C  0100               	movlb	0	; () banked
  4549  00109E  51AB               	movf	(_waitCnt+5)& (0+255),w,b
  4550  0010A0  2020               	addwfc	??_buttons+1,w,c
  4551  0010A2  6E24               	movwf	(??_buttons+5)& (0+255),c
  4552  0010A4  0100               	movlb	0	; () banked
  4553  0010A6  0100               	movlb	0	; () banked
  4554  0010A8  51AC               	movf	(_waitCnt+6)& (0+255),w,b
  4555  0010AA  2021               	addwfc	??_buttons+2,w,c
  4556  0010AC  6E25               	movwf	(??_buttons+6)& (0+255),c
  4557  0010AE  0100               	movlb	0	; () banked
  4558  0010B0  0100               	movlb	0	; () banked
  4559  0010B2  51AD               	movf	(_waitCnt+7)& (0+255),w,b
  4560  0010B4  2022               	addwfc	??_buttons+3,w,c
  4561  0010B6  6E26               	movwf	(??_buttons+7)& (0+255),c
  4562  0010B8  5026               	movf	??_buttons+7,w,c
  4563  0010BA  0A80               	xorlw	128
  4564  0010BC  0F80               	addlw	128
  4565  0010BE  E108               	bnz	i2u472_45
  4566  0010C0  0E00               	movlw	0
  4567  0010C2  5C25               	subwf	??_buttons+6,w,c
  4568  0010C4  E105               	bnz	i2u472_45
  4569  0010C6  0E00               	movlw	0
  4570  0010C8  5C24               	subwf	??_buttons+5,w,c
  4571  0010CA  E102               	bnz	i2u472_45
  4572  0010CC  0E01               	movlw	1
  4573  0010CE  5C23               	subwf	??_buttons+4,w,c
  4574  0010D0                     i2u472_45:
  4575  0010D0  B0D8               	btfsc	status,0,c
  4576  0010D2  D02E               	goto	i2l6393
  4577                           
  4578                           ; BSR set to: 0
  4579                           ;buttons.c: 34: {
  4580                           ;buttons.c: 35: waitCnt[1] = waitcnt + 15;
  4581  0010D4  0E0F               	movlw	15
  4582  0010D6  0100               	movlb	0	; () banked
  4583  0010D8  0100               	movlb	0	; () banked
  4584  0010DA  25D3               	addwf	_waitcnt& (0+255),w,b
  4585  0010DC  0100               	movlb	0	; () banked
  4586  0010DE  0100               	movlb	0	; () banked
  4587  0010E0  6FAA               	movwf	(_waitCnt+4)& (0+255),b
  4588  0010E2  0E00               	movlw	0
  4589  0010E4  0100               	movlb	0	; () banked
  4590  0010E6  0100               	movlb	0	; () banked
  4591  0010E8  21D4               	addwfc	(_waitcnt+1)& (0+255),w,b
  4592  0010EA  0100               	movlb	0	; () banked
  4593  0010EC  6FAB               	movwf	(_waitCnt+5)& (0+255),b
  4594  0010EE  0E00               	movlw	0
  4595  0010F0  0100               	movlb	0	; () banked
  4596  0010F2  0100               	movlb	0	; () banked
  4597  0010F4  21D5               	addwfc	(_waitcnt+2)& (0+255),w,b
  4598  0010F6  0100               	movlb	0	; () banked
  4599  0010F8  6FAC               	movwf	(_waitCnt+6)& (0+255),b
  4600  0010FA  0E00               	movlw	0
  4601  0010FC  0100               	movlb	0	; () banked
  4602  0010FE  0100               	movlb	0	; () banked
  4603  001100  21D6               	addwfc	(_waitcnt+3)& (0+255),w,b
  4604  001102  0100               	movlb	0	; () banked
  4605  001104  6FAD               	movwf	(_waitCnt+7)& (0+255),b
  4606                           
  4607                           ;buttons.c: 36: screen.brightness++;
  4608  001106  0E01               	movlw	1
  4609  001108  6E1F               	movwf	??_buttons& (0+255),c
  4610  00110A  0100               	movlb	0	; () banked
  4611  00110C  0100               	movlb	0	; () banked
  4612  00110E  51E7               	movf	(_screen+9)& (0+255),w,b
  4613  001110  0B0F               	andlw	15
  4614  001112  6E20               	movwf	(??_buttons+1)& (0+255),c
  4615  001114  501F               	movf	??_buttons,w,c
  4616  001116  2620               	addwf	??_buttons+1,f,c
  4617  001118  0100               	movlb	0	; () banked
  4618  00111A  0100               	movlb	0	; () banked
  4619  00111C  51E7               	movf	(_screen+9)& (0+255),w,b
  4620  00111E  1820               	xorwf	(??_buttons+1)& (0+255),w,c
  4621  001120  0BF0               	andlw	-16
  4622  001122  1820               	xorwf	(??_buttons+1)& (0+255),w,c
  4623  001124  0100               	movlb	0	; () banked
  4624  001126  0100               	movlb	0	; () banked
  4625  001128  6FE7               	movwf	(_screen+9)& (0+255),b
  4626                           
  4627                           ; BSR set to: 0
  4628                           ;buttons.c: 37: screen.changed |= (1 << 10);
  4629  00112A  0100               	movlb	0	; () banked
  4630  00112C  0100               	movlb	0	; () banked
  4631  00112E  85EA               	bsf	(_screen+12)& (0+255),2,b
  4632  001130                     i2l6393:
  4633                           
  4634                           ;buttons.c: 38: }
  4635                           ;buttons.c: 39: if ((( PORTB) & 0b100) && ((int32_t) (waitCnt[2] - waitcnt) <= 0))
  4636  001130  A481               	btfss	3969,2,c	;volatile
  4637  001132  D052               	goto	i2l6401
  4638  001134  0100               	movlb	0	; () banked
  4639  001136  C0D3  F01F         	movff	_waitcnt,??_buttons
  4640  00113A  0100               	movlb	0	; () banked
  4641  00113C  C0D4  F020         	movff	_waitcnt+1,??_buttons+1
  4642  001140  0100               	movlb	0	; () banked
  4643  001142  C0D5  F021         	movff	_waitcnt+2,??_buttons+2
  4644  001146  0100               	movlb	0	; () banked
  4645  001148  C0D6  F022         	movff	_waitcnt+3,??_buttons+3
  4646  00114C  1E1F               	comf	??_buttons,f,c
  4647  00114E  1E20               	comf	??_buttons+1,f,c
  4648  001150  1E21               	comf	??_buttons+2,f,c
  4649  001152  1E22               	comf	??_buttons+3,f,c
  4650  001154  2A1F               	incf	??_buttons,f,c
  4651  001156  0E00               	movlw	0
  4652  001158  2220               	addwfc	??_buttons+1,f,c
  4653  00115A  2221               	addwfc	??_buttons+2,f,c
  4654  00115C  2222               	addwfc	??_buttons+3,f,c
  4655  00115E  0100               	movlb	0	; () banked
  4656  001160  0100               	movlb	0	; () banked
  4657  001162  51AE               	movf	(_waitCnt+8)& (0+255),w,b
  4658  001164  241F               	addwf	??_buttons,w,c
  4659  001166  6E23               	movwf	(??_buttons+4)& (0+255),c
  4660  001168  0100               	movlb	0	; () banked
  4661  00116A  0100               	movlb	0	; () banked
  4662  00116C  51AF               	movf	(_waitCnt+9)& (0+255),w,b
  4663  00116E  2020               	addwfc	??_buttons+1,w,c
  4664  001170  6E24               	movwf	(??_buttons+5)& (0+255),c
  4665  001172  0100               	movlb	0	; () banked
  4666  001174  0100               	movlb	0	; () banked
  4667  001176  51B0               	movf	(_waitCnt+10)& (0+255),w,b
  4668  001178  2021               	addwfc	??_buttons+2,w,c
  4669  00117A  6E25               	movwf	(??_buttons+6)& (0+255),c
  4670  00117C  0100               	movlb	0	; () banked
  4671  00117E  0100               	movlb	0	; () banked
  4672  001180  51B1               	movf	(_waitCnt+11)& (0+255),w,b
  4673  001182  2022               	addwfc	??_buttons+3,w,c
  4674  001184  6E26               	movwf	(??_buttons+7)& (0+255),c
  4675  001186  5026               	movf	??_buttons+7,w,c
  4676  001188  0A80               	xorlw	128
  4677  00118A  0F80               	addlw	128
  4678  00118C  E108               	bnz	i2u474_45
  4679  00118E  0E00               	movlw	0
  4680  001190  5C25               	subwf	??_buttons+6,w,c
  4681  001192  E105               	bnz	i2u474_45
  4682  001194  0E00               	movlw	0
  4683  001196  5C24               	subwf	??_buttons+5,w,c
  4684  001198  E102               	bnz	i2u474_45
  4685  00119A  0E01               	movlw	1
  4686  00119C  5C23               	subwf	??_buttons+4,w,c
  4687  00119E                     i2u474_45:
  4688  00119E  B0D8               	btfsc	status,0,c
  4689  0011A0  D01B               	goto	i2l6401
  4690                           
  4691                           ; BSR set to: 0
  4692                           ;buttons.c: 40: {
  4693                           ;buttons.c: 41: waitCnt[2] = waitcnt + 15;
  4694  0011A2  0E0F               	movlw	15
  4695  0011A4  0100               	movlb	0	; () banked
  4696  0011A6  0100               	movlb	0	; () banked
  4697  0011A8  25D3               	addwf	_waitcnt& (0+255),w,b
  4698  0011AA  0100               	movlb	0	; () banked
  4699  0011AC  0100               	movlb	0	; () banked
  4700  0011AE  6FAE               	movwf	(_waitCnt+8)& (0+255),b
  4701  0011B0  0E00               	movlw	0
  4702  0011B2  0100               	movlb	0	; () banked
  4703  0011B4  0100               	movlb	0	; () banked
  4704  0011B6  21D4               	addwfc	(_waitcnt+1)& (0+255),w,b
  4705  0011B8  0100               	movlb	0	; () banked
  4706  0011BA  6FAF               	movwf	(_waitCnt+9)& (0+255),b
  4707  0011BC  0E00               	movlw	0
  4708  0011BE  0100               	movlb	0	; () banked
  4709  0011C0  0100               	movlb	0	; () banked
  4710  0011C2  21D5               	addwfc	(_waitcnt+2)& (0+255),w,b
  4711  0011C4  0100               	movlb	0	; () banked
  4712  0011C6  6FB0               	movwf	(_waitCnt+10)& (0+255),b
  4713  0011C8  0E00               	movlw	0
  4714  0011CA  0100               	movlb	0	; () banked
  4715  0011CC  0100               	movlb	0	; () banked
  4716  0011CE  21D6               	addwfc	(_waitcnt+3)& (0+255),w,b
  4717  0011D0  0100               	movlb	0	; () banked
  4718  0011D2  6FB1               	movwf	(_waitCnt+11)& (0+255),b
  4719                           
  4720                           ; BSR set to: 0
  4721                           ;buttons.c: 42: advMenu();
  4722  0011D4  EC9E  F01F         	call	_advMenu	;wreg free
  4723  0011D8                     i2l6401:
  4724                           
  4725                           ;buttons.c: 43: }
  4726                           ;buttons.c: 44: if ((( PORTB) & 0b1000) && ((int32_t) (waitCnt[3] - waitcnt) <= 0))
  4727  0011D8  A681               	btfss	3969,3,c	;volatile
  4728  0011DA  D065               	goto	i2l6409
  4729  0011DC  0100               	movlb	0	; () banked
  4730  0011DE  C0D3  F01F         	movff	_waitcnt,??_buttons
  4731  0011E2  0100               	movlb	0	; () banked
  4732  0011E4  C0D4  F020         	movff	_waitcnt+1,??_buttons+1
  4733  0011E8  0100               	movlb	0	; () banked
  4734  0011EA  C0D5  F021         	movff	_waitcnt+2,??_buttons+2
  4735  0011EE  0100               	movlb	0	; () banked
  4736  0011F0  C0D6  F022         	movff	_waitcnt+3,??_buttons+3
  4737  0011F4  1E1F               	comf	??_buttons,f,c
  4738  0011F6  1E20               	comf	??_buttons+1,f,c
  4739  0011F8  1E21               	comf	??_buttons+2,f,c
  4740  0011FA  1E22               	comf	??_buttons+3,f,c
  4741  0011FC  2A1F               	incf	??_buttons,f,c
  4742  0011FE  0E00               	movlw	0
  4743  001200  2220               	addwfc	??_buttons+1,f,c
  4744  001202  2221               	addwfc	??_buttons+2,f,c
  4745  001204  2222               	addwfc	??_buttons+3,f,c
  4746  001206  0100               	movlb	0	; () banked
  4747  001208  0100               	movlb	0	; () banked
  4748  00120A  51B2               	movf	(_waitCnt+12)& (0+255),w,b
  4749  00120C  241F               	addwf	??_buttons,w,c
  4750  00120E  6E23               	movwf	(??_buttons+4)& (0+255),c
  4751  001210  0100               	movlb	0	; () banked
  4752  001212  0100               	movlb	0	; () banked
  4753  001214  51B3               	movf	(_waitCnt+13)& (0+255),w,b
  4754  001216  2020               	addwfc	??_buttons+1,w,c
  4755  001218  6E24               	movwf	(??_buttons+5)& (0+255),c
  4756  00121A  0100               	movlb	0	; () banked
  4757  00121C  0100               	movlb	0	; () banked
  4758  00121E  51B4               	movf	(_waitCnt+14)& (0+255),w,b
  4759  001220  2021               	addwfc	??_buttons+2,w,c
  4760  001222  6E25               	movwf	(??_buttons+6)& (0+255),c
  4761  001224  0100               	movlb	0	; () banked
  4762  001226  0100               	movlb	0	; () banked
  4763  001228  51B5               	movf	(_waitCnt+15)& (0+255),w,b
  4764  00122A  2022               	addwfc	??_buttons+3,w,c
  4765  00122C  6E26               	movwf	(??_buttons+7)& (0+255),c
  4766  00122E  5026               	movf	??_buttons+7,w,c
  4767  001230  0A80               	xorlw	128
  4768  001232  0F80               	addlw	128
  4769  001234  E108               	bnz	i2u476_45
  4770  001236  0E00               	movlw	0
  4771  001238  5C25               	subwf	??_buttons+6,w,c
  4772  00123A  E105               	bnz	i2u476_45
  4773  00123C  0E00               	movlw	0
  4774  00123E  5C24               	subwf	??_buttons+5,w,c
  4775  001240  E102               	bnz	i2u476_45
  4776  001242  0E01               	movlw	1
  4777  001244  5C23               	subwf	??_buttons+4,w,c
  4778  001246                     i2u476_45:
  4779  001246  B0D8               	btfsc	status,0,c
  4780  001248  D02E               	goto	i2l6409
  4781                           
  4782                           ; BSR set to: 0
  4783                           ;buttons.c: 45: {
  4784                           ;buttons.c: 46: waitCnt[3] = waitcnt + 15;
  4785  00124A  0E0F               	movlw	15
  4786  00124C  0100               	movlb	0	; () banked
  4787  00124E  0100               	movlb	0	; () banked
  4788  001250  25D3               	addwf	_waitcnt& (0+255),w,b
  4789  001252  0100               	movlb	0	; () banked
  4790  001254  0100               	movlb	0	; () banked
  4791  001256  6FB2               	movwf	(_waitCnt+12)& (0+255),b
  4792  001258  0E00               	movlw	0
  4793  00125A  0100               	movlb	0	; () banked
  4794  00125C  0100               	movlb	0	; () banked
  4795  00125E  21D4               	addwfc	(_waitcnt+1)& (0+255),w,b
  4796  001260  0100               	movlb	0	; () banked
  4797  001262  6FB3               	movwf	(_waitCnt+13)& (0+255),b
  4798  001264  0E00               	movlw	0
  4799  001266  0100               	movlb	0	; () banked
  4800  001268  0100               	movlb	0	; () banked
  4801  00126A  21D5               	addwfc	(_waitcnt+2)& (0+255),w,b
  4802  00126C  0100               	movlb	0	; () banked
  4803  00126E  6FB4               	movwf	(_waitCnt+14)& (0+255),b
  4804  001270  0E00               	movlw	0
  4805  001272  0100               	movlb	0	; () banked
  4806  001274  0100               	movlb	0	; () banked
  4807  001276  21D6               	addwfc	(_waitcnt+3)& (0+255),w,b
  4808  001278  0100               	movlb	0	; () banked
  4809  00127A  6FB5               	movwf	(_waitCnt+15)& (0+255),b
  4810                           
  4811                           ;buttons.c: 47: screen.brightness--;
  4812  00127C  0E01               	movlw	1
  4813  00127E  6E1F               	movwf	??_buttons& (0+255),c
  4814  001280  0100               	movlb	0	; () banked
  4815  001282  0100               	movlb	0	; () banked
  4816  001284  51E7               	movf	(_screen+9)& (0+255),w,b
  4817  001286  0B0F               	andlw	15
  4818  001288  6E20               	movwf	(??_buttons+1)& (0+255),c
  4819  00128A  501F               	movf	??_buttons,w,c
  4820  00128C  5E20               	subwf	??_buttons+1,f,c
  4821  00128E  0100               	movlb	0	; () banked
  4822  001290  0100               	movlb	0	; () banked
  4823  001292  51E7               	movf	(_screen+9)& (0+255),w,b
  4824  001294  1820               	xorwf	(??_buttons+1)& (0+255),w,c
  4825  001296  0BF0               	andlw	-16
  4826  001298  1820               	xorwf	(??_buttons+1)& (0+255),w,c
  4827  00129A  0100               	movlb	0	; () banked
  4828  00129C  0100               	movlb	0	; () banked
  4829  00129E  6FE7               	movwf	(_screen+9)& (0+255),b
  4830                           
  4831                           ; BSR set to: 0
  4832                           ;buttons.c: 48: screen.changed |= (1 << 10);
  4833  0012A0  0100               	movlb	0	; () banked
  4834  0012A2  0100               	movlb	0	; () banked
  4835  0012A4  85EA               	bsf	(_screen+12)& (0+255),2,b
  4836  0012A6                     i2l6409:
  4837                           
  4838                           ;buttons.c: 49: }
  4839                           ;buttons.c: 50: LATC0 = 0;
  4840  0012A6  908B               	bcf	3979,0,c	;volatile
  4841                           
  4842                           ;buttons.c: 51: if ((( PORTB) & 0b10000) && ((int32_t) (waitCnt[4] - waitcnt) <= 0))
  4843  0012A8  A881               	btfss	3969,4,c	;volatile
  4844  0012AA  D051               	goto	i2l6419
  4845  0012AC  0100               	movlb	0	; () banked
  4846  0012AE  C0D3  F01F         	movff	_waitcnt,??_buttons
  4847  0012B2  0100               	movlb	0	; () banked
  4848  0012B4  C0D4  F020         	movff	_waitcnt+1,??_buttons+1
  4849  0012B8  0100               	movlb	0	; () banked
  4850  0012BA  C0D5  F021         	movff	_waitcnt+2,??_buttons+2
  4851  0012BE  0100               	movlb	0	; () banked
  4852  0012C0  C0D6  F022         	movff	_waitcnt+3,??_buttons+3
  4853  0012C4  1E1F               	comf	??_buttons,f,c
  4854  0012C6  1E20               	comf	??_buttons+1,f,c
  4855  0012C8  1E21               	comf	??_buttons+2,f,c
  4856  0012CA  1E22               	comf	??_buttons+3,f,c
  4857  0012CC  2A1F               	incf	??_buttons,f,c
  4858  0012CE  0E00               	movlw	0
  4859  0012D0  2220               	addwfc	??_buttons+1,f,c
  4860  0012D2  2221               	addwfc	??_buttons+2,f,c
  4861  0012D4  2222               	addwfc	??_buttons+3,f,c
  4862  0012D6  0100               	movlb	0	; () banked
  4863  0012D8  0100               	movlb	0	; () banked
  4864  0012DA  51B6               	movf	(_waitCnt+16)& (0+255),w,b
  4865  0012DC  241F               	addwf	??_buttons,w,c
  4866  0012DE  6E23               	movwf	(??_buttons+4)& (0+255),c
  4867  0012E0  0100               	movlb	0	; () banked
  4868  0012E2  0100               	movlb	0	; () banked
  4869  0012E4  51B7               	movf	(_waitCnt+17)& (0+255),w,b
  4870  0012E6  2020               	addwfc	??_buttons+1,w,c
  4871  0012E8  6E24               	movwf	(??_buttons+5)& (0+255),c
  4872  0012EA  0100               	movlb	0	; () banked
  4873  0012EC  0100               	movlb	0	; () banked
  4874  0012EE  51B8               	movf	(_waitCnt+18)& (0+255),w,b
  4875  0012F0  2021               	addwfc	??_buttons+2,w,c
  4876  0012F2  6E25               	movwf	(??_buttons+6)& (0+255),c
  4877  0012F4  0100               	movlb	0	; () banked
  4878  0012F6  0100               	movlb	0	; () banked
  4879  0012F8  51B9               	movf	(_waitCnt+19)& (0+255),w,b
  4880  0012FA  2022               	addwfc	??_buttons+3,w,c
  4881  0012FC  6E26               	movwf	(??_buttons+7)& (0+255),c
  4882  0012FE  5026               	movf	??_buttons+7,w,c
  4883  001300  0A80               	xorlw	128
  4884  001302  0F80               	addlw	128
  4885  001304  E108               	bnz	i2u478_45
  4886  001306  0E00               	movlw	0
  4887  001308  5C25               	subwf	??_buttons+6,w,c
  4888  00130A  E105               	bnz	i2u478_45
  4889  00130C  0E00               	movlw	0
  4890  00130E  5C24               	subwf	??_buttons+5,w,c
  4891  001310  E102               	bnz	i2u478_45
  4892  001312  0E01               	movlw	1
  4893  001314  5C23               	subwf	??_buttons+4,w,c
  4894  001316                     i2u478_45:
  4895  001316  B0D8               	btfsc	status,0,c
  4896  001318  D01A               	goto	i2l6419
  4897                           
  4898                           ; BSR set to: 0
  4899                           ;buttons.c: 52: {
  4900                           ;buttons.c: 53: waitCnt[4] = waitcnt + 15;
  4901  00131A  0E0F               	movlw	15
  4902  00131C  0100               	movlb	0	; () banked
  4903  00131E  0100               	movlb	0	; () banked
  4904  001320  25D3               	addwf	_waitcnt& (0+255),w,b
  4905  001322  0100               	movlb	0	; () banked
  4906  001324  0100               	movlb	0	; () banked
  4907  001326  6FB6               	movwf	(_waitCnt+16)& (0+255),b
  4908  001328  0E00               	movlw	0
  4909  00132A  0100               	movlb	0	; () banked
  4910  00132C  0100               	movlb	0	; () banked
  4911  00132E  21D4               	addwfc	(_waitcnt+1)& (0+255),w,b
  4912  001330  0100               	movlb	0	; () banked
  4913  001332  6FB7               	movwf	(_waitCnt+17)& (0+255),b
  4914  001334  0E00               	movlw	0
  4915  001336  0100               	movlb	0	; () banked
  4916  001338  0100               	movlb	0	; () banked
  4917  00133A  21D5               	addwfc	(_waitcnt+2)& (0+255),w,b
  4918  00133C  0100               	movlb	0	; () banked
  4919  00133E  6FB8               	movwf	(_waitCnt+18)& (0+255),b
  4920  001340  0E00               	movlw	0
  4921  001342  0100               	movlb	0	; () banked
  4922  001344  0100               	movlb	0	; () banked
  4923  001346  21D6               	addwfc	(_waitcnt+3)& (0+255),w,b
  4924  001348  0100               	movlb	0	; () banked
  4925  00134A  6FB9               	movwf	(_waitCnt+19)& (0+255),b
  4926                           
  4927                           ; BSR set to: 0
  4928                           ;buttons.c: 54: LATC0 = 1;
  4929  00134C  808B               	bsf	3979,0,c	;volatile
  4930  00134E                     i2l6419:
  4931                           
  4932                           ;buttons.c: 55: }
  4933                           ;buttons.c: 56: if ((( PORTB) & 0b100000) && ((int32_t) (waitCnt[5] - waitcnt) <= 0))
  4934  00134E  AA81               	btfss	3969,5,c	;volatile
  4935  001350  D050               	goto	i2l6425
  4936  001352  0100               	movlb	0	; () banked
  4937  001354  C0D3  F01F         	movff	_waitcnt,??_buttons
  4938  001358  0100               	movlb	0	; () banked
  4939  00135A  C0D4  F020         	movff	_waitcnt+1,??_buttons+1
  4940  00135E  0100               	movlb	0	; () banked
  4941  001360  C0D5  F021         	movff	_waitcnt+2,??_buttons+2
  4942  001364  0100               	movlb	0	; () banked
  4943  001366  C0D6  F022         	movff	_waitcnt+3,??_buttons+3
  4944  00136A  1E1F               	comf	??_buttons,f,c
  4945  00136C  1E20               	comf	??_buttons+1,f,c
  4946  00136E  1E21               	comf	??_buttons+2,f,c
  4947  001370  1E22               	comf	??_buttons+3,f,c
  4948  001372  2A1F               	incf	??_buttons,f,c
  4949  001374  0E00               	movlw	0
  4950  001376  2220               	addwfc	??_buttons+1,f,c
  4951  001378  2221               	addwfc	??_buttons+2,f,c
  4952  00137A  2222               	addwfc	??_buttons+3,f,c
  4953  00137C  0100               	movlb	0	; () banked
  4954  00137E  0100               	movlb	0	; () banked
  4955  001380  51BA               	movf	(_waitCnt+20)& (0+255),w,b
  4956  001382  241F               	addwf	??_buttons,w,c
  4957  001384  6E23               	movwf	(??_buttons+4)& (0+255),c
  4958  001386  0100               	movlb	0	; () banked
  4959  001388  0100               	movlb	0	; () banked
  4960  00138A  51BB               	movf	(_waitCnt+21)& (0+255),w,b
  4961  00138C  2020               	addwfc	??_buttons+1,w,c
  4962  00138E  6E24               	movwf	(??_buttons+5)& (0+255),c
  4963  001390  0100               	movlb	0	; () banked
  4964  001392  0100               	movlb	0	; () banked
  4965  001394  51BC               	movf	(_waitCnt+22)& (0+255),w,b
  4966  001396  2021               	addwfc	??_buttons+2,w,c
  4967  001398  6E25               	movwf	(??_buttons+6)& (0+255),c
  4968  00139A  0100               	movlb	0	; () banked
  4969  00139C  0100               	movlb	0	; () banked
  4970  00139E  51BD               	movf	(_waitCnt+23)& (0+255),w,b
  4971  0013A0  2022               	addwfc	??_buttons+3,w,c
  4972  0013A2  6E26               	movwf	(??_buttons+7)& (0+255),c
  4973  0013A4  5026               	movf	??_buttons+7,w,c
  4974  0013A6  0A80               	xorlw	128
  4975  0013A8  0F80               	addlw	128
  4976  0013AA  E108               	bnz	i2u480_45
  4977  0013AC  0E00               	movlw	0
  4978  0013AE  5C25               	subwf	??_buttons+6,w,c
  4979  0013B0  E105               	bnz	i2u480_45
  4980  0013B2  0E00               	movlw	0
  4981  0013B4  5C24               	subwf	??_buttons+5,w,c
  4982  0013B6  E102               	bnz	i2u480_45
  4983  0013B8  0E01               	movlw	1
  4984  0013BA  5C23               	subwf	??_buttons+4,w,c
  4985  0013BC                     i2u480_45:
  4986  0013BC  B0D8               	btfsc	status,0,c
  4987  0013BE  D019               	goto	i2l6425
  4988                           
  4989                           ; BSR set to: 0
  4990                           ;buttons.c: 57: {
  4991                           ;buttons.c: 58: waitCnt[5] = waitcnt + 15;
  4992  0013C0  0E0F               	movlw	15
  4993  0013C2  0100               	movlb	0	; () banked
  4994  0013C4  0100               	movlb	0	; () banked
  4995  0013C6  25D3               	addwf	_waitcnt& (0+255),w,b
  4996  0013C8  0100               	movlb	0	; () banked
  4997  0013CA  0100               	movlb	0	; () banked
  4998  0013CC  6FBA               	movwf	(_waitCnt+20)& (0+255),b
  4999  0013CE  0E00               	movlw	0
  5000  0013D0  0100               	movlb	0	; () banked
  5001  0013D2  0100               	movlb	0	; () banked
  5002  0013D4  21D4               	addwfc	(_waitcnt+1)& (0+255),w,b
  5003  0013D6  0100               	movlb	0	; () banked
  5004  0013D8  6FBB               	movwf	(_waitCnt+21)& (0+255),b
  5005  0013DA  0E00               	movlw	0
  5006  0013DC  0100               	movlb	0	; () banked
  5007  0013DE  0100               	movlb	0	; () banked
  5008  0013E0  21D5               	addwfc	(_waitcnt+2)& (0+255),w,b
  5009  0013E2  0100               	movlb	0	; () banked
  5010  0013E4  6FBC               	movwf	(_waitCnt+22)& (0+255),b
  5011  0013E6  0E00               	movlw	0
  5012  0013E8  0100               	movlb	0	; () banked
  5013  0013EA  0100               	movlb	0	; () banked
  5014  0013EC  21D6               	addwfc	(_waitcnt+3)& (0+255),w,b
  5015  0013EE  0100               	movlb	0	; () banked
  5016  0013F0  6FBD               	movwf	(_waitCnt+23)& (0+255),b
  5017  0013F2                     i2l6425:
  5018                           
  5019                           ;buttons.c: 59: }
  5020                           ;buttons.c: 60: if ((( PORTB) & 0b1000000) && ((int32_t) (waitCnt[6] - waitcnt) <= 0))
  5021  0013F2  AC81               	btfss	3969,6,c	;volatile
  5022  0013F4  D050               	goto	i2l6431
  5023  0013F6  0100               	movlb	0	; () banked
  5024  0013F8  C0D3  F01F         	movff	_waitcnt,??_buttons
  5025  0013FC  0100               	movlb	0	; () banked
  5026  0013FE  C0D4  F020         	movff	_waitcnt+1,??_buttons+1
  5027  001402  0100               	movlb	0	; () banked
  5028  001404  C0D5  F021         	movff	_waitcnt+2,??_buttons+2
  5029  001408  0100               	movlb	0	; () banked
  5030  00140A  C0D6  F022         	movff	_waitcnt+3,??_buttons+3
  5031  00140E  1E1F               	comf	??_buttons,f,c
  5032  001410  1E20               	comf	??_buttons+1,f,c
  5033  001412  1E21               	comf	??_buttons+2,f,c
  5034  001414  1E22               	comf	??_buttons+3,f,c
  5035  001416  2A1F               	incf	??_buttons,f,c
  5036  001418  0E00               	movlw	0
  5037  00141A  2220               	addwfc	??_buttons+1,f,c
  5038  00141C  2221               	addwfc	??_buttons+2,f,c
  5039  00141E  2222               	addwfc	??_buttons+3,f,c
  5040  001420  0100               	movlb	0	; () banked
  5041  001422  0100               	movlb	0	; () banked
  5042  001424  51BE               	movf	(_waitCnt+24)& (0+255),w,b
  5043  001426  241F               	addwf	??_buttons,w,c
  5044  001428  6E23               	movwf	(??_buttons+4)& (0+255),c
  5045  00142A  0100               	movlb	0	; () banked
  5046  00142C  0100               	movlb	0	; () banked
  5047  00142E  51BF               	movf	(_waitCnt+25)& (0+255),w,b
  5048  001430  2020               	addwfc	??_buttons+1,w,c
  5049  001432  6E24               	movwf	(??_buttons+5)& (0+255),c
  5050  001434  0100               	movlb	0	; () banked
  5051  001436  0100               	movlb	0	; () banked
  5052  001438  51C0               	movf	(_waitCnt+26)& (0+255),w,b
  5053  00143A  2021               	addwfc	??_buttons+2,w,c
  5054  00143C  6E25               	movwf	(??_buttons+6)& (0+255),c
  5055  00143E  0100               	movlb	0	; () banked
  5056  001440  0100               	movlb	0	; () banked
  5057  001442  51C1               	movf	(_waitCnt+27)& (0+255),w,b
  5058  001444  2022               	addwfc	??_buttons+3,w,c
  5059  001446  6E26               	movwf	(??_buttons+7)& (0+255),c
  5060  001448  5026               	movf	??_buttons+7,w,c
  5061  00144A  0A80               	xorlw	128
  5062  00144C  0F80               	addlw	128
  5063  00144E  E108               	bnz	i2u482_45
  5064  001450  0E00               	movlw	0
  5065  001452  5C25               	subwf	??_buttons+6,w,c
  5066  001454  E105               	bnz	i2u482_45
  5067  001456  0E00               	movlw	0
  5068  001458  5C24               	subwf	??_buttons+5,w,c
  5069  00145A  E102               	bnz	i2u482_45
  5070  00145C  0E01               	movlw	1
  5071  00145E  5C23               	subwf	??_buttons+4,w,c
  5072  001460                     i2u482_45:
  5073  001460  B0D8               	btfsc	status,0,c
  5074  001462  D019               	goto	i2l6431
  5075                           
  5076                           ; BSR set to: 0
  5077                           ;buttons.c: 61: {
  5078                           ;buttons.c: 62: waitCnt[6] = waitcnt + 15;
  5079  001464  0E0F               	movlw	15
  5080  001466  0100               	movlb	0	; () banked
  5081  001468  0100               	movlb	0	; () banked
  5082  00146A  25D3               	addwf	_waitcnt& (0+255),w,b
  5083  00146C  0100               	movlb	0	; () banked
  5084  00146E  0100               	movlb	0	; () banked
  5085  001470  6FBE               	movwf	(_waitCnt+24)& (0+255),b
  5086  001472  0E00               	movlw	0
  5087  001474  0100               	movlb	0	; () banked
  5088  001476  0100               	movlb	0	; () banked
  5089  001478  21D4               	addwfc	(_waitcnt+1)& (0+255),w,b
  5090  00147A  0100               	movlb	0	; () banked
  5091  00147C  6FBF               	movwf	(_waitCnt+25)& (0+255),b
  5092  00147E  0E00               	movlw	0
  5093  001480  0100               	movlb	0	; () banked
  5094  001482  0100               	movlb	0	; () banked
  5095  001484  21D5               	addwfc	(_waitcnt+2)& (0+255),w,b
  5096  001486  0100               	movlb	0	; () banked
  5097  001488  6FC0               	movwf	(_waitCnt+26)& (0+255),b
  5098  00148A  0E00               	movlw	0
  5099  00148C  0100               	movlb	0	; () banked
  5100  00148E  0100               	movlb	0	; () banked
  5101  001490  21D6               	addwfc	(_waitcnt+3)& (0+255),w,b
  5102  001492  0100               	movlb	0	; () banked
  5103  001494  6FC1               	movwf	(_waitCnt+27)& (0+255),b
  5104  001496                     i2l6431:
  5105                           
  5106                           ;buttons.c: 63: }
  5107                           ;buttons.c: 64: if ((( PORTB) & 0b10000000) && ((int32_t) (waitCnt[7] - waitcnt) <= 0))
  5108  001496  AE81               	btfss	3969,7,c	;volatile
  5109  001498  D050               	goto	i2l6437
  5110  00149A  0100               	movlb	0	; () banked
  5111  00149C  C0D3  F01F         	movff	_waitcnt,??_buttons
  5112  0014A0  0100               	movlb	0	; () banked
  5113  0014A2  C0D4  F020         	movff	_waitcnt+1,??_buttons+1
  5114  0014A6  0100               	movlb	0	; () banked
  5115  0014A8  C0D5  F021         	movff	_waitcnt+2,??_buttons+2
  5116  0014AC  0100               	movlb	0	; () banked
  5117  0014AE  C0D6  F022         	movff	_waitcnt+3,??_buttons+3
  5118  0014B2  1E1F               	comf	??_buttons,f,c
  5119  0014B4  1E20               	comf	??_buttons+1,f,c
  5120  0014B6  1E21               	comf	??_buttons+2,f,c
  5121  0014B8  1E22               	comf	??_buttons+3,f,c
  5122  0014BA  2A1F               	incf	??_buttons,f,c
  5123  0014BC  0E00               	movlw	0
  5124  0014BE  2220               	addwfc	??_buttons+1,f,c
  5125  0014C0  2221               	addwfc	??_buttons+2,f,c
  5126  0014C2  2222               	addwfc	??_buttons+3,f,c
  5127  0014C4  0100               	movlb	0	; () banked
  5128  0014C6  0100               	movlb	0	; () banked
  5129  0014C8  51C2               	movf	(_waitCnt+28)& (0+255),w,b
  5130  0014CA  241F               	addwf	??_buttons,w,c
  5131  0014CC  6E23               	movwf	(??_buttons+4)& (0+255),c
  5132  0014CE  0100               	movlb	0	; () banked
  5133  0014D0  0100               	movlb	0	; () banked
  5134  0014D2  51C3               	movf	(_waitCnt+29)& (0+255),w,b
  5135  0014D4  2020               	addwfc	??_buttons+1,w,c
  5136  0014D6  6E24               	movwf	(??_buttons+5)& (0+255),c
  5137  0014D8  0100               	movlb	0	; () banked
  5138  0014DA  0100               	movlb	0	; () banked
  5139  0014DC  51C4               	movf	(_waitCnt+30)& (0+255),w,b
  5140  0014DE  2021               	addwfc	??_buttons+2,w,c
  5141  0014E0  6E25               	movwf	(??_buttons+6)& (0+255),c
  5142  0014E2  0100               	movlb	0	; () banked
  5143  0014E4  0100               	movlb	0	; () banked
  5144  0014E6  51C5               	movf	(_waitCnt+31)& (0+255),w,b
  5145  0014E8  2022               	addwfc	??_buttons+3,w,c
  5146  0014EA  6E26               	movwf	(??_buttons+7)& (0+255),c
  5147  0014EC  5026               	movf	??_buttons+7,w,c
  5148  0014EE  0A80               	xorlw	128
  5149  0014F0  0F80               	addlw	128
  5150  0014F2  E108               	bnz	i2u484_45
  5151  0014F4  0E00               	movlw	0
  5152  0014F6  5C25               	subwf	??_buttons+6,w,c
  5153  0014F8  E105               	bnz	i2u484_45
  5154  0014FA  0E00               	movlw	0
  5155  0014FC  5C24               	subwf	??_buttons+5,w,c
  5156  0014FE  E102               	bnz	i2u484_45
  5157  001500  0E01               	movlw	1
  5158  001502  5C23               	subwf	??_buttons+4,w,c
  5159  001504                     i2u484_45:
  5160  001504  B0D8               	btfsc	status,0,c
  5161  001506  D019               	goto	i2l6437
  5162                           
  5163                           ; BSR set to: 0
  5164                           ;buttons.c: 65: {
  5165                           ;buttons.c: 66: waitCnt[7] = waitcnt + 15;
  5166  001508  0E0F               	movlw	15
  5167  00150A  0100               	movlb	0	; () banked
  5168  00150C  0100               	movlb	0	; () banked
  5169  00150E  25D3               	addwf	_waitcnt& (0+255),w,b
  5170  001510  0100               	movlb	0	; () banked
  5171  001512  0100               	movlb	0	; () banked
  5172  001514  6FC2               	movwf	(_waitCnt+28)& (0+255),b
  5173  001516  0E00               	movlw	0
  5174  001518  0100               	movlb	0	; () banked
  5175  00151A  0100               	movlb	0	; () banked
  5176  00151C  21D4               	addwfc	(_waitcnt+1)& (0+255),w,b
  5177  00151E  0100               	movlb	0	; () banked
  5178  001520  6FC3               	movwf	(_waitCnt+29)& (0+255),b
  5179  001522  0E00               	movlw	0
  5180  001524  0100               	movlb	0	; () banked
  5181  001526  0100               	movlb	0	; () banked
  5182  001528  21D5               	addwfc	(_waitcnt+2)& (0+255),w,b
  5183  00152A  0100               	movlb	0	; () banked
  5184  00152C  6FC4               	movwf	(_waitCnt+30)& (0+255),b
  5185  00152E  0E00               	movlw	0
  5186  001530  0100               	movlb	0	; () banked
  5187  001532  0100               	movlb	0	; () banked
  5188  001534  21D6               	addwfc	(_waitcnt+3)& (0+255),w,b
  5189  001536  0100               	movlb	0	; () banked
  5190  001538  6FC5               	movwf	(_waitCnt+31)& (0+255),b
  5191  00153A                     i2l6437:
  5192                           
  5193                           ;buttons.c: 67: }
  5194                           ;buttons.c: 68: LATC2 = 0;
  5195  00153A  948B               	bcf	3979,2,c	;volatile
  5196                           
  5197                           ;buttons.c: 69: if ( PORTB)
  5198  00153C  5081               	movf	3969,w,c	;volatile
  5199  00153E  A4D8               	btfss	status,2,c
  5200                           
  5201                           ;buttons.c: 70: {
  5202                           ;buttons.c: 72: update();
  5203  001540  ECEF  F00F         	call	i2_update	;wreg free
  5204                           
  5205                           ;buttons.c: 73: }
  5206                           ;buttons.c: 74: if (! PORTB)
  5207  001544  6681               	tstfsz	3969,c	;volatile
  5208  001546  D068               	goto	i2l376
  5209                           
  5210                           ;buttons.c: 75: {
  5211                           ;buttons.c: 76: waitCnt[0] = 0;
  5212  001548  0E00               	movlw	0
  5213  00154A  0100               	movlb	0	; () banked
  5214  00154C  0100               	movlb	0	; () banked
  5215  00154E  6FA6               	movwf	_waitCnt& (0+255),b
  5216  001550  0E00               	movlw	0
  5217  001552  0100               	movlb	0	; () banked
  5218  001554  6FA7               	movwf	(_waitCnt+1)& (0+255),b
  5219  001556  0E00               	movlw	0
  5220  001558  0100               	movlb	0	; () banked
  5221  00155A  6FA8               	movwf	(_waitCnt+2)& (0+255),b
  5222  00155C  0E00               	movlw	0
  5223  00155E  0100               	movlb	0	; () banked
  5224  001560  6FA9               	movwf	(_waitCnt+3)& (0+255),b
  5225                           
  5226                           ;buttons.c: 77: waitCnt[1] = 0;
  5227  001562  0E00               	movlw	0
  5228  001564  0100               	movlb	0	; () banked
  5229  001566  0100               	movlb	0	; () banked
  5230  001568  6FAA               	movwf	(_waitCnt+4)& (0+255),b
  5231  00156A  0E00               	movlw	0
  5232  00156C  0100               	movlb	0	; () banked
  5233  00156E  6FAB               	movwf	(_waitCnt+5)& (0+255),b
  5234  001570  0E00               	movlw	0
  5235  001572  0100               	movlb	0	; () banked
  5236  001574  6FAC               	movwf	(_waitCnt+6)& (0+255),b
  5237  001576  0E00               	movlw	0
  5238  001578  0100               	movlb	0	; () banked
  5239  00157A  6FAD               	movwf	(_waitCnt+7)& (0+255),b
  5240                           
  5241                           ;buttons.c: 78: waitCnt[2] = 0;
  5242  00157C  0E00               	movlw	0
  5243  00157E  0100               	movlb	0	; () banked
  5244  001580  0100               	movlb	0	; () banked
  5245  001582  6FAE               	movwf	(_waitCnt+8)& (0+255),b
  5246  001584  0E00               	movlw	0
  5247  001586  0100               	movlb	0	; () banked
  5248  001588  6FAF               	movwf	(_waitCnt+9)& (0+255),b
  5249  00158A  0E00               	movlw	0
  5250  00158C  0100               	movlb	0	; () banked
  5251  00158E  6FB0               	movwf	(_waitCnt+10)& (0+255),b
  5252  001590  0E00               	movlw	0
  5253  001592  0100               	movlb	0	; () banked
  5254  001594  6FB1               	movwf	(_waitCnt+11)& (0+255),b
  5255                           
  5256                           ;buttons.c: 79: waitCnt[3] = 0;
  5257  001596  0E00               	movlw	0
  5258  001598  0100               	movlb	0	; () banked
  5259  00159A  0100               	movlb	0	; () banked
  5260  00159C  6FB2               	movwf	(_waitCnt+12)& (0+255),b
  5261  00159E  0E00               	movlw	0
  5262  0015A0  0100               	movlb	0	; () banked
  5263  0015A2  6FB3               	movwf	(_waitCnt+13)& (0+255),b
  5264  0015A4  0E00               	movlw	0
  5265  0015A6  0100               	movlb	0	; () banked
  5266  0015A8  6FB4               	movwf	(_waitCnt+14)& (0+255),b
  5267  0015AA  0E00               	movlw	0
  5268  0015AC  0100               	movlb	0	; () banked
  5269  0015AE  6FB5               	movwf	(_waitCnt+15)& (0+255),b
  5270                           
  5271                           ;buttons.c: 80: waitCnt[4] = 0;
  5272  0015B0  0E00               	movlw	0
  5273  0015B2  0100               	movlb	0	; () banked
  5274  0015B4  0100               	movlb	0	; () banked
  5275  0015B6  6FB6               	movwf	(_waitCnt+16)& (0+255),b
  5276  0015B8  0E00               	movlw	0
  5277  0015BA  0100               	movlb	0	; () banked
  5278  0015BC  6FB7               	movwf	(_waitCnt+17)& (0+255),b
  5279  0015BE  0E00               	movlw	0
  5280  0015C0  0100               	movlb	0	; () banked
  5281  0015C2  6FB8               	movwf	(_waitCnt+18)& (0+255),b
  5282  0015C4  0E00               	movlw	0
  5283  0015C6  0100               	movlb	0	; () banked
  5284  0015C8  6FB9               	movwf	(_waitCnt+19)& (0+255),b
  5285                           
  5286                           ;buttons.c: 81: waitCnt[5] = 0;
  5287  0015CA  0E00               	movlw	0
  5288  0015CC  0100               	movlb	0	; () banked
  5289  0015CE  0100               	movlb	0	; () banked
  5290  0015D0  6FBA               	movwf	(_waitCnt+20)& (0+255),b
  5291  0015D2  0E00               	movlw	0
  5292  0015D4  0100               	movlb	0	; () banked
  5293  0015D6  6FBB               	movwf	(_waitCnt+21)& (0+255),b
  5294  0015D8  0E00               	movlw	0
  5295  0015DA  0100               	movlb	0	; () banked
  5296  0015DC  6FBC               	movwf	(_waitCnt+22)& (0+255),b
  5297  0015DE  0E00               	movlw	0
  5298  0015E0  0100               	movlb	0	; () banked
  5299  0015E2  6FBD               	movwf	(_waitCnt+23)& (0+255),b
  5300                           
  5301                           ;buttons.c: 82: waitCnt[6] = 0;
  5302  0015E4  0E00               	movlw	0
  5303  0015E6  0100               	movlb	0	; () banked
  5304  0015E8  0100               	movlb	0	; () banked
  5305  0015EA  6FBE               	movwf	(_waitCnt+24)& (0+255),b
  5306  0015EC  0E00               	movlw	0
  5307  0015EE  0100               	movlb	0	; () banked
  5308  0015F0  6FBF               	movwf	(_waitCnt+25)& (0+255),b
  5309  0015F2  0E00               	movlw	0
  5310  0015F4  0100               	movlb	0	; () banked
  5311  0015F6  6FC0               	movwf	(_waitCnt+26)& (0+255),b
  5312  0015F8  0E00               	movlw	0
  5313  0015FA  0100               	movlb	0	; () banked
  5314  0015FC  6FC1               	movwf	(_waitCnt+27)& (0+255),b
  5315                           
  5316                           ;buttons.c: 83: waitCnt[7] = 0;
  5317  0015FE  0E00               	movlw	0
  5318  001600  0100               	movlb	0	; () banked
  5319  001602  0100               	movlb	0	; () banked
  5320  001604  6FC2               	movwf	(_waitCnt+28)& (0+255),b
  5321  001606  0E00               	movlw	0
  5322  001608  0100               	movlb	0	; () banked
  5323  00160A  6FC3               	movwf	(_waitCnt+29)& (0+255),b
  5324  00160C  0E00               	movlw	0
  5325  00160E  0100               	movlb	0	; () banked
  5326  001610  6FC4               	movwf	(_waitCnt+30)& (0+255),b
  5327  001612  0E00               	movlw	0
  5328  001614  0100               	movlb	0	; () banked
  5329  001616  6FC5               	movwf	(_waitCnt+31)& (0+255),b
  5330  001618                     i2l376:
  5331  001618  0012               	return	
  5332  00161A                     __end_of_buttons:
  5333                           	opt stack 0
  5334                           tosu	equ	0xFFF
  5335                           tosh	equ	0xFFE
  5336                           tosl	equ	0xFFD
  5337                           pclatu	equ	0xFFB
  5338                           pclath	equ	0xFFA
  5339                           tblptru	equ	0xFF8
  5340                           tblptrh	equ	0xFF7
  5341                           tblptrl	equ	0xFF6
  5342                           tablat	equ	0xFF5
  5343                           prodh	equ	0xFF4
  5344                           prodl	equ	0xFF3
  5345                           intcon	equ	0xFF2
  5346                           intcon2	equ	0xFF1
  5347                           postinc0	equ	0xFEE
  5348                           fsr0h	equ	0xFEA
  5349                           fsr0l	equ	0xFE9
  5350                           wreg	equ	0xFE8
  5351                           postdec1	equ	0xFE5
  5352                           fsr1h	equ	0xFE2
  5353                           fsr1l	equ	0xFE1
  5354                           indf2	equ	0xFDF
  5355                           postinc2	equ	0xFDE
  5356                           fsr2h	equ	0xFDA
  5357                           fsr2l	equ	0xFD9
  5358                           status	equ	0xFD8
  5359                           
  5360 ;; *************** function i2_update *****************
  5361 ;; Defined at:
  5362 ;;		line 13 in file "disp.c"
  5363 ;; Parameters:    Size  Location     Type
  5364 ;;		None
  5365 ;; Auto vars:     Size  Location     Type
  5366 ;;  update          1   29[COMRAM] char 
  5367 ;; Return value:  Size  Location     Type
  5368 ;;		None               void
  5369 ;; Registers used:
  5370 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5371 ;; Tracked objects:
  5372 ;;		On entry : 0/0
  5373 ;;		On exit  : 0/0
  5374 ;;		Unchanged: 0/0
  5375 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5376 ;;      Params:         0       0       0       0       0       0       0       0       0
  5377 ;;      Locals:         1       0       0       0       0       0       0       0       0
  5378 ;;      Temps:          5       0       0       0       0       0       0       0       0
  5379 ;;      Totals:         6       0       0       0       0       0       0       0       0
  5380 ;;Total ram usage:        6 bytes
  5381 ;; Hardware stack levels used:    1
  5382 ;; Hardware stack levels required when called:    3
  5383 ;; This function calls:
  5384 ;;		i2_spi
  5385 ;;		i2_writeDigit
  5386 ;; This function is called by:
  5387 ;;		_buttons
  5388 ;; This function uses a non-reentrant model
  5389 ;;
  5390                           
  5391                           	psect	text16
  5392  001FDE                     __ptext16:
  5393                           	opt stack 0
  5394  001FDE                     i2_update:
  5395                           	opt stack 21
  5396                           
  5397                           ;disp.c: 14: if (!screen.changed)
  5398                           
  5399                           ;incstack = 0
  5400                           ;incstack = 0
  5401  001FDE  0100               	movlb	0	; () banked
  5402  001FE0  0100               	movlb	0	; () banked
  5403  001FE2  51EA               	movf	(_screen+12)& (0+255),w,b
  5404  001FE4  11E9               	iorwf	(_screen+11)& (0+255),w,b
  5405  001FE6  B4D8               	btfsc	status,2,c
  5406  001FE8  D23D               	goto	i2l58
  5407                           
  5408                           ; BSR set to: 0
  5409                           ;disp.c: 17: }
  5410                           ;disp.c: 18: int8_t cnt;
  5411                           ;disp.c: 19: for (cnt = 15; cnt >= 0; cnt--)
  5412                           
  5413                           ; BSR set to: 0
  5414                           
  5415                           ; BSR set to: 0
  5416                           ;disp.c: 15: {
  5417                           ;disp.c: 16: return;
  5418  001FEA  6E19               	movwf	??i2_update& (0+255),c
  5419  001FEC  0E0F               	movlw	15
  5420  001FEE  6E1E               	movwf	i2update@cnt,c
  5421  001FF0  5019               	movf	??i2_update& (0+255),w,c
  5422  001FF2                     
  5423                           ; BSR set to: 0
  5424  001FF2  BE1E               	btfsc	i2update@cnt,7,c
  5425  001FF4  D237               	goto	i2l58
  5426  001FF6  D05A               	goto	i2l6273
  5427  001FF8                     i2l6259:
  5428                           
  5429                           ; BSR set to: 0
  5430                           ;disp.c: 24: writeDigit(1 << cnt, screen.digits.screen[cnt].bits);
  5431  001FF8  C01E  F019         	movff	i2update@cnt,??i2_update
  5432  001FFC  0E01               	movlw	1
  5433  001FFE  6E1A               	movwf	(??i2_update+1)& (0+255),c
  5434  002000  2A19               	incf	??i2_update,f,c
  5435  002002  D002               	goto	i2u449_44
  5436  002004                     i2u449_45:
  5437  002004  90D8               	bcf	status,0,c
  5438  002006  361A               	rlcf	??i2_update+1,f,c
  5439  002008                     i2u449_44:
  5440  002008  2E19               	decfsz	??i2_update,f,c
  5441  00200A  D7FC               	goto	i2u449_45
  5442  00200C  501A               	movf	??i2_update+1,w,c
  5443  00200E  6E14               	movwf	?i2_writeDigit,c
  5444  002010  501E               	movf	i2update@cnt,w,c
  5445  002012  0D01               	mullw	1
  5446  002014  0100               	movlb	0	; () banked
  5447  002016  0EDE               	movlw	low _screen
  5448  002018  24F3               	addwf	prodl,w,c
  5449  00201A  6ED9               	movwf	fsr2l,c
  5450  00201C  0100               	movlb	0	; () banked
  5451  00201E  0E00               	movlw	high _screen
  5452  002020  20F4               	addwfc	prodh,w,c
  5453  002022  6EDA               	movwf	fsr2h,c
  5454  002024  50DF               	movf	indf2,w,c
  5455  002026  6E15               	movwf	?i2_writeDigit+1,c
  5456  002028  EC6E  F023         	call	i2_writeDigit	;wreg free
  5457                           
  5458                           ;disp.c: 25: break;
  5459  00202C  D201               	goto	i2l6275
  5460  00202E                     i2l6261:
  5461                           
  5462                           ;disp.c: 27: spi(0b1001, screen.decode);
  5463  00202E  6E19               	movwf	??i2_update& (0+255),c
  5464  002030  0E09               	movlw	9
  5465  002032  6E07               	movwf	?i2_spi,c
  5466  002034  5019               	movf	??i2_update& (0+255),w,c
  5467  002036  0100               	movlb	0	; () banked
  5468  002038  0100               	movlb	0	; () banked
  5469  00203A  51E6               	movf	(_screen+8)& (0+255),w,b
  5470  00203C  0BFF               	andlw	255
  5471  00203E  6E08               	movwf	?i2_spi+1,c
  5472  002040  EC02  F01F         	call	i2_spi	;wreg free
  5473                           
  5474                           ;disp.c: 28: break;
  5475  002044  D1F5               	goto	i2l6275
  5476  002046                     i2l6263:
  5477                           
  5478                           ;disp.c: 30: spi(0b1010, screen.brightness);
  5479  002046  6E19               	movwf	??i2_update& (0+255),c
  5480  002048  0E0A               	movlw	10
  5481  00204A  6E07               	movwf	?i2_spi,c
  5482  00204C  5019               	movf	??i2_update& (0+255),w,c
  5483  00204E  0100               	movlb	0	; () banked
  5484  002050  0100               	movlb	0	; () banked
  5485  002052  51E7               	movf	(_screen+9)& (0+255),w,b
  5486  002054  0B0F               	andlw	15
  5487  002056  6E08               	movwf	?i2_spi+1,c
  5488  002058  EC02  F01F         	call	i2_spi	;wreg free
  5489                           
  5490                           ;disp.c: 31: break;
  5491  00205C  D1E9               	goto	i2l6275
  5492  00205E                     i2l6265:
  5493                           
  5494                           ;disp.c: 33: spi(0b1011, screen.scan);
  5495  00205E  6E19               	movwf	??i2_update& (0+255),c
  5496  002060  0E0B               	movlw	11
  5497  002062  6E07               	movwf	?i2_spi,c
  5498  002064  5019               	movf	??i2_update& (0+255),w,c
  5499  002066  0100               	movlb	0	; () banked
  5500  002068  0100               	movlb	0	; () banked
  5501  00206A  39E7               	swapf	(_screen+9)& (0+255),w,b
  5502  00206C  0B07               	andlw	7
  5503  00206E  6E08               	movwf	?i2_spi+1,c
  5504  002070  EC02  F01F         	call	i2_spi	;wreg free
  5505                           
  5506                           ;disp.c: 34: break;
  5507  002074  D1DD               	goto	i2l6275
  5508  002076                     i2l6267:
  5509                           
  5510                           ;disp.c: 36: spi(0b1111, screen.test);
  5511  002076  6E19               	movwf	??i2_update& (0+255),c
  5512  002078  0E0F               	movlw	15
  5513  00207A  6E07               	movwf	?i2_spi,c
  5514  00207C  5019               	movf	??i2_update& (0+255),w,c
  5515  00207E  0E00               	movlw	0
  5516  002080  0100               	movlb	0	; () banked
  5517  002082  BFE7               	btfsc	(_screen+9)& (0+255),7,b
  5518  002084  0E01               	movlw	1
  5519  002086  6E08               	movwf	?i2_spi+1,c
  5520  002088  EC02  F01F         	call	i2_spi	;wreg free
  5521                           
  5522                           ;disp.c: 37: break;
  5523  00208C  D1D1               	goto	i2l6275
  5524  00208E                     i2l6269:
  5525                           
  5526                           ;disp.c: 39: spi(0b1100, !screen.shutdown);
  5527  00208E  6E19               	movwf	??i2_update& (0+255),c
  5528  002090  0E0C               	movlw	12
  5529  002092  6E07               	movwf	?i2_spi,c
  5530  002094  5019               	movf	??i2_update& (0+255),w,c
  5531  002096  0100               	movlb	0	; () banked
  5532  002098  0100               	movlb	0	; () banked
  5533  00209A  B1E8               	btfsc	(_screen+10)& (0+255),0,b
  5534  00209C  D002               	goto	i2u450_40
  5535  00209E  0E01               	movlw	1
  5536  0020A0  D001               	goto	i2u450_46
  5537  0020A2                     i2u450_40:
  5538  0020A2  0E00               	movlw	0
  5539  0020A4                     i2u450_46:
  5540  0020A4  6E08               	movwf	?i2_spi+1,c
  5541  0020A6  EC02  F01F         	call	i2_spi	;wreg free
  5542                           
  5543                           ;disp.c: 40: break;
  5544  0020AA  D1C2               	goto	i2l6275
  5545  0020AC                     i2l6273:
  5546  0020AC  C01E  F019         	movff	i2update@cnt,??i2_update
  5547  0020B0  0E01               	movlw	1
  5548  0020B2  6E1A               	movwf	(??i2_update+1)& (0+255),c
  5549  0020B4  6A1B               	clrf	(??i2_update+2)& (0+255),c
  5550  0020B6  2A19               	incf	??i2_update,f,c
  5551  0020B8  D003               	goto	i2u451_44
  5552  0020BA                     i2u451_45:
  5553  0020BA  90D8               	bcf	status,0,c
  5554  0020BC  361A               	rlcf	??i2_update+1,f,c
  5555  0020BE  361B               	rlcf	??i2_update+2,f,c
  5556  0020C0                     i2u451_44:
  5557  0020C0  2E19               	decfsz	??i2_update,f,c
  5558  0020C2  D7FB               	goto	i2u451_45
  5559  0020C4  0100               	movlb	0	; () banked
  5560  0020C6  0100               	movlb	0	; () banked
  5561  0020C8  51E9               	movf	(_screen+11)& (0+255),w,b
  5562  0020CA  161A               	andwf	??i2_update+1,f,c
  5563  0020CC  0100               	movlb	0	; () banked
  5564  0020CE  0100               	movlb	0	; () banked
  5565  0020D0  51EA               	movf	(_screen+12)& (0+255),w,b
  5566  0020D2  161B               	andwf	??i2_update+2,f,c
  5567                           
  5568                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 6 sub-sw
      +                          itches
  5569                           ; Switch size 1, requested type "space"
  5570                           ; Number of cases is 6, Range of values is 0 to 32
  5571                           ; switch strategies available:
  5572                           ; Name         Instructions Cycles
  5573                           ; simple_byte           19    10 (average)
  5574                           ;	Chosen strategy is simple_byte
  5575  0020D4  501B               	movf	??i2_update+2,w,c
  5576  0020D6  0A00               	xorlw	0	; case 0
  5577  0020D8  B4D8               	btfsc	status,2,c
  5578  0020DA  D010               	goto	i2l9499
  5579  0020DC  0A02               	xorlw	2	; case 2
  5580  0020DE  B4D8               	btfsc	status,2,c
  5581  0020E0  D18F               	goto	i2l9501
  5582  0020E2  0A06               	xorlw	6	; case 4
  5583  0020E4  B4D8               	btfsc	status,2,c
  5584  0020E6  D191               	goto	i2l9503
  5585  0020E8  0A0C               	xorlw	12	; case 8
  5586  0020EA  B4D8               	btfsc	status,2,c
  5587  0020EC  D193               	goto	i2l9505
  5588  0020EE  0A18               	xorlw	24	; case 16
  5589  0020F0  B4D8               	btfsc	status,2,c
  5590  0020F2  D195               	goto	i2l9507
  5591  0020F4  0A30               	xorlw	48	; case 32
  5592  0020F6  B4D8               	btfsc	status,2,c
  5593  0020F8  D197               	goto	i2l9509
  5594  0020FA  D19A               	goto	i2l6275
  5595  0020FC                     i2l9499:
  5596                           
  5597                           ; BSR set to: 0
  5598                           ; Switch size 1, requested type "space"
  5599                           ; Number of cases is 128, Range of values is 1 to 128
  5600                           ; switch strategies available:
  5601                           ; Name         Instructions Cycles
  5602                           ; simple_byte          385   193 (average)
  5603                           ;	Chosen strategy is simple_byte
  5604  0020FC  501A               	movf	??i2_update+1,w,c
  5605  0020FE  0A01               	xorlw	1	; case 1
  5606  002100  B4D8               	btfsc	status,2,c
  5607  002102  D77A               	goto	i2l6259
  5608  002104  0A03               	xorlw	3	; case 2
  5609  002106  B4D8               	btfsc	status,2,c
  5610  002108  D777               	goto	i2l6259
  5611  00210A  0A01               	xorlw	1	; case 3
  5612  00210C  B4D8               	btfsc	status,2,c
  5613  00210E  D774               	goto	i2l6259
  5614  002110  0A07               	xorlw	7	; case 4
  5615  002112  B4D8               	btfsc	status,2,c
  5616  002114  D771               	goto	i2l6259
  5617  002116  0A01               	xorlw	1	; case 5
  5618  002118  B4D8               	btfsc	status,2,c
  5619  00211A  D76E               	goto	i2l6259
  5620  00211C  0A03               	xorlw	3	; case 6
  5621  00211E  B4D8               	btfsc	status,2,c
  5622  002120  D76B               	goto	i2l6259
  5623  002122  0A01               	xorlw	1	; case 7
  5624  002124  B4D8               	btfsc	status,2,c
  5625  002126  D768               	goto	i2l6259
  5626  002128  0A0F               	xorlw	15	; case 8
  5627  00212A  B4D8               	btfsc	status,2,c
  5628  00212C  D765               	goto	i2l6259
  5629  00212E  0A01               	xorlw	1	; case 9
  5630  002130  B4D8               	btfsc	status,2,c
  5631  002132  D762               	goto	i2l6259
  5632  002134  0A03               	xorlw	3	; case 10
  5633  002136  B4D8               	btfsc	status,2,c
  5634  002138  D75F               	goto	i2l6259
  5635  00213A  0A01               	xorlw	1	; case 11
  5636  00213C  B4D8               	btfsc	status,2,c
  5637  00213E  D75C               	goto	i2l6259
  5638  002140  0A07               	xorlw	7	; case 12
  5639  002142  B4D8               	btfsc	status,2,c
  5640  002144  D759               	goto	i2l6259
  5641  002146  0A01               	xorlw	1	; case 13
  5642  002148  B4D8               	btfsc	status,2,c
  5643  00214A  D756               	goto	i2l6259
  5644  00214C  0A03               	xorlw	3	; case 14
  5645  00214E  B4D8               	btfsc	status,2,c
  5646  002150  D753               	goto	i2l6259
  5647  002152  0A01               	xorlw	1	; case 15
  5648  002154  B4D8               	btfsc	status,2,c
  5649  002156  D750               	goto	i2l6259
  5650  002158  0A1F               	xorlw	31	; case 16
  5651  00215A  B4D8               	btfsc	status,2,c
  5652  00215C  D74D               	goto	i2l6259
  5653  00215E  0A01               	xorlw	1	; case 17
  5654  002160  B4D8               	btfsc	status,2,c
  5655  002162  D74A               	goto	i2l6259
  5656  002164  0A03               	xorlw	3	; case 18
  5657  002166  B4D8               	btfsc	status,2,c
  5658  002168  D747               	goto	i2l6259
  5659  00216A  0A01               	xorlw	1	; case 19
  5660  00216C  B4D8               	btfsc	status,2,c
  5661  00216E  D744               	goto	i2l6259
  5662  002170  0A07               	xorlw	7	; case 20
  5663  002172  B4D8               	btfsc	status,2,c
  5664  002174  D741               	goto	i2l6259
  5665  002176  0A01               	xorlw	1	; case 21
  5666  002178  B4D8               	btfsc	status,2,c
  5667  00217A  D73E               	goto	i2l6259
  5668  00217C  0A03               	xorlw	3	; case 22
  5669  00217E  B4D8               	btfsc	status,2,c
  5670  002180  D73B               	goto	i2l6259
  5671  002182  0A01               	xorlw	1	; case 23
  5672  002184  B4D8               	btfsc	status,2,c
  5673  002186  D738               	goto	i2l6259
  5674  002188  0A0F               	xorlw	15	; case 24
  5675  00218A  B4D8               	btfsc	status,2,c
  5676  00218C  D735               	goto	i2l6259
  5677  00218E  0A01               	xorlw	1	; case 25
  5678  002190  B4D8               	btfsc	status,2,c
  5679  002192  D732               	goto	i2l6259
  5680  002194  0A03               	xorlw	3	; case 26
  5681  002196  B4D8               	btfsc	status,2,c
  5682  002198  D72F               	goto	i2l6259
  5683  00219A  0A01               	xorlw	1	; case 27
  5684  00219C  B4D8               	btfsc	status,2,c
  5685  00219E  D72C               	goto	i2l6259
  5686  0021A0  0A07               	xorlw	7	; case 28
  5687  0021A2  B4D8               	btfsc	status,2,c
  5688  0021A4  D729               	goto	i2l6259
  5689  0021A6  0A01               	xorlw	1	; case 29
  5690  0021A8  B4D8               	btfsc	status,2,c
  5691  0021AA  D726               	goto	i2l6259
  5692  0021AC  0A03               	xorlw	3	; case 30
  5693  0021AE  B4D8               	btfsc	status,2,c
  5694  0021B0  D723               	goto	i2l6259
  5695  0021B2  0A01               	xorlw	1	; case 31
  5696  0021B4  B4D8               	btfsc	status,2,c
  5697  0021B6  D720               	goto	i2l6259
  5698  0021B8  0A3F               	xorlw	63	; case 32
  5699  0021BA  B4D8               	btfsc	status,2,c
  5700  0021BC  D71D               	goto	i2l6259
  5701  0021BE  0A01               	xorlw	1	; case 33
  5702  0021C0  B4D8               	btfsc	status,2,c
  5703  0021C2  D71A               	goto	i2l6259
  5704  0021C4  0A03               	xorlw	3	; case 34
  5705  0021C6  B4D8               	btfsc	status,2,c
  5706  0021C8  D717               	goto	i2l6259
  5707  0021CA  0A01               	xorlw	1	; case 35
  5708  0021CC  B4D8               	btfsc	status,2,c
  5709  0021CE  D714               	goto	i2l6259
  5710  0021D0  0A07               	xorlw	7	; case 36
  5711  0021D2  B4D8               	btfsc	status,2,c
  5712  0021D4  D711               	goto	i2l6259
  5713  0021D6  0A01               	xorlw	1	; case 37
  5714  0021D8  B4D8               	btfsc	status,2,c
  5715  0021DA  D70E               	goto	i2l6259
  5716  0021DC  0A03               	xorlw	3	; case 38
  5717  0021DE  B4D8               	btfsc	status,2,c
  5718  0021E0  D70B               	goto	i2l6259
  5719  0021E2  0A01               	xorlw	1	; case 39
  5720  0021E4  B4D8               	btfsc	status,2,c
  5721  0021E6  D708               	goto	i2l6259
  5722  0021E8  0A0F               	xorlw	15	; case 40
  5723  0021EA  B4D8               	btfsc	status,2,c
  5724  0021EC  D705               	goto	i2l6259
  5725  0021EE  0A01               	xorlw	1	; case 41
  5726  0021F0  B4D8               	btfsc	status,2,c
  5727  0021F2  D702               	goto	i2l6259
  5728  0021F4  0A03               	xorlw	3	; case 42
  5729  0021F6  B4D8               	btfsc	status,2,c
  5730  0021F8  D6FF               	goto	i2l6259
  5731  0021FA  0A01               	xorlw	1	; case 43
  5732  0021FC  B4D8               	btfsc	status,2,c
  5733  0021FE  D6FC               	goto	i2l6259
  5734  002200  0A07               	xorlw	7	; case 44
  5735  002202  B4D8               	btfsc	status,2,c
  5736  002204  D6F9               	goto	i2l6259
  5737  002206  0A01               	xorlw	1	; case 45
  5738  002208  B4D8               	btfsc	status,2,c
  5739  00220A  D6F6               	goto	i2l6259
  5740  00220C  0A03               	xorlw	3	; case 46
  5741  00220E  B4D8               	btfsc	status,2,c
  5742  002210  D6F3               	goto	i2l6259
  5743  002212  0A01               	xorlw	1	; case 47
  5744  002214  B4D8               	btfsc	status,2,c
  5745  002216  D6F0               	goto	i2l6259
  5746  002218  0A1F               	xorlw	31	; case 48
  5747  00221A  B4D8               	btfsc	status,2,c
  5748  00221C  D6ED               	goto	i2l6259
  5749  00221E  0A01               	xorlw	1	; case 49
  5750  002220  B4D8               	btfsc	status,2,c
  5751  002222  D6EA               	goto	i2l6259
  5752  002224  0A03               	xorlw	3	; case 50
  5753  002226  B4D8               	btfsc	status,2,c
  5754  002228  D6E7               	goto	i2l6259
  5755  00222A  0A01               	xorlw	1	; case 51
  5756  00222C  B4D8               	btfsc	status,2,c
  5757  00222E  D6E4               	goto	i2l6259
  5758  002230  0A07               	xorlw	7	; case 52
  5759  002232  B4D8               	btfsc	status,2,c
  5760  002234  D6E1               	goto	i2l6259
  5761  002236  0A01               	xorlw	1	; case 53
  5762  002238  B4D8               	btfsc	status,2,c
  5763  00223A  D6DE               	goto	i2l6259
  5764  00223C  0A03               	xorlw	3	; case 54
  5765  00223E  B4D8               	btfsc	status,2,c
  5766  002240  D6DB               	goto	i2l6259
  5767  002242  0A01               	xorlw	1	; case 55
  5768  002244  B4D8               	btfsc	status,2,c
  5769  002246  D6D8               	goto	i2l6259
  5770  002248  0A0F               	xorlw	15	; case 56
  5771  00224A  B4D8               	btfsc	status,2,c
  5772  00224C  D6D5               	goto	i2l6259
  5773  00224E  0A01               	xorlw	1	; case 57
  5774  002250  B4D8               	btfsc	status,2,c
  5775  002252  D6D2               	goto	i2l6259
  5776  002254  0A03               	xorlw	3	; case 58
  5777  002256  B4D8               	btfsc	status,2,c
  5778  002258  D6CF               	goto	i2l6259
  5779  00225A  0A01               	xorlw	1	; case 59
  5780  00225C  B4D8               	btfsc	status,2,c
  5781  00225E  D6CC               	goto	i2l6259
  5782  002260  0A07               	xorlw	7	; case 60
  5783  002262  B4D8               	btfsc	status,2,c
  5784  002264  D6C9               	goto	i2l6259
  5785  002266  0A01               	xorlw	1	; case 61
  5786  002268  B4D8               	btfsc	status,2,c
  5787  00226A  D6C6               	goto	i2l6259
  5788  00226C  0A03               	xorlw	3	; case 62
  5789  00226E  B4D8               	btfsc	status,2,c
  5790  002270  D6C3               	goto	i2l6259
  5791  002272  0A01               	xorlw	1	; case 63
  5792  002274  B4D8               	btfsc	status,2,c
  5793  002276  D6C0               	goto	i2l6259
  5794  002278  0A7F               	xorlw	127	; case 64
  5795  00227A  B4D8               	btfsc	status,2,c
  5796  00227C  D6BD               	goto	i2l6259
  5797  00227E  0A01               	xorlw	1	; case 65
  5798  002280  B4D8               	btfsc	status,2,c
  5799  002282  D6BA               	goto	i2l6259
  5800  002284  0A03               	xorlw	3	; case 66
  5801  002286  B4D8               	btfsc	status,2,c
  5802  002288  D6B7               	goto	i2l6259
  5803  00228A  0A01               	xorlw	1	; case 67
  5804  00228C  B4D8               	btfsc	status,2,c
  5805  00228E  D6B4               	goto	i2l6259
  5806  002290  0A07               	xorlw	7	; case 68
  5807  002292  B4D8               	btfsc	status,2,c
  5808  002294  D6B1               	goto	i2l6259
  5809  002296  0A01               	xorlw	1	; case 69
  5810  002298  B4D8               	btfsc	status,2,c
  5811  00229A  D6AE               	goto	i2l6259
  5812  00229C  0A03               	xorlw	3	; case 70
  5813  00229E  B4D8               	btfsc	status,2,c
  5814  0022A0  D6AB               	goto	i2l6259
  5815  0022A2  0A01               	xorlw	1	; case 71
  5816  0022A4  B4D8               	btfsc	status,2,c
  5817  0022A6  D6A8               	goto	i2l6259
  5818  0022A8  0A0F               	xorlw	15	; case 72
  5819  0022AA  B4D8               	btfsc	status,2,c
  5820  0022AC  D6A5               	goto	i2l6259
  5821  0022AE  0A01               	xorlw	1	; case 73
  5822  0022B0  B4D8               	btfsc	status,2,c
  5823  0022B2  D6A2               	goto	i2l6259
  5824  0022B4  0A03               	xorlw	3	; case 74
  5825  0022B6  B4D8               	btfsc	status,2,c
  5826  0022B8  D69F               	goto	i2l6259
  5827  0022BA  0A01               	xorlw	1	; case 75
  5828  0022BC  B4D8               	btfsc	status,2,c
  5829  0022BE  D69C               	goto	i2l6259
  5830  0022C0  0A07               	xorlw	7	; case 76
  5831  0022C2  B4D8               	btfsc	status,2,c
  5832  0022C4  D699               	goto	i2l6259
  5833  0022C6  0A01               	xorlw	1	; case 77
  5834  0022C8  B4D8               	btfsc	status,2,c
  5835  0022CA  D696               	goto	i2l6259
  5836  0022CC  0A03               	xorlw	3	; case 78
  5837  0022CE  B4D8               	btfsc	status,2,c
  5838  0022D0  D693               	goto	i2l6259
  5839  0022D2  0A01               	xorlw	1	; case 79
  5840  0022D4  B4D8               	btfsc	status,2,c
  5841  0022D6  D690               	goto	i2l6259
  5842  0022D8  0A1F               	xorlw	31	; case 80
  5843  0022DA  B4D8               	btfsc	status,2,c
  5844  0022DC  D68D               	goto	i2l6259
  5845  0022DE  0A01               	xorlw	1	; case 81
  5846  0022E0  B4D8               	btfsc	status,2,c
  5847  0022E2  D68A               	goto	i2l6259
  5848  0022E4  0A03               	xorlw	3	; case 82
  5849  0022E6  B4D8               	btfsc	status,2,c
  5850  0022E8  D687               	goto	i2l6259
  5851  0022EA  0A01               	xorlw	1	; case 83
  5852  0022EC  B4D8               	btfsc	status,2,c
  5853  0022EE  D684               	goto	i2l6259
  5854  0022F0  0A07               	xorlw	7	; case 84
  5855  0022F2  B4D8               	btfsc	status,2,c
  5856  0022F4  D681               	goto	i2l6259
  5857  0022F6  0A01               	xorlw	1	; case 85
  5858  0022F8  B4D8               	btfsc	status,2,c
  5859  0022FA  D67E               	goto	i2l6259
  5860  0022FC  0A03               	xorlw	3	; case 86
  5861  0022FE  B4D8               	btfsc	status,2,c
  5862  002300  D67B               	goto	i2l6259
  5863  002302  0A01               	xorlw	1	; case 87
  5864  002304  B4D8               	btfsc	status,2,c
  5865  002306  D678               	goto	i2l6259
  5866  002308  0A0F               	xorlw	15	; case 88
  5867  00230A  B4D8               	btfsc	status,2,c
  5868  00230C  D675               	goto	i2l6259
  5869  00230E  0A01               	xorlw	1	; case 89
  5870  002310  B4D8               	btfsc	status,2,c
  5871  002312  D672               	goto	i2l6259
  5872  002314  0A03               	xorlw	3	; case 90
  5873  002316  B4D8               	btfsc	status,2,c
  5874  002318  D66F               	goto	i2l6259
  5875  00231A  0A01               	xorlw	1	; case 91
  5876  00231C  B4D8               	btfsc	status,2,c
  5877  00231E  D66C               	goto	i2l6259
  5878  002320  0A07               	xorlw	7	; case 92
  5879  002322  B4D8               	btfsc	status,2,c
  5880  002324  D669               	goto	i2l6259
  5881  002326  0A01               	xorlw	1	; case 93
  5882  002328  B4D8               	btfsc	status,2,c
  5883  00232A  D666               	goto	i2l6259
  5884  00232C  0A03               	xorlw	3	; case 94
  5885  00232E  B4D8               	btfsc	status,2,c
  5886  002330  D663               	goto	i2l6259
  5887  002332  0A01               	xorlw	1	; case 95
  5888  002334  B4D8               	btfsc	status,2,c
  5889  002336  D660               	goto	i2l6259
  5890  002338  0A3F               	xorlw	63	; case 96
  5891  00233A  B4D8               	btfsc	status,2,c
  5892  00233C  D65D               	goto	i2l6259
  5893  00233E  0A01               	xorlw	1	; case 97
  5894  002340  B4D8               	btfsc	status,2,c
  5895  002342  D65A               	goto	i2l6259
  5896  002344  0A03               	xorlw	3	; case 98
  5897  002346  B4D8               	btfsc	status,2,c
  5898  002348  D657               	goto	i2l6259
  5899  00234A  0A01               	xorlw	1	; case 99
  5900  00234C  B4D8               	btfsc	status,2,c
  5901  00234E  D654               	goto	i2l6259
  5902  002350  0A07               	xorlw	7	; case 100
  5903  002352  B4D8               	btfsc	status,2,c
  5904  002354  D651               	goto	i2l6259
  5905  002356  0A01               	xorlw	1	; case 101
  5906  002358  B4D8               	btfsc	status,2,c
  5907  00235A  D64E               	goto	i2l6259
  5908  00235C  0A03               	xorlw	3	; case 102
  5909  00235E  B4D8               	btfsc	status,2,c
  5910  002360  D64B               	goto	i2l6259
  5911  002362  0A01               	xorlw	1	; case 103
  5912  002364  B4D8               	btfsc	status,2,c
  5913  002366  D648               	goto	i2l6259
  5914  002368  0A0F               	xorlw	15	; case 104
  5915  00236A  B4D8               	btfsc	status,2,c
  5916  00236C  D645               	goto	i2l6259
  5917  00236E  0A01               	xorlw	1	; case 105
  5918  002370  B4D8               	btfsc	status,2,c
  5919  002372  D642               	goto	i2l6259
  5920  002374  0A03               	xorlw	3	; case 106
  5921  002376  B4D8               	btfsc	status,2,c
  5922  002378  D63F               	goto	i2l6259
  5923  00237A  0A01               	xorlw	1	; case 107
  5924  00237C  B4D8               	btfsc	status,2,c
  5925  00237E  D63C               	goto	i2l6259
  5926  002380  0A07               	xorlw	7	; case 108
  5927  002382  B4D8               	btfsc	status,2,c
  5928  002384  D639               	goto	i2l6259
  5929  002386  0A01               	xorlw	1	; case 109
  5930  002388  B4D8               	btfsc	status,2,c
  5931  00238A  D636               	goto	i2l6259
  5932  00238C  0A03               	xorlw	3	; case 110
  5933  00238E  B4D8               	btfsc	status,2,c
  5934  002390  D633               	goto	i2l6259
  5935  002392  0A01               	xorlw	1	; case 111
  5936  002394  B4D8               	btfsc	status,2,c
  5937  002396  D630               	goto	i2l6259
  5938  002398  0A1F               	xorlw	31	; case 112
  5939  00239A  B4D8               	btfsc	status,2,c
  5940  00239C  D62D               	goto	i2l6259
  5941  00239E  0A01               	xorlw	1	; case 113
  5942  0023A0  B4D8               	btfsc	status,2,c
  5943  0023A2  D62A               	goto	i2l6259
  5944  0023A4  0A03               	xorlw	3	; case 114
  5945  0023A6  B4D8               	btfsc	status,2,c
  5946  0023A8  D627               	goto	i2l6259
  5947  0023AA  0A01               	xorlw	1	; case 115
  5948  0023AC  B4D8               	btfsc	status,2,c
  5949  0023AE  D624               	goto	i2l6259
  5950  0023B0  0A07               	xorlw	7	; case 116
  5951  0023B2  B4D8               	btfsc	status,2,c
  5952  0023B4  D621               	goto	i2l6259
  5953  0023B6  0A01               	xorlw	1	; case 117
  5954  0023B8  B4D8               	btfsc	status,2,c
  5955  0023BA  D61E               	goto	i2l6259
  5956  0023BC  0A03               	xorlw	3	; case 118
  5957  0023BE  B4D8               	btfsc	status,2,c
  5958  0023C0  D61B               	goto	i2l6259
  5959  0023C2  0A01               	xorlw	1	; case 119
  5960  0023C4  B4D8               	btfsc	status,2,c
  5961  0023C6  D618               	goto	i2l6259
  5962  0023C8  0A0F               	xorlw	15	; case 120
  5963  0023CA  B4D8               	btfsc	status,2,c
  5964  0023CC  D615               	goto	i2l6259
  5965  0023CE  0A01               	xorlw	1	; case 121
  5966  0023D0  B4D8               	btfsc	status,2,c
  5967  0023D2  D612               	goto	i2l6259
  5968  0023D4  0A03               	xorlw	3	; case 122
  5969  0023D6  B4D8               	btfsc	status,2,c
  5970  0023D8  D60F               	goto	i2l6259
  5971  0023DA  0A01               	xorlw	1	; case 123
  5972  0023DC  B4D8               	btfsc	status,2,c
  5973  0023DE  D60C               	goto	i2l6259
  5974  0023E0  0A07               	xorlw	7	; case 124
  5975  0023E2  B4D8               	btfsc	status,2,c
  5976  0023E4  D609               	goto	i2l6259
  5977  0023E6  0A01               	xorlw	1	; case 125
  5978  0023E8  B4D8               	btfsc	status,2,c
  5979  0023EA  D606               	goto	i2l6259
  5980  0023EC  0A03               	xorlw	3	; case 126
  5981  0023EE  B4D8               	btfsc	status,2,c
  5982  0023F0  D603               	goto	i2l6259
  5983  0023F2  0A01               	xorlw	1	; case 127
  5984  0023F4  B4D8               	btfsc	status,2,c
  5985  0023F6  D600               	goto	i2l6259
  5986  0023F8  0AFF               	xorlw	255	; case 128
  5987  0023FA  B4D8               	btfsc	status,2,c
  5988  0023FC  D5FD               	goto	i2l6259
  5989  0023FE  D018               	goto	i2l6275
  5990  002400                     i2l9501:
  5991                           
  5992                           ; BSR set to: 0
  5993                           ; Switch size 1, requested type "space"
  5994                           ; Number of cases is 1, Range of values is 0 to 0
  5995                           ; switch strategies available:
  5996                           ; Name         Instructions Cycles
  5997                           ; simple_byte            4     3 (average)
  5998                           ;	Chosen strategy is simple_byte
  5999  002400  501A               	movf	??i2_update+1,w,c
  6000  002402  0A00               	xorlw	0	; case 0
  6001  002404  B4D8               	btfsc	status,2,c
  6002  002406  D613               	goto	i2l6261
  6003  002408  D013               	goto	i2l6275
  6004  00240A                     i2l9503:
  6005                           
  6006                           ; BSR set to: 0
  6007                           ; Switch size 1, requested type "space"
  6008                           ; Number of cases is 1, Range of values is 0 to 0
  6009                           ; switch strategies available:
  6010                           ; Name         Instructions Cycles
  6011                           ; simple_byte            4     3 (average)
  6012                           ;	Chosen strategy is simple_byte
  6013  00240A  501A               	movf	??i2_update+1,w,c
  6014  00240C  0A00               	xorlw	0	; case 0
  6015  00240E  B4D8               	btfsc	status,2,c
  6016  002410  D61A               	goto	i2l6263
  6017  002412  D00E               	goto	i2l6275
  6018  002414                     i2l9505:
  6019                           
  6020                           ; BSR set to: 0
  6021                           ; Switch size 1, requested type "space"
  6022                           ; Number of cases is 1, Range of values is 0 to 0
  6023                           ; switch strategies available:
  6024                           ; Name         Instructions Cycles
  6025                           ; simple_byte            4     3 (average)
  6026                           ;	Chosen strategy is simple_byte
  6027  002414  501A               	movf	??i2_update+1,w,c
  6028  002416  0A00               	xorlw	0	; case 0
  6029  002418  B4D8               	btfsc	status,2,c
  6030  00241A  D621               	goto	i2l6265
  6031  00241C  D009               	goto	i2l6275
  6032  00241E                     i2l9507:
  6033                           
  6034                           ; BSR set to: 0
  6035                           ; Switch size 1, requested type "space"
  6036                           ; Number of cases is 1, Range of values is 0 to 0
  6037                           ; switch strategies available:
  6038                           ; Name         Instructions Cycles
  6039                           ; simple_byte            4     3 (average)
  6040                           ;	Chosen strategy is simple_byte
  6041  00241E  501A               	movf	??i2_update+1,w,c
  6042  002420  0A00               	xorlw	0	; case 0
  6043  002422  B4D8               	btfsc	status,2,c
  6044  002424  D628               	goto	i2l6267
  6045  002426  D004               	goto	i2l6275
  6046  002428                     i2l9509:
  6047                           
  6048                           ; BSR set to: 0
  6049                           ; Switch size 1, requested type "space"
  6050                           ; Number of cases is 1, Range of values is 0 to 0
  6051                           ; switch strategies available:
  6052                           ; Name         Instructions Cycles
  6053                           ; simple_byte            4     3 (average)
  6054                           ;	Chosen strategy is simple_byte
  6055  002428  501A               	movf	??i2_update+1,w,c
  6056  00242A  0A00               	xorlw	0	; case 0
  6057  00242C  B4D8               	btfsc	status,2,c
  6058  00242E  D62F               	goto	i2l6269
  6059  002430                     i2l6275:
  6060                           
  6061                           ;disp.c: 44: screen.changed &= ~(1 << cnt);
  6062  002430  C01E  F019         	movff	i2update@cnt,??i2_update
  6063  002434  0E01               	movlw	1
  6064  002436  6E1A               	movwf	(??i2_update+1)& (0+255),c
  6065  002438  6A1B               	clrf	(??i2_update+2)& (0+255),c
  6066  00243A  2A19               	incf	??i2_update,f,c
  6067  00243C  D003               	goto	i2u452_44
  6068  00243E                     i2u452_45:
  6069  00243E  90D8               	bcf	status,0,c
  6070  002440  361A               	rlcf	??i2_update+1,f,c
  6071  002442  361B               	rlcf	??i2_update+2,f,c
  6072  002444                     i2u452_44:
  6073  002444  2E19               	decfsz	??i2_update,f,c
  6074  002446  D7FB               	goto	i2u452_45
  6075  002448  1C1A               	comf	??i2_update+1,w,c
  6076  00244A  6E1C               	movwf	(??i2_update+3)& (0+255),c
  6077  00244C  1C1B               	comf	??i2_update+2,w,c
  6078  00244E  6E1D               	movwf	(??i2_update+4)& (0+255),c
  6079  002450  501C               	movf	??i2_update+3,w,c
  6080  002452  0100               	movlb	0	; () banked
  6081  002454  0100               	movlb	0	; () banked
  6082  002456  17E9               	andwf	(_screen+11)& (0+255),f,b
  6083  002458  501D               	movf	??i2_update+4,w,c
  6084  00245A  0100               	movlb	0	; () banked
  6085  00245C  0100               	movlb	0	; () banked
  6086  00245E  17EA               	andwf	(_screen+12)& (0+255),f,b
  6087                           
  6088                           ; BSR set to: 0
  6089  002460  061E               	decf	i2update@cnt,f,c
  6090  002462  D5C7               	goto	L6
  6091  002464                     i2l58:
  6092                           
  6093                           ; BSR set to: 0
  6094  002464  0012               	return	
  6095  002466                     __end_ofi2_update:
  6096                           	opt stack 0
  6097                           tosu	equ	0xFFF
  6098                           tosh	equ	0xFFE
  6099                           tosl	equ	0xFFD
  6100                           pclatu	equ	0xFFB
  6101                           pclath	equ	0xFFA
  6102                           tblptru	equ	0xFF8
  6103                           tblptrh	equ	0xFF7
  6104                           tblptrl	equ	0xFF6
  6105                           tablat	equ	0xFF5
  6106                           prodh	equ	0xFF4
  6107                           prodl	equ	0xFF3
  6108                           intcon	equ	0xFF2
  6109                           intcon2	equ	0xFF1
  6110                           postinc0	equ	0xFEE
  6111                           fsr0h	equ	0xFEA
  6112                           fsr0l	equ	0xFE9
  6113                           wreg	equ	0xFE8
  6114                           postdec1	equ	0xFE5
  6115                           fsr1h	equ	0xFE2
  6116                           fsr1l	equ	0xFE1
  6117                           indf2	equ	0xFDF
  6118                           postinc2	equ	0xFDE
  6119                           fsr2h	equ	0xFDA
  6120                           fsr2l	equ	0xFD9
  6121                           status	equ	0xFD8
  6122                           
  6123 ;; *************** function i2_writeDigit *****************
  6124 ;; Defined at:
  6125 ;;		line 109 in file "disp.c"
  6126 ;; Parameters:    Size  Location     Type
  6127 ;;  writeDigit      1   19[COMRAM] unsigned char 
  6128 ;;  writeDigit      1   20[COMRAM] unsigned char 
  6129 ;; Auto vars:     Size  Location     Type
  6130 ;;  writeDigit      1   23[COMRAM] char 
  6131 ;;  writeDigit      1   22[COMRAM] unsigned char 
  6132 ;; Return value:  Size  Location     Type
  6133 ;;		None               void
  6134 ;; Registers used:
  6135 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6136 ;; Tracked objects:
  6137 ;;		On entry : 0/0
  6138 ;;		On exit  : 0/0
  6139 ;;		Unchanged: 0/0
  6140 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6141 ;;      Params:         2       0       0       0       0       0       0       0       0
  6142 ;;      Locals:         2       0       0       0       0       0       0       0       0
  6143 ;;      Temps:          1       0       0       0       0       0       0       0       0
  6144 ;;      Totals:         5       0       0       0       0       0       0       0       0
  6145 ;;Total ram usage:        5 bytes
  6146 ;; Hardware stack levels used:    1
  6147 ;; Hardware stack levels required when called:    2
  6148 ;; This function calls:
  6149 ;;		i2_spi
  6150 ;;		i2_rotate
  6151 ;;		i2_log2
  6152 ;; This function is called by:
  6153 ;;		i2_update
  6154 ;; This function uses a non-reentrant model
  6155 ;;
  6156                           
  6157                           	psect	text17
  6158  0046DC                     __ptext17:
  6159                           	opt stack 0
  6160  0046DC                     i2_writeDigit:
  6161                           	opt stack 21
  6162                           
  6163                           ;disp.c: 110: uint8_t dig = (uint8_t) log2(digit);
  6164                           
  6165                           ; BSR set to: 0
  6166                           ;incstack = 0
  6167                           ;incstack = 0
  6168  0046DC  5014               	movf	i2writeDigit@digit,w,c
  6169  0046DE  6E0C               	movwf	?i2_log2,c
  6170  0046E0  6A0D               	clrf	?i2_log2+1,c
  6171  0046E2  6A0E               	clrf	?i2_log2+2,c
  6172  0046E4  6A0F               	clrf	?i2_log2+3,c
  6173  0046E6  EC95  F023         	call	i2_log2	;wreg free
  6174  0046EA  500C               	movf	?i2_log2,w,c
  6175  0046EC  6E17               	movwf	i2writeDigit@dig,c
  6176                           
  6177                           ;disp.c: 111: screen.digits.screen[dig].bits = segs;
  6178  0046EE  5017               	movf	i2writeDigit@dig,w,c
  6179  0046F0  0D01               	mullw	1
  6180  0046F2  0100               	movlb	0	; () banked
  6181  0046F4  0EDE               	movlw	low _screen
  6182  0046F6  24F3               	addwf	prodl,w,c
  6183  0046F8  6ED9               	movwf	fsr2l,c
  6184  0046FA  0100               	movlb	0	; () banked
  6185  0046FC  0E00               	movlw	high _screen
  6186  0046FE  20F4               	addwfc	prodh,w,c
  6187  004700  6EDA               	movwf	fsr2h,c
  6188  004702  C015  FFDF         	movff	i2writeDigit@segs,indf2
  6189                           
  6190                           ; BSR set to: 0
  6191                           ;disp.c: 114: int8_t cnt;
  6192                           ;disp.c: 115: for (cnt = 7; cnt >= 0; cnt--)
  6193  004706  6E16               	movwf	??i2_writeDigit& (0+255),c
  6194  004708  0E07               	movlw	7
  6195  00470A  6E18               	movwf	i2writeDigit@cnt,c
  6196  00470C  5016               	movf	??i2_writeDigit& (0+255),w,c
  6197  00470E                     
  6198                           ; BSR set to: 0
  6199  00470E  BE18               	btfsc	i2writeDigit@cnt,7,c
  6200  004710  D00B               	goto	i2l88
  6201                           
  6202                           ;disp.c: 116: {
  6203                           ;disp.c: 118: spi(cnt + 1, rotate(cnt));
  6204                           
  6205                           ; BSR set to: 0
  6206                           
  6207                           ; BSR set to: 0
  6208  004712  2818               	incf	i2writeDigit@cnt,w,c
  6209  004714  6E07               	movwf	?i2_spi,c
  6210  004716  C018  F001         	movff	i2writeDigit@cnt,?i2_rotate
  6211  00471A  EC40  F023         	call	i2_rotate	;wreg free
  6212  00471E  6E08               	movwf	?i2_spi+1,c
  6213  004720  EC02  F01F         	call	i2_spi	;wreg free
  6214  004724  0618               	decf	i2writeDigit@cnt,f,c
  6215  004726  D7F3               	goto	L7
  6216  004728                     i2l88:
  6217  004728  0012               	return	
  6218  00472A                     __end_ofi2_writeDigit:
  6219                           	opt stack 0
  6220                           tosu	equ	0xFFF
  6221                           tosh	equ	0xFFE
  6222                           tosl	equ	0xFFD
  6223                           pclatu	equ	0xFFB
  6224                           pclath	equ	0xFFA
  6225                           tblptru	equ	0xFF8
  6226                           tblptrh	equ	0xFF7
  6227                           tblptrl	equ	0xFF6
  6228                           tablat	equ	0xFF5
  6229                           prodh	equ	0xFF4
  6230                           prodl	equ	0xFF3
  6231                           intcon	equ	0xFF2
  6232                           intcon2	equ	0xFF1
  6233                           postinc0	equ	0xFEE
  6234                           fsr0h	equ	0xFEA
  6235                           fsr0l	equ	0xFE9
  6236                           wreg	equ	0xFE8
  6237                           postdec1	equ	0xFE5
  6238                           fsr1h	equ	0xFE2
  6239                           fsr1l	equ	0xFE1
  6240                           indf2	equ	0xFDF
  6241                           postinc2	equ	0xFDE
  6242                           fsr2h	equ	0xFDA
  6243                           fsr2l	equ	0xFD9
  6244                           status	equ	0xFD8
  6245                           
  6246 ;; *************** function i2_rotate *****************
  6247 ;; Defined at:
  6248 ;;		line 208 in file "disp.c"
  6249 ;; Parameters:    Size  Location     Type
  6250 ;;  rotate          1    0[COMRAM] unsigned char 
  6251 ;; Auto vars:     Size  Location     Type
  6252 ;;  rotate          1    5[COMRAM] char 
  6253 ;;  rotate          1    4[COMRAM] unsigned char 
  6254 ;; Return value:  Size  Location     Type
  6255 ;;                  1    wreg      unsigned char 
  6256 ;; Registers used:
  6257 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  6258 ;; Tracked objects:
  6259 ;;		On entry : 0/0
  6260 ;;		On exit  : 0/0
  6261 ;;		Unchanged: 0/0
  6262 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6263 ;;      Params:         1       0       0       0       0       0       0       0       0
  6264 ;;      Locals:         2       0       0       0       0       0       0       0       0
  6265 ;;      Temps:          3       0       0       0       0       0       0       0       0
  6266 ;;      Totals:         6       0       0       0       0       0       0       0       0
  6267 ;;Total ram usage:        6 bytes
  6268 ;; Hardware stack levels used:    1
  6269 ;; This function calls:
  6270 ;;		Nothing
  6271 ;; This function is called by:
  6272 ;;		i2_writeDigit
  6273 ;; This function uses a non-reentrant model
  6274 ;;
  6275                           
  6276                           	psect	text18
  6277  004680                     __ptext18:
  6278                           	opt stack 0
  6279  004680                     i2_rotate:
  6280                           	opt stack 22
  6281                           
  6282                           ;disp.c: 209: uint8_t ret = 0;
  6283                           
  6284                           ;incstack = 0
  6285                           ;incstack = 0
  6286  004680  6E02               	movwf	??i2_rotate& (0+255),c
  6287  004682  0E00               	movlw	0
  6288  004684  6E05               	movwf	i2rotate@ret,c
  6289  004686  5002               	movf	??i2_rotate& (0+255),w,c
  6290                           
  6291                           ;disp.c: 210: int8_t cnt;
  6292                           ;disp.c: 211: for (cnt = 7; cnt >= 0; cnt--)
  6293  004688  6E02               	movwf	??i2_rotate& (0+255),c
  6294  00468A  0E07               	movlw	7
  6295  00468C  6E06               	movwf	i2rotate@cnt,c
  6296  00468E  5002               	movf	??i2_rotate& (0+255),w,c
  6297  004690  BE06               	btfsc	i2rotate@cnt,7,c
  6298  004692  D022               	goto	i2l5735
  6299                           
  6300                           ;disp.c: 212: {
  6301                           ;disp.c: 213: ret |= ((screen.digits.screen[cnt].bits >> seg) & 1) << cnt;
  6302  004694  C006  F002         	movff	i2rotate@cnt,??i2_rotate
  6303  004698  C001  F003         	movff	i2rotate@seg,??i2_rotate+1
  6304  00469C  5006               	movf	i2rotate@cnt,w,c
  6305  00469E  0D01               	mullw	1
  6306  0046A0  0100               	movlb	0	; () banked
  6307  0046A2  0EDE               	movlw	low _screen
  6308  0046A4  24F3               	addwf	prodl,w,c
  6309  0046A6  6ED9               	movwf	fsr2l,c
  6310  0046A8  0100               	movlb	0	; () banked
  6311  0046AA  0E00               	movlw	high _screen
  6312  0046AC  20F4               	addwfc	prodh,w,c
  6313  0046AE  6EDA               	movwf	fsr2h,c
  6314  0046B0  50DF               	movf	indf2,w,c
  6315  0046B2  6E04               	movwf	(??i2_rotate+2)& (0+255),c
  6316  0046B4  2A03               	incf	??i2_rotate+1,f,c
  6317  0046B6  D002               	goto	i2u371_44
  6318  0046B8                     i2u371_45:
  6319  0046B8  90D8               	bcf	status,0,c
  6320  0046BA  3204               	rrcf	??i2_rotate+2,f,c
  6321  0046BC                     i2u371_44:
  6322  0046BC  2E03               	decfsz	??i2_rotate+1,f,c
  6323  0046BE  D7FC               	goto	i2u371_45
  6324  0046C0  0E01               	movlw	1
  6325  0046C2  1604               	andwf	??i2_rotate+2,f,c
  6326  0046C4  2A02               	incf	??i2_rotate,f,c
  6327  0046C6  D002               	goto	i2u372_44
  6328  0046C8                     i2u372_45:
  6329  0046C8  90D8               	bcf	status,0,c
  6330  0046CA  3604               	rlcf	??i2_rotate+2,f,c
  6331  0046CC                     i2u372_44:
  6332  0046CC  2E02               	decfsz	??i2_rotate,f,c
  6333  0046CE  D7FC               	goto	i2u372_45
  6334  0046D0  5004               	movf	??i2_rotate+2,w,c
  6335  0046D2  1205               	iorwf	i2rotate@ret,f,c
  6336                           
  6337                           ; BSR set to: 0
  6338  0046D4  0606               	decf	i2rotate@cnt,f,c
  6339  0046D6  D7DC               	goto	L8
  6340  0046D8                     i2l5735:
  6341                           
  6342                           ;disp.c: 214: }
  6343                           ;disp.c: 215: return ret;
  6344  0046D8  5005               	movf	i2rotate@ret,w,c
  6345  0046DA  0012               	return	
  6346  0046DC                     __end_ofi2_rotate:
  6347                           	opt stack 0
  6348                           tosu	equ	0xFFF
  6349                           tosh	equ	0xFFE
  6350                           tosl	equ	0xFFD
  6351                           pclatu	equ	0xFFB
  6352                           pclath	equ	0xFFA
  6353                           tblptru	equ	0xFF8
  6354                           tblptrh	equ	0xFF7
  6355                           tblptrl	equ	0xFF6
  6356                           tablat	equ	0xFF5
  6357                           prodh	equ	0xFF4
  6358                           prodl	equ	0xFF3
  6359                           intcon	equ	0xFF2
  6360                           intcon2	equ	0xFF1
  6361                           postinc0	equ	0xFEE
  6362                           fsr0h	equ	0xFEA
  6363                           fsr0l	equ	0xFE9
  6364                           wreg	equ	0xFE8
  6365                           postdec1	equ	0xFE5
  6366                           fsr1h	equ	0xFE2
  6367                           fsr1l	equ	0xFE1
  6368                           indf2	equ	0xFDF
  6369                           postinc2	equ	0xFDE
  6370                           fsr2h	equ	0xFDA
  6371                           fsr2l	equ	0xFD9
  6372                           status	equ	0xFD8
  6373                           
  6374 ;; *************** function i2_spi *****************
  6375 ;; Defined at:
  6376 ;;		line 87 in file "disp.c"
  6377 ;; Parameters:    Size  Location     Type
  6378 ;;  spi             1    6[COMRAM] unsigned char 
  6379 ;;  spi             1    7[COMRAM] unsigned char 
  6380 ;; Auto vars:     Size  Location     Type
  6381 ;;  spi             2   11[COMRAM] unsigned int 
  6382 ;;  spi             1   13[COMRAM] char 
  6383 ;; Return value:  Size  Location     Type
  6384 ;;		None               void
  6385 ;; Registers used:
  6386 ;;		wreg, status,2, status,0, cstack
  6387 ;; Tracked objects:
  6388 ;;		On entry : 0/0
  6389 ;;		On exit  : 0/0
  6390 ;;		Unchanged: 0/0
  6391 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6392 ;;      Params:         2       0       0       0       0       0       0       0       0
  6393 ;;      Locals:         3       0       0       0       0       0       0       0       0
  6394 ;;      Temps:          3       0       0       0       0       0       0       0       0
  6395 ;;      Totals:         8       0       0       0       0       0       0       0       0
  6396 ;;Total ram usage:        8 bytes
  6397 ;; Hardware stack levels used:    1
  6398 ;; Hardware stack levels required when called:    1
  6399 ;; This function calls:
  6400 ;;		i2_wait
  6401 ;; This function is called by:
  6402 ;;		i2_update
  6403 ;;		i2_writeDigit
  6404 ;; This function uses a non-reentrant model
  6405 ;;
  6406                           
  6407                           	psect	text19
  6408  003E04                     __ptext19:
  6409                           	opt stack 0
  6410  003E04                     i2_spi:
  6411                           	opt stack 21
  6412                           
  6413                           ;disp.c: 88: uint16_t send = (addr << 8) | data;
  6414                           
  6415                           ;incstack = 0
  6416                           ;incstack = 0
  6417  003E04  5008               	movf	i2spi@data,w,c
  6418  003E06  C007  F009         	movff	i2spi@addr,??i2_spi
  6419  003E0A  6A0A               	clrf	(??i2_spi+1)& (0+255),c
  6420  003E0C  C009  F00A         	movff	??i2_spi,??i2_spi+1
  6421  003E10  6A09               	clrf	??i2_spi,c
  6422  003E12  1009               	iorwf	??i2_spi,w,c
  6423  003E14  6E0C               	movwf	i2spi@send,c
  6424  003E16  500A               	movf	??i2_spi+1,w,c
  6425  003E18  6E0D               	movwf	i2spi@send+1,c
  6426                           
  6427                           ;disp.c: 89: LATA4 = 0;
  6428  003E1A  9889               	bcf	3977,4,c	;volatile
  6429                           
  6430                           ;disp.c: 90: LATA1 = 0;
  6431  003E1C  9289               	bcf	3977,1,c	;volatile
  6432                           
  6433                           ;disp.c: 91: LATA3 = 0;
  6434  003E1E  9689               	bcf	3977,3,c	;volatile
  6435                           
  6436                           ;disp.c: 92: int8_t cnt;
  6437                           ;disp.c: 93: for (cnt = 15; cnt >= 0; cnt--)
  6438  003E20  6E09               	movwf	??i2_spi& (0+255),c
  6439  003E22  0E0F               	movlw	15
  6440  003E24  6E0E               	movwf	i2spi@cnt,c
  6441  003E26  5009               	movf	??i2_spi& (0+255),w,c
  6442  003E28  BE0E               	btfsc	i2spi@cnt,7,c
  6443  003E2A  D02D               	goto	i2l82
  6444                           
  6445                           ;disp.c: 94: {
  6446                           ;disp.c: 95: LATA1 = 0x1 & (send >> cnt);
  6447  003E2C  C00E  F009         	movff	i2spi@cnt,??i2_spi
  6448  003E30  C00C  F00A         	movff	i2spi@send,??i2_spi+1
  6449  003E34  C00D  F00B         	movff	i2spi@send+1,??i2_spi+2
  6450  003E38  2A09               	incf	??i2_spi,f,c
  6451  003E3A  D003               	goto	i2u410_44
  6452  003E3C                     i2u410_45:
  6453  003E3C  90D8               	bcf	status,0,c
  6454  003E3E  320B               	rrcf	??i2_spi+2,f,c
  6455  003E40  320A               	rrcf	??i2_spi+1,f,c
  6456  003E42                     i2u410_44:
  6457  003E42  2E09               	decfsz	??i2_spi,f,c
  6458  003E44  D7FB               	goto	i2u410_45
  6459  003E46  300A               	rrcf	??i2_spi+1,w,c
  6460  003E48  A0D8               	btfss	status,0,c
  6461  003E4A  D001               	bra	i2u411_45
  6462  003E4C  8289               	bsf	3977,1,c	;volatile
  6463  003E4E                     i2u411_45:
  6464  003E4E  B0D8               	btfsc	status,0,c
  6465  003E50  D001               	bra	i2u411_46
  6466  003E52  9289               	bcf	3977,1,c	;volatile
  6467  003E54                     i2u411_46:
  6468                           
  6469                           ;disp.c: 96: wait(0);
  6470  003E54  0E00               	movlw	0
  6471  003E56  6E01               	movwf	?i2_wait,c
  6472  003E58  0E00               	movlw	0
  6473  003E5A  6E02               	movwf	?i2_wait+1,c
  6474  003E5C  0E00               	movlw	0
  6475  003E5E  6E03               	movwf	?i2_wait+2,c
  6476  003E60  0E00               	movlw	0
  6477  003E62  6E04               	movwf	?i2_wait+3,c
  6478  003E64  EC1A  F025         	call	i2_wait	;wreg free
  6479                           
  6480                           ;disp.c: 97: LATA3 = 1;
  6481  003E68  8689               	bsf	3977,3,c	;volatile
  6482                           
  6483                           ;disp.c: 98: wait(0);
  6484  003E6A  0E00               	movlw	0
  6485  003E6C  6E01               	movwf	?i2_wait,c
  6486  003E6E  0E00               	movlw	0
  6487  003E70  6E02               	movwf	?i2_wait+1,c
  6488  003E72  0E00               	movlw	0
  6489  003E74  6E03               	movwf	?i2_wait+2,c
  6490  003E76  0E00               	movlw	0
  6491  003E78  6E04               	movwf	?i2_wait+3,c
  6492  003E7A  EC1A  F025         	call	i2_wait	;wreg free
  6493                           
  6494                           ;disp.c: 99: LATA3 = 0;
  6495  003E7E  9689               	bcf	3977,3,c	;volatile
  6496                           
  6497                           ;disp.c: 100: LATA1 = 0;
  6498  003E80  9289               	bcf	3977,1,c	;volatile
  6499  003E82  060E               	decf	i2spi@cnt,f,c
  6500  003E84  D7D1               	goto	L9
  6501  003E86                     i2l82:
  6502                           
  6503                           ;disp.c: 101: }
  6504                           ;disp.c: 102: LATA4 = 1;
  6505  003E86  8889               	bsf	3977,4,c	;volatile
  6506                           
  6507                           ;disp.c: 103: LATA3 = 0;
  6508  003E88  9689               	bcf	3977,3,c	;volatile
  6509                           
  6510                           ;disp.c: 104: LATA1 = 0;
  6511  003E8A  9289               	bcf	3977,1,c	;volatile
  6512                           
  6513                           ;disp.c: 105: wait(0);
  6514  003E8C  0E00               	movlw	0
  6515  003E8E  6E01               	movwf	?i2_wait,c
  6516  003E90  0E00               	movlw	0
  6517  003E92  6E02               	movwf	?i2_wait+1,c
  6518  003E94  0E00               	movlw	0
  6519  003E96  6E03               	movwf	?i2_wait+2,c
  6520  003E98  0E00               	movlw	0
  6521  003E9A  6E04               	movwf	?i2_wait+3,c
  6522  003E9C  EC1A  F025         	call	i2_wait	;wreg free
  6523  003EA0  0012               	return	
  6524  003EA2                     __end_ofi2_spi:
  6525                           	opt stack 0
  6526                           tosu	equ	0xFFF
  6527                           tosh	equ	0xFFE
  6528                           tosl	equ	0xFFD
  6529                           pclatu	equ	0xFFB
  6530                           pclath	equ	0xFFA
  6531                           tblptru	equ	0xFF8
  6532                           tblptrh	equ	0xFF7
  6533                           tblptrl	equ	0xFF6
  6534                           tablat	equ	0xFF5
  6535                           prodh	equ	0xFF4
  6536                           prodl	equ	0xFF3
  6537                           intcon	equ	0xFF2
  6538                           intcon2	equ	0xFF1
  6539                           postinc0	equ	0xFEE
  6540                           fsr0h	equ	0xFEA
  6541                           fsr0l	equ	0xFE9
  6542                           wreg	equ	0xFE8
  6543                           postdec1	equ	0xFE5
  6544                           fsr1h	equ	0xFE2
  6545                           fsr1l	equ	0xFE1
  6546                           indf2	equ	0xFDF
  6547                           postinc2	equ	0xFDE
  6548                           fsr2h	equ	0xFDA
  6549                           fsr2l	equ	0xFD9
  6550                           status	equ	0xFD8
  6551                           
  6552 ;; *************** function i2_wait *****************
  6553 ;; Defined at:
  6554 ;;		line 4 in file "defs.c"
  6555 ;; Parameters:    Size  Location     Type
  6556 ;;  wait            4    0[COMRAM] unsigned long 
  6557 ;; Auto vars:     Size  Location     Type
  6558 ;;		None
  6559 ;; Return value:  Size  Location     Type
  6560 ;;		None               void
  6561 ;; Registers used:
  6562 ;;		wreg, status,2, status,0
  6563 ;; Tracked objects:
  6564 ;;		On entry : 0/0
  6565 ;;		On exit  : 0/0
  6566 ;;		Unchanged: 0/0
  6567 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6568 ;;      Params:         4       0       0       0       0       0       0       0       0
  6569 ;;      Locals:         0       0       0       0       0       0       0       0       0
  6570 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6571 ;;      Totals:         4       0       0       0       0       0       0       0       0
  6572 ;;Total ram usage:        4 bytes
  6573 ;; Hardware stack levels used:    1
  6574 ;; This function calls:
  6575 ;;		Nothing
  6576 ;; This function is called by:
  6577 ;;		i2_spi
  6578 ;; This function uses a non-reentrant model
  6579 ;;
  6580                           
  6581                           	psect	text20
  6582  004A34                     __ptext20:
  6583                           	opt stack 0
  6584  004A34                     i2_wait:
  6585                           	opt stack 21
  6586  004A34                     i2l5741:
  6587  004A34  0601               	decf	i2wait@count,f,c
  6588  004A36  0E00               	movlw	0
  6589  004A38  5A02               	subwfb	i2wait@count+1,f,c
  6590  004A3A  5A03               	subwfb	i2wait@count+2,f,c
  6591  004A3C  5A04               	subwfb	i2wait@count+3,f,c
  6592  004A3E  2801               	incf	i2wait@count& (0+255),w,c
  6593  004A40  B4D8               	btfsc	status,2,c
  6594  004A42  2802               	incf	(i2wait@count+1)& (0+255),w,c
  6595  004A44  B4D8               	btfsc	status,2,c
  6596  004A46  2803               	incf	(i2wait@count+2)& (0+255),w,c
  6597  004A48  B4D8               	btfsc	status,2,c
  6598  004A4A  2804               	incf	(i2wait@count+3)& (0+255),w,c
  6599  004A4C  B4D8               	btfsc	status,2,c
  6600  004A4E  0012               	return	
  6601  004A50  D7F1               	goto	i2l5741
  6602  004A52                     __end_ofi2_wait:
  6603                           	opt stack 0
  6604                           tosu	equ	0xFFF
  6605                           tosh	equ	0xFFE
  6606                           tosl	equ	0xFFD
  6607                           pclatu	equ	0xFFB
  6608                           pclath	equ	0xFFA
  6609                           tblptru	equ	0xFF8
  6610                           tblptrh	equ	0xFF7
  6611                           tblptrl	equ	0xFF6
  6612                           tablat	equ	0xFF5
  6613                           prodh	equ	0xFF4
  6614                           prodl	equ	0xFF3
  6615                           intcon	equ	0xFF2
  6616                           intcon2	equ	0xFF1
  6617                           postinc0	equ	0xFEE
  6618                           fsr0h	equ	0xFEA
  6619                           fsr0l	equ	0xFE9
  6620                           wreg	equ	0xFE8
  6621                           postdec1	equ	0xFE5
  6622                           fsr1h	equ	0xFE2
  6623                           fsr1l	equ	0xFE1
  6624                           indf2	equ	0xFDF
  6625                           postinc2	equ	0xFDE
  6626                           fsr2h	equ	0xFDA
  6627                           fsr2l	equ	0xFD9
  6628                           status	equ	0xFD8
  6629                           
  6630 ;; *************** function _advMenu *****************
  6631 ;; Defined at:
  6632 ;;		line 14 in file "menu.c"
  6633 ;; Parameters:    Size  Location     Type
  6634 ;;		None
  6635 ;; Auto vars:     Size  Location     Type
  6636 ;;		None
  6637 ;; Return value:  Size  Location     Type
  6638 ;;		None               void
  6639 ;; Registers used:
  6640 ;;		wreg, status,2, status,0
  6641 ;; Tracked objects:
  6642 ;;		On entry : 0/0
  6643 ;;		On exit  : 0/0
  6644 ;;		Unchanged: 0/0
  6645 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6646 ;;      Params:         0       0       0       0       0       0       0       0       0
  6647 ;;      Locals:         0       0       0       0       0       0       0       0       0
  6648 ;;      Temps:          2       0       0       0       0       0       0       0       0
  6649 ;;      Totals:         2       0       0       0       0       0       0       0       0
  6650 ;;Total ram usage:        2 bytes
  6651 ;; Hardware stack levels used:    1
  6652 ;; This function calls:
  6653 ;;		Nothing
  6654 ;; This function is called by:
  6655 ;;		_buttons
  6656 ;; This function uses a non-reentrant model
  6657 ;;
  6658                           
  6659                           	psect	text21
  6660  003F3C                     __ptext21:
  6661                           	opt stack 0
  6662  003F3C                     _advMenu:
  6663                           	opt stack 24
  6664                           
  6665                           ;menu.c: 15: if (menu == &rtcMenu)
  6666                           
  6667                           ;incstack = 0
  6668                           ;incstack = 0
  6669  003F3C  0E51               	movlw	low _rtcMenu
  6670  003F3E  6E01               	movwf	??_advMenu& (0+255),c
  6671  003F40  0E01               	movlw	high _rtcMenu
  6672  003F42  6E02               	movwf	(??_advMenu+1)& (0+255),c
  6673  003F44  5002               	movf	??_advMenu+1,w,c
  6674  003F46  0100               	movlb	0	; () banked
  6675  003F48  0100               	movlb	0	; () banked
  6676  003F4A  19D8               	xorwf	(_menu+1)& (0+255),w,b
  6677  003F4C  E104               	bnz	i2u324_45
  6678  003F4E  5001               	movf	??_advMenu,w,c
  6679  003F50  0100               	movlb	0	; () banked
  6680  003F52  0100               	movlb	0	; () banked
  6681  003F54  19D7               	xorwf	_menu& (0+255),w,b
  6682  003F56                     i2u324_45:
  6683  003F56  A4D8               	btfss	status,2,c
  6684  003F58  D008               	goto	i2l5397
  6685                           
  6686                           ; BSR set to: 0
  6687                           ;menu.c: 16: {
  6688                           ;menu.c: 17: menu = &tempMenu;
  6689  003F5A  0101               	movlb	1	; () banked
  6690  003F5C  0E01               	movlw	high _tempMenu
  6691  003F5E  0100               	movlb	0	; () banked
  6692  003F60  0100               	movlb	0	; () banked
  6693  003F62  6FD8               	movwf	(_menu+1)& (0+255),b
  6694  003F64  0101               	movlb	1	; () banked
  6695  003F66  0E21               	movlw	low _tempMenu
  6696  003F68  D016               	goto	L10
  6697  003F6A                     i2l5397:
  6698                           
  6699                           ; BSR set to: 0
  6700                           ;menu.c: 19: else if (menu == &tempMenu)
  6701  003F6A  0E21               	movlw	low _tempMenu
  6702  003F6C  6E01               	movwf	??_advMenu& (0+255),c
  6703  003F6E  0E01               	movlw	high _tempMenu
  6704  003F70  6E02               	movwf	(??_advMenu+1)& (0+255),c
  6705  003F72  5002               	movf	??_advMenu+1,w,c
  6706  003F74  0100               	movlb	0	; () banked
  6707  003F76  0100               	movlb	0	; () banked
  6708  003F78  19D8               	xorwf	(_menu+1)& (0+255),w,b
  6709  003F7A  E104               	bnz	i2u325_45
  6710  003F7C  5001               	movf	??_advMenu,w,c
  6711  003F7E  0100               	movlb	0	; () banked
  6712  003F80  0100               	movlb	0	; () banked
  6713  003F82  19D7               	xorwf	_menu& (0+255),w,b
  6714  003F84                     i2u325_45:
  6715  003F84  A4D8               	btfss	status,2,c
  6716  003F86  D009               	goto	i2l5401
  6717                           
  6718                           ; BSR set to: 0
  6719                           ;menu.c: 20: {
  6720                           ;menu.c: 21: menu = &rtcMenu;
  6721  003F88  0101               	movlb	1	; () banked
  6722  003F8A  0E01               	movlw	high _rtcMenu
  6723  003F8C  0100               	movlb	0	; () banked
  6724  003F8E  0100               	movlb	0	; () banked
  6725  003F90  6FD8               	movwf	(_menu+1)& (0+255),b
  6726  003F92  0101               	movlb	1	; () banked
  6727  003F94  0E51               	movlw	low _rtcMenu
  6728  003F96                     L10:
  6729  003F96  0100               	movlb	0	; () banked
  6730  003F98  6FD7               	movwf	_menu& (0+255),b
  6731  003F9A                     i2l5401:
  6732                           
  6733                           ; BSR set to: 0
  6734                           ;menu.c: 22: }
  6735                           ;menu.c: 23: screen.changed |= rtcMenu.digits | tempMenu.digits;
  6736  003F9A  0101               	movlb	1	; () banked
  6737  003F9C  0101               	movlb	1	; () banked
  6738  003F9E  5152               	movf	(_rtcMenu+1)& (0+255),w,b
  6739  003FA0  0101               	movlb	1	; () banked
  6740  003FA2  0101               	movlb	1	; () banked
  6741  003FA4  1122               	iorwf	(_tempMenu+1)& (0+255),w,b
  6742  003FA6  6E01               	movwf	??_advMenu& (0+255),c
  6743  003FA8  5001               	movf	??_advMenu,w,c
  6744  003FAA  0100               	movlb	0	; () banked
  6745  003FAC  0100               	movlb	0	; () banked
  6746  003FAE  13E9               	iorwf	(_screen+11)& (0+255),f,b
  6747                           
  6748                           ; BSR set to: 0
  6749                           ;menu.c: 24: LATA5 = (menu == &tempMenu) ? 0 : 1;
  6750  003FB0  0E21               	movlw	low _tempMenu
  6751  003FB2  6E01               	movwf	??_advMenu& (0+255),c
  6752  003FB4  0E01               	movlw	high _tempMenu
  6753  003FB6  6E02               	movwf	(??_advMenu+1)& (0+255),c
  6754  003FB8  5002               	movf	??_advMenu+1,w,c
  6755  003FBA  0100               	movlb	0	; () banked
  6756  003FBC  0100               	movlb	0	; () banked
  6757  003FBE  19D8               	xorwf	(_menu+1)& (0+255),w,b
  6758  003FC0  E104               	bnz	i2u326_45
  6759  003FC2  5001               	movf	??_advMenu,w,c
  6760  003FC4  0100               	movlb	0	; () banked
  6761  003FC6  0100               	movlb	0	; () banked
  6762  003FC8  19D7               	xorwf	_menu& (0+255),w,b
  6763  003FCA                     i2u326_45:
  6764  003FCA  B4D8               	btfsc	status,2,c
  6765  003FCC  D002               	goto	i2u326_40
  6766  003FCE  8A89               	bsf	3977,5,c	;volatile
  6767  003FD0  D001               	goto	i2u327_45
  6768  003FD2                     i2u326_40:
  6769  003FD2  9A89               	bcf	3977,5,c	;volatile
  6770  003FD4                     i2u327_45:
  6771  003FD4  0012               	return	
  6772  003FD6                     __end_of_advMenu:
  6773                           	opt stack 0
  6774                           tosu	equ	0xFFF
  6775                           tosh	equ	0xFFE
  6776                           tosl	equ	0xFFD
  6777                           pclatu	equ	0xFFB
  6778                           pclath	equ	0xFFA
  6779                           tblptru	equ	0xFF8
  6780                           tblptrh	equ	0xFF7
  6781                           tblptrl	equ	0xFF6
  6782                           tablat	equ	0xFF5
  6783                           prodh	equ	0xFF4
  6784                           prodl	equ	0xFF3
  6785                           intcon	equ	0xFF2
  6786                           intcon2	equ	0xFF1
  6787                           postinc0	equ	0xFEE
  6788                           fsr0h	equ	0xFEA
  6789                           fsr0l	equ	0xFE9
  6790                           wreg	equ	0xFE8
  6791                           postdec1	equ	0xFE5
  6792                           fsr1h	equ	0xFE2
  6793                           fsr1l	equ	0xFE1
  6794                           indf2	equ	0xFDF
  6795                           postinc2	equ	0xFDE
  6796                           fsr2h	equ	0xFDA
  6797                           fsr2l	equ	0xFD9
  6798                           status	equ	0xFD8
  6799                           
  6800 ;; *************** function _advState *****************
  6801 ;; Defined at:
  6802 ;;		line 7 in file "menu.c"
  6803 ;; Parameters:    Size  Location     Type
  6804 ;;		None
  6805 ;; Auto vars:     Size  Location     Type
  6806 ;;		None
  6807 ;; Return value:  Size  Location     Type
  6808 ;;                  1    wreg      unsigned char 
  6809 ;; Registers used:
  6810 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6811 ;; Tracked objects:
  6812 ;;		On entry : 0/0
  6813 ;;		On exit  : 0/0
  6814 ;;		Unchanged: 0/0
  6815 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6816 ;;      Params:         0       0       0       0       0       0       0       0       0
  6817 ;;      Locals:         0       0       0       0       0       0       0       0       0
  6818 ;;      Temps:          2       0       0       0       0       0       0       0       0
  6819 ;;      Totals:         2       0       0       0       0       0       0       0       0
  6820 ;;Total ram usage:        2 bytes
  6821 ;; Hardware stack levels used:    1
  6822 ;; Hardware stack levels required when called:    1
  6823 ;; This function calls:
  6824 ;;		___awmod
  6825 ;; This function is called by:
  6826 ;;		_buttons
  6827 ;; This function uses a non-reentrant model
  6828 ;;
  6829                           
  6830                           	psect	text22
  6831  004476                     __ptext22:
  6832                           	opt stack 0
  6833  004476                     _advState:
  6834                           	opt stack 23
  6835                           
  6836                           ;menu.c: 8: menu->state = menu->num_states % (menu->state + 1);
  6837                           
  6838                           ;incstack = 0
  6839                           ;incstack = 0
  6840  004476  0100               	movlb	0	; () banked
  6841  004478  EE20 F002          	lfsr	2,2
  6842  00447C  0100               	movlb	0	; () banked
  6843  00447E  51D7               	movf	_menu& (0+255),w,b
  6844  004480  26D9               	addwf	fsr2l,f,c
  6845  004482  0100               	movlb	0	; () banked
  6846  004484  51D8               	movf	(_menu+1)& (0+255),w,b
  6847  004486  22DA               	addwfc	fsr2h,f,c
  6848  004488  50DF               	movf	indf2,w,c
  6849  00448A  6E0A               	movwf	??_advState& (0+255),c
  6850  00448C  500A               	movf	??_advState,w,c
  6851  00448E  6E01               	movwf	?___awmod,c
  6852  004490  6A02               	clrf	?___awmod+1,c
  6853  004492  C0D7  FFD9         	movff	_menu,fsr2l
  6854  004496  C0D8  FFDA         	movff	_menu+1,fsr2h
  6855  00449A  50DF               	movf	indf2,w,c
  6856  00449C  6E0B               	movwf	(??_advState+1)& (0+255),c
  6857  00449E  0E01               	movlw	1
  6858  0044A0  240B               	addwf	??_advState+1,w,c
  6859  0044A2  6E03               	movwf	?___awmod+2,c
  6860  0044A4  6A04               	clrf	?___awmod+3,c
  6861  0044A6  0E00               	movlw	0
  6862  0044A8  2204               	addwfc	?___awmod+3,f,c
  6863  0044AA  EC4A  F021         	call	___awmod	;wreg free
  6864  0044AE  5001               	movf	?___awmod,w,c
  6865  0044B0  C0D7  FFD9         	movff	_menu,fsr2l
  6866  0044B4  C0D8  FFDA         	movff	_menu+1,fsr2h
  6867  0044B8  6EDF               	movwf	indf2,c
  6868                           
  6869                           ;menu.c: 9: screen.changed |= menu->digits;
  6870  0044BA  0100               	movlb	0	; () banked
  6871  0044BC  EE20 F001          	lfsr	2,1
  6872  0044C0  0100               	movlb	0	; () banked
  6873  0044C2  51D7               	movf	_menu& (0+255),w,b
  6874  0044C4  26D9               	addwf	fsr2l,f,c
  6875  0044C6  0100               	movlb	0	; () banked
  6876  0044C8  51D8               	movf	(_menu+1)& (0+255),w,b
  6877  0044CA  22DA               	addwfc	fsr2h,f,c
  6878  0044CC  50DF               	movf	indf2,w,c
  6879  0044CE  6E0A               	movwf	??_advState& (0+255),c
  6880  0044D0  500A               	movf	??_advState,w,c
  6881  0044D2  0100               	movlb	0	; () banked
  6882  0044D4  0100               	movlb	0	; () banked
  6883  0044D6  13E9               	iorwf	(_screen+11)& (0+255),f,b
  6884                           
  6885                           ; BSR set to: 0
  6886                           ;menu.c: 10: return menu->state;
  6887  0044D8  C0D7  FFD9         	movff	_menu,fsr2l
  6888  0044DC  C0D8  FFDA         	movff	_menu+1,fsr2h
  6889  0044E0  50DF               	movf	indf2,w,c
  6890                           
  6891                           ; BSR set to: 0
  6892                           
  6893                           ; BSR set to: 0
  6894  0044E2  0012               	return	
  6895  0044E4                     __end_of_advState:
  6896                           	opt stack 0
  6897                           tosu	equ	0xFFF
  6898                           tosh	equ	0xFFE
  6899                           tosl	equ	0xFFD
  6900                           pclatu	equ	0xFFB
  6901                           pclath	equ	0xFFA
  6902                           tblptru	equ	0xFF8
  6903                           tblptrh	equ	0xFF7
  6904                           tblptrl	equ	0xFF6
  6905                           tablat	equ	0xFF5
  6906                           prodh	equ	0xFF4
  6907                           prodl	equ	0xFF3
  6908                           intcon	equ	0xFF2
  6909                           intcon2	equ	0xFF1
  6910                           postinc0	equ	0xFEE
  6911                           fsr0h	equ	0xFEA
  6912                           fsr0l	equ	0xFE9
  6913                           wreg	equ	0xFE8
  6914                           postdec1	equ	0xFE5
  6915                           fsr1h	equ	0xFE2
  6916                           fsr1l	equ	0xFE1
  6917                           indf2	equ	0xFDF
  6918                           postinc2	equ	0xFDE
  6919                           fsr2h	equ	0xFDA
  6920                           fsr2l	equ	0xFD9
  6921                           status	equ	0xFD8
  6922                           
  6923 ;; *************** function _printRTC *****************
  6924 ;; Defined at:
  6925 ;;		line 250 in file "RTC.c"
  6926 ;; Parameters:    Size  Location     Type
  6927 ;;  digits          1   94[COMRAM] unsigned char 
  6928 ;; Auto vars:     Size  Location     Type
  6929 ;;  str            12   40[BANK0 ] unsigned char [12]
  6930 ;;  cnt             1   54[BANK0 ] unsigned char 
  6931 ;;  first           1   39[BANK0 ] unsigned char 
  6932 ;; Return value:  Size  Location     Type
  6933 ;;                  2   94[COMRAM] PTR void 
  6934 ;; Registers used:
  6935 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6936 ;; Tracked objects:
  6937 ;;		On entry : 0/0
  6938 ;;		On exit  : 0/0
  6939 ;;		Unchanged: 0/0
  6940 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6941 ;;      Params:         1       0       0       0       0       0       0       0       0
  6942 ;;      Locals:         0      16       0       0       0       0       0       0       0
  6943 ;;      Temps:          0       1       0       0       0       0       0       0       0
  6944 ;;      Totals:         1      17       0       0       0       0       0       0       0
  6945 ;;Total ram usage:       18 bytes
  6946 ;; Hardware stack levels used:    1
  6947 ;; Hardware stack levels required when called:    5
  6948 ;; This function calls:
  6949 ;;		_countBits
  6950 ;;		_sprintf
  6951 ;;		_writeString
  6952 ;;		___lwmod
  6953 ;; This function is called by:
  6954 ;;		_initRTC
  6955 ;;		_isr
  6956 ;; This function uses a non-reentrant model
  6957 ;;
  6958                           
  6959                           	psect	text23
  6960  001B32                     __ptext23:
  6961                           	opt stack 0
  6962  001B32                     _printRTC:
  6963                           	opt stack 20
  6964                           
  6965                           ;RTC.c: 251: char str[12] = "";
  6966                           
  6967                           ; BSR set to: 0
  6968                           ;incstack = 0
  6969                           ;incstack = 0
  6970  001B32  EE21  F00C         	lfsr	2,printRTC@F5073
  6971  001B36  EE10  F088         	lfsr	1,printRTC@str
  6972  001B3A  0E0C               	movlw	12
  6973  001B3C                     i2u742_41:
  6974  001B3C  CFDE FFE6          	movff	postinc2,postinc1
  6975  001B40  2EE8               	decfsz	wreg,f,c
  6976  001B42  D7FC               	goto	i2u742_41
  6977                           
  6978                           ;RTC.c: 252: uint8_t cnt;
  6979                           ;RTC.c: 253: bool first = 1;
  6980  001B44  0100               	movlb	0	; () banked
  6981  001B46  6F86               	movwf	??_printRTC& (0+255),b
  6982  001B48  0E01               	movlw	1
  6983  001B4A  0100               	movlb	0	; () banked
  6984  001B4C  0100               	movlb	0	; () banked
  6985  001B4E  6F87               	movwf	printRTC@first& (0+255),b
  6986  001B50  0100               	movlb	0	; () banked
  6987  001B52  5186               	movf	??_printRTC& (0+255),w,b
  6988                           
  6989                           ; BSR set to: 0
  6990                           ;RTC.c: 254: for (cnt = rtcMenu.state; cnt != rtcMenu.state && !first; cnt++)
  6991  001B54  C151  F096         	movff	_rtcMenu,printRTC@cnt
  6992  001B58  D223               	goto	i2l9197
  6993  001B5A                     i2l270:
  6994                           
  6995                           ; BSR set to: 0
  6996                           ;RTC.c: 255: {
  6997                           ;RTC.c: 256: if (cnt == 0)
  6998  001B5A  0100               	movlb	0	; () banked
  6999  001B5C  0100               	movlb	0	; () banked
  7000  001B5E  6796               	tstfsz	printRTC@cnt& (0+255),b
  7001  001B60  D1FA               	goto	i2l9193
  7002                           
  7003                           ; BSR set to: 0
  7004                           ;RTC.c: 257: {
  7005                           ;RTC.c: 258: first = 0;
  7006  001B62  0100               	movlb	0	; () banked
  7007  001B64  6F86               	movwf	??_printRTC& (0+255),b
  7008  001B66  0E00               	movlw	0
  7009  001B68  0100               	movlb	0	; () banked
  7010  001B6A  0100               	movlb	0	; () banked
  7011  001B6C  6F87               	movwf	printRTC@first& (0+255),b
  7012  001B6E  0100               	movlb	0	; () banked
  7013  001B70  5186               	movf	??_printRTC& (0+255),w,b
  7014  001B72  D1F1               	goto	i2l9193
  7015  001B74                     i2l9143:
  7016                           
  7017                           ; BSR set to: 0
  7018                           ;RTC.c: 266: sprintf(&str, "%s %02d.%02d", (dow[date.dow]), date.hour, date.minute);
  7019  001B74  0100               	movlb	0	; () banked
  7020  001B76  0E00               	movlw	high printRTC@str
  7021  001B78  6E54               	movwf	?_sprintf+1,c
  7022  001B7A  0100               	movlb	0	; () banked
  7023  001B7C  0E88               	movlw	low printRTC@str
  7024  001B7E  6E53               	movwf	?_sprintf,c
  7025  001B80  0E7F               	movlw	high STR_3
  7026  001B82  6E56               	movwf	?_sprintf+3,c
  7027  001B84  0EDB               	movlw	low STR_3
  7028  001B86  6E55               	movwf	?_sprintf+2,c
  7029  001B88  0100               	movlb	0	; () banked
  7030  001B8A  0100               	movlb	0	; () banked
  7031  001B8C  51CA               	movf	(_date+4)& (0+255),w,b
  7032  001B8E  0D04               	mullw	4
  7033  001B90  0E81               	movlw	low _dow
  7034  001B92  24F3               	addwf	prodl,w,c
  7035  001B94  6E57               	movwf	?_sprintf+4,c
  7036  001B96  0E7F               	movlw	high _dow
  7037  001B98  20F4               	addwfc	prodh,w,c
  7038  001B9A  6E58               	movwf	?_sprintf+5,c
  7039  001B9C  0100               	movlb	0	; () banked
  7040  001B9E  C0C8  F059         	movff	_date+2,?_sprintf+6
  7041  001BA2  6A5A               	clrf	?_sprintf+7,c
  7042  001BA4  0100               	movlb	0	; () banked
  7043  001BA6  C0C7  F05B         	movff	_date+1,?_sprintf+8
  7044  001BAA  6A5C               	clrf	?_sprintf+9,c
  7045  001BAC  EC0E  F000         	call	_sprintf	;wreg free
  7046                           
  7047                           ;RTC.c: 267: break;
  7048  001BB0  D17E               	goto	i2l9179
  7049  001BB2                     i2l9145:
  7050                           
  7051                           ;RTC.c: 269: sprintf(&str, "%02d %02d %02d", date.day, date.month, date.year % 100);
  7052  001BB2  C0CC  F001         	movff	_date+6,?___lwmod
  7053  001BB6  C0CD  F002         	movff	_date+7,?___lwmod+1
  7054  001BBA  0E00               	movlw	0
  7055  001BBC  6E04               	movwf	?___lwmod+3,c
  7056  001BBE  0E64               	movlw	100
  7057  001BC0  6E03               	movwf	?___lwmod+2,c
  7058  001BC2  ECBA  F023         	call	___lwmod	;wreg free
  7059  001BC6  C001  F094         	movff	?___lwmod,_printRTC$1309
  7060  001BCA  C002  F095         	movff	?___lwmod+1,_printRTC$1309+1
  7061                           
  7062                           ;RTC.c: 269: sprintf(&str, "%02d %02d %02d", date.day, date.month, date.year % 100);
  7063  001BCE  0100               	movlb	0	; () banked
  7064  001BD0  0E00               	movlw	high printRTC@str
  7065  001BD2  6E54               	movwf	?_sprintf+1,c
  7066  001BD4  0100               	movlb	0	; () banked
  7067  001BD6  0E88               	movlw	low printRTC@str
  7068  001BD8  6E53               	movwf	?_sprintf,c
  7069  001BDA  0E7F               	movlw	high STR_4
  7070  001BDC  6E56               	movwf	?_sprintf+3,c
  7071  001BDE  0EBE               	movlw	low STR_4
  7072  001BE0  6E55               	movwf	?_sprintf+2,c
  7073  001BE2  0100               	movlb	0	; () banked
  7074  001BE4  C0C9  F057         	movff	_date+3,?_sprintf+4
  7075  001BE8  6A58               	clrf	?_sprintf+5,c
  7076  001BEA  0100               	movlb	0	; () banked
  7077  001BEC  C0CB  F059         	movff	_date+5,?_sprintf+6
  7078  001BF0  6A5A               	clrf	?_sprintf+7,c
  7079  001BF2  C094  F05B         	movff	_printRTC$1309,?_sprintf+8
  7080  001BF6  C095  F05C         	movff	_printRTC$1309+1,?_sprintf+9
  7081  001BFA  EC0E  F000         	call	_sprintf	;wreg free
  7082                           
  7083                           ;RTC.c: 270: break;
  7084  001BFE  D157               	goto	i2l9179
  7085  001C00                     i2l9149:
  7086                           
  7087                           ;RTC.c: 272: sprintf(&str, "  %02d.%02d.%02d", date.hour, date.minute, date.second);
  7088  001C00  0100               	movlb	0	; () banked
  7089  001C02  0E00               	movlw	high printRTC@str
  7090  001C04  6E54               	movwf	?_sprintf+1,c
  7091  001C06  0100               	movlb	0	; () banked
  7092  001C08  0E88               	movlw	low printRTC@str
  7093  001C0A  6E53               	movwf	?_sprintf,c
  7094  001C0C  0E7F               	movlw	high STR_5
  7095  001C0E  6E56               	movwf	?_sprintf+3,c
  7096  001C10  0E9D               	movlw	low STR_5
  7097  001C12  6E55               	movwf	?_sprintf+2,c
  7098  001C14  0100               	movlb	0	; () banked
  7099  001C16  C0C8  F057         	movff	_date+2,?_sprintf+4
  7100  001C1A  6A58               	clrf	?_sprintf+5,c
  7101  001C1C  0100               	movlb	0	; () banked
  7102  001C1E  C0C7  F059         	movff	_date+1,?_sprintf+6
  7103  001C22  6A5A               	clrf	?_sprintf+7,c
  7104  001C24  0100               	movlb	0	; () banked
  7105  001C26  C0C6  F05B         	movff	_date,?_sprintf+8
  7106  001C2A  6A5C               	clrf	?_sprintf+9,c
  7107  001C2C  EC0E  F000         	call	_sprintf	;wreg free
  7108                           
  7109                           ;RTC.c: 273: break;
  7110  001C30  D13E               	goto	i2l9179
  7111  001C32                     i2l9151:
  7112                           
  7113                           ;RTC.c: 275: sprintf(&str, " %c%c %02d.%02d", (dow[date.dow])[0], (dow[date.dow])[1], da
      +                          te.minute, date.second);
  7114  001C32  0100               	movlb	0	; () banked
  7115  001C34  0E00               	movlw	high printRTC@str
  7116  001C36  6E54               	movwf	?_sprintf+1,c
  7117  001C38  0100               	movlb	0	; () banked
  7118  001C3A  0E88               	movlw	low printRTC@str
  7119  001C3C  6E53               	movwf	?_sprintf,c
  7120  001C3E  0E7F               	movlw	high STR_6
  7121  001C40  6E56               	movwf	?_sprintf+3,c
  7122  001C42  0EAE               	movlw	low STR_6
  7123  001C44  6E55               	movwf	?_sprintf+2,c
  7124  001C46  0100               	movlb	0	; () banked
  7125  001C48  0100               	movlb	0	; () banked
  7126  001C4A  51CA               	movf	(_date+4)& (0+255),w,b
  7127  001C4C  0D04               	mullw	4
  7128  001C4E  0E81               	movlw	low _dow
  7129  001C50  24F3               	addwf	prodl,w,c
  7130  001C52  6EF6               	movwf	tblptrl,c
  7131  001C54  0E7F               	movlw	high _dow
  7132  001C56  20F4               	addwfc	prodh,w,c
  7133  001C58  6EF7               	movwf	tblptrh,c
  7134  001C5A  0008               	tblrd		*
  7135  001C5C  50F5               	movf	tablat,w,c
  7136  001C5E  6E57               	movwf	?_sprintf+4,c
  7137  001C60  6A58               	clrf	?_sprintf+5,c
  7138  001C62  0100               	movlb	0	; () banked
  7139  001C64  0100               	movlb	0	; () banked
  7140  001C66  51CA               	movf	(_date+4)& (0+255),w,b
  7141  001C68  0D04               	mullw	4
  7142  001C6A  0E01               	movlw	1
  7143  001C6C  26F3               	addwf	prodl,f,c
  7144  001C6E  0E00               	movlw	0
  7145  001C70  22F4               	addwfc	prodh,f,c
  7146  001C72  0E81               	movlw	low _dow
  7147  001C74  24F3               	addwf	prodl,w,c
  7148  001C76  6EF6               	movwf	tblptrl,c
  7149  001C78  0E7F               	movlw	high _dow
  7150  001C7A  20F4               	addwfc	prodh,w,c
  7151  001C7C  6EF7               	movwf	tblptrh,c
  7152  001C7E  0008               	tblrd		*
  7153  001C80  50F5               	movf	tablat,w,c
  7154  001C82  6E59               	movwf	?_sprintf+6,c
  7155  001C84  6A5A               	clrf	?_sprintf+7,c
  7156  001C86  0100               	movlb	0	; () banked
  7157  001C88  C0C7  F05B         	movff	_date+1,?_sprintf+8
  7158  001C8C  6A5C               	clrf	?_sprintf+9,c
  7159  001C8E  0100               	movlb	0	; () banked
  7160  001C90  C0C6  F05D         	movff	_date,?_sprintf+10
  7161  001C94  6A5E               	clrf	?_sprintf+11,c
  7162  001C96  EC0E  F000         	call	_sprintf	;wreg free
  7163                           
  7164                           ;RTC.c: 276: break;
  7165  001C9A  D109               	goto	i2l9179
  7166  001C9C                     i2l9153:
  7167                           
  7168                           ;RTC.c: 278: sprintf(&str, "  %02d.%02d.%02d", date.day, date.month, date.year % 100);
  7169  001C9C  C0CC  F001         	movff	_date+6,?___lwmod
  7170  001CA0  C0CD  F002         	movff	_date+7,?___lwmod+1
  7171  001CA4  0E00               	movlw	0
  7172  001CA6  6E04               	movwf	?___lwmod+3,c
  7173  001CA8  0E64               	movlw	100
  7174  001CAA  6E03               	movwf	?___lwmod+2,c
  7175  001CAC  ECBA  F023         	call	___lwmod	;wreg free
  7176  001CB0  C001  F094         	movff	?___lwmod,_printRTC$1309
  7177  001CB4  C002  F095         	movff	?___lwmod+1,_printRTC$1309+1
  7178                           
  7179                           ;RTC.c: 278: sprintf(&str, "  %02d.%02d.%02d", date.day, date.month, date.year % 100);
  7180  001CB8  0100               	movlb	0	; () banked
  7181  001CBA  0E00               	movlw	high printRTC@str
  7182  001CBC  6E54               	movwf	?_sprintf+1,c
  7183  001CBE  0100               	movlb	0	; () banked
  7184  001CC0  0E88               	movlw	low printRTC@str
  7185  001CC2  6E53               	movwf	?_sprintf,c
  7186  001CC4  0E7F               	movlw	high STR_5
  7187  001CC6  6E56               	movwf	?_sprintf+3,c
  7188  001CC8  0E9D               	movlw	low STR_5
  7189  001CCA  6E55               	movwf	?_sprintf+2,c
  7190  001CCC  0100               	movlb	0	; () banked
  7191  001CCE  C0C9  F057         	movff	_date+3,?_sprintf+4
  7192  001CD2  6A58               	clrf	?_sprintf+5,c
  7193  001CD4  0100               	movlb	0	; () banked
  7194  001CD6  C0CB  F059         	movff	_date+5,?_sprintf+6
  7195  001CDA  6A5A               	clrf	?_sprintf+7,c
  7196  001CDC  C094  F05B         	movff	_printRTC$1309,?_sprintf+8
  7197  001CE0  C095  F05C         	movff	_printRTC$1309+1,?_sprintf+9
  7198  001CE4  EC0E  F000         	call	_sprintf	;wreg free
  7199                           
  7200                           ;RTC.c: 279: break;
  7201  001CE8  D0E2               	goto	i2l9179
  7202  001CEA                     i2l9157:
  7203                           
  7204                           ;RTC.c: 281: sprintf(&str, "    %02d.%02d", date.hour, date.minute);
  7205  001CEA  0100               	movlb	0	; () banked
  7206  001CEC  0E00               	movlw	high printRTC@str
  7207  001CEE  6E54               	movwf	?_sprintf+1,c
  7208  001CF0  0100               	movlb	0	; () banked
  7209  001CF2  0E88               	movlw	low printRTC@str
  7210  001CF4  6E53               	movwf	?_sprintf,c
  7211  001CF6  0E7F               	movlw	high STR_8
  7212  001CF8  6E56               	movwf	?_sprintf+3,c
  7213  001CFA  0ECD               	movlw	low STR_8
  7214  001CFC  6E55               	movwf	?_sprintf+2,c
  7215  001CFE  0100               	movlb	0	; () banked
  7216  001D00  C0C8  F057         	movff	_date+2,?_sprintf+4
  7217  001D04  6A58               	clrf	?_sprintf+5,c
  7218  001D06  0100               	movlb	0	; () banked
  7219  001D08  C0C7  F059         	movff	_date+1,?_sprintf+6
  7220  001D0C  6A5A               	clrf	?_sprintf+7,c
  7221  001D0E  EC0E  F000         	call	_sprintf	;wreg free
  7222                           
  7223                           ;RTC.c: 282: break;
  7224  001D12  D0CD               	goto	i2l9179
  7225  001D14                     i2l9159:
  7226                           
  7227                           ;RTC.c: 284: sprintf(&str, "    %02d.%02d", date.day, date.month);
  7228  001D14  0100               	movlb	0	; () banked
  7229  001D16  0E00               	movlw	high printRTC@str
  7230  001D18  6E54               	movwf	?_sprintf+1,c
  7231  001D1A  0100               	movlb	0	; () banked
  7232  001D1C  0E88               	movlw	low printRTC@str
  7233  001D1E  6E53               	movwf	?_sprintf,c
  7234  001D20  0E7F               	movlw	high STR_8
  7235  001D22  6E56               	movwf	?_sprintf+3,c
  7236  001D24  0ECD               	movlw	low STR_8
  7237  001D26  6E55               	movwf	?_sprintf+2,c
  7238  001D28  0100               	movlb	0	; () banked
  7239  001D2A  C0C9  F057         	movff	_date+3,?_sprintf+4
  7240  001D2E  6A58               	clrf	?_sprintf+5,c
  7241  001D30  0100               	movlb	0	; () banked
  7242  001D32  C0CB  F059         	movff	_date+5,?_sprintf+6
  7243  001D36  6A5A               	clrf	?_sprintf+7,c
  7244  001D38  EC0E  F000         	call	_sprintf	;wreg free
  7245                           
  7246                           ;RTC.c: 285: break;
  7247  001D3C  D0B8               	goto	i2l9179
  7248  001D3E                     i2l9163:
  7249  001D3E  0100               	movlb	0	; () banked
  7250  001D40  0100               	movlb	0	; () banked
  7251  001D42  5196               	movf	printRTC@cnt& (0+255),w,b
  7252                           
  7253                           ; Switch size 1, requested type "space"
  7254                           ; Number of cases is 7, Range of values is 0 to 9
  7255                           ; switch strategies available:
  7256                           ; Name         Instructions Cycles
  7257                           ; simple_byte           22    12 (average)
  7258                           ;	Chosen strategy is simple_byte
  7259  001D44  0A00               	xorlw	0	; case 0
  7260  001D46  B4D8               	btfsc	status,2,c
  7261  001D48  D7D0               	goto	i2l9157
  7262  001D4A  0A01               	xorlw	1	; case 1
  7263  001D4C  B4D8               	btfsc	status,2,c
  7264  001D4E  D758               	goto	i2l9149
  7265  001D50  0A03               	xorlw	3	; case 2
  7266  001D52  B4D8               	btfsc	status,2,c
  7267  001D54  D70F               	goto	i2l9143
  7268  001D56  0A01               	xorlw	1	; case 3
  7269  001D58  B4D8               	btfsc	status,2,c
  7270  001D5A  D76B               	goto	i2l9151
  7271  001D5C  0A05               	xorlw	5	; case 6
  7272  001D5E  B4D8               	btfsc	status,2,c
  7273  001D60  D7D9               	goto	i2l9159
  7274  001D62  0A0E               	xorlw	14	; case 8
  7275  001D64  B4D8               	btfsc	status,2,c
  7276  001D66  D79A               	goto	i2l9153
  7277  001D68  0A01               	xorlw	1	; case 9
  7278  001D6A  B4D8               	btfsc	status,2,c
  7279  001D6C  D722               	goto	i2l9145
  7280  001D6E  D09F               	goto	i2l9179
  7281  001D70                     i2l9165:
  7282                           
  7283                           ; BSR set to: 0
  7284                           ;RTC.c: 291: sprintf(&str, "%02d.%02d.%02d", date.hour, date.minute, date.second);
  7285  001D70  0100               	movlb	0	; () banked
  7286  001D72  0E00               	movlw	high printRTC@str
  7287  001D74  6E54               	movwf	?_sprintf+1,c
  7288  001D76  0100               	movlb	0	; () banked
  7289  001D78  0E88               	movlw	low printRTC@str
  7290  001D7A  6E53               	movwf	?_sprintf,c
  7291  001D7C  0E7F               	movlw	high (STR_5+2)
  7292  001D7E  6E56               	movwf	?_sprintf+3,c
  7293  001D80  0E9F               	movlw	low (STR_5+2)
  7294  001D82  6E55               	movwf	?_sprintf+2,c
  7295  001D84  0100               	movlb	0	; () banked
  7296  001D86  C0C8  F057         	movff	_date+2,?_sprintf+4
  7297  001D8A  6A58               	clrf	?_sprintf+5,c
  7298  001D8C  0100               	movlb	0	; () banked
  7299  001D8E  C0C7  F059         	movff	_date+1,?_sprintf+6
  7300  001D92  6A5A               	clrf	?_sprintf+7,c
  7301  001D94  0100               	movlb	0	; () banked
  7302  001D96  C0C6  F05B         	movff	_date,?_sprintf+8
  7303  001D9A  6A5C               	clrf	?_sprintf+9,c
  7304  001D9C  EC0E  F000         	call	_sprintf	;wreg free
  7305                           
  7306                           ;RTC.c: 292: break;
  7307  001DA0  D0C3               	goto	i2l9187
  7308  001DA2                     i2l9167:
  7309                           
  7310                           ;RTC.c: 294: sprintf(&str, "%c%c %02d.%02d", (dow[date.dow])[0], (dow[date.dow])[1], dat
      +                          e.minute, date.second);
  7311  001DA2  0100               	movlb	0	; () banked
  7312  001DA4  0E00               	movlw	high printRTC@str
  7313  001DA6  6E54               	movwf	?_sprintf+1,c
  7314  001DA8  0100               	movlb	0	; () banked
  7315  001DAA  0E88               	movlw	low printRTC@str
  7316  001DAC  6E53               	movwf	?_sprintf,c
  7317  001DAE  0E7F               	movlw	high (STR_6+1)
  7318  001DB0  6E56               	movwf	?_sprintf+3,c
  7319  001DB2  0EAF               	movlw	low (STR_6+1)
  7320  001DB4  6E55               	movwf	?_sprintf+2,c
  7321  001DB6  0100               	movlb	0	; () banked
  7322  001DB8  0100               	movlb	0	; () banked
  7323  001DBA  51CA               	movf	(_date+4)& (0+255),w,b
  7324  001DBC  0D04               	mullw	4
  7325  001DBE  0E81               	movlw	low _dow
  7326  001DC0  24F3               	addwf	prodl,w,c
  7327  001DC2  6EF6               	movwf	tblptrl,c
  7328  001DC4  0E7F               	movlw	high _dow
  7329  001DC6  20F4               	addwfc	prodh,w,c
  7330  001DC8  6EF7               	movwf	tblptrh,c
  7331  001DCA  0008               	tblrd		*
  7332  001DCC  50F5               	movf	tablat,w,c
  7333  001DCE  6E57               	movwf	?_sprintf+4,c
  7334  001DD0  6A58               	clrf	?_sprintf+5,c
  7335  001DD2  0100               	movlb	0	; () banked
  7336  001DD4  0100               	movlb	0	; () banked
  7337  001DD6  51CA               	movf	(_date+4)& (0+255),w,b
  7338  001DD8  0D04               	mullw	4
  7339  001DDA  0E01               	movlw	1
  7340  001DDC  26F3               	addwf	prodl,f,c
  7341  001DDE  0E00               	movlw	0
  7342  001DE0  22F4               	addwfc	prodh,f,c
  7343  001DE2  0E81               	movlw	low _dow
  7344  001DE4  24F3               	addwf	prodl,w,c
  7345  001DE6  6EF6               	movwf	tblptrl,c
  7346  001DE8  0E7F               	movlw	high _dow
  7347  001DEA  20F4               	addwfc	prodh,w,c
  7348  001DEC  6EF7               	movwf	tblptrh,c
  7349  001DEE  0008               	tblrd		*
  7350  001DF0  50F5               	movf	tablat,w,c
  7351  001DF2  6E59               	movwf	?_sprintf+6,c
  7352  001DF4  6A5A               	clrf	?_sprintf+7,c
  7353  001DF6  0100               	movlb	0	; () banked
  7354  001DF8  C0C7  F05B         	movff	_date+1,?_sprintf+8
  7355  001DFC  6A5C               	clrf	?_sprintf+9,c
  7356  001DFE  0100               	movlb	0	; () banked
  7357  001E00  C0C6  F05D         	movff	_date,?_sprintf+10
  7358  001E04  6A5E               	clrf	?_sprintf+11,c
  7359  001E06  EC0E  F000         	call	_sprintf	;wreg free
  7360                           
  7361                           ;RTC.c: 295: break;
  7362  001E0A  D08E               	goto	i2l9187
  7363  001E0C                     i2l9169:
  7364                           
  7365                           ;RTC.c: 297: sprintf(&str, "%02d.%02d.%02d", date.day, date.month, date.year % 100);
  7366  001E0C  C0CC  F001         	movff	_date+6,?___lwmod
  7367  001E10  C0CD  F002         	movff	_date+7,?___lwmod+1
  7368  001E14  0E00               	movlw	0
  7369  001E16  6E04               	movwf	?___lwmod+3,c
  7370  001E18  0E64               	movlw	100
  7371  001E1A  6E03               	movwf	?___lwmod+2,c
  7372  001E1C  ECBA  F023         	call	___lwmod	;wreg free
  7373  001E20  C001  F094         	movff	?___lwmod,_printRTC$1309
  7374  001E24  C002  F095         	movff	?___lwmod+1,_printRTC$1309+1
  7375                           
  7376                           ;RTC.c: 297: sprintf(&str, "%02d.%02d.%02d", date.day, date.month, date.year % 100);
  7377  001E28  0100               	movlb	0	; () banked
  7378  001E2A  0E00               	movlw	high printRTC@str
  7379  001E2C  6E54               	movwf	?_sprintf+1,c
  7380  001E2E  0100               	movlb	0	; () banked
  7381  001E30  0E88               	movlw	low printRTC@str
  7382  001E32  6E53               	movwf	?_sprintf,c
  7383  001E34  0E7F               	movlw	high (STR_5+2)
  7384  001E36  6E56               	movwf	?_sprintf+3,c
  7385  001E38  0E9F               	movlw	low (STR_5+2)
  7386  001E3A  6E55               	movwf	?_sprintf+2,c
  7387  001E3C  0100               	movlb	0	; () banked
  7388  001E3E  C0C9  F057         	movff	_date+3,?_sprintf+4
  7389  001E42  6A58               	clrf	?_sprintf+5,c
  7390  001E44  0100               	movlb	0	; () banked
  7391  001E46  C0CB  F059         	movff	_date+5,?_sprintf+6
  7392  001E4A  6A5A               	clrf	?_sprintf+7,c
  7393  001E4C  C094  F05B         	movff	_printRTC$1309,?_sprintf+8
  7394  001E50  C095  F05C         	movff	_printRTC$1309+1,?_sprintf+9
  7395  001E54  EC0E  F000         	call	_sprintf	;wreg free
  7396                           
  7397                           ;RTC.c: 298: break;
  7398  001E58  D067               	goto	i2l9187
  7399  001E5A                     i2l9173:
  7400                           
  7401                           ;RTC.c: 300: sprintf(&str, "  %02d.%02d", date.hour, date.minute);
  7402  001E5A  0100               	movlb	0	; () banked
  7403  001E5C  0E00               	movlw	high printRTC@str
  7404  001E5E  6E54               	movwf	?_sprintf+1,c
  7405  001E60  0100               	movlb	0	; () banked
  7406  001E62  0E88               	movlw	low printRTC@str
  7407  001E64  6E53               	movwf	?_sprintf,c
  7408  001E66  0E7F               	movlw	high (STR_8+2)
  7409  001E68  6E56               	movwf	?_sprintf+3,c
  7410  001E6A  0ECF               	movlw	low (STR_8+2)
  7411  001E6C  6E55               	movwf	?_sprintf+2,c
  7412  001E6E  0100               	movlb	0	; () banked
  7413  001E70  C0C8  F057         	movff	_date+2,?_sprintf+4
  7414  001E74  6A58               	clrf	?_sprintf+5,c
  7415  001E76  0100               	movlb	0	; () banked
  7416  001E78  C0C7  F059         	movff	_date+1,?_sprintf+6
  7417  001E7C  6A5A               	clrf	?_sprintf+7,c
  7418  001E7E  EC0E  F000         	call	_sprintf	;wreg free
  7419                           
  7420                           ;RTC.c: 301: break;
  7421  001E82  D052               	goto	i2l9187
  7422  001E84                     i2l9175:
  7423                           
  7424                           ;RTC.c: 303: sprintf(&str, "  %02d.%02d", date.day, date.month);
  7425  001E84  0100               	movlb	0	; () banked
  7426  001E86  0E00               	movlw	high printRTC@str
  7427  001E88  6E54               	movwf	?_sprintf+1,c
  7428  001E8A  0100               	movlb	0	; () banked
  7429  001E8C  0E88               	movlw	low printRTC@str
  7430  001E8E  6E53               	movwf	?_sprintf,c
  7431  001E90  0E7F               	movlw	high (STR_8+2)
  7432  001E92  6E56               	movwf	?_sprintf+3,c
  7433  001E94  0ECF               	movlw	low (STR_8+2)
  7434  001E96  6E55               	movwf	?_sprintf+2,c
  7435  001E98  0100               	movlb	0	; () banked
  7436  001E9A  C0C9  F057         	movff	_date+3,?_sprintf+4
  7437  001E9E  6A58               	clrf	?_sprintf+5,c
  7438  001EA0  0100               	movlb	0	; () banked
  7439  001EA2  C0CB  F059         	movff	_date+5,?_sprintf+6
  7440  001EA6  6A5A               	clrf	?_sprintf+7,c
  7441  001EA8  EC0E  F000         	call	_sprintf	;wreg free
  7442                           
  7443                           ;RTC.c: 304: break;
  7444  001EAC  D03D               	goto	i2l9187
  7445  001EAE                     i2l9179:
  7446  001EAE  0100               	movlb	0	; () banked
  7447  001EB0  0100               	movlb	0	; () banked
  7448  001EB2  5196               	movf	printRTC@cnt& (0+255),w,b
  7449                           
  7450                           ; Switch size 1, requested type "space"
  7451                           ; Number of cases is 5, Range of values is 0 to 8
  7452                           ; switch strategies available:
  7453                           ; Name         Instructions Cycles
  7454                           ; simple_byte           16     9 (average)
  7455                           ;	Chosen strategy is simple_byte
  7456  001EB4  0A00               	xorlw	0	; case 0
  7457  001EB6  B4D8               	btfsc	status,2,c
  7458  001EB8  D7D0               	goto	i2l9173
  7459  001EBA  0A01               	xorlw	1	; case 1
  7460  001EBC  B4D8               	btfsc	status,2,c
  7461  001EBE  D758               	goto	i2l9165
  7462  001EC0  0A02               	xorlw	2	; case 3
  7463  001EC2  B4D8               	btfsc	status,2,c
  7464  001EC4  D76E               	goto	i2l9167
  7465  001EC6  0A05               	xorlw	5	; case 6
  7466  001EC8  B4D8               	btfsc	status,2,c
  7467  001ECA  D7DC               	goto	i2l9175
  7468  001ECC  0A0E               	xorlw	14	; case 8
  7469  001ECE  B4D8               	btfsc	status,2,c
  7470  001ED0  D79D               	goto	i2l9169
  7471  001ED2  D063               	goto	i2l9195
  7472  001ED4                     i2l9181:
  7473                           
  7474                           ; BSR set to: 0
  7475                           ;RTC.c: 312: sprintf(&str, "%02d.%02d", date.hour, date.minute);
  7476  001ED4  0100               	movlb	0	; () banked
  7477  001ED6  0E00               	movlw	high printRTC@str
  7478  001ED8  6E54               	movwf	?_sprintf+1,c
  7479  001EDA  0100               	movlb	0	; () banked
  7480  001EDC  0E88               	movlw	low printRTC@str
  7481  001EDE  6E53               	movwf	?_sprintf,c
  7482  001EE0  0E7F               	movlw	high (STR_8+4)
  7483  001EE2  6E56               	movwf	?_sprintf+3,c
  7484  001EE4  0ED1               	movlw	low (STR_8+4)
  7485  001EE6  6E55               	movwf	?_sprintf+2,c
  7486  001EE8  0100               	movlb	0	; () banked
  7487  001EEA  C0C8  F057         	movff	_date+2,?_sprintf+4
  7488  001EEE  6A58               	clrf	?_sprintf+5,c
  7489  001EF0  0100               	movlb	0	; () banked
  7490  001EF2  C0C7  F059         	movff	_date+1,?_sprintf+6
  7491  001EF6  6A5A               	clrf	?_sprintf+7,c
  7492  001EF8  EC0E  F000         	call	_sprintf	;wreg free
  7493                           
  7494                           ;RTC.c: 313: break;
  7495  001EFC  D01F               	goto	i2l9189
  7496  001EFE                     i2l9183:
  7497                           
  7498                           ;RTC.c: 315: sprintf(&str, "%02d.%02d", date.day, date.month);
  7499  001EFE  0100               	movlb	0	; () banked
  7500  001F00  0E00               	movlw	high printRTC@str
  7501  001F02  6E54               	movwf	?_sprintf+1,c
  7502  001F04  0100               	movlb	0	; () banked
  7503  001F06  0E88               	movlw	low printRTC@str
  7504  001F08  6E53               	movwf	?_sprintf,c
  7505  001F0A  0E7F               	movlw	high (STR_8+4)
  7506  001F0C  6E56               	movwf	?_sprintf+3,c
  7507  001F0E  0ED1               	movlw	low (STR_8+4)
  7508  001F10  6E55               	movwf	?_sprintf+2,c
  7509  001F12  0100               	movlb	0	; () banked
  7510  001F14  C0C9  F057         	movff	_date+3,?_sprintf+4
  7511  001F18  6A58               	clrf	?_sprintf+5,c
  7512  001F1A  0100               	movlb	0	; () banked
  7513  001F1C  C0CB  F059         	movff	_date+5,?_sprintf+6
  7514  001F20  6A5A               	clrf	?_sprintf+7,c
  7515  001F22  EC0E  F000         	call	_sprintf	;wreg free
  7516                           
  7517                           ;RTC.c: 316: break;
  7518  001F26  D00A               	goto	i2l9189
  7519  001F28                     i2l9187:
  7520  001F28  0100               	movlb	0	; () banked
  7521  001F2A  0100               	movlb	0	; () banked
  7522  001F2C  5196               	movf	printRTC@cnt& (0+255),w,b
  7523                           
  7524                           ; Switch size 1, requested type "space"
  7525                           ; Number of cases is 2, Range of values is 0 to 6
  7526                           ; switch strategies available:
  7527                           ; Name         Instructions Cycles
  7528                           ; simple_byte            7     4 (average)
  7529                           ;	Chosen strategy is simple_byte
  7530  001F2E  0A00               	xorlw	0	; case 0
  7531  001F30  B4D8               	btfsc	status,2,c
  7532  001F32  D7D0               	goto	i2l9181
  7533  001F34  0A06               	xorlw	6	; case 6
  7534  001F36  B4D8               	btfsc	status,2,c
  7535  001F38  D7E2               	goto	i2l9183
  7536  001F3A  D02F               	goto	i2l9195
  7537  001F3C                     i2l9189:
  7538                           
  7539                           ;RTC.c: 321: sprintf(&str, "    ");
  7540  001F3C  0100               	movlb	0	; () banked
  7541  001F3E  0E00               	movlw	high printRTC@str
  7542  001F40  6E54               	movwf	?_sprintf+1,c
  7543  001F42  0100               	movlb	0	; () banked
  7544  001F44  0E88               	movlw	low printRTC@str
  7545  001F46  6E53               	movwf	?_sprintf,c
  7546  001F48  0E7F               	movlw	high STR_17
  7547  001F4A  6E56               	movwf	?_sprintf+3,c
  7548  001F4C  0EEF               	movlw	low STR_17
  7549  001F4E  6E55               	movwf	?_sprintf+2,c
  7550  001F50  EC0E  F000         	call	_sprintf	;wreg free
  7551                           
  7552                           ;RTC.c: 322: break;
  7553  001F54  D022               	goto	i2l9195
  7554  001F56                     i2l9193:
  7555  001F56  505F               	movf	printRTC@digits,w,c
  7556  001F58  6E01               	movwf	?_countBits,c
  7557  001F5A  6A02               	clrf	?_countBits+1,c
  7558  001F5C  6A03               	clrf	?_countBits+2,c
  7559  001F5E  6A04               	clrf	?_countBits+3,c
  7560  001F60  ECC2  F024         	call	_countBits	;wreg free
  7561                           
  7562                           ; Switch size 1, requested type "space"
  7563                           ; Number of cases is 9, Range of values is 0 to 8
  7564                           ; switch strategies available:
  7565                           ; Name         Instructions Cycles
  7566                           ; simple_byte           28    15 (average)
  7567                           ;	Chosen strategy is simple_byte
  7568  001F64  0A00               	xorlw	0	; case 0
  7569  001F66  B4D8               	btfsc	status,2,c
  7570  001F68  D7E9               	goto	i2l9189
  7571  001F6A  0A01               	xorlw	1	; case 1
  7572  001F6C  B4D8               	btfsc	status,2,c
  7573  001F6E  D7E6               	goto	i2l9189
  7574  001F70  0A03               	xorlw	3	; case 2
  7575  001F72  B4D8               	btfsc	status,2,c
  7576  001F74  D7E3               	goto	i2l9189
  7577  001F76  0A01               	xorlw	1	; case 3
  7578  001F78  B4D8               	btfsc	status,2,c
  7579  001F7A  D7E0               	goto	i2l9189
  7580  001F7C  0A07               	xorlw	7	; case 4
  7581  001F7E  B4D8               	btfsc	status,2,c
  7582  001F80  D7D3               	goto	i2l9187
  7583  001F82  0A01               	xorlw	1	; case 5
  7584  001F84  B4D8               	btfsc	status,2,c
  7585  001F86  D7D0               	goto	i2l9187
  7586  001F88  0A03               	xorlw	3	; case 6
  7587  001F8A  B4D8               	btfsc	status,2,c
  7588  001F8C  D790               	goto	i2l9179
  7589  001F8E  0A01               	xorlw	1	; case 7
  7590  001F90  B4D8               	btfsc	status,2,c
  7591  001F92  D78D               	goto	i2l9179
  7592  001F94  0A0F               	xorlw	15	; case 8
  7593  001F96  B4D8               	btfsc	status,2,c
  7594  001F98  D6D2               	goto	i2l9163
  7595  001F9A                     i2l9195:
  7596  001F9A  0100               	movlb	0	; () banked
  7597  001F9C  0100               	movlb	0	; () banked
  7598  001F9E  2B96               	incf	printRTC@cnt& (0+255),f,b
  7599  001FA0                     i2l9197:
  7600                           
  7601                           ; BSR set to: 0
  7602  001FA0  0101               	movlb	1	; () banked
  7603  001FA2  0101               	movlb	1	; () banked
  7604  001FA4  5151               	movf	_rtcMenu& (0+255),w,b
  7605  001FA6  0100               	movlb	0	; () banked
  7606  001FA8  0100               	movlb	0	; () banked
  7607  001FAA  1996               	xorwf	printRTC@cnt& (0+255),w,b
  7608  001FAC  B4D8               	btfsc	status,2,c
  7609  001FAE  D005               	goto	i2l303
  7610                           
  7611                           ; BSR set to: 0
  7612  001FB0  0100               	movlb	0	; () banked
  7613  001FB2  0100               	movlb	0	; () banked
  7614  001FB4  5187               	movf	printRTC@first& (0+255),w,b
  7615  001FB6  B4D8               	btfsc	status,2,c
  7616  001FB8  D5D0               	goto	i2l270
  7617  001FBA                     i2l303:
  7618                           
  7619                           ; BSR set to: 0
  7620                           ;RTC.c: 324: }
  7621                           ;RTC.c: 325: rtcMenu.state = cnt;
  7622  001FBA  C096  F151         	movff	printRTC@cnt,_rtcMenu
  7623                           
  7624                           ; BSR set to: 0
  7625                           ;RTC.c: 326: writeString(digits, &str);
  7626  001FBE  C05F  F025         	movff	printRTC@digits,?_writeString
  7627  001FC2  0100               	movlb	0	; () banked
  7628  001FC4  0E00               	movlw	high printRTC@str
  7629  001FC6  6E27               	movwf	?_writeString+2,c
  7630  001FC8  0100               	movlb	0	; () banked
  7631  001FCA  0E88               	movlw	low printRTC@str
  7632  001FCC  6E26               	movwf	?_writeString+1,c
  7633  001FCE  EC7B  F018         	call	_writeString	;wreg free
  7634                           
  7635                           ;RTC.c: 327: screen.changed |= digits;
  7636  001FD2  505F               	movf	printRTC@digits,w,c
  7637  001FD4  0100               	movlb	0	; () banked
  7638  001FD6  0100               	movlb	0	; () banked
  7639  001FD8  13E9               	iorwf	(_screen+11)& (0+255),f,b
  7640                           
  7641                           ; BSR set to: 0
  7642                           ;RTC.c: 328: LATC1 = ~LATC1;
  7643  001FDA  728B               	btg	3979,1,c	;volatile
  7644                           
  7645                           ; BSR set to: 0
  7646                           
  7647                           ; BSR set to: 0
  7648                           ;RTC.c: 329: return (0);
  7649                           ;	Return value of _printRTC is never used
  7650  001FDC  0012               	return	
  7651  001FDE                     __end_of_printRTC:
  7652                           	opt stack 0
  7653                           tosu	equ	0xFFF
  7654                           tosh	equ	0xFFE
  7655                           tosl	equ	0xFFD
  7656                           pclatu	equ	0xFFB
  7657                           pclath	equ	0xFFA
  7658                           tblptru	equ	0xFF8
  7659                           tblptrh	equ	0xFF7
  7660                           tblptrl	equ	0xFF6
  7661                           tablat	equ	0xFF5
  7662                           prodh	equ	0xFF4
  7663                           prodl	equ	0xFF3
  7664                           intcon	equ	0xFF2
  7665                           intcon2	equ	0xFF1
  7666                           postinc0	equ	0xFEE
  7667                           fsr0h	equ	0xFEA
  7668                           fsr0l	equ	0xFE9
  7669                           wreg	equ	0xFE8
  7670                           postinc1	equ	0xFE6
  7671                           postdec1	equ	0xFE5
  7672                           fsr1h	equ	0xFE2
  7673                           fsr1l	equ	0xFE1
  7674                           indf2	equ	0xFDF
  7675                           postinc2	equ	0xFDE
  7676                           fsr2h	equ	0xFDA
  7677                           fsr2l	equ	0xFD9
  7678                           status	equ	0xFD8
  7679                           
  7680 ;; *************** function _writeString *****************
  7681 ;; Defined at:
  7682 ;;		line 174 in file "disp.c"
  7683 ;; Parameters:    Size  Location     Type
  7684 ;;  digits          1   36[COMRAM] unsigned char 
  7685 ;;  string          2   37[COMRAM] PTR unsigned char 
  7686 ;;		 -> printRTC@str(12), writeFloat@str(9), writeLong@str(9), 
  7687 ;; Auto vars:     Size  Location     Type
  7688 ;;  i               1   44[COMRAM] char 
  7689 ;;  cnt             1   43[COMRAM] char 
  7690 ;;  bits            1   42[COMRAM] unsigned char 
  7691 ;; Return value:  Size  Location     Type
  7692 ;;		None               void
  7693 ;; Registers used:
  7694 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7695 ;; Tracked objects:
  7696 ;;		On entry : 0/0
  7697 ;;		On exit  : 0/0
  7698 ;;		Unchanged: 0/0
  7699 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7700 ;;      Params:         3       0       0       0       0       0       0       0       0
  7701 ;;      Locals:         3       0       0       0       0       0       0       0       0
  7702 ;;      Temps:          3       0       0       0       0       0       0       0       0
  7703 ;;      Totals:         9       0       0       0       0       0       0       0       0
  7704 ;;Total ram usage:        9 bytes
  7705 ;; Hardware stack levels used:    1
  7706 ;; Hardware stack levels required when called:    2
  7707 ;; This function calls:
  7708 ;;		_getFontChar
  7709 ;;		_writeChar
  7710 ;;		_countBits
  7711 ;;		_hibit
  7712 ;;		___wmul
  7713 ;;		i2_log2
  7714 ;; This function is called by:
  7715 ;;		_printRTC
  7716 ;;		_writeLong
  7717 ;;		_writeFloat
  7718 ;; This function uses a non-reentrant model
  7719 ;;
  7720                           
  7721                           	psect	text24
  7722  0030F6                     __ptext24:
  7723                           	opt stack 0
  7724  0030F6                     _writeString:
  7725                           	opt stack 22
  7726                           
  7727                           ;disp.c: 179: int8_t cnt = 0, i = 0;
  7728                           
  7729                           ; BSR set to: 0
  7730                           ;incstack = 0
  7731                           ;incstack = 0
  7732  0030F6  6E28               	movwf	??_writeString& (0+255),c
  7733  0030F8  0E00               	movlw	0
  7734  0030FA  6E2C               	movwf	writeString@cnt,c
  7735  0030FC  5028               	movf	??_writeString& (0+255),w,c
  7736  0030FE  6E28               	movwf	??_writeString& (0+255),c
  7737  003100  0E00               	movlw	0
  7738  003102  6E2D               	movwf	writeString@i,c
  7739  003104  5028               	movf	??_writeString& (0+255),w,c
  7740                           
  7741                           ;disp.c: 180: uint8_t bits = countBits(digits);
  7742  003106  5025               	movf	writeString@digits,w,c
  7743  003108  6E01               	movwf	?_countBits,c
  7744  00310A  6A02               	clrf	?_countBits+1,c
  7745  00310C  6A03               	clrf	?_countBits+2,c
  7746  00310E  6A04               	clrf	?_countBits+3,c
  7747  003110  ECC2  F024         	call	_countBits	;wreg free
  7748  003114  6E2B               	movwf	writeString@bits,c
  7749                           
  7750                           ;disp.c: 182: bits += 1;
  7751  003116  2A2B               	incf	writeString@bits,f,c
  7752                           
  7753                           ;disp.c: 183: for (cnt = log2(hibit(digits)); --bits; cnt--)
  7754  003118  5025               	movf	writeString@digits,w,c
  7755  00311A  6E01               	movwf	?_hibit,c
  7756  00311C  6A02               	clrf	?_hibit+1,c
  7757  00311E  6A03               	clrf	?_hibit+2,c
  7758  003120  6A04               	clrf	?_hibit+3,c
  7759  003122  ECDC  F022         	call	_hibit	;wreg free
  7760  003126  C004  F00F         	movff	?_hibit+3,?i2_log2+3
  7761  00312A  C003  F00E         	movff	?_hibit+2,?i2_log2+2
  7762  00312E  C002  F00D         	movff	?_hibit+1,?i2_log2+1
  7763  003132  C001  F00C         	movff	?_hibit,?i2_log2
  7764  003136  EC95  F023         	call	i2_log2	;wreg free
  7765  00313A  500C               	movf	?i2_log2,w,c
  7766  00313C  6E2C               	movwf	writeString@cnt,c
  7767  00313E  D0AE               	goto	i2l6339
  7768  003140                     i2l6313:
  7769                           
  7770                           ;disp.c: 184: {
  7771                           ;disp.c: 185: if (0x1 & (digits >> cnt))
  7772  003140  C02C  F028         	movff	writeString@cnt,??_writeString
  7773  003144  C025  F029         	movff	writeString@digits,??_writeString+1
  7774  003148  2A28               	incf	??_writeString,f,c
  7775  00314A  D002               	goto	i2u454_44
  7776  00314C                     i2u454_45:
  7777  00314C  90D8               	bcf	status,0,c
  7778  00314E  3229               	rrcf	??_writeString+1,f,c
  7779  003150                     i2u454_44:
  7780  003150  2E28               	decfsz	??_writeString,f,c
  7781  003152  D7FC               	goto	i2u454_45
  7782  003154  A029               	btfss	??_writeString+1,0,c
  7783  003156  D0A1               	goto	i2l6337
  7784                           
  7785                           ;disp.c: 186: {
  7786                           ;disp.c: 187: if (string[i] == '\0')
  7787  003158  502D               	movf	writeString@i,w,c
  7788  00315A  6E17               	movwf	?___wmul,c
  7789  00315C  6A18               	clrf	?___wmul+1,c
  7790  00315E  BE17               	btfsc	?___wmul,7,c
  7791  003160  0618               	decf	?___wmul+1,f,c
  7792  003162  0E00               	movlw	0
  7793  003164  6E1A               	movwf	?___wmul+3,c
  7794  003166  0E01               	movlw	1
  7795  003168  6E19               	movwf	?___wmul+2,c
  7796  00316A  EC75  F024         	call	___wmul	;wreg free
  7797  00316E  5017               	movf	?___wmul,w,c
  7798  003170  2426               	addwf	writeString@string,w,c
  7799  003172  6ED9               	movwf	fsr2l,c
  7800  003174  5018               	movf	?___wmul+1,w,c
  7801  003176  2027               	addwfc	writeString@string+1,w,c
  7802  003178  6EDA               	movwf	fsr2h,c
  7803  00317A  50DF               	movf	indf2,w,c
  7804  00317C  B4D8               	btfsc	status,2,c
  7805  00317E  D090               	goto	i2l113
  7806                           
  7807                           ;disp.c: 190: }
  7808                           ;disp.c: 191: if (string[i] == '.')
  7809                           
  7810                           ;disp.c: 188: {
  7811                           ;disp.c: 189: break;
  7812  003180  502D               	movf	writeString@i,w,c
  7813  003182  6E17               	movwf	?___wmul,c
  7814  003184  6A18               	clrf	?___wmul+1,c
  7815  003186  BE17               	btfsc	?___wmul,7,c
  7816  003188  0618               	decf	?___wmul+1,f,c
  7817  00318A  0E00               	movlw	0
  7818  00318C  6E1A               	movwf	?___wmul+3,c
  7819  00318E  0E01               	movlw	1
  7820  003190  6E19               	movwf	?___wmul+2,c
  7821  003192  EC75  F024         	call	___wmul	;wreg free
  7822  003196  5017               	movf	?___wmul,w,c
  7823  003198  2426               	addwf	writeString@string,w,c
  7824  00319A  6ED9               	movwf	fsr2l,c
  7825  00319C  5018               	movf	?___wmul+1,w,c
  7826  00319E  2027               	addwfc	writeString@string+1,w,c
  7827  0031A0  6EDA               	movwf	fsr2h,c
  7828  0031A2  0E2E               	movlw	46
  7829  0031A4  62DF               	cpfseq	indf2,c
  7830  0031A6  D02B               	goto	i2l6329
  7831                           
  7832                           ;disp.c: 192: {
  7833                           ;disp.c: 193: screen.digits.screen[cnt + 1].bits |= 0b10000000;
  7834  0031A8  C02C  F028         	movff	writeString@cnt,??_writeString
  7835  0031AC  6A29               	clrf	(??_writeString+1)& (0+255),c
  7836  0031AE  BE28               	btfsc	??_writeString& (0+255),7,c
  7837  0031B0  0629               	decf	(??_writeString+1)& (0+255),f,c
  7838  0031B2  0E01               	movlw	1
  7839  0031B4  2628               	addwf	??_writeString,f,c
  7840  0031B6  0E00               	movlw	0
  7841  0031B8  2229               	addwfc	??_writeString+1,f,c
  7842  0031BA  0100               	movlb	0	; () banked
  7843  0031BC  0EDE               	movlw	low _screen
  7844  0031BE  2428               	addwf	??_writeString,w,c
  7845  0031C0  6ED9               	movwf	fsr2l,c
  7846  0031C2  0100               	movlb	0	; () banked
  7847  0031C4  0E00               	movlw	high _screen
  7848  0031C6  2029               	addwfc	??_writeString+1,w,c
  7849  0031C8  6EDA               	movwf	fsr2h,c
  7850  0031CA  0E00               	movlw	0
  7851  0031CC  8EDB               	bsf	plusw2,7,c
  7852                           
  7853                           ; BSR set to: 0
  7854                           ;disp.c: 194: screen.changed |= 1 << (cnt + 1);
  7855  0031CE  C02C  F028         	movff	writeString@cnt,??_writeString
  7856  0031D2  0E01               	movlw	1
  7857  0031D4  2628               	addwf	??_writeString,f,c
  7858  0031D6  0E01               	movlw	1
  7859  0031D8  6E29               	movwf	(??_writeString+1)& (0+255),c
  7860  0031DA  6A2A               	clrf	(??_writeString+2)& (0+255),c
  7861  0031DC  2A28               	incf	??_writeString,f,c
  7862  0031DE  D003               	goto	i2u458_44
  7863  0031E0                     i2u458_45:
  7864  0031E0  90D8               	bcf	status,0,c
  7865  0031E2  3629               	rlcf	??_writeString+1,f,c
  7866  0031E4  362A               	rlcf	??_writeString+2,f,c
  7867  0031E6                     i2u458_44:
  7868  0031E6  2E28               	decfsz	??_writeString,f,c
  7869  0031E8  D7FB               	goto	i2u458_45
  7870  0031EA  5029               	movf	??_writeString+1,w,c
  7871  0031EC  0100               	movlb	0	; () banked
  7872  0031EE  0100               	movlb	0	; () banked
  7873  0031F0  13E9               	iorwf	(_screen+11)& (0+255),f,b
  7874  0031F2  502A               	movf	??_writeString+2,w,c
  7875  0031F4  0100               	movlb	0	; () banked
  7876  0031F6  0100               	movlb	0	; () banked
  7877  0031F8  13EA               	iorwf	(_screen+12)& (0+255),f,b
  7878                           
  7879                           ; BSR set to: 0
  7880                           ;disp.c: 195: bits++;
  7881  0031FA  2A2B               	incf	writeString@bits,f,c
  7882                           
  7883                           ; BSR set to: 0
  7884                           ;disp.c: 196: i++;
  7885  0031FC  2A2D               	incf	writeString@i,f,c
  7886  0031FE                     i2l6329:
  7887                           
  7888                           ;disp.c: 197: }
  7889                           ;disp.c: 198: if (getFontChar(string[i]) || string[i] == ' ')
  7890  0031FE  502D               	movf	writeString@i,w,c
  7891  003200  6E17               	movwf	?___wmul,c
  7892  003202  6A18               	clrf	?___wmul+1,c
  7893  003204  BE17               	btfsc	?___wmul,7,c
  7894  003206  0618               	decf	?___wmul+1,f,c
  7895  003208  0E00               	movlw	0
  7896  00320A  6E1A               	movwf	?___wmul+3,c
  7897  00320C  0E01               	movlw	1
  7898  00320E  6E19               	movwf	?___wmul+2,c
  7899  003210  EC75  F024         	call	___wmul	;wreg free
  7900  003214  5017               	movf	?___wmul,w,c
  7901  003216  2426               	addwf	writeString@string,w,c
  7902  003218  6ED9               	movwf	fsr2l,c
  7903  00321A  5018               	movf	?___wmul+1,w,c
  7904  00321C  2027               	addwfc	writeString@string+1,w,c
  7905  00321E  6EDA               	movwf	fsr2h,c
  7906  003220  50DF               	movf	indf2,w,c
  7907  003222  6E1F               	movwf	?_getFontChar,c
  7908  003224  EC9B  F015         	call	_getFontChar	;wreg free
  7909  003228  0900               	iorlw	0
  7910  00322A  A4D8               	btfss	status,2,c
  7911  00322C  D014               	goto	i2l6333
  7912  00322E  502D               	movf	writeString@i,w,c
  7913  003230  6E17               	movwf	?___wmul,c
  7914  003232  6A18               	clrf	?___wmul+1,c
  7915  003234  BE17               	btfsc	?___wmul,7,c
  7916  003236  0618               	decf	?___wmul+1,f,c
  7917  003238  0E00               	movlw	0
  7918  00323A  6E1A               	movwf	?___wmul+3,c
  7919  00323C  0E01               	movlw	1
  7920  00323E  6E19               	movwf	?___wmul+2,c
  7921  003240  EC75  F024         	call	___wmul	;wreg free
  7922  003244  5017               	movf	?___wmul,w,c
  7923  003246  2426               	addwf	writeString@string,w,c
  7924  003248  6ED9               	movwf	fsr2l,c
  7925  00324A  5018               	movf	?___wmul+1,w,c
  7926  00324C  2027               	addwfc	writeString@string+1,w,c
  7927  00324E  6EDA               	movwf	fsr2h,c
  7928  003250  0E20               	movlw	32
  7929  003252  62DF               	cpfseq	indf2,c
  7930  003254  D021               	goto	i2l6335
  7931  003256                     i2l6333:
  7932                           
  7933                           ;disp.c: 199: {
  7934                           ;disp.c: 200: writeChar(1 << cnt, string[i]);
  7935  003256  C02C  F028         	movff	writeString@cnt,??_writeString
  7936  00325A  0E01               	movlw	1
  7937  00325C  6E29               	movwf	(??_writeString+1)& (0+255),c
  7938  00325E  2A28               	incf	??_writeString,f,c
  7939  003260  D002               	goto	i2u461_44
  7940  003262                     i2u461_45:
  7941  003262  90D8               	bcf	status,0,c
  7942  003264  3629               	rlcf	??_writeString+1,f,c
  7943  003266                     i2u461_44:
  7944  003266  2E28               	decfsz	??_writeString,f,c
  7945  003268  D7FC               	goto	i2u461_45
  7946  00326A  5029               	movf	??_writeString+1,w,c
  7947  00326C  6E22               	movwf	?_writeChar,c
  7948  00326E  502D               	movf	writeString@i,w,c
  7949  003270  6E17               	movwf	?___wmul,c
  7950  003272  6A18               	clrf	?___wmul+1,c
  7951  003274  BE17               	btfsc	?___wmul,7,c
  7952  003276  0618               	decf	?___wmul+1,f,c
  7953  003278  0E00               	movlw	0
  7954  00327A  6E1A               	movwf	?___wmul+3,c
  7955  00327C  0E01               	movlw	1
  7956  00327E  6E19               	movwf	?___wmul+2,c
  7957  003280  EC75  F024         	call	___wmul	;wreg free
  7958  003284  5017               	movf	?___wmul,w,c
  7959  003286  2426               	addwf	writeString@string,w,c
  7960  003288  6ED9               	movwf	fsr2l,c
  7961  00328A  5018               	movf	?___wmul+1,w,c
  7962  00328C  2027               	addwfc	writeString@string+1,w,c
  7963  00328E  6EDA               	movwf	fsr2h,c
  7964  003290  50DF               	movf	indf2,w,c
  7965  003292  6E23               	movwf	?_writeChar+1,c
  7966  003294  EC58  F024         	call	_writeChar	;wreg free
  7967  003298                     i2l6335:
  7968                           
  7969                           ;disp.c: 201: }
  7970                           ;disp.c: 202: i++;
  7971  003298  2A2D               	incf	writeString@i,f,c
  7972  00329A                     i2l6337:
  7973  00329A  062C               	decf	writeString@cnt,f,c
  7974  00329C                     i2l6339:
  7975  00329C  2E2B               	decfsz	writeString@bits,f,c
  7976  00329E  D750               	goto	i2l6313
  7977  0032A0                     i2l113:
  7978  0032A0  0012               	return	
  7979  0032A2                     __end_of_writeString:
  7980                           	opt stack 0
  7981                           tosu	equ	0xFFF
  7982                           tosh	equ	0xFFE
  7983                           tosl	equ	0xFFD
  7984                           pclatu	equ	0xFFB
  7985                           pclath	equ	0xFFA
  7986                           tblptru	equ	0xFF8
  7987                           tblptrh	equ	0xFF7
  7988                           tblptrl	equ	0xFF6
  7989                           tablat	equ	0xFF5
  7990                           prodh	equ	0xFF4
  7991                           prodl	equ	0xFF3
  7992                           intcon	equ	0xFF2
  7993                           intcon2	equ	0xFF1
  7994                           postinc0	equ	0xFEE
  7995                           fsr0h	equ	0xFEA
  7996                           fsr0l	equ	0xFE9
  7997                           wreg	equ	0xFE8
  7998                           postinc1	equ	0xFE6
  7999                           postdec1	equ	0xFE5
  8000                           fsr1h	equ	0xFE2
  8001                           fsr1l	equ	0xFE1
  8002                           indf2	equ	0xFDF
  8003                           postinc2	equ	0xFDE
  8004                           plusw2	equ	0xFDB
  8005                           fsr2h	equ	0xFDA
  8006                           fsr2l	equ	0xFD9
  8007                           status	equ	0xFD8
  8008                           
  8009 ;; *************** function _hibit *****************
  8010 ;; Defined at:
  8011 ;;		line 19 in file "defs.c"
  8012 ;; Parameters:    Size  Location     Type
  8013 ;;  x               4    0[COMRAM] unsigned long 
  8014 ;; Auto vars:     Size  Location     Type
  8015 ;;  log2Val         4    7[COMRAM] unsigned long 
  8016 ;; Return value:  Size  Location     Type
  8017 ;;                  4    0[COMRAM] unsigned long 
  8018 ;; Registers used:
  8019 ;;		wreg, status,2, status,0
  8020 ;; Tracked objects:
  8021 ;;		On entry : 0/0
  8022 ;;		On exit  : 0/0
  8023 ;;		Unchanged: 0/0
  8024 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8025 ;;      Params:         4       0       0       0       0       0       0       0       0
  8026 ;;      Locals:         4       0       0       0       0       0       0       0       0
  8027 ;;      Temps:          3       0       0       0       0       0       0       0       0
  8028 ;;      Totals:        11       0       0       0       0       0       0       0       0
  8029 ;;Total ram usage:       11 bytes
  8030 ;; Hardware stack levels used:    1
  8031 ;; This function calls:
  8032 ;;		Nothing
  8033 ;; This function is called by:
  8034 ;;		_writeString
  8035 ;; This function uses a non-reentrant model
  8036 ;;
  8037                           
  8038                           	psect	text25
  8039  0045B8                     __ptext25:
  8040                           	opt stack 0
  8041  0045B8                     _hibit:
  8042                           	opt stack 23
  8043                           
  8044                           ;defs.c: 20: uint32_t log2Val = 0;
  8045                           
  8046                           ;incstack = 0
  8047                           ;incstack = 0
  8048  0045B8  0E00               	movlw	0
  8049  0045BA  6E08               	movwf	hibit@log2Val,c
  8050  0045BC  0E00               	movlw	0
  8051  0045BE  6E09               	movwf	hibit@log2Val+1,c
  8052  0045C0  0E00               	movlw	0
  8053  0045C2  6E0A               	movwf	hibit@log2Val+2,c
  8054  0045C4  0E00               	movlw	0
  8055  0045C6  6E0B               	movwf	hibit@log2Val+3,c
  8056                           
  8057                           ;defs.c: 21: while (x >>= 1) log2Val++;
  8058  0045C8  D008               	goto	i2l424
  8059  0045CA                     i2l5327:
  8060  0045CA  0E01               	movlw	1
  8061  0045CC  2608               	addwf	hibit@log2Val,f,c
  8062  0045CE  0E00               	movlw	0
  8063  0045D0  2209               	addwfc	hibit@log2Val+1,f,c
  8064  0045D2  0E00               	movlw	0
  8065  0045D4  220A               	addwfc	hibit@log2Val+2,f,c
  8066  0045D6  0E00               	movlw	0
  8067  0045D8  220B               	addwfc	hibit@log2Val+3,f,c
  8068  0045DA                     i2l424:
  8069  0045DA  90D8               	bcf	status,0,c
  8070  0045DC  3204               	rrcf	hibit@x+3,f,c
  8071  0045DE  3203               	rrcf	hibit@x+2,f,c
  8072  0045E0  3202               	rrcf	hibit@x+1,f,c
  8073  0045E2  3201               	rrcf	hibit@x,f,c
  8074  0045E4  5004               	movf	(hibit@x+3)& (0+255),w,c
  8075  0045E6  1001               	iorwf	hibit@x& (0+255),w,c
  8076  0045E8  1002               	iorwf	(hibit@x+1)& (0+255),w,c
  8077  0045EA  1003               	iorwf	(hibit@x+2)& (0+255),w,c
  8078  0045EC  A4D8               	btfss	status,2,c
  8079  0045EE  D7ED               	goto	i2l5327
  8080                           
  8081                           ;defs.c: 22: return 1 << log2Val;
  8082  0045F0  C008  F005         	movff	hibit@log2Val,??_hibit
  8083  0045F4  0E01               	movlw	1
  8084  0045F6  6E06               	movwf	(??_hibit+1)& (0+255),c
  8085  0045F8  6A07               	clrf	(??_hibit+2)& (0+255),c
  8086  0045FA  2A05               	incf	??_hibit,f,c
  8087  0045FC  D003               	goto	i2u318_44
  8088  0045FE                     i2u318_45:
  8089  0045FE  90D8               	bcf	status,0,c
  8090  004600  3606               	rlcf	??_hibit+1,f,c
  8091  004602  3607               	rlcf	??_hibit+2,f,c
  8092  004604                     i2u318_44:
  8093  004604  2E05               	decfsz	??_hibit,f,c
  8094  004606  D7FB               	goto	i2u318_45
  8095  004608  C006  F001         	movff	??_hibit+1,?_hibit
  8096  00460C  C007  F002         	movff	??_hibit+2,?_hibit+1
  8097  004610  0E00               	movlw	0
  8098  004612  BE02               	btfsc	?_hibit+1,7,c
  8099  004614  0EFF               	movlw	-1
  8100  004616  6E03               	movwf	?_hibit+2,c
  8101  004618  6E04               	movwf	?_hibit+3,c
  8102  00461A  0012               	return	
  8103  00461C                     __end_of_hibit:
  8104                           	opt stack 0
  8105                           tosu	equ	0xFFF
  8106                           tosh	equ	0xFFE
  8107                           tosl	equ	0xFFD
  8108                           pclatu	equ	0xFFB
  8109                           pclath	equ	0xFFA
  8110                           tblptru	equ	0xFF8
  8111                           tblptrh	equ	0xFF7
  8112                           tblptrl	equ	0xFF6
  8113                           tablat	equ	0xFF5
  8114                           prodh	equ	0xFF4
  8115                           prodl	equ	0xFF3
  8116                           intcon	equ	0xFF2
  8117                           intcon2	equ	0xFF1
  8118                           postinc0	equ	0xFEE
  8119                           fsr0h	equ	0xFEA
  8120                           fsr0l	equ	0xFE9
  8121                           wreg	equ	0xFE8
  8122                           postinc1	equ	0xFE6
  8123                           postdec1	equ	0xFE5
  8124                           fsr1h	equ	0xFE2
  8125                           fsr1l	equ	0xFE1
  8126                           indf2	equ	0xFDF
  8127                           postinc2	equ	0xFDE
  8128                           plusw2	equ	0xFDB
  8129                           fsr2h	equ	0xFDA
  8130                           fsr2l	equ	0xFD9
  8131                           status	equ	0xFD8
  8132                           
  8133 ;; *************** function _countBits *****************
  8134 ;; Defined at:
  8135 ;;		line 9 in file "defs.c"
  8136 ;; Parameters:    Size  Location     Type
  8137 ;;  num             4    0[COMRAM] unsigned long 
  8138 ;; Auto vars:     Size  Location     Type
  8139 ;;  ret             1    4[COMRAM] unsigned char 
  8140 ;; Return value:  Size  Location     Type
  8141 ;;                  1    wreg      unsigned char 
  8142 ;; Registers used:
  8143 ;;		wreg, status,2, status,0
  8144 ;; Tracked objects:
  8145 ;;		On entry : 0/0
  8146 ;;		On exit  : 0/0
  8147 ;;		Unchanged: 0/0
  8148 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8149 ;;      Params:         4       0       0       0       0       0       0       0       0
  8150 ;;      Locals:         1       0       0       0       0       0       0       0       0
  8151 ;;      Temps:          0       0       0       0       0       0       0       0       0
  8152 ;;      Totals:         5       0       0       0       0       0       0       0       0
  8153 ;;Total ram usage:        5 bytes
  8154 ;; Hardware stack levels used:    1
  8155 ;; This function calls:
  8156 ;;		Nothing
  8157 ;; This function is called by:
  8158 ;;		_writeString
  8159 ;;		_printRTC
  8160 ;;		_writeLong
  8161 ;;		_writeFloat
  8162 ;;		_maxSize
  8163 ;; This function uses a non-reentrant model
  8164 ;;
  8165                           
  8166                           	psect	text26
  8167  004984                     __ptext26:
  8168                           	opt stack 0
  8169  004984                     _countBits:
  8170                           	opt stack 23
  8171                           
  8172                           ;defs.c: 10: uint8_t ret = num & 1;
  8173                           
  8174                           ;incstack = 0
  8175                           ;incstack = 0
  8176  004984  5001               	movf	countBits@num,w,c
  8177  004986  0B01               	andlw	1
  8178  004988  6E05               	movwf	countBits@ret,c
  8179                           
  8180                           ;defs.c: 11: while (num) ret += (0x1 & (num >>= 1));
  8181  00498A  D008               	goto	i2l418
  8182  00498C                     i2l5311:
  8183  00498C  90D8               	bcf	status,0,c
  8184  00498E  3204               	rrcf	countBits@num+3,f,c
  8185  004990  3203               	rrcf	countBits@num+2,f,c
  8186  004992  3202               	rrcf	countBits@num+1,f,c
  8187  004994  3201               	rrcf	countBits@num,f,c
  8188  004996  5001               	movf	countBits@num& (0+255),w,c
  8189  004998  0B01               	andlw	1
  8190  00499A  2605               	addwf	countBits@ret,f,c
  8191  00499C                     i2l418:
  8192  00499C  5004               	movf	countBits@num+3,w,c
  8193  00499E  1001               	iorwf	countBits@num,w,c
  8194  0049A0  1002               	iorwf	countBits@num+1,w,c
  8195  0049A2  1003               	iorwf	countBits@num+2,w,c
  8196  0049A4  A4D8               	btfss	status,2,c
  8197  0049A6  D7F2               	goto	i2l5311
  8198                           
  8199                           ;defs.c: 12: return ret;
  8200  0049A8  5005               	movf	countBits@ret,w,c
  8201  0049AA  0012               	return	
  8202  0049AC                     __end_of_countBits:
  8203                           	opt stack 0
  8204                           tosu	equ	0xFFF
  8205                           tosh	equ	0xFFE
  8206                           tosl	equ	0xFFD
  8207                           pclatu	equ	0xFFB
  8208                           pclath	equ	0xFFA
  8209                           tblptru	equ	0xFF8
  8210                           tblptrh	equ	0xFF7
  8211                           tblptrl	equ	0xFF6
  8212                           tablat	equ	0xFF5
  8213                           prodh	equ	0xFF4
  8214                           prodl	equ	0xFF3
  8215                           intcon	equ	0xFF2
  8216                           intcon2	equ	0xFF1
  8217                           postinc0	equ	0xFEE
  8218                           fsr0h	equ	0xFEA
  8219                           fsr0l	equ	0xFE9
  8220                           wreg	equ	0xFE8
  8221                           postinc1	equ	0xFE6
  8222                           postdec1	equ	0xFE5
  8223                           fsr1h	equ	0xFE2
  8224                           fsr1l	equ	0xFE1
  8225                           indf2	equ	0xFDF
  8226                           postinc2	equ	0xFDE
  8227                           plusw2	equ	0xFDB
  8228                           fsr2h	equ	0xFDA
  8229                           fsr2l	equ	0xFD9
  8230                           status	equ	0xFD8
  8231                           
  8232 ;; *************** function _writeChar *****************
  8233 ;; Defined at:
  8234 ;;		line 123 in file "disp.c"
  8235 ;; Parameters:    Size  Location     Type
  8236 ;;  digit           1   33[COMRAM] unsigned char 
  8237 ;;  ch              1   34[COMRAM] unsigned char 
  8238 ;; Auto vars:     Size  Location     Type
  8239 ;;  dig             1   35[COMRAM] unsigned char 
  8240 ;; Return value:  Size  Location     Type
  8241 ;;		None               void
  8242 ;; Registers used:
  8243 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8244 ;; Tracked objects:
  8245 ;;		On entry : 0/0
  8246 ;;		On exit  : 0/0
  8247 ;;		Unchanged: 0/0
  8248 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8249 ;;      Params:         2       0       0       0       0       0       0       0       0
  8250 ;;      Locals:         1       0       0       0       0       0       0       0       0
  8251 ;;      Temps:          0       0       0       0       0       0       0       0       0
  8252 ;;      Totals:         3       0       0       0       0       0       0       0       0
  8253 ;;Total ram usage:        3 bytes
  8254 ;; Hardware stack levels used:    1
  8255 ;; Hardware stack levels required when called:    1
  8256 ;; This function calls:
  8257 ;;		_getFontChar
  8258 ;;		i2_log2
  8259 ;; This function is called by:
  8260 ;;		_writeString
  8261 ;; This function uses a non-reentrant model
  8262 ;;
  8263                           
  8264                           	psect	text27
  8265  0048B0                     __ptext27:
  8266                           	opt stack 0
  8267  0048B0                     _writeChar:
  8268                           	opt stack 22
  8269                           
  8270                           ;disp.c: 124: uint8_t dig = (uint8_t) log2(digit);
  8271                           
  8272                           ;incstack = 0
  8273                           ;incstack = 0
  8274  0048B0  5022               	movf	writeChar@digit,w,c
  8275  0048B2  6E0C               	movwf	?i2_log2,c
  8276  0048B4  6A0D               	clrf	?i2_log2+1,c
  8277  0048B6  6A0E               	clrf	?i2_log2+2,c
  8278  0048B8  6A0F               	clrf	?i2_log2+3,c
  8279  0048BA  EC95  F023         	call	i2_log2	;wreg free
  8280  0048BE  500C               	movf	?i2_log2,w,c
  8281  0048C0  6E24               	movwf	writeChar@dig,c
  8282                           
  8283                           ;disp.c: 125: screen.digits.screen[dig].bits = getFontChar(ch);
  8284  0048C2  5024               	movf	writeChar@dig,w,c
  8285  0048C4  0D01               	mullw	1
  8286  0048C6  0100               	movlb	0	; () banked
  8287  0048C8  0EDE               	movlw	low _screen
  8288  0048CA  24F3               	addwf	prodl,w,c
  8289  0048CC  6ED9               	movwf	fsr2l,c
  8290  0048CE  0100               	movlb	0	; () banked
  8291  0048D0  0E00               	movlw	high _screen
  8292  0048D2  20F4               	addwfc	prodh,w,c
  8293  0048D4  6EDA               	movwf	fsr2h,c
  8294  0048D6  C023  F01F         	movff	writeChar@ch,?_getFontChar
  8295  0048DA  EC9B  F015         	call	_getFontChar	;wreg free
  8296  0048DE  6EDF               	movwf	indf2,c
  8297                           
  8298                           ;disp.c: 126: screen.changed |= digit;
  8299  0048E0  5022               	movf	writeChar@digit,w,c
  8300  0048E2  0100               	movlb	0	; () banked
  8301  0048E4  0100               	movlb	0	; () banked
  8302  0048E6  13E9               	iorwf	(_screen+11)& (0+255),f,b
  8303                           
  8304                           ; BSR set to: 0
  8305  0048E8  0012               	return	
  8306  0048EA                     __end_of_writeChar:
  8307                           	opt stack 0
  8308                           tosu	equ	0xFFF
  8309                           tosh	equ	0xFFE
  8310                           tosl	equ	0xFFD
  8311                           pclatu	equ	0xFFB
  8312                           pclath	equ	0xFFA
  8313                           tblptru	equ	0xFF8
  8314                           tblptrh	equ	0xFF7
  8315                           tblptrl	equ	0xFF6
  8316                           tablat	equ	0xFF5
  8317                           prodh	equ	0xFF4
  8318                           prodl	equ	0xFF3
  8319                           intcon	equ	0xFF2
  8320                           intcon2	equ	0xFF1
  8321                           postinc0	equ	0xFEE
  8322                           fsr0h	equ	0xFEA
  8323                           fsr0l	equ	0xFE9
  8324                           wreg	equ	0xFE8
  8325                           postinc1	equ	0xFE6
  8326                           postdec1	equ	0xFE5
  8327                           fsr1h	equ	0xFE2
  8328                           fsr1l	equ	0xFE1
  8329                           indf2	equ	0xFDF
  8330                           postinc2	equ	0xFDE
  8331                           plusw2	equ	0xFDB
  8332                           fsr2h	equ	0xFDA
  8333                           fsr2l	equ	0xFD9
  8334                           status	equ	0xFD8
  8335                           
  8336 ;; *************** function i2_log2 *****************
  8337 ;; Defined at:
  8338 ;;		line 48 in file "defs.c"
  8339 ;; Parameters:    Size  Location     Type
  8340 ;;  log2            4   11[COMRAM] unsigned long 
  8341 ;; Auto vars:     Size  Location     Type
  8342 ;;  log2            4   15[COMRAM] unsigned long 
  8343 ;; Return value:  Size  Location     Type
  8344 ;;                  4   11[COMRAM] unsigned long 
  8345 ;; Registers used:
  8346 ;;		wreg, status,2, status,0
  8347 ;; Tracked objects:
  8348 ;;		On entry : 0/0
  8349 ;;		On exit  : 0/0
  8350 ;;		Unchanged: 0/0
  8351 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8352 ;;      Params:         4       0       0       0       0       0       0       0       0
  8353 ;;      Locals:         4       0       0       0       0       0       0       0       0
  8354 ;;      Temps:          0       0       0       0       0       0       0       0       0
  8355 ;;      Totals:         8       0       0       0       0       0       0       0       0
  8356 ;;Total ram usage:        8 bytes
  8357 ;; Hardware stack levels used:    1
  8358 ;; This function calls:
  8359 ;;		Nothing
  8360 ;; This function is called by:
  8361 ;;		_writeChar
  8362 ;;		_writeString
  8363 ;;		i2_writeDigit
  8364 ;; This function uses a non-reentrant model
  8365 ;;
  8366                           
  8367                           	psect	text28
  8368  00472A                     __ptext28:
  8369                           	opt stack 0
  8370  00472A                     i2_log2:
  8371                           	opt stack 22
  8372                           
  8373                           ;defs.c: 49: uint32_t log2Val = 0;
  8374                           
  8375                           ; BSR set to: 0
  8376                           ;incstack = 0
  8377                           ;incstack = 0
  8378  00472A  0E00               	movlw	0
  8379  00472C  6E10               	movwf	i2log2@log2Val,c
  8380  00472E  0E00               	movlw	0
  8381  004730  6E11               	movwf	i2log2@log2Val+1,c
  8382  004732  0E00               	movlw	0
  8383  004734  6E12               	movwf	i2log2@log2Val+2,c
  8384  004736  0E00               	movlw	0
  8385  004738  6E13               	movwf	i2log2@log2Val+3,c
  8386                           
  8387                           ;defs.c: 50: while (num >>= 1) log2Val++;
  8388  00473A  D008               	goto	i2l440
  8389  00473C                     i2l5963:
  8390  00473C  0E01               	movlw	1
  8391  00473E  2610               	addwf	i2log2@log2Val,f,c
  8392  004740  0E00               	movlw	0
  8393  004742  2211               	addwfc	i2log2@log2Val+1,f,c
  8394  004744  0E00               	movlw	0
  8395  004746  2212               	addwfc	i2log2@log2Val+2,f,c
  8396  004748  0E00               	movlw	0
  8397  00474A  2213               	addwfc	i2log2@log2Val+3,f,c
  8398  00474C                     i2l440:
  8399  00474C  90D8               	bcf	status,0,c
  8400  00474E  320F               	rrcf	i2log2@num+3,f,c
  8401  004750  320E               	rrcf	i2log2@num+2,f,c
  8402  004752  320D               	rrcf	i2log2@num+1,f,c
  8403  004754  320C               	rrcf	i2log2@num,f,c
  8404  004756  500F               	movf	(i2log2@num+3)& (0+255),w,c
  8405  004758  100C               	iorwf	i2log2@num& (0+255),w,c
  8406  00475A  100D               	iorwf	(i2log2@num+1)& (0+255),w,c
  8407  00475C  100E               	iorwf	(i2log2@num+2)& (0+255),w,c
  8408  00475E  A4D8               	btfss	status,2,c
  8409  004760  D7ED               	goto	i2l5963
  8410                           
  8411                           ;defs.c: 51: return log2Val;
  8412  004762  C010  F00C         	movff	i2log2@log2Val,?i2_log2
  8413  004766  C011  F00D         	movff	i2log2@log2Val+1,?i2_log2+1
  8414  00476A  C012  F00E         	movff	i2log2@log2Val+2,?i2_log2+2
  8415  00476E  C013  F00F         	movff	i2log2@log2Val+3,?i2_log2+3
  8416  004772  0012               	return	
  8417  004774                     __end_ofi2_log2:
  8418                           	opt stack 0
  8419                           tosu	equ	0xFFF
  8420                           tosh	equ	0xFFE
  8421                           tosl	equ	0xFFD
  8422                           pclatu	equ	0xFFB
  8423                           pclath	equ	0xFFA
  8424                           tblptru	equ	0xFF8
  8425                           tblptrh	equ	0xFF7
  8426                           tblptrl	equ	0xFF6
  8427                           tablat	equ	0xFF5
  8428                           prodh	equ	0xFF4
  8429                           prodl	equ	0xFF3
  8430                           intcon	equ	0xFF2
  8431                           intcon2	equ	0xFF1
  8432                           postinc0	equ	0xFEE
  8433                           fsr0h	equ	0xFEA
  8434                           fsr0l	equ	0xFE9
  8435                           wreg	equ	0xFE8
  8436                           postinc1	equ	0xFE6
  8437                           postdec1	equ	0xFE5
  8438                           fsr1h	equ	0xFE2
  8439                           fsr1l	equ	0xFE1
  8440                           indf2	equ	0xFDF
  8441                           postinc2	equ	0xFDE
  8442                           plusw2	equ	0xFDB
  8443                           fsr2h	equ	0xFDA
  8444                           fsr2l	equ	0xFD9
  8445                           status	equ	0xFD8
  8446                           
  8447 ;; *************** function _getFontChar *****************
  8448 ;; Defined at:
  8449 ;;		line 117 in file "display1.h"
  8450 ;; Parameters:    Size  Location     Type
  8451 ;;  ch              1   30[COMRAM] unsigned char 
  8452 ;; Auto vars:     Size  Location     Type
  8453 ;;		None
  8454 ;; Return value:  Size  Location     Type
  8455 ;;                  1    wreg      unsigned char 
  8456 ;; Registers used:
  8457 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru
  8458 ;; Tracked objects:
  8459 ;;		On entry : 0/0
  8460 ;;		On exit  : 0/0
  8461 ;;		Unchanged: 0/0
  8462 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8463 ;;      Params:         1       0       0       0       0       0       0       0       0
  8464 ;;      Locals:         0       0       0       0       0       0       0       0       0
  8465 ;;      Temps:          2       0       0       0       0       0       0       0       0
  8466 ;;      Totals:         3       0       0       0       0       0       0       0       0
  8467 ;;Total ram usage:        3 bytes
  8468 ;; Hardware stack levels used:    1
  8469 ;; This function calls:
  8470 ;;		Nothing
  8471 ;; This function is called by:
  8472 ;;		_writeChar
  8473 ;;		_writeString
  8474 ;; This function uses a non-reentrant model
  8475 ;;
  8476                           
  8477                           	psect	text29
  8478  002B36                     __ptext29:
  8479                           	opt stack 0
  8480  002B36                     _getFontChar:
  8481                           	opt stack 22
  8482                           
  8483                           ;display1.h: 118: switch (ch)
  8484                           
  8485                           ;incstack = 0
  8486                           ;incstack = 0
  8487  002B36  D01F               	goto	i2l6009
  8488  002B38                     i2l5967:
  8489                           
  8490                           ;display1.h: 121: return lcd_font[ch - '0'];
  8491  002B38  0ED0               	movlw	208
  8492  002B3A  D001               	goto	L11
  8493  002B3C                     i2l5971:
  8494                           
  8495                           ;display1.h: 123: return lcd_font[ch - ('0' + ('a' - 'A'))];
  8496  002B3C  0EB0               	movlw	176
  8497  002B3E                     L11:
  8498  002B3E  241F               	addwf	getFontChar@ch,w,c
  8499  002B40  6E20               	movwf	??_getFontChar& (0+255),c
  8500  002B42  6A21               	clrf	(??_getFontChar+1)& (0+255),c
  8501  002B44  0EFF               	movlw	255
  8502  002B46  2221               	addwfc	(??_getFontChar+1)& (0+255),f,c
  8503  002B48  0EB8               	movlw	low _lcd_font
  8504  002B4A  2420               	addwf	??_getFontChar,w,c
  8505  002B4C  6EF6               	movwf	tblptrl,c
  8506  002B4E  0E7E               	movlw	high _lcd_font
  8507  002B50  2021               	addwfc	??_getFontChar+1,w,c
  8508  002B52  6EF7               	movwf	tblptrh,c
  8509  002B54  0008               	tblrd		*
  8510  002B56  50F5               	movf	tablat,w,c
  8511  002B58  D0F7               	goto	i2l43
  8512  002B5A                     i2l5975:
  8513                           
  8514                           ;display1.h: 125: return 0b01000000;
  8515  002B5A  0E40               	movlw	64
  8516  002B5C  D0F5               	goto	i2l43
  8517  002B5E                     i2l5979:
  8518                           
  8519                           ;display1.h: 127: case ',':
  8520                           ;display1.h: 128: return 0b10000000;
  8521  002B5E  0E80               	movlw	128
  8522  002B60  D0F3               	goto	i2l43
  8523  002B62                     i2l5983:
  8524                           
  8525                           ;display1.h: 130: return 0b00000001 + 0b00001000 + 0b00010000 + 0b00100000;
  8526  002B62  0E39               	movlw	57
  8527  002B64  D0F1               	goto	i2l43
  8528  002B66                     i2l5987:
  8529                           
  8530                           ;display1.h: 132: return 0b00000001 + 0b00000010 + 0b00000100 + 0b00001000;
  8531  002B66  0E0F               	movlw	15
  8532  002B68  D0EF               	goto	i2l43
  8533  002B6A                     i2l5991:
  8534                           
  8535                           ;display1.h: 134: return 0b00001000;
  8536  002B6A  0E08               	movlw	8
  8537  002B6C  D0ED               	goto	i2l43
  8538  002B6E                     i2l5995:
  8539                           
  8540                           ;display1.h: 136: return 0b00000001 + 0b00000010 + 0b00100000 + 0b01000000;
  8541  002B6E  0E63               	movlw	99
  8542  002B70  D0EB               	goto	i2l43
  8543  002B72                     i2l6003:
  8544                           
  8545                           ;display1.h: 140: return 0;
  8546  002B72  0E00               	movlw	0
  8547  002B74  D0E9               	goto	i2l43
  8548  002B76                     i2l6009:
  8549  002B76  501F               	movf	getFontChar@ch,w,c
  8550                           
  8551                           ; Switch size 1, requested type "space"
  8552                           ; Number of cases is 77, Range of values is 32 to 122
  8553                           ; switch strategies available:
  8554                           ; Name         Instructions Cycles
  8555                           ; simple_byte          232   117 (average)
  8556                           ;	Chosen strategy is simple_byte
  8557  002B78  0A20               	xorlw	32	; case 32
  8558  002B7A  B4D8               	btfsc	status,2,c
  8559  002B7C  D7FA               	goto	i2l6003
  8560  002B7E  0A0A               	xorlw	10	; case 42
  8561  002B80  B4D8               	btfsc	status,2,c
  8562  002B82  D7F5               	goto	i2l5995
  8563  002B84  0A06               	xorlw	6	; case 44
  8564  002B86  B4D8               	btfsc	status,2,c
  8565  002B88  D7EA               	goto	i2l5979
  8566  002B8A  0A01               	xorlw	1	; case 45
  8567  002B8C  B4D8               	btfsc	status,2,c
  8568  002B8E  D7E5               	goto	i2l5975
  8569  002B90  0A03               	xorlw	3	; case 46
  8570  002B92  B4D8               	btfsc	status,2,c
  8571  002B94  D7E4               	goto	i2l5979
  8572  002B96  0A1E               	xorlw	30	; case 48
  8573  002B98  B4D8               	btfsc	status,2,c
  8574  002B9A  D7CE               	goto	i2l5967
  8575  002B9C  0A01               	xorlw	1	; case 49
  8576  002B9E  B4D8               	btfsc	status,2,c
  8577  002BA0  D7CB               	goto	i2l5967
  8578  002BA2  0A03               	xorlw	3	; case 50
  8579  002BA4  B4D8               	btfsc	status,2,c
  8580  002BA6  D7C8               	goto	i2l5967
  8581  002BA8  0A01               	xorlw	1	; case 51
  8582  002BAA  B4D8               	btfsc	status,2,c
  8583  002BAC  D7C5               	goto	i2l5967
  8584  002BAE  0A07               	xorlw	7	; case 52
  8585  002BB0  B4D8               	btfsc	status,2,c
  8586  002BB2  D7C2               	goto	i2l5967
  8587  002BB4  0A01               	xorlw	1	; case 53
  8588  002BB6  B4D8               	btfsc	status,2,c
  8589  002BB8  D7BF               	goto	i2l5967
  8590  002BBA  0A03               	xorlw	3	; case 54
  8591  002BBC  B4D8               	btfsc	status,2,c
  8592  002BBE  D7BC               	goto	i2l5967
  8593  002BC0  0A01               	xorlw	1	; case 55
  8594  002BC2  B4D8               	btfsc	status,2,c
  8595  002BC4  D7B9               	goto	i2l5967
  8596  002BC6  0A0F               	xorlw	15	; case 56
  8597  002BC8  B4D8               	btfsc	status,2,c
  8598  002BCA  D7B6               	goto	i2l5967
  8599  002BCC  0A01               	xorlw	1	; case 57
  8600  002BCE  B4D8               	btfsc	status,2,c
  8601  002BD0  D7B3               	goto	i2l5967
  8602  002BD2  0A03               	xorlw	3	; case 58
  8603  002BD4  B4D8               	btfsc	status,2,c
  8604  002BD6  D7B0               	goto	i2l5967
  8605  002BD8  0A01               	xorlw	1	; case 59
  8606  002BDA  B4D8               	btfsc	status,2,c
  8607  002BDC  D7AD               	goto	i2l5967
  8608  002BDE  0A07               	xorlw	7	; case 60
  8609  002BE0  B4D8               	btfsc	status,2,c
  8610  002BE2  D7AA               	goto	i2l5967
  8611  002BE4  0A01               	xorlw	1	; case 61
  8612  002BE6  B4D8               	btfsc	status,2,c
  8613  002BE8  D7A7               	goto	i2l5967
  8614  002BEA  0A03               	xorlw	3	; case 62
  8615  002BEC  B4D8               	btfsc	status,2,c
  8616  002BEE  D7A4               	goto	i2l5967
  8617  002BF0  0A01               	xorlw	1	; case 63
  8618  002BF2  B4D8               	btfsc	status,2,c
  8619  002BF4  D7A1               	goto	i2l5967
  8620  002BF6  0A7F               	xorlw	127	; case 64
  8621  002BF8  B4D8               	btfsc	status,2,c
  8622  002BFA  D79E               	goto	i2l5967
  8623  002BFC  0A01               	xorlw	1	; case 65
  8624  002BFE  B4D8               	btfsc	status,2,c
  8625  002C00  D79B               	goto	i2l5967
  8626  002C02  0A03               	xorlw	3	; case 66
  8627  002C04  B4D8               	btfsc	status,2,c
  8628  002C06  D798               	goto	i2l5967
  8629  002C08  0A01               	xorlw	1	; case 67
  8630  002C0A  B4D8               	btfsc	status,2,c
  8631  002C0C  D795               	goto	i2l5967
  8632  002C0E  0A07               	xorlw	7	; case 68
  8633  002C10  B4D8               	btfsc	status,2,c
  8634  002C12  D792               	goto	i2l5967
  8635  002C14  0A01               	xorlw	1	; case 69
  8636  002C16  B4D8               	btfsc	status,2,c
  8637  002C18  D78F               	goto	i2l5967
  8638  002C1A  0A03               	xorlw	3	; case 70
  8639  002C1C  B4D8               	btfsc	status,2,c
  8640  002C1E  D78C               	goto	i2l5967
  8641  002C20  0A01               	xorlw	1	; case 71
  8642  002C22  B4D8               	btfsc	status,2,c
  8643  002C24  D789               	goto	i2l5967
  8644  002C26  0A0F               	xorlw	15	; case 72
  8645  002C28  B4D8               	btfsc	status,2,c
  8646  002C2A  D786               	goto	i2l5967
  8647  002C2C  0A01               	xorlw	1	; case 73
  8648  002C2E  B4D8               	btfsc	status,2,c
  8649  002C30  D783               	goto	i2l5967
  8650  002C32  0A03               	xorlw	3	; case 74
  8651  002C34  B4D8               	btfsc	status,2,c
  8652  002C36  D780               	goto	i2l5967
  8653  002C38  0A01               	xorlw	1	; case 75
  8654  002C3A  B4D8               	btfsc	status,2,c
  8655  002C3C  D77D               	goto	i2l5967
  8656  002C3E  0A07               	xorlw	7	; case 76
  8657  002C40  B4D8               	btfsc	status,2,c
  8658  002C42  D77A               	goto	i2l5967
  8659  002C44  0A01               	xorlw	1	; case 77
  8660  002C46  B4D8               	btfsc	status,2,c
  8661  002C48  D777               	goto	i2l5967
  8662  002C4A  0A03               	xorlw	3	; case 78
  8663  002C4C  B4D8               	btfsc	status,2,c
  8664  002C4E  D774               	goto	i2l5967
  8665  002C50  0A01               	xorlw	1	; case 79
  8666  002C52  B4D8               	btfsc	status,2,c
  8667  002C54  D771               	goto	i2l5967
  8668  002C56  0A1F               	xorlw	31	; case 80
  8669  002C58  B4D8               	btfsc	status,2,c
  8670  002C5A  D76E               	goto	i2l5967
  8671  002C5C  0A01               	xorlw	1	; case 81
  8672  002C5E  B4D8               	btfsc	status,2,c
  8673  002C60  D76B               	goto	i2l5967
  8674  002C62  0A03               	xorlw	3	; case 82
  8675  002C64  B4D8               	btfsc	status,2,c
  8676  002C66  D768               	goto	i2l5967
  8677  002C68  0A01               	xorlw	1	; case 83
  8678  002C6A  B4D8               	btfsc	status,2,c
  8679  002C6C  D765               	goto	i2l5967
  8680  002C6E  0A07               	xorlw	7	; case 84
  8681  002C70  B4D8               	btfsc	status,2,c
  8682  002C72  D762               	goto	i2l5967
  8683  002C74  0A01               	xorlw	1	; case 85
  8684  002C76  B4D8               	btfsc	status,2,c
  8685  002C78  D75F               	goto	i2l5967
  8686  002C7A  0A03               	xorlw	3	; case 86
  8687  002C7C  B4D8               	btfsc	status,2,c
  8688  002C7E  D75C               	goto	i2l5967
  8689  002C80  0A01               	xorlw	1	; case 87
  8690  002C82  B4D8               	btfsc	status,2,c
  8691  002C84  D759               	goto	i2l5967
  8692  002C86  0A0F               	xorlw	15	; case 88
  8693  002C88  B4D8               	btfsc	status,2,c
  8694  002C8A  D756               	goto	i2l5967
  8695  002C8C  0A01               	xorlw	1	; case 89
  8696  002C8E  B4D8               	btfsc	status,2,c
  8697  002C90  D753               	goto	i2l5967
  8698  002C92  0A03               	xorlw	3	; case 90
  8699  002C94  B4D8               	btfsc	status,2,c
  8700  002C96  D750               	goto	i2l5967
  8701  002C98  0A01               	xorlw	1	; case 91
  8702  002C9A  B4D8               	btfsc	status,2,c
  8703  002C9C  D762               	goto	i2l5983
  8704  002C9E  0A06               	xorlw	6	; case 93
  8705  002CA0  B4D8               	btfsc	status,2,c
  8706  002CA2  D761               	goto	i2l5987
  8707  002CA4  0A02               	xorlw	2	; case 95
  8708  002CA6  B4D8               	btfsc	status,2,c
  8709  002CA8  D760               	goto	i2l5991
  8710  002CAA  0A3E               	xorlw	62	; case 97
  8711  002CAC  B4D8               	btfsc	status,2,c
  8712  002CAE  D746               	goto	i2l5971
  8713  002CB0  0A03               	xorlw	3	; case 98
  8714  002CB2  B4D8               	btfsc	status,2,c
  8715  002CB4  D743               	goto	i2l5971
  8716  002CB6  0A01               	xorlw	1	; case 99
  8717  002CB8  B4D8               	btfsc	status,2,c
  8718  002CBA  D740               	goto	i2l5971
  8719  002CBC  0A07               	xorlw	7	; case 100
  8720  002CBE  B4D8               	btfsc	status,2,c
  8721  002CC0  D73D               	goto	i2l5971
  8722  002CC2  0A01               	xorlw	1	; case 101
  8723  002CC4  B4D8               	btfsc	status,2,c
  8724  002CC6  D73A               	goto	i2l5971
  8725  002CC8  0A03               	xorlw	3	; case 102
  8726  002CCA  B4D8               	btfsc	status,2,c
  8727  002CCC  D737               	goto	i2l5971
  8728  002CCE  0A01               	xorlw	1	; case 103
  8729  002CD0  B4D8               	btfsc	status,2,c
  8730  002CD2  D734               	goto	i2l5971
  8731  002CD4  0A0F               	xorlw	15	; case 104
  8732  002CD6  B4D8               	btfsc	status,2,c
  8733  002CD8  D731               	goto	i2l5971
  8734  002CDA  0A01               	xorlw	1	; case 105
  8735  002CDC  B4D8               	btfsc	status,2,c
  8736  002CDE  D72E               	goto	i2l5971
  8737  002CE0  0A03               	xorlw	3	; case 106
  8738  002CE2  B4D8               	btfsc	status,2,c
  8739  002CE4  D72B               	goto	i2l5971
  8740  002CE6  0A01               	xorlw	1	; case 107
  8741  002CE8  B4D8               	btfsc	status,2,c
  8742  002CEA  D728               	goto	i2l5971
  8743  002CEC  0A07               	xorlw	7	; case 108
  8744  002CEE  B4D8               	btfsc	status,2,c
  8745  002CF0  D725               	goto	i2l5971
  8746  002CF2  0A01               	xorlw	1	; case 109
  8747  002CF4  B4D8               	btfsc	status,2,c
  8748  002CF6  D722               	goto	i2l5971
  8749  002CF8  0A03               	xorlw	3	; case 110
  8750  002CFA  B4D8               	btfsc	status,2,c
  8751  002CFC  D71F               	goto	i2l5971
  8752  002CFE  0A01               	xorlw	1	; case 111
  8753  002D00  B4D8               	btfsc	status,2,c
  8754  002D02  D71C               	goto	i2l5971
  8755  002D04  0A1F               	xorlw	31	; case 112
  8756  002D06  B4D8               	btfsc	status,2,c
  8757  002D08  D719               	goto	i2l5971
  8758  002D0A  0A01               	xorlw	1	; case 113
  8759  002D0C  B4D8               	btfsc	status,2,c
  8760  002D0E  D716               	goto	i2l5971
  8761  002D10  0A03               	xorlw	3	; case 114
  8762  002D12  B4D8               	btfsc	status,2,c
  8763  002D14  D713               	goto	i2l5971
  8764  002D16  0A01               	xorlw	1	; case 115
  8765  002D18  B4D8               	btfsc	status,2,c
  8766  002D1A  D710               	goto	i2l5971
  8767  002D1C  0A07               	xorlw	7	; case 116
  8768  002D1E  B4D8               	btfsc	status,2,c
  8769  002D20  D70D               	goto	i2l5971
  8770  002D22  0A01               	xorlw	1	; case 117
  8771  002D24  B4D8               	btfsc	status,2,c
  8772  002D26  D70A               	goto	i2l5971
  8773  002D28  0A03               	xorlw	3	; case 118
  8774  002D2A  B4D8               	btfsc	status,2,c
  8775  002D2C  D707               	goto	i2l5971
  8776  002D2E  0A01               	xorlw	1	; case 119
  8777  002D30  B4D8               	btfsc	status,2,c
  8778  002D32  D704               	goto	i2l5971
  8779  002D34  0A0F               	xorlw	15	; case 120
  8780  002D36  B4D8               	btfsc	status,2,c
  8781  002D38  D701               	goto	i2l5971
  8782  002D3A  0A01               	xorlw	1	; case 121
  8783  002D3C  B4D8               	btfsc	status,2,c
  8784  002D3E  D6FE               	goto	i2l5971
  8785  002D40  0A03               	xorlw	3	; case 122
  8786  002D42  B4D8               	btfsc	status,2,c
  8787  002D44  D6FB               	goto	i2l5971
  8788  002D46  D715               	goto	i2l6003
  8789  002D48                     i2l43:
  8790  002D48  0012               	return	
  8791  002D4A                     __end_of_getFontChar:
  8792                           	opt stack 0
  8793                           tosu	equ	0xFFF
  8794                           tosh	equ	0xFFE
  8795                           tosl	equ	0xFFD
  8796                           pclatu	equ	0xFFB
  8797                           pclath	equ	0xFFA
  8798                           tblptru	equ	0xFF8
  8799                           tblptrh	equ	0xFF7
  8800                           tblptrl	equ	0xFF6
  8801                           tablat	equ	0xFF5
  8802                           prodh	equ	0xFF4
  8803                           prodl	equ	0xFF3
  8804                           intcon	equ	0xFF2
  8805                           intcon2	equ	0xFF1
  8806                           postinc0	equ	0xFEE
  8807                           fsr0h	equ	0xFEA
  8808                           fsr0l	equ	0xFE9
  8809                           wreg	equ	0xFE8
  8810                           postinc1	equ	0xFE6
  8811                           postdec1	equ	0xFE5
  8812                           fsr1h	equ	0xFE2
  8813                           fsr1l	equ	0xFE1
  8814                           indf2	equ	0xFDF
  8815                           postinc2	equ	0xFDE
  8816                           plusw2	equ	0xFDB
  8817                           fsr2h	equ	0xFDA
  8818                           fsr2l	equ	0xFD9
  8819                           status	equ	0xFD8
  8820                           
  8821 ;; *************** function _sprintf *****************
  8822 ;; Defined at:
  8823 ;;		line 493 in file "/usr/opt/microchip/xc8/v1.20/sources/common/doprnt.c"
  8824 ;; Parameters:    Size  Location     Type
  8825 ;;  sp              2   82[COMRAM] PTR unsigned char 
  8826 ;;		 -> printRTC@str(12), writeFloat@str(9), writeLong@str(9), 
  8827 ;;  f               2   84[COMRAM] PTR const unsigned char 
  8828 ;;		 -> STR_17(5), STR_16(10), STR_15(10), STR_14(12), 
  8829 ;;		 -> STR_13(12), STR_12(15), STR_11(15), STR_10(15), 
  8830 ;;		 -> STR_9(14), STR_8(14), STR_7(17), STR_6(16), 
  8831 ;;		 -> STR_5(17), STR_4(15), STR_3(13), STR_2(5), 
  8832 ;;		 -> STR_1(5), 
  8833 ;; Auto vars:     Size  Location     Type
  8834 ;;  vd              2   13[BANK0 ] unsigned int 
  8835 ;;  vd              2   15[BANK0 ] unsigned int 
  8836 ;;  _val            4   34[BANK0 ] struct .
  8837 ;;  fval            3   26[BANK0 ] struct .
  8838 ;;  integ           3   17[BANK0 ] struct .
  8839 ;;  ival            3    0        struct .
  8840 ;;  prec            2   31[BANK0 ] int 
  8841 ;;  width           2   29[BANK0 ] int 
  8842 ;;  flag            2   24[BANK0 ] unsigned short 
  8843 ;;  exp             2   22[BANK0 ] int 
  8844 ;;  ap              2   20[BANK0 ] PTR void [1]
  8845 ;;		 -> ?_sprintf(2), 
  8846 ;;  c               1   33[BANK0 ] char 
  8847 ;;  d               1    0        unsigned char 
  8848 ;; Return value:  Size  Location     Type
  8849 ;;                  2   82[COMRAM] int 
  8850 ;; Registers used:
  8851 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8852 ;; Tracked objects:
  8853 ;;		On entry : 0/0
  8854 ;;		On exit  : 0/0
  8855 ;;		Unchanged: 0/0
  8856 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8857 ;;      Params:        12       0       0       0       0       0       0       0       0
  8858 ;;      Locals:         0      32       0       0       0       0       0       0       0
  8859 ;;      Temps:          0       6       0       0       0       0       0       0       0
  8860 ;;      Totals:        12      38       0       0       0       0       0       0       0
  8861 ;;Total ram usage:       50 bytes
  8862 ;; Hardware stack levels used:    1
  8863 ;; Hardware stack levels required when called:    4
  8864 ;; This function calls:
  8865 ;;		_fround
  8866 ;;		_scale
  8867 ;;		_isdigit
  8868 ;;		__tdiv_to_l_
  8869 ;;		__div_to_l_
  8870 ;;		___asftadd
  8871 ;;		___asftmul
  8872 ;;		___ftmul
  8873 ;;		___asftsub
  8874 ;;		___awdiv
  8875 ;;		___ftge
  8876 ;;		___ftneg
  8877 ;;		___fttol
  8878 ;;		___lldiv
  8879 ;;		___llmod
  8880 ;;		___lltoft
  8881 ;;		___lwmod
  8882 ;;		___wmul
  8883 ;; This function is called by:
  8884 ;;		_printRTC
  8885 ;;		_writeLong
  8886 ;;		_writeFloat
  8887 ;; This function uses a non-reentrant model
  8888 ;;
  8889                           
  8890                           	psect	text30
  8891  00001C                     __ptext30:
  8892                           	opt stack 0
  8893  00001C                     _sprintf:
  8894                           	opt stack 20
  8895                           
  8896                           ;doprnt.c: 494: va_list ap;
  8897                           ;doprnt.c: 499: signed char c;
  8898                           ;doprnt.c: 501: int width;
  8899                           ;doprnt.c: 504: int prec;
  8900                           ;doprnt.c: 508: unsigned short flag;
  8901                           ;doprnt.c: 515: char d;
  8902                           ;doprnt.c: 516: double fval, integ;
  8903                           ;doprnt.c: 517: int exp;
  8904                           ;doprnt.c: 518: double ival;
  8905                           ;doprnt.c: 519: union {
  8906                           ;doprnt.c: 520: unsigned long _val;
  8907                           ;doprnt.c: 521: struct {
  8908                           ;doprnt.c: 522: const char * _cp;
  8909                           ;doprnt.c: 523: unsigned _len;
  8910                           ;doprnt.c: 524: } _str;
  8911                           ;doprnt.c: 525: } _val;
  8912                           ;doprnt.c: 542: *ap = __va_start();
  8913                           
  8914                           ;incstack = 0
  8915                           ;incstack = 0
  8916  00001C  0E00               	movlw	high (?_sprintf+4)
  8917  00001E  0100               	movlb	0	; () banked
  8918  000020  0100               	movlb	0	; () banked
  8919  000022  6F75               	movwf	(sprintf@ap+1)& (0+255),b
  8920  000024  0E57               	movlw	low (?_sprintf+4)
  8921  000026  0100               	movlb	0	; () banked
  8922  000028  6F74               	movwf	sprintf@ap& (0+255),b
  8923                           
  8924                           ;doprnt.c: 545: while(c = *f++) {
  8925  00002A  EFB2  F007         	goto	i2l9129
  8926  00002E                     i2l8737:
  8927                           
  8928                           ; BSR set to: 0
  8929                           ;doprnt.c: 547: if(c != '%')
  8930  00002E  0100               	movlb	0	; () banked
  8931  000030  0100               	movlb	0	; () banked
  8932  000032  5181               	movf	sprintf@c& (0+255),w,b
  8933  000034  0A25               	xorlw	37
  8934  000036  B4D8               	btfsc	status,2,c
  8935  000038  D00B               	goto	i2l8743
  8936                           
  8937                           ; BSR set to: 0
  8938                           ;doprnt.c: 549: {
  8939                           ;doprnt.c: 550: ((*sp++ = (c)));
  8940  00003A  C053  FFD9         	movff	sprintf@sp,fsr2l
  8941  00003E  C054  FFDA         	movff	sprintf@sp+1,fsr2h
  8942  000042  0100               	movlb	0	; () banked
  8943  000044  C081  FFDF         	movff	sprintf@c,indf2
  8944                           
  8945                           ; BSR set to: 0
  8946  000048  4A53               	infsnz	sprintf@sp,f,c
  8947  00004A  2A54               	incf	sprintf@sp+1,f,c
  8948                           
  8949                           ;doprnt.c: 551: continue;
  8950  00004C  EFB2  F007         	goto	i2l9129
  8951  000050                     i2l8743:
  8952                           
  8953                           ; BSR set to: 0
  8954                           ;doprnt.c: 552: }
  8955                           ;doprnt.c: 555: width = 0;
  8956  000050  0E00               	movlw	0
  8957  000052  0100               	movlb	0	; () banked
  8958  000054  0100               	movlb	0	; () banked
  8959  000056  6F7E               	movwf	(sprintf@width+1)& (0+255),b
  8960  000058  0E00               	movlw	0
  8961  00005A  0100               	movlb	0	; () banked
  8962  00005C  6F7D               	movwf	sprintf@width& (0+255),b
  8963                           
  8964                           ;doprnt.c: 557: flag = 0;
  8965  00005E  0E00               	movlw	0
  8966  000060  0100               	movlb	0	; () banked
  8967  000062  0100               	movlb	0	; () banked
  8968  000064  6F79               	movwf	(sprintf@flag+1)& (0+255),b
  8969  000066  0E00               	movlw	0
  8970  000068  0100               	movlb	0	; () banked
  8971  00006A  6F78               	movwf	sprintf@flag& (0+255),b
  8972  00006C  D005               	goto	i2l8749
  8973  00006E                     i2l8745:
  8974                           
  8975                           ;doprnt.c: 589: flag |= 0x04;
  8976  00006E  0100               	movlb	0	; () banked
  8977  000070  0100               	movlb	0	; () banked
  8978  000072  8578               	bsf	sprintf@flag& (0+255),2,b
  8979                           
  8980                           ;doprnt.c: 590: f++;
  8981  000074  4A55               	infsnz	sprintf@f,f,c
  8982  000076  2A56               	incf	sprintf@f+1,f,c
  8983  000078                     i2l8749:
  8984  000078  C055  FFF6         	movff	sprintf@f,tblptrl
  8985  00007C  C056  FFF7         	movff	sprintf@f+1,tblptrh
  8986  000080  0008               	tblrd		*
  8987  000082  50F5               	movf	tablat,w,c
  8988                           
  8989                           ; Switch size 1, requested type "space"
  8990                           ; Number of cases is 1, Range of values is 48 to 48
  8991                           ; switch strategies available:
  8992                           ; Name         Instructions Cycles
  8993                           ; simple_byte            4     3 (average)
  8994                           ;	Chosen strategy is simple_byte
  8995  000084  0A30               	xorlw	48	; case 48
  8996  000086  B4D8               	btfsc	status,2,c
  8997  000088  D7F2               	goto	i2l8745
  8998                           
  8999                           ;doprnt.c: 606: if(isdigit((unsigned)*f)) {
  9000                           
  9001                           ;doprnt.c: 595: }
  9002                           
  9003                           ;doprnt.c: 594: break;
  9004  00008A  C055  FFF6         	movff	sprintf@f,tblptrl
  9005  00008E  C056  FFF7         	movff	sprintf@f+1,tblptrh
  9006  000092  0008               	tblrd		*
  9007  000094  CFF5 F001          	movff	tablat,?_isdigit
  9008  000098  ECE9  F024         	call	_isdigit	;wreg free
  9009  00009C  A0D8               	btfss	status,0,c
  9010  00009E  D03E               	goto	i2l8763
  9011                           
  9012                           ;doprnt.c: 607: width = 0;
  9013  0000A0  0E00               	movlw	0
  9014  0000A2  0100               	movlb	0	; () banked
  9015  0000A4  0100               	movlb	0	; () banked
  9016  0000A6  6F7E               	movwf	(sprintf@width+1)& (0+255),b
  9017  0000A8  0E00               	movlw	0
  9018  0000AA  0100               	movlb	0	; () banked
  9019  0000AC  6F7D               	movwf	sprintf@width& (0+255),b
  9020  0000AE                     i2l8755:
  9021                           
  9022                           ;doprnt.c: 609: width *= 10;
  9023  0000AE  C07D  F017         	movff	sprintf@width,?___wmul
  9024  0000B2  C07E  F018         	movff	sprintf@width+1,?___wmul+1
  9025  0000B6  0E00               	movlw	0
  9026  0000B8  6E1A               	movwf	?___wmul+3,c
  9027  0000BA  0E0A               	movlw	10
  9028  0000BC  6E19               	movwf	?___wmul+2,c
  9029  0000BE  EC75  F024         	call	___wmul	;wreg free
  9030  0000C2  C017  F07D         	movff	?___wmul,sprintf@width
  9031  0000C6  C018  F07E         	movff	?___wmul+1,sprintf@width+1
  9032                           
  9033                           ;doprnt.c: 610: width += *f++ - '0';
  9034  0000CA  C055  FFF6         	movff	sprintf@f,tblptrl
  9035  0000CE  C056  FFF7         	movff	sprintf@f+1,tblptrh
  9036  0000D2  0008               	tblrd		*
  9037  0000D4  CFF5 F060          	movff	tablat,??_sprintf
  9038  0000D8  0ED0               	movlw	208
  9039  0000DA  0100               	movlb	0	; () banked
  9040  0000DC  2560               	addwf	??_sprintf& (0+255),w,b
  9041  0000DE  0100               	movlb	0	; () banked
  9042  0000E0  6F61               	movwf	(??_sprintf+1)& (0+255),b
  9043  0000E2  0100               	movlb	0	; () banked
  9044  0000E4  0100               	movlb	0	; () banked
  9045  0000E6  6B62               	clrf	(??_sprintf+2)& (0+255),b
  9046  0000E8  0EFF               	movlw	255
  9047  0000EA  2362               	addwfc	(??_sprintf+2)& (0+255),f,b
  9048  0000EC  0100               	movlb	0	; () banked
  9049  0000EE  5161               	movf	(??_sprintf+1)& (0+255),w,b
  9050  0000F0  0100               	movlb	0	; () banked
  9051  0000F2  0100               	movlb	0	; () banked
  9052  0000F4  277D               	addwf	sprintf@width& (0+255),f,b
  9053  0000F6  0100               	movlb	0	; () banked
  9054  0000F8  5162               	movf	(??_sprintf+2)& (0+255),w,b
  9055  0000FA  0100               	movlb	0	; () banked
  9056  0000FC  0100               	movlb	0	; () banked
  9057  0000FE  237E               	addwfc	(sprintf@width+1)& (0+255),f,b
  9058                           
  9059                           ; BSR set to: 0
  9060  000100  4A55               	infsnz	sprintf@f,f,c
  9061  000102  2A56               	incf	sprintf@f+1,f,c
  9062                           
  9063                           ; BSR set to: 0
  9064                           ;doprnt.c: 611: } while(isdigit((unsigned)*f));
  9065  000104  C055  FFF6         	movff	sprintf@f,tblptrl
  9066  000108  C056  FFF7         	movff	sprintf@f+1,tblptrh
  9067  00010C  0008               	tblrd		*
  9068  00010E  CFF5 F001          	movff	tablat,?_isdigit
  9069  000112  ECE9  F024         	call	_isdigit	;wreg free
  9070  000116  A0D8               	btfss	status,0,c
  9071  000118  D01D               	goto	i2l8771
  9072  00011A  D7C9               	goto	i2l8755
  9073  00011C                     i2l8763:
  9074  00011C  C055  FFF6         	movff	sprintf@f,tblptrl
  9075  000120  C056  FFF7         	movff	sprintf@f+1,tblptrh
  9076  000124  0008               	tblrd		*
  9077  000126  50F5               	movf	tablat,w,c
  9078  000128  0A2A               	xorlw	42
  9079  00012A  A4D8               	btfss	status,2,c
  9080  00012C  D013               	goto	i2l8771
  9081                           
  9082                           ;doprnt.c: 614: width = (*(int *)__va_arg((*(int **)ap), (int)0));
  9083  00012E  C074  FFD9         	movff	sprintf@ap,fsr2l
  9084  000132  C075  FFDA         	movff	sprintf@ap+1,fsr2h
  9085  000136  0100               	movlb	0	; () banked
  9086  000138  CFDE F07D          	movff	postinc2,sprintf@width
  9087  00013C  0100               	movlb	0	; () banked
  9088  00013E  CFDD F07E          	movff	postdec2,sprintf@width+1
  9089                           
  9090                           ; BSR set to: 0
  9091  000142  0E02               	movlw	2
  9092  000144  0100               	movlb	0	; () banked
  9093  000146  0100               	movlb	0	; () banked
  9094  000148  2774               	addwf	sprintf@ap& (0+255),f,b
  9095  00014A  0E00               	movlw	0
  9096  00014C  0100               	movlb	0	; () banked
  9097  00014E  2375               	addwfc	(sprintf@ap+1)& (0+255),f,b
  9098                           
  9099                           ; BSR set to: 0
  9100                           ;doprnt.c: 615: f++;
  9101  000150  4A55               	infsnz	sprintf@f,f,c
  9102  000152  2A56               	incf	sprintf@f+1,f,c
  9103  000154                     i2l8771:
  9104                           
  9105                           ;doprnt.c: 617: }
  9106                           ;doprnt.c: 620: if(*f == '.') {
  9107  000154  C055  FFF6         	movff	sprintf@f,tblptrl
  9108  000158  C056  FFF7         	movff	sprintf@f+1,tblptrh
  9109  00015C  0008               	tblrd		*
  9110  00015E  50F5               	movf	tablat,w,c
  9111  000160  0A2E               	xorlw	46
  9112  000162  A4D8               	btfss	status,2,c
  9113  000164  D054               	goto	i2l8791
  9114                           
  9115                           ;doprnt.c: 621: flag |= 0x4000;
  9116  000166  0100               	movlb	0	; () banked
  9117  000168  0100               	movlb	0	; () banked
  9118  00016A  8D79               	bsf	(sprintf@flag+1)& (0+255),6,b
  9119                           
  9120                           ;doprnt.c: 622: f++;
  9121  00016C  4A55               	infsnz	sprintf@f,f,c
  9122  00016E  2A56               	incf	sprintf@f+1,f,c
  9123                           
  9124                           ; BSR set to: 0
  9125                           ;doprnt.c: 624: if(*f == '*') {
  9126  000170  C055  FFF6         	movff	sprintf@f,tblptrl
  9127  000174  C056  FFF7         	movff	sprintf@f+1,tblptrh
  9128  000178  0008               	tblrd		*
  9129  00017A  50F5               	movf	tablat,w,c
  9130  00017C  0A2A               	xorlw	42
  9131  00017E  A4D8               	btfss	status,2,c
  9132  000180  D014               	goto	i2l8783
  9133                           
  9134                           ; BSR set to: 0
  9135                           ;doprnt.c: 625: prec = (*(int *)__va_arg((*(int **)ap), (int)0));
  9136  000182  C074  FFD9         	movff	sprintf@ap,fsr2l
  9137  000186  C075  FFDA         	movff	sprintf@ap+1,fsr2h
  9138  00018A  0100               	movlb	0	; () banked
  9139  00018C  CFDE F07F          	movff	postinc2,sprintf@prec
  9140  000190  0100               	movlb	0	; () banked
  9141  000192  CFDD F080          	movff	postdec2,sprintf@prec+1
  9142                           
  9143                           ; BSR set to: 0
  9144  000196  0E02               	movlw	2
  9145  000198  0100               	movlb	0	; () banked
  9146  00019A  0100               	movlb	0	; () banked
  9147  00019C  2774               	addwf	sprintf@ap& (0+255),f,b
  9148  00019E  0E00               	movlw	0
  9149  0001A0  0100               	movlb	0	; () banked
  9150  0001A2  2375               	addwfc	(sprintf@ap+1)& (0+255),f,b
  9151                           
  9152                           ; BSR set to: 0
  9153                           ;doprnt.c: 626: f++;
  9154  0001A4  4A55               	infsnz	sprintf@f,f,c
  9155  0001A6  2A56               	incf	sprintf@f+1,f,c
  9156                           
  9157                           ;doprnt.c: 627: } else
  9158  0001A8  D12A               	goto	i2l8847
  9159  0001AA                     i2l8783:
  9160                           
  9161                           ; BSR set to: 0
  9162                           ;doprnt.c: 629: {
  9163                           ;doprnt.c: 630: prec = 0;
  9164  0001AA  0E00               	movlw	0
  9165  0001AC  0100               	movlb	0	; () banked
  9166  0001AE  0100               	movlb	0	; () banked
  9167  0001B0  6F80               	movwf	(sprintf@prec+1)& (0+255),b
  9168  0001B2  0E00               	movlw	0
  9169  0001B4  0100               	movlb	0	; () banked
  9170  0001B6  6F7F               	movwf	sprintf@prec& (0+255),b
  9171                           
  9172                           ;doprnt.c: 631: while(isdigit((unsigned)*f))
  9173  0001B8  D01E               	goto	i2l8789
  9174  0001BA                     i2l8785:
  9175                           
  9176                           ;doprnt.c: 632: prec = prec*10 + *f++ - '0';
  9177  0001BA  C07F  F017         	movff	sprintf@prec,?___wmul
  9178  0001BE  C080  F018         	movff	sprintf@prec+1,?___wmul+1
  9179  0001C2  0E00               	movlw	0
  9180  0001C4  6E1A               	movwf	?___wmul+3,c
  9181  0001C6  0E0A               	movlw	10
  9182  0001C8  6E19               	movwf	?___wmul+2,c
  9183  0001CA  EC75  F024         	call	___wmul	;wreg free
  9184  0001CE  C055  FFF6         	movff	sprintf@f,tblptrl
  9185  0001D2  C056  FFF7         	movff	sprintf@f+1,tblptrh
  9186  0001D6  0008               	tblrd		*
  9187  0001D8  50F5               	movf	tablat,w,c
  9188  0001DA  2617               	addwf	?___wmul,f,c
  9189  0001DC  0E00               	movlw	0
  9190  0001DE  2218               	addwfc	?___wmul+1,f,c
  9191  0001E0  0ED0               	movlw	208
  9192  0001E2  2417               	addwf	?___wmul,w,c
  9193  0001E4  0100               	movlb	0	; () banked
  9194  0001E6  0100               	movlb	0	; () banked
  9195  0001E8  6F7F               	movwf	sprintf@prec& (0+255),b
  9196  0001EA  0EFF               	movlw	255
  9197  0001EC  2018               	addwfc	?___wmul+1,w,c
  9198  0001EE  0100               	movlb	0	; () banked
  9199  0001F0  6F80               	movwf	(sprintf@prec+1)& (0+255),b
  9200                           
  9201                           ; BSR set to: 0
  9202  0001F2  4A55               	infsnz	sprintf@f,f,c
  9203  0001F4  2A56               	incf	sprintf@f+1,f,c
  9204  0001F6                     i2l8789:
  9205                           
  9206                           ; BSR set to: 0
  9207  0001F6  C055  FFF6         	movff	sprintf@f,tblptrl
  9208  0001FA  C056  FFF7         	movff	sprintf@f+1,tblptrh
  9209  0001FE  0008               	tblrd		*
  9210  000200  CFF5 F001          	movff	tablat,?_isdigit
  9211  000204  ECE9  F024         	call	_isdigit	;wreg free
  9212  000208  A0D8               	btfss	status,0,c
  9213  00020A  D0F9               	goto	i2l8847
  9214  00020C  D7D6               	goto	i2l8785
  9215  00020E                     i2l8791:
  9216                           
  9217                           ;doprnt.c: 635: prec = 0;
  9218  00020E  0E00               	movlw	0
  9219  000210  0100               	movlb	0	; () banked
  9220  000212  0100               	movlb	0	; () banked
  9221  000214  6F80               	movwf	(sprintf@prec+1)& (0+255),b
  9222  000216  0E00               	movlw	0
  9223  000218  0100               	movlb	0	; () banked
  9224  00021A  6F7F               	movwf	sprintf@prec& (0+255),b
  9225                           
  9226                           ; BSR set to: 0
  9227                           ;doprnt.c: 637: flag |= 0x1000;
  9228  00021C  0100               	movlb	0	; () banked
  9229  00021E  0100               	movlb	0	; () banked
  9230  000220  8979               	bsf	(sprintf@flag+1)& (0+255),4,b
  9231  000222  D0ED               	goto	i2l8847
  9232  000224                     i2l8795:
  9233                           
  9234                           ; BSR set to: 0
  9235                           ;doprnt.c: 652: flag |= 0x10;
  9236  000224  0100               	movlb	0	; () banked
  9237  000226  0100               	movlb	0	; () banked
  9238  000228  8978               	bsf	sprintf@flag& (0+255),4,b
  9239                           
  9240                           ;doprnt.c: 653: goto loop;
  9241  00022A  D0E9               	goto	i2l8847
  9242  00022C                     i2l8797:
  9243                           
  9244                           ; BSR set to: 0
  9245                           ;doprnt.c: 672: flag |= 0x400;
  9246  00022C  0100               	movlb	0	; () banked
  9247  00022E  0100               	movlb	0	; () banked
  9248  000230  8579               	bsf	(sprintf@flag+1)& (0+255),2,b
  9249                           
  9250                           ;doprnt.c: 673: break;
  9251  000232  D108               	goto	i2l8849
  9252  000234                     i2l8799:
  9253                           
  9254                           ; BSR set to: 0
  9255                           ;doprnt.c: 743: _val._str._cp = (*(const char * *)__va_arg((*(const char * **)ap), (cons
      +                          t char *)0));
  9256  000234  C074  FFD9         	movff	sprintf@ap,fsr2l
  9257  000238  C075  FFDA         	movff	sprintf@ap+1,fsr2h
  9258  00023C  0100               	movlb	0	; () banked
  9259  00023E  CFDE F082          	movff	postinc2,sprintf@_val
  9260  000242  0100               	movlb	0	; () banked
  9261  000244  CFDD F083          	movff	postdec2,sprintf@_val+1
  9262                           
  9263                           ; BSR set to: 0
  9264  000248  0E02               	movlw	2
  9265  00024A  0100               	movlb	0	; () banked
  9266  00024C  0100               	movlb	0	; () banked
  9267  00024E  2774               	addwf	sprintf@ap& (0+255),f,b
  9268  000250  0E00               	movlw	0
  9269  000252  0100               	movlb	0	; () banked
  9270  000254  2375               	addwfc	(sprintf@ap+1)& (0+255),f,b
  9271                           
  9272                           ; BSR set to: 0
  9273                           ;doprnt.c: 749: if(!_val._str._cp)
  9274  000256  0100               	movlb	0	; () banked
  9275  000258  0100               	movlb	0	; () banked
  9276  00025A  5183               	movf	(sprintf@_val+1)& (0+255),w,b
  9277  00025C  1182               	iorwf	sprintf@_val& (0+255),w,b
  9278  00025E  A4D8               	btfss	status,2,c
  9279  000260  D007               	goto	i2l606
  9280                           
  9281                           ; BSR set to: 0
  9282                           ;doprnt.c: 750: _val._str._cp = "(null)";
  9283  000262  0E7F               	movlw	high STR_18
  9284  000264  0100               	movlb	0	; () banked
  9285  000266  0100               	movlb	0	; () banked
  9286  000268  6F83               	movwf	(sprintf@_val+1)& (0+255),b
  9287  00026A  0EE8               	movlw	low STR_18
  9288  00026C  0100               	movlb	0	; () banked
  9289  00026E  6F82               	movwf	sprintf@_val& (0+255),b
  9290  000270                     i2l606:
  9291                           
  9292                           ; BSR set to: 0
  9293                           ;doprnt.c: 754: _val._str._len = 0;
  9294  000270  0E00               	movlw	0
  9295  000272  0100               	movlb	0	; () banked
  9296  000274  0100               	movlb	0	; () banked
  9297  000276  6F85               	movwf	(sprintf@_val+3)& (0+255),b
  9298  000278  0E00               	movlw	0
  9299  00027A  0100               	movlb	0	; () banked
  9300  00027C  6F84               	movwf	(sprintf@_val+2)& (0+255),b
  9301                           
  9302                           ;doprnt.c: 755: while(_val._str._cp[_val._str._len])
  9303  00027E  D004               	goto	i2l8809
  9304  000280                     i2l8807:
  9305                           
  9306                           ;doprnt.c: 756: _val._str._len++;
  9307  000280  0100               	movlb	0	; () banked
  9308  000282  0100               	movlb	0	; () banked
  9309  000284  4B84               	infsnz	(sprintf@_val+2)& (0+255),f,b
  9310  000286  2B85               	incf	(sprintf@_val+3)& (0+255),f,b
  9311  000288                     i2l8809:
  9312                           
  9313                           ; BSR set to: 0
  9314  000288  0100               	movlb	0	; () banked
  9315  00028A  C082  F060         	movff	sprintf@_val,??_sprintf
  9316  00028E  0100               	movlb	0	; () banked
  9317  000290  C083  F061         	movff	sprintf@_val+1,??_sprintf+1
  9318  000294  0100               	movlb	0	; () banked
  9319  000296  0100               	movlb	0	; () banked
  9320  000298  5184               	movf	(sprintf@_val+2)& (0+255),w,b
  9321  00029A  0100               	movlb	0	; () banked
  9322  00029C  2760               	addwf	??_sprintf& (0+255),f,b
  9323  00029E  0100               	movlb	0	; () banked
  9324  0002A0  0100               	movlb	0	; () banked
  9325  0002A2  5185               	movf	(sprintf@_val+3)& (0+255),w,b
  9326  0002A4  0100               	movlb	0	; () banked
  9327  0002A6  2361               	addwfc	(??_sprintf+1)& (0+255),f,b
  9328  0002A8  0100               	movlb	0	; () banked
  9329  0002AA  5160               	movf	??_sprintf& (0+255),w,b
  9330  0002AC  6EF6               	movwf	tblptrl,c
  9331  0002AE  6EE9               	movwf	fsr0l,c
  9332  0002B0  0E07               	movlw	(high __ramtop+-1)
  9333  0002B2  6EEA               	movwf	fsr0h,c
  9334  0002B4  0100               	movlb	0	; () banked
  9335  0002B6  5161               	movf	(??_sprintf+1)& (0+255),w,b
  9336  0002B8  64EA               	cpfsgt	fsr0h,c
  9337  0002BA  D003               	bra	i2u682_47
  9338  0002BC  6EEA               	movwf	fsr0h,c
  9339  0002BE  50EF               	movf	indf0,w,c
  9340  0002C0  D003               	bra	i2u682_40
  9341  0002C2                     i2u682_47:
  9342  0002C2  6EF7               	movwf	tblptrh,c
  9343  0002C4  0008               	tblrd		*
  9344  0002C6  50F5               	movf	tablat,w,c
  9345  0002C8                     i2u682_40:
  9346  0002C8  0900               	iorlw	0
  9347  0002CA  A4D8               	btfss	status,2,c
  9348  0002CC  D7D9               	goto	i2l8807
  9349  0002CE                     i2l8811:
  9350                           
  9351                           ;doprnt.c: 762: if(prec && prec < _val._str._len)
  9352  0002CE  0100               	movlb	0	; () banked
  9353  0002D0  0100               	movlb	0	; () banked
  9354  0002D2  5180               	movf	(sprintf@prec+1)& (0+255),w,b
  9355  0002D4  117F               	iorwf	sprintf@prec& (0+255),w,b
  9356  0002D6  B4D8               	btfsc	status,2,c
  9357  0002D8  D012               	goto	i2l8817
  9358                           
  9359                           ; BSR set to: 0
  9360  0002DA  0100               	movlb	0	; () banked
  9361  0002DC  0100               	movlb	0	; () banked
  9362  0002DE  5184               	movf	(sprintf@_val+2)& (0+255),w,b
  9363  0002E0  0100               	movlb	0	; () banked
  9364  0002E2  0100               	movlb	0	; () banked
  9365  0002E4  5D7F               	subwf	sprintf@prec& (0+255),w,b
  9366  0002E6  0100               	movlb	0	; () banked
  9367  0002E8  0100               	movlb	0	; () banked
  9368  0002EA  5185               	movf	(sprintf@_val+3)& (0+255),w,b
  9369  0002EC  0100               	movlb	0	; () banked
  9370  0002EE  0100               	movlb	0	; () banked
  9371  0002F0  5980               	subwfb	(sprintf@prec+1)& (0+255),w,b
  9372  0002F2  B0D8               	btfsc	status,0,c
  9373  0002F4  D004               	goto	i2l8817
  9374                           
  9375                           ; BSR set to: 0
  9376                           ;doprnt.c: 763: _val._str._len = prec;
  9377  0002F6  C07F  F084         	movff	sprintf@prec,sprintf@_val+2
  9378  0002FA  C080  F085         	movff	sprintf@prec+1,sprintf@_val+3
  9379  0002FE                     i2l8817:
  9380                           
  9381                           ; BSR set to: 0
  9382                           ;doprnt.c: 766: if(width > _val._str._len)
  9383  0002FE  0100               	movlb	0	; () banked
  9384  000300  0100               	movlb	0	; () banked
  9385  000302  517D               	movf	sprintf@width& (0+255),w,b
  9386  000304  0100               	movlb	0	; () banked
  9387  000306  0100               	movlb	0	; () banked
  9388  000308  5D84               	subwf	(sprintf@_val+2)& (0+255),w,b
  9389  00030A  0100               	movlb	0	; () banked
  9390  00030C  0100               	movlb	0	; () banked
  9391  00030E  517E               	movf	(sprintf@width+1)& (0+255),w,b
  9392  000310  0100               	movlb	0	; () banked
  9393  000312  0100               	movlb	0	; () banked
  9394  000314  5985               	subwfb	(sprintf@_val+3)& (0+255),w,b
  9395  000316  B0D8               	btfsc	status,0,c
  9396  000318  D00C               	goto	i2l8821
  9397                           
  9398                           ; BSR set to: 0
  9399                           ;doprnt.c: 767: width -= _val._str._len;
  9400  00031A  0100               	movlb	0	; () banked
  9401  00031C  EE20  F084         	lfsr	2,sprintf@_val+2
  9402  000320  50DE               	movf	postinc2,w,c
  9403  000322  0100               	movlb	0	; () banked
  9404  000324  0100               	movlb	0	; () banked
  9405  000326  5F7D               	subwf	sprintf@width& (0+255),f,b
  9406  000328  50DD               	movf	postdec2,w,c
  9407  00032A  0100               	movlb	0	; () banked
  9408  00032C  0100               	movlb	0	; () banked
  9409  00032E  5B7E               	subwfb	(sprintf@width+1)& (0+255),f,b
  9410  000330  D010               	goto	i2l8827
  9411  000332                     i2l8821:
  9412                           
  9413                           ; BSR set to: 0
  9414                           ;doprnt.c: 768: else
  9415                           ;doprnt.c: 769: width = 0;
  9416  000332  0E00               	movlw	0
  9417  000334  0100               	movlb	0	; () banked
  9418  000336  0100               	movlb	0	; () banked
  9419  000338  6F7E               	movwf	(sprintf@width+1)& (0+255),b
  9420  00033A  0E00               	movlw	0
  9421  00033C  0100               	movlb	0	; () banked
  9422  00033E  6F7D               	movwf	sprintf@width& (0+255),b
  9423  000340  D008               	goto	i2l8827
  9424  000342                     i2l8823:
  9425                           
  9426                           ; BSR set to: 0
  9427                           ;doprnt.c: 774: ((*sp++ = (' ')));
  9428  000342  C053  FFD9         	movff	sprintf@sp,fsr2l
  9429  000346  C054  FFDA         	movff	sprintf@sp+1,fsr2h
  9430  00034A  0E20               	movlw	32
  9431  00034C  6EDF               	movwf	indf2,c
  9432                           
  9433                           ; BSR set to: 0
  9434  00034E  4A53               	infsnz	sprintf@sp,f,c
  9435  000350  2A54               	incf	sprintf@sp+1,f,c
  9436  000352                     i2l8827:
  9437                           
  9438                           ; BSR set to: 0
  9439  000352  0100               	movlb	0	; () banked
  9440  000354  0100               	movlb	0	; () banked
  9441  000356  077D               	decf	sprintf@width& (0+255),f,b
  9442  000358  A0D8               	btfss	status,0,c
  9443  00035A  077E               	decf	(sprintf@width+1)& (0+255),f,b
  9444  00035C  0100               	movlb	0	; () banked
  9445  00035E  297D               	incf	sprintf@width& (0+255),w,b
  9446  000360  B4D8               	btfsc	status,2,c
  9447  000362  297E               	incf	(sprintf@width+1)& (0+255),w,b
  9448  000364  B4D8               	btfsc	status,2,c
  9449  000366  D01E               	goto	i2l8835
  9450  000368  D7EC               	goto	i2l8823
  9451  00036A                     i2l8829:
  9452                           
  9453                           ; BSR set to: 0
  9454                           ;doprnt.c: 777: ((*sp++ = (*_val._str._cp++)));
  9455  00036A  0100               	movlb	0	; () banked
  9456  00036C  C082  FFF6         	movff	sprintf@_val,tblptrl
  9457  000370  0100               	movlb	0	; () banked
  9458  000372  C083  FFF7         	movff	sprintf@_val+1,tblptrh
  9459  000376  6AF8               	clrf	tblptru,c
  9460  000378  C053  FFD9         	movff	sprintf@sp,fsr2l
  9461  00037C  C054  FFDA         	movff	sprintf@sp+1,fsr2h
  9462  000380  0E07               	movlw	(high __ramtop+-1)
  9463  000382  64F7               	cpfsgt	tblptrh,c
  9464  000384  D003               	bra	i2u688_47
  9465  000386  0008               	tblrd		*
  9466  000388  50F5               	movf	tablat,w,c
  9467  00038A  D005               	bra	i2u688_40
  9468  00038C                     i2u688_47:
  9469  00038C  CFF6 FFE9          	movff	tblptrl,fsr0l
  9470  000390  CFF7 FFEA          	movff	tblptrh,fsr0h
  9471  000394  50EF               	movf	indf0,w,c
  9472  000396                     i2u688_40:
  9473  000396  6EDF               	movwf	indf2,c
  9474  000398  0100               	movlb	0	; () banked
  9475  00039A  0100               	movlb	0	; () banked
  9476  00039C  4B82               	infsnz	sprintf@_val& (0+255),f,b
  9477  00039E  2B83               	incf	(sprintf@_val+1)& (0+255),f,b
  9478                           
  9479                           ; BSR set to: 0
  9480  0003A0  4A53               	infsnz	sprintf@sp,f,c
  9481  0003A2  2A54               	incf	sprintf@sp+1,f,c
  9482  0003A4                     i2l8835:
  9483                           
  9484                           ; BSR set to: 0
  9485  0003A4  0100               	movlb	0	; () banked
  9486  0003A6  0100               	movlb	0	; () banked
  9487  0003A8  0784               	decf	(sprintf@_val+2)& (0+255),f,b
  9488  0003AA  A0D8               	btfss	status,0,c
  9489  0003AC  0785               	decf	(sprintf@_val+3)& (0+255),f,b
  9490  0003AE  0100               	movlb	0	; () banked
  9491  0003B0  2984               	incf	(sprintf@_val+2)& (0+255),w,b
  9492  0003B2  B4D8               	btfsc	status,2,c
  9493  0003B4  2985               	incf	(sprintf@_val+3)& (0+255),w,b
  9494  0003B6  B4D8               	btfsc	status,2,c
  9495  0003B8  EFB2  F007         	goto	i2l9129
  9496  0003BC  D7D6               	goto	i2l8829
  9497  0003BE                     i2l8837:
  9498                           
  9499                           ; BSR set to: 0
  9500                           ;doprnt.c: 808: c = (*(int *)__va_arg((*(int **)ap), (int)0));
  9501  0003BE  C074  FFD9         	movff	sprintf@ap,fsr2l
  9502  0003C2  C075  FFDA         	movff	sprintf@ap+1,fsr2h
  9503  0003C6  50DF               	movf	indf2,w,c
  9504  0003C8  0100               	movlb	0	; () banked
  9505  0003CA  0100               	movlb	0	; () banked
  9506  0003CC  6F81               	movwf	sprintf@c& (0+255),b
  9507                           
  9508                           ; BSR set to: 0
  9509  0003CE  0E02               	movlw	2
  9510  0003D0  0100               	movlb	0	; () banked
  9511  0003D2  0100               	movlb	0	; () banked
  9512  0003D4  2774               	addwf	sprintf@ap& (0+255),f,b
  9513  0003D6  0E00               	movlw	0
  9514  0003D8  0100               	movlb	0	; () banked
  9515  0003DA  2375               	addwfc	(sprintf@ap+1)& (0+255),f,b
  9516  0003DC                     i2l8841:
  9517                           
  9518                           ; BSR set to: 0
  9519                           ;doprnt.c: 814: _val._str._cp = (char *)&c;
  9520  0003DC  0100               	movlb	0	; () banked
  9521  0003DE  0E00               	movlw	high sprintf@c
  9522  0003E0  0100               	movlb	0	; () banked
  9523  0003E2  0100               	movlb	0	; () banked
  9524  0003E4  6F83               	movwf	(sprintf@_val+1)& (0+255),b
  9525  0003E6  0100               	movlb	0	; () banked
  9526  0003E8  0E81               	movlw	low sprintf@c
  9527  0003EA  0100               	movlb	0	; () banked
  9528  0003EC  6F82               	movwf	sprintf@_val& (0+255),b
  9529                           
  9530                           ; BSR set to: 0
  9531                           ;doprnt.c: 815: _val._str._len = 1;
  9532  0003EE  0E00               	movlw	0
  9533  0003F0  0100               	movlb	0	; () banked
  9534  0003F2  0100               	movlb	0	; () banked
  9535  0003F4  6F85               	movwf	(sprintf@_val+3)& (0+255),b
  9536  0003F6  0E01               	movlw	1
  9537  0003F8  0100               	movlb	0	; () banked
  9538  0003FA  6F84               	movwf	(sprintf@_val+2)& (0+255),b
  9539                           
  9540                           ;doprnt.c: 816: goto dostring;
  9541  0003FC  D768               	goto	i2l8811
  9542  0003FE                     i2l8847:
  9543  0003FE  C055  FFF6         	movff	sprintf@f,tblptrl
  9544  000402  C056  FFF7         	movff	sprintf@f+1,tblptrh
  9545  000406  4A55               	infsnz	sprintf@f,f,c
  9546  000408  2A56               	incf	sprintf@f+1,f,c
  9547  00040A  0008               	tblrd		*
  9548  00040C  0100               	movlb	0	; () banked
  9549  00040E  CFF5 F081          	movff	tablat,sprintf@c
  9550  000412  0100               	movlb	0	; () banked
  9551  000414  5181               	movf	sprintf@c& (0+255),w,b
  9552                           
  9553                           ; Switch size 1, requested type "space"
  9554                           ; Number of cases is 7, Range of values is 0 to 115
  9555                           ; switch strategies available:
  9556                           ; Name         Instructions Cycles
  9557                           ; simple_byte           22    12 (average)
  9558                           ;	Chosen strategy is simple_byte
  9559  000416  0A00               	xorlw	0	; case 0
  9560  000418  B4D8               	btfsc	status,2,c
  9561  00041A  EFC0  F007         	goto	i2l9131
  9562  00041E  0A63               	xorlw	99	; case 99
  9563  000420  B4D8               	btfsc	status,2,c
  9564  000422  D7CD               	goto	i2l8837
  9565  000424  0A07               	xorlw	7	; case 100
  9566  000426  B4D8               	btfsc	status,2,c
  9567  000428  D00D               	goto	i2l8849
  9568  00042A  0A02               	xorlw	2	; case 102
  9569  00042C  B4D8               	btfsc	status,2,c
  9570  00042E  D6FE               	goto	i2l8797
  9571  000430  0A0F               	xorlw	15	; case 105
  9572  000432  B4D8               	btfsc	status,2,c
  9573  000434  D007               	goto	i2l8849
  9574  000436  0A05               	xorlw	5	; case 108
  9575  000438  B4D8               	btfsc	status,2,c
  9576  00043A  D6F4               	goto	i2l8795
  9577  00043C  0A1F               	xorlw	31	; case 115
  9578  00043E  B4D8               	btfsc	status,2,c
  9579  000440  D6F9               	goto	i2l8799
  9580  000442  D7CC               	goto	i2l8841
  9581  000444                     i2l8849:
  9582                           
  9583                           ; BSR set to: 0
  9584                           ;doprnt.c: 834: if(flag & (0x700)) {
  9585  000444  0E07               	movlw	7
  9586  000446  0100               	movlb	0	; () banked
  9587  000448  0100               	movlb	0	; () banked
  9588  00044A  1579               	andwf	(sprintf@flag+1)& (0+255),w,b
  9589  00044C  B4D8               	btfsc	status,2,c
  9590  00044E  D3A2               	goto	i2l622
  9591                           
  9592                           ; BSR set to: 0
  9593                           ;doprnt.c: 836: if(flag & 0x1000)
  9594  000450  0100               	movlb	0	; () banked
  9595  000452  0100               	movlb	0	; () banked
  9596  000454  A979               	btfss	(sprintf@flag+1)& (0+255),4,b
  9597  000456  D007               	goto	i2l8855
  9598                           
  9599                           ; BSR set to: 0
  9600                           ;doprnt.c: 838: prec = 6;
  9601  000458  0E00               	movlw	0
  9602  00045A  0100               	movlb	0	; () banked
  9603  00045C  0100               	movlb	0	; () banked
  9604  00045E  6F80               	movwf	(sprintf@prec+1)& (0+255),b
  9605  000460  0E06               	movlw	6
  9606  000462  0100               	movlb	0	; () banked
  9607  000464  6F7F               	movwf	sprintf@prec& (0+255),b
  9608  000466                     i2l8855:
  9609                           
  9610                           ; BSR set to: 0
  9611                           ;doprnt.c: 839: fval = (*(double *)__va_arg((*(double **)ap), (double)0));
  9612  000466  C074  FFD9         	movff	sprintf@ap,fsr2l
  9613  00046A  C075  FFDA         	movff	sprintf@ap+1,fsr2h
  9614  00046E  0100               	movlb	0	; () banked
  9615  000470  CFDE F07A          	movff	postinc2,sprintf@fval
  9616  000474  0100               	movlb	0	; () banked
  9617  000476  CFDE F07B          	movff	postinc2,sprintf@fval+1
  9618  00047A  0100               	movlb	0	; () banked
  9619  00047C  CFDD F07C          	movff	postdec2,sprintf@fval+2
  9620                           
  9621                           ; BSR set to: 0
  9622  000480  0E03               	movlw	3
  9623  000482  0100               	movlb	0	; () banked
  9624  000484  0100               	movlb	0	; () banked
  9625  000486  2774               	addwf	sprintf@ap& (0+255),f,b
  9626  000488  0E00               	movlw	0
  9627  00048A  0100               	movlb	0	; () banked
  9628  00048C  2375               	addwfc	(sprintf@ap+1)& (0+255),f,b
  9629                           
  9630                           ; BSR set to: 0
  9631                           ;doprnt.c: 840: if(fval < 0.0) {
  9632  00048E  0100               	movlb	0	; () banked
  9633  000490  0100               	movlb	0	; () banked
  9634  000492  517C               	movf	(sprintf@fval+2)& (0+255),w,b
  9635  000494  0A80               	xorlw	128
  9636  000496  0F80               	addlw	128
  9637  000498  E107               	bnz	i2u692_45
  9638  00049A  0E00               	movlw	0
  9639  00049C  0100               	movlb	0	; () banked
  9640  00049E  5D7B               	subwf	(sprintf@fval+1)& (0+255),w,b
  9641  0004A0  E103               	bnz	i2u692_45
  9642  0004A2  0E00               	movlw	0
  9643  0004A4  0100               	movlb	0	; () banked
  9644  0004A6  5D7A               	subwf	sprintf@fval& (0+255),w,b
  9645  0004A8                     i2u692_45:
  9646  0004A8  B0D8               	btfsc	status,0,c
  9647  0004AA  D012               	goto	i2l8865
  9648                           
  9649                           ; BSR set to: 0
  9650                           ;doprnt.c: 841: fval = -fval;
  9651  0004AC  C07A  F001         	movff	sprintf@fval,?___ftneg
  9652  0004B0  C07B  F002         	movff	sprintf@fval+1,?___ftneg+1
  9653  0004B4  C07C  F003         	movff	sprintf@fval+2,?___ftneg+2
  9654  0004B8  ECD6  F024         	call	___ftneg	;wreg free
  9655  0004BC  C003  F07C         	movff	?___ftneg+2,sprintf@fval+2
  9656  0004C0  C002  F07B         	movff	?___ftneg+1,sprintf@fval+1
  9657  0004C4  C001  F07A         	movff	?___ftneg,sprintf@fval
  9658                           
  9659                           ;doprnt.c: 842: flag |= 0x03;
  9660  0004C8  0E03               	movlw	3
  9661  0004CA  0100               	movlb	0	; () banked
  9662  0004CC  0100               	movlb	0	; () banked
  9663  0004CE  1378               	iorwf	sprintf@flag& (0+255),f,b
  9664  0004D0                     i2l8865:
  9665                           
  9666                           ; BSR set to: 0
  9667                           ;doprnt.c: 843: }
  9668                           ;doprnt.c: 844: exp = 0;
  9669  0004D0  0E00               	movlw	0
  9670  0004D2  0100               	movlb	0	; () banked
  9671  0004D4  0100               	movlb	0	; () banked
  9672  0004D6  6F77               	movwf	(sprintf@exp+1)& (0+255),b
  9673  0004D8  0E00               	movlw	0
  9674  0004DA  0100               	movlb	0	; () banked
  9675  0004DC  6F76               	movwf	sprintf@exp& (0+255),b
  9676                           
  9677                           ; BSR set to: 0
  9678                           ;doprnt.c: 845: if( fval!=0) {
  9679  0004DE  0E7F               	movlw	127
  9680  0004E0  0100               	movlb	0	; () banked
  9681  0004E2  0100               	movlb	0	; () banked
  9682  0004E4  157C               	andwf	(sprintf@fval+2)& (0+255),w,b
  9683  0004E6  0100               	movlb	0	; () banked
  9684  0004E8  117B               	iorwf	(sprintf@fval+1)& (0+255),w,b
  9685  0004EA  0100               	movlb	0	; () banked
  9686  0004EC  117A               	iorwf	sprintf@fval& (0+255),w,b
  9687  0004EE  B4D8               	btfsc	status,2,c
  9688  0004F0  D096               	goto	i2l8893
  9689                           
  9690                           ; BSR set to: 0
  9691                           ;doprnt.c: 846: (void)(*(&exp) = ((*(unsigned long *)&fval >> 15) & 255) - 126);
  9692  0004F2  0E82               	movlw	130
  9693  0004F4  0100               	movlb	0	; () banked
  9694  0004F6  6F60               	movwf	??_sprintf& (0+255),b
  9695  0004F8  0EFF               	movlw	255
  9696  0004FA  6F61               	movwf	(??_sprintf+1)& (0+255),b
  9697  0004FC  0100               	movlb	0	; () banked
  9698  0004FE  C07A  F062         	movff	sprintf@fval,??_sprintf+2
  9699  000502  0100               	movlb	0	; () banked
  9700  000504  C07B  F063         	movff	sprintf@fval+1,??_sprintf+3
  9701  000508  0100               	movlb	0	; () banked
  9702  00050A  C07C  F064         	movff	sprintf@fval+2,??_sprintf+4
  9703  00050E  0100               	movlb	0	; () banked
  9704  000510  C07D  F065         	movff	sprintf@fval+3,??_sprintf+5
  9705  000514  0E10               	movlw	16
  9706  000516  D006               	goto	i2u694_40
  9707  000518                     i2u694_45:
  9708  000518  0100               	movlb	0	; () banked
  9709  00051A  90D8               	bcf	status,0,c
  9710  00051C  3365               	rrcf	(??_sprintf+5)& (0+255),f,b
  9711  00051E  3364               	rrcf	(??_sprintf+4)& (0+255),f,b
  9712  000520  3363               	rrcf	(??_sprintf+3)& (0+255),f,b
  9713  000522  3362               	rrcf	(??_sprintf+2)& (0+255),f,b
  9714  000524                     i2u694_40:
  9715  000524  2EE8               	decfsz	wreg,f,c
  9716  000526  D7F8               	goto	i2u694_45
  9717  000528  0100               	movlb	0	; () banked
  9718  00052A  5162               	movf	(??_sprintf+2)& (0+255),w,b
  9719  00052C  0100               	movlb	0	; () banked
  9720  00052E  2560               	addwf	??_sprintf& (0+255),w,b
  9721  000530  0100               	movlb	0	; () banked
  9722  000532  0100               	movlb	0	; () banked
  9723  000534  6F76               	movwf	sprintf@exp& (0+255),b
  9724  000536  0100               	movlb	0	; () banked
  9725  000538  0100               	movlb	0	; () banked
  9726  00053A  0E00               	movlw	0
  9727  00053C  2161               	addwfc	(??_sprintf+1)& (0+255),w,b
  9728  00053E  6F77               	movwf	(sprintf@exp+1)& (0+255),b
  9729                           
  9730                           ; BSR set to: 0
  9731                           ;doprnt.c: 847: exp--;
  9732  000540  0100               	movlb	0	; () banked
  9733  000542  0100               	movlb	0	; () banked
  9734  000544  0776               	decf	sprintf@exp& (0+255),f,b
  9735  000546  A0D8               	btfss	status,0,c
  9736  000548  0777               	decf	(sprintf@exp+1)& (0+255),f,b
  9737                           
  9738                           ; BSR set to: 0
  9739                           ;doprnt.c: 848: exp *= 3;
  9740  00054A  C076  F017         	movff	sprintf@exp,?___wmul
  9741  00054E  C077  F018         	movff	sprintf@exp+1,?___wmul+1
  9742  000552  0E00               	movlw	0
  9743  000554  6E1A               	movwf	?___wmul+3,c
  9744  000556  0E03               	movlw	3
  9745  000558  6E19               	movwf	?___wmul+2,c
  9746  00055A  EC75  F024         	call	___wmul	;wreg free
  9747  00055E  C017  F076         	movff	?___wmul,sprintf@exp
  9748  000562  C018  F077         	movff	?___wmul+1,sprintf@exp+1
  9749                           
  9750                           ;doprnt.c: 849: exp /= 10;
  9751  000566  C076  F00A         	movff	sprintf@exp,?___awdiv
  9752  00056A  C077  F00B         	movff	sprintf@exp+1,?___awdiv+1
  9753  00056E  0E00               	movlw	0
  9754  000570  6E0D               	movwf	?___awdiv+3,c
  9755  000572  0E0A               	movlw	10
  9756  000574  6E0C               	movwf	?___awdiv+2,c
  9757  000576  EC7C  F020         	call	___awdiv	;wreg free
  9758  00057A  C00A  F076         	movff	?___awdiv,sprintf@exp
  9759  00057E  C00B  F077         	movff	?___awdiv+1,sprintf@exp+1
  9760                           
  9761                           ;doprnt.c: 850: if(exp < 0)
  9762  000582  0100               	movlb	0	; () banked
  9763  000584  0100               	movlb	0	; () banked
  9764  000586  AF77               	btfss	(sprintf@exp+1)& (0+255),7,b
  9765  000588  D005               	goto	i2l8881
  9766                           
  9767                           ; BSR set to: 0
  9768                           ;doprnt.c: 851: exp--;
  9769  00058A  0100               	movlb	0	; () banked
  9770  00058C  0100               	movlb	0	; () banked
  9771  00058E  0776               	decf	sprintf@exp& (0+255),f,b
  9772  000590  A0D8               	btfss	status,0,c
  9773  000592  0777               	decf	(sprintf@exp+1)& (0+255),f,b
  9774  000594                     i2l8881:
  9775                           
  9776                           ; BSR set to: 0
  9777                           ;doprnt.c: 855: integ = scale(-exp);
  9778  000594  0100               	movlb	0	; () banked
  9779  000596  0100               	movlb	0	; () banked
  9780  000598  5176               	movf	sprintf@exp& (0+255),w,b
  9781  00059A  0800               	sublw	0
  9782  00059C  6E3F               	movwf	?_scale,c
  9783  00059E  EC33  F012         	call	_scale	;wreg free
  9784  0005A2  C041  F073         	movff	?_scale+2,sprintf@integ+2
  9785  0005A6  C040  F072         	movff	?_scale+1,sprintf@integ+1
  9786  0005AA  C03F  F071         	movff	?_scale,sprintf@integ
  9787                           
  9788                           ;doprnt.c: 856: integ *= fval;
  9789  0005AE  0100               	movlb	0	; () banked
  9790  0005B0  0E00               	movlw	high sprintf@integ
  9791  0005B2  6E40               	movwf	?___asftmul+1,c
  9792  0005B4  0100               	movlb	0	; () banked
  9793  0005B6  0E71               	movlw	low sprintf@integ
  9794  0005B8  6E3F               	movwf	?___asftmul,c
  9795  0005BA  C07A  F041         	movff	sprintf@fval,?___asftmul+2
  9796  0005BE  C07B  F042         	movff	sprintf@fval+1,?___asftmul+3
  9797  0005C2  C07C  F043         	movff	sprintf@fval+2,?___asftmul+4
  9798  0005C6  EC1C  F024         	call	___asftmul	;wreg free
  9799                           
  9800                           ;doprnt.c: 857: if(integ < 1.0)
  9801  0005CA  C071  F001         	movff	sprintf@integ,?___ftge
  9802  0005CE  C072  F002         	movff	sprintf@integ+1,?___ftge+1
  9803  0005D2  C073  F003         	movff	sprintf@integ+2,?___ftge+2
  9804  0005D6  0E00               	movlw	0
  9805  0005D8  6E04               	movwf	?___ftge+3,c
  9806  0005DA  0E80               	movlw	128
  9807  0005DC  6E05               	movwf	?___ftge+4,c
  9808  0005DE  0E3F               	movlw	63
  9809  0005E0  6E06               	movwf	?___ftge+5,c
  9810  0005E2  EC34  F020         	call	___ftge	;wreg free
  9811  0005E6  B0D8               	btfsc	status,0,c
  9812  0005E8  D006               	goto	i2l8889
  9813                           
  9814                           ;doprnt.c: 858: exp--;
  9815  0005EA  0100               	movlb	0	; () banked
  9816  0005EC  0100               	movlb	0	; () banked
  9817  0005EE  0776               	decf	sprintf@exp& (0+255),f,b
  9818  0005F0  A0D8               	btfss	status,0,c
  9819  0005F2  0777               	decf	(sprintf@exp+1)& (0+255),f,b
  9820  0005F4  D014               	goto	i2l8893
  9821  0005F6                     i2l8889:
  9822                           
  9823                           ;doprnt.c: 859: else if(integ >= 10.0)
  9824  0005F6  C071  F001         	movff	sprintf@integ,?___ftge
  9825  0005FA  C072  F002         	movff	sprintf@integ+1,?___ftge+1
  9826  0005FE  C073  F003         	movff	sprintf@integ+2,?___ftge+2
  9827  000602  0E00               	movlw	0
  9828  000604  6E04               	movwf	?___ftge+3,c
  9829  000606  0E20               	movlw	32
  9830  000608  6E05               	movwf	?___ftge+4,c
  9831  00060A  0E41               	movlw	65
  9832  00060C  6E06               	movwf	?___ftge+5,c
  9833  00060E  EC34  F020         	call	___ftge	;wreg free
  9834  000612  A0D8               	btfss	status,0,c
  9835  000614  D004               	goto	i2l8893
  9836                           
  9837                           ;doprnt.c: 860: exp++;
  9838  000616  0100               	movlb	0	; () banked
  9839  000618  0100               	movlb	0	; () banked
  9840  00061A  4B76               	infsnz	sprintf@exp& (0+255),f,b
  9841  00061C  2B77               	incf	(sprintf@exp+1)& (0+255),f,b
  9842  00061E                     i2l8893:
  9843                           
  9844                           ;doprnt.c: 861: }
  9845                           ;doprnt.c: 1121: if(prec <= 12)
  9846  00061E  0100               	movlb	0	; () banked
  9847  000620  0100               	movlb	0	; () banked
  9848  000622  5180               	movf	(sprintf@prec+1)& (0+255),w,b
  9849  000624  0A80               	xorlw	128
  9850  000626  0F80               	addlw	-128
  9851  000628  0E0D               	movlw	13
  9852  00062A  B4D8               	btfsc	status,2,c
  9853  00062C  5D7F               	subwf	sprintf@prec& (0+255),w,b
  9854  00062E  B0D8               	btfsc	status,0,c
  9855  000630  D012               	goto	i2l8897
  9856                           
  9857                           ; BSR set to: 0
  9858                           ;doprnt.c: 1122: fval += fround(prec);
  9859  000632  0100               	movlb	0	; () banked
  9860  000634  0E00               	movlw	high sprintf@fval
  9861  000636  6E4F               	movwf	?___asftadd+1,c
  9862  000638  0100               	movlb	0	; () banked
  9863  00063A  0E7A               	movlw	low sprintf@fval
  9864  00063C  6E4E               	movwf	?___asftadd,c
  9865  00063E  C07F  F03F         	movff	sprintf@prec,?_fround
  9866  000642  EC5B  F014         	call	_fround	;wreg free
  9867  000646  C041  F052         	movff	?_fround+2,?___asftadd+4
  9868  00064A  C040  F051         	movff	?_fround+1,?___asftadd+3
  9869  00064E  C03F  F050         	movff	?_fround,?___asftadd+2
  9870  000652  EC3A  F024         	call	___asftadd	;wreg free
  9871  000656                     i2l8897:
  9872                           
  9873                           ;doprnt.c: 1125: if((exp > 9)||(fval != 0 && (unsigned long)fval == 0 && exp > 1)) {
  9874  000656  0100               	movlb	0	; () banked
  9875  000658  0100               	movlb	0	; () banked
  9876  00065A  5177               	movf	(sprintf@exp+1)& (0+255),w,b
  9877  00065C  0A80               	xorlw	128
  9878  00065E  0F80               	addlw	-128
  9879  000660  0E0A               	movlw	10
  9880  000662  B4D8               	btfsc	status,2,c
  9881  000664  5D76               	subwf	sprintf@exp& (0+255),w,b
  9882  000666  B0D8               	btfsc	status,0,c
  9883  000668  D022               	goto	i2l8905
  9884                           
  9885                           ; BSR set to: 0
  9886  00066A  0E7F               	movlw	127
  9887  00066C  0100               	movlb	0	; () banked
  9888  00066E  0100               	movlb	0	; () banked
  9889  000670  157C               	andwf	(sprintf@fval+2)& (0+255),w,b
  9890  000672  0100               	movlb	0	; () banked
  9891  000674  117B               	iorwf	(sprintf@fval+1)& (0+255),w,b
  9892  000676  0100               	movlb	0	; () banked
  9893  000678  117A               	iorwf	sprintf@fval& (0+255),w,b
  9894  00067A  B4D8               	btfsc	status,2,c
  9895  00067C  D067               	goto	i2l8921
  9896                           
  9897                           ; BSR set to: 0
  9898  00067E  C07A  F01F         	movff	sprintf@fval,?___fttol
  9899  000682  C07B  F020         	movff	sprintf@fval+1,?___fttol+1
  9900  000686  C07C  F021         	movff	sprintf@fval+2,?___fttol+2
  9901  00068A  EC24  F01D         	call	___fttol	;wreg free
  9902  00068E  5022               	movf	?___fttol+3,w,c
  9903  000690  101F               	iorwf	?___fttol,w,c
  9904  000692  1020               	iorwf	?___fttol+1,w,c
  9905  000694  1021               	iorwf	?___fttol+2,w,c
  9906  000696  A4D8               	btfss	status,2,c
  9907  000698  D059               	goto	i2l8921
  9908  00069A  0100               	movlb	0	; () banked
  9909  00069C  0100               	movlb	0	; () banked
  9910  00069E  5177               	movf	(sprintf@exp+1)& (0+255),w,b
  9911  0006A0  0A80               	xorlw	128
  9912  0006A2  0F80               	addlw	-128
  9913  0006A4  0E02               	movlw	2
  9914  0006A6  B4D8               	btfsc	status,2,c
  9915  0006A8  5D76               	subwf	sprintf@exp& (0+255),w,b
  9916  0006AA  A0D8               	btfss	status,0,c
  9917  0006AC  D04F               	goto	i2l8921
  9918  0006AE                     i2l8905:
  9919                           
  9920                           ; BSR set to: 0
  9921                           ;doprnt.c: 1129: if(integ < 4.294967296){
  9922  0006AE  C071  F001         	movff	sprintf@integ,?___ftge
  9923  0006B2  C072  F002         	movff	sprintf@integ+1,?___ftge+1
  9924  0006B6  C073  F003         	movff	sprintf@integ+2,?___ftge+2
  9925  0006BA  0E70               	movlw	112
  9926  0006BC  6E04               	movwf	?___ftge+3,c
  9927  0006BE  0E89               	movlw	137
  9928  0006C0  6E05               	movwf	?___ftge+4,c
  9929  0006C2  0E40               	movlw	64
  9930  0006C4  6E06               	movwf	?___ftge+5,c
  9931  0006C6  EC34  F020         	call	___ftge	;wreg free
  9932  0006CA  B0D8               	btfsc	status,0,c
  9933  0006CC  D003               	goto	i2l8909
  9934                           
  9935                           ;doprnt.c: 1130: exp -= (sizeof dpowers/sizeof dpowers[0])-1;
  9936  0006CE  0100               	movlb	0	; () banked
  9937  0006D0  0EF7               	movlw	247
  9938  0006D2  D002               	goto	L12
  9939  0006D4                     i2l8909:
  9940                           
  9941                           ;doprnt.c: 1132: exp -= (sizeof dpowers/sizeof dpowers[0])-2;
  9942  0006D4  0100               	movlb	0	; () banked
  9943  0006D6  0EF8               	movlw	248
  9944  0006D8                     L12:
  9945  0006D8  0100               	movlb	0	; () banked
  9946  0006DA  2776               	addwf	sprintf@exp& (0+255),f,b
  9947  0006DC  0EFF               	movlw	255
  9948  0006DE  0100               	movlb	0	; () banked
  9949  0006E0  2377               	addwfc	(sprintf@exp+1)& (0+255),f,b
  9950                           
  9951                           ; BSR set to: 0
  9952                           ;doprnt.c: 1133: }
  9953                           ;doprnt.c: 1134: integ = scale(exp);
  9954                           
  9955                           ; BSR set to: 0
  9956  0006E2  C076  F03F         	movff	sprintf@exp,?_scale
  9957  0006E6  EC33  F012         	call	_scale	;wreg free
  9958  0006EA  C041  F073         	movff	?_scale+2,sprintf@integ+2
  9959  0006EE  C040  F072         	movff	?_scale+1,sprintf@integ+1
  9960  0006F2  C03F  F071         	movff	?_scale,sprintf@integ
  9961                           
  9962                           ;doprnt.c: 1135: _val._val = ((sizeof(double)== 3) ? _tdiv_to_l_(fval,integ) : _div_to_l
      +                          _(fval,integ));
  9963  0006F6  C07A  F001         	movff	sprintf@fval,?__tdiv_to_l_
  9964  0006FA  C07B  F002         	movff	sprintf@fval+1,?__tdiv_to_l_+1
  9965  0006FE  C07C  F003         	movff	sprintf@fval+2,?__tdiv_to_l_+2
  9966  000702  C071  F004         	movff	sprintf@integ,?__tdiv_to_l_+3
  9967  000706  C072  F005         	movff	sprintf@integ+1,?__tdiv_to_l_+4
  9968  00070A  C073  F006         	movff	sprintf@integ+2,?__tdiv_to_l_+5
  9969  00070E  ECA7  F01A         	call	__tdiv_to_l_	;wreg free
  9970  000712  C004  F06C         	movff	?__tdiv_to_l_+3,_sprintf$663+3
  9971  000716  C003  F06B         	movff	?__tdiv_to_l_+2,_sprintf$663+2
  9972  00071A  C002  F06A         	movff	?__tdiv_to_l_+1,_sprintf$663+1
  9973  00071E  C001  F069         	movff	?__tdiv_to_l_,_sprintf$663
  9974  000722  C069  F082         	movff	_sprintf$663,sprintf@_val
  9975  000726  C06A  F083         	movff	_sprintf$663+1,sprintf@_val+1
  9976  00072A  C06B  F084         	movff	_sprintf$663+2,sprintf@_val+2
  9977  00072E  C06C  F085         	movff	_sprintf$663+3,sprintf@_val+3
  9978                           
  9979                           ;doprnt.c: 1138: fval = 0.0;
  9980  000732  0E00               	movlw	0
  9981  000734  0100               	movlb	0	; () banked
  9982  000736  0100               	movlb	0	; () banked
  9983  000738  6F7A               	movwf	sprintf@fval& (0+255),b
  9984  00073A  0E00               	movlw	0
  9985  00073C  0100               	movlb	0	; () banked
  9986  00073E  0100               	movlb	0	; () banked
  9987  000740  6F7B               	movwf	(sprintf@fval+1)& (0+255),b
  9988  000742  0E00               	movlw	0
  9989  000744  0100               	movlb	0	; () banked
  9990  000746  0100               	movlb	0	; () banked
  9991  000748  6F7C               	movwf	(sprintf@fval+2)& (0+255),b
  9992                           
  9993                           ;doprnt.c: 1139: } else {
  9994  00074A  D02F               	goto	i2l8927
  9995  00074C                     i2l8921:
  9996                           
  9997                           ;doprnt.c: 1140: _val._val = (unsigned long)fval;
  9998  00074C  C07A  F01F         	movff	sprintf@fval,?___fttol
  9999  000750  C07B  F020         	movff	sprintf@fval+1,?___fttol+1
 10000  000754  C07C  F021         	movff	sprintf@fval+2,?___fttol+2
 10001  000758  EC24  F01D         	call	___fttol	;wreg free
 10002  00075C  C022  F085         	movff	?___fttol+3,sprintf@_val+3
 10003  000760  C021  F084         	movff	?___fttol+2,sprintf@_val+2
 10004  000764  C020  F083         	movff	?___fttol+1,sprintf@_val+1
 10005  000768  C01F  F082         	movff	?___fttol,sprintf@_val
 10006                           
 10007                           ;doprnt.c: 1141: fval -= (double)_val._val;
 10008  00076C  0100               	movlb	0	; () banked
 10009  00076E  0E00               	movlw	high sprintf@fval
 10010  000770  6E1E               	movwf	?___asftsub+1,c
 10011  000772  0100               	movlb	0	; () banked
 10012  000774  0E7A               	movlw	low sprintf@fval
 10013  000776  6E1D               	movwf	?___asftsub,c
 10014  000778  C082  F009         	movff	sprintf@_val,?___lltoft
 10015  00077C  C083  F00A         	movff	sprintf@_val+1,?___lltoft+1
 10016  000780  C084  F00B         	movff	sprintf@_val+2,?___lltoft+2
 10017  000784  C085  F00C         	movff	sprintf@_val+3,?___lltoft+3
 10018  000788  EC0E  F023         	call	___lltoft	;wreg free
 10019  00078C  C00B  F021         	movff	?___lltoft+2,?___asftsub+4
 10020  000790  C00A  F020         	movff	?___lltoft+1,?___asftsub+3
 10021  000794  C009  F01F         	movff	?___lltoft,?___asftsub+2
 10022  000798  ECFE  F023         	call	___asftsub	;wreg free
 10023                           
 10024                           ;doprnt.c: 1142: exp = 0;
 10025  00079C  0E00               	movlw	0
 10026  00079E  0100               	movlb	0	; () banked
 10027  0007A0  0100               	movlb	0	; () banked
 10028  0007A2  6F77               	movwf	(sprintf@exp+1)& (0+255),b
 10029  0007A4  0E00               	movlw	0
 10030  0007A6  0100               	movlb	0	; () banked
 10031  0007A8  6F76               	movwf	sprintf@exp& (0+255),b
 10032  0007AA                     i2l8927:
 10033                           
 10034                           ; BSR set to: 0
 10035                           ;doprnt.c: 1143: }
 10036                           ;doprnt.c: 1145: for(c = 1 ; c != (sizeof dpowers/sizeof dpowers[0]) ; c++)
 10037  0007AA  0100               	movlb	0	; () banked
 10038  0007AC  6F60               	movwf	??_sprintf& (0+255),b
 10039  0007AE  0E01               	movlw	1
 10040  0007B0  0100               	movlb	0	; () banked
 10041  0007B2  0100               	movlb	0	; () banked
 10042  0007B4  6F81               	movwf	sprintf@c& (0+255),b
 10043  0007B6  0100               	movlb	0	; () banked
 10044  0007B8  5160               	movf	??_sprintf& (0+255),w,b
 10045  0007BA                     
 10046                           ; BSR set to: 0
 10047  0007BA  0100               	movlb	0	; () banked
 10048  0007BC  0100               	movlb	0	; () banked
 10049  0007BE  5181               	movf	sprintf@c& (0+255),w,b
 10050  0007C0  0A0A               	xorlw	10
 10051  0007C2  B4D8               	btfsc	status,2,c
 10052  0007C4  D021               	goto	i2l8941
 10053                           
 10054                           ; BSR set to: 0
 10055                           ;doprnt.c: 1146: if(_val._val < dpowers[c])
 10056                           
 10057                           ; BSR set to: 0
 10058                           
 10059                           ; BSR set to: 0
 10060  0007C6  0100               	movlb	0	; () banked
 10061  0007C8  0100               	movlb	0	; () banked
 10062  0007CA  5181               	movf	sprintf@c& (0+255),w,b
 10063  0007CC  0D04               	mullw	4
 10064  0007CE  0EE3               	movlw	low _dpowers
 10065  0007D0  24F3               	addwf	prodl,w,c
 10066  0007D2  6EF6               	movwf	tblptrl,c
 10067  0007D4  0E7E               	movlw	high _dpowers
 10068  0007D6  20F4               	addwfc	prodh,w,c
 10069  0007D8  6EF7               	movwf	tblptrh,c
 10070  0007DA  0009               	tblrd		*+
 10071  0007DC  50F5               	movf	tablat,w,c
 10072  0007DE  0100               	movlb	0	; () banked
 10073  0007E0  0100               	movlb	0	; () banked
 10074  0007E2  5D82               	subwf	sprintf@_val& (0+255),w,b
 10075  0007E4  0009               	tblrd		*+
 10076  0007E6  50F5               	movf	tablat,w,c
 10077  0007E8  0100               	movlb	0	; () banked
 10078  0007EA  5983               	subwfb	(sprintf@_val+1)& (0+255),w,b
 10079  0007EC  0009               	tblrd		*+
 10080  0007EE  50F5               	movf	tablat,w,c
 10081  0007F0  0100               	movlb	0	; () banked
 10082  0007F2  5984               	subwfb	(sprintf@_val+2)& (0+255),w,b
 10083  0007F4  0009               	tblrd		*+
 10084  0007F6  50F5               	movf	tablat,w,c
 10085  0007F8  0100               	movlb	0	; () banked
 10086  0007FA  5985               	subwfb	(sprintf@_val+3)& (0+255),w,b
 10087  0007FC  A0D8               	btfss	status,0,c
 10088  0007FE  D004               	goto	i2l8941
 10089                           
 10090                           ; BSR set to: 0
 10091                           
 10092                           ; BSR set to: 0
 10093                           
 10094                           ; BSR set to: 0
 10095                           ;doprnt.c: 1147: break;
 10096  000800  0100               	movlb	0	; () banked
 10097  000802  0100               	movlb	0	; () banked
 10098  000804  2B81               	incf	sprintf@c& (0+255),f,b
 10099  000806  D7D9               	goto	L13
 10100  000808                     i2l8941:
 10101                           
 10102                           ; BSR set to: 0
 10103                           ;doprnt.c: 1151: width -= prec + c + exp;
 10104  000808  0100               	movlb	0	; () banked
 10105  00080A  C081  F060         	movff	sprintf@c,??_sprintf
 10106  00080E  0100               	movlb	0	; () banked
 10107  000810  6B61               	clrf	(??_sprintf+1)& (0+255),b
 10108  000812  BF60               	btfsc	??_sprintf& (0+255),7,b
 10109  000814  0761               	decf	(??_sprintf+1)& (0+255),f,b
 10110  000816  0100               	movlb	0	; () banked
 10111  000818  0100               	movlb	0	; () banked
 10112  00081A  517F               	movf	sprintf@prec& (0+255),w,b
 10113  00081C  0100               	movlb	0	; () banked
 10114  00081E  2760               	addwf	??_sprintf& (0+255),f,b
 10115  000820  0100               	movlb	0	; () banked
 10116  000822  0100               	movlb	0	; () banked
 10117  000824  5180               	movf	(sprintf@prec+1)& (0+255),w,b
 10118  000826  0100               	movlb	0	; () banked
 10119  000828  2361               	addwfc	(??_sprintf+1)& (0+255),f,b
 10120  00082A  0100               	movlb	0	; () banked
 10121  00082C  0100               	movlb	0	; () banked
 10122  00082E  5176               	movf	sprintf@exp& (0+255),w,b
 10123  000830  0100               	movlb	0	; () banked
 10124  000832  2760               	addwf	??_sprintf& (0+255),f,b
 10125  000834  0100               	movlb	0	; () banked
 10126  000836  0100               	movlb	0	; () banked
 10127  000838  5177               	movf	(sprintf@exp+1)& (0+255),w,b
 10128  00083A  0100               	movlb	0	; () banked
 10129  00083C  2361               	addwfc	(??_sprintf+1)& (0+255),f,b
 10130  00083E  0100               	movlb	0	; () banked
 10131  000840  5160               	movf	??_sprintf& (0+255),w,b
 10132  000842  0100               	movlb	0	; () banked
 10133  000844  0100               	movlb	0	; () banked
 10134  000846  5F7D               	subwf	sprintf@width& (0+255),f,b
 10135  000848  0100               	movlb	0	; () banked
 10136  00084A  5161               	movf	(??_sprintf+1)& (0+255),w,b
 10137  00084C  0100               	movlb	0	; () banked
 10138  00084E  0100               	movlb	0	; () banked
 10139  000850  5B7E               	subwfb	(sprintf@width+1)& (0+255),f,b
 10140                           
 10141                           ;doprnt.c: 1152: if(
 10142                           ;doprnt.c: 1156: prec)
 10143  000852  0100               	movlb	0	; () banked
 10144  000854  0100               	movlb	0	; () banked
 10145  000856  5180               	movf	(sprintf@prec+1)& (0+255),w,b
 10146  000858  117F               	iorwf	sprintf@prec& (0+255),w,b
 10147  00085A  B4D8               	btfsc	status,2,c
 10148  00085C  D005               	goto	i2l8945
 10149                           
 10150                           ; BSR set to: 0
 10151                           ;doprnt.c: 1157: width--;
 10152  00085E  0100               	movlb	0	; () banked
 10153  000860  0100               	movlb	0	; () banked
 10154  000862  077D               	decf	sprintf@width& (0+255),f,b
 10155  000864  A0D8               	btfss	status,0,c
 10156  000866  077E               	decf	(sprintf@width+1)& (0+255),f,b
 10157  000868                     i2l8945:
 10158                           
 10159                           ; BSR set to: 0
 10160                           ;doprnt.c: 1158: if(flag & 0x03)
 10161  000868  0E03               	movlw	3
 10162  00086A  0100               	movlb	0	; () banked
 10163  00086C  0100               	movlb	0	; () banked
 10164  00086E  1578               	andwf	sprintf@flag& (0+255),w,b
 10165  000870  0100               	movlb	0	; () banked
 10166  000872  6F60               	movwf	??_sprintf& (0+255),b
 10167  000874  0E00               	movlw	0
 10168  000876  0100               	movlb	0	; () banked
 10169  000878  0100               	movlb	0	; () banked
 10170  00087A  1579               	andwf	(sprintf@flag+1)& (0+255),w,b
 10171  00087C  0100               	movlb	0	; () banked
 10172  00087E  6F61               	movwf	(??_sprintf+1)& (0+255),b
 10173  000880  0100               	movlb	0	; () banked
 10174  000882  5161               	movf	(??_sprintf+1)& (0+255),w,b
 10175  000884  1160               	iorwf	??_sprintf& (0+255),w,b
 10176  000886  B4D8               	btfsc	status,2,c
 10177  000888  D005               	goto	i2l8949
 10178                           
 10179                           ; BSR set to: 0
 10180                           ;doprnt.c: 1159: width--;
 10181  00088A  0100               	movlb	0	; () banked
 10182  00088C  0100               	movlb	0	; () banked
 10183  00088E  077D               	decf	sprintf@width& (0+255),f,b
 10184  000890  A0D8               	btfss	status,0,c
 10185  000892  077E               	decf	(sprintf@width+1)& (0+255),f,b
 10186  000894                     i2l8949:
 10187                           
 10188                           ; BSR set to: 0
 10189                           ;doprnt.c: 1162: if(flag & 0x04) {
 10190  000894  0100               	movlb	0	; () banked
 10191  000896  0100               	movlb	0	; () banked
 10192  000898  B578               	btfsc	sprintf@flag& (0+255),2,b
 10193  00089A  D00E               	goto	i2l8959
 10194  00089C  D025               	goto	i2l8967
 10195  00089E                     i2l8953:
 10196                           
 10197                           ; BSR set to: 0
 10198                           ;doprnt.c: 1176: ((*sp++ = ('0')));
 10199  00089E  C053  FFD9         	movff	sprintf@sp,fsr2l
 10200  0008A2  C054  FFDA         	movff	sprintf@sp+1,fsr2h
 10201  0008A6  0E30               	movlw	48
 10202  0008A8  6EDF               	movwf	indf2,c
 10203                           
 10204                           ; BSR set to: 0
 10205  0008AA  4A53               	infsnz	sprintf@sp,f,c
 10206  0008AC  2A54               	incf	sprintf@sp+1,f,c
 10207                           
 10208                           ; BSR set to: 0
 10209                           ;doprnt.c: 1177: width--;
 10210  0008AE  0100               	movlb	0	; () banked
 10211  0008B0  0100               	movlb	0	; () banked
 10212  0008B2  077D               	decf	sprintf@width& (0+255),f,b
 10213  0008B4  A0D8               	btfss	status,0,c
 10214  0008B6  077E               	decf	(sprintf@width+1)& (0+255),f,b
 10215  0008B8                     i2l8959:
 10216                           
 10217                           ; BSR set to: 0
 10218  0008B8  0100               	movlb	0	; () banked
 10219  0008BA  0100               	movlb	0	; () banked
 10220  0008BC  517E               	movf	(sprintf@width+1)& (0+255),w,b
 10221  0008BE  0A80               	xorlw	128
 10222  0008C0  0F80               	addlw	-128
 10223  0008C2  0E01               	movlw	1
 10224  0008C4  B4D8               	btfsc	status,2,c
 10225  0008C6  5D7D               	subwf	sprintf@width& (0+255),w,b
 10226  0008C8  A0D8               	btfss	status,0,c
 10227  0008CA  D06C               	goto	i2l8983
 10228  0008CC  D7E8               	goto	i2l8953
 10229  0008CE                     i2l8961:
 10230                           
 10231                           ; BSR set to: 0
 10232                           ;doprnt.c: 1188: ((*sp++ = (' ')));
 10233  0008CE  C053  FFD9         	movff	sprintf@sp,fsr2l
 10234  0008D2  C054  FFDA         	movff	sprintf@sp+1,fsr2h
 10235  0008D6  0E20               	movlw	32
 10236  0008D8  6EDF               	movwf	indf2,c
 10237                           
 10238                           ; BSR set to: 0
 10239  0008DA  4A53               	infsnz	sprintf@sp,f,c
 10240  0008DC  2A54               	incf	sprintf@sp+1,f,c
 10241                           
 10242                           ; BSR set to: 0
 10243                           ;doprnt.c: 1189: width--;
 10244  0008DE  0100               	movlb	0	; () banked
 10245  0008E0  0100               	movlb	0	; () banked
 10246  0008E2  077D               	decf	sprintf@width& (0+255),f,b
 10247  0008E4  A0D8               	btfss	status,0,c
 10248  0008E6  077E               	decf	(sprintf@width+1)& (0+255),f,b
 10249  0008E8                     i2l8967:
 10250                           
 10251                           ; BSR set to: 0
 10252  0008E8  0100               	movlb	0	; () banked
 10253  0008EA  0100               	movlb	0	; () banked
 10254  0008EC  517E               	movf	(sprintf@width+1)& (0+255),w,b
 10255  0008EE  0A80               	xorlw	128
 10256  0008F0  0F80               	addlw	-128
 10257  0008F2  0E01               	movlw	1
 10258  0008F4  B4D8               	btfsc	status,2,c
 10259  0008F6  5D7D               	subwf	sprintf@width& (0+255),w,b
 10260  0008F8  B0D8               	btfsc	status,0,c
 10261  0008FA  D7E9               	goto	i2l8961
 10262                           
 10263                           ; BSR set to: 0
 10264                           ;doprnt.c: 1190: }
 10265                           ;doprnt.c: 1195: if(flag & 0x03)
 10266                           
 10267                           ; BSR set to: 0
 10268  0008FC  0E03               	movlw	3
 10269  0008FE  0100               	movlb	0	; () banked
 10270  000900  0100               	movlb	0	; () banked
 10271  000902  1578               	andwf	sprintf@flag& (0+255),w,b
 10272  000904  0100               	movlb	0	; () banked
 10273  000906  6F60               	movwf	??_sprintf& (0+255),b
 10274  000908  0E00               	movlw	0
 10275  00090A  0100               	movlb	0	; () banked
 10276  00090C  0100               	movlb	0	; () banked
 10277  00090E  1579               	andwf	(sprintf@flag+1)& (0+255),w,b
 10278  000910  0100               	movlb	0	; () banked
 10279  000912  6F61               	movwf	(??_sprintf+1)& (0+255),b
 10280  000914  0100               	movlb	0	; () banked
 10281  000916  5161               	movf	(??_sprintf+1)& (0+255),w,b
 10282  000918  1160               	iorwf	??_sprintf& (0+255),w,b
 10283  00091A  B4D8               	btfsc	status,2,c
 10284  00091C  D043               	goto	i2l8983
 10285                           
 10286                           ; BSR set to: 0
 10287                           ;doprnt.c: 1197: ((*sp++ = ('-')));
 10288  00091E  C053  FFD9         	movff	sprintf@sp,fsr2l
 10289  000922  C054  FFDA         	movff	sprintf@sp+1,fsr2h
 10290  000926  0E2D               	movlw	45
 10291  000928  D03A               	goto	L14
 10292  00092A                     i2l8975:
 10293                           
 10294                           ; BSR set to: 0
 10295                           ;doprnt.c: 1207: {
 10296                           ;doprnt.c: 1208: unsigned vd = _val._val/dpowers[c];
 10297  00092A  C082  F001         	movff	sprintf@_val,?___lldiv
 10298  00092E  C083  F002         	movff	sprintf@_val+1,?___lldiv+1
 10299  000932  C084  F003         	movff	sprintf@_val+2,?___lldiv+2
 10300  000936  C085  F004         	movff	sprintf@_val+3,?___lldiv+3
 10301  00093A  0100               	movlb	0	; () banked
 10302  00093C  0100               	movlb	0	; () banked
 10303  00093E  5181               	movf	sprintf@c& (0+255),w,b
 10304  000940  0D04               	mullw	4
 10305  000942  0EE3               	movlw	low _dpowers
 10306  000944  24F3               	addwf	prodl,w,c
 10307  000946  6EF6               	movwf	tblptrl,c
 10308  000948  0E7E               	movlw	high _dpowers
 10309  00094A  20F4               	addwfc	prodh,w,c
 10310  00094C  6EF7               	movwf	tblptrh,c
 10311  00094E  0009               	tblrd		*+
 10312  000950  CFF5 F005          	movff	tablat,?___lldiv+4
 10313  000954  0009               	tblrd		*+
 10314  000956  CFF5 F006          	movff	tablat,?___lldiv+5
 10315  00095A  0009               	tblrd		*+
 10316  00095C  CFF5 F007          	movff	tablat,?___lldiv+6
 10317  000960  000A               	tblrd		*-
 10318  000962  CFF5 F008          	movff	tablat,?___lldiv+7
 10319  000966  EC07  F021         	call	___lldiv	;wreg free
 10320  00096A  C001  F06D         	movff	?___lldiv,sprintf@vd
 10321  00096E  C002  F06E         	movff	?___lldiv+1,sprintf@vd+1
 10322                           
 10323                           ;doprnt.c: 1209: vd %= 10;
 10324  000972  C06D  F001         	movff	sprintf@vd,?___lwmod
 10325  000976  C06E  F002         	movff	sprintf@vd+1,?___lwmod+1
 10326  00097A  0E00               	movlw	0
 10327  00097C  6E04               	movwf	?___lwmod+3,c
 10328  00097E  0E0A               	movlw	10
 10329  000980  6E03               	movwf	?___lwmod+2,c
 10330  000982  ECBA  F023         	call	___lwmod	;wreg free
 10331  000986  C001  F06D         	movff	?___lwmod,sprintf@vd
 10332  00098A  C002  F06E         	movff	?___lwmod+1,sprintf@vd+1
 10333                           
 10334                           ;doprnt.c: 1210: ((*sp++ = ('0' + vd)));
 10335  00098E  0100               	movlb	0	; () banked
 10336  000990  0100               	movlb	0	; () banked
 10337  000992  516D               	movf	sprintf@vd& (0+255),w,b
 10338  000994  0F30               	addlw	48
 10339  000996  C053  FFD9         	movff	sprintf@sp,fsr2l
 10340  00099A  C054  FFDA         	movff	sprintf@sp+1,fsr2h
 10341  00099E                     L14:
 10342  00099E  6EDF               	movwf	indf2,c
 10343                           
 10344                           ; BSR set to: 0
 10345  0009A0  4A53               	infsnz	sprintf@sp,f,c
 10346  0009A2  2A54               	incf	sprintf@sp+1,f,c
 10347  0009A4                     i2l8983:
 10348                           
 10349                           ; BSR set to: 0
 10350  0009A4  0100               	movlb	0	; () banked
 10351  0009A6  0100               	movlb	0	; () banked
 10352  0009A8  0781               	decf	sprintf@c& (0+255),f,b
 10353  0009AA  0100               	movlb	0	; () banked
 10354  0009AC  2981               	incf	sprintf@c& (0+255),w,b
 10355  0009AE  B4D8               	btfsc	status,2,c
 10356  0009B0  D00E               	goto	i2l8991
 10357  0009B2  D7BB               	goto	i2l8975
 10358  0009B4                     i2l8985:
 10359                           
 10360                           ; BSR set to: 0
 10361                           ;doprnt.c: 1215: ((*sp++ = ('0')));
 10362  0009B4  C053  FFD9         	movff	sprintf@sp,fsr2l
 10363  0009B8  C054  FFDA         	movff	sprintf@sp+1,fsr2h
 10364  0009BC  0E30               	movlw	48
 10365  0009BE  6EDF               	movwf	indf2,c
 10366                           
 10367                           ; BSR set to: 0
 10368  0009C0  4A53               	infsnz	sprintf@sp,f,c
 10369  0009C2  2A54               	incf	sprintf@sp+1,f,c
 10370                           
 10371                           ; BSR set to: 0
 10372                           ;doprnt.c: 1216: exp--;
 10373  0009C4  0100               	movlb	0	; () banked
 10374  0009C6  0100               	movlb	0	; () banked
 10375  0009C8  0776               	decf	sprintf@exp& (0+255),f,b
 10376  0009CA  A0D8               	btfss	status,0,c
 10377  0009CC  0777               	decf	(sprintf@exp+1)& (0+255),f,b
 10378  0009CE                     i2l8991:
 10379                           
 10380                           ; BSR set to: 0
 10381  0009CE  0100               	movlb	0	; () banked
 10382  0009D0  0100               	movlb	0	; () banked
 10383  0009D2  5177               	movf	(sprintf@exp+1)& (0+255),w,b
 10384  0009D4  0A80               	xorlw	128
 10385  0009D6  0F80               	addlw	-128
 10386  0009D8  0E01               	movlw	1
 10387  0009DA  B4D8               	btfsc	status,2,c
 10388  0009DC  5D76               	subwf	sprintf@exp& (0+255),w,b
 10389  0009DE  B0D8               	btfsc	status,0,c
 10390  0009E0  D7E9               	goto	i2l8985
 10391                           
 10392                           ; BSR set to: 0
 10393                           ;doprnt.c: 1217: }
 10394                           ;doprnt.c: 1218: if(prec > (int)((sizeof dpowers/sizeof dpowers[0])-2))
 10395                           
 10396                           ; BSR set to: 0
 10397  0009E2  0100               	movlb	0	; () banked
 10398  0009E4  0100               	movlb	0	; () banked
 10399  0009E6  5180               	movf	(sprintf@prec+1)& (0+255),w,b
 10400  0009E8  0A80               	xorlw	128
 10401  0009EA  0F80               	addlw	-128
 10402  0009EC  0E09               	movlw	9
 10403  0009EE  B4D8               	btfsc	status,2,c
 10404  0009F0  5D7F               	subwf	sprintf@prec& (0+255),w,b
 10405  0009F2  A0D8               	btfss	status,0,c
 10406  0009F4  D009               	goto	i2l661
 10407                           
 10408                           ; BSR set to: 0
 10409                           ;doprnt.c: 1219: c = (sizeof dpowers/sizeof dpowers[0])-2;
 10410  0009F6  0100               	movlb	0	; () banked
 10411  0009F8  6F60               	movwf	??_sprintf& (0+255),b
 10412  0009FA  0E08               	movlw	8
 10413  0009FC  0100               	movlb	0	; () banked
 10414  0009FE  0100               	movlb	0	; () banked
 10415  000A00  6F81               	movwf	sprintf@c& (0+255),b
 10416  000A02  0100               	movlb	0	; () banked
 10417  000A04  5160               	movf	??_sprintf& (0+255),w,b
 10418  000A06  D002               	goto	i2l8997
 10419  000A08                     i2l661:
 10420                           
 10421                           ; BSR set to: 0
 10422                           ;doprnt.c: 1220: else
 10423                           ;doprnt.c: 1221: c = prec;
 10424  000A08  C07F  F081         	movff	sprintf@prec,sprintf@c
 10425  000A0C                     i2l8997:
 10426                           
 10427                           ; BSR set to: 0
 10428                           ;doprnt.c: 1222: prec -= c;
 10429  000A0C  0100               	movlb	0	; () banked
 10430  000A0E  0100               	movlb	0	; () banked
 10431  000A10  5181               	movf	sprintf@c& (0+255),w,b
 10432  000A12  0100               	movlb	0	; () banked
 10433  000A14  0100               	movlb	0	; () banked
 10434  000A16  5F7F               	subwf	sprintf@prec& (0+255),f,b
 10435  000A18  0E00               	movlw	0
 10436  000A1A  0100               	movlb	0	; () banked
 10437  000A1C  BF81               	btfsc	sprintf@c& (0+255),7,b
 10438  000A1E  0EFF               	movlw	255
 10439  000A20  0100               	movlb	0	; () banked
 10440  000A22  0100               	movlb	0	; () banked
 10441  000A24  5B80               	subwfb	(sprintf@prec+1)& (0+255),f,b
 10442                           
 10443                           ; BSR set to: 0
 10444                           ;doprnt.c: 1226: if(c)
 10445  000A26  0100               	movlb	0	; () banked
 10446  000A28  0100               	movlb	0	; () banked
 10447  000A2A  5181               	movf	sprintf@c& (0+255),w,b
 10448  000A2C  B4D8               	btfsc	status,2,c
 10449  000A2E  D008               	goto	i2l9005
 10450                           
 10451                           ; BSR set to: 0
 10452                           ;doprnt.c: 1228: ((*sp++ = ('.')));
 10453  000A30  C053  FFD9         	movff	sprintf@sp,fsr2l
 10454  000A34  C054  FFDA         	movff	sprintf@sp+1,fsr2h
 10455  000A38  0E2E               	movlw	46
 10456  000A3A  6EDF               	movwf	indf2,c
 10457                           
 10458                           ; BSR set to: 0
 10459  000A3C  4A53               	infsnz	sprintf@sp,f,c
 10460  000A3E  2A54               	incf	sprintf@sp+1,f,c
 10461  000A40                     i2l9005:
 10462                           
 10463                           ; BSR set to: 0
 10464                           ;doprnt.c: 1234: _val._val = (long)(fval * scale(c));
 10465  000A40  C081  F03F         	movff	sprintf@c,?_scale
 10466  000A44  EC33  F012         	call	_scale	;wreg free
 10467  000A48  C041  F068         	movff	?_scale+2,_sprintf$1313+2
 10468  000A4C  C040  F067         	movff	?_scale+1,_sprintf$1313+1
 10469  000A50  C03F  F066         	movff	?_scale,_sprintf$1313
 10470                           
 10471                           ;doprnt.c: 1234: _val._val = (long)(fval * scale(c));
 10472  000A54  C07A  F031         	movff	sprintf@fval,?___ftmul+3
 10473  000A58  C07B  F032         	movff	sprintf@fval+1,?___ftmul+4
 10474  000A5C  C07C  F033         	movff	sprintf@fval+2,?___ftmul+5
 10475  000A60  C066  F02E         	movff	_sprintf$1313,?___ftmul
 10476  000A64  C067  F02F         	movff	_sprintf$1313+1,?___ftmul+1
 10477  000A68  C068  F030         	movff	_sprintf$1313+2,?___ftmul+2
 10478  000A6C  EC38  F01B         	call	___ftmul	;wreg free
 10479  000A70  C030  F021         	movff	?___ftmul+2,?___fttol+2
 10480  000A74  C02F  F020         	movff	?___ftmul+1,?___fttol+1
 10481  000A78  C02E  F01F         	movff	?___ftmul,?___fttol
 10482  000A7C  EC24  F01D         	call	___fttol	;wreg free
 10483  000A80  C022  F085         	movff	?___fttol+3,sprintf@_val+3
 10484  000A84  C021  F084         	movff	?___fttol+2,sprintf@_val+2
 10485  000A88  C020  F083         	movff	?___fttol+1,sprintf@_val+1
 10486  000A8C  C01F  F082         	movff	?___fttol,sprintf@_val
 10487                           
 10488                           ;doprnt.c: 1235: while(c--) {
 10489  000A90  D065               	goto	i2l9019
 10490  000A92                     i2l9009:
 10491                           
 10492                           ;doprnt.c: 1236: unsigned vd = _val._val/dpowers[c];
 10493  000A92  C082  F001         	movff	sprintf@_val,?___lldiv
 10494  000A96  C083  F002         	movff	sprintf@_val+1,?___lldiv+1
 10495  000A9A  C084  F003         	movff	sprintf@_val+2,?___lldiv+2
 10496  000A9E  C085  F004         	movff	sprintf@_val+3,?___lldiv+3
 10497  000AA2  0100               	movlb	0	; () banked
 10498  000AA4  0100               	movlb	0	; () banked
 10499  000AA6  5181               	movf	sprintf@c& (0+255),w,b
 10500  000AA8  0D04               	mullw	4
 10501  000AAA  0EE3               	movlw	low _dpowers
 10502  000AAC  24F3               	addwf	prodl,w,c
 10503  000AAE  6EF6               	movwf	tblptrl,c
 10504  000AB0  0E7E               	movlw	high _dpowers
 10505  000AB2  20F4               	addwfc	prodh,w,c
 10506  000AB4  6EF7               	movwf	tblptrh,c
 10507  000AB6  0009               	tblrd		*+
 10508  000AB8  CFF5 F005          	movff	tablat,?___lldiv+4
 10509  000ABC  0009               	tblrd		*+
 10510  000ABE  CFF5 F006          	movff	tablat,?___lldiv+5
 10511  000AC2  0009               	tblrd		*+
 10512  000AC4  CFF5 F007          	movff	tablat,?___lldiv+6
 10513  000AC8  000A               	tblrd		*-
 10514  000ACA  CFF5 F008          	movff	tablat,?___lldiv+7
 10515  000ACE  EC07  F021         	call	___lldiv	;wreg free
 10516  000AD2  C001  F06F         	movff	?___lldiv,sprintf@vd_665
 10517  000AD6  C002  F070         	movff	?___lldiv+1,sprintf@vd_665+1
 10518                           
 10519                           ;doprnt.c: 1237: vd %= 10;
 10520  000ADA  C06F  F001         	movff	sprintf@vd_665,?___lwmod
 10521  000ADE  C070  F002         	movff	sprintf@vd_665+1,?___lwmod+1
 10522  000AE2  0E00               	movlw	0
 10523  000AE4  6E04               	movwf	?___lwmod+3,c
 10524  000AE6  0E0A               	movlw	10
 10525  000AE8  6E03               	movwf	?___lwmod+2,c
 10526  000AEA  ECBA  F023         	call	___lwmod	;wreg free
 10527  000AEE  C001  F06F         	movff	?___lwmod,sprintf@vd_665
 10528  000AF2  C002  F070         	movff	?___lwmod+1,sprintf@vd_665+1
 10529                           
 10530                           ;doprnt.c: 1238: ((*sp++ = ('0' + vd)));
 10531  000AF6  0100               	movlb	0	; () banked
 10532  000AF8  0100               	movlb	0	; () banked
 10533  000AFA  516F               	movf	sprintf@vd_665& (0+255),w,b
 10534  000AFC  0F30               	addlw	48
 10535  000AFE  C053  FFD9         	movff	sprintf@sp,fsr2l
 10536  000B02  C054  FFDA         	movff	sprintf@sp+1,fsr2h
 10537  000B06  6EDF               	movwf	indf2,c
 10538                           
 10539                           ; BSR set to: 0
 10540  000B08  4A53               	infsnz	sprintf@sp,f,c
 10541  000B0A  2A54               	incf	sprintf@sp+1,f,c
 10542                           
 10543                           ; BSR set to: 0
 10544                           ;doprnt.c: 1239: _val._val %= dpowers[c];
 10545  000B0C  C082  F014         	movff	sprintf@_val,?___llmod
 10546  000B10  C083  F015         	movff	sprintf@_val+1,?___llmod+1
 10547  000B14  C084  F016         	movff	sprintf@_val+2,?___llmod+2
 10548  000B18  C085  F017         	movff	sprintf@_val+3,?___llmod+3
 10549  000B1C  0100               	movlb	0	; () banked
 10550  000B1E  0100               	movlb	0	; () banked
 10551  000B20  5181               	movf	sprintf@c& (0+255),w,b
 10552  000B22  0D04               	mullw	4
 10553  000B24  0EE3               	movlw	low _dpowers
 10554  000B26  24F3               	addwf	prodl,w,c
 10555  000B28  6EF6               	movwf	tblptrl,c
 10556  000B2A  0E7E               	movlw	high _dpowers
 10557  000B2C  20F4               	addwfc	prodh,w,c
 10558  000B2E  6EF7               	movwf	tblptrh,c
 10559  000B30  0009               	tblrd		*+
 10560  000B32  CFF5 F018          	movff	tablat,?___llmod+4
 10561  000B36  0009               	tblrd		*+
 10562  000B38  CFF5 F019          	movff	tablat,?___llmod+5
 10563  000B3C  0009               	tblrd		*+
 10564  000B3E  CFF5 F01A          	movff	tablat,?___llmod+6
 10565  000B42  000A               	tblrd		*-
 10566  000B44  CFF5 F01B          	movff	tablat,?___llmod+7
 10567  000B48  ECA7  F022         	call	___llmod	;wreg free
 10568  000B4C  C017  F085         	movff	?___llmod+3,sprintf@_val+3
 10569  000B50  C016  F084         	movff	?___llmod+2,sprintf@_val+2
 10570  000B54  C015  F083         	movff	?___llmod+1,sprintf@_val+1
 10571  000B58  C014  F082         	movff	?___llmod,sprintf@_val
 10572  000B5C                     i2l9019:
 10573  000B5C  0100               	movlb	0	; () banked
 10574  000B5E  0100               	movlb	0	; () banked
 10575  000B60  0781               	decf	sprintf@c& (0+255),f,b
 10576  000B62  0100               	movlb	0	; () banked
 10577  000B64  2981               	incf	sprintf@c& (0+255),w,b
 10578  000B66  B4D8               	btfsc	status,2,c
 10579  000B68  D00E               	goto	i2l9027
 10580  000B6A  D793               	goto	i2l9009
 10581  000B6C                     i2l9021:
 10582                           
 10583                           ; BSR set to: 0
 10584                           ;doprnt.c: 1243: ((*sp++ = ('0')));
 10585  000B6C  C053  FFD9         	movff	sprintf@sp,fsr2l
 10586  000B70  C054  FFDA         	movff	sprintf@sp+1,fsr2h
 10587  000B74  0E30               	movlw	48
 10588  000B76  6EDF               	movwf	indf2,c
 10589                           
 10590                           ; BSR set to: 0
 10591  000B78  4A53               	infsnz	sprintf@sp,f,c
 10592  000B7A  2A54               	incf	sprintf@sp+1,f,c
 10593                           
 10594                           ; BSR set to: 0
 10595                           ;doprnt.c: 1244: prec--;
 10596  000B7C  0100               	movlb	0	; () banked
 10597  000B7E  0100               	movlb	0	; () banked
 10598  000B80  077F               	decf	sprintf@prec& (0+255),f,b
 10599  000B82  A0D8               	btfss	status,0,c
 10600  000B84  0780               	decf	(sprintf@prec+1)& (0+255),f,b
 10601  000B86                     i2l9027:
 10602                           
 10603                           ; BSR set to: 0
 10604  000B86  0100               	movlb	0	; () banked
 10605  000B88  0100               	movlb	0	; () banked
 10606  000B8A  5180               	movf	(sprintf@prec+1)& (0+255),w,b
 10607  000B8C  117F               	iorwf	sprintf@prec& (0+255),w,b
 10608  000B8E  B4D8               	btfsc	status,2,c
 10609  000B90  D1E9               	goto	i2l9129
 10610  000B92  D7EC               	goto	i2l9021
 10611  000B94                     i2l622:
 10612                           
 10613                           ; BSR set to: 0
 10614                           ;doprnt.c: 1253: }
 10615                           ;doprnt.c: 1260: {
 10616                           ;doprnt.c: 1262: if(flag & 0x10)
 10617  000B94  0100               	movlb	0	; () banked
 10618  000B96  0100               	movlb	0	; () banked
 10619  000B98  A978               	btfss	sprintf@flag& (0+255),4,b
 10620  000B9A  D012               	goto	i2l9033
 10621                           
 10622                           ; BSR set to: 0
 10623                           ;doprnt.c: 1263: _val._val = (*(long *)__va_arg((*(long **)ap), (long)0));
 10624  000B9C  C074  FFD9         	movff	sprintf@ap,fsr2l
 10625  000BA0  C075  FFDA         	movff	sprintf@ap+1,fsr2h
 10626  000BA4  0100               	movlb	0	; () banked
 10627  000BA6  CFDE F082          	movff	postinc2,sprintf@_val
 10628  000BAA  0100               	movlb	0	; () banked
 10629  000BAC  CFDE F083          	movff	postinc2,sprintf@_val+1
 10630  000BB0  0100               	movlb	0	; () banked
 10631  000BB2  CFDE F084          	movff	postinc2,sprintf@_val+2
 10632  000BB6  0100               	movlb	0	; () banked
 10633  000BB8  CFDE F085          	movff	postinc2,sprintf@_val+3
 10634                           
 10635                           ; BSR set to: 0
 10636  000BBC  0E04               	movlw	4
 10637  000BBE  D014               	goto	L15
 10638  000BC0                     i2l9033:
 10639                           
 10640                           ; BSR set to: 0
 10641                           ;doprnt.c: 1264: else
 10642                           ;doprnt.c: 1266: _val._val = (long)(*(int *)__va_arg((*(int **)ap), (int)0));
 10643  000BC0  C074  FFD9         	movff	sprintf@ap,fsr2l
 10644  000BC4  C075  FFDA         	movff	sprintf@ap+1,fsr2h
 10645  000BC8  0100               	movlb	0	; () banked
 10646  000BCA  CFDE F082          	movff	postinc2,sprintf@_val
 10647  000BCE  0100               	movlb	0	; () banked
 10648  000BD0  CFDD F083          	movff	postdec2,sprintf@_val+1
 10649  000BD4  0100               	movlb	0	; () banked
 10650  000BD6  0E00               	movlw	0
 10651  000BD8  0100               	movlb	0	; () banked
 10652  000BDA  BF83               	btfsc	(sprintf@_val+1)& (0+255),7,b
 10653  000BDC  0EFF               	movlw	-1
 10654  000BDE  0100               	movlb	0	; () banked
 10655  000BE0  6F84               	movwf	(sprintf@_val+2)& (0+255),b
 10656  000BE2  0100               	movlb	0	; () banked
 10657  000BE4  6F85               	movwf	(sprintf@_val+3)& (0+255),b
 10658                           
 10659                           ; BSR set to: 0
 10660  000BE6  0E02               	movlw	2
 10661  000BE8                     L15:
 10662  000BE8  0100               	movlb	0	; () banked
 10663  000BEA  0100               	movlb	0	; () banked
 10664  000BEC  2774               	addwf	sprintf@ap& (0+255),f,b
 10665  000BEE  0E00               	movlw	0
 10666  000BF0  0100               	movlb	0	; () banked
 10667  000BF2  2375               	addwfc	(sprintf@ap+1)& (0+255),f,b
 10668                           
 10669                           ; BSR set to: 0
 10670                           ;doprnt.c: 1268: if((long)_val._val < 0) {
 10671                           
 10672                           ; BSR set to: 0
 10673  000BF4  0100               	movlb	0	; () banked
 10674  000BF6  0100               	movlb	0	; () banked
 10675  000BF8  AF85               	btfss	(sprintf@_val+3)& (0+255),7,b
 10676  000BFA  D014               	goto	i2l9043
 10677                           
 10678                           ; BSR set to: 0
 10679                           ;doprnt.c: 1269: flag |= 0x03;
 10680  000BFC  0E03               	movlw	3
 10681  000BFE  0100               	movlb	0	; () banked
 10682  000C00  0100               	movlb	0	; () banked
 10683  000C02  1378               	iorwf	sprintf@flag& (0+255),f,b
 10684                           
 10685                           ; BSR set to: 0
 10686                           ;doprnt.c: 1270: _val._val = -_val._val;
 10687  000C04  0100               	movlb	0	; () banked
 10688  000C06  0100               	movlb	0	; () banked
 10689  000C08  1F85               	comf	(sprintf@_val+3)& (0+255),f,b
 10690  000C0A  0100               	movlb	0	; () banked
 10691  000C0C  1F84               	comf	(sprintf@_val+2)& (0+255),f,b
 10692  000C0E  0100               	movlb	0	; () banked
 10693  000C10  1F83               	comf	(sprintf@_val+1)& (0+255),f,b
 10694  000C12  0100               	movlb	0	; () banked
 10695  000C14  6D82               	negf	sprintf@_val& (0+255),b
 10696  000C16  0E00               	movlw	0
 10697  000C18  0100               	movlb	0	; () banked
 10698  000C1A  2383               	addwfc	(sprintf@_val+1)& (0+255),f,b
 10699  000C1C  0100               	movlb	0	; () banked
 10700  000C1E  2384               	addwfc	(sprintf@_val+2)& (0+255),f,b
 10701  000C20  0100               	movlb	0	; () banked
 10702  000C22  2385               	addwfc	(sprintf@_val+3)& (0+255),f,b
 10703  000C24                     i2l9043:
 10704                           
 10705                           ; BSR set to: 0
 10706                           ;doprnt.c: 1271: }
 10707                           ;doprnt.c: 1273: }
 10708                           ;doprnt.c: 1297: if(prec == 0 && _val._val == 0)
 10709  000C24  0100               	movlb	0	; () banked
 10710  000C26  0100               	movlb	0	; () banked
 10711  000C28  5180               	movf	(sprintf@prec+1)& (0+255),w,b
 10712  000C2A  117F               	iorwf	sprintf@prec& (0+255),w,b
 10713  000C2C  A4D8               	btfss	status,2,c
 10714  000C2E  D00C               	goto	i2l9049
 10715                           
 10716                           ; BSR set to: 0
 10717  000C30  0100               	movlb	0	; () banked
 10718  000C32  0100               	movlb	0	; () banked
 10719  000C34  5185               	movf	(sprintf@_val+3)& (0+255),w,b
 10720  000C36  1182               	iorwf	sprintf@_val& (0+255),w,b
 10721  000C38  1183               	iorwf	(sprintf@_val+1)& (0+255),w,b
 10722  000C3A  1184               	iorwf	(sprintf@_val+2)& (0+255),w,b
 10723  000C3C  A4D8               	btfss	status,2,c
 10724  000C3E  D004               	goto	i2l9049
 10725                           
 10726                           ; BSR set to: 0
 10727                           ;doprnt.c: 1298: prec++;
 10728  000C40  0100               	movlb	0	; () banked
 10729  000C42  0100               	movlb	0	; () banked
 10730  000C44  4B7F               	infsnz	sprintf@prec& (0+255),f,b
 10731  000C46  2B80               	incf	(sprintf@prec+1)& (0+255),f,b
 10732  000C48                     i2l9049:
 10733                           
 10734                           ; BSR set to: 0
 10735                           ;doprnt.c: 1312: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
 10736  000C48  0100               	movlb	0	; () banked
 10737  000C4A  6F60               	movwf	??_sprintf& (0+255),b
 10738  000C4C  0E01               	movlw	1
 10739  000C4E  0100               	movlb	0	; () banked
 10740  000C50  0100               	movlb	0	; () banked
 10741  000C52  6F81               	movwf	sprintf@c& (0+255),b
 10742  000C54  0100               	movlb	0	; () banked
 10743  000C56  5160               	movf	??_sprintf& (0+255),w,b
 10744  000C58                     
 10745                           ; BSR set to: 0
 10746  000C58  0100               	movlb	0	; () banked
 10747  000C5A  0100               	movlb	0	; () banked
 10748  000C5C  5181               	movf	sprintf@c& (0+255),w,b
 10749  000C5E  0A0A               	xorlw	10
 10750  000C60  B4D8               	btfsc	status,2,c
 10751  000C62  D021               	goto	i2l9063
 10752                           
 10753                           ; BSR set to: 0
 10754                           ;doprnt.c: 1313: if(_val._val < dpowers[c])
 10755                           
 10756                           ; BSR set to: 0
 10757                           
 10758                           ; BSR set to: 0
 10759  000C64  0100               	movlb	0	; () banked
 10760  000C66  0100               	movlb	0	; () banked
 10761  000C68  5181               	movf	sprintf@c& (0+255),w,b
 10762  000C6A  0D04               	mullw	4
 10763  000C6C  0EE3               	movlw	low _dpowers
 10764  000C6E  24F3               	addwf	prodl,w,c
 10765  000C70  6EF6               	movwf	tblptrl,c
 10766  000C72  0E7E               	movlw	high _dpowers
 10767  000C74  20F4               	addwfc	prodh,w,c
 10768  000C76  6EF7               	movwf	tblptrh,c
 10769  000C78  0009               	tblrd		*+
 10770  000C7A  50F5               	movf	tablat,w,c
 10771  000C7C  0100               	movlb	0	; () banked
 10772  000C7E  0100               	movlb	0	; () banked
 10773  000C80  5D82               	subwf	sprintf@_val& (0+255),w,b
 10774  000C82  0009               	tblrd		*+
 10775  000C84  50F5               	movf	tablat,w,c
 10776  000C86  0100               	movlb	0	; () banked
 10777  000C88  5983               	subwfb	(sprintf@_val+1)& (0+255),w,b
 10778  000C8A  0009               	tblrd		*+
 10779  000C8C  50F5               	movf	tablat,w,c
 10780  000C8E  0100               	movlb	0	; () banked
 10781  000C90  5984               	subwfb	(sprintf@_val+2)& (0+255),w,b
 10782  000C92  0009               	tblrd		*+
 10783  000C94  50F5               	movf	tablat,w,c
 10784  000C96  0100               	movlb	0	; () banked
 10785  000C98  5985               	subwfb	(sprintf@_val+3)& (0+255),w,b
 10786  000C9A  A0D8               	btfss	status,0,c
 10787  000C9C  D004               	goto	i2l9063
 10788                           
 10789                           ; BSR set to: 0
 10790                           
 10791                           ; BSR set to: 0
 10792                           
 10793                           ; BSR set to: 0
 10794                           ;doprnt.c: 1314: break;
 10795  000C9E  0100               	movlb	0	; () banked
 10796  000CA0  0100               	movlb	0	; () banked
 10797  000CA2  2B81               	incf	sprintf@c& (0+255),f,b
 10798  000CA4  D7D9               	goto	L16
 10799  000CA6                     i2l9063:
 10800                           
 10801                           ; BSR set to: 0
 10802                           ;doprnt.c: 1346: if(c < prec)
 10803  000CA6  0E80               	movlw	128
 10804  000CA8  0100               	movlb	0	; () banked
 10805  000CAA  0100               	movlb	0	; () banked
 10806  000CAC  BF81               	btfsc	sprintf@c& (0+255),7,b
 10807  000CAE  0E7F               	movlw	127
 10808  000CB0  6F60               	movwf	??_sprintf& (0+255),b
 10809  000CB2  0100               	movlb	0	; () banked
 10810  000CB4  0100               	movlb	0	; () banked
 10811  000CB6  517F               	movf	sprintf@prec& (0+255),w,b
 10812  000CB8  0100               	movlb	0	; () banked
 10813  000CBA  0100               	movlb	0	; () banked
 10814  000CBC  5D81               	subwf	sprintf@c& (0+255),w,b
 10815  000CBE  0100               	movlb	0	; () banked
 10816  000CC0  0100               	movlb	0	; () banked
 10817  000CC2  5180               	movf	(sprintf@prec+1)& (0+255),w,b
 10818  000CC4  0A80               	xorlw	128
 10819  000CC6  0100               	movlb	0	; () banked
 10820  000CC8  5960               	subwfb	??_sprintf& (0+255),w,b
 10821  000CCA  B0D8               	btfsc	status,0,c
 10822  000CCC  D003               	goto	i2l9067
 10823                           
 10824                           ; BSR set to: 0
 10825                           ;doprnt.c: 1347: c = prec;
 10826  000CCE  C07F  F081         	movff	sprintf@prec,sprintf@c
 10827  000CD2  D020               	goto	i2l9071
 10828  000CD4                     i2l9067:
 10829                           
 10830                           ; BSR set to: 0
 10831                           ;doprnt.c: 1348: else if(prec < c)
 10832  000CD4  0100               	movlb	0	; () banked
 10833  000CD6  0100               	movlb	0	; () banked
 10834  000CD8  5180               	movf	(sprintf@prec+1)& (0+255),w,b
 10835  000CDA  0A80               	xorlw	128
 10836  000CDC  0100               	movlb	0	; () banked
 10837  000CDE  6F60               	movwf	??_sprintf& (0+255),b
 10838  000CE0  0100               	movlb	0	; () banked
 10839  000CE2  0100               	movlb	0	; () banked
 10840  000CE4  5181               	movf	sprintf@c& (0+255),w,b
 10841  000CE6  0100               	movlb	0	; () banked
 10842  000CE8  0100               	movlb	0	; () banked
 10843  000CEA  5D7F               	subwf	sprintf@prec& (0+255),w,b
 10844  000CEC  0E80               	movlw	128
 10845  000CEE  0100               	movlb	0	; () banked
 10846  000CF0  0100               	movlb	0	; () banked
 10847  000CF2  BF81               	btfsc	sprintf@c& (0+255),7,b
 10848  000CF4  0E7F               	movlw	127
 10849  000CF6  0100               	movlb	0	; () banked
 10850  000CF8  5960               	subwfb	??_sprintf& (0+255),w,b
 10851  000CFA  B0D8               	btfsc	status,0,c
 10852  000CFC  D00B               	goto	i2l9071
 10853                           
 10854                           ; BSR set to: 0
 10855                           ;doprnt.c: 1349: prec = c;
 10856  000CFE  0100               	movlb	0	; () banked
 10857  000D00  0100               	movlb	0	; () banked
 10858  000D02  5181               	movf	sprintf@c& (0+255),w,b
 10859  000D04  0100               	movlb	0	; () banked
 10860  000D06  0100               	movlb	0	; () banked
 10861  000D08  6F7F               	movwf	sprintf@prec& (0+255),b
 10862  000D0A  0100               	movlb	0	; () banked
 10863  000D0C  6B80               	clrf	(sprintf@prec+1)& (0+255),b
 10864  000D0E  0100               	movlb	0	; () banked
 10865  000D10  BF7F               	btfsc	sprintf@prec& (0+255),7,b
 10866  000D12  0780               	decf	(sprintf@prec+1)& (0+255),f,b
 10867  000D14                     i2l9071:
 10868                           
 10869                           ; BSR set to: 0
 10870                           ;doprnt.c: 1352: if(width && flag & 0x03)
 10871  000D14  0100               	movlb	0	; () banked
 10872  000D16  0100               	movlb	0	; () banked
 10873  000D18  517E               	movf	(sprintf@width+1)& (0+255),w,b
 10874  000D1A  117D               	iorwf	sprintf@width& (0+255),w,b
 10875  000D1C  B4D8               	btfsc	status,2,c
 10876  000D1E  D016               	goto	i2l9077
 10877                           
 10878                           ; BSR set to: 0
 10879  000D20  0E03               	movlw	3
 10880  000D22  0100               	movlb	0	; () banked
 10881  000D24  0100               	movlb	0	; () banked
 10882  000D26  1578               	andwf	sprintf@flag& (0+255),w,b
 10883  000D28  0100               	movlb	0	; () banked
 10884  000D2A  6F60               	movwf	??_sprintf& (0+255),b
 10885  000D2C  0E00               	movlw	0
 10886  000D2E  0100               	movlb	0	; () banked
 10887  000D30  0100               	movlb	0	; () banked
 10888  000D32  1579               	andwf	(sprintf@flag+1)& (0+255),w,b
 10889  000D34  0100               	movlb	0	; () banked
 10890  000D36  6F61               	movwf	(??_sprintf+1)& (0+255),b
 10891  000D38  0100               	movlb	0	; () banked
 10892  000D3A  5161               	movf	(??_sprintf+1)& (0+255),w,b
 10893  000D3C  1160               	iorwf	??_sprintf& (0+255),w,b
 10894  000D3E  B4D8               	btfsc	status,2,c
 10895  000D40  D005               	goto	i2l9077
 10896                           
 10897                           ; BSR set to: 0
 10898                           ;doprnt.c: 1353: width--;
 10899  000D42  0100               	movlb	0	; () banked
 10900  000D44  0100               	movlb	0	; () banked
 10901  000D46  077D               	decf	sprintf@width& (0+255),f,b
 10902  000D48  A0D8               	btfss	status,0,c
 10903  000D4A  077E               	decf	(sprintf@width+1)& (0+255),f,b
 10904  000D4C                     i2l9077:
 10905                           
 10906                           ; BSR set to: 0
 10907                           ;doprnt.c: 1355: if(flag & 0x4000) {
 10908  000D4C  0100               	movlb	0	; () banked
 10909  000D4E  0100               	movlb	0	; () banked
 10910  000D50  AD79               	btfss	(sprintf@flag+1)& (0+255),6,b
 10911  000D52  D028               	goto	i2l9085
 10912                           
 10913                           ; BSR set to: 0
 10914                           ;doprnt.c: 1356: if(width > prec)
 10915  000D54  0100               	movlb	0	; () banked
 10916  000D56  0100               	movlb	0	; () banked
 10917  000D58  5180               	movf	(sprintf@prec+1)& (0+255),w,b
 10918  000D5A  0A80               	xorlw	128
 10919  000D5C  0100               	movlb	0	; () banked
 10920  000D5E  6F60               	movwf	??_sprintf& (0+255),b
 10921  000D60  0100               	movlb	0	; () banked
 10922  000D62  0100               	movlb	0	; () banked
 10923  000D64  517D               	movf	sprintf@width& (0+255),w,b
 10924  000D66  0100               	movlb	0	; () banked
 10925  000D68  0100               	movlb	0	; () banked
 10926  000D6A  5D7F               	subwf	sprintf@prec& (0+255),w,b
 10927  000D6C  0100               	movlb	0	; () banked
 10928  000D6E  0100               	movlb	0	; () banked
 10929  000D70  517E               	movf	(sprintf@width+1)& (0+255),w,b
 10930  000D72  0A80               	xorlw	128
 10931  000D74  0100               	movlb	0	; () banked
 10932  000D76  5960               	subwfb	??_sprintf& (0+255),w,b
 10933  000D78  B0D8               	btfsc	status,0,c
 10934  000D7A  D00D               	goto	i2l9083
 10935                           
 10936                           ; BSR set to: 0
 10937                           ;doprnt.c: 1357: width -= prec;
 10938  000D7C  0100               	movlb	0	; () banked
 10939  000D7E  0100               	movlb	0	; () banked
 10940  000D80  517F               	movf	sprintf@prec& (0+255),w,b
 10941  000D82  0100               	movlb	0	; () banked
 10942  000D84  0100               	movlb	0	; () banked
 10943  000D86  5F7D               	subwf	sprintf@width& (0+255),f,b
 10944  000D88  0100               	movlb	0	; () banked
 10945  000D8A  0100               	movlb	0	; () banked
 10946  000D8C  5180               	movf	(sprintf@prec+1)& (0+255),w,b
 10947  000D8E  0100               	movlb	0	; () banked
 10948  000D90  0100               	movlb	0	; () banked
 10949  000D92  5B7E               	subwfb	(sprintf@width+1)& (0+255),f,b
 10950  000D94  D007               	goto	i2l9085
 10951  000D96                     i2l9083:
 10952                           
 10953                           ; BSR set to: 0
 10954                           ;doprnt.c: 1358: else
 10955                           ;doprnt.c: 1359: width = 0;
 10956  000D96  0E00               	movlw	0
 10957  000D98  0100               	movlb	0	; () banked
 10958  000D9A  0100               	movlb	0	; () banked
 10959  000D9C  6F7E               	movwf	(sprintf@width+1)& (0+255),b
 10960  000D9E  0E00               	movlw	0
 10961  000DA0  0100               	movlb	0	; () banked
 10962  000DA2  6F7D               	movwf	sprintf@width& (0+255),b
 10963  000DA4                     i2l9085:
 10964                           
 10965                           ; BSR set to: 0
 10966                           ;doprnt.c: 1360: }
 10967                           ;doprnt.c: 1388: if(width > c)
 10968  000DA4  0E80               	movlw	128
 10969  000DA6  0100               	movlb	0	; () banked
 10970  000DA8  0100               	movlb	0	; () banked
 10971  000DAA  BF81               	btfsc	sprintf@c& (0+255),7,b
 10972  000DAC  0E7F               	movlw	127
 10973  000DAE  6F60               	movwf	??_sprintf& (0+255),b
 10974  000DB0  0100               	movlb	0	; () banked
 10975  000DB2  0100               	movlb	0	; () banked
 10976  000DB4  517D               	movf	sprintf@width& (0+255),w,b
 10977  000DB6  0100               	movlb	0	; () banked
 10978  000DB8  0100               	movlb	0	; () banked
 10979  000DBA  5D81               	subwf	sprintf@c& (0+255),w,b
 10980  000DBC  0100               	movlb	0	; () banked
 10981  000DBE  0100               	movlb	0	; () banked
 10982  000DC0  517E               	movf	(sprintf@width+1)& (0+255),w,b
 10983  000DC2  0A80               	xorlw	128
 10984  000DC4  0100               	movlb	0	; () banked
 10985  000DC6  5960               	subwfb	??_sprintf& (0+255),w,b
 10986  000DC8  B0D8               	btfsc	status,0,c
 10987  000DCA  D00E               	goto	i2l9089
 10988                           
 10989                           ; BSR set to: 0
 10990                           ;doprnt.c: 1389: width -= c;
 10991  000DCC  0100               	movlb	0	; () banked
 10992  000DCE  0100               	movlb	0	; () banked
 10993  000DD0  5181               	movf	sprintf@c& (0+255),w,b
 10994  000DD2  0100               	movlb	0	; () banked
 10995  000DD4  0100               	movlb	0	; () banked
 10996  000DD6  5F7D               	subwf	sprintf@width& (0+255),f,b
 10997  000DD8  0E00               	movlw	0
 10998  000DDA  0100               	movlb	0	; () banked
 10999  000DDC  BF81               	btfsc	sprintf@c& (0+255),7,b
 11000  000DDE  0EFF               	movlw	255
 11001  000DE0  0100               	movlb	0	; () banked
 11002  000DE2  0100               	movlb	0	; () banked
 11003  000DE4  5B7E               	subwfb	(sprintf@width+1)& (0+255),f,b
 11004  000DE6  D007               	goto	i2l9091
 11005  000DE8                     i2l9089:
 11006                           
 11007                           ; BSR set to: 0
 11008                           ;doprnt.c: 1390: else
 11009                           ;doprnt.c: 1391: width = 0;
 11010  000DE8  0E00               	movlw	0
 11011  000DEA  0100               	movlb	0	; () banked
 11012  000DEC  0100               	movlb	0	; () banked
 11013  000DEE  6F7E               	movwf	(sprintf@width+1)& (0+255),b
 11014  000DF0  0E00               	movlw	0
 11015  000DF2  0100               	movlb	0	; () banked
 11016  000DF4  6F7D               	movwf	sprintf@width& (0+255),b
 11017  000DF6                     i2l9091:
 11018                           
 11019                           ; BSR set to: 0
 11020                           ;doprnt.c: 1394: if(flag & 0x04) {
 11021  000DF6  0100               	movlb	0	; () banked
 11022  000DF8  0100               	movlb	0	; () banked
 11023  000DFA  A578               	btfss	sprintf@flag& (0+255),2,b
 11024  000DFC  D02D               	goto	i2l9107
 11025                           
 11026                           ; BSR set to: 0
 11027                           ;doprnt.c: 1399: if(flag & 0x03)
 11028  000DFE  0E03               	movlw	3
 11029  000E00  0100               	movlb	0	; () banked
 11030  000E02  0100               	movlb	0	; () banked
 11031  000E04  1578               	andwf	sprintf@flag& (0+255),w,b
 11032  000E06  0100               	movlb	0	; () banked
 11033  000E08  6F60               	movwf	??_sprintf& (0+255),b
 11034  000E0A  0E00               	movlw	0
 11035  000E0C  0100               	movlb	0	; () banked
 11036  000E0E  0100               	movlb	0	; () banked
 11037  000E10  1579               	andwf	(sprintf@flag+1)& (0+255),w,b
 11038  000E12  0100               	movlb	0	; () banked
 11039  000E14  6F61               	movwf	(??_sprintf+1)& (0+255),b
 11040  000E16  0100               	movlb	0	; () banked
 11041  000E18  5161               	movf	(??_sprintf+1)& (0+255),w,b
 11042  000E1A  1160               	iorwf	??_sprintf& (0+255),w,b
 11043  000E1C  B4D8               	btfsc	status,2,c
 11044  000E1E  D008               	goto	i2l9099
 11045                           
 11046                           ; BSR set to: 0
 11047                           ;doprnt.c: 1400: ((*sp++ = ('-')));
 11048  000E20  C053  FFD9         	movff	sprintf@sp,fsr2l
 11049  000E24  C054  FFDA         	movff	sprintf@sp+1,fsr2h
 11050  000E28  0E2D               	movlw	45
 11051  000E2A  6EDF               	movwf	indf2,c
 11052                           
 11053                           ; BSR set to: 0
 11054  000E2C  4A53               	infsnz	sprintf@sp,f,c
 11055  000E2E  2A54               	incf	sprintf@sp+1,f,c
 11056  000E30                     i2l9099:
 11057                           
 11058                           ; BSR set to: 0
 11059                           ;doprnt.c: 1422: if(width)
 11060  000E30  0100               	movlb	0	; () banked
 11061  000E32  0100               	movlb	0	; () banked
 11062  000E34  517E               	movf	(sprintf@width+1)& (0+255),w,b
 11063  000E36  117D               	iorwf	sprintf@width& (0+255),w,b
 11064  000E38  B4D8               	btfsc	status,2,c
 11065  000E3A  D089               	goto	i2l9127
 11066                           
 11067                           ; BSR set to: 0
 11068                           ;doprnt.c: 1424: ((*sp++ = ('0')));
 11069                           
 11070                           ; BSR set to: 0
 11071                           
 11072                           ;doprnt.c: 1423: do
 11073  000E3C  C053  FFD9         	movff	sprintf@sp,fsr2l
 11074  000E40  C054  FFDA         	movff	sprintf@sp+1,fsr2h
 11075  000E44  0E30               	movlw	48
 11076  000E46  6EDF               	movwf	indf2,c
 11077                           
 11078                           ; BSR set to: 0
 11079  000E48  4A53               	infsnz	sprintf@sp,f,c
 11080  000E4A  2A54               	incf	sprintf@sp+1,f,c
 11081                           
 11082                           ; BSR set to: 0
 11083                           ;doprnt.c: 1425: while(--width);
 11084  000E4C  0100               	movlb	0	; () banked
 11085  000E4E  0100               	movlb	0	; () banked
 11086  000E50  077D               	decf	sprintf@width& (0+255),f,b
 11087  000E52  A0D8               	btfss	status,0,c
 11088  000E54  077E               	decf	(sprintf@width+1)& (0+255),f,b
 11089  000E56  D7ED               	goto	L18
 11090  000E58                     i2l9107:
 11091                           
 11092                           ; BSR set to: 0
 11093                           ;doprnt.c: 1429: {
 11094                           ;doprnt.c: 1431: if(width
 11095                           ;doprnt.c: 1435: )
 11096  000E58  0100               	movlb	0	; () banked
 11097  000E5A  0100               	movlb	0	; () banked
 11098  000E5C  517E               	movf	(sprintf@width+1)& (0+255),w,b
 11099  000E5E  117D               	iorwf	sprintf@width& (0+255),w,b
 11100  000E60  B4D8               	btfsc	status,2,c
 11101  000E62  D012               	goto	i2l9115
 11102  000E64                     i2l9109:
 11103                           
 11104                           ; BSR set to: 0
 11105                           ;doprnt.c: 1437: ((*sp++ = (' ')));
 11106  000E64  C053  FFD9         	movff	sprintf@sp,fsr2l
 11107  000E68  C054  FFDA         	movff	sprintf@sp+1,fsr2h
 11108  000E6C  0E20               	movlw	32
 11109  000E6E  6EDF               	movwf	indf2,c
 11110                           
 11111                           ; BSR set to: 0
 11112  000E70  4A53               	infsnz	sprintf@sp,f,c
 11113  000E72  2A54               	incf	sprintf@sp+1,f,c
 11114                           
 11115                           ; BSR set to: 0
 11116                           ;doprnt.c: 1438: while(--width);
 11117  000E74  0100               	movlb	0	; () banked
 11118  000E76  0100               	movlb	0	; () banked
 11119  000E78  077D               	decf	sprintf@width& (0+255),f,b
 11120  000E7A  A0D8               	btfss	status,0,c
 11121  000E7C  077E               	decf	(sprintf@width+1)& (0+255),f,b
 11122  000E7E  0100               	movlb	0	; () banked
 11123  000E80  517E               	movf	(sprintf@width+1)& (0+255),w,b
 11124  000E82  117D               	iorwf	sprintf@width& (0+255),w,b
 11125  000E84  A4D8               	btfss	status,2,c
 11126  000E86  D7EE               	goto	i2l9109
 11127  000E88                     i2l9115:
 11128                           
 11129                           ; BSR set to: 0
 11130                           ;doprnt.c: 1445: if(flag & 0x03)
 11131  000E88  0E03               	movlw	3
 11132  000E8A  0100               	movlb	0	; () banked
 11133  000E8C  0100               	movlb	0	; () banked
 11134  000E8E  1578               	andwf	sprintf@flag& (0+255),w,b
 11135  000E90  0100               	movlb	0	; () banked
 11136  000E92  6F60               	movwf	??_sprintf& (0+255),b
 11137  000E94  0E00               	movlw	0
 11138  000E96  0100               	movlb	0	; () banked
 11139  000E98  0100               	movlb	0	; () banked
 11140  000E9A  1579               	andwf	(sprintf@flag+1)& (0+255),w,b
 11141  000E9C  0100               	movlb	0	; () banked
 11142  000E9E  6F61               	movwf	(??_sprintf+1)& (0+255),b
 11143  000EA0  0100               	movlb	0	; () banked
 11144  000EA2  5161               	movf	(??_sprintf+1)& (0+255),w,b
 11145  000EA4  1160               	iorwf	??_sprintf& (0+255),w,b
 11146  000EA6  B4D8               	btfsc	status,2,c
 11147  000EA8  D052               	goto	i2l9127
 11148                           
 11149                           ; BSR set to: 0
 11150                           ;doprnt.c: 1446: ((*sp++ = ('-')));
 11151  000EAA  C053  FFD9         	movff	sprintf@sp,fsr2l
 11152  000EAE  C054  FFDA         	movff	sprintf@sp+1,fsr2h
 11153  000EB2  0E2D               	movlw	45
 11154  000EB4  6EDF               	movwf	indf2,c
 11155  000EB6  D049               	goto	L17
 11156  000EB8                     i2l9121:
 11157                           
 11158                           ; BSR set to: 0
 11159                           ;doprnt.c: 1485: {
 11160                           ;doprnt.c: 1496: c = (_val._val / dpowers[prec]) % 10 + '0';
 11161  000EB8  0100               	movlb	0	; () banked
 11162  000EBA  C07F  F060         	movff	sprintf@prec,??_sprintf
 11163  000EBE  0100               	movlb	0	; () banked
 11164  000EC0  C080  F061         	movff	sprintf@prec+1,??_sprintf+1
 11165  000EC4  0100               	movlb	0	; () banked
 11166  000EC6  90D8               	bcf	status,0,c
 11167  000EC8  3760               	rlcf	??_sprintf& (0+255),f,b
 11168  000ECA  3761               	rlcf	(??_sprintf+1)& (0+255),f,b
 11169  000ECC  0100               	movlb	0	; () banked
 11170  000ECE  90D8               	bcf	status,0,c
 11171  000ED0  3760               	rlcf	??_sprintf& (0+255),f,b
 11172  000ED2  3761               	rlcf	(??_sprintf+1)& (0+255),f,b
 11173  000ED4  0EE3               	movlw	low _dpowers
 11174  000ED6  0100               	movlb	0	; () banked
 11175  000ED8  2560               	addwf	??_sprintf& (0+255),w,b
 11176  000EDA  6EF6               	movwf	tblptrl,c
 11177  000EDC  0E7E               	movlw	high _dpowers
 11178  000EDE  2161               	addwfc	(??_sprintf+1)& (0+255),w,b
 11179  000EE0  6EF7               	movwf	tblptrh,c
 11180  000EE2  0009               	tblrd		*+
 11181  000EE4  CFF5 F005          	movff	tablat,?___lldiv+4
 11182  000EE8  0009               	tblrd		*+
 11183  000EEA  CFF5 F006          	movff	tablat,?___lldiv+5
 11184  000EEE  0009               	tblrd		*+
 11185  000EF0  CFF5 F007          	movff	tablat,?___lldiv+6
 11186  000EF4  000A               	tblrd		*-
 11187  000EF6  CFF5 F008          	movff	tablat,?___lldiv+7
 11188  000EFA  C082  F001         	movff	sprintf@_val,?___lldiv
 11189  000EFE  C083  F002         	movff	sprintf@_val+1,?___lldiv+1
 11190  000F02  C084  F003         	movff	sprintf@_val+2,?___lldiv+2
 11191  000F06  C085  F004         	movff	sprintf@_val+3,?___lldiv+3
 11192  000F0A  EC07  F021         	call	___lldiv	;wreg free
 11193  000F0E  C004  F017         	movff	?___lldiv+3,?___llmod+3
 11194  000F12  C003  F016         	movff	?___lldiv+2,?___llmod+2
 11195  000F16  C002  F015         	movff	?___lldiv+1,?___llmod+1
 11196  000F1A  C001  F014         	movff	?___lldiv,?___llmod
 11197  000F1E  0E0A               	movlw	10
 11198  000F20  6E18               	movwf	?___llmod+4,c
 11199  000F22  0E00               	movlw	0
 11200  000F24  6E19               	movwf	?___llmod+5,c
 11201  000F26  0E00               	movlw	0
 11202  000F28  6E1A               	movwf	?___llmod+6,c
 11203  000F2A  0E00               	movlw	0
 11204  000F2C  6E1B               	movwf	?___llmod+7,c
 11205  000F2E  ECA7  F022         	call	___llmod	;wreg free
 11206  000F32  5014               	movf	?___llmod,w,c
 11207  000F34  0F30               	addlw	48
 11208  000F36  0100               	movlb	0	; () banked
 11209  000F38  0100               	movlb	0	; () banked
 11210  000F3A  6F81               	movwf	sprintf@c& (0+255),b
 11211                           
 11212                           ; BSR set to: 0
 11213                           ;doprnt.c: 1530: }
 11214                           ;doprnt.c: 1531: ((*sp++ = (c)));
 11215  000F3C  C053  FFD9         	movff	sprintf@sp,fsr2l
 11216  000F40  C054  FFDA         	movff	sprintf@sp+1,fsr2h
 11217  000F44  0100               	movlb	0	; () banked
 11218  000F46  C081  FFDF         	movff	sprintf@c,indf2
 11219  000F4A                     L17:
 11220                           
 11221                           ; BSR set to: 0
 11222  000F4A  4A53               	infsnz	sprintf@sp,f,c
 11223  000F4C  2A54               	incf	sprintf@sp+1,f,c
 11224  000F4E                     i2l9127:
 11225                           
 11226                           ; BSR set to: 0
 11227  000F4E  0100               	movlb	0	; () banked
 11228  000F50  0100               	movlb	0	; () banked
 11229  000F52  077F               	decf	sprintf@prec& (0+255),f,b
 11230  000F54  A0D8               	btfss	status,0,c
 11231  000F56  0780               	decf	(sprintf@prec+1)& (0+255),f,b
 11232  000F58  0100               	movlb	0	; () banked
 11233  000F5A  297F               	incf	sprintf@prec& (0+255),w,b
 11234  000F5C  B4D8               	btfsc	status,2,c
 11235  000F5E  2980               	incf	(sprintf@prec+1)& (0+255),w,b
 11236  000F60  A4D8               	btfss	status,2,c
 11237  000F62  D7AA               	goto	i2l9121
 11238  000F64                     i2l9129:
 11239                           
 11240                           ; BSR set to: 0
 11241  000F64  C055  FFF6         	movff	sprintf@f,tblptrl
 11242  000F68  C056  FFF7         	movff	sprintf@f+1,tblptrh
 11243  000F6C  4A55               	infsnz	sprintf@f,f,c
 11244  000F6E  2A56               	incf	sprintf@f+1,f,c
 11245  000F70  0008               	tblrd		*
 11246  000F72  0100               	movlb	0	; () banked
 11247  000F74  CFF5 F081          	movff	tablat,sprintf@c
 11248  000F78  0100               	movlb	0	; () banked
 11249  000F7A  6781               	tstfsz	sprintf@c& (0+255),b
 11250  000F7C  EF17  F000         	goto	i2l8737
 11251  000F80                     i2l9131:
 11252                           
 11253                           ; BSR set to: 0
 11254                           ;doprnt.c: 1545: *sp = 0;
 11255  000F80  C053  FFD9         	movff	sprintf@sp,fsr2l
 11256  000F84  C054  FFDA         	movff	sprintf@sp+1,fsr2h
 11257  000F88  0E00               	movlw	0
 11258  000F8A  6EDF               	movwf	indf2,c
 11259                           
 11260                           ; BSR set to: 0
 11261                           
 11262                           ; BSR set to: 0
 11263                           ;doprnt.c: 1547: return 0;
 11264                           ;	Return value of _sprintf is never used
 11265  000F8C  0012               	return	
 11266  000F8E                     __end_of_sprintf:
 11267                           	opt stack 0
 11268                           tosu	equ	0xFFF
 11269                           tosh	equ	0xFFE
 11270                           tosl	equ	0xFFD
 11271                           pclatu	equ	0xFFB
 11272                           pclath	equ	0xFFA
 11273                           tblptru	equ	0xFF8
 11274                           tblptrh	equ	0xFF7
 11275                           tblptrl	equ	0xFF6
 11276                           tablat	equ	0xFF5
 11277                           prodh	equ	0xFF4
 11278                           prodl	equ	0xFF3
 11279                           intcon	equ	0xFF2
 11280                           intcon2	equ	0xFF1
 11281                           indf0	equ	0xFEF
 11282                           postinc0	equ	0xFEE
 11283                           fsr0h	equ	0xFEA
 11284                           fsr0l	equ	0xFE9
 11285                           wreg	equ	0xFE8
 11286                           postinc1	equ	0xFE6
 11287                           postdec1	equ	0xFE5
 11288                           fsr1h	equ	0xFE2
 11289                           fsr1l	equ	0xFE1
 11290                           indf2	equ	0xFDF
 11291                           postinc2	equ	0xFDE
 11292                           postdec2	equ	0xFDD
 11293                           plusw2	equ	0xFDB
 11294                           fsr2h	equ	0xFDA
 11295                           fsr2l	equ	0xFD9
 11296                           status	equ	0xFD8
 11297                           
 11298 ;; *************** function ___lltoft *****************
 11299 ;; Defined at:
 11300 ;;		line 36 in file "/usr/opt/microchip/xc8/v1.20/sources/common/lltoft.c"
 11301 ;; Parameters:    Size  Location     Type
 11302 ;;  c               4    8[COMRAM] unsigned long 
 11303 ;; Auto vars:     Size  Location     Type
 11304 ;;  exp             1   16[COMRAM] unsigned char 
 11305 ;; Return value:  Size  Location     Type
 11306 ;;                  3    8[COMRAM] float 
 11307 ;; Registers used:
 11308 ;;		wreg, status,2, status,0, cstack
 11309 ;; Tracked objects:
 11310 ;;		On entry : 0/0
 11311 ;;		On exit  : 0/0
 11312 ;;		Unchanged: 0/0
 11313 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11314 ;;      Params:         4       0       0       0       0       0       0       0       0
 11315 ;;      Locals:         1       0       0       0       0       0       0       0       0
 11316 ;;      Temps:          4       0       0       0       0       0       0       0       0
 11317 ;;      Totals:         9       0       0       0       0       0       0       0       0
 11318 ;;Total ram usage:        9 bytes
 11319 ;; Hardware stack levels used:    1
 11320 ;; Hardware stack levels required when called:    1
 11321 ;; This function calls:
 11322 ;;		___ftpack
 11323 ;; This function is called by:
 11324 ;;		_sprintf
 11325 ;; This function uses a non-reentrant model
 11326 ;;
 11327                           
 11328                           	psect	text31
 11329  00461C                     __ptext31:
 11330                           	opt stack 0
 11331  00461C                     ___lltoft:
 11332                           	opt stack 22
 11333                           
 11334                           ; BSR set to: 0
 11335                           ;incstack = 0
 11336                           ;incstack = 0
 11337  00461C  6E0D               	movwf	??___lltoft& (0+255),c
 11338  00461E  0E8E               	movlw	142
 11339  004620  6E11               	movwf	___lltoft@exp,c
 11340  004622  500D               	movf	??___lltoft& (0+255),w,c
 11341  004624  D006               	goto	i2l5917
 11342  004626                     i2l5915:
 11343  004626  90D8               	bcf	status,0,c
 11344  004628  320C               	rrcf	___lltoft@c+3,f,c
 11345  00462A  320B               	rrcf	___lltoft@c+2,f,c
 11346  00462C  320A               	rrcf	___lltoft@c+1,f,c
 11347  00462E  3209               	rrcf	___lltoft@c,f,c
 11348  004630  2A11               	incf	___lltoft@exp,f,c
 11349  004632                     i2l5917:
 11350  004632  0E00               	movlw	0
 11351  004634  1409               	andwf	___lltoft@c,w,c
 11352  004636  6E0D               	movwf	??___lltoft& (0+255),c
 11353  004638  0E00               	movlw	0
 11354  00463A  140A               	andwf	___lltoft@c+1,w,c
 11355  00463C  6E0E               	movwf	(??___lltoft+1)& (0+255),c
 11356  00463E  0E00               	movlw	0
 11357  004640  140B               	andwf	___lltoft@c+2,w,c
 11358  004642  6E0F               	movwf	(??___lltoft+2)& (0+255),c
 11359  004644  0EFF               	movlw	255
 11360  004646  140C               	andwf	___lltoft@c+3,w,c
 11361  004648  6E10               	movwf	(??___lltoft+3)& (0+255),c
 11362  00464A  5010               	movf	??___lltoft+3,w,c
 11363  00464C  100D               	iorwf	??___lltoft,w,c
 11364  00464E  100E               	iorwf	??___lltoft+1,w,c
 11365  004650  100F               	iorwf	??___lltoft+2,w,c
 11366  004652  A4D8               	btfss	status,2,c
 11367  004654  D7E8               	goto	i2l5915
 11368  004656  C009  F001         	movff	___lltoft@c,?___ftpack
 11369  00465A  C00A  F002         	movff	___lltoft@c+1,?___ftpack+1
 11370  00465E  C00B  F003         	movff	___lltoft@c+2,?___ftpack+2
 11371  004662  C011  F004         	movff	___lltoft@exp,?___ftpack+3
 11372  004666  6E0D               	movwf	??___lltoft& (0+255),c
 11373  004668  0E00               	movlw	0
 11374  00466A  6E05               	movwf	?___ftpack+4,c
 11375  00466C  500D               	movf	??___lltoft& (0+255),w,c
 11376  00466E  ECFF  F01D         	call	___ftpack	;wreg free
 11377  004672  C003  F00B         	movff	?___ftpack+2,?___lltoft+2
 11378  004676  C002  F00A         	movff	?___ftpack+1,?___lltoft+1
 11379  00467A  C001  F009         	movff	?___ftpack,?___lltoft
 11380  00467E  0012               	return	
 11381  004680                     __end_of___lltoft:
 11382                           	opt stack 0
 11383                           tosu	equ	0xFFF
 11384                           tosh	equ	0xFFE
 11385                           tosl	equ	0xFFD
 11386                           pclatu	equ	0xFFB
 11387                           pclath	equ	0xFFA
 11388                           tblptru	equ	0xFF8
 11389                           tblptrh	equ	0xFF7
 11390                           tblptrl	equ	0xFF6
 11391                           tablat	equ	0xFF5
 11392                           prodh	equ	0xFF4
 11393                           prodl	equ	0xFF3
 11394                           intcon	equ	0xFF2
 11395                           intcon2	equ	0xFF1
 11396                           indf0	equ	0xFEF
 11397                           postinc0	equ	0xFEE
 11398                           fsr0h	equ	0xFEA
 11399                           fsr0l	equ	0xFE9
 11400                           wreg	equ	0xFE8
 11401                           postinc1	equ	0xFE6
 11402                           postdec1	equ	0xFE5
 11403                           fsr1h	equ	0xFE2
 11404                           fsr1l	equ	0xFE1
 11405                           indf2	equ	0xFDF
 11406                           postinc2	equ	0xFDE
 11407                           postdec2	equ	0xFDD
 11408                           plusw2	equ	0xFDB
 11409                           fsr2h	equ	0xFDA
 11410                           fsr2l	equ	0xFD9
 11411                           status	equ	0xFD8
 11412                           
 11413 ;; *************** function ___lldiv *****************
 11414 ;; Defined at:
 11415 ;;		line 10 in file "/usr/opt/microchip/xc8/v1.20/sources/common/lldiv.c"
 11416 ;; Parameters:    Size  Location     Type
 11417 ;;  dividend        4    0[COMRAM] unsigned long 
 11418 ;;  divisor         4    4[COMRAM] unsigned long 
 11419 ;; Auto vars:     Size  Location     Type
 11420 ;;  quotient        4   14[COMRAM] unsigned long 
 11421 ;;  counter         1   18[COMRAM] unsigned char 
 11422 ;; Return value:  Size  Location     Type
 11423 ;;                  4    0[COMRAM] unsigned long 
 11424 ;; Registers used:
 11425 ;;		wreg, status,2, status,0
 11426 ;; Tracked objects:
 11427 ;;		On entry : 0/0
 11428 ;;		On exit  : 0/0
 11429 ;;		Unchanged: 0/0
 11430 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11431 ;;      Params:         8       0       0       0       0       0       0       0       0
 11432 ;;      Locals:        10       0       0       0       0       0       0       0       0
 11433 ;;      Temps:          1       0       0       0       0       0       0       0       0
 11434 ;;      Totals:        19       0       0       0       0       0       0       0       0
 11435 ;;Total ram usage:       19 bytes
 11436 ;; Hardware stack levels used:    1
 11437 ;; This function calls:
 11438 ;;		Nothing
 11439 ;; This function is called by:
 11440 ;;		_sprintf
 11441 ;; This function uses a non-reentrant model
 11442 ;;
 11443                           
 11444                           	psect	text32
 11445  00420E                     __ptext32:
 11446                           	opt stack 0
 11447  00420E                     ___lldiv:
 11448                           	opt stack 23
 11449                           
 11450                           ;incstack = 0
 11451                           ;incstack = 0
 11452  00420E  0E00               	movlw	0
 11453  004210  6E0F               	movwf	___lldiv@quotient,c
 11454  004212  0E00               	movlw	0
 11455  004214  6E10               	movwf	___lldiv@quotient+1,c
 11456  004216  0E00               	movlw	0
 11457  004218  6E11               	movwf	___lldiv@quotient+2,c
 11458  00421A  0E00               	movlw	0
 11459  00421C  6E12               	movwf	___lldiv@quotient+3,c
 11460  00421E  5008               	movf	___lldiv@divisor+3,w,c
 11461  004220  1005               	iorwf	___lldiv@divisor,w,c
 11462  004222  1006               	iorwf	___lldiv@divisor+1,w,c
 11463  004224  1007               	iorwf	___lldiv@divisor+2,w,c
 11464  004226  B4D8               	btfsc	status,2,c
 11465  004228  D02C               	goto	i2l1176
 11466  00422A  6E09               	movwf	??___lldiv& (0+255),c
 11467  00422C  0E01               	movlw	1
 11468  00422E  6E13               	movwf	___lldiv@counter,c
 11469  004230  5009               	movf	??___lldiv& (0+255),w,c
 11470  004232  D006               	goto	i2l5693
 11471  004234                     i2l5691:
 11472  004234  90D8               	bcf	status,0,c
 11473  004236  3605               	rlcf	___lldiv@divisor,f,c
 11474  004238  3606               	rlcf	___lldiv@divisor+1,f,c
 11475  00423A  3607               	rlcf	___lldiv@divisor+2,f,c
 11476  00423C  3608               	rlcf	___lldiv@divisor+3,f,c
 11477  00423E  2A13               	incf	___lldiv@counter,f,c
 11478  004240                     i2l5693:
 11479  004240  AE08               	btfss	___lldiv@divisor+3,7,c
 11480  004242  D7F8               	goto	i2l5691
 11481  004244                     i2l5695:
 11482  004244  90D8               	bcf	status,0,c
 11483  004246  360F               	rlcf	___lldiv@quotient,f,c
 11484  004248  3610               	rlcf	___lldiv@quotient+1,f,c
 11485  00424A  3611               	rlcf	___lldiv@quotient+2,f,c
 11486  00424C  3612               	rlcf	___lldiv@quotient+3,f,c
 11487  00424E  5005               	movf	___lldiv@divisor,w,c
 11488  004250  5C01               	subwf	___lldiv@dividend,w,c
 11489  004252  5006               	movf	___lldiv@divisor+1,w,c
 11490  004254  5802               	subwfb	___lldiv@dividend+1,w,c
 11491  004256  5007               	movf	___lldiv@divisor+2,w,c
 11492  004258  5803               	subwfb	___lldiv@dividend+2,w,c
 11493  00425A  5008               	movf	___lldiv@divisor+3,w,c
 11494  00425C  5804               	subwfb	___lldiv@dividend+3,w,c
 11495  00425E  A0D8               	btfss	status,0,c
 11496  004260  D009               	goto	i2l5703
 11497  004262  5005               	movf	___lldiv@divisor,w,c
 11498  004264  5E01               	subwf	___lldiv@dividend,f,c
 11499  004266  5006               	movf	___lldiv@divisor+1,w,c
 11500  004268  5A02               	subwfb	___lldiv@dividend+1,f,c
 11501  00426A  5007               	movf	___lldiv@divisor+2,w,c
 11502  00426C  5A03               	subwfb	___lldiv@dividend+2,f,c
 11503  00426E  5008               	movf	___lldiv@divisor+3,w,c
 11504  004270  5A04               	subwfb	___lldiv@dividend+3,f,c
 11505  004272  800F               	bsf	___lldiv@quotient,0,c
 11506  004274                     i2l5703:
 11507  004274  90D8               	bcf	status,0,c
 11508  004276  3208               	rrcf	___lldiv@divisor+3,f,c
 11509  004278  3207               	rrcf	___lldiv@divisor+2,f,c
 11510  00427A  3206               	rrcf	___lldiv@divisor+1,f,c
 11511  00427C  3205               	rrcf	___lldiv@divisor,f,c
 11512  00427E  2E13               	decfsz	___lldiv@counter,f,c
 11513  004280  D7E1               	goto	i2l5695
 11514  004282                     i2l1176:
 11515  004282  C00F  F001         	movff	___lldiv@quotient,?___lldiv
 11516  004286  C010  F002         	movff	___lldiv@quotient+1,?___lldiv+1
 11517  00428A  C011  F003         	movff	___lldiv@quotient+2,?___lldiv+2
 11518  00428E  C012  F004         	movff	___lldiv@quotient+3,?___lldiv+3
 11519  004292  0012               	return	
 11520  004294                     __end_of___lldiv:
 11521                           	opt stack 0
 11522                           tosu	equ	0xFFF
 11523                           tosh	equ	0xFFE
 11524                           tosl	equ	0xFFD
 11525                           pclatu	equ	0xFFB
 11526                           pclath	equ	0xFFA
 11527                           tblptru	equ	0xFF8
 11528                           tblptrh	equ	0xFF7
 11529                           tblptrl	equ	0xFF6
 11530                           tablat	equ	0xFF5
 11531                           prodh	equ	0xFF4
 11532                           prodl	equ	0xFF3
 11533                           intcon	equ	0xFF2
 11534                           intcon2	equ	0xFF1
 11535                           indf0	equ	0xFEF
 11536                           postinc0	equ	0xFEE
 11537                           fsr0h	equ	0xFEA
 11538                           fsr0l	equ	0xFE9
 11539                           wreg	equ	0xFE8
 11540                           postinc1	equ	0xFE6
 11541                           postdec1	equ	0xFE5
 11542                           fsr1h	equ	0xFE2
 11543                           fsr1l	equ	0xFE1
 11544                           indf2	equ	0xFDF
 11545                           postinc2	equ	0xFDE
 11546                           postdec2	equ	0xFDD
 11547                           plusw2	equ	0xFDB
 11548                           fsr2h	equ	0xFDA
 11549                           fsr2l	equ	0xFD9
 11550                           status	equ	0xFD8
 11551                           
 11552 ;; *************** function ___fttol *****************
 11553 ;; Defined at:
 11554 ;;		line 45 in file "/usr/opt/microchip/xc8/v1.20/sources/common/fttol.c"
 11555 ;; Parameters:    Size  Location     Type
 11556 ;;  f1              3   30[COMRAM] float 
 11557 ;; Auto vars:     Size  Location     Type
 11558 ;;  lval            4   40[COMRAM] unsigned long 
 11559 ;;  exp1            1   44[COMRAM] unsigned char 
 11560 ;;  sign1           1   39[COMRAM] unsigned char 
 11561 ;; Return value:  Size  Location     Type
 11562 ;;                  4   30[COMRAM] long 
 11563 ;; Registers used:
 11564 ;;		wreg, status,2, status,0
 11565 ;; Tracked objects:
 11566 ;;		On entry : 0/0
 11567 ;;		On exit  : 0/0
 11568 ;;		Unchanged: 0/0
 11569 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11570 ;;      Params:         4       0       0       0       0       0       0       0       0
 11571 ;;      Locals:         6       0       0       0       0       0       0       0       0
 11572 ;;      Temps:          5       0       0       0       0       0       0       0       0
 11573 ;;      Totals:        15       0       0       0       0       0       0       0       0
 11574 ;;Total ram usage:       15 bytes
 11575 ;; Hardware stack levels used:    1
 11576 ;; This function calls:
 11577 ;;		Nothing
 11578 ;; This function is called by:
 11579 ;;		_sprintf
 11580 ;; This function uses a non-reentrant model
 11581 ;;
 11582                           
 11583                           	psect	text33
 11584  003A48                     __ptext33:
 11585                           	opt stack 0
 11586  003A48                     ___fttol:
 11587                           	opt stack 23
 11588                           
 11589                           ;incstack = 0
 11590                           ;incstack = 0
 11591  003A48  0E0F               	movlw	15
 11592  003A4A  6E23               	movwf	??___fttol& (0+255),c
 11593  003A4C  C01F  F024         	movff	___fttol@f1,??___fttol+1
 11594  003A50  C020  F025         	movff	___fttol@f1+1,??___fttol+2
 11595  003A54  C021  F026         	movff	___fttol@f1+2,??___fttol+3
 11596  003A58  2823               	incf	??___fttol,w,c
 11597  003A5A  6E27               	movwf	(??___fttol+4)& (0+255),c
 11598  003A5C  D004               	goto	i2u421_40
 11599  003A5E                     i2u421_45:
 11600  003A5E  90D8               	bcf	status,0,c
 11601  003A60  3226               	rrcf	??___fttol+3,f,c
 11602  003A62  3225               	rrcf	??___fttol+2,f,c
 11603  003A64  3224               	rrcf	??___fttol+1,f,c
 11604  003A66                     i2u421_40:
 11605  003A66  2E27               	decfsz	(??___fttol+4)& (0+255),f,c
 11606  003A68  D7FA               	goto	i2u421_45
 11607  003A6A  5024               	movf	??___fttol+1,w,c
 11608  003A6C  6E2D               	movwf	___fttol@exp1,c
 11609  003A6E  662D               	tstfsz	___fttol@exp1& (0+255),c
 11610  003A70  D001               	goto	i2l6089
 11611  003A72  D035               	goto	i2u426_40
 11612  003A74                     i2l6089:
 11613  003A74  0E17               	movlw	23
 11614  003A76  6E23               	movwf	??___fttol& (0+255),c
 11615  003A78  C01F  F024         	movff	___fttol@f1,??___fttol+1
 11616  003A7C  C020  F025         	movff	___fttol@f1+1,??___fttol+2
 11617  003A80  C021  F026         	movff	___fttol@f1+2,??___fttol+3
 11618  003A84  2823               	incf	??___fttol,w,c
 11619  003A86  6E27               	movwf	(??___fttol+4)& (0+255),c
 11620  003A88  D004               	goto	i2u423_40
 11621  003A8A                     i2u423_45:
 11622  003A8A  90D8               	bcf	status,0,c
 11623  003A8C  3226               	rrcf	??___fttol+3,f,c
 11624  003A8E  3225               	rrcf	??___fttol+2,f,c
 11625  003A90  3224               	rrcf	??___fttol+1,f,c
 11626  003A92                     i2u423_40:
 11627  003A92  2E27               	decfsz	(??___fttol+4)& (0+255),f,c
 11628  003A94  D7FA               	goto	i2u423_45
 11629  003A96  5024               	movf	??___fttol+1,w,c
 11630  003A98  6E28               	movwf	___fttol@sign1,c
 11631  003A9A  8E20               	bsf	___fttol@f1+1,7,c
 11632  003A9C  0EFF               	movlw	255
 11633  003A9E  161F               	andwf	___fttol@f1,f,c
 11634  003AA0  0EFF               	movlw	255
 11635  003AA2  1620               	andwf	___fttol@f1+1,f,c
 11636  003AA4  0E00               	movlw	0
 11637  003AA6  1621               	andwf	___fttol@f1+2,f,c
 11638  003AA8  501F               	movf	___fttol@f1,w,c
 11639  003AAA  6E29               	movwf	___fttol@lval,c
 11640  003AAC  5020               	movf	___fttol@f1+1,w,c
 11641  003AAE  6E2A               	movwf	___fttol@lval+1,c
 11642  003AB0  5021               	movf	___fttol@f1+2,w,c
 11643  003AB2  6E2B               	movwf	___fttol@lval+2,c
 11644  003AB4  6A2C               	clrf	___fttol@lval+3,c
 11645  003AB6  0E8E               	movlw	142
 11646  003AB8  5E2D               	subwf	___fttol@exp1,f,c
 11647  003ABA  AE2D               	btfss	___fttol@exp1,7,c
 11648  003ABC  D00D               	goto	i2l6111
 11649  003ABE  502D               	movf	___fttol@exp1,w,c
 11650  003AC0  0A80               	xorlw	128
 11651  003AC2  0F8F               	addlw	143
 11652  003AC4  A0D8               	btfss	status,0,c
 11653  003AC6  D00B               	goto	i2u426_40
 11654  003AC8                     i2l6107:
 11655  003AC8  90D8               	bcf	status,0,c
 11656  003ACA  322C               	rrcf	___fttol@lval+3,f,c
 11657  003ACC  322B               	rrcf	___fttol@lval+2,f,c
 11658  003ACE  322A               	rrcf	___fttol@lval+1,f,c
 11659  003AD0  3229               	rrcf	___fttol@lval,f,c
 11660  003AD2  3E2D               	incfsz	___fttol@exp1,f,c
 11661  003AD4  D7F9               	goto	i2l6107
 11662  003AD6  D014               	goto	i2l6121
 11663  003AD8                     i2l6111:
 11664  003AD8  0E17               	movlw	23
 11665  003ADA  642D               	cpfsgt	___fttol@exp1,c
 11666  003ADC  D00F               	goto	i2l6119
 11667  003ADE                     i2u426_40:
 11668  003ADE  0E00               	movlw	0
 11669  003AE0  6E1F               	movwf	?___fttol,c
 11670  003AE2  0E00               	movlw	0
 11671  003AE4  6E20               	movwf	?___fttol+1,c
 11672  003AE6  0E00               	movlw	0
 11673  003AE8  6E21               	movwf	?___fttol+2,c
 11674  003AEA  0E00               	movlw	0
 11675  003AEC  6E22               	movwf	?___fttol+3,c
 11676  003AEE  D01B               	goto	i2l1132
 11677  003AF0                     i2l6117:
 11678  003AF0  90D8               	bcf	status,0,c
 11679  003AF2  3629               	rlcf	___fttol@lval,f,c
 11680  003AF4  362A               	rlcf	___fttol@lval+1,f,c
 11681  003AF6  362B               	rlcf	___fttol@lval+2,f,c
 11682  003AF8  362C               	rlcf	___fttol@lval+3,f,c
 11683  003AFA  062D               	decf	___fttol@exp1,f,c
 11684  003AFC                     i2l6119:
 11685  003AFC  662D               	tstfsz	___fttol@exp1,c
 11686  003AFE  D7F8               	goto	i2l6117
 11687  003B00                     i2l6121:
 11688  003B00  5028               	movf	___fttol@sign1,w,c
 11689  003B02  B4D8               	btfsc	status,2,c
 11690  003B04  D008               	goto	i2l6125
 11691  003B06  1E2C               	comf	___fttol@lval+3,f,c
 11692  003B08  1E2B               	comf	___fttol@lval+2,f,c
 11693  003B0A  1E2A               	comf	___fttol@lval+1,f,c
 11694  003B0C  6C29               	negf	___fttol@lval,c
 11695  003B0E  0E00               	movlw	0
 11696  003B10  222A               	addwfc	___fttol@lval+1,f,c
 11697  003B12  222B               	addwfc	___fttol@lval+2,f,c
 11698  003B14  222C               	addwfc	___fttol@lval+3,f,c
 11699  003B16                     i2l6125:
 11700  003B16  C029  F01F         	movff	___fttol@lval,?___fttol
 11701  003B1A  C02A  F020         	movff	___fttol@lval+1,?___fttol+1
 11702  003B1E  C02B  F021         	movff	___fttol@lval+2,?___fttol+2
 11703  003B22  C02C  F022         	movff	___fttol@lval+3,?___fttol+3
 11704  003B26                     i2l1132:
 11705  003B26  0012               	return	
 11706  003B28                     __end_of___fttol:
 11707                           	opt stack 0
 11708                           tosu	equ	0xFFF
 11709                           tosh	equ	0xFFE
 11710                           tosl	equ	0xFFD
 11711                           pclatu	equ	0xFFB
 11712                           pclath	equ	0xFFA
 11713                           tblptru	equ	0xFF8
 11714                           tblptrh	equ	0xFF7
 11715                           tblptrl	equ	0xFF6
 11716                           tablat	equ	0xFF5
 11717                           prodh	equ	0xFF4
 11718                           prodl	equ	0xFF3
 11719                           intcon	equ	0xFF2
 11720                           intcon2	equ	0xFF1
 11721                           indf0	equ	0xFEF
 11722                           postinc0	equ	0xFEE
 11723                           fsr0h	equ	0xFEA
 11724                           fsr0l	equ	0xFE9
 11725                           wreg	equ	0xFE8
 11726                           postinc1	equ	0xFE6
 11727                           postdec1	equ	0xFE5
 11728                           fsr1h	equ	0xFE2
 11729                           fsr1l	equ	0xFE1
 11730                           indf2	equ	0xFDF
 11731                           postinc2	equ	0xFDE
 11732                           postdec2	equ	0xFDD
 11733                           plusw2	equ	0xFDB
 11734                           fsr2h	equ	0xFDA
 11735                           fsr2l	equ	0xFD9
 11736                           status	equ	0xFD8
 11737                           
 11738 ;; *************** function ___ftneg *****************
 11739 ;; Defined at:
 11740 ;;		line 16 in file "/usr/opt/microchip/xc8/v1.20/sources/common/ftneg.c"
 11741 ;; Parameters:    Size  Location     Type
 11742 ;;  f1              3    0[COMRAM] float 
 11743 ;; Auto vars:     Size  Location     Type
 11744 ;;		None
 11745 ;; Return value:  Size  Location     Type
 11746 ;;                  3    0[COMRAM] float 
 11747 ;; Registers used:
 11748 ;;		wreg, status,2, status,0
 11749 ;; Tracked objects:
 11750 ;;		On entry : 0/0
 11751 ;;		On exit  : 0/0
 11752 ;;		Unchanged: 0/0
 11753 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11754 ;;      Params:         3       0       0       0       0       0       0       0       0
 11755 ;;      Locals:         0       0       0       0       0       0       0       0       0
 11756 ;;      Temps:          0       0       0       0       0       0       0       0       0
 11757 ;;      Totals:         3       0       0       0       0       0       0       0       0
 11758 ;;Total ram usage:        3 bytes
 11759 ;; Hardware stack levels used:    1
 11760 ;; This function calls:
 11761 ;;		Nothing
 11762 ;; This function is called by:
 11763 ;;		_sprintf
 11764 ;; This function uses a non-reentrant model
 11765 ;;
 11766                           
 11767                           	psect	text34
 11768  0049AC                     __ptext34:
 11769                           	opt stack 0
 11770  0049AC                     ___ftneg:
 11771                           	opt stack 23
 11772                           
 11773                           ;incstack = 0
 11774                           ;incstack = 0
 11775  0049AC  0E7F               	movlw	127
 11776  0049AE  1403               	andwf	___ftneg@f1+2,w,c
 11777  0049B0  1002               	iorwf	___ftneg@f1+1,w,c
 11778  0049B2  1001               	iorwf	___ftneg@f1,w,c
 11779  0049B4  B4D8               	btfsc	status,2,c
 11780  0049B6  D006               	goto	i2l1122
 11781  0049B8  0E00               	movlw	0
 11782  0049BA  1A01               	xorwf	___ftneg@f1,f,c
 11783  0049BC  0E00               	movlw	0
 11784  0049BE  1A02               	xorwf	___ftneg@f1+1,f,c
 11785  0049C0  0E80               	movlw	128
 11786  0049C2  1A03               	xorwf	___ftneg@f1+2,f,c
 11787  0049C4                     i2l1122:
 11788  0049C4  C001  F001         	movff	___ftneg@f1,?___ftneg
 11789  0049C8  C002  F002         	movff	___ftneg@f1+1,?___ftneg+1
 11790  0049CC  C003  F003         	movff	___ftneg@f1+2,?___ftneg+2
 11791  0049D0  0012               	return	
 11792  0049D2                     __end_of___ftneg:
 11793                           	opt stack 0
 11794                           tosu	equ	0xFFF
 11795                           tosh	equ	0xFFE
 11796                           tosl	equ	0xFFD
 11797                           pclatu	equ	0xFFB
 11798                           pclath	equ	0xFFA
 11799                           tblptru	equ	0xFF8
 11800                           tblptrh	equ	0xFF7
 11801                           tblptrl	equ	0xFF6
 11802                           tablat	equ	0xFF5
 11803                           prodh	equ	0xFF4
 11804                           prodl	equ	0xFF3
 11805                           intcon	equ	0xFF2
 11806                           intcon2	equ	0xFF1
 11807                           indf0	equ	0xFEF
 11808                           postinc0	equ	0xFEE
 11809                           fsr0h	equ	0xFEA
 11810                           fsr0l	equ	0xFE9
 11811                           wreg	equ	0xFE8
 11812                           postinc1	equ	0xFE6
 11813                           postdec1	equ	0xFE5
 11814                           fsr1h	equ	0xFE2
 11815                           fsr1l	equ	0xFE1
 11816                           indf2	equ	0xFDF
 11817                           postinc2	equ	0xFDE
 11818                           postdec2	equ	0xFDD
 11819                           plusw2	equ	0xFDB
 11820                           fsr2h	equ	0xFDA
 11821                           fsr2l	equ	0xFD9
 11822                           status	equ	0xFD8
 11823                           
 11824 ;; *************** function ___ftge *****************
 11825 ;; Defined at:
 11826 ;;		line 5 in file "/usr/opt/microchip/xc8/v1.20/sources/common/ftge.c"
 11827 ;; Parameters:    Size  Location     Type
 11828 ;;  ff1             3    0[COMRAM] float 
 11829 ;;  ff2             3    3[COMRAM] float 
 11830 ;; Auto vars:     Size  Location     Type
 11831 ;;		None
 11832 ;; Return value:  Size  Location     Type
 11833 ;;		None               void
 11834 ;; Registers used:
 11835 ;;		wreg, status,2, status,0
 11836 ;; Tracked objects:
 11837 ;;		On entry : 0/0
 11838 ;;		On exit  : 0/0
 11839 ;;		Unchanged: 0/0
 11840 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11841 ;;      Params:         6       0       0       0       0       0       0       0       0
 11842 ;;      Locals:         0       0       0       0       0       0       0       0       0
 11843 ;;      Temps:          3       0       0       0       0       0       0       0       0
 11844 ;;      Totals:         9       0       0       0       0       0       0       0       0
 11845 ;;Total ram usage:        9 bytes
 11846 ;; Hardware stack levels used:    1
 11847 ;; This function calls:
 11848 ;;		Nothing
 11849 ;; This function is called by:
 11850 ;;		_sprintf
 11851 ;; This function uses a non-reentrant model
 11852 ;;
 11853                           
 11854                           	psect	text35
 11855  004068                     __ptext35:
 11856                           	opt stack 0
 11857  004068                     ___ftge:
 11858                           	opt stack 23
 11859                           
 11860                           ;incstack = 0
 11861                           ;incstack = 0
 11862  004068  AE03               	btfss	___ftge@ff1+2,7,c
 11863  00406A  D016               	goto	i2l5667
 11864  00406C  C001  F007         	movff	___ftge@ff1,??___ftge
 11865  004070  C002  F008         	movff	___ftge@ff1+1,??___ftge+1
 11866  004074  C003  F009         	movff	___ftge@ff1+2,??___ftge+2
 11867  004078  1E07               	comf	??___ftge,f,c
 11868  00407A  1E08               	comf	??___ftge+1,f,c
 11869  00407C  1E09               	comf	??___ftge+2,f,c
 11870  00407E  2A07               	incf	??___ftge,f,c
 11871  004080  0E00               	movlw	0
 11872  004082  2208               	addwfc	??___ftge+1,f,c
 11873  004084  2209               	addwfc	??___ftge+2,f,c
 11874  004086  0E00               	movlw	0
 11875  004088  2407               	addwf	??___ftge,w,c
 11876  00408A  6E01               	movwf	___ftge@ff1,c
 11877  00408C  0E00               	movlw	0
 11878  00408E  2008               	addwfc	??___ftge+1,w,c
 11879  004090  6E02               	movwf	___ftge@ff1+1,c
 11880  004092  0E80               	movlw	128
 11881  004094  2009               	addwfc	??___ftge+2,w,c
 11882  004096  6E03               	movwf	___ftge@ff1+2,c
 11883  004098                     i2l5667:
 11884  004098  AE06               	btfss	___ftge@ff2+2,7,c
 11885  00409A  D016               	goto	i2l5671
 11886  00409C  C004  F007         	movff	___ftge@ff2,??___ftge
 11887  0040A0  C005  F008         	movff	___ftge@ff2+1,??___ftge+1
 11888  0040A4  C006  F009         	movff	___ftge@ff2+2,??___ftge+2
 11889  0040A8  1E07               	comf	??___ftge,f,c
 11890  0040AA  1E08               	comf	??___ftge+1,f,c
 11891  0040AC  1E09               	comf	??___ftge+2,f,c
 11892  0040AE  2A07               	incf	??___ftge,f,c
 11893  0040B0  0E00               	movlw	0
 11894  0040B2  2208               	addwfc	??___ftge+1,f,c
 11895  0040B4  2209               	addwfc	??___ftge+2,f,c
 11896  0040B6  0E00               	movlw	0
 11897  0040B8  2407               	addwf	??___ftge,w,c
 11898  0040BA  6E04               	movwf	___ftge@ff2,c
 11899  0040BC  0E00               	movlw	0
 11900  0040BE  2008               	addwfc	??___ftge+1,w,c
 11901  0040C0  6E05               	movwf	___ftge@ff2+1,c
 11902  0040C2  0E80               	movlw	128
 11903  0040C4  2009               	addwfc	??___ftge+2,w,c
 11904  0040C6  6E06               	movwf	___ftge@ff2+2,c
 11905  0040C8                     i2l5671:
 11906  0040C8  0E00               	movlw	0
 11907  0040CA  1A01               	xorwf	___ftge@ff1,f,c
 11908  0040CC  0E00               	movlw	0
 11909  0040CE  1A02               	xorwf	___ftge@ff1+1,f,c
 11910  0040D0  0E80               	movlw	128
 11911  0040D2  1A03               	xorwf	___ftge@ff1+2,f,c
 11912  0040D4  0E00               	movlw	0
 11913  0040D6  1A04               	xorwf	___ftge@ff2,f,c
 11914  0040D8  0E00               	movlw	0
 11915  0040DA  1A05               	xorwf	___ftge@ff2+1,f,c
 11916  0040DC  0E80               	movlw	128
 11917  0040DE  1A06               	xorwf	___ftge@ff2+2,f,c
 11918  0040E0  5004               	movf	___ftge@ff2,w,c
 11919  0040E2  5C01               	subwf	___ftge@ff1,w,c
 11920  0040E4  5005               	movf	___ftge@ff2+1,w,c
 11921  0040E6  5802               	subwfb	___ftge@ff1+1,w,c
 11922  0040E8  5006               	movf	___ftge@ff2+2,w,c
 11923  0040EA  5803               	subwfb	___ftge@ff1+2,w,c
 11924  0040EC  B0D8               	btfsc	status,0,c
 11925  0040EE  D002               	goto	i2l5677
 11926  0040F0  90D8               	bcf	status,0,c
 11927  0040F2  D001               	goto	i2l1106
 11928  0040F4                     i2l5677:
 11929  0040F4  80D8               	bsf	status,0,c
 11930  0040F6                     i2l1106:
 11931  0040F6  0012               	return	
 11932  0040F8                     __end_of___ftge:
 11933                           	opt stack 0
 11934                           tosu	equ	0xFFF
 11935                           tosh	equ	0xFFE
 11936                           tosl	equ	0xFFD
 11937                           pclatu	equ	0xFFB
 11938                           pclath	equ	0xFFA
 11939                           tblptru	equ	0xFF8
 11940                           tblptrh	equ	0xFF7
 11941                           tblptrl	equ	0xFF6
 11942                           tablat	equ	0xFF5
 11943                           prodh	equ	0xFF4
 11944                           prodl	equ	0xFF3
 11945                           intcon	equ	0xFF2
 11946                           intcon2	equ	0xFF1
 11947                           indf0	equ	0xFEF
 11948                           postinc0	equ	0xFEE
 11949                           fsr0h	equ	0xFEA
 11950                           fsr0l	equ	0xFE9
 11951                           wreg	equ	0xFE8
 11952                           postinc1	equ	0xFE6
 11953                           postdec1	equ	0xFE5
 11954                           fsr1h	equ	0xFE2
 11955                           fsr1l	equ	0xFE1
 11956                           indf2	equ	0xFDF
 11957                           postinc2	equ	0xFDE
 11958                           postdec2	equ	0xFDD
 11959                           plusw2	equ	0xFDB
 11960                           fsr2h	equ	0xFDA
 11961                           fsr2l	equ	0xFD9
 11962                           status	equ	0xFD8
 11963                           
 11964 ;; *************** function ___asftsub *****************
 11965 ;; Defined at:
 11966 ;;		line 5 in file "/usr/opt/microchip/xc8/v1.20/sources/pic18/asftsub.c"
 11967 ;; Parameters:    Size  Location     Type
 11968 ;;  f1p             2   28[COMRAM] PTR float 
 11969 ;;		 -> sprintf@fval(3), 
 11970 ;;  f2              3   30[COMRAM] float 
 11971 ;; Auto vars:     Size  Location     Type
 11972 ;;		None
 11973 ;; Return value:  Size  Location     Type
 11974 ;;                  3   28[COMRAM] float 
 11975 ;; Registers used:
 11976 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 11977 ;; Tracked objects:
 11978 ;;		On entry : 0/0
 11979 ;;		On exit  : 0/0
 11980 ;;		Unchanged: 0/0
 11981 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11982 ;;      Params:         5       0       0       0       0       0       0       0       0
 11983 ;;      Locals:         0       0       0       0       0       0       0       0       0
 11984 ;;      Temps:          0       0       0       0       0       0       0       0       0
 11985 ;;      Totals:         5       0       0       0       0       0       0       0       0
 11986 ;;Total ram usage:        5 bytes
 11987 ;; Hardware stack levels used:    1
 11988 ;; Hardware stack levels required when called:    3
 11989 ;; This function calls:
 11990 ;;		___ftsub
 11991 ;; This function is called by:
 11992 ;;		_sprintf
 11993 ;; This function uses a non-reentrant model
 11994 ;;
 11995                           
 11996                           	psect	text36
 11997  0047FC                     __ptext36:
 11998                           	opt stack 0
 11999  0047FC                     ___asftsub:
 12000                           	opt stack 20
 12001                           
 12002                           ;	Return value of ___asftsub is never used
 12003                           
 12004                           ;incstack = 0
 12005                           ;incstack = 0
 12006  0047FC  C01D  FFD9         	movff	___asftsub@f1p,fsr2l
 12007  004800  C01E  FFDA         	movff	___asftsub@f1p+1,fsr2h
 12008  004804  CFDE F017          	movff	postinc2,?___ftsub
 12009  004808  CFDE F018          	movff	postinc2,?___ftsub+1
 12010  00480C  CFDD F019          	movff	postdec2,?___ftsub+2
 12011  004810  C01F  F01A         	movff	___asftsub@f2,?___ftsub+3
 12012  004814  C020  F01B         	movff	___asftsub@f2+1,?___ftsub+4
 12013  004818  C021  F01C         	movff	___asftsub@f2+2,?___ftsub+5
 12014  00481C  EC92  F024         	call	___ftsub	;wreg free
 12015  004820  C01D  FFD9         	movff	___asftsub@f1p,fsr2l
 12016  004824  C01E  FFDA         	movff	___asftsub@f1p+1,fsr2h
 12017  004828  C017  FFDE         	movff	?___ftsub,postinc2
 12018  00482C  C018  FFDE         	movff	?___ftsub+1,postinc2
 12019  004830  C019  FFDD         	movff	?___ftsub+2,postdec2
 12020  004834  52DD               	movf	postdec2,f,c
 12021  004836  0012               	return	
 12022  004838                     __end_of___asftsub:
 12023                           	opt stack 0
 12024                           tosu	equ	0xFFF
 12025                           tosh	equ	0xFFE
 12026                           tosl	equ	0xFFD
 12027                           pclatu	equ	0xFFB
 12028                           pclath	equ	0xFFA
 12029                           tblptru	equ	0xFF8
 12030                           tblptrh	equ	0xFF7
 12031                           tblptrl	equ	0xFF6
 12032                           tablat	equ	0xFF5
 12033                           prodh	equ	0xFF4
 12034                           prodl	equ	0xFF3
 12035                           intcon	equ	0xFF2
 12036                           intcon2	equ	0xFF1
 12037                           indf0	equ	0xFEF
 12038                           postinc0	equ	0xFEE
 12039                           fsr0h	equ	0xFEA
 12040                           fsr0l	equ	0xFE9
 12041                           wreg	equ	0xFE8
 12042                           postinc1	equ	0xFE6
 12043                           postdec1	equ	0xFE5
 12044                           fsr1h	equ	0xFE2
 12045                           fsr1l	equ	0xFE1
 12046                           indf2	equ	0xFDF
 12047                           postinc2	equ	0xFDE
 12048                           postdec2	equ	0xFDD
 12049                           plusw2	equ	0xFDB
 12050                           fsr2h	equ	0xFDA
 12051                           fsr2l	equ	0xFD9
 12052                           status	equ	0xFD8
 12053                           
 12054 ;; *************** function ___ftsub *****************
 12055 ;; Defined at:
 12056 ;;		line 22 in file "/usr/opt/microchip/xc8/v1.20/sources/common/ftsub.c"
 12057 ;; Parameters:    Size  Location     Type
 12058 ;;  f1              3   22[COMRAM] float 
 12059 ;;  f2              3   25[COMRAM] float 
 12060 ;; Auto vars:     Size  Location     Type
 12061 ;;		None
 12062 ;; Return value:  Size  Location     Type
 12063 ;;                  3   22[COMRAM] float 
 12064 ;; Registers used:
 12065 ;;		wreg, status,2, status,0, cstack
 12066 ;; Tracked objects:
 12067 ;;		On entry : 0/0
 12068 ;;		On exit  : 0/0
 12069 ;;		Unchanged: 0/0
 12070 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12071 ;;      Params:         6       0       0       0       0       0       0       0       0
 12072 ;;      Locals:         0       0       0       0       0       0       0       0       0
 12073 ;;      Temps:          0       0       0       0       0       0       0       0       0
 12074 ;;      Totals:         6       0       0       0       0       0       0       0       0
 12075 ;;Total ram usage:        6 bytes
 12076 ;; Hardware stack levels used:    1
 12077 ;; Hardware stack levels required when called:    2
 12078 ;; This function calls:
 12079 ;;		___ftadd
 12080 ;; This function is called by:
 12081 ;;		___asftsub
 12082 ;; This function uses a non-reentrant model
 12083 ;;
 12084                           
 12085                           	psect	text37
 12086  004924                     __ptext37:
 12087                           	opt stack 0
 12088  004924                     ___ftsub:
 12089                           	opt stack 20
 12090                           
 12091                           ;incstack = 0
 12092                           ;incstack = 0
 12093  004924  0E00               	movlw	0
 12094  004926  1A1A               	xorwf	___ftsub@f2,f,c
 12095  004928  0E00               	movlw	0
 12096  00492A  1A1B               	xorwf	___ftsub@f2+1,f,c
 12097  00492C  0E80               	movlw	128
 12098  00492E  1A1C               	xorwf	___ftsub@f2+2,f,c
 12099  004930  C017  F009         	movff	___ftsub@f1,?___ftadd
 12100  004934  C018  F00A         	movff	___ftsub@f1+1,?___ftadd+1
 12101  004938  C019  F00B         	movff	___ftsub@f1+2,?___ftadd+2
 12102  00493C  C01A  F00C         	movff	___ftsub@f2,?___ftadd+3
 12103  004940  C01B  F00D         	movff	___ftsub@f2+1,?___ftadd+4
 12104  004944  C01C  F00E         	movff	___ftsub@f2+2,?___ftadd+5
 12105  004948  EC95  F017         	call	___ftadd	;wreg free
 12106  00494C  C00B  F019         	movff	?___ftadd+2,?___ftsub+2
 12107  004950  C00A  F018         	movff	?___ftadd+1,?___ftsub+1
 12108  004954  C009  F017         	movff	?___ftadd,?___ftsub
 12109  004958  0012               	return	
 12110  00495A                     __end_of___ftsub:
 12111                           	opt stack 0
 12112                           tosu	equ	0xFFF
 12113                           tosh	equ	0xFFE
 12114                           tosl	equ	0xFFD
 12115                           pclatu	equ	0xFFB
 12116                           pclath	equ	0xFFA
 12117                           tblptru	equ	0xFF8
 12118                           tblptrh	equ	0xFF7
 12119                           tblptrl	equ	0xFF6
 12120                           tablat	equ	0xFF5
 12121                           prodh	equ	0xFF4
 12122                           prodl	equ	0xFF3
 12123                           intcon	equ	0xFF2
 12124                           intcon2	equ	0xFF1
 12125                           indf0	equ	0xFEF
 12126                           postinc0	equ	0xFEE
 12127                           fsr0h	equ	0xFEA
 12128                           fsr0l	equ	0xFE9
 12129                           wreg	equ	0xFE8
 12130                           postinc1	equ	0xFE6
 12131                           postdec1	equ	0xFE5
 12132                           fsr1h	equ	0xFE2
 12133                           fsr1l	equ	0xFE1
 12134                           indf2	equ	0xFDF
 12135                           postinc2	equ	0xFDE
 12136                           postdec2	equ	0xFDD
 12137                           plusw2	equ	0xFDB
 12138                           fsr2h	equ	0xFDA
 12139                           fsr2l	equ	0xFD9
 12140                           status	equ	0xFD8
 12141                           
 12142 ;; *************** function ___asftmul *****************
 12143 ;; Defined at:
 12144 ;;		line 5 in file "/usr/opt/microchip/xc8/v1.20/sources/pic18/asftmul.c"
 12145 ;; Parameters:    Size  Location     Type
 12146 ;;  f1p             2   62[COMRAM] PTR float 
 12147 ;;		 -> sprintf@integ(3), 
 12148 ;;  f2              3   64[COMRAM] float 
 12149 ;; Auto vars:     Size  Location     Type
 12150 ;;		None
 12151 ;; Return value:  Size  Location     Type
 12152 ;;                  3   62[COMRAM] float 
 12153 ;; Registers used:
 12154 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 12155 ;; Tracked objects:
 12156 ;;		On entry : 0/0
 12157 ;;		On exit  : 0/0
 12158 ;;		Unchanged: 0/0
 12159 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12160 ;;      Params:         5       0       0       0       0       0       0       0       0
 12161 ;;      Locals:         0       0       0       0       0       0       0       0       0
 12162 ;;      Temps:          0       0       0       0       0       0       0       0       0
 12163 ;;      Totals:         5       0       0       0       0       0       0       0       0
 12164 ;;Total ram usage:        5 bytes
 12165 ;; Hardware stack levels used:    1
 12166 ;; Hardware stack levels required when called:    2
 12167 ;; This function calls:
 12168 ;;		___ftmul
 12169 ;; This function is called by:
 12170 ;;		_sprintf
 12171 ;; This function uses a non-reentrant model
 12172 ;;
 12173                           
 12174                           	psect	text38
 12175  004838                     __ptext38:
 12176                           	opt stack 0
 12177  004838                     ___asftmul:
 12178                           	opt stack 21
 12179                           
 12180                           ;	Return value of ___asftmul is never used
 12181                           
 12182                           ;incstack = 0
 12183                           ;incstack = 0
 12184  004838  C03F  FFD9         	movff	___asftmul@f1p,fsr2l
 12185  00483C  C040  FFDA         	movff	___asftmul@f1p+1,fsr2h
 12186  004840  CFDE F02E          	movff	postinc2,?___ftmul
 12187  004844  CFDE F02F          	movff	postinc2,?___ftmul+1
 12188  004848  CFDD F030          	movff	postdec2,?___ftmul+2
 12189  00484C  C041  F031         	movff	___asftmul@f2,?___ftmul+3
 12190  004850  C042  F032         	movff	___asftmul@f2+1,?___ftmul+4
 12191  004854  C043  F033         	movff	___asftmul@f2+2,?___ftmul+5
 12192  004858  EC38  F01B         	call	___ftmul	;wreg free
 12193  00485C  C03F  FFD9         	movff	___asftmul@f1p,fsr2l
 12194  004860  C040  FFDA         	movff	___asftmul@f1p+1,fsr2h
 12195  004864  C02E  FFDE         	movff	?___ftmul,postinc2
 12196  004868  C02F  FFDE         	movff	?___ftmul+1,postinc2
 12197  00486C  C030  FFDD         	movff	?___ftmul+2,postdec2
 12198  004870  52DD               	movf	postdec2,f,c
 12199  004872  0012               	return	
 12200  004874                     __end_of___asftmul:
 12201                           	opt stack 0
 12202                           tosu	equ	0xFFF
 12203                           tosh	equ	0xFFE
 12204                           tosl	equ	0xFFD
 12205                           pclatu	equ	0xFFB
 12206                           pclath	equ	0xFFA
 12207                           tblptru	equ	0xFF8
 12208                           tblptrh	equ	0xFF7
 12209                           tblptrl	equ	0xFF6
 12210                           tablat	equ	0xFF5
 12211                           prodh	equ	0xFF4
 12212                           prodl	equ	0xFF3
 12213                           intcon	equ	0xFF2
 12214                           intcon2	equ	0xFF1
 12215                           indf0	equ	0xFEF
 12216                           postinc0	equ	0xFEE
 12217                           fsr0h	equ	0xFEA
 12218                           fsr0l	equ	0xFE9
 12219                           wreg	equ	0xFE8
 12220                           postinc1	equ	0xFE6
 12221                           postdec1	equ	0xFE5
 12222                           fsr1h	equ	0xFE2
 12223                           fsr1l	equ	0xFE1
 12224                           indf2	equ	0xFDF
 12225                           postinc2	equ	0xFDE
 12226                           postdec2	equ	0xFDD
 12227                           plusw2	equ	0xFDB
 12228                           fsr2h	equ	0xFDA
 12229                           fsr2l	equ	0xFD9
 12230                           status	equ	0xFD8
 12231                           
 12232 ;; *************** function ___asftadd *****************
 12233 ;; Defined at:
 12234 ;;		line 5 in file "/usr/opt/microchip/xc8/v1.20/sources/pic18/asftadd.c"
 12235 ;; Parameters:    Size  Location     Type
 12236 ;;  f1p             2   77[COMRAM] PTR float 
 12237 ;;		 -> sprintf@fval(3), 
 12238 ;;  f2              3   79[COMRAM] float 
 12239 ;; Auto vars:     Size  Location     Type
 12240 ;;		None
 12241 ;; Return value:  Size  Location     Type
 12242 ;;                  3   77[COMRAM] float 
 12243 ;; Registers used:
 12244 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 12245 ;; Tracked objects:
 12246 ;;		On entry : 0/0
 12247 ;;		On exit  : 0/0
 12248 ;;		Unchanged: 0/0
 12249 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12250 ;;      Params:         5       0       0       0       0       0       0       0       0
 12251 ;;      Locals:         0       0       0       0       0       0       0       0       0
 12252 ;;      Temps:          0       0       0       0       0       0       0       0       0
 12253 ;;      Totals:         5       0       0       0       0       0       0       0       0
 12254 ;;Total ram usage:        5 bytes
 12255 ;; Hardware stack levels used:    1
 12256 ;; Hardware stack levels required when called:    2
 12257 ;; This function calls:
 12258 ;;		___ftadd
 12259 ;; This function is called by:
 12260 ;;		_sprintf
 12261 ;; This function uses a non-reentrant model
 12262 ;;
 12263                           
 12264                           	psect	text39
 12265  004874                     __ptext39:
 12266                           	opt stack 0
 12267  004874                     ___asftadd:
 12268                           	opt stack 21
 12269                           
 12270                           ;	Return value of ___asftadd is never used
 12271                           
 12272                           ;incstack = 0
 12273                           ;incstack = 0
 12274  004874  C04E  FFD9         	movff	___asftadd@f1p,fsr2l
 12275  004878  C04F  FFDA         	movff	___asftadd@f1p+1,fsr2h
 12276  00487C  CFDE F009          	movff	postinc2,?___ftadd
 12277  004880  CFDE F00A          	movff	postinc2,?___ftadd+1
 12278  004884  CFDD F00B          	movff	postdec2,?___ftadd+2
 12279  004888  C050  F00C         	movff	___asftadd@f2,?___ftadd+3
 12280  00488C  C051  F00D         	movff	___asftadd@f2+1,?___ftadd+4
 12281  004890  C052  F00E         	movff	___asftadd@f2+2,?___ftadd+5
 12282  004894  EC95  F017         	call	___ftadd	;wreg free
 12283  004898  C04E  FFD9         	movff	___asftadd@f1p,fsr2l
 12284  00489C  C04F  FFDA         	movff	___asftadd@f1p+1,fsr2h
 12285  0048A0  C009  FFDE         	movff	?___ftadd,postinc2
 12286  0048A4  C00A  FFDE         	movff	?___ftadd+1,postinc2
 12287  0048A8  C00B  FFDD         	movff	?___ftadd+2,postdec2
 12288  0048AC  52DD               	movf	postdec2,f,c
 12289  0048AE  0012               	return	
 12290  0048B0                     __end_of___asftadd:
 12291                           	opt stack 0
 12292                           tosu	equ	0xFFF
 12293                           tosh	equ	0xFFE
 12294                           tosl	equ	0xFFD
 12295                           pclatu	equ	0xFFB
 12296                           pclath	equ	0xFFA
 12297                           tblptru	equ	0xFF8
 12298                           tblptrh	equ	0xFF7
 12299                           tblptrl	equ	0xFF6
 12300                           tablat	equ	0xFF5
 12301                           prodh	equ	0xFF4
 12302                           prodl	equ	0xFF3
 12303                           intcon	equ	0xFF2
 12304                           intcon2	equ	0xFF1
 12305                           indf0	equ	0xFEF
 12306                           postinc0	equ	0xFEE
 12307                           fsr0h	equ	0xFEA
 12308                           fsr0l	equ	0xFE9
 12309                           wreg	equ	0xFE8
 12310                           postinc1	equ	0xFE6
 12311                           postdec1	equ	0xFE5
 12312                           fsr1h	equ	0xFE2
 12313                           fsr1l	equ	0xFE1
 12314                           indf2	equ	0xFDF
 12315                           postinc2	equ	0xFDE
 12316                           postdec2	equ	0xFDD
 12317                           plusw2	equ	0xFDB
 12318                           fsr2h	equ	0xFDA
 12319                           fsr2l	equ	0xFD9
 12320                           status	equ	0xFD8
 12321                           
 12322 ;; *************** function ___ftadd *****************
 12323 ;; Defined at:
 12324 ;;		line 87 in file "/usr/opt/microchip/xc8/v1.20/sources/common/ftadd.c"
 12325 ;; Parameters:    Size  Location     Type
 12326 ;;  f1              3    8[COMRAM] float 
 12327 ;;  f2              3   11[COMRAM] float 
 12328 ;; Auto vars:     Size  Location     Type
 12329 ;;  exp1            1   21[COMRAM] unsigned char 
 12330 ;;  exp2            1   20[COMRAM] unsigned char 
 12331 ;;  sign            1   19[COMRAM] unsigned char 
 12332 ;; Return value:  Size  Location     Type
 12333 ;;                  3    8[COMRAM] float 
 12334 ;; Registers used:
 12335 ;;		wreg, status,2, status,0, cstack
 12336 ;; Tracked objects:
 12337 ;;		On entry : 0/0
 12338 ;;		On exit  : 0/0
 12339 ;;		Unchanged: 0/0
 12340 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12341 ;;      Params:         6       0       0       0       0       0       0       0       0
 12342 ;;      Locals:         3       0       0       0       0       0       0       0       0
 12343 ;;      Temps:          5       0       0       0       0       0       0       0       0
 12344 ;;      Totals:        14       0       0       0       0       0       0       0       0
 12345 ;;Total ram usage:       14 bytes
 12346 ;; Hardware stack levels used:    1
 12347 ;; Hardware stack levels required when called:    1
 12348 ;; This function calls:
 12349 ;;		___ftpack
 12350 ;; This function is called by:
 12351 ;;		___asftadd
 12352 ;;		___ftsub
 12353 ;; This function uses a non-reentrant model
 12354 ;;
 12355                           
 12356                           	psect	text40
 12357  002F2A                     __ptext40:
 12358                           	opt stack 0
 12359  002F2A                     ___ftadd:
 12360                           	opt stack 20
 12361                           
 12362                           ;incstack = 0
 12363                           ;incstack = 0
 12364  002F2A  0E0F               	movlw	15
 12365  002F2C  6E0F               	movwf	??___ftadd& (0+255),c
 12366  002F2E  C009  F010         	movff	___ftadd@f1,??___ftadd+1
 12367  002F32  C00A  F011         	movff	___ftadd@f1+1,??___ftadd+2
 12368  002F36  C00B  F012         	movff	___ftadd@f1+2,??___ftadd+3
 12369  002F3A  280F               	incf	??___ftadd,w,c
 12370  002F3C  6E13               	movwf	(??___ftadd+4)& (0+255),c
 12371  002F3E  D004               	goto	i2u378_40
 12372  002F40                     i2u378_45:
 12373  002F40  90D8               	bcf	status,0,c
 12374  002F42  3212               	rrcf	??___ftadd+3,f,c
 12375  002F44  3211               	rrcf	??___ftadd+2,f,c
 12376  002F46  3210               	rrcf	??___ftadd+1,f,c
 12377  002F48                     i2u378_40:
 12378  002F48  2E13               	decfsz	(??___ftadd+4)& (0+255),f,c
 12379  002F4A  D7FA               	goto	i2u378_45
 12380  002F4C  5010               	movf	??___ftadd+1,w,c
 12381  002F4E  6E16               	movwf	___ftadd@exp1,c
 12382  002F50  0E0F               	movlw	15
 12383  002F52  6E0F               	movwf	??___ftadd& (0+255),c
 12384  002F54  C00C  F010         	movff	___ftadd@f2,??___ftadd+1
 12385  002F58  C00D  F011         	movff	___ftadd@f2+1,??___ftadd+2
 12386  002F5C  C00E  F012         	movff	___ftadd@f2+2,??___ftadd+3
 12387  002F60  280F               	incf	??___ftadd,w,c
 12388  002F62  6E13               	movwf	(??___ftadd+4)& (0+255),c
 12389  002F64  D004               	goto	i2u379_40
 12390  002F66                     i2u379_45:
 12391  002F66  90D8               	bcf	status,0,c
 12392  002F68  3212               	rrcf	??___ftadd+3,f,c
 12393  002F6A  3211               	rrcf	??___ftadd+2,f,c
 12394  002F6C  3210               	rrcf	??___ftadd+1,f,c
 12395  002F6E                     i2u379_40:
 12396  002F6E  2E13               	decfsz	(??___ftadd+4)& (0+255),f,c
 12397  002F70  D7FA               	goto	i2u379_45
 12398  002F72  5010               	movf	??___ftadd+1,w,c
 12399  002F74  6E15               	movwf	___ftadd@exp2,c
 12400  002F76  5016               	movf	___ftadd@exp1,w,c
 12401  002F78  B4D8               	btfsc	status,2,c
 12402  002F7A  D00B               	goto	i2l1048
 12403  002F7C  5015               	movf	___ftadd@exp2,w,c
 12404  002F7E  6016               	cpfslt	___ftadd@exp1,c
 12405  002F80  D00F               	goto	i2l5791
 12406  002F82  5016               	movf	___ftadd@exp1,w,c
 12407  002F84  0800               	sublw	0
 12408  002F86  2415               	addwf	___ftadd@exp2,w,c
 12409  002F88  6E0F               	movwf	??___ftadd& (0+255),c
 12410  002F8A  0E19               	movlw	25
 12411  002F8C  5C0F               	subwf	??___ftadd,w,c
 12412  002F8E  A0D8               	btfss	status,0,c
 12413  002F90  D007               	goto	i2l5791
 12414  002F92                     i2l1048:
 12415  002F92  C00C  F009         	movff	___ftadd@f2,?___ftadd
 12416  002F96  C00D  F00A         	movff	___ftadd@f2+1,?___ftadd+1
 12417  002F9A  C00E  F00B         	movff	___ftadd@f2+2,?___ftadd+2
 12418  002F9E  D0AA               	goto	i2l1049
 12419  002FA0                     i2l5791:
 12420  002FA0  5015               	movf	___ftadd@exp2,w,c
 12421  002FA2  B4D8               	btfsc	status,2,c
 12422  002FA4  D00B               	goto	i2l1052
 12423  002FA6  5016               	movf	___ftadd@exp1,w,c
 12424  002FA8  6015               	cpfslt	___ftadd@exp2,c
 12425  002FAA  D00F               	goto	i2l5797
 12426  002FAC  5015               	movf	___ftadd@exp2,w,c
 12427  002FAE  0800               	sublw	0
 12428  002FB0  2416               	addwf	___ftadd@exp1,w,c
 12429  002FB2  6E0F               	movwf	??___ftadd& (0+255),c
 12430  002FB4  0E19               	movlw	25
 12431  002FB6  5C0F               	subwf	??___ftadd,w,c
 12432  002FB8  A0D8               	btfss	status,0,c
 12433  002FBA  D007               	goto	i2l5797
 12434  002FBC                     i2l1052:
 12435  002FBC  C009  F009         	movff	___ftadd@f1,?___ftadd
 12436  002FC0  C00A  F00A         	movff	___ftadd@f1+1,?___ftadd+1
 12437  002FC4  C00B  F00B         	movff	___ftadd@f1+2,?___ftadd+2
 12438  002FC8  D095               	goto	i2l1049
 12439  002FCA                     i2l5797:
 12440  002FCA  6E0F               	movwf	??___ftadd& (0+255),c
 12441  002FCC  0E06               	movlw	6
 12442  002FCE  6E14               	movwf	___ftadd@sign,c
 12443  002FD0  500F               	movf	??___ftadd& (0+255),w,c
 12444  002FD2  BE0B               	btfsc	___ftadd@f1+2,7,c
 12445  002FD4  8E14               	bsf	___ftadd@sign,7,c
 12446  002FD6  BE0E               	btfsc	___ftadd@f2+2,7,c
 12447  002FD8  8C14               	bsf	___ftadd@sign,6,c
 12448  002FDA  8E0A               	bsf	___ftadd@f1+1,7,c
 12449  002FDC  0EFF               	movlw	255
 12450  002FDE  1609               	andwf	___ftadd@f1,f,c
 12451  002FE0  0EFF               	movlw	255
 12452  002FE2  160A               	andwf	___ftadd@f1+1,f,c
 12453  002FE4  0E00               	movlw	0
 12454  002FE6  160B               	andwf	___ftadd@f1+2,f,c
 12455  002FE8  8E0D               	bsf	___ftadd@f2+1,7,c
 12456  002FEA  0EFF               	movlw	255
 12457  002FEC  160C               	andwf	___ftadd@f2,f,c
 12458  002FEE  0EFF               	movlw	255
 12459  002FF0  160D               	andwf	___ftadd@f2+1,f,c
 12460  002FF2  0E00               	movlw	0
 12461  002FF4  160E               	andwf	___ftadd@f2+2,f,c
 12462  002FF6  5015               	movf	___ftadd@exp2,w,c
 12463  002FF8  6016               	cpfslt	___ftadd@exp1,c
 12464  002FFA  D018               	goto	i2l5823
 12465  002FFC                     i2l5813:
 12466  002FFC  90D8               	bcf	status,0,c
 12467  002FFE  360C               	rlcf	___ftadd@f2,f,c
 12468  003000  360D               	rlcf	___ftadd@f2+1,f,c
 12469  003002  360E               	rlcf	___ftadd@f2+2,f,c
 12470  003004  0615               	decf	___ftadd@exp2,f,c
 12471  003006  5015               	movf	___ftadd@exp2,w,c
 12472  003008  1816               	xorwf	___ftadd@exp1,w,c
 12473  00300A  B4D8               	btfsc	status,2,c
 12474  00300C  D00B               	goto	i2l5821
 12475  00300E  0614               	decf	___ftadd@sign,f,c
 12476  003010  5014               	movf	___ftadd@sign& (0+255),w,c
 12477  003012  0B07               	andlw	7
 12478  003014  B4D8               	btfsc	status,2,c
 12479  003016  D006               	goto	i2l5821
 12480  003018  D7F1               	goto	i2l5813
 12481  00301A                     i2l5819:
 12482  00301A  90D8               	bcf	status,0,c
 12483  00301C  320B               	rrcf	___ftadd@f1+2,f,c
 12484  00301E  320A               	rrcf	___ftadd@f1+1,f,c
 12485  003020  3209               	rrcf	___ftadd@f1,f,c
 12486  003022  2A16               	incf	___ftadd@exp1,f,c
 12487  003024                     i2l5821:
 12488  003024  5015               	movf	___ftadd@exp2,w,c
 12489  003026  6216               	cpfseq	___ftadd@exp1,c
 12490  003028  D7F8               	goto	i2l5819
 12491  00302A  D01A               	goto	i2l1063
 12492  00302C                     i2l5823:
 12493  00302C  5016               	movf	___ftadd@exp1,w,c
 12494  00302E  6015               	cpfslt	___ftadd@exp2,c
 12495  003030  D017               	goto	i2l1063
 12496  003032                     i2l5825:
 12497  003032  90D8               	bcf	status,0,c
 12498  003034  3609               	rlcf	___ftadd@f1,f,c
 12499  003036  360A               	rlcf	___ftadd@f1+1,f,c
 12500  003038  360B               	rlcf	___ftadd@f1+2,f,c
 12501  00303A  0616               	decf	___ftadd@exp1,f,c
 12502  00303C  5015               	movf	___ftadd@exp2,w,c
 12503  00303E  1816               	xorwf	___ftadd@exp1,w,c
 12504  003040  B4D8               	btfsc	status,2,c
 12505  003042  D00B               	goto	i2l5833
 12506  003044  0614               	decf	___ftadd@sign,f,c
 12507  003046  5014               	movf	___ftadd@sign& (0+255),w,c
 12508  003048  0B07               	andlw	7
 12509  00304A  B4D8               	btfsc	status,2,c
 12510  00304C  D006               	goto	i2l5833
 12511  00304E  D7F1               	goto	i2l5825
 12512  003050                     i2l5831:
 12513  003050  90D8               	bcf	status,0,c
 12514  003052  320E               	rrcf	___ftadd@f2+2,f,c
 12515  003054  320D               	rrcf	___ftadd@f2+1,f,c
 12516  003056  320C               	rrcf	___ftadd@f2,f,c
 12517  003058  2A15               	incf	___ftadd@exp2,f,c
 12518  00305A                     i2l5833:
 12519  00305A  5015               	movf	___ftadd@exp2,w,c
 12520  00305C  6216               	cpfseq	___ftadd@exp1,c
 12521  00305E  D7F8               	goto	i2l5831
 12522  003060                     i2l1063:
 12523  003060  AE14               	btfss	___ftadd@sign,7,c
 12524  003062  D00C               	goto	i2l1072
 12525  003064  0EFF               	movlw	255
 12526  003066  1A09               	xorwf	___ftadd@f1,f,c
 12527  003068  0EFF               	movlw	255
 12528  00306A  1A0A               	xorwf	___ftadd@f1+1,f,c
 12529  00306C  0EFF               	movlw	255
 12530  00306E  1A0B               	xorwf	___ftadd@f1+2,f,c
 12531  003070  0E01               	movlw	1
 12532  003072  2609               	addwf	___ftadd@f1,f,c
 12533  003074  0E00               	movlw	0
 12534  003076  220A               	addwfc	___ftadd@f1+1,f,c
 12535  003078  0E00               	movlw	0
 12536  00307A  220B               	addwfc	___ftadd@f1+2,f,c
 12537  00307C                     i2l1072:
 12538  00307C  AC14               	btfss	___ftadd@sign,6,c
 12539  00307E  D00C               	goto	i2l5839
 12540  003080  0EFF               	movlw	255
 12541  003082  1A0C               	xorwf	___ftadd@f2,f,c
 12542  003084  0EFF               	movlw	255
 12543  003086  1A0D               	xorwf	___ftadd@f2+1,f,c
 12544  003088  0EFF               	movlw	255
 12545  00308A  1A0E               	xorwf	___ftadd@f2+2,f,c
 12546  00308C  0E01               	movlw	1
 12547  00308E  260C               	addwf	___ftadd@f2,f,c
 12548  003090  0E00               	movlw	0
 12549  003092  220D               	addwfc	___ftadd@f2+1,f,c
 12550  003094  0E00               	movlw	0
 12551  003096  220E               	addwfc	___ftadd@f2+2,f,c
 12552  003098                     i2l5839:
 12553  003098  6E0F               	movwf	??___ftadd& (0+255),c
 12554  00309A  0E00               	movlw	0
 12555  00309C  6E14               	movwf	___ftadd@sign,c
 12556  00309E  500F               	movf	??___ftadd& (0+255),w,c
 12557  0030A0  5009               	movf	___ftadd@f1,w,c
 12558  0030A2  260C               	addwf	___ftadd@f2,f,c
 12559  0030A4  500A               	movf	___ftadd@f1+1,w,c
 12560  0030A6  220D               	addwfc	___ftadd@f2+1,f,c
 12561  0030A8  500B               	movf	___ftadd@f1+2,w,c
 12562  0030AA  220E               	addwfc	___ftadd@f2+2,f,c
 12563  0030AC  AE0E               	btfss	___ftadd@f2+2,7,c
 12564  0030AE  D010               	goto	i2l5849
 12565  0030B0  0EFF               	movlw	255
 12566  0030B2  1A0C               	xorwf	___ftadd@f2,f,c
 12567  0030B4  0EFF               	movlw	255
 12568  0030B6  1A0D               	xorwf	___ftadd@f2+1,f,c
 12569  0030B8  0EFF               	movlw	255
 12570  0030BA  1A0E               	xorwf	___ftadd@f2+2,f,c
 12571  0030BC  0E01               	movlw	1
 12572  0030BE  260C               	addwf	___ftadd@f2,f,c
 12573  0030C0  0E00               	movlw	0
 12574  0030C2  220D               	addwfc	___ftadd@f2+1,f,c
 12575  0030C4  0E00               	movlw	0
 12576  0030C6  220E               	addwfc	___ftadd@f2+2,f,c
 12577  0030C8  6E0F               	movwf	??___ftadd& (0+255),c
 12578  0030CA  0E01               	movlw	1
 12579  0030CC  6E14               	movwf	___ftadd@sign,c
 12580  0030CE  500F               	movf	??___ftadd& (0+255),w,c
 12581  0030D0                     i2l5849:
 12582  0030D0  C00C  F001         	movff	___ftadd@f2,?___ftpack
 12583  0030D4  C00D  F002         	movff	___ftadd@f2+1,?___ftpack+1
 12584  0030D8  C00E  F003         	movff	___ftadd@f2+2,?___ftpack+2
 12585  0030DC  C016  F004         	movff	___ftadd@exp1,?___ftpack+3
 12586  0030E0  C014  F005         	movff	___ftadd@sign,?___ftpack+4
 12587  0030E4  ECFF  F01D         	call	___ftpack	;wreg free
 12588  0030E8  C003  F00B         	movff	?___ftpack+2,?___ftadd+2
 12589  0030EC  C002  F00A         	movff	?___ftpack+1,?___ftadd+1
 12590  0030F0  C001  F009         	movff	?___ftpack,?___ftadd
 12591  0030F4                     i2l1049:
 12592  0030F4  0012               	return	
 12593  0030F6                     __end_of___ftadd:
 12594                           	opt stack 0
 12595                           tosu	equ	0xFFF
 12596                           tosh	equ	0xFFE
 12597                           tosl	equ	0xFFD
 12598                           pclatu	equ	0xFFB
 12599                           pclath	equ	0xFFA
 12600                           tblptru	equ	0xFF8
 12601                           tblptrh	equ	0xFF7
 12602                           tblptrl	equ	0xFF6
 12603                           tablat	equ	0xFF5
 12604                           prodh	equ	0xFF4
 12605                           prodl	equ	0xFF3
 12606                           intcon	equ	0xFF2
 12607                           intcon2	equ	0xFF1
 12608                           indf0	equ	0xFEF
 12609                           postinc0	equ	0xFEE
 12610                           fsr0h	equ	0xFEA
 12611                           fsr0l	equ	0xFE9
 12612                           wreg	equ	0xFE8
 12613                           postinc1	equ	0xFE6
 12614                           postdec1	equ	0xFE5
 12615                           fsr1h	equ	0xFE2
 12616                           fsr1l	equ	0xFE1
 12617                           indf2	equ	0xFDF
 12618                           postinc2	equ	0xFDE
 12619                           postdec2	equ	0xFDD
 12620                           plusw2	equ	0xFDB
 12621                           fsr2h	equ	0xFDA
 12622                           fsr2l	equ	0xFD9
 12623                           status	equ	0xFD8
 12624                           
 12625 ;; *************** function ___ftpack *****************
 12626 ;; Defined at:
 12627 ;;		line 63 in file "/usr/opt/microchip/xc8/v1.20/sources/common/float.c"
 12628 ;; Parameters:    Size  Location     Type
 12629 ;;  arg             3    0[COMRAM] unsigned um
 12630 ;;  exp             1    3[COMRAM] unsigned char 
 12631 ;;  sign            1    4[COMRAM] unsigned char 
 12632 ;; Auto vars:     Size  Location     Type
 12633 ;;		None
 12634 ;; Return value:  Size  Location     Type
 12635 ;;                  3    0[COMRAM] float 
 12636 ;; Registers used:
 12637 ;;		wreg, status,2, status,0
 12638 ;; Tracked objects:
 12639 ;;		On entry : 0/0
 12640 ;;		On exit  : 0/0
 12641 ;;		Unchanged: 0/0
 12642 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12643 ;;      Params:         5       0       0       0       0       0       0       0       0
 12644 ;;      Locals:         0       0       0       0       0       0       0       0       0
 12645 ;;      Temps:          3       0       0       0       0       0       0       0       0
 12646 ;;      Totals:         8       0       0       0       0       0       0       0       0
 12647 ;;Total ram usage:        8 bytes
 12648 ;; Hardware stack levels used:    1
 12649 ;; This function calls:
 12650 ;;		Nothing
 12651 ;; This function is called by:
 12652 ;;		___ftadd
 12653 ;;		___ftmul
 12654 ;;		___lltoft
 12655 ;; This function uses a non-reentrant model
 12656 ;;
 12657                           
 12658                           	psect	text41
 12659  003BFE                     __ptext41:
 12660                           	opt stack 0
 12661  003BFE                     ___ftpack:
 12662                           	opt stack 22
 12663                           
 12664                           ;incstack = 0
 12665                           ;incstack = 0
 12666  003BFE  5004               	movf	___ftpack@exp,w,c
 12667  003C00  B4D8               	btfsc	status,2,c
 12668  003C02  D005               	goto	i2l5597
 12669  003C04  5001               	movf	___ftpack@arg,w,c
 12670  003C06  1002               	iorwf	___ftpack@arg+1,w,c
 12671  003C08  1003               	iorwf	___ftpack@arg+2,w,c
 12672  003C0A  A4D8               	btfss	status,2,c
 12673  003C0C  D00C               	goto	i2l5603
 12674  003C0E                     i2l5597:
 12675  003C0E  0E00               	movlw	0
 12676  003C10  6E01               	movwf	?___ftpack,c
 12677  003C12  0E00               	movlw	0
 12678  003C14  6E02               	movwf	?___ftpack+1,c
 12679  003C16  0E00               	movlw	0
 12680  003C18  6E03               	movwf	?___ftpack+2,c
 12681  003C1A  D04C               	goto	i2l1011
 12682  003C1C                     i2l5601:
 12683  003C1C  2A04               	incf	___ftpack@exp,f,c
 12684  003C1E  90D8               	bcf	status,0,c
 12685  003C20  3203               	rrcf	___ftpack@arg+2,f,c
 12686  003C22  3202               	rrcf	___ftpack@arg+1,f,c
 12687  003C24  3201               	rrcf	___ftpack@arg,f,c
 12688  003C26                     i2l5603:
 12689  003C26  0E00               	movlw	0
 12690  003C28  1401               	andwf	___ftpack@arg,w,c
 12691  003C2A  6E06               	movwf	??___ftpack& (0+255),c
 12692  003C2C  0E00               	movlw	0
 12693  003C2E  1402               	andwf	___ftpack@arg+1,w,c
 12694  003C30  6E07               	movwf	(??___ftpack+1)& (0+255),c
 12695  003C32  0EFE               	movlw	254
 12696  003C34  1403               	andwf	___ftpack@arg+2,w,c
 12697  003C36  6E08               	movwf	(??___ftpack+2)& (0+255),c
 12698  003C38  5006               	movf	??___ftpack,w,c
 12699  003C3A  1007               	iorwf	??___ftpack+1,w,c
 12700  003C3C  1008               	iorwf	??___ftpack+2,w,c
 12701  003C3E  B4D8               	btfsc	status,2,c
 12702  003C40  D00C               	goto	i2l5609
 12703  003C42  D7EC               	goto	i2l5601
 12704  003C44                     i2l5605:
 12705  003C44  2A04               	incf	___ftpack@exp,f,c
 12706  003C46  0E01               	movlw	1
 12707  003C48  2601               	addwf	___ftpack@arg,f,c
 12708  003C4A  0E00               	movlw	0
 12709  003C4C  2202               	addwfc	___ftpack@arg+1,f,c
 12710  003C4E  0E00               	movlw	0
 12711  003C50  2203               	addwfc	___ftpack@arg+2,f,c
 12712  003C52  90D8               	bcf	status,0,c
 12713  003C54  3203               	rrcf	___ftpack@arg+2,f,c
 12714  003C56  3202               	rrcf	___ftpack@arg+1,f,c
 12715  003C58  3201               	rrcf	___ftpack@arg,f,c
 12716  003C5A                     i2l5609:
 12717  003C5A  0E00               	movlw	0
 12718  003C5C  1401               	andwf	___ftpack@arg,w,c
 12719  003C5E  6E06               	movwf	??___ftpack& (0+255),c
 12720  003C60  0E00               	movlw	0
 12721  003C62  1402               	andwf	___ftpack@arg+1,w,c
 12722  003C64  6E07               	movwf	(??___ftpack+1)& (0+255),c
 12723  003C66  0EFF               	movlw	255
 12724  003C68  1403               	andwf	___ftpack@arg+2,w,c
 12725  003C6A  6E08               	movwf	(??___ftpack+2)& (0+255),c
 12726  003C6C  5006               	movf	??___ftpack,w,c
 12727  003C6E  1007               	iorwf	??___ftpack+1,w,c
 12728  003C70  1008               	iorwf	??___ftpack+2,w,c
 12729  003C72  B4D8               	btfsc	status,2,c
 12730  003C74  D006               	goto	i2l5613
 12731  003C76  D7E6               	goto	i2l5605
 12732  003C78                     i2l5611:
 12733  003C78  0604               	decf	___ftpack@exp,f,c
 12734  003C7A  90D8               	bcf	status,0,c
 12735  003C7C  3601               	rlcf	___ftpack@arg,f,c
 12736  003C7E  3602               	rlcf	___ftpack@arg+1,f,c
 12737  003C80  3603               	rlcf	___ftpack@arg+2,f,c
 12738  003C82                     i2l5613:
 12739  003C82  AE02               	btfss	___ftpack@arg+1,7,c
 12740  003C84  D7F9               	goto	i2l5611
 12741  003C86  A004               	btfss	___ftpack@exp,0,c
 12742  003C88  9E02               	bcf	___ftpack@arg+1,7,c
 12743  003C8A  90D8               	bcf	status,0,c
 12744  003C8C  3204               	rrcf	___ftpack@exp,f,c
 12745  003C8E  5004               	movf	___ftpack@exp,w,c
 12746  003C90  6E08               	movwf	(??___ftpack+2)& (0+255),c
 12747  003C92  6A07               	clrf	(??___ftpack+1)& (0+255),c
 12748  003C94  6A06               	clrf	??___ftpack& (0+255),c
 12749  003C96  5006               	movf	??___ftpack,w,c
 12750  003C98  1201               	iorwf	___ftpack@arg,f,c
 12751  003C9A  5007               	movf	??___ftpack+1,w,c
 12752  003C9C  1202               	iorwf	___ftpack@arg+1,f,c
 12753  003C9E  5008               	movf	??___ftpack+2,w,c
 12754  003CA0  1203               	iorwf	___ftpack@arg+2,f,c
 12755  003CA2  5005               	movf	___ftpack@sign,w,c
 12756  003CA4  A4D8               	btfss	status,2,c
 12757  003CA6  8E03               	bsf	___ftpack@arg+2,7,c
 12758  003CA8  C001  F001         	movff	___ftpack@arg,?___ftpack
 12759  003CAC  C002  F002         	movff	___ftpack@arg+1,?___ftpack+1
 12760  003CB0  C003  F003         	movff	___ftpack@arg+2,?___ftpack+2
 12761  003CB4                     i2l1011:
 12762  003CB4  0012               	return	
 12763  003CB6                     __end_of___ftpack:
 12764                           	opt stack 0
 12765                           tosu	equ	0xFFF
 12766                           tosh	equ	0xFFE
 12767                           tosl	equ	0xFFD
 12768                           pclatu	equ	0xFFB
 12769                           pclath	equ	0xFFA
 12770                           tblptru	equ	0xFF8
 12771                           tblptrh	equ	0xFF7
 12772                           tblptrl	equ	0xFF6
 12773                           tablat	equ	0xFF5
 12774                           prodh	equ	0xFF4
 12775                           prodl	equ	0xFF3
 12776                           intcon	equ	0xFF2
 12777                           intcon2	equ	0xFF1
 12778                           indf0	equ	0xFEF
 12779                           postinc0	equ	0xFEE
 12780                           fsr0h	equ	0xFEA
 12781                           fsr0l	equ	0xFE9
 12782                           wreg	equ	0xFE8
 12783                           postinc1	equ	0xFE6
 12784                           postdec1	equ	0xFE5
 12785                           fsr1h	equ	0xFE2
 12786                           fsr1l	equ	0xFE1
 12787                           indf2	equ	0xFDF
 12788                           postinc2	equ	0xFDE
 12789                           postdec2	equ	0xFDD
 12790                           plusw2	equ	0xFDB
 12791                           fsr2h	equ	0xFDA
 12792                           fsr2l	equ	0xFD9
 12793                           status	equ	0xFD8
 12794                           
 12795 ;; *************** function __div_to_l_ *****************
 12796 ;; Defined at:
 12797 ;;		line 61 in file "/usr/opt/microchip/xc8/v1.20/sources/common/fldivl.c"
 12798 ;; Parameters:    Size  Location     Type
 12799 ;;  f1              3    0[COMRAM] float 
 12800 ;;  f2              3    3[COMRAM] float 
 12801 ;; Auto vars:     Size  Location     Type
 12802 ;;  quot            4    7[COMRAM] unsigned long 
 12803 ;;  exp1            1   12[COMRAM] unsigned char 
 12804 ;;  cntr            1   11[COMRAM] unsigned char 
 12805 ;; Return value:  Size  Location     Type
 12806 ;;                  4    0[COMRAM] unsigned long 
 12807 ;; Registers used:
 12808 ;;		wreg, status,2, status,0
 12809 ;; Tracked objects:
 12810 ;;		On entry : 0/0
 12811 ;;		On exit  : 0/0
 12812 ;;		Unchanged: 0/0
 12813 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12814 ;;      Params:         6       0       0       0       0       0       0       0       0
 12815 ;;      Locals:         6       0       0       0       0       0       0       0       0
 12816 ;;      Temps:          1       0       0       0       0       0       0       0       0
 12817 ;;      Totals:        13       0       0       0       0       0       0       0       0
 12818 ;;Total ram usage:       13 bytes
 12819 ;; Hardware stack levels used:    1
 12820 ;; This function calls:
 12821 ;;		Nothing
 12822 ;; This function is called by:
 12823 ;;		_sprintf
 12824 ;; This function uses a non-reentrant model
 12825 ;;
 12826                           
 12827                           	psect	text42
 12828  003780                     __ptext42:
 12829                           	opt stack 0
 12830  003780                     __div_to_l_:
 12831                           	opt stack 23
 12832                           
 12833                           ;incstack = 0
 12834                           ;incstack = 0
 12835  003780  3403               	rlcf	(__div_to_l_@f1+2)& (0+255),w,c
 12836  003782  3404               	rlcf	(__div_to_l_@f1+3)& (0+255),w,c
 12837  003784  6E0D               	movwf	__div_to_l_@exp1,c
 12838  003786  660D               	tstfsz	__div_to_l_@exp1& (0+255),c
 12839  003788  D001               	goto	i2l5543
 12840  00378A  D05A               	goto	i2u345_40
 12841  00378C                     i2l5543:
 12842  00378C  3406               	rlcf	(__div_to_l_@f2+2)& (0+255),w,c
 12843  00378E  3407               	rlcf	(__div_to_l_@f2+3)& (0+255),w,c
 12844  003790  6E0C               	movwf	__div_to_l_@cntr,c
 12845  003792  660C               	tstfsz	__div_to_l_@cntr& (0+255),c
 12846  003794  D001               	goto	i2l5549
 12847  003796  D054               	goto	i2u345_40
 12848  003798                     i2l5549:
 12849  003798  8E03               	bsf	__div_to_l_@f1+2,7,c
 12850  00379A  0EFF               	movlw	255
 12851  00379C  1601               	andwf	__div_to_l_@f1,f,c
 12852  00379E  0EFF               	movlw	255
 12853  0037A0  1602               	andwf	__div_to_l_@f1+1,f,c
 12854  0037A2  0EFF               	movlw	255
 12855  0037A4  1603               	andwf	__div_to_l_@f1+2,f,c
 12856  0037A6  0E00               	movlw	0
 12857  0037A8  1604               	andwf	__div_to_l_@f1+3,f,c
 12858  0037AA  8E06               	bsf	__div_to_l_@f2+2,7,c
 12859  0037AC  0EFF               	movlw	255
 12860  0037AE  1604               	andwf	__div_to_l_@f2,f,c
 12861  0037B0  0EFF               	movlw	255
 12862  0037B2  1605               	andwf	__div_to_l_@f2+1,f,c
 12863  0037B4  0EFF               	movlw	255
 12864  0037B6  1606               	andwf	__div_to_l_@f2+2,f,c
 12865  0037B8  0E00               	movlw	0
 12866  0037BA  1607               	andwf	__div_to_l_@f2+3,f,c
 12867  0037BC  0E00               	movlw	0
 12868  0037BE  6E08               	movwf	__div_to_l_@quot,c
 12869  0037C0  0E00               	movlw	0
 12870  0037C2  6E09               	movwf	__div_to_l_@quot+1,c
 12871  0037C4  0E00               	movlw	0
 12872  0037C6  6E0A               	movwf	__div_to_l_@quot+2,c
 12873  0037C8  0E00               	movlw	0
 12874  0037CA  6E0B               	movwf	__div_to_l_@quot+3,c
 12875  0037CC  0E7F               	movlw	127
 12876  0037CE  5E0D               	subwf	__div_to_l_@exp1,f,c
 12877  0037D0  500C               	movf	__div_to_l_@cntr,w,c
 12878  0037D2  0FA0               	addlw	160
 12879  0037D4  5E0D               	subwf	__div_to_l_@exp1,f,c
 12880  0037D6  6E07               	movwf	??__div_to_l_& (0+255),c
 12881  0037D8  0E20               	movlw	32
 12882  0037DA  6E0C               	movwf	__div_to_l_@cntr,c
 12883  0037DC  5007               	movf	??__div_to_l_& (0+255),w,c
 12884  0037DE                     i2l972:
 12885  0037DE  90D8               	bcf	status,0,c
 12886  0037E0  3608               	rlcf	__div_to_l_@quot,f,c
 12887  0037E2  3609               	rlcf	__div_to_l_@quot+1,f,c
 12888  0037E4  360A               	rlcf	__div_to_l_@quot+2,f,c
 12889  0037E6  360B               	rlcf	__div_to_l_@quot+3,f,c
 12890  0037E8  5004               	movf	__div_to_l_@f2,w,c
 12891  0037EA  5C01               	subwf	__div_to_l_@f1,w,c
 12892  0037EC  5005               	movf	__div_to_l_@f2+1,w,c
 12893  0037EE  5802               	subwfb	__div_to_l_@f1+1,w,c
 12894  0037F0  5006               	movf	__div_to_l_@f2+2,w,c
 12895  0037F2  5803               	subwfb	__div_to_l_@f1+2,w,c
 12896  0037F4  5007               	movf	__div_to_l_@f2+3,w,c
 12897  0037F6  5804               	subwfb	__div_to_l_@f1+3,w,c
 12898  0037F8  A0D8               	btfss	status,0,c
 12899  0037FA  D009               	goto	i2l5569
 12900  0037FC  5004               	movf	__div_to_l_@f2,w,c
 12901  0037FE  5E01               	subwf	__div_to_l_@f1,f,c
 12902  003800  5005               	movf	__div_to_l_@f2+1,w,c
 12903  003802  5A02               	subwfb	__div_to_l_@f1+1,f,c
 12904  003804  5006               	movf	__div_to_l_@f2+2,w,c
 12905  003806  5A03               	subwfb	__div_to_l_@f1+2,f,c
 12906  003808  5007               	movf	__div_to_l_@f2+3,w,c
 12907  00380A  5A04               	subwfb	__div_to_l_@f1+3,f,c
 12908  00380C  8008               	bsf	__div_to_l_@quot,0,c
 12909  00380E                     i2l5569:
 12910  00380E  90D8               	bcf	status,0,c
 12911  003810  3601               	rlcf	__div_to_l_@f1,f,c
 12912  003812  3602               	rlcf	__div_to_l_@f1+1,f,c
 12913  003814  3603               	rlcf	__div_to_l_@f1+2,f,c
 12914  003816  3604               	rlcf	__div_to_l_@f1+3,f,c
 12915  003818  2E0C               	decfsz	__div_to_l_@cntr,f,c
 12916  00381A  D7E1               	goto	i2l972
 12917  00381C  AE0D               	btfss	__div_to_l_@exp1,7,c
 12918  00381E  D00D               	goto	i2l5583
 12919  003820  500D               	movf	__div_to_l_@exp1,w,c
 12920  003822  0A80               	xorlw	128
 12921  003824  0F9F               	addlw	159
 12922  003826  A0D8               	btfss	status,0,c
 12923  003828  D00B               	goto	i2u345_40
 12924  00382A                     i2l5579:
 12925  00382A  90D8               	bcf	status,0,c
 12926  00382C  320B               	rrcf	__div_to_l_@quot+3,f,c
 12927  00382E  320A               	rrcf	__div_to_l_@quot+2,f,c
 12928  003830  3209               	rrcf	__div_to_l_@quot+1,f,c
 12929  003832  3208               	rrcf	__div_to_l_@quot,f,c
 12930  003834  3E0D               	incfsz	__div_to_l_@exp1,f,c
 12931  003836  D7F9               	goto	i2l5579
 12932  003838  D014               	goto	i2l979
 12933  00383A                     i2l5583:
 12934  00383A  0E1F               	movlw	31
 12935  00383C  640D               	cpfsgt	__div_to_l_@exp1,c
 12936  00383E  D00F               	goto	i2l5591
 12937  003840                     i2u345_40:
 12938  003840  0E00               	movlw	0
 12939  003842  6E01               	movwf	?__div_to_l_,c
 12940  003844  0E00               	movlw	0
 12941  003846  6E02               	movwf	?__div_to_l_+1,c
 12942  003848  0E00               	movlw	0
 12943  00384A  6E03               	movwf	?__div_to_l_+2,c
 12944  00384C  0E00               	movlw	0
 12945  00384E  6E04               	movwf	?__div_to_l_+3,c
 12946  003850  D010               	goto	i2l970
 12947  003852                     i2l5589:
 12948  003852  90D8               	bcf	status,0,c
 12949  003854  3608               	rlcf	__div_to_l_@quot,f,c
 12950  003856  3609               	rlcf	__div_to_l_@quot+1,f,c
 12951  003858  360A               	rlcf	__div_to_l_@quot+2,f,c
 12952  00385A  360B               	rlcf	__div_to_l_@quot+3,f,c
 12953  00385C  060D               	decf	__div_to_l_@exp1,f,c
 12954  00385E                     i2l5591:
 12955  00385E  660D               	tstfsz	__div_to_l_@exp1,c
 12956  003860  D7F8               	goto	i2l5589
 12957  003862                     i2l979:
 12958  003862  C008  F001         	movff	__div_to_l_@quot,?__div_to_l_
 12959  003866  C009  F002         	movff	__div_to_l_@quot+1,?__div_to_l_+1
 12960  00386A  C00A  F003         	movff	__div_to_l_@quot+2,?__div_to_l_+2
 12961  00386E  C00B  F004         	movff	__div_to_l_@quot+3,?__div_to_l_+3
 12962  003872                     i2l970:
 12963  003872  0012               	return	
 12964  003874                     __end_of__div_to_l_:
 12965                           	opt stack 0
 12966                           tosu	equ	0xFFF
 12967                           tosh	equ	0xFFE
 12968                           tosl	equ	0xFFD
 12969                           pclatu	equ	0xFFB
 12970                           pclath	equ	0xFFA
 12971                           tblptru	equ	0xFF8
 12972                           tblptrh	equ	0xFF7
 12973                           tblptrl	equ	0xFF6
 12974                           tablat	equ	0xFF5
 12975                           prodh	equ	0xFF4
 12976                           prodl	equ	0xFF3
 12977                           intcon	equ	0xFF2
 12978                           intcon2	equ	0xFF1
 12979                           indf0	equ	0xFEF
 12980                           postinc0	equ	0xFEE
 12981                           fsr0h	equ	0xFEA
 12982                           fsr0l	equ	0xFE9
 12983                           wreg	equ	0xFE8
 12984                           postinc1	equ	0xFE6
 12985                           postdec1	equ	0xFE5
 12986                           fsr1h	equ	0xFE2
 12987                           fsr1l	equ	0xFE1
 12988                           indf2	equ	0xFDF
 12989                           postinc2	equ	0xFDE
 12990                           postdec2	equ	0xFDD
 12991                           plusw2	equ	0xFDB
 12992                           fsr2h	equ	0xFDA
 12993                           fsr2l	equ	0xFD9
 12994                           status	equ	0xFD8
 12995                           
 12996 ;; *************** function __tdiv_to_l_ *****************
 12997 ;; Defined at:
 12998 ;;		line 61 in file "/usr/opt/microchip/xc8/v1.20/sources/common/ftdivl.c"
 12999 ;; Parameters:    Size  Location     Type
 13000 ;;  f1              3    0[COMRAM] float 
 13001 ;;  f2              3    3[COMRAM] float 
 13002 ;; Auto vars:     Size  Location     Type
 13003 ;;  quot            4   11[COMRAM] unsigned long 
 13004 ;;  exp1            1   16[COMRAM] unsigned char 
 13005 ;;  cntr            1   15[COMRAM] unsigned char 
 13006 ;; Return value:  Size  Location     Type
 13007 ;;                  4    0[COMRAM] unsigned long 
 13008 ;; Registers used:
 13009 ;;		wreg, status,2, status,0
 13010 ;; Tracked objects:
 13011 ;;		On entry : 0/0
 13012 ;;		On exit  : 0/0
 13013 ;;		Unchanged: 0/0
 13014 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13015 ;;      Params:         6       0       0       0       0       0       0       0       0
 13016 ;;      Locals:         6       0       0       0       0       0       0       0       0
 13017 ;;      Temps:          5       0       0       0       0       0       0       0       0
 13018 ;;      Totals:        17       0       0       0       0       0       0       0       0
 13019 ;;Total ram usage:       17 bytes
 13020 ;; Hardware stack levels used:    1
 13021 ;; This function calls:
 13022 ;;		Nothing
 13023 ;; This function is called by:
 13024 ;;		_sprintf
 13025 ;; This function uses a non-reentrant model
 13026 ;;
 13027                           
 13028                           	psect	text43
 13029  00354E                     __ptext43:
 13030                           	opt stack 0
 13031  00354E                     __tdiv_to_l_:
 13032                           	opt stack 23
 13033                           
 13034                           ;incstack = 0
 13035                           ;incstack = 0
 13036  00354E  0E0F               	movlw	15
 13037  003550  6E07               	movwf	??__tdiv_to_l_& (0+255),c
 13038  003552  C001  F008         	movff	__tdiv_to_l_@f1,??__tdiv_to_l_+1
 13039  003556  C002  F009         	movff	__tdiv_to_l_@f1+1,??__tdiv_to_l_+2
 13040  00355A  C003  F00A         	movff	__tdiv_to_l_@f1+2,??__tdiv_to_l_+3
 13041  00355E  2807               	incf	??__tdiv_to_l_,w,c
 13042  003560  6E0B               	movwf	(??__tdiv_to_l_+4)& (0+255),c
 13043  003562  D004               	goto	i2u331_40
 13044  003564                     i2u331_45:
 13045  003564  90D8               	bcf	status,0,c
 13046  003566  320A               	rrcf	??__tdiv_to_l_+3,f,c
 13047  003568  3209               	rrcf	??__tdiv_to_l_+2,f,c
 13048  00356A  3208               	rrcf	??__tdiv_to_l_+1,f,c
 13049  00356C                     i2u331_40:
 13050  00356C  2E0B               	decfsz	(??__tdiv_to_l_+4)& (0+255),f,c
 13051  00356E  D7FA               	goto	i2u331_45
 13052  003570  5008               	movf	??__tdiv_to_l_+1,w,c
 13053  003572  6E11               	movwf	__tdiv_to_l_@exp1,c
 13054  003574  6611               	tstfsz	__tdiv_to_l_@exp1& (0+255),c
 13055  003576  D001               	goto	i2l5487
 13056  003578  D061               	goto	i2u338_40
 13057  00357A                     i2l5487:
 13058  00357A  0E0F               	movlw	15
 13059  00357C  6E07               	movwf	??__tdiv_to_l_& (0+255),c
 13060  00357E  C004  F008         	movff	__tdiv_to_l_@f2,??__tdiv_to_l_+1
 13061  003582  C005  F009         	movff	__tdiv_to_l_@f2+1,??__tdiv_to_l_+2
 13062  003586  C006  F00A         	movff	__tdiv_to_l_@f2+2,??__tdiv_to_l_+3
 13063  00358A  2807               	incf	??__tdiv_to_l_,w,c
 13064  00358C  6E0B               	movwf	(??__tdiv_to_l_+4)& (0+255),c
 13065  00358E  D004               	goto	i2u333_40
 13066  003590                     i2u333_45:
 13067  003590  90D8               	bcf	status,0,c
 13068  003592  320A               	rrcf	??__tdiv_to_l_+3,f,c
 13069  003594  3209               	rrcf	??__tdiv_to_l_+2,f,c
 13070  003596  3208               	rrcf	??__tdiv_to_l_+1,f,c
 13071  003598                     i2u333_40:
 13072  003598  2E0B               	decfsz	(??__tdiv_to_l_+4)& (0+255),f,c
 13073  00359A  D7FA               	goto	i2u333_45
 13074  00359C  5008               	movf	??__tdiv_to_l_+1,w,c
 13075  00359E  6E10               	movwf	__tdiv_to_l_@cntr,c
 13076  0035A0  6610               	tstfsz	__tdiv_to_l_@cntr& (0+255),c
 13077  0035A2  D001               	goto	i2l5493
 13078  0035A4  D04B               	goto	i2u338_40
 13079  0035A6                     i2l5493:
 13080  0035A6  8E02               	bsf	__tdiv_to_l_@f1+1,7,c
 13081  0035A8  0EFF               	movlw	255
 13082  0035AA  1601               	andwf	__tdiv_to_l_@f1,f,c
 13083  0035AC  0EFF               	movlw	255
 13084  0035AE  1602               	andwf	__tdiv_to_l_@f1+1,f,c
 13085  0035B0  0E00               	movlw	0
 13086  0035B2  1603               	andwf	__tdiv_to_l_@f1+2,f,c
 13087  0035B4  8E05               	bsf	__tdiv_to_l_@f2+1,7,c
 13088  0035B6  0EFF               	movlw	255
 13089  0035B8  1604               	andwf	__tdiv_to_l_@f2,f,c
 13090  0035BA  0EFF               	movlw	255
 13091  0035BC  1605               	andwf	__tdiv_to_l_@f2+1,f,c
 13092  0035BE  0E00               	movlw	0
 13093  0035C0  1606               	andwf	__tdiv_to_l_@f2+2,f,c
 13094  0035C2  0E00               	movlw	0
 13095  0035C4  6E0C               	movwf	__tdiv_to_l_@quot,c
 13096  0035C6  0E00               	movlw	0
 13097  0035C8  6E0D               	movwf	__tdiv_to_l_@quot+1,c
 13098  0035CA  0E00               	movlw	0
 13099  0035CC  6E0E               	movwf	__tdiv_to_l_@quot+2,c
 13100  0035CE  0E00               	movlw	0
 13101  0035D0  6E0F               	movwf	__tdiv_to_l_@quot+3,c
 13102  0035D2  0E7F               	movlw	127
 13103  0035D4  5E11               	subwf	__tdiv_to_l_@exp1,f,c
 13104  0035D6  5010               	movf	__tdiv_to_l_@cntr,w,c
 13105  0035D8  0F98               	addlw	152
 13106  0035DA  5E11               	subwf	__tdiv_to_l_@exp1,f,c
 13107  0035DC  6E07               	movwf	??__tdiv_to_l_& (0+255),c
 13108  0035DE  0E18               	movlw	24
 13109  0035E0  6E10               	movwf	__tdiv_to_l_@cntr,c
 13110  0035E2  5007               	movf	??__tdiv_to_l_& (0+255),w,c
 13111  0035E4                     i2l5507:
 13112  0035E4  90D8               	bcf	status,0,c
 13113  0035E6  360C               	rlcf	__tdiv_to_l_@quot,f,c
 13114  0035E8  360D               	rlcf	__tdiv_to_l_@quot+1,f,c
 13115  0035EA  360E               	rlcf	__tdiv_to_l_@quot+2,f,c
 13116  0035EC  360F               	rlcf	__tdiv_to_l_@quot+3,f,c
 13117  0035EE  5004               	movf	__tdiv_to_l_@f2,w,c
 13118  0035F0  5C01               	subwf	__tdiv_to_l_@f1,w,c
 13119  0035F2  5005               	movf	__tdiv_to_l_@f2+1,w,c
 13120  0035F4  5802               	subwfb	__tdiv_to_l_@f1+1,w,c
 13121  0035F6  5006               	movf	__tdiv_to_l_@f2+2,w,c
 13122  0035F8  5803               	subwfb	__tdiv_to_l_@f1+2,w,c
 13123  0035FA  A0D8               	btfss	status,0,c
 13124  0035FC  D007               	goto	i2l1091
 13125  0035FE  5004               	movf	__tdiv_to_l_@f2,w,c
 13126  003600  5E01               	subwf	__tdiv_to_l_@f1,f,c
 13127  003602  5005               	movf	__tdiv_to_l_@f2+1,w,c
 13128  003604  5A02               	subwfb	__tdiv_to_l_@f1+1,f,c
 13129  003606  5006               	movf	__tdiv_to_l_@f2+2,w,c
 13130  003608  5A03               	subwfb	__tdiv_to_l_@f1+2,f,c
 13131  00360A  800C               	bsf	__tdiv_to_l_@quot,0,c
 13132  00360C                     i2l1091:
 13133  00360C  90D8               	bcf	status,0,c
 13134  00360E  3601               	rlcf	__tdiv_to_l_@f1,f,c
 13135  003610  3602               	rlcf	__tdiv_to_l_@f1+1,f,c
 13136  003612  3603               	rlcf	__tdiv_to_l_@f1+2,f,c
 13137  003614  2E10               	decfsz	__tdiv_to_l_@cntr,f,c
 13138  003616  D7E6               	goto	i2l5507
 13139  003618  AE11               	btfss	__tdiv_to_l_@exp1,7,c
 13140  00361A  D00D               	goto	i2l5527
 13141  00361C  5011               	movf	__tdiv_to_l_@exp1,w,c
 13142  00361E  0A80               	xorlw	128
 13143  003620  0F97               	addlw	151
 13144  003622  A0D8               	btfss	status,0,c
 13145  003624  D00B               	goto	i2u338_40
 13146  003626                     i2l5523:
 13147  003626  90D8               	bcf	status,0,c
 13148  003628  320F               	rrcf	__tdiv_to_l_@quot+3,f,c
 13149  00362A  320E               	rrcf	__tdiv_to_l_@quot+2,f,c
 13150  00362C  320D               	rrcf	__tdiv_to_l_@quot+1,f,c
 13151  00362E  320C               	rrcf	__tdiv_to_l_@quot,f,c
 13152  003630  3E11               	incfsz	__tdiv_to_l_@exp1,f,c
 13153  003632  D7F9               	goto	i2l5523
 13154  003634  D014               	goto	i2l1097
 13155  003636                     i2l5527:
 13156  003636  0E17               	movlw	23
 13157  003638  6411               	cpfsgt	__tdiv_to_l_@exp1,c
 13158  00363A  D00F               	goto	i2l5535
 13159  00363C                     i2u338_40:
 13160  00363C  0E00               	movlw	0
 13161  00363E  6E01               	movwf	?__tdiv_to_l_,c
 13162  003640  0E00               	movlw	0
 13163  003642  6E02               	movwf	?__tdiv_to_l_+1,c
 13164  003644  0E00               	movlw	0
 13165  003646  6E03               	movwf	?__tdiv_to_l_+2,c
 13166  003648  0E00               	movlw	0
 13167  00364A  6E04               	movwf	?__tdiv_to_l_+3,c
 13168  00364C  D010               	goto	i2l1088
 13169  00364E                     i2l5533:
 13170  00364E  90D8               	bcf	status,0,c
 13171  003650  360C               	rlcf	__tdiv_to_l_@quot,f,c
 13172  003652  360D               	rlcf	__tdiv_to_l_@quot+1,f,c
 13173  003654  360E               	rlcf	__tdiv_to_l_@quot+2,f,c
 13174  003656  360F               	rlcf	__tdiv_to_l_@quot+3,f,c
 13175  003658  0611               	decf	__tdiv_to_l_@exp1,f,c
 13176  00365A                     i2l5535:
 13177  00365A  6611               	tstfsz	__tdiv_to_l_@exp1,c
 13178  00365C  D7F8               	goto	i2l5533
 13179  00365E                     i2l1097:
 13180  00365E  C00C  F001         	movff	__tdiv_to_l_@quot,?__tdiv_to_l_
 13181  003662  C00D  F002         	movff	__tdiv_to_l_@quot+1,?__tdiv_to_l_+1
 13182  003666  C00E  F003         	movff	__tdiv_to_l_@quot+2,?__tdiv_to_l_+2
 13183  00366A  C00F  F004         	movff	__tdiv_to_l_@quot+3,?__tdiv_to_l_+3
 13184  00366E                     i2l1088:
 13185  00366E  0012               	return	
 13186  003670                     __end_of__tdiv_to_l_:
 13187                           	opt stack 0
 13188                           tosu	equ	0xFFF
 13189                           tosh	equ	0xFFE
 13190                           tosl	equ	0xFFD
 13191                           pclatu	equ	0xFFB
 13192                           pclath	equ	0xFFA
 13193                           tblptru	equ	0xFF8
 13194                           tblptrh	equ	0xFF7
 13195                           tblptrl	equ	0xFF6
 13196                           tablat	equ	0xFF5
 13197                           prodh	equ	0xFF4
 13198                           prodl	equ	0xFF3
 13199                           intcon	equ	0xFF2
 13200                           intcon2	equ	0xFF1
 13201                           indf0	equ	0xFEF
 13202                           postinc0	equ	0xFEE
 13203                           fsr0h	equ	0xFEA
 13204                           fsr0l	equ	0xFE9
 13205                           wreg	equ	0xFE8
 13206                           postinc1	equ	0xFE6
 13207                           postdec1	equ	0xFE5
 13208                           fsr1h	equ	0xFE2
 13209                           fsr1l	equ	0xFE1
 13210                           indf2	equ	0xFDF
 13211                           postinc2	equ	0xFDE
 13212                           postdec2	equ	0xFDD
 13213                           plusw2	equ	0xFDB
 13214                           fsr2h	equ	0xFDA
 13215                           fsr2l	equ	0xFD9
 13216                           status	equ	0xFD8
 13217                           
 13218 ;; *************** function _isdigit *****************
 13219 ;; Defined at:
 13220 ;;		line 13 in file "/usr/opt/microchip/xc8/v1.20/sources/common/isdigit.c"
 13221 ;; Parameters:    Size  Location     Type
 13222 ;;  c               1    0[COMRAM] unsigned char 
 13223 ;; Auto vars:     Size  Location     Type
 13224 ;;		None
 13225 ;; Return value:  Size  Location     Type
 13226 ;;		None               void
 13227 ;; Registers used:
 13228 ;;		wreg, status,2, status,0
 13229 ;; Tracked objects:
 13230 ;;		On entry : 0/0
 13231 ;;		On exit  : 0/0
 13232 ;;		Unchanged: 0/0
 13233 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13234 ;;      Params:         1       0       0       0       0       0       0       0       0
 13235 ;;      Locals:         1       0       0       0       0       0       0       0       0
 13236 ;;      Temps:          1       0       0       0       0       0       0       0       0
 13237 ;;      Totals:         3       0       0       0       0       0       0       0       0
 13238 ;;Total ram usage:        3 bytes
 13239 ;; Hardware stack levels used:    1
 13240 ;; This function calls:
 13241 ;;		Nothing
 13242 ;; This function is called by:
 13243 ;;		_sprintf
 13244 ;; This function uses a non-reentrant model
 13245 ;;
 13246                           
 13247                           	psect	text44
 13248  0049D2                     __ptext44:
 13249                           	opt stack 0
 13250  0049D2                     _isdigit:
 13251                           	opt stack 23
 13252                           
 13253                           ;incstack = 0
 13254                           ;incstack = 0
 13255  0049D2  6E02               	movwf	??_isdigit& (0+255),c
 13256  0049D4  0E00               	movlw	0
 13257  0049D6  6E03               	movwf	_isdigit$938,c
 13258  0049D8  5002               	movf	??_isdigit& (0+255),w,c
 13259  0049DA  0E3A               	movlw	58
 13260  0049DC  6001               	cpfslt	isdigit@c,c
 13261  0049DE  D007               	goto	i2l5477
 13262  0049E0  0E2F               	movlw	47
 13263  0049E2  6401               	cpfsgt	isdigit@c,c
 13264  0049E4  D004               	goto	i2l5477
 13265  0049E6  6E02               	movwf	??_isdigit& (0+255),c
 13266  0049E8  0E01               	movlw	1
 13267  0049EA  6E03               	movwf	_isdigit$938,c
 13268  0049EC  5002               	movf	??_isdigit& (0+255),w,c
 13269  0049EE                     i2l5477:
 13270  0049EE  C003  F002         	movff	_isdigit$938,??_isdigit
 13271  0049F2  3002               	rrcf	??_isdigit,w,c
 13272  0049F4  0012               	return	
 13273  0049F6                     __end_of_isdigit:
 13274                           	opt stack 0
 13275                           tosu	equ	0xFFF
 13276                           tosh	equ	0xFFE
 13277                           tosl	equ	0xFFD
 13278                           pclatu	equ	0xFFB
 13279                           pclath	equ	0xFFA
 13280                           tblptru	equ	0xFF8
 13281                           tblptrh	equ	0xFF7
 13282                           tblptrl	equ	0xFF6
 13283                           tablat	equ	0xFF5
 13284                           prodh	equ	0xFF4
 13285                           prodl	equ	0xFF3
 13286                           intcon	equ	0xFF2
 13287                           intcon2	equ	0xFF1
 13288                           indf0	equ	0xFEF
 13289                           postinc0	equ	0xFEE
 13290                           fsr0h	equ	0xFEA
 13291                           fsr0l	equ	0xFE9
 13292                           wreg	equ	0xFE8
 13293                           postinc1	equ	0xFE6
 13294                           postdec1	equ	0xFE5
 13295                           fsr1h	equ	0xFE2
 13296                           fsr1l	equ	0xFE1
 13297                           indf2	equ	0xFDF
 13298                           postinc2	equ	0xFDE
 13299                           postdec2	equ	0xFDD
 13300                           plusw2	equ	0xFDB
 13301                           fsr2h	equ	0xFDA
 13302                           fsr2l	equ	0xFD9
 13303                           status	equ	0xFD8
 13304                           
 13305 ;; *************** function _scale *****************
 13306 ;; Defined at:
 13307 ;;		line 426 in file "/usr/opt/microchip/xc8/v1.20/sources/common/doprnt.c"
 13308 ;; Parameters:    Size  Location     Type
 13309 ;;  scl             1   62[COMRAM] char 
 13310 ;; Auto vars:     Size  Location     Type
 13311 ;;		None
 13312 ;; Return value:  Size  Location     Type
 13313 ;;                  3   62[COMRAM] char 
 13314 ;; Registers used:
 13315 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13316 ;; Tracked objects:
 13317 ;;		On entry : 0/0
 13318 ;;		On exit  : 0/0
 13319 ;;		Unchanged: 0/0
 13320 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13321 ;;      Params:         3       0       0       0       0       0       0       0       0
 13322 ;;      Locals:         3       0       0       0       0       0       0       0       0
 13323 ;;      Temps:          6       0       0       0       0       0       0       0       0
 13324 ;;      Totals:        12       0       0       0       0       0       0       0       0
 13325 ;;Total ram usage:       12 bytes
 13326 ;; Hardware stack levels used:    1
 13327 ;; Hardware stack levels required when called:    2
 13328 ;; This function calls:
 13329 ;;		___ftmul
 13330 ;;		___awdiv
 13331 ;;		___awmod
 13332 ;;		___wmul
 13333 ;; This function is called by:
 13334 ;;		_sprintf
 13335 ;; This function uses a non-reentrant model
 13336 ;;
 13337                           
 13338                           	psect	text45
 13339  002466                     __ptext45:
 13340                           	opt stack 0
 13341  002466                     _scale:
 13342                           	opt stack 21
 13343                           
 13344                           ;doprnt.c: 428: if(scl < 0) {
 13345                           
 13346                           ;incstack = 0
 13347                           ;incstack = 0
 13348  002466  AE3F               	btfss	scale@scl,7,c
 13349  002468  D108               	goto	i2l6223
 13350                           
 13351                           ;doprnt.c: 429: scl = -scl;
 13352  00246A  6C3F               	negf	scale@scl,c
 13353                           
 13354                           ;doprnt.c: 430: if(scl>=110)
 13355  00246C  503F               	movf	scale@scl,w,c
 13356  00246E  0A80               	xorlw	128
 13357  002470  0F12               	addlw	-238
 13358  002472  A0D8               	btfss	status,0,c
 13359  002474  D09D               	goto	i2l6213
 13360                           
 13361                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
 13362  002476  0E00               	movlw	0
 13363  002478  6E1A               	movwf	?___wmul+3,c
 13364  00247A  0E03               	movlw	3
 13365  00247C  6E19               	movwf	?___wmul+2,c
 13366  00247E  0E00               	movlw	0
 13367  002480  6E0D               	movwf	?___awdiv+3,c
 13368  002482  0E0A               	movlw	10
 13369  002484  6E0C               	movwf	?___awdiv+2,c
 13370  002486  0E00               	movlw	0
 13371  002488  6E04               	movwf	?___awmod+3,c
 13372  00248A  0E64               	movlw	100
 13373  00248C  6E03               	movwf	?___awmod+2,c
 13374  00248E  503F               	movf	scale@scl,w,c
 13375  002490  6E01               	movwf	?___awmod,c
 13376  002492  6A02               	clrf	?___awmod+1,c
 13377  002494  BE01               	btfsc	?___awmod,7,c
 13378  002496  0602               	decf	?___awmod+1,f,c
 13379  002498  EC4A  F021         	call	___awmod	;wreg free
 13380  00249C  C001  F00A         	movff	?___awmod,?___awdiv
 13381  0024A0  C002  F00B         	movff	?___awmod+1,?___awdiv+1
 13382  0024A4  EC7C  F020         	call	___awdiv	;wreg free
 13383  0024A8  0E09               	movlw	9
 13384  0024AA  240A               	addwf	?___awdiv,w,c
 13385  0024AC  6E17               	movwf	?___wmul,c
 13386  0024AE  0E00               	movlw	0
 13387  0024B0  200B               	addwfc	?___awdiv+1,w,c
 13388  0024B2  6E18               	movwf	?___wmul+1,c
 13389  0024B4  EC75  F024         	call	___wmul	;wreg free
 13390  0024B8  0E33               	movlw	low __npowers_
 13391  0024BA  2417               	addwf	?___wmul,w,c
 13392  0024BC  6EF6               	movwf	tblptrl,c
 13393  0024BE  0E7F               	movlw	high __npowers_
 13394  0024C0  2018               	addwfc	?___wmul+1,w,c
 13395  0024C2  6EF7               	movwf	tblptrh,c
 13396  0024C4  0009               	tblrd		*+
 13397  0024C6  CFF5 F042          	movff	tablat,??_scale
 13398  0024CA  0009               	tblrd		*+
 13399  0024CC  CFF5 F043          	movff	tablat,??_scale+1
 13400  0024D0  0009               	tblrd		*+
 13401  0024D2  CFF5 F044          	movff	tablat,??_scale+2
 13402  0024D6  C044  F033         	movff	??_scale+2,?___ftmul+5
 13403  0024DA  C043  F032         	movff	??_scale+1,?___ftmul+4
 13404  0024DE  C042  F031         	movff	??_scale,?___ftmul+3
 13405  0024E2  0E00               	movlw	0
 13406  0024E4  6E1A               	movwf	?___wmul+3,c
 13407  0024E6  0E03               	movlw	3
 13408  0024E8  6E19               	movwf	?___wmul+2,c
 13409  0024EA  0E00               	movlw	0
 13410  0024EC  6E0D               	movwf	?___awdiv+3,c
 13411  0024EE  0E64               	movlw	100
 13412  0024F0  6E0C               	movwf	?___awdiv+2,c
 13413  0024F2  503F               	movf	scale@scl,w,c
 13414  0024F4  6E0A               	movwf	?___awdiv,c
 13415  0024F6  6A0B               	clrf	?___awdiv+1,c
 13416  0024F8  BE0A               	btfsc	?___awdiv,7,c
 13417  0024FA  060B               	decf	?___awdiv+1,f,c
 13418  0024FC  EC7C  F020         	call	___awdiv	;wreg free
 13419  002500  0E12               	movlw	18
 13420  002502  240A               	addwf	?___awdiv,w,c
 13421  002504  6E17               	movwf	?___wmul,c
 13422  002506  0E00               	movlw	0
 13423  002508  200B               	addwfc	?___awdiv+1,w,c
 13424  00250A  6E18               	movwf	?___wmul+1,c
 13425  00250C  EC75  F024         	call	___wmul	;wreg free
 13426  002510  0E33               	movlw	low __npowers_
 13427  002512  2417               	addwf	?___wmul,w,c
 13428  002514  6EF6               	movwf	tblptrl,c
 13429  002516  0E7F               	movlw	high __npowers_
 13430  002518  2018               	addwfc	?___wmul+1,w,c
 13431  00251A  6EF7               	movwf	tblptrh,c
 13432  00251C  0009               	tblrd		*+
 13433  00251E  CFF5 F045          	movff	tablat,??_scale+3
 13434  002522  0009               	tblrd		*+
 13435  002524  CFF5 F046          	movff	tablat,??_scale+4
 13436  002528  0009               	tblrd		*+
 13437  00252A  CFF5 F047          	movff	tablat,??_scale+5
 13438  00252E  C047  F030         	movff	??_scale+5,?___ftmul+2
 13439  002532  C046  F02F         	movff	??_scale+4,?___ftmul+1
 13440  002536  C045  F02E         	movff	??_scale+3,?___ftmul
 13441  00253A  EC38  F01B         	call	___ftmul	;wreg free
 13442  00253E  C030  F04A         	movff	?___ftmul+2,_scale$1312+2
 13443  002542  C02F  F049         	movff	?___ftmul+1,_scale$1312+1
 13444  002546  C02E  F048         	movff	?___ftmul,_scale$1312
 13445                           
 13446                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
 13447  00254A  C048  F02E         	movff	_scale$1312,?___ftmul
 13448  00254E  C049  F02F         	movff	_scale$1312+1,?___ftmul+1
 13449  002552  C04A  F030         	movff	_scale$1312+2,?___ftmul+2
 13450  002556  0E00               	movlw	0
 13451  002558  6E1A               	movwf	?___wmul+3,c
 13452  00255A  0E03               	movlw	3
 13453  00255C  6E19               	movwf	?___wmul+2,c
 13454  00255E  0E00               	movlw	0
 13455  002560  6E04               	movwf	?___awmod+3,c
 13456  002562  0E0A               	movlw	10
 13457  002564  6E03               	movwf	?___awmod+2,c
 13458  002566  503F               	movf	scale@scl,w,c
 13459  002568  6E01               	movwf	?___awmod,c
 13460  00256A  6A02               	clrf	?___awmod+1,c
 13461  00256C  BE01               	btfsc	?___awmod,7,c
 13462  00256E  0602               	decf	?___awmod+1,f,c
 13463  002570  EC4A  F021         	call	___awmod	;wreg free
 13464  002574  C001  F017         	movff	?___awmod,?___wmul
 13465  002578  C002  F018         	movff	?___awmod+1,?___wmul+1
 13466  00257C  EC75  F024         	call	___wmul	;wreg free
 13467  002580  0E33               	movlw	low __npowers_
 13468  002582  2417               	addwf	?___wmul,w,c
 13469  002584  6EF6               	movwf	tblptrl,c
 13470  002586  0E7F               	movlw	high __npowers_
 13471  002588  2018               	addwfc	?___wmul+1,w,c
 13472  00258A  6EF7               	movwf	tblptrh,c
 13473  00258C  0009               	tblrd		*+
 13474  00258E  CFF5 F042          	movff	tablat,??_scale
 13475  002592  0009               	tblrd		*+
 13476  002594  CFF5 F043          	movff	tablat,??_scale+1
 13477  002598  0009               	tblrd		*+
 13478  00259A  CFF5 F044          	movff	tablat,??_scale+2
 13479  00259E  C044  F033         	movff	??_scale+2,?___ftmul+5
 13480  0025A2  C043  F032         	movff	??_scale+1,?___ftmul+4
 13481  0025A6  C042  F031         	movff	??_scale,?___ftmul+3
 13482  0025AA  EC38  F01B         	call	___ftmul	;wreg free
 13483  0025AE  D164               	goto	L23
 13484  0025B0                     i2l6213:
 13485                           
 13486                           ;doprnt.c: 432: else if(scl > 10)
 13487  0025B0  503F               	movf	scale@scl,w,c
 13488  0025B2  0A80               	xorlw	128
 13489  0025B4  0F75               	addlw	-139
 13490  0025B6  A0D8               	btfss	status,0,c
 13491  0025B8  D059               	goto	i2l6219
 13492                           
 13493                           ;doprnt.c: 433: return _npowers_[scl/10+9] * _npowers_[scl%10];
 13494  0025BA  0E00               	movlw	0
 13495  0025BC  6E1A               	movwf	?___wmul+3,c
 13496  0025BE  0E03               	movlw	3
 13497  0025C0  6E19               	movwf	?___wmul+2,c
 13498  0025C2  0E00               	movlw	0
 13499  0025C4  6E0D               	movwf	?___awdiv+3,c
 13500  0025C6  0E0A               	movlw	10
 13501  0025C8  6E0C               	movwf	?___awdiv+2,c
 13502  0025CA  503F               	movf	scale@scl,w,c
 13503  0025CC  6E0A               	movwf	?___awdiv,c
 13504  0025CE  6A0B               	clrf	?___awdiv+1,c
 13505  0025D0  BE0A               	btfsc	?___awdiv,7,c
 13506  0025D2  060B               	decf	?___awdiv+1,f,c
 13507  0025D4  EC7C  F020         	call	___awdiv	;wreg free
 13508  0025D8  0E09               	movlw	9
 13509  0025DA  240A               	addwf	?___awdiv,w,c
 13510  0025DC  6E17               	movwf	?___wmul,c
 13511  0025DE  0E00               	movlw	0
 13512  0025E0  200B               	addwfc	?___awdiv+1,w,c
 13513  0025E2  6E18               	movwf	?___wmul+1,c
 13514  0025E4  EC75  F024         	call	___wmul	;wreg free
 13515  0025E8  0E33               	movlw	low __npowers_
 13516  0025EA  2417               	addwf	?___wmul,w,c
 13517  0025EC  6EF6               	movwf	tblptrl,c
 13518  0025EE  0E7F               	movlw	high __npowers_
 13519  0025F0  2018               	addwfc	?___wmul+1,w,c
 13520  0025F2  6EF7               	movwf	tblptrh,c
 13521  0025F4  0009               	tblrd		*+
 13522  0025F6  CFF5 F042          	movff	tablat,??_scale
 13523  0025FA  0009               	tblrd		*+
 13524  0025FC  CFF5 F043          	movff	tablat,??_scale+1
 13525  002600  0009               	tblrd		*+
 13526  002602  CFF5 F044          	movff	tablat,??_scale+2
 13527  002606  C044  F030         	movff	??_scale+2,?___ftmul+2
 13528  00260A  C043  F02F         	movff	??_scale+1,?___ftmul+1
 13529  00260E  C042  F02E         	movff	??_scale,?___ftmul
 13530  002612  0E00               	movlw	0
 13531  002614  6E1A               	movwf	?___wmul+3,c
 13532  002616  0E03               	movlw	3
 13533  002618  6E19               	movwf	?___wmul+2,c
 13534  00261A  0E00               	movlw	0
 13535  00261C  6E04               	movwf	?___awmod+3,c
 13536  00261E  0E0A               	movlw	10
 13537  002620  6E03               	movwf	?___awmod+2,c
 13538  002622  503F               	movf	scale@scl,w,c
 13539  002624  6E01               	movwf	?___awmod,c
 13540  002626  6A02               	clrf	?___awmod+1,c
 13541  002628  BE01               	btfsc	?___awmod,7,c
 13542  00262A  0602               	decf	?___awmod+1,f,c
 13543  00262C  EC4A  F021         	call	___awmod	;wreg free
 13544  002630  C001  F017         	movff	?___awmod,?___wmul
 13545  002634  C002  F018         	movff	?___awmod+1,?___wmul+1
 13546  002638  EC75  F024         	call	___wmul	;wreg free
 13547  00263C  0E33               	movlw	low __npowers_
 13548  00263E  2417               	addwf	?___wmul,w,c
 13549  002640  6EF6               	movwf	tblptrl,c
 13550  002642  0E7F               	movlw	high __npowers_
 13551  002644  2018               	addwfc	?___wmul+1,w,c
 13552  002646  6EF7               	movwf	tblptrh,c
 13553  002648  0009               	tblrd		*+
 13554  00264A  CFF5 F045          	movff	tablat,??_scale+3
 13555  00264E  0009               	tblrd		*+
 13556  002650  CFF5 F046          	movff	tablat,??_scale+4
 13557  002654  0009               	tblrd		*+
 13558  002656  CFF5 F047          	movff	tablat,??_scale+5
 13559  00265A  C047  F033         	movff	??_scale+5,?___ftmul+5
 13560  00265E  C046  F032         	movff	??_scale+4,?___ftmul+4
 13561  002662  C045  F031         	movff	??_scale+3,?___ftmul+3
 13562  002666  EC38  F01B         	call	___ftmul	;wreg free
 13563  00266A  D106               	goto	L23
 13564  00266C                     i2l6219:
 13565                           
 13566                           ;doprnt.c: 434: return _npowers_[scl];
 13567  00266C  503F               	movf	scale@scl,w,c
 13568  00266E  0D03               	mullw	3
 13569  002670  0E33               	movlw	low __npowers_
 13570  002672  24F3               	addwf	prodl,w,c
 13571  002674  6EF6               	movwf	tblptrl,c
 13572  002676  0E7F               	movlw	high __npowers_
 13573  002678  D10C               	goto	L22
 13574  00267A                     i2l6223:
 13575                           
 13576                           ;doprnt.c: 435: }
 13577                           ;doprnt.c: 436: if(scl>=110)
 13578  00267A  503F               	movf	scale@scl,w,c
 13579  00267C  0A80               	xorlw	128
 13580  00267E  0F12               	addlw	-238
 13581  002680  A0D8               	btfss	status,0,c
 13582  002682  D09D               	goto	i2l6231
 13583                           
 13584                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
 13585  002684  0E00               	movlw	0
 13586  002686  6E1A               	movwf	?___wmul+3,c
 13587  002688  0E03               	movlw	3
 13588  00268A  6E19               	movwf	?___wmul+2,c
 13589  00268C  0E00               	movlw	0
 13590  00268E  6E0D               	movwf	?___awdiv+3,c
 13591  002690  0E0A               	movlw	10
 13592  002692  6E0C               	movwf	?___awdiv+2,c
 13593  002694  0E00               	movlw	0
 13594  002696  6E04               	movwf	?___awmod+3,c
 13595  002698  0E64               	movlw	100
 13596  00269A  6E03               	movwf	?___awmod+2,c
 13597  00269C  503F               	movf	scale@scl,w,c
 13598  00269E  6E01               	movwf	?___awmod,c
 13599  0026A0  6A02               	clrf	?___awmod+1,c
 13600  0026A2  BE01               	btfsc	?___awmod,7,c
 13601  0026A4  0602               	decf	?___awmod+1,f,c
 13602  0026A6  EC4A  F021         	call	___awmod	;wreg free
 13603  0026AA  C001  F00A         	movff	?___awmod,?___awdiv
 13604  0026AE  C002  F00B         	movff	?___awmod+1,?___awdiv+1
 13605  0026B2  EC7C  F020         	call	___awdiv	;wreg free
 13606  0026B6  0E09               	movlw	9
 13607  0026B8  240A               	addwf	?___awdiv,w,c
 13608  0026BA  6E17               	movwf	?___wmul,c
 13609  0026BC  0E00               	movlw	0
 13610  0026BE  200B               	addwfc	?___awdiv+1,w,c
 13611  0026C0  6E18               	movwf	?___wmul+1,c
 13612  0026C2  EC75  F024         	call	___wmul	;wreg free
 13613  0026C6  0E5A               	movlw	low __powers_
 13614  0026C8  2417               	addwf	?___wmul,w,c
 13615  0026CA  6EF6               	movwf	tblptrl,c
 13616  0026CC  0E7F               	movlw	high __powers_
 13617  0026CE  2018               	addwfc	?___wmul+1,w,c
 13618  0026D0  6EF7               	movwf	tblptrh,c
 13619  0026D2  0009               	tblrd		*+
 13620  0026D4  CFF5 F042          	movff	tablat,??_scale
 13621  0026D8  0009               	tblrd		*+
 13622  0026DA  CFF5 F043          	movff	tablat,??_scale+1
 13623  0026DE  0009               	tblrd		*+
 13624  0026E0  CFF5 F044          	movff	tablat,??_scale+2
 13625  0026E4  C044  F033         	movff	??_scale+2,?___ftmul+5
 13626  0026E8  C043  F032         	movff	??_scale+1,?___ftmul+4
 13627  0026EC  C042  F031         	movff	??_scale,?___ftmul+3
 13628  0026F0  0E00               	movlw	0
 13629  0026F2  6E1A               	movwf	?___wmul+3,c
 13630  0026F4  0E03               	movlw	3
 13631  0026F6  6E19               	movwf	?___wmul+2,c
 13632  0026F8  0E00               	movlw	0
 13633  0026FA  6E0D               	movwf	?___awdiv+3,c
 13634  0026FC  0E64               	movlw	100
 13635  0026FE  6E0C               	movwf	?___awdiv+2,c
 13636  002700  503F               	movf	scale@scl,w,c
 13637  002702  6E0A               	movwf	?___awdiv,c
 13638  002704  6A0B               	clrf	?___awdiv+1,c
 13639  002706  BE0A               	btfsc	?___awdiv,7,c
 13640  002708  060B               	decf	?___awdiv+1,f,c
 13641  00270A  EC7C  F020         	call	___awdiv	;wreg free
 13642  00270E  0E12               	movlw	18
 13643  002710  240A               	addwf	?___awdiv,w,c
 13644  002712  6E17               	movwf	?___wmul,c
 13645  002714  0E00               	movlw	0
 13646  002716  200B               	addwfc	?___awdiv+1,w,c
 13647  002718  6E18               	movwf	?___wmul+1,c
 13648  00271A  EC75  F024         	call	___wmul	;wreg free
 13649  00271E  0E5A               	movlw	low __powers_
 13650  002720  2417               	addwf	?___wmul,w,c
 13651  002722  6EF6               	movwf	tblptrl,c
 13652  002724  0E7F               	movlw	high __powers_
 13653  002726  2018               	addwfc	?___wmul+1,w,c
 13654  002728  6EF7               	movwf	tblptrh,c
 13655  00272A  0009               	tblrd		*+
 13656  00272C  CFF5 F045          	movff	tablat,??_scale+3
 13657  002730  0009               	tblrd		*+
 13658  002732  CFF5 F046          	movff	tablat,??_scale+4
 13659  002736  0009               	tblrd		*+
 13660  002738  CFF5 F047          	movff	tablat,??_scale+5
 13661  00273C  C047  F030         	movff	??_scale+5,?___ftmul+2
 13662  002740  C046  F02F         	movff	??_scale+4,?___ftmul+1
 13663  002744  C045  F02E         	movff	??_scale+3,?___ftmul
 13664  002748  EC38  F01B         	call	___ftmul	;wreg free
 13665  00274C  C030  F04A         	movff	?___ftmul+2,_scale$1312+2
 13666  002750  C02F  F049         	movff	?___ftmul+1,_scale$1312+1
 13667  002754  C02E  F048         	movff	?___ftmul,_scale$1312
 13668                           
 13669                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
 13670  002758  C048  F02E         	movff	_scale$1312,?___ftmul
 13671  00275C  C049  F02F         	movff	_scale$1312+1,?___ftmul+1
 13672  002760  C04A  F030         	movff	_scale$1312+2,?___ftmul+2
 13673  002764  0E00               	movlw	0
 13674  002766  6E1A               	movwf	?___wmul+3,c
 13675  002768  0E03               	movlw	3
 13676  00276A  6E19               	movwf	?___wmul+2,c
 13677  00276C  0E00               	movlw	0
 13678  00276E  6E04               	movwf	?___awmod+3,c
 13679  002770  0E0A               	movlw	10
 13680  002772  6E03               	movwf	?___awmod+2,c
 13681  002774  503F               	movf	scale@scl,w,c
 13682  002776  6E01               	movwf	?___awmod,c
 13683  002778  6A02               	clrf	?___awmod+1,c
 13684  00277A  BE01               	btfsc	?___awmod,7,c
 13685  00277C  0602               	decf	?___awmod+1,f,c
 13686  00277E  EC4A  F021         	call	___awmod	;wreg free
 13687  002782  C001  F017         	movff	?___awmod,?___wmul
 13688  002786  C002  F018         	movff	?___awmod+1,?___wmul+1
 13689  00278A  EC75  F024         	call	___wmul	;wreg free
 13690  00278E  0E5A               	movlw	low __powers_
 13691  002790  2417               	addwf	?___wmul,w,c
 13692  002792  6EF6               	movwf	tblptrl,c
 13693  002794  0E7F               	movlw	high __powers_
 13694  002796  2018               	addwfc	?___wmul+1,w,c
 13695  002798  6EF7               	movwf	tblptrh,c
 13696  00279A  0009               	tblrd		*+
 13697  00279C  CFF5 F042          	movff	tablat,??_scale
 13698  0027A0  0009               	tblrd		*+
 13699  0027A2  CFF5 F043          	movff	tablat,??_scale+1
 13700  0027A6  0009               	tblrd		*+
 13701  0027A8  CFF5 F044          	movff	tablat,??_scale+2
 13702  0027AC  C044  F033         	movff	??_scale+2,?___ftmul+5
 13703  0027B0  C043  F032         	movff	??_scale+1,?___ftmul+4
 13704  0027B4  C042  F031         	movff	??_scale,?___ftmul+3
 13705  0027B8  EC38  F01B         	call	___ftmul	;wreg free
 13706  0027BC  D05D               	goto	L23
 13707  0027BE                     i2l6231:
 13708                           
 13709                           ;doprnt.c: 438: else if(scl > 10)
 13710  0027BE  503F               	movf	scale@scl,w,c
 13711  0027C0  0A80               	xorlw	128
 13712  0027C2  0F75               	addlw	-139
 13713  0027C4  A0D8               	btfss	status,0,c
 13714  0027C6  D05F               	goto	i2l6237
 13715                           
 13716                           ;doprnt.c: 439: return _powers_[scl/10+9] * _powers_[scl%10];
 13717  0027C8  0E00               	movlw	0
 13718  0027CA  6E1A               	movwf	?___wmul+3,c
 13719  0027CC  0E03               	movlw	3
 13720  0027CE  6E19               	movwf	?___wmul+2,c
 13721  0027D0  0E00               	movlw	0
 13722  0027D2  6E0D               	movwf	?___awdiv+3,c
 13723  0027D4  0E0A               	movlw	10
 13724  0027D6  6E0C               	movwf	?___awdiv+2,c
 13725  0027D8  503F               	movf	scale@scl,w,c
 13726  0027DA  6E0A               	movwf	?___awdiv,c
 13727  0027DC  6A0B               	clrf	?___awdiv+1,c
 13728  0027DE  BE0A               	btfsc	?___awdiv,7,c
 13729  0027E0  060B               	decf	?___awdiv+1,f,c
 13730  0027E2  EC7C  F020         	call	___awdiv	;wreg free
 13731  0027E6  0E09               	movlw	9
 13732  0027E8  240A               	addwf	?___awdiv,w,c
 13733  0027EA  6E17               	movwf	?___wmul,c
 13734  0027EC  0E00               	movlw	0
 13735  0027EE  200B               	addwfc	?___awdiv+1,w,c
 13736  0027F0  6E18               	movwf	?___wmul+1,c
 13737  0027F2  EC75  F024         	call	___wmul	;wreg free
 13738  0027F6  0E5A               	movlw	low __powers_
 13739  0027F8  2417               	addwf	?___wmul,w,c
 13740  0027FA  6EF6               	movwf	tblptrl,c
 13741  0027FC  0E7F               	movlw	high __powers_
 13742  0027FE  2018               	addwfc	?___wmul+1,w,c
 13743  002800  6EF7               	movwf	tblptrh,c
 13744  002802  0009               	tblrd		*+
 13745  002804  CFF5 F042          	movff	tablat,??_scale
 13746  002808  0009               	tblrd		*+
 13747  00280A  CFF5 F043          	movff	tablat,??_scale+1
 13748  00280E  0009               	tblrd		*+
 13749  002810  CFF5 F044          	movff	tablat,??_scale+2
 13750  002814  C044  F030         	movff	??_scale+2,?___ftmul+2
 13751  002818  C043  F02F         	movff	??_scale+1,?___ftmul+1
 13752  00281C  C042  F02E         	movff	??_scale,?___ftmul
 13753  002820  0E00               	movlw	0
 13754  002822  6E1A               	movwf	?___wmul+3,c
 13755  002824  0E03               	movlw	3
 13756  002826  6E19               	movwf	?___wmul+2,c
 13757  002828  0E00               	movlw	0
 13758  00282A  6E04               	movwf	?___awmod+3,c
 13759  00282C  0E0A               	movlw	10
 13760  00282E  6E03               	movwf	?___awmod+2,c
 13761  002830  503F               	movf	scale@scl,w,c
 13762  002832  6E01               	movwf	?___awmod,c
 13763  002834  6A02               	clrf	?___awmod+1,c
 13764  002836  BE01               	btfsc	?___awmod,7,c
 13765  002838  0602               	decf	?___awmod+1,f,c
 13766  00283A  EC4A  F021         	call	___awmod	;wreg free
 13767  00283E  C001  F017         	movff	?___awmod,?___wmul
 13768  002842  C002  F018         	movff	?___awmod+1,?___wmul+1
 13769  002846  EC75  F024         	call	___wmul	;wreg free
 13770  00284A  0E5A               	movlw	low __powers_
 13771  00284C  2417               	addwf	?___wmul,w,c
 13772  00284E  6EF6               	movwf	tblptrl,c
 13773  002850  0E7F               	movlw	high __powers_
 13774  002852  2018               	addwfc	?___wmul+1,w,c
 13775  002854  6EF7               	movwf	tblptrh,c
 13776  002856  0009               	tblrd		*+
 13777  002858  CFF5 F045          	movff	tablat,??_scale+3
 13778  00285C  0009               	tblrd		*+
 13779  00285E  CFF5 F046          	movff	tablat,??_scale+4
 13780  002862  0009               	tblrd		*+
 13781  002864  CFF5 F047          	movff	tablat,??_scale+5
 13782  002868  C047  F033         	movff	??_scale+5,?___ftmul+5
 13783  00286C  C046  F032         	movff	??_scale+4,?___ftmul+4
 13784  002870  C045  F031         	movff	??_scale+3,?___ftmul+3
 13785  002874  EC38  F01B         	call	___ftmul	;wreg free
 13786  002878                     L23:
 13787  002878  C030  F041         	movff	?___ftmul+2,?_scale+2
 13788  00287C  C02F  F040         	movff	?___ftmul+1,?_scale+1
 13789  002880  C02E  F03F         	movff	?___ftmul,?_scale
 13790  002884  D017               	goto	i2l567
 13791  002886                     i2l6237:
 13792                           
 13793                           ;doprnt.c: 440: return _powers_[scl];
 13794  002886  503F               	movf	scale@scl,w,c
 13795  002888  0D03               	mullw	3
 13796  00288A  0E5A               	movlw	low __powers_
 13797  00288C  24F3               	addwf	prodl,w,c
 13798  00288E  6EF6               	movwf	tblptrl,c
 13799  002890  0E7F               	movlw	high __powers_
 13800  002892                     L22:
 13801  002892  20F4               	addwfc	prodh,w,c
 13802  002894  6EF7               	movwf	tblptrh,c
 13803  002896  0009               	tblrd		*+
 13804  002898  CFF5 F042          	movff	tablat,??_scale
 13805  00289C  0009               	tblrd		*+
 13806  00289E  CFF5 F043          	movff	tablat,??_scale+1
 13807  0028A2  0009               	tblrd		*+
 13808  0028A4  CFF5 F044          	movff	tablat,??_scale+2
 13809  0028A8  C044  F041         	movff	??_scale+2,?_scale+2
 13810  0028AC  C043  F040         	movff	??_scale+1,?_scale+1
 13811  0028B0  C042  F03F         	movff	??_scale,?_scale
 13812  0028B4                     i2l567:
 13813  0028B4  0012               	return	
 13814  0028B6                     __end_of_scale:
 13815                           	opt stack 0
 13816                           tosu	equ	0xFFF
 13817                           tosh	equ	0xFFE
 13818                           tosl	equ	0xFFD
 13819                           pclatu	equ	0xFFB
 13820                           pclath	equ	0xFFA
 13821                           tblptru	equ	0xFF8
 13822                           tblptrh	equ	0xFF7
 13823                           tblptrl	equ	0xFF6
 13824                           tablat	equ	0xFF5
 13825                           prodh	equ	0xFF4
 13826                           prodl	equ	0xFF3
 13827                           intcon	equ	0xFF2
 13828                           intcon2	equ	0xFF1
 13829                           indf0	equ	0xFEF
 13830                           postinc0	equ	0xFEE
 13831                           fsr0h	equ	0xFEA
 13832                           fsr0l	equ	0xFE9
 13833                           wreg	equ	0xFE8
 13834                           postinc1	equ	0xFE6
 13835                           postdec1	equ	0xFE5
 13836                           fsr1h	equ	0xFE2
 13837                           fsr1l	equ	0xFE1
 13838                           indf2	equ	0xFDF
 13839                           postinc2	equ	0xFDE
 13840                           postdec2	equ	0xFDD
 13841                           plusw2	equ	0xFDB
 13842                           fsr2h	equ	0xFDA
 13843                           fsr2l	equ	0xFD9
 13844                           status	equ	0xFD8
 13845                           
 13846 ;; *************** function _fround *****************
 13847 ;; Defined at:
 13848 ;;		line 410 in file "/usr/opt/microchip/xc8/v1.20/sources/common/doprnt.c"
 13849 ;; Parameters:    Size  Location     Type
 13850 ;;  prec            1   62[COMRAM] unsigned char 
 13851 ;; Auto vars:     Size  Location     Type
 13852 ;;		None
 13853 ;; Return value:  Size  Location     Type
 13854 ;;                  3   62[COMRAM] unsigned char 
 13855 ;; Registers used:
 13856 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13857 ;; Tracked objects:
 13858 ;;		On entry : 0/0
 13859 ;;		On exit  : 0/0
 13860 ;;		Unchanged: 0/0
 13861 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13862 ;;      Params:         3       0       0       0       0       0       0       0       0
 13863 ;;      Locals:         6       0       0       0       0       0       0       0       0
 13864 ;;      Temps:          6       0       0       0       0       0       0       0       0
 13865 ;;      Totals:        15       0       0       0       0       0       0       0       0
 13866 ;;Total ram usage:       15 bytes
 13867 ;; Hardware stack levels used:    1
 13868 ;; Hardware stack levels required when called:    2
 13869 ;; This function calls:
 13870 ;;		___ftmul
 13871 ;;		___awdiv
 13872 ;;		___awmod
 13873 ;;		___wmul
 13874 ;; This function is called by:
 13875 ;;		_sprintf
 13876 ;; This function uses a non-reentrant model
 13877 ;;
 13878                           
 13879                           	psect	text46
 13880  0028B6                     __ptext46:
 13881                           	opt stack 0
 13882  0028B6                     _fround:
 13883                           	opt stack 21
 13884                           
 13885                           ;doprnt.c: 413: if(prec>=110)
 13886                           
 13887                           ;incstack = 0
 13888                           ;incstack = 0
 13889  0028B6  0E6D               	movlw	109
 13890  0028B8  643F               	cpfsgt	fround@prec,c
 13891  0028BA  D0AB               	goto	i2l6189
 13892                           
 13893                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
 13894  0028BC  0E00               	movlw	0
 13895  0028BE  6E1A               	movwf	?___wmul+3,c
 13896  0028C0  0E03               	movlw	3
 13897  0028C2  6E19               	movwf	?___wmul+2,c
 13898  0028C4  0E00               	movlw	0
 13899  0028C6  6E0D               	movwf	?___awdiv+3,c
 13900  0028C8  0E0A               	movlw	10
 13901  0028CA  6E0C               	movwf	?___awdiv+2,c
 13902  0028CC  0E00               	movlw	0
 13903  0028CE  6E04               	movwf	?___awmod+3,c
 13904  0028D0  0E64               	movlw	100
 13905  0028D2  6E03               	movwf	?___awmod+2,c
 13906  0028D4  C03F  F001         	movff	fround@prec,?___awmod
 13907  0028D8  6A02               	clrf	?___awmod+1,c
 13908  0028DA  EC4A  F021         	call	___awmod	;wreg free
 13909  0028DE  C001  F00A         	movff	?___awmod,?___awdiv
 13910  0028E2  C002  F00B         	movff	?___awmod+1,?___awdiv+1
 13911  0028E6  EC7C  F020         	call	___awdiv	;wreg free
 13912  0028EA  0E09               	movlw	9
 13913  0028EC  240A               	addwf	?___awdiv,w,c
 13914  0028EE  6E17               	movwf	?___wmul,c
 13915  0028F0  0E00               	movlw	0
 13916  0028F2  200B               	addwfc	?___awdiv+1,w,c
 13917  0028F4  6E18               	movwf	?___wmul+1,c
 13918  0028F6  EC75  F024         	call	___wmul	;wreg free
 13919  0028FA  0E33               	movlw	low __npowers_
 13920  0028FC  2417               	addwf	?___wmul,w,c
 13921  0028FE  6EF6               	movwf	tblptrl,c
 13922  002900  0E7F               	movlw	high __npowers_
 13923  002902  2018               	addwfc	?___wmul+1,w,c
 13924  002904  6EF7               	movwf	tblptrh,c
 13925  002906  0009               	tblrd		*+
 13926  002908  CFF5 F042          	movff	tablat,??_fround
 13927  00290C  0009               	tblrd		*+
 13928  00290E  CFF5 F043          	movff	tablat,??_fround+1
 13929  002912  0009               	tblrd		*+
 13930  002914  CFF5 F044          	movff	tablat,??_fround+2
 13931  002918  C044  F033         	movff	??_fround+2,?___ftmul+5
 13932  00291C  C043  F032         	movff	??_fround+1,?___ftmul+4
 13933  002920  C042  F031         	movff	??_fround,?___ftmul+3
 13934  002924  0E00               	movlw	0
 13935  002926  6E1A               	movwf	?___wmul+3,c
 13936  002928  0E03               	movlw	3
 13937  00292A  6E19               	movwf	?___wmul+2,c
 13938  00292C  0E00               	movlw	0
 13939  00292E  6E0D               	movwf	?___awdiv+3,c
 13940  002930  0E64               	movlw	100
 13941  002932  6E0C               	movwf	?___awdiv+2,c
 13942  002934  C03F  F00A         	movff	fround@prec,?___awdiv
 13943  002938  6A0B               	clrf	?___awdiv+1,c
 13944  00293A  EC7C  F020         	call	___awdiv	;wreg free
 13945  00293E  0E12               	movlw	18
 13946  002940  240A               	addwf	?___awdiv,w,c
 13947  002942  6E17               	movwf	?___wmul,c
 13948  002944  0E00               	movlw	0
 13949  002946  200B               	addwfc	?___awdiv+1,w,c
 13950  002948  6E18               	movwf	?___wmul+1,c
 13951  00294A  EC75  F024         	call	___wmul	;wreg free
 13952  00294E  0E33               	movlw	low __npowers_
 13953  002950  2417               	addwf	?___wmul,w,c
 13954  002952  6EF6               	movwf	tblptrl,c
 13955  002954  0E7F               	movlw	high __npowers_
 13956  002956  2018               	addwfc	?___wmul+1,w,c
 13957  002958  6EF7               	movwf	tblptrh,c
 13958  00295A  0009               	tblrd		*+
 13959  00295C  CFF5 F045          	movff	tablat,??_fround+3
 13960  002960  0009               	tblrd		*+
 13961  002962  CFF5 F046          	movff	tablat,??_fround+4
 13962  002966  0009               	tblrd		*+
 13963  002968  CFF5 F047          	movff	tablat,??_fround+5
 13964  00296C  C047  F030         	movff	??_fround+5,?___ftmul+2
 13965  002970  C046  F02F         	movff	??_fround+4,?___ftmul+1
 13966  002974  C045  F02E         	movff	??_fround+3,?___ftmul
 13967  002978  EC38  F01B         	call	___ftmul	;wreg free
 13968  00297C  C030  F04D         	movff	?___ftmul+2,_fround$1310+2
 13969  002980  C02F  F04C         	movff	?___ftmul+1,_fround$1310+1
 13970  002984  C02E  F04B         	movff	?___ftmul,_fround$1310
 13971                           
 13972                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
 13973  002988  0E00               	movlw	0
 13974  00298A  6E1A               	movwf	?___wmul+3,c
 13975  00298C  0E03               	movlw	3
 13976  00298E  6E19               	movwf	?___wmul+2,c
 13977  002990  0E00               	movlw	0
 13978  002992  6E04               	movwf	?___awmod+3,c
 13979  002994  0E0A               	movlw	10
 13980  002996  6E03               	movwf	?___awmod+2,c
 13981  002998  C03F  F001         	movff	fround@prec,?___awmod
 13982  00299C  6A02               	clrf	?___awmod+1,c
 13983  00299E  EC4A  F021         	call	___awmod	;wreg free
 13984  0029A2  C001  F017         	movff	?___awmod,?___wmul
 13985  0029A6  C002  F018         	movff	?___awmod+1,?___wmul+1
 13986  0029AA  EC75  F024         	call	___wmul	;wreg free
 13987  0029AE  0E33               	movlw	low __npowers_
 13988  0029B0  2417               	addwf	?___wmul,w,c
 13989  0029B2  6EF6               	movwf	tblptrl,c
 13990  0029B4  0E7F               	movlw	high __npowers_
 13991  0029B6  2018               	addwfc	?___wmul+1,w,c
 13992  0029B8  6EF7               	movwf	tblptrh,c
 13993  0029BA  0009               	tblrd		*+
 13994  0029BC  CFF5 F042          	movff	tablat,??_fround
 13995  0029C0  0009               	tblrd		*+
 13996  0029C2  CFF5 F043          	movff	tablat,??_fround+1
 13997  0029C6  0009               	tblrd		*+
 13998  0029C8  CFF5 F044          	movff	tablat,??_fround+2
 13999  0029CC  C044  F033         	movff	??_fround+2,?___ftmul+5
 14000  0029D0  C043  F032         	movff	??_fround+1,?___ftmul+4
 14001  0029D4  C042  F031         	movff	??_fround,?___ftmul+3
 14002  0029D8  C04B  F02E         	movff	_fround$1310,?___ftmul
 14003  0029DC  C04C  F02F         	movff	_fround$1310+1,?___ftmul+1
 14004  0029E0  C04D  F030         	movff	_fround$1310+2,?___ftmul+2
 14005  0029E4  EC38  F01B         	call	___ftmul	;wreg free
 14006  0029E8  C030  F04A         	movff	?___ftmul+2,_fround$1311+2
 14007  0029EC  C02F  F049         	movff	?___ftmul+1,_fround$1311+1
 14008  0029F0  C02E  F048         	movff	?___ftmul,_fround$1311
 14009                           
 14010                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
 14011  0029F4  C048  F02E         	movff	_fround$1311,?___ftmul
 14012  0029F8  C049  F02F         	movff	_fround$1311+1,?___ftmul+1
 14013  0029FC  C04A  F030         	movff	_fround$1311+2,?___ftmul+2
 14014  002A00  0E00               	movlw	0
 14015  002A02  6E31               	movwf	?___ftmul+3,c
 14016  002A04  0E00               	movlw	0
 14017  002A06  6E32               	movwf	?___ftmul+4,c
 14018  002A08  0E3F               	movlw	63
 14019  002A0A  6E33               	movwf	?___ftmul+5,c
 14020  002A0C  EC38  F01B         	call	___ftmul	;wreg free
 14021  002A10  D08B               	goto	L25
 14022  002A12                     i2l6189:
 14023                           
 14024                           ;doprnt.c: 415: else if(prec > 10)
 14025  002A12  0E0A               	movlw	10
 14026  002A14  643F               	cpfsgt	fround@prec,c
 14027  002A16  D069               	goto	i2l6197
 14028                           
 14029                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
 14030  002A18  0E00               	movlw	0
 14031  002A1A  6E1A               	movwf	?___wmul+3,c
 14032  002A1C  0E03               	movlw	3
 14033  002A1E  6E19               	movwf	?___wmul+2,c
 14034  002A20  0E00               	movlw	0
 14035  002A22  6E04               	movwf	?___awmod+3,c
 14036  002A24  0E0A               	movlw	10
 14037  002A26  6E03               	movwf	?___awmod+2,c
 14038  002A28  C03F  F001         	movff	fround@prec,?___awmod
 14039  002A2C  6A02               	clrf	?___awmod+1,c
 14040  002A2E  EC4A  F021         	call	___awmod	;wreg free
 14041  002A32  C001  F017         	movff	?___awmod,?___wmul
 14042  002A36  C002  F018         	movff	?___awmod+1,?___wmul+1
 14043  002A3A  EC75  F024         	call	___wmul	;wreg free
 14044  002A3E  0E33               	movlw	low __npowers_
 14045  002A40  2417               	addwf	?___wmul,w,c
 14046  002A42  6EF6               	movwf	tblptrl,c
 14047  002A44  0E7F               	movlw	high __npowers_
 14048  002A46  2018               	addwfc	?___wmul+1,w,c
 14049  002A48  6EF7               	movwf	tblptrh,c
 14050  002A4A  0009               	tblrd		*+
 14051  002A4C  CFF5 F042          	movff	tablat,??_fround
 14052  002A50  0009               	tblrd		*+
 14053  002A52  CFF5 F043          	movff	tablat,??_fround+1
 14054  002A56  0009               	tblrd		*+
 14055  002A58  CFF5 F044          	movff	tablat,??_fround+2
 14056  002A5C  C044  F033         	movff	??_fround+2,?___ftmul+5
 14057  002A60  C043  F032         	movff	??_fround+1,?___ftmul+4
 14058  002A64  C042  F031         	movff	??_fround,?___ftmul+3
 14059  002A68  0E00               	movlw	0
 14060  002A6A  6E1A               	movwf	?___wmul+3,c
 14061  002A6C  0E03               	movlw	3
 14062  002A6E  6E19               	movwf	?___wmul+2,c
 14063  002A70  0E00               	movlw	0
 14064  002A72  6E0D               	movwf	?___awdiv+3,c
 14065  002A74  0E0A               	movlw	10
 14066  002A76  6E0C               	movwf	?___awdiv+2,c
 14067  002A78  C03F  F00A         	movff	fround@prec,?___awdiv
 14068  002A7C  6A0B               	clrf	?___awdiv+1,c
 14069  002A7E  EC7C  F020         	call	___awdiv	;wreg free
 14070  002A82  0E09               	movlw	9
 14071  002A84  240A               	addwf	?___awdiv,w,c
 14072  002A86  6E17               	movwf	?___wmul,c
 14073  002A88  0E00               	movlw	0
 14074  002A8A  200B               	addwfc	?___awdiv+1,w,c
 14075  002A8C  6E18               	movwf	?___wmul+1,c
 14076  002A8E  EC75  F024         	call	___wmul	;wreg free
 14077  002A92  0E33               	movlw	low __npowers_
 14078  002A94  2417               	addwf	?___wmul,w,c
 14079  002A96  6EF6               	movwf	tblptrl,c
 14080  002A98  0E7F               	movlw	high __npowers_
 14081  002A9A  2018               	addwfc	?___wmul+1,w,c
 14082  002A9C  6EF7               	movwf	tblptrh,c
 14083  002A9E  0009               	tblrd		*+
 14084  002AA0  CFF5 F045          	movff	tablat,??_fround+3
 14085  002AA4  0009               	tblrd		*+
 14086  002AA6  CFF5 F046          	movff	tablat,??_fround+4
 14087  002AAA  0009               	tblrd		*+
 14088  002AAC  CFF5 F047          	movff	tablat,??_fround+5
 14089  002AB0  C047  F030         	movff	??_fround+5,?___ftmul+2
 14090  002AB4  C046  F02F         	movff	??_fround+4,?___ftmul+1
 14091  002AB8  C045  F02E         	movff	??_fround+3,?___ftmul
 14092  002ABC  EC38  F01B         	call	___ftmul	;wreg free
 14093  002AC0  C030  F04D         	movff	?___ftmul+2,_fround$1310+2
 14094  002AC4  C02F  F04C         	movff	?___ftmul+1,_fround$1310+1
 14095  002AC8  C02E  F04B         	movff	?___ftmul,_fround$1310
 14096                           
 14097                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
 14098  002ACC  C04B  F02E         	movff	_fround$1310,?___ftmul
 14099  002AD0  C04C  F02F         	movff	_fround$1310+1,?___ftmul+1
 14100  002AD4  C04D  F030         	movff	_fround$1310+2,?___ftmul+2
 14101  002AD8  0E00               	movlw	0
 14102  002ADA  6E31               	movwf	?___ftmul+3,c
 14103  002ADC  0E00               	movlw	0
 14104  002ADE  6E32               	movwf	?___ftmul+4,c
 14105  002AE0  0E3F               	movlw	63
 14106  002AE2  6E33               	movwf	?___ftmul+5,c
 14107  002AE4  EC38  F01B         	call	___ftmul	;wreg free
 14108  002AE8  D01F               	goto	L25
 14109  002AEA                     i2l6197:
 14110                           
 14111                           ;doprnt.c: 417: return 0.5 * _npowers_[prec];
 14112  002AEA  503F               	movf	fround@prec,w,c
 14113  002AEC  0D03               	mullw	3
 14114  002AEE  0E33               	movlw	low __npowers_
 14115  002AF0  24F3               	addwf	prodl,w,c
 14116  002AF2  6EF6               	movwf	tblptrl,c
 14117  002AF4  0E7F               	movlw	high __npowers_
 14118  002AF6  20F4               	addwfc	prodh,w,c
 14119  002AF8  6EF7               	movwf	tblptrh,c
 14120  002AFA  0009               	tblrd		*+
 14121  002AFC  CFF5 F042          	movff	tablat,??_fround
 14122  002B00  0009               	tblrd		*+
 14123  002B02  CFF5 F043          	movff	tablat,??_fround+1
 14124  002B06  0009               	tblrd		*+
 14125  002B08  CFF5 F044          	movff	tablat,??_fround+2
 14126  002B0C  C044  F030         	movff	??_fround+2,?___ftmul+2
 14127  002B10  C043  F02F         	movff	??_fround+1,?___ftmul+1
 14128  002B14  C042  F02E         	movff	??_fround,?___ftmul
 14129  002B18  0E00               	movlw	0
 14130  002B1A  6E31               	movwf	?___ftmul+3,c
 14131  002B1C  0E00               	movlw	0
 14132  002B1E  6E32               	movwf	?___ftmul+4,c
 14133  002B20  0E3F               	movlw	63
 14134  002B22  6E33               	movwf	?___ftmul+5,c
 14135  002B24  EC38  F01B         	call	___ftmul	;wreg free
 14136  002B28                     L25:
 14137  002B28  C030  F041         	movff	?___ftmul+2,?_fround+2
 14138  002B2C  C02F  F040         	movff	?___ftmul+1,?_fround+1
 14139  002B30  C02E  F03F         	movff	?___ftmul,?_fround
 14140  002B34  0012               	return	
 14141  002B36                     __end_of_fround:
 14142                           	opt stack 0
 14143                           tosu	equ	0xFFF
 14144                           tosh	equ	0xFFE
 14145                           tosl	equ	0xFFD
 14146                           pclatu	equ	0xFFB
 14147                           pclath	equ	0xFFA
 14148                           tblptru	equ	0xFF8
 14149                           tblptrh	equ	0xFF7
 14150                           tblptrl	equ	0xFF6
 14151                           tablat	equ	0xFF5
 14152                           prodh	equ	0xFF4
 14153                           prodl	equ	0xFF3
 14154                           intcon	equ	0xFF2
 14155                           intcon2	equ	0xFF1
 14156                           indf0	equ	0xFEF
 14157                           postinc0	equ	0xFEE
 14158                           fsr0h	equ	0xFEA
 14159                           fsr0l	equ	0xFE9
 14160                           wreg	equ	0xFE8
 14161                           postinc1	equ	0xFE6
 14162                           postdec1	equ	0xFE5
 14163                           fsr1h	equ	0xFE2
 14164                           fsr1l	equ	0xFE1
 14165                           indf2	equ	0xFDF
 14166                           postinc2	equ	0xFDE
 14167                           postdec2	equ	0xFDD
 14168                           plusw2	equ	0xFDB
 14169                           fsr2h	equ	0xFDA
 14170                           fsr2l	equ	0xFD9
 14171                           status	equ	0xFD8
 14172                           
 14173 ;; *************** function ___awmod *****************
 14174 ;; Defined at:
 14175 ;;		line 10 in file "/usr/opt/microchip/xc8/v1.20/sources/common/awmod.c"
 14176 ;; Parameters:    Size  Location     Type
 14177 ;;  dividend        2    0[COMRAM] int 
 14178 ;;  divisor         2    2[COMRAM] int 
 14179 ;; Auto vars:     Size  Location     Type
 14180 ;;  sign            1    8[COMRAM] unsigned char 
 14181 ;;  counter         1    7[COMRAM] unsigned char 
 14182 ;; Return value:  Size  Location     Type
 14183 ;;                  2    0[COMRAM] int 
 14184 ;; Registers used:
 14185 ;;		wreg, status,2, status,0
 14186 ;; Tracked objects:
 14187 ;;		On entry : 0/0
 14188 ;;		On exit  : 0/0
 14189 ;;		Unchanged: 0/0
 14190 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 14191 ;;      Params:         4       0       0       0       0       0       0       0       0
 14192 ;;      Locals:         4       0       0       0       0       0       0       0       0
 14193 ;;      Temps:          1       0       0       0       0       0       0       0       0
 14194 ;;      Totals:         9       0       0       0       0       0       0       0       0
 14195 ;;Total ram usage:        9 bytes
 14196 ;; Hardware stack levels used:    1
 14197 ;; This function calls:
 14198 ;;		Nothing
 14199 ;; This function is called by:
 14200 ;;		_dayOfWeek
 14201 ;;		_advState
 14202 ;;		_fround
 14203 ;;		_scale
 14204 ;; This function uses a non-reentrant model
 14205 ;;
 14206                           
 14207                           	psect	text47
 14208  004294                     __ptext47:
 14209                           	opt stack 0
 14210  004294                     ___awmod:
 14211                           	opt stack 23
 14212                           
 14213                           ;incstack = 0
 14214                           ;incstack = 0
 14215  004294  6E05               	movwf	??___awmod& (0+255),c
 14216  004296  0E00               	movlw	0
 14217  004298  6E09               	movwf	___awmod@sign,c
 14218  00429A  5005               	movf	??___awmod& (0+255),w,c
 14219  00429C  AE02               	btfss	___awmod@dividend+1,7,c
 14220  00429E  D008               	goto	i2l5635
 14221  0042A0  6C01               	negf	___awmod@dividend,c
 14222  0042A2  1E02               	comf	___awmod@dividend+1,f,c
 14223  0042A4  B0D8               	btfsc	status,0,c
 14224  0042A6  2A02               	incf	___awmod@dividend+1,f,c
 14225  0042A8  6E05               	movwf	??___awmod& (0+255),c
 14226  0042AA  0E01               	movlw	1
 14227  0042AC  6E09               	movwf	___awmod@sign,c
 14228  0042AE  5005               	movf	??___awmod& (0+255),w,c
 14229  0042B0                     i2l5635:
 14230  0042B0  AE04               	btfss	___awmod@divisor+1,7,c
 14231  0042B2  D004               	goto	i2l5639
 14232  0042B4  6C03               	negf	___awmod@divisor,c
 14233  0042B6  1E04               	comf	___awmod@divisor+1,f,c
 14234  0042B8  B0D8               	btfsc	status,0,c
 14235  0042BA  2A04               	incf	___awmod@divisor+1,f,c
 14236  0042BC                     i2l5639:
 14237  0042BC  5004               	movf	___awmod@divisor+1,w,c
 14238  0042BE  1003               	iorwf	___awmod@divisor,w,c
 14239  0042C0  B4D8               	btfsc	status,2,c
 14240  0042C2  D01A               	goto	i2l5655
 14241  0042C4  6E05               	movwf	??___awmod& (0+255),c
 14242  0042C6  0E01               	movlw	1
 14243  0042C8  6E08               	movwf	___awmod@counter,c
 14244  0042CA  5005               	movf	??___awmod& (0+255),w,c
 14245  0042CC  D004               	goto	i2l5645
 14246  0042CE                     i2l5643:
 14247  0042CE  90D8               	bcf	status,0,c
 14248  0042D0  3603               	rlcf	___awmod@divisor,f,c
 14249  0042D2  3604               	rlcf	___awmod@divisor+1,f,c
 14250  0042D4  2A08               	incf	___awmod@counter,f,c
 14251  0042D6                     i2l5645:
 14252  0042D6  AE04               	btfss	___awmod@divisor+1,7,c
 14253  0042D8  D7FA               	goto	i2l5643
 14254  0042DA                     i2l5647:
 14255  0042DA  5003               	movf	___awmod@divisor,w,c
 14256  0042DC  5C01               	subwf	___awmod@dividend,w,c
 14257  0042DE  5004               	movf	___awmod@divisor+1,w,c
 14258  0042E0  5802               	subwfb	___awmod@dividend+1,w,c
 14259  0042E2  A0D8               	btfss	status,0,c
 14260  0042E4  D004               	goto	i2l5651
 14261  0042E6  5003               	movf	___awmod@divisor,w,c
 14262  0042E8  5E01               	subwf	___awmod@dividend,f,c
 14263  0042EA  5004               	movf	___awmod@divisor+1,w,c
 14264  0042EC  5A02               	subwfb	___awmod@dividend+1,f,c
 14265  0042EE                     i2l5651:
 14266  0042EE  90D8               	bcf	status,0,c
 14267  0042F0  3204               	rrcf	___awmod@divisor+1,f,c
 14268  0042F2  3203               	rrcf	___awmod@divisor,f,c
 14269  0042F4  2E08               	decfsz	___awmod@counter,f,c
 14270  0042F6  D7F1               	goto	i2l5647
 14271  0042F8                     i2l5655:
 14272  0042F8  5009               	movf	___awmod@sign,w,c
 14273  0042FA  B4D8               	btfsc	status,2,c
 14274  0042FC  D004               	goto	i2l5659
 14275  0042FE  6C01               	negf	___awmod@dividend,c
 14276  004300  1E02               	comf	___awmod@dividend+1,f,c
 14277  004302  B0D8               	btfsc	status,0,c
 14278  004304  2A02               	incf	___awmod@dividend+1,f,c
 14279  004306                     i2l5659:
 14280  004306  C001  F001         	movff	___awmod@dividend,?___awmod
 14281  00430A  C002  F002         	movff	___awmod@dividend+1,?___awmod+1
 14282  00430E  0012               	return	
 14283  004310                     __end_of___awmod:
 14284                           	opt stack 0
 14285                           tosu	equ	0xFFF
 14286                           tosh	equ	0xFFE
 14287                           tosl	equ	0xFFD
 14288                           pclatu	equ	0xFFB
 14289                           pclath	equ	0xFFA
 14290                           tblptru	equ	0xFF8
 14291                           tblptrh	equ	0xFF7
 14292                           tblptrl	equ	0xFF6
 14293                           tablat	equ	0xFF5
 14294                           prodh	equ	0xFF4
 14295                           prodl	equ	0xFF3
 14296                           intcon	equ	0xFF2
 14297                           intcon2	equ	0xFF1
 14298                           indf0	equ	0xFEF
 14299                           postinc0	equ	0xFEE
 14300                           fsr0h	equ	0xFEA
 14301                           fsr0l	equ	0xFE9
 14302                           wreg	equ	0xFE8
 14303                           postinc1	equ	0xFE6
 14304                           postdec1	equ	0xFE5
 14305                           fsr1h	equ	0xFE2
 14306                           fsr1l	equ	0xFE1
 14307                           indf2	equ	0xFDF
 14308                           postinc2	equ	0xFDE
 14309                           postdec2	equ	0xFDD
 14310                           plusw2	equ	0xFDB
 14311                           fsr2h	equ	0xFDA
 14312                           fsr2l	equ	0xFD9
 14313                           status	equ	0xFD8
 14314                           
 14315 ;; *************** function ___awdiv *****************
 14316 ;; Defined at:
 14317 ;;		line 10 in file "/usr/opt/microchip/xc8/v1.20/sources/common/awdiv.c"
 14318 ;; Parameters:    Size  Location     Type
 14319 ;;  dividend        2    9[COMRAM] int 
 14320 ;;  divisor         2   11[COMRAM] int 
 14321 ;; Auto vars:     Size  Location     Type
 14322 ;;  quotient        2   20[COMRAM] int 
 14323 ;;  sign            1   19[COMRAM] unsigned char 
 14324 ;;  counter         1   18[COMRAM] unsigned char 
 14325 ;; Return value:  Size  Location     Type
 14326 ;;                  2    9[COMRAM] int 
 14327 ;; Registers used:
 14328 ;;		wreg, status,2, status,0
 14329 ;; Tracked objects:
 14330 ;;		On entry : 0/0
 14331 ;;		On exit  : 0/0
 14332 ;;		Unchanged: 0/0
 14333 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 14334 ;;      Params:         4       0       0       0       0       0       0       0       0
 14335 ;;      Locals:         8       0       0       0       0       0       0       0       0
 14336 ;;      Temps:          1       0       0       0       0       0       0       0       0
 14337 ;;      Totals:        13       0       0       0       0       0       0       0       0
 14338 ;;Total ram usage:       13 bytes
 14339 ;; Hardware stack levels used:    1
 14340 ;; This function calls:
 14341 ;;		Nothing
 14342 ;; This function is called by:
 14343 ;;		_dayOfWeek
 14344 ;;		_fround
 14345 ;;		_scale
 14346 ;;		_sprintf
 14347 ;; This function uses a non-reentrant model
 14348 ;;
 14349                           
 14350                           	psect	text48
 14351  0040F8                     __ptext48:
 14352                           	opt stack 0
 14353  0040F8                     ___awdiv:
 14354                           	opt stack 23
 14355                           
 14356                           ;incstack = 0
 14357                           ;incstack = 0
 14358  0040F8  6E0E               	movwf	??___awdiv& (0+255),c
 14359  0040FA  0E00               	movlw	0
 14360  0040FC  6E14               	movwf	___awdiv@sign,c
 14361  0040FE  500E               	movf	??___awdiv& (0+255),w,c
 14362  004100  AE0D               	btfss	___awdiv@divisor+1,7,c
 14363  004102  D008               	goto	i2l5861
 14364  004104  6C0C               	negf	___awdiv@divisor,c
 14365  004106  1E0D               	comf	___awdiv@divisor+1,f,c
 14366  004108  B0D8               	btfsc	status,0,c
 14367  00410A  2A0D               	incf	___awdiv@divisor+1,f,c
 14368  00410C  6E0E               	movwf	??___awdiv& (0+255),c
 14369  00410E  0E01               	movlw	1
 14370  004110  6E14               	movwf	___awdiv@sign,c
 14371  004112  500E               	movf	??___awdiv& (0+255),w,c
 14372  004114                     i2l5861:
 14373  004114  AE0B               	btfss	___awdiv@dividend+1,7,c
 14374  004116  D006               	goto	i2l5867
 14375  004118  6C0A               	negf	___awdiv@dividend,c
 14376  00411A  1E0B               	comf	___awdiv@dividend+1,f,c
 14377  00411C  B0D8               	btfsc	status,0,c
 14378  00411E  2A0B               	incf	___awdiv@dividend+1,f,c
 14379  004120  0E01               	movlw	1
 14380  004122  1A14               	xorwf	___awdiv@sign,f,c
 14381  004124                     i2l5867:
 14382  004124  0E00               	movlw	0
 14383  004126  6E16               	movwf	___awdiv@quotient+1,c
 14384  004128  0E00               	movlw	0
 14385  00412A  6E15               	movwf	___awdiv@quotient,c
 14386  00412C  500D               	movf	___awdiv@divisor+1,w,c
 14387  00412E  100C               	iorwf	___awdiv@divisor,w,c
 14388  004130  B4D8               	btfsc	status,2,c
 14389  004132  D01E               	goto	i2l5889
 14390  004134  6E0E               	movwf	??___awdiv& (0+255),c
 14391  004136  0E01               	movlw	1
 14392  004138  6E13               	movwf	___awdiv@counter,c
 14393  00413A  500E               	movf	??___awdiv& (0+255),w,c
 14394  00413C  D004               	goto	i2l5875
 14395  00413E                     i2l5873:
 14396  00413E  90D8               	bcf	status,0,c
 14397  004140  360C               	rlcf	___awdiv@divisor,f,c
 14398  004142  360D               	rlcf	___awdiv@divisor+1,f,c
 14399  004144  2A13               	incf	___awdiv@counter,f,c
 14400  004146                     i2l5875:
 14401  004146  AE0D               	btfss	___awdiv@divisor+1,7,c
 14402  004148  D7FA               	goto	i2l5873
 14403  00414A                     i2l5877:
 14404  00414A  90D8               	bcf	status,0,c
 14405  00414C  3615               	rlcf	___awdiv@quotient,f,c
 14406  00414E  3616               	rlcf	___awdiv@quotient+1,f,c
 14407  004150  500C               	movf	___awdiv@divisor,w,c
 14408  004152  5C0A               	subwf	___awdiv@dividend,w,c
 14409  004154  500D               	movf	___awdiv@divisor+1,w,c
 14410  004156  580B               	subwfb	___awdiv@dividend+1,w,c
 14411  004158  A0D8               	btfss	status,0,c
 14412  00415A  D005               	goto	i2l5885
 14413  00415C  500C               	movf	___awdiv@divisor,w,c
 14414  00415E  5E0A               	subwf	___awdiv@dividend,f,c
 14415  004160  500D               	movf	___awdiv@divisor+1,w,c
 14416  004162  5A0B               	subwfb	___awdiv@dividend+1,f,c
 14417  004164  8015               	bsf	___awdiv@quotient,0,c
 14418  004166                     i2l5885:
 14419  004166  90D8               	bcf	status,0,c
 14420  004168  320D               	rrcf	___awdiv@divisor+1,f,c
 14421  00416A  320C               	rrcf	___awdiv@divisor,f,c
 14422  00416C  2E13               	decfsz	___awdiv@counter,f,c
 14423  00416E  D7ED               	goto	i2l5877
 14424  004170                     i2l5889:
 14425  004170  5014               	movf	___awdiv@sign,w,c
 14426  004172  B4D8               	btfsc	status,2,c
 14427  004174  D004               	goto	i2l5893
 14428  004176  6C15               	negf	___awdiv@quotient,c
 14429  004178  1E16               	comf	___awdiv@quotient+1,f,c
 14430  00417A  B0D8               	btfsc	status,0,c
 14431  00417C  2A16               	incf	___awdiv@quotient+1,f,c
 14432  00417E                     i2l5893:
 14433  00417E  C015  F00A         	movff	___awdiv@quotient,?___awdiv
 14434  004182  C016  F00B         	movff	___awdiv@quotient+1,?___awdiv+1
 14435  004186  0012               	return	
 14436  004188                     __end_of___awdiv:
 14437                           	opt stack 0
 14438                           tosu	equ	0xFFF
 14439                           tosh	equ	0xFFE
 14440                           tosl	equ	0xFFD
 14441                           pclatu	equ	0xFFB
 14442                           pclath	equ	0xFFA
 14443                           tblptru	equ	0xFF8
 14444                           tblptrh	equ	0xFF7
 14445                           tblptrl	equ	0xFF6
 14446                           tablat	equ	0xFF5
 14447                           prodh	equ	0xFF4
 14448                           prodl	equ	0xFF3
 14449                           intcon	equ	0xFF2
 14450                           intcon2	equ	0xFF1
 14451                           indf0	equ	0xFEF
 14452                           postinc0	equ	0xFEE
 14453                           fsr0h	equ	0xFEA
 14454                           fsr0l	equ	0xFE9
 14455                           wreg	equ	0xFE8
 14456                           postinc1	equ	0xFE6
 14457                           postdec1	equ	0xFE5
 14458                           fsr1h	equ	0xFE2
 14459                           fsr1l	equ	0xFE1
 14460                           indf2	equ	0xFDF
 14461                           postinc2	equ	0xFDE
 14462                           postdec2	equ	0xFDD
 14463                           plusw2	equ	0xFDB
 14464                           fsr2h	equ	0xFDA
 14465                           fsr2l	equ	0xFD9
 14466                           status	equ	0xFD8
 14467                           
 14468 ;; *************** function ___ftmul *****************
 14469 ;; Defined at:
 14470 ;;		line 52 in file "/usr/opt/microchip/xc8/v1.20/sources/common/ftmul.c"
 14471 ;; Parameters:    Size  Location     Type
 14472 ;;  f1              3   45[COMRAM] float 
 14473 ;;  f2              3   48[COMRAM] float 
 14474 ;; Auto vars:     Size  Location     Type
 14475 ;;  f3_as_produc    3   57[COMRAM] unsigned um
 14476 ;;  sign            1   61[COMRAM] unsigned char 
 14477 ;;  cntr            1   60[COMRAM] unsigned char 
 14478 ;;  exp             1   56[COMRAM] unsigned char 
 14479 ;; Return value:  Size  Location     Type
 14480 ;;                  3   45[COMRAM] float 
 14481 ;; Registers used:
 14482 ;;		wreg, status,2, status,0, cstack
 14483 ;; Tracked objects:
 14484 ;;		On entry : 0/0
 14485 ;;		On exit  : 0/0
 14486 ;;		Unchanged: 0/0
 14487 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 14488 ;;      Params:         6       0       0       0       0       0       0       0       0
 14489 ;;      Locals:         6       0       0       0       0       0       0       0       0
 14490 ;;      Temps:          5       0       0       0       0       0       0       0       0
 14491 ;;      Totals:        17       0       0       0       0       0       0       0       0
 14492 ;;Total ram usage:       17 bytes
 14493 ;; Hardware stack levels used:    1
 14494 ;; Hardware stack levels required when called:    1
 14495 ;; This function calls:
 14496 ;;		___ftpack
 14497 ;; This function is called by:
 14498 ;;		_fround
 14499 ;;		_scale
 14500 ;;		_sprintf
 14501 ;;		___asftmul
 14502 ;; This function uses a non-reentrant model
 14503 ;;
 14504                           
 14505                           	psect	text49
 14506  003670                     __ptext49:
 14507                           	opt stack 0
 14508  003670                     ___ftmul:
 14509                           	opt stack 22
 14510                           
 14511                           ;incstack = 0
 14512                           ;incstack = 0
 14513  003670  0E0F               	movlw	15
 14514  003672  6E34               	movwf	??___ftmul& (0+255),c
 14515  003674  C02E  F035         	movff	___ftmul@f1,??___ftmul+1
 14516  003678  C02F  F036         	movff	___ftmul@f1+1,??___ftmul+2
 14517  00367C  C030  F037         	movff	___ftmul@f1+2,??___ftmul+3
 14518  003680  2834               	incf	??___ftmul,w,c
 14519  003682  6E38               	movwf	(??___ftmul+4)& (0+255),c
 14520  003684  D004               	goto	i2u415_40
 14521  003686                     i2u415_45:
 14522  003686  90D8               	bcf	status,0,c
 14523  003688  3237               	rrcf	??___ftmul+3,f,c
 14524  00368A  3236               	rrcf	??___ftmul+2,f,c
 14525  00368C  3235               	rrcf	??___ftmul+1,f,c
 14526  00368E                     i2u415_40:
 14527  00368E  2E38               	decfsz	(??___ftmul+4)& (0+255),f,c
 14528  003690  D7FA               	goto	i2u415_45
 14529  003692  5035               	movf	??___ftmul+1,w,c
 14530  003694  6E39               	movwf	___ftmul@exp,c
 14531  003696  6639               	tstfsz	___ftmul@exp& (0+255),c
 14532  003698  D001               	goto	i2l6035
 14533  00369A  D015               	goto	i2u418_40
 14534  00369C                     i2l6035:
 14535  00369C  0E0F               	movlw	15
 14536  00369E  6E34               	movwf	??___ftmul& (0+255),c
 14537  0036A0  C031  F035         	movff	___ftmul@f2,??___ftmul+1
 14538  0036A4  C032  F036         	movff	___ftmul@f2+1,??___ftmul+2
 14539  0036A8  C033  F037         	movff	___ftmul@f2+2,??___ftmul+3
 14540  0036AC  2834               	incf	??___ftmul,w,c
 14541  0036AE  6E38               	movwf	(??___ftmul+4)& (0+255),c
 14542  0036B0  D004               	goto	i2u417_40
 14543  0036B2                     i2u417_45:
 14544  0036B2  90D8               	bcf	status,0,c
 14545  0036B4  3237               	rrcf	??___ftmul+3,f,c
 14546  0036B6  3236               	rrcf	??___ftmul+2,f,c
 14547  0036B8  3235               	rrcf	??___ftmul+1,f,c
 14548  0036BA                     i2u417_40:
 14549  0036BA  2E38               	decfsz	(??___ftmul+4)& (0+255),f,c
 14550  0036BC  D7FA               	goto	i2u417_45
 14551  0036BE  5035               	movf	??___ftmul+1,w,c
 14552  0036C0  6E3E               	movwf	___ftmul@sign,c
 14553  0036C2  663E               	tstfsz	___ftmul@sign& (0+255),c
 14554  0036C4  D007               	goto	i2l6041
 14555  0036C6                     i2u418_40:
 14556  0036C6  0E00               	movlw	0
 14557  0036C8  6E2E               	movwf	?___ftmul,c
 14558  0036CA  0E00               	movlw	0
 14559  0036CC  6E2F               	movwf	?___ftmul+1,c
 14560  0036CE  0E00               	movlw	0
 14561  0036D0  6E30               	movwf	?___ftmul+2,c
 14562  0036D2  D055               	goto	i2l1112
 14563  0036D4                     i2l6041:
 14564  0036D4  503E               	movf	___ftmul@sign,w,c
 14565  0036D6  0F7B               	addlw	123
 14566  0036D8  2639               	addwf	___ftmul@exp,f,c
 14567  0036DA  C030  F03E         	movff	___ftmul@f1+2,___ftmul@sign
 14568  0036DE  5033               	movf	(___ftmul@f2+2)& (0+255),w,c
 14569  0036E0  1A3E               	xorwf	___ftmul@sign,f,c
 14570  0036E2  0E80               	movlw	128
 14571  0036E4  163E               	andwf	___ftmul@sign,f,c
 14572  0036E6  8E2F               	bsf	___ftmul@f1+1,7,c
 14573  0036E8  8E32               	bsf	___ftmul@f2+1,7,c
 14574  0036EA  0EFF               	movlw	255
 14575  0036EC  1631               	andwf	___ftmul@f2,f,c
 14576  0036EE  0EFF               	movlw	255
 14577  0036F0  1632               	andwf	___ftmul@f2+1,f,c
 14578  0036F2  0E00               	movlw	0
 14579  0036F4  1633               	andwf	___ftmul@f2+2,f,c
 14580  0036F6  0E00               	movlw	0
 14581  0036F8  6E3A               	movwf	___ftmul@f3_as_product,c
 14582  0036FA  0E00               	movlw	0
 14583  0036FC  6E3B               	movwf	___ftmul@f3_as_product+1,c
 14584  0036FE  0E00               	movlw	0
 14585  003700  6E3C               	movwf	___ftmul@f3_as_product+2,c
 14586  003702  6E34               	movwf	??___ftmul& (0+255),c
 14587  003704  0E07               	movlw	7
 14588  003706  6E3D               	movwf	___ftmul@cntr,c
 14589  003708  5034               	movf	??___ftmul& (0+255),w,c
 14590  00370A                     i2l6055:
 14591  00370A  A02E               	btfss	___ftmul@f1,0,c
 14592  00370C  D006               	goto	i2l6059
 14593  00370E  5031               	movf	___ftmul@f2,w,c
 14594  003710  263A               	addwf	___ftmul@f3_as_product,f,c
 14595  003712  5032               	movf	___ftmul@f2+1,w,c
 14596  003714  223B               	addwfc	___ftmul@f3_as_product+1,f,c
 14597  003716  5033               	movf	___ftmul@f2+2,w,c
 14598  003718  223C               	addwfc	___ftmul@f3_as_product+2,f,c
 14599  00371A                     i2l6059:
 14600  00371A  90D8               	bcf	status,0,c
 14601  00371C  3230               	rrcf	___ftmul@f1+2,f,c
 14602  00371E  322F               	rrcf	___ftmul@f1+1,f,c
 14603  003720  322E               	rrcf	___ftmul@f1,f,c
 14604  003722  90D8               	bcf	status,0,c
 14605  003724  3631               	rlcf	___ftmul@f2,f,c
 14606  003726  3632               	rlcf	___ftmul@f2+1,f,c
 14607  003728  3633               	rlcf	___ftmul@f2+2,f,c
 14608  00372A  2E3D               	decfsz	___ftmul@cntr,f,c
 14609  00372C  D7EE               	goto	i2l6055
 14610  00372E  6E34               	movwf	??___ftmul& (0+255),c
 14611  003730  0E09               	movlw	9
 14612  003732  6E3D               	movwf	___ftmul@cntr,c
 14613  003734  5034               	movf	??___ftmul& (0+255),w,c
 14614  003736                     i2l6065:
 14615  003736  A02E               	btfss	___ftmul@f1,0,c
 14616  003738  D006               	goto	i2l6069
 14617  00373A  5031               	movf	___ftmul@f2,w,c
 14618  00373C  263A               	addwf	___ftmul@f3_as_product,f,c
 14619  00373E  5032               	movf	___ftmul@f2+1,w,c
 14620  003740  223B               	addwfc	___ftmul@f3_as_product+1,f,c
 14621  003742  5033               	movf	___ftmul@f2+2,w,c
 14622  003744  223C               	addwfc	___ftmul@f3_as_product+2,f,c
 14623  003746                     i2l6069:
 14624  003746  90D8               	bcf	status,0,c
 14625  003748  3230               	rrcf	___ftmul@f1+2,f,c
 14626  00374A  322F               	rrcf	___ftmul@f1+1,f,c
 14627  00374C  322E               	rrcf	___ftmul@f1,f,c
 14628  00374E  90D8               	bcf	status,0,c
 14629  003750  323C               	rrcf	___ftmul@f3_as_product+2,f,c
 14630  003752  323B               	rrcf	___ftmul@f3_as_product+1,f,c
 14631  003754  323A               	rrcf	___ftmul@f3_as_product,f,c
 14632  003756  2E3D               	decfsz	___ftmul@cntr,f,c
 14633  003758  D7EE               	goto	i2l6065
 14634  00375A  C03A  F001         	movff	___ftmul@f3_as_product,?___ftpack
 14635  00375E  C03B  F002         	movff	___ftmul@f3_as_product+1,?___ftpack+1
 14636  003762  C03C  F003         	movff	___ftmul@f3_as_product+2,?___ftpack+2
 14637  003766  C039  F004         	movff	___ftmul@exp,?___ftpack+3
 14638  00376A  C03E  F005         	movff	___ftmul@sign,?___ftpack+4
 14639  00376E  ECFF  F01D         	call	___ftpack	;wreg free
 14640  003772  C003  F030         	movff	?___ftpack+2,?___ftmul+2
 14641  003776  C002  F02F         	movff	?___ftpack+1,?___ftmul+1
 14642  00377A  C001  F02E         	movff	?___ftpack,?___ftmul
 14643  00377E                     i2l1112:
 14644  00377E  0012               	return	
 14645  003780                     __end_of___ftmul:
 14646                           	opt stack 0
 14647                           tosu	equ	0xFFF
 14648                           tosh	equ	0xFFE
 14649                           tosl	equ	0xFFD
 14650                           pclatu	equ	0xFFB
 14651                           pclath	equ	0xFFA
 14652                           tblptru	equ	0xFF8
 14653                           tblptrh	equ	0xFF7
 14654                           tblptrl	equ	0xFF6
 14655                           tablat	equ	0xFF5
 14656                           prodh	equ	0xFF4
 14657                           prodl	equ	0xFF3
 14658                           intcon	equ	0xFF2
 14659                           intcon2	equ	0xFF1
 14660                           indf0	equ	0xFEF
 14661                           postinc0	equ	0xFEE
 14662                           fsr0h	equ	0xFEA
 14663                           fsr0l	equ	0xFE9
 14664                           wreg	equ	0xFE8
 14665                           postinc1	equ	0xFE6
 14666                           postdec1	equ	0xFE5
 14667                           fsr1h	equ	0xFE2
 14668                           fsr1l	equ	0xFE1
 14669                           indf2	equ	0xFDF
 14670                           postinc2	equ	0xFDE
 14671                           postdec2	equ	0xFDD
 14672                           plusw2	equ	0xFDB
 14673                           fsr2h	equ	0xFDA
 14674                           fsr2l	equ	0xFD9
 14675                           status	equ	0xFD8
 14676                           
 14677 ;; *************** function ___wmul *****************
 14678 ;; Defined at:
 14679 ;;		line 5 in file "/usr/opt/microchip/xc8/v1.20/sources/common/wmul.c"
 14680 ;; Parameters:    Size  Location     Type
 14681 ;;  multiplier      2   22[COMRAM] unsigned int 
 14682 ;;  multiplicand    2   24[COMRAM] unsigned int 
 14683 ;; Auto vars:     Size  Location     Type
 14684 ;;  product         2   28[COMRAM] unsigned int 
 14685 ;; Return value:  Size  Location     Type
 14686 ;;                  2   22[COMRAM] unsigned int 
 14687 ;; Registers used:
 14688 ;;		wreg, status,2, status,0, prodl, prodh
 14689 ;; Tracked objects:
 14690 ;;		On entry : 0/0
 14691 ;;		On exit  : 0/0
 14692 ;;		Unchanged: 0/0
 14693 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 14694 ;;      Params:         4       0       0       0       0       0       0       0       0
 14695 ;;      Locals:         4       0       0       0       0       0       0       0       0
 14696 ;;      Temps:          0       0       0       0       0       0       0       0       0
 14697 ;;      Totals:         8       0       0       0       0       0       0       0       0
 14698 ;;Total ram usage:        8 bytes
 14699 ;; Hardware stack levels used:    1
 14700 ;; This function calls:
 14701 ;;		Nothing
 14702 ;; This function is called by:
 14703 ;;		_writeString
 14704 ;;		_dayOfWeek
 14705 ;;		_fround
 14706 ;;		_scale
 14707 ;;		_sprintf
 14708 ;; This function uses a non-reentrant model
 14709 ;;
 14710                           
 14711                           	psect	text50
 14712  0048EA                     __ptext50:
 14713                           	opt stack 0
 14714  0048EA                     ___wmul:
 14715                           	opt stack 23
 14716                           
 14717                           ;incstack = 0
 14718                           ;incstack = 0
 14719  0048EA  5017               	movf	___wmul@multiplier,w,c
 14720  0048EC  0219               	mulwf	___wmul@multiplicand,c
 14721  0048EE  CFF3 F01D          	movff	prodl,___wmul@product
 14722  0048F2  CFF4 F01E          	movff	prodh,___wmul@product+1
 14723  0048F6  5017               	movf	___wmul@multiplier,w,c
 14724  0048F8  021A               	mulwf	___wmul@multiplicand+1,c
 14725  0048FA  CFF3 FFF4          	movff	prodl,prodh
 14726  0048FE  6AF3               	clrf	prodl,c
 14727  004900  50F3               	movf	prodl,w,c
 14728  004902  261D               	addwf	___wmul@product,f,c
 14729  004904  50F4               	movf	prodh,w,c
 14730  004906  221E               	addwfc	___wmul@product+1,f,c
 14731  004908  5018               	movf	___wmul@multiplier+1,w,c
 14732  00490A  0219               	mulwf	___wmul@multiplicand,c
 14733  00490C  CFF3 FFF4          	movff	prodl,prodh
 14734  004910  6AF3               	clrf	prodl,c
 14735  004912  50F3               	movf	prodl,w,c
 14736  004914  261D               	addwf	___wmul@product,f,c
 14737  004916  50F4               	movf	prodh,w,c
 14738  004918  221E               	addwfc	___wmul@product+1,f,c
 14739  00491A  C01D  F017         	movff	___wmul@product,?___wmul
 14740  00491E  C01E  F018         	movff	___wmul@product+1,?___wmul+1
 14741  004922  0012               	return	
 14742  004924                     __end_of___wmul:
 14743                           	opt stack 0
 14744                           tosu	equ	0xFFF
 14745                           tosh	equ	0xFFE
 14746                           tosl	equ	0xFFD
 14747                           pclatu	equ	0xFFB
 14748                           pclath	equ	0xFFA
 14749                           tblptru	equ	0xFF8
 14750                           tblptrh	equ	0xFF7
 14751                           tblptrl	equ	0xFF6
 14752                           tablat	equ	0xFF5
 14753                           prodh	equ	0xFF4
 14754                           prodl	equ	0xFF3
 14755                           intcon	equ	0xFF2
 14756                           intcon2	equ	0xFF1
 14757                           indf0	equ	0xFEF
 14758                           postinc0	equ	0xFEE
 14759                           fsr0h	equ	0xFEA
 14760                           fsr0l	equ	0xFE9
 14761                           wreg	equ	0xFE8
 14762                           postinc1	equ	0xFE6
 14763                           postdec1	equ	0xFE5
 14764                           fsr1h	equ	0xFE2
 14765                           fsr1l	equ	0xFE1
 14766                           indf2	equ	0xFDF
 14767                           postinc2	equ	0xFDE
 14768                           postdec2	equ	0xFDD
 14769                           plusw2	equ	0xFDB
 14770                           fsr2h	equ	0xFDA
 14771                           fsr2l	equ	0xFD9
 14772                           status	equ	0xFD8
 14773                           
 14774 ;; *************** function ___lwmod *****************
 14775 ;; Defined at:
 14776 ;;		line 10 in file "/usr/opt/microchip/xc8/v1.20/sources/common/lwmod.c"
 14777 ;; Parameters:    Size  Location     Type
 14778 ;;  dividend        2    0[COMRAM] unsigned int 
 14779 ;;  divisor         2    2[COMRAM] unsigned int 
 14780 ;; Auto vars:     Size  Location     Type
 14781 ;;  counter         1    6[COMRAM] unsigned char 
 14782 ;; Return value:  Size  Location     Type
 14783 ;;                  2    0[COMRAM] unsigned int 
 14784 ;; Registers used:
 14785 ;;		wreg, status,2, status,0
 14786 ;; Tracked objects:
 14787 ;;		On entry : 0/0
 14788 ;;		On exit  : 0/0
 14789 ;;		Unchanged: 0/0
 14790 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 14791 ;;      Params:         4       0       0       0       0       0       0       0       0
 14792 ;;      Locals:         2       0       0       0       0       0       0       0       0
 14793 ;;      Temps:          1       0       0       0       0       0       0       0       0
 14794 ;;      Totals:         7       0       0       0       0       0       0       0       0
 14795 ;;Total ram usage:        7 bytes
 14796 ;; Hardware stack levels used:    1
 14797 ;; This function calls:
 14798 ;;		Nothing
 14799 ;; This function is called by:
 14800 ;;		_daysOfMonth
 14801 ;;		_printRTC
 14802 ;;		_sprintf
 14803 ;; This function uses a non-reentrant model
 14804 ;;
 14805                           
 14806                           	psect	text51
 14807  004774                     __ptext51:
 14808                           	opt stack 0
 14809  004774                     ___lwmod:
 14810                           	opt stack 24
 14811                           
 14812                           ;incstack = 0
 14813                           ;incstack = 0
 14814  004774  5004               	movf	___lwmod@divisor+1,w,c
 14815  004776  1003               	iorwf	___lwmod@divisor,w,c
 14816  004778  B4D8               	btfsc	status,2,c
 14817  00477A  D01A               	goto	i2l1255
 14818  00477C  6E05               	movwf	??___lwmod& (0+255),c
 14819  00477E  0E01               	movlw	1
 14820  004780  6E07               	movwf	___lwmod@counter,c
 14821  004782  5005               	movf	??___lwmod& (0+255),w,c
 14822  004784  D004               	goto	i2l5713
 14823  004786                     i2l5711:
 14824  004786  90D8               	bcf	status,0,c
 14825  004788  3603               	rlcf	___lwmod@divisor,f,c
 14826  00478A  3604               	rlcf	___lwmod@divisor+1,f,c
 14827  00478C  2A07               	incf	___lwmod@counter,f,c
 14828  00478E                     i2l5713:
 14829  00478E  AE04               	btfss	___lwmod@divisor+1,7,c
 14830  004790  D7FA               	goto	i2l5711
 14831  004792                     i2l5715:
 14832  004792  5003               	movf	___lwmod@divisor,w,c
 14833  004794  5C01               	subwf	___lwmod@dividend,w,c
 14834  004796  5004               	movf	___lwmod@divisor+1,w,c
 14835  004798  5802               	subwfb	___lwmod@dividend+1,w,c
 14836  00479A  A0D8               	btfss	status,0,c
 14837  00479C  D004               	goto	i2l5719
 14838  00479E  5003               	movf	___lwmod@divisor,w,c
 14839  0047A0  5E01               	subwf	___lwmod@dividend,f,c
 14840  0047A2  5004               	movf	___lwmod@divisor+1,w,c
 14841  0047A4  5A02               	subwfb	___lwmod@dividend+1,f,c
 14842  0047A6                     i2l5719:
 14843  0047A6  90D8               	bcf	status,0,c
 14844  0047A8  3204               	rrcf	___lwmod@divisor+1,f,c
 14845  0047AA  3203               	rrcf	___lwmod@divisor,f,c
 14846  0047AC  2E07               	decfsz	___lwmod@counter,f,c
 14847  0047AE  D7F1               	goto	i2l5715
 14848  0047B0                     i2l1255:
 14849  0047B0  C001  F001         	movff	___lwmod@dividend,?___lwmod
 14850  0047B4  C002  F002         	movff	___lwmod@dividend+1,?___lwmod+1
 14851  0047B8  0012               	return	
 14852  0047BA                     __end_of___lwmod:
 14853                           	opt stack 0
 14854                           tosu	equ	0xFFF
 14855                           tosh	equ	0xFFE
 14856                           tosl	equ	0xFFD
 14857                           pclatu	equ	0xFFB
 14858                           pclath	equ	0xFFA
 14859                           tblptru	equ	0xFF8
 14860                           tblptrh	equ	0xFF7
 14861                           tblptrl	equ	0xFF6
 14862                           tablat	equ	0xFF5
 14863                           prodh	equ	0xFF4
 14864                           prodl	equ	0xFF3
 14865                           intcon	equ	0xFF2
 14866                           intcon2	equ	0xFF1
 14867                           indf0	equ	0xFEF
 14868                           postinc0	equ	0xFEE
 14869                           fsr0h	equ	0xFEA
 14870                           fsr0l	equ	0xFE9
 14871                           wreg	equ	0xFE8
 14872                           postinc1	equ	0xFE6
 14873                           postdec1	equ	0xFE5
 14874                           fsr1h	equ	0xFE2
 14875                           fsr1l	equ	0xFE1
 14876                           indf2	equ	0xFDF
 14877                           postinc2	equ	0xFDE
 14878                           postdec2	equ	0xFDD
 14879                           plusw2	equ	0xFDB
 14880                           fsr2h	equ	0xFDA
 14881                           fsr2l	equ	0xFD9
 14882                           status	equ	0xFD8
 14883                           
 14884 ;; *************** function ___llmod *****************
 14885 ;; Defined at:
 14886 ;;		line 10 in file "/usr/opt/microchip/xc8/v1.20/sources/common/llmod.c"
 14887 ;; Parameters:    Size  Location     Type
 14888 ;;  dividend        4   19[COMRAM] unsigned long 
 14889 ;;  divisor         4   23[COMRAM] unsigned long 
 14890 ;; Auto vars:     Size  Location     Type
 14891 ;;  counter         1   29[COMRAM] unsigned char 
 14892 ;; Return value:  Size  Location     Type
 14893 ;;                  4   19[COMRAM] unsigned long 
 14894 ;; Registers used:
 14895 ;;		wreg, status,2, status,0
 14896 ;; Tracked objects:
 14897 ;;		On entry : 0/0
 14898 ;;		On exit  : 0/0
 14899 ;;		Unchanged: 0/0
 14900 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 14901 ;;      Params:         8       0       0       0       0       0       0       0       0
 14902 ;;      Locals:         2       0       0       0       0       0       0       0       0
 14903 ;;      Temps:          1       0       0       0       0       0       0       0       0
 14904 ;;      Totals:        11       0       0       0       0       0       0       0       0
 14905 ;;Total ram usage:       11 bytes
 14906 ;; Hardware stack levels used:    1
 14907 ;; This function calls:
 14908 ;;		Nothing
 14909 ;; This function is called by:
 14910 ;;		_dayOfWeek
 14911 ;;		_sprintf
 14912 ;; This function uses a non-reentrant model
 14913 ;;
 14914                           
 14915                           	psect	text52
 14916  00454E                     __ptext52:
 14917                           	opt stack 0
 14918  00454E                     ___llmod:
 14919                           	opt stack 23
 14920                           
 14921                           ;incstack = 0
 14922                           ;incstack = 0
 14923  00454E  501B               	movf	___llmod@divisor+3,w,c
 14924  004550  1018               	iorwf	___llmod@divisor,w,c
 14925  004552  1019               	iorwf	___llmod@divisor+1,w,c
 14926  004554  101A               	iorwf	___llmod@divisor+2,w,c
 14927  004556  B4D8               	btfsc	status,2,c
 14928  004558  D026               	goto	i2l1186
 14929  00455A  6E1C               	movwf	??___llmod& (0+255),c
 14930  00455C  0E01               	movlw	1
 14931  00455E  6E1E               	movwf	___llmod@counter,c
 14932  004560  501C               	movf	??___llmod& (0+255),w,c
 14933  004562  D006               	goto	i2l5903
 14934  004564                     i2l5901:
 14935  004564  90D8               	bcf	status,0,c
 14936  004566  3618               	rlcf	___llmod@divisor,f,c
 14937  004568  3619               	rlcf	___llmod@divisor+1,f,c
 14938  00456A  361A               	rlcf	___llmod@divisor+2,f,c
 14939  00456C  361B               	rlcf	___llmod@divisor+3,f,c
 14940  00456E  2A1E               	incf	___llmod@counter,f,c
 14941  004570                     i2l5903:
 14942  004570  AE1B               	btfss	___llmod@divisor+3,7,c
 14943  004572  D7F8               	goto	i2l5901
 14944  004574                     i2l5905:
 14945  004574  5018               	movf	___llmod@divisor,w,c
 14946  004576  5C14               	subwf	___llmod@dividend,w,c
 14947  004578  5019               	movf	___llmod@divisor+1,w,c
 14948  00457A  5815               	subwfb	___llmod@dividend+1,w,c
 14949  00457C  501A               	movf	___llmod@divisor+2,w,c
 14950  00457E  5816               	subwfb	___llmod@dividend+2,w,c
 14951  004580  501B               	movf	___llmod@divisor+3,w,c
 14952  004582  5817               	subwfb	___llmod@dividend+3,w,c
 14953  004584  A0D8               	btfss	status,0,c
 14954  004586  D008               	goto	i2l5909
 14955  004588  5018               	movf	___llmod@divisor,w,c
 14956  00458A  5E14               	subwf	___llmod@dividend,f,c
 14957  00458C  5019               	movf	___llmod@divisor+1,w,c
 14958  00458E  5A15               	subwfb	___llmod@dividend+1,f,c
 14959  004590  501A               	movf	___llmod@divisor+2,w,c
 14960  004592  5A16               	subwfb	___llmod@dividend+2,f,c
 14961  004594  501B               	movf	___llmod@divisor+3,w,c
 14962  004596  5A17               	subwfb	___llmod@dividend+3,f,c
 14963  004598                     i2l5909:
 14964  004598  90D8               	bcf	status,0,c
 14965  00459A  321B               	rrcf	___llmod@divisor+3,f,c
 14966  00459C  321A               	rrcf	___llmod@divisor+2,f,c
 14967  00459E  3219               	rrcf	___llmod@divisor+1,f,c
 14968  0045A0  3218               	rrcf	___llmod@divisor,f,c
 14969  0045A2  2E1E               	decfsz	___llmod@counter,f,c
 14970  0045A4  D7E7               	goto	i2l5905
 14971  0045A6                     i2l1186:
 14972  0045A6  C014  F014         	movff	___llmod@dividend,?___llmod
 14973  0045AA  C015  F015         	movff	___llmod@dividend+1,?___llmod+1
 14974  0045AE  C016  F016         	movff	___llmod@dividend+2,?___llmod+2
 14975  0045B2  C017  F017         	movff	___llmod@dividend+3,?___llmod+3
 14976  0045B6  0012               	return	
 14977  0045B8                     __end_of___llmod:
 14978                           	opt stack 0
 14979                           tosu	equ	0xFFF
 14980                           tosh	equ	0xFFE
 14981                           tosl	equ	0xFFD
 14982                           pclatu	equ	0xFFB
 14983                           pclath	equ	0xFFA
 14984                           tblptru	equ	0xFF8
 14985                           tblptrh	equ	0xFF7
 14986                           tblptrl	equ	0xFF6
 14987                           tablat	equ	0xFF5
 14988                           prodh	equ	0xFF4
 14989                           prodl	equ	0xFF3
 14990                           intcon	equ	0xFF2
 14991                           intcon2	equ	0xFF1
 14992                           indf0	equ	0xFEF
 14993                           postinc0	equ	0xFEE
 14994                           fsr0h	equ	0xFEA
 14995                           fsr0l	equ	0xFE9
 14996                           wreg	equ	0xFE8
 14997                           postinc1	equ	0xFE6
 14998                           postdec1	equ	0xFE5
 14999                           fsr1h	equ	0xFE2
 15000                           fsr1l	equ	0xFE1
 15001                           indf2	equ	0xFDF
 15002                           postinc2	equ	0xFDE
 15003                           postdec2	equ	0xFDD
 15004                           plusw2	equ	0xFDB
 15005                           fsr2h	equ	0xFDA
 15006                           fsr2l	equ	0xFD9
 15007                           status	equ	0xFD8
 15008                           
 15009 ;; *************** function _tick *****************
 15010 ;; Defined at:
 15011 ;;		line 153 in file "RTC.c"
 15012 ;; Parameters:    Size  Location     Type
 15013 ;;  val             1   54[COMRAM] unsigned char 
 15014 ;; Auto vars:     Size  Location     Type
 15015 ;;		None
 15016 ;; Return value:  Size  Location     Type
 15017 ;;                  1    wreg      unsigned char 
 15018 ;; Registers used:
 15019 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
 15020 ;; Tracked objects:
 15021 ;;		On entry : 0/0
 15022 ;;		On exit  : 0/0
 15023 ;;		Unchanged: 0/0
 15024 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 15025 ;;      Params:         1       0       0       0       0       0       0       0       0
 15026 ;;      Locals:         0       0       0       0       0       0       0       0       0
 15027 ;;      Temps:          1       0       0       0       0       0       0       0       0
 15028 ;;      Totals:         2       0       0       0       0       0       0       0       0
 15029 ;;Total ram usage:        2 bytes
 15030 ;; Hardware stack levels used:    1
 15031 ;; Hardware stack levels required when called:    3
 15032 ;; This function calls:
 15033 ;;		_saveTime
 15034 ;;		_daysOfMonth
 15035 ;;		_checkDST
 15036 ;; This function is called by:
 15037 ;;		_checkDST
 15038 ;;		_isr
 15039 ;; This function uses a non-reentrant model
 15040 ;;
 15041                           
 15042                           	psect	text53
 15043  003964                     __ptext53:
 15044                           	opt stack 0
 15045  003964                     _tick:
 15046                           	opt stack 22
 15047                           
 15048                           ;RTC.c: 154: switch (val)
 15049                           
 15050                           ;incstack = 0
 15051                           ;incstack = 0
 15052  003964  D05D               	goto	i2l6371
 15053  003966                     i2l6343:
 15054                           
 15055                           ;RTC.c: 157: if (++date.second >= 60)
 15056  003966  0100               	movlb	0	; () banked
 15057  003968  0100               	movlb	0	; () banked
 15058  00396A  2BC6               	incf	_date& (0+255),f,b
 15059  00396C  0E3B               	movlw	59
 15060  00396E  0100               	movlb	0	; () banked
 15061  003970  65C6               	cpfsgt	_date& (0+255),b
 15062  003972  D069               	goto	i2l245
 15063                           
 15064                           ; BSR set to: 0
 15065                           ;RTC.c: 158: {
 15066                           ;RTC.c: 159: date.second = 0;
 15067  003974  6E38               	movwf	??_tick& (0+255),c
 15068  003976  0E00               	movlw	0
 15069  003978  0100               	movlb	0	; () banked
 15070  00397A  0100               	movlb	0	; () banked
 15071  00397C  6FC6               	movwf	_date& (0+255),b
 15072  00397E  5038               	movf	??_tick& (0+255),w,c
 15073  003980                     i2l6347:
 15074                           
 15075                           ;RTC.c: 161: saveTime(date);
 15076  003980  EE20  F0C6         	lfsr	2,_date
 15077  003984  EE10  F001         	lfsr	1,?_saveTime
 15078  003988  0E09               	movlw	9
 15079  00398A                     i2u463_41:
 15080  00398A  CFDE FFE6          	movff	postinc2,postinc1
 15081  00398E  2EE8               	decfsz	wreg,f,c
 15082  003990  D7FC               	goto	i2u463_41
 15083  003992  EC01  F022         	call	_saveTime	;wreg free
 15084                           
 15085                           ;RTC.c: 162: if (++date.minute >= 60)
 15086  003996  0100               	movlb	0	; () banked
 15087  003998  EE20  F0C7         	lfsr	2,_date+1
 15088  00399C  2ADF               	incf	indf2,f,c
 15089  00399E  0E3B               	movlw	59
 15090  0039A0  64DF               	cpfsgt	indf2,c
 15091  0039A2  D051               	goto	i2l245
 15092                           
 15093                           ; BSR set to: 0
 15094                           ;RTC.c: 163: {
 15095                           ;RTC.c: 164: date.minute = 0;
 15096  0039A4  6E38               	movwf	??_tick& (0+255),c
 15097  0039A6  0E00               	movlw	0
 15098  0039A8  0100               	movlb	0	; () banked
 15099  0039AA  0100               	movlb	0	; () banked
 15100  0039AC  6FC7               	movwf	(_date+1)& (0+255),b
 15101  0039AE  5038               	movf	??_tick& (0+255),w,c
 15102  0039B0                     i2l6353:
 15103                           
 15104                           ;RTC.c: 166: date.hour++;
 15105  0039B0  0100               	movlb	0	; () banked
 15106  0039B2  0100               	movlb	0	; () banked
 15107  0039B4  2BC8               	incf	(_date+2)& (0+255),f,b
 15108                           
 15109                           ; BSR set to: 0
 15110                           ;RTC.c: 167: checkDST();
 15111  0039B6  EC13  F01A         	call	_checkDST	;wreg free
 15112                           
 15113                           ;RTC.c: 168: if (date.hour >= 24)
 15114  0039BA  0100               	movlb	0	; () banked
 15115  0039BC  EE20  F0C8         	lfsr	2,_date+2
 15116  0039C0  0E17               	movlw	23
 15117  0039C2  64DF               	cpfsgt	indf2,c
 15118  0039C4  D040               	goto	i2l245
 15119                           
 15120                           ; BSR set to: 0
 15121                           ;RTC.c: 169: {
 15122                           ;RTC.c: 170: date.hour = 0;
 15123  0039C6  6E38               	movwf	??_tick& (0+255),c
 15124  0039C8  0E00               	movlw	0
 15125  0039CA  0100               	movlb	0	; () banked
 15126  0039CC  0100               	movlb	0	; () banked
 15127  0039CE  6FC8               	movwf	(_date+2)& (0+255),b
 15128  0039D0  5038               	movf	??_tick& (0+255),w,c
 15129  0039D2                     i2l6361:
 15130                           
 15131                           ;RTC.c: 172: if (++date.day >= daysOfMonth(date.month, date.year))
 15132  0039D2  C0CB  F008         	movff	_date+5,?_daysOfMonth
 15133  0039D6  C0CC  F009         	movff	_date+6,?_daysOfMonth+1
 15134  0039DA  C0CD  F00A         	movff	_date+7,?_daysOfMonth+2
 15135  0039DE  EC5B  F01E         	call	_daysOfMonth	;wreg free
 15136  0039E2  0100               	movlb	0	; () banked
 15137  0039E4  0100               	movlb	0	; () banked
 15138  0039E6  2BC9               	incf	(_date+3)& (0+255),f,b
 15139  0039E8  0100               	movlb	0	; () banked
 15140  0039EA  5DC9               	subwf	(_date+3)& (0+255),w,b
 15141  0039EC  A0D8               	btfss	status,0,c
 15142  0039EE  D02B               	goto	i2l245
 15143                           
 15144                           ; BSR set to: 0
 15145                           ;RTC.c: 173: {
 15146                           ;RTC.c: 174: date.day = 1;
 15147  0039F0  6E38               	movwf	??_tick& (0+255),c
 15148  0039F2  0E01               	movlw	1
 15149  0039F4  0100               	movlb	0	; () banked
 15150  0039F6  0100               	movlb	0	; () banked
 15151  0039F8  6FC9               	movwf	(_date+3)& (0+255),b
 15152  0039FA  5038               	movf	??_tick& (0+255),w,c
 15153  0039FC                     i2l6365:
 15154                           
 15155                           ;RTC.c: 176: if (++date.month > 12)
 15156  0039FC  0100               	movlb	0	; () banked
 15157  0039FE  EE20  F0CB         	lfsr	2,_date+5
 15158  003A02  2ADF               	incf	indf2,f,c
 15159  003A04  0E0C               	movlw	12
 15160  003A06  64DF               	cpfsgt	indf2,c
 15161  003A08  D01E               	goto	i2l245
 15162                           
 15163                           ; BSR set to: 0
 15164                           ;RTC.c: 177: {
 15165                           ;RTC.c: 178: date.month = 1;
 15166  003A0A  6E38               	movwf	??_tick& (0+255),c
 15167  003A0C  0E01               	movlw	1
 15168  003A0E  0100               	movlb	0	; () banked
 15169  003A10  0100               	movlb	0	; () banked
 15170  003A12  6FCB               	movwf	(_date+5)& (0+255),b
 15171  003A14  5038               	movf	??_tick& (0+255),w,c
 15172  003A16                     i2l6369:
 15173                           
 15174                           ;RTC.c: 180: ++date.year;
 15175  003A16  0100               	movlb	0	; () banked
 15176  003A18  0100               	movlb	0	; () banked
 15177  003A1A  4BCC               	infsnz	(_date+6)& (0+255),f,b
 15178  003A1C  2BCD               	incf	(_date+7)& (0+255),f,b
 15179  003A1E  D013               	goto	i2l245
 15180  003A20                     i2l6371:
 15181  003A20  5037               	movf	tick@val,w,c
 15182                           
 15183                           ; Switch size 1, requested type "space"
 15184                           ; Number of cases is 6, Range of values is 0 to 5
 15185                           ; switch strategies available:
 15186                           ; Name         Instructions Cycles
 15187                           ; simple_byte           19    10 (average)
 15188                           ;	Chosen strategy is simple_byte
 15189  003A22  0A00               	xorlw	0	; case 0
 15190  003A24  B4D8               	btfsc	status,2,c
 15191  003A26  D79F               	goto	i2l6343
 15192  003A28  0A01               	xorlw	1	; case 1
 15193  003A2A  B4D8               	btfsc	status,2,c
 15194  003A2C  D7A9               	goto	i2l6347
 15195  003A2E  0A03               	xorlw	3	; case 2
 15196  003A30  B4D8               	btfsc	status,2,c
 15197  003A32  D7BE               	goto	i2l6353
 15198  003A34  0A01               	xorlw	1	; case 3
 15199  003A36  B4D8               	btfsc	status,2,c
 15200  003A38  D7CC               	goto	i2l6361
 15201  003A3A  0A07               	xorlw	7	; case 4
 15202  003A3C  B4D8               	btfsc	status,2,c
 15203  003A3E  D7DE               	goto	i2l6365
 15204  003A40  0A01               	xorlw	1	; case 5
 15205  003A42  B4D8               	btfsc	status,2,c
 15206  003A44  D7E8               	goto	i2l6369
 15207  003A46                     i2l245:
 15208  003A46  0012               	return	
 15209  003A48                     __end_of_tick:
 15210                           	opt stack 0
 15211                           tosu	equ	0xFFF
 15212                           tosh	equ	0xFFE
 15213                           tosl	equ	0xFFD
 15214                           pclatu	equ	0xFFB
 15215                           pclath	equ	0xFFA
 15216                           tblptru	equ	0xFF8
 15217                           tblptrh	equ	0xFF7
 15218                           tblptrl	equ	0xFF6
 15219                           tablat	equ	0xFF5
 15220                           prodh	equ	0xFF4
 15221                           prodl	equ	0xFF3
 15222                           intcon	equ	0xFF2
 15223                           intcon2	equ	0xFF1
 15224                           indf0	equ	0xFEF
 15225                           postinc0	equ	0xFEE
 15226                           fsr0h	equ	0xFEA
 15227                           fsr0l	equ	0xFE9
 15228                           wreg	equ	0xFE8
 15229                           postinc1	equ	0xFE6
 15230                           postdec1	equ	0xFE5
 15231                           fsr1h	equ	0xFE2
 15232                           fsr1l	equ	0xFE1
 15233                           indf2	equ	0xFDF
 15234                           postinc2	equ	0xFDE
 15235                           postdec2	equ	0xFDD
 15236                           plusw2	equ	0xFDB
 15237                           fsr2h	equ	0xFDA
 15238                           fsr2l	equ	0xFD9
 15239                           status	equ	0xFD8
 15240                           
 15241 ;; *************** function _checkDST *****************
 15242 ;; Defined at:
 15243 ;;		line 129 in file "RTC.c"
 15244 ;; Parameters:    Size  Location     Type
 15245 ;;		None
 15246 ;; Auto vars:     Size  Location     Type
 15247 ;;		None
 15248 ;; Return value:  Size  Location     Type
 15249 ;;		None               void
 15250 ;; Registers used:
 15251 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
 15252 ;; Tracked objects:
 15253 ;;		On entry : 0/0
 15254 ;;		On exit  : 0/0
 15255 ;;		Unchanged: 0/0
 15256 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 15257 ;;      Params:         0       0       0       0       0       0       0       0       0
 15258 ;;      Locals:         2       0       0       0       0       0       0       0       0
 15259 ;;      Temps:          7       0       0       0       0       0       0       0       0
 15260 ;;      Totals:         9       0       0       0       0       0       0       0       0
 15261 ;;Total ram usage:        9 bytes
 15262 ;; Hardware stack levels used:    1
 15263 ;; Hardware stack levels required when called:    2
 15264 ;; This function calls:
 15265 ;;		_dayOfWeek
 15266 ;;		_tick
 15267 ;; This function is called by:
 15268 ;;		_tick
 15269 ;; This function uses a non-reentrant model
 15270 ;;
 15271                           
 15272                           	psect	text54
 15273  003426                     __ptext54:
 15274                           	opt stack 0
 15275  003426                     _checkDST:
 15276                           	opt stack 22
 15277                           
 15278                           ;RTC.c: 130: if ((date.dst ^ (1 & ((date.day >= ((((2)*7)-dayOfWeek((date.year),(3),((2)
      +                          *7)))) && date.month >= 3) && (date.day < ((((1)*7)-dayOfWeek((date.year),(11),((1)*7)))
      +                          ) && date.month < 11)))) && date.hour == 1)
 15279                           
 15280                           ;incstack = 0
 15281                           ;incstack = 0
 15282  003426  6E2E               	movwf	??_checkDST& (0+255),c
 15283  003428  0E00               	movlw	0
 15284  00342A  6E36               	movwf	_checkDST$299,c
 15285  00342C  502E               	movf	??_checkDST& (0+255),w,c
 15286  00342E  C0CC  F01F         	movff	_date+6,?_dayOfWeek
 15287  003432  6E2E               	movwf	??_checkDST& (0+255),c
 15288  003434  0E03               	movlw	3
 15289  003436  6E20               	movwf	?_dayOfWeek+1,c
 15290  003438  502E               	movf	??_checkDST& (0+255),w,c
 15291  00343A  6E2F               	movwf	(??_checkDST+1)& (0+255),c
 15292  00343C  0E0E               	movlw	14
 15293  00343E  6E21               	movwf	?_dayOfWeek+2,c
 15294  003440  502F               	movf	(??_checkDST+1)& (0+255),w,c
 15295  003442  ECA5  F016         	call	_dayOfWeek	;wreg free
 15296  003446  6E30               	movwf	(??_checkDST+2)& (0+255),c
 15297  003448  6A31               	clrf	(??_checkDST+3)& (0+255),c
 15298  00344A  1E30               	comf	??_checkDST+2,f,c
 15299  00344C  1E31               	comf	??_checkDST+3,f,c
 15300  00344E  4A30               	infsnz	??_checkDST+2,f,c
 15301  003450  2A31               	incf	??_checkDST+3,f,c
 15302  003452  0E0E               	movlw	14
 15303  003454  2630               	addwf	??_checkDST+2,f,c
 15304  003456  0E00               	movlw	0
 15305  003458  2231               	addwfc	??_checkDST+3,f,c
 15306  00345A  0100               	movlb	0	; () banked
 15307  00345C  0100               	movlb	0	; () banked
 15308  00345E  51C9               	movf	(_date+3)& (0+255),w,b
 15309  003460  6E32               	movwf	(??_checkDST+4)& (0+255),c
 15310  003462  6A33               	clrf	(??_checkDST+5)& (0+255),c
 15311  003464  5033               	movf	??_checkDST+5,w,c
 15312  003466  0A80               	xorlw	128
 15313  003468  6E34               	movwf	(??_checkDST+6)& (0+255),c
 15314  00346A  5030               	movf	??_checkDST+2,w,c
 15315  00346C  5C32               	subwf	??_checkDST+4,w,c
 15316  00346E  5031               	movf	??_checkDST+3,w,c
 15317  003470  0A80               	xorlw	128
 15318  003472  5834               	subwfb	(??_checkDST+6)& (0+255),w,c
 15319  003474  A0D8               	btfss	status,0,c
 15320  003476  D034               	goto	i2l6163
 15321                           
 15322                           ; BSR set to: 0
 15323  003478  0100               	movlb	0	; () banked
 15324  00347A  EE20  F0CB         	lfsr	2,_date+5
 15325  00347E  0E02               	movlw	2
 15326  003480  64DF               	cpfsgt	indf2,c
 15327  003482  D02E               	goto	i2l6163
 15328                           
 15329                           ; BSR set to: 0
 15330  003484  C0CC  F01F         	movff	_date+6,?_dayOfWeek
 15331  003488  6E2E               	movwf	??_checkDST& (0+255),c
 15332  00348A  0E0B               	movlw	11
 15333  00348C  6E20               	movwf	?_dayOfWeek+1,c
 15334  00348E  502E               	movf	??_checkDST& (0+255),w,c
 15335  003490  6E2F               	movwf	(??_checkDST+1)& (0+255),c
 15336  003492  0E07               	movlw	7
 15337  003494  6E21               	movwf	?_dayOfWeek+2,c
 15338  003496  502F               	movf	(??_checkDST+1)& (0+255),w,c
 15339  003498  ECA5  F016         	call	_dayOfWeek	;wreg free
 15340  00349C  6E30               	movwf	(??_checkDST+2)& (0+255),c
 15341  00349E  6A31               	clrf	(??_checkDST+3)& (0+255),c
 15342  0034A0  1E30               	comf	??_checkDST+2,f,c
 15343  0034A2  1E31               	comf	??_checkDST+3,f,c
 15344  0034A4  4A30               	infsnz	??_checkDST+2,f,c
 15345  0034A6  2A31               	incf	??_checkDST+3,f,c
 15346  0034A8  0E07               	movlw	7
 15347  0034AA  2630               	addwf	??_checkDST+2,f,c
 15348  0034AC  0E00               	movlw	0
 15349  0034AE  2231               	addwfc	??_checkDST+3,f,c
 15350  0034B0  0100               	movlb	0	; () banked
 15351  0034B2  0100               	movlb	0	; () banked
 15352  0034B4  51C9               	movf	(_date+3)& (0+255),w,b
 15353  0034B6  6E32               	movwf	(??_checkDST+4)& (0+255),c
 15354  0034B8  6A33               	clrf	(??_checkDST+5)& (0+255),c
 15355  0034BA  5033               	movf	??_checkDST+5,w,c
 15356  0034BC  0A80               	xorlw	128
 15357  0034BE  6E34               	movwf	(??_checkDST+6)& (0+255),c
 15358  0034C0  5030               	movf	??_checkDST+2,w,c
 15359  0034C2  5C32               	subwf	??_checkDST+4,w,c
 15360  0034C4  5031               	movf	??_checkDST+3,w,c
 15361  0034C6  0A80               	xorlw	128
 15362  0034C8  5834               	subwfb	(??_checkDST+6)& (0+255),w,c
 15363  0034CA  B0D8               	btfsc	status,0,c
 15364  0034CC  D009               	goto	i2l6163
 15365                           
 15366                           ; BSR set to: 0
 15367  0034CE  0E0B               	movlw	11
 15368  0034D0  0100               	movlb	0	; () banked
 15369  0034D2  0100               	movlb	0	; () banked
 15370  0034D4  61CB               	cpfslt	(_date+5)& (0+255),b
 15371  0034D6  D004               	goto	i2l6163
 15372                           
 15373                           ; BSR set to: 0
 15374  0034D8  6E2E               	movwf	??_checkDST& (0+255),c
 15375  0034DA  0E01               	movlw	1
 15376  0034DC  6E36               	movwf	_checkDST$299,c
 15377  0034DE  502E               	movf	??_checkDST& (0+255),w,c
 15378  0034E0                     i2l6163:
 15379                           
 15380                           ; BSR set to: 0
 15381  0034E0  5036               	movf	_checkDST$299,w,c
 15382  0034E2  0B01               	andlw	1
 15383  0034E4  0100               	movlb	0	; () banked
 15384  0034E6  0100               	movlb	0	; () banked
 15385  0034E8  19CE               	xorwf	(_date+8)& (0+255),w,b
 15386  0034EA  0900               	iorlw	0
 15387  0034EC  B4D8               	btfsc	status,2,c
 15388  0034EE  D02E               	goto	i2l229
 15389                           
 15390                           ; BSR set to: 0
 15391  0034F0  0100               	movlb	0	; () banked
 15392  0034F2  0100               	movlb	0	; () banked
 15393  0034F4  05C8               	decf	(_date+2)& (0+255),w,b
 15394  0034F6  A4D8               	btfss	status,2,c
 15395  0034F8  D029               	goto	i2l229
 15396                           
 15397                           ; BSR set to: 0
 15398                           ;RTC.c: 131: {
 15399                           ;RTC.c: 132: date.dst = !date.dst;
 15400  0034FA  0100               	movlb	0	; () banked
 15401  0034FC  0100               	movlb	0	; () banked
 15402  0034FE  51CE               	movf	(_date+8)& (0+255),w,b
 15403  003500  A4D8               	btfss	status,2,c
 15404  003502  D002               	goto	i2u437_40
 15405  003504  0E01               	movlw	1
 15406  003506  D001               	goto	i2u437_46
 15407  003508                     i2u437_40:
 15408  003508  0E00               	movlw	0
 15409  00350A                     i2u437_46:
 15410  00350A  0100               	movlb	0	; () banked
 15411  00350C  0100               	movlb	0	; () banked
 15412  00350E  6FCE               	movwf	(_date+8)& (0+255),b
 15413                           
 15414                           ;RTC.c: 133: if (date.dst)
 15415  003510  0100               	movlb	0	; () banked
 15416  003512  0100               	movlb	0	; () banked
 15417  003514  51CE               	movf	(_date+8)& (0+255),w,b
 15418  003516  B4D8               	btfsc	status,2,c
 15419  003518  D007               	goto	i2l6171
 15420                           
 15421                           ; BSR set to: 0
 15422                           ;RTC.c: 134: {
 15423                           ;RTC.c: 135: tick(hour);
 15424  00351A  6E2E               	movwf	??_checkDST& (0+255),c
 15425  00351C  0E02               	movlw	2
 15426  00351E  6E37               	movwf	?_tick,c
 15427  003520  502E               	movf	??_checkDST& (0+255),w,c
 15428  003522  ECB2  F01C         	call	_tick	;wreg free
 15429                           
 15430                           ;RTC.c: 136: }
 15431  003526  D012               	goto	i2l229
 15432  003528                     i2l6171:
 15433                           
 15434                           ;RTC.c: 137: else
 15435                           ;RTC.c: 138: {
 15436                           ;RTC.c: 139: if (date.hour > 0)
 15437  003528  0100               	movlb	0	; () banked
 15438  00352A  0100               	movlb	0	; () banked
 15439  00352C  51C8               	movf	(_date+2)& (0+255),w,b
 15440  00352E  B4D8               	btfsc	status,2,c
 15441  003530  D004               	goto	i2l6175
 15442                           
 15443                           ; BSR set to: 0
 15444                           ;RTC.c: 140: {
 15445                           ;RTC.c: 141: date.hour--;
 15446  003532  0100               	movlb	0	; () banked
 15447  003534  0100               	movlb	0	; () banked
 15448  003536  07C8               	decf	(_date+2)& (0+255),f,b
 15449                           
 15450                           ;RTC.c: 142: }
 15451  003538  D009               	goto	i2l229
 15452  00353A                     i2l6175:
 15453                           
 15454                           ; BSR set to: 0
 15455                           ;RTC.c: 143: else
 15456                           ;RTC.c: 144: {
 15457                           ;RTC.c: 145: date.hour = 0;
 15458  00353A  6E2E               	movwf	??_checkDST& (0+255),c
 15459  00353C  0E00               	movlw	0
 15460  00353E  0100               	movlb	0	; () banked
 15461  003540  0100               	movlb	0	; () banked
 15462  003542  6FC8               	movwf	(_date+2)& (0+255),b
 15463  003544  502E               	movf	??_checkDST& (0+255),w,c
 15464                           
 15465                           ; BSR set to: 0
 15466                           ;RTC.c: 146: date.day--;
 15467  003546  0100               	movlb	0	; () banked
 15468  003548  0100               	movlb	0	; () banked
 15469  00354A  07C9               	decf	(_date+3)& (0+255),f,b
 15470  00354C                     i2l229:
 15471  00354C  0012               	return	
 15472  00354E                     __end_of_checkDST:
 15473                           	opt stack 0
 15474                           tosu	equ	0xFFF
 15475                           tosh	equ	0xFFE
 15476                           tosl	equ	0xFFD
 15477                           pclatu	equ	0xFFB
 15478                           pclath	equ	0xFFA
 15479                           tblptru	equ	0xFF8
 15480                           tblptrh	equ	0xFF7
 15481                           tblptrl	equ	0xFF6
 15482                           tablat	equ	0xFF5
 15483                           prodh	equ	0xFF4
 15484                           prodl	equ	0xFF3
 15485                           intcon	equ	0xFF2
 15486                           intcon2	equ	0xFF1
 15487                           indf0	equ	0xFEF
 15488                           postinc0	equ	0xFEE
 15489                           fsr0h	equ	0xFEA
 15490                           fsr0l	equ	0xFE9
 15491                           wreg	equ	0xFE8
 15492                           postinc1	equ	0xFE6
 15493                           postdec1	equ	0xFE5
 15494                           fsr1h	equ	0xFE2
 15495                           fsr1l	equ	0xFE1
 15496                           indf2	equ	0xFDF
 15497                           postinc2	equ	0xFDE
 15498                           postdec2	equ	0xFDD
 15499                           plusw2	equ	0xFDB
 15500                           fsr2h	equ	0xFDA
 15501                           fsr2l	equ	0xFD9
 15502                           status	equ	0xFD8
 15503                           
 15504 ;; *************** function _dayOfWeek *****************
 15505 ;; Defined at:
 15506 ;;		line 191 in file "RTC.c"
 15507 ;; Parameters:    Size  Location     Type
 15508 ;;  year            1   30[COMRAM] unsigned char 
 15509 ;;  month           1   31[COMRAM] unsigned char 
 15510 ;;  day             1   32[COMRAM] unsigned char 
 15511 ;; Auto vars:     Size  Location     Type
 15512 ;;  tmp             4   41[COMRAM] unsigned long 
 15513 ;; Return value:  Size  Location     Type
 15514 ;;                  1    wreg      unsigned char 
 15515 ;; Registers used:
 15516 ;;		wreg, status,2, status,0, prodl, prodh, cstack
 15517 ;; Tracked objects:
 15518 ;;		On entry : 0/0
 15519 ;;		On exit  : 0/0
 15520 ;;		Unchanged: 0/0
 15521 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 15522 ;;      Params:         3       0       0       0       0       0       0       0       0
 15523 ;;      Locals:         8       0       0       0       0       0       0       0       0
 15524 ;;      Temps:          4       0       0       0       0       0       0       0       0
 15525 ;;      Totals:        15       0       0       0       0       0       0       0       0
 15526 ;;Total ram usage:       15 bytes
 15527 ;; Hardware stack levels used:    1
 15528 ;; Hardware stack levels required when called:    1
 15529 ;; This function calls:
 15530 ;;		___awdiv
 15531 ;;		___awmod
 15532 ;;		___llmod
 15533 ;;		___wmul
 15534 ;; This function is called by:
 15535 ;;		_checkDST
 15536 ;; This function uses a non-reentrant model
 15537 ;;
 15538                           
 15539                           	psect	text55
 15540  002D4A                     __ptext55:
 15541                           	opt stack 0
 15542  002D4A                     _dayOfWeek:
 15543                           	opt stack 22
 15544                           
 15545                           ;RTC.c: 193: uint32_t tmp = (year % 200) * 365;
 15546                           
 15547                           ;incstack = 0
 15548                           ;incstack = 0
 15549  002D4A  0E00               	movlw	0
 15550  002D4C  6E04               	movwf	?___awmod+3,c
 15551  002D4E  0EC8               	movlw	200
 15552  002D50  6E03               	movwf	?___awmod+2,c
 15553  002D52  C01F  F001         	movff	dayOfWeek@year,?___awmod
 15554  002D56  6A02               	clrf	?___awmod+1,c
 15555  002D58  EC4A  F021         	call	___awmod	;wreg free
 15556  002D5C  C001  F017         	movff	?___awmod,?___wmul
 15557  002D60  C002  F018         	movff	?___awmod+1,?___wmul+1
 15558  002D64  0E01               	movlw	1
 15559  002D66  6E1A               	movwf	?___wmul+3,c
 15560  002D68  0E6D               	movlw	109
 15561  002D6A  6E19               	movwf	?___wmul+2,c
 15562  002D6C  EC75  F024         	call	___wmul	;wreg free
 15563  002D70  C017  F02A         	movff	?___wmul,dayOfWeek@tmp
 15564  002D74  C018  F02B         	movff	?___wmul+1,dayOfWeek@tmp+1
 15565  002D78  0E00               	movlw	0
 15566  002D7A  BE2B               	btfsc	dayOfWeek@tmp+1,7,c
 15567  002D7C  0EFF               	movlw	-1
 15568  002D7E  6E2C               	movwf	dayOfWeek@tmp+2,c
 15569  002D80  6E2D               	movwf	dayOfWeek@tmp+3,c
 15570                           
 15571                           ;RTC.c: 194: tmp += (((year % 200) + 3) / 4);
 15572  002D82  0E00               	movlw	0
 15573  002D84  6E04               	movwf	?___awmod+3,c
 15574  002D86  0EC8               	movlw	200
 15575  002D88  6E03               	movwf	?___awmod+2,c
 15576  002D8A  C01F  F001         	movff	dayOfWeek@year,?___awmod
 15577  002D8E  6A02               	clrf	?___awmod+1,c
 15578  002D90  EC4A  F021         	call	___awmod	;wreg free
 15579  002D94  0E03               	movlw	3
 15580  002D96  2401               	addwf	?___awmod,w,c
 15581  002D98  6E0A               	movwf	?___awdiv,c
 15582  002D9A  0E00               	movlw	0
 15583  002D9C  2002               	addwfc	?___awmod+1,w,c
 15584  002D9E  6E0B               	movwf	?___awdiv+1,c
 15585  002DA0  0E00               	movlw	0
 15586  002DA2  6E0D               	movwf	?___awdiv+3,c
 15587  002DA4  0E04               	movlw	4
 15588  002DA6  6E0C               	movwf	?___awdiv+2,c
 15589  002DA8  EC7C  F020         	call	___awdiv	;wreg free
 15590  002DAC  C00A  F022         	movff	?___awdiv,??_dayOfWeek
 15591  002DB0  C00B  F023         	movff	?___awdiv+1,??_dayOfWeek+1
 15592  002DB4  0E00               	movlw	0
 15593  002DB6  BE23               	btfsc	(??_dayOfWeek+1)& (0+255),7,c
 15594  002DB8  0EFF               	movlw	255
 15595  002DBA  6E24               	movwf	(??_dayOfWeek+2)& (0+255),c
 15596  002DBC  6E25               	movwf	(??_dayOfWeek+3)& (0+255),c
 15597  002DBE  5022               	movf	??_dayOfWeek,w,c
 15598  002DC0  262A               	addwf	dayOfWeek@tmp,f,c
 15599  002DC2  5023               	movf	??_dayOfWeek+1,w,c
 15600  002DC4  222B               	addwfc	dayOfWeek@tmp+1,f,c
 15601  002DC6  5024               	movf	??_dayOfWeek+2,w,c
 15602  002DC8  222C               	addwfc	dayOfWeek@tmp+2,f,c
 15603  002DCA  5025               	movf	??_dayOfWeek+3,w,c
 15604  002DCC  222D               	addwfc	dayOfWeek@tmp+3,f,c
 15605                           
 15606                           ;RTC.c: 196: switch (month)
 15607  002DCE  D065               	goto	i2l6021
 15608  002DD0                     i2l6015:
 15609                           
 15610                           ;RTC.c: 199: tmp += 30;
 15611  002DD0  0E1E               	movlw	30
 15612  002DD2  262A               	addwf	dayOfWeek@tmp,f,c
 15613  002DD4  0E00               	movlw	0
 15614  002DD6  222B               	addwfc	dayOfWeek@tmp+1,f,c
 15615  002DD8  0E00               	movlw	0
 15616  002DDA  222C               	addwfc	dayOfWeek@tmp+2,f,c
 15617  002DDC  0E00               	movlw	0
 15618  002DDE  222D               	addwfc	dayOfWeek@tmp+3,f,c
 15619  002DE0                     i2l250:
 15620                           
 15621                           ;RTC.c: 202: tmp += 31;
 15622  002DE0  0E1F               	movlw	31
 15623  002DE2  262A               	addwf	dayOfWeek@tmp,f,c
 15624  002DE4  0E00               	movlw	0
 15625  002DE6  222B               	addwfc	dayOfWeek@tmp+1,f,c
 15626  002DE8  0E00               	movlw	0
 15627  002DEA  222C               	addwfc	dayOfWeek@tmp+2,f,c
 15628  002DEC  0E00               	movlw	0
 15629  002DEE  222D               	addwfc	dayOfWeek@tmp+3,f,c
 15630  002DF0                     i2l251:
 15631                           
 15632                           ;RTC.c: 205: tmp += 30;
 15633  002DF0  0E1E               	movlw	30
 15634  002DF2  262A               	addwf	dayOfWeek@tmp,f,c
 15635  002DF4  0E00               	movlw	0
 15636  002DF6  222B               	addwfc	dayOfWeek@tmp+1,f,c
 15637  002DF8  0E00               	movlw	0
 15638  002DFA  222C               	addwfc	dayOfWeek@tmp+2,f,c
 15639  002DFC  0E00               	movlw	0
 15640  002DFE  222D               	addwfc	dayOfWeek@tmp+3,f,c
 15641  002E00                     i2l252:
 15642                           
 15643                           ;RTC.c: 208: tmp += 31;
 15644  002E00  0E1F               	movlw	31
 15645  002E02  262A               	addwf	dayOfWeek@tmp,f,c
 15646  002E04  0E00               	movlw	0
 15647  002E06  222B               	addwfc	dayOfWeek@tmp+1,f,c
 15648  002E08  0E00               	movlw	0
 15649  002E0A  222C               	addwfc	dayOfWeek@tmp+2,f,c
 15650  002E0C  0E00               	movlw	0
 15651  002E0E  222D               	addwfc	dayOfWeek@tmp+3,f,c
 15652  002E10                     i2l253:
 15653                           
 15654                           ;RTC.c: 211: tmp += 31;
 15655  002E10  0E1F               	movlw	31
 15656  002E12  262A               	addwf	dayOfWeek@tmp,f,c
 15657  002E14  0E00               	movlw	0
 15658  002E16  222B               	addwfc	dayOfWeek@tmp+1,f,c
 15659  002E18  0E00               	movlw	0
 15660  002E1A  222C               	addwfc	dayOfWeek@tmp+2,f,c
 15661  002E1C  0E00               	movlw	0
 15662  002E1E  222D               	addwfc	dayOfWeek@tmp+3,f,c
 15663  002E20                     i2l254:
 15664                           
 15665                           ;RTC.c: 214: tmp += 30;
 15666  002E20  0E1E               	movlw	30
 15667  002E22  262A               	addwf	dayOfWeek@tmp,f,c
 15668  002E24  0E00               	movlw	0
 15669  002E26  222B               	addwfc	dayOfWeek@tmp+1,f,c
 15670  002E28  0E00               	movlw	0
 15671  002E2A  222C               	addwfc	dayOfWeek@tmp+2,f,c
 15672  002E2C  0E00               	movlw	0
 15673  002E2E  222D               	addwfc	dayOfWeek@tmp+3,f,c
 15674  002E30                     i2l255:
 15675                           
 15676                           ;RTC.c: 217: tmp += 31;
 15677  002E30  0E1F               	movlw	31
 15678  002E32  262A               	addwf	dayOfWeek@tmp,f,c
 15679  002E34  0E00               	movlw	0
 15680  002E36  222B               	addwfc	dayOfWeek@tmp+1,f,c
 15681  002E38  0E00               	movlw	0
 15682  002E3A  222C               	addwfc	dayOfWeek@tmp+2,f,c
 15683  002E3C  0E00               	movlw	0
 15684  002E3E  222D               	addwfc	dayOfWeek@tmp+3,f,c
 15685  002E40                     i2l256:
 15686                           
 15687                           ;RTC.c: 220: tmp += 30;
 15688  002E40  0E1E               	movlw	30
 15689  002E42  262A               	addwf	dayOfWeek@tmp,f,c
 15690  002E44  0E00               	movlw	0
 15691  002E46  222B               	addwfc	dayOfWeek@tmp+1,f,c
 15692  002E48  0E00               	movlw	0
 15693  002E4A  222C               	addwfc	dayOfWeek@tmp+2,f,c
 15694  002E4C  0E00               	movlw	0
 15695  002E4E  222D               	addwfc	dayOfWeek@tmp+3,f,c
 15696  002E50                     i2l257:
 15697                           
 15698                           ;RTC.c: 223: tmp += 31;
 15699  002E50  0E1F               	movlw	31
 15700  002E52  262A               	addwf	dayOfWeek@tmp,f,c
 15701  002E54  0E00               	movlw	0
 15702  002E56  222B               	addwfc	dayOfWeek@tmp+1,f,c
 15703  002E58  0E00               	movlw	0
 15704  002E5A  222C               	addwfc	dayOfWeek@tmp+2,f,c
 15705  002E5C  0E00               	movlw	0
 15706  002E5E  222D               	addwfc	dayOfWeek@tmp+3,f,c
 15707  002E60                     i2l258:
 15708                           
 15709                           ;RTC.c: 226: tmp += 28;
 15710  002E60  0E1C               	movlw	28
 15711  002E62  262A               	addwf	dayOfWeek@tmp,f,c
 15712  002E64  0E00               	movlw	0
 15713  002E66  222B               	addwfc	dayOfWeek@tmp+1,f,c
 15714  002E68  0E00               	movlw	0
 15715  002E6A  222C               	addwfc	dayOfWeek@tmp+2,f,c
 15716  002E6C  0E00               	movlw	0
 15717  002E6E  222D               	addwfc	dayOfWeek@tmp+3,f,c
 15718                           
 15719                           ;RTC.c: 228: if ((year % 4) == 0)
 15720  002E70  501F               	movf	dayOfWeek@year,w,c
 15721  002E72  0B03               	andlw	3
 15722  002E74  A4D8               	btfss	status,2,c
 15723  002E76  D008               	goto	i2l260
 15724                           
 15725                           ;RTC.c: 229: {
 15726                           ;RTC.c: 230: tmp++;
 15727  002E78  0E01               	movlw	1
 15728  002E7A  262A               	addwf	dayOfWeek@tmp,f,c
 15729  002E7C  0E00               	movlw	0
 15730  002E7E  222B               	addwfc	dayOfWeek@tmp+1,f,c
 15731  002E80  0E00               	movlw	0
 15732  002E82  222C               	addwfc	dayOfWeek@tmp+2,f,c
 15733  002E84  0E00               	movlw	0
 15734  002E86  222D               	addwfc	dayOfWeek@tmp+3,f,c
 15735  002E88                     i2l260:
 15736                           
 15737                           ;RTC.c: 234: tmp += 31;
 15738  002E88  0E1F               	movlw	31
 15739  002E8A  262A               	addwf	dayOfWeek@tmp,f,c
 15740  002E8C  0E00               	movlw	0
 15741  002E8E  222B               	addwfc	dayOfWeek@tmp+1,f,c
 15742  002E90  0E00               	movlw	0
 15743  002E92  222C               	addwfc	dayOfWeek@tmp+2,f,c
 15744  002E94  0E00               	movlw	0
 15745  002E96  222D               	addwfc	dayOfWeek@tmp+3,f,c
 15746  002E98  D025               	goto	i2l6023
 15747  002E9A                     i2l6021:
 15748  002E9A  5020               	movf	dayOfWeek@month,w,c
 15749                           
 15750                           ; Switch size 1, requested type "space"
 15751                           ; Number of cases is 12, Range of values is 1 to 12
 15752                           ; switch strategies available:
 15753                           ; Name         Instructions Cycles
 15754                           ; simple_byte           37    19 (average)
 15755                           ;	Chosen strategy is simple_byte
 15756  002E9C  0A01               	xorlw	1	; case 1
 15757  002E9E  B4D8               	btfsc	status,2,c
 15758  002EA0  D021               	goto	i2l6023
 15759  002EA2  0A03               	xorlw	3	; case 2
 15760  002EA4  B4D8               	btfsc	status,2,c
 15761  002EA6  D7F0               	goto	i2l260
 15762  002EA8  0A01               	xorlw	1	; case 3
 15763  002EAA  B4D8               	btfsc	status,2,c
 15764  002EAC  D7D9               	goto	i2l258
 15765  002EAE  0A07               	xorlw	7	; case 4
 15766  002EB0  B4D8               	btfsc	status,2,c
 15767  002EB2  D7CE               	goto	i2l257
 15768  002EB4  0A01               	xorlw	1	; case 5
 15769  002EB6  B4D8               	btfsc	status,2,c
 15770  002EB8  D7C3               	goto	i2l256
 15771  002EBA  0A03               	xorlw	3	; case 6
 15772  002EBC  B4D8               	btfsc	status,2,c
 15773  002EBE  D7B8               	goto	i2l255
 15774  002EC0  0A01               	xorlw	1	; case 7
 15775  002EC2  B4D8               	btfsc	status,2,c
 15776  002EC4  D7AD               	goto	i2l254
 15777  002EC6  0A0F               	xorlw	15	; case 8
 15778  002EC8  B4D8               	btfsc	status,2,c
 15779  002ECA  D7A2               	goto	i2l253
 15780  002ECC  0A01               	xorlw	1	; case 9
 15781  002ECE  B4D8               	btfsc	status,2,c
 15782  002ED0  D797               	goto	i2l252
 15783  002ED2  0A03               	xorlw	3	; case 10
 15784  002ED4  B4D8               	btfsc	status,2,c
 15785  002ED6  D78C               	goto	i2l251
 15786  002ED8  0A01               	xorlw	1	; case 11
 15787  002EDA  B4D8               	btfsc	status,2,c
 15788  002EDC  D781               	goto	i2l250
 15789  002EDE  0A07               	xorlw	7	; case 12
 15790  002EE0  B4D8               	btfsc	status,2,c
 15791  002EE2  D776               	goto	i2l6015
 15792  002EE4                     i2l6023:
 15793                           
 15794                           ;RTC.c: 242: tmp += day;
 15795  002EE4  5021               	movf	dayOfWeek@day,w,c
 15796  002EE6  262A               	addwf	dayOfWeek@tmp,f,c
 15797  002EE8  0E00               	movlw	0
 15798  002EEA  222B               	addwfc	dayOfWeek@tmp+1,f,c
 15799  002EEC  222C               	addwfc	dayOfWeek@tmp+2,f,c
 15800  002EEE  222D               	addwfc	dayOfWeek@tmp+3,f,c
 15801                           
 15802                           ;RTC.c: 243: tmp--;
 15803  002EF0  062A               	decf	dayOfWeek@tmp,f,c
 15804  002EF2  0E00               	movlw	0
 15805  002EF4  5A2B               	subwfb	dayOfWeek@tmp+1,f,c
 15806  002EF6  5A2C               	subwfb	dayOfWeek@tmp+2,f,c
 15807  002EF8  5A2D               	subwfb	dayOfWeek@tmp+3,f,c
 15808                           
 15809                           ;RTC.c: 246: return (uint8_t) ((tmp + 6) % 7);
 15810  002EFA  0E06               	movlw	6
 15811  002EFC  242A               	addwf	dayOfWeek@tmp,w,c
 15812  002EFE  6E14               	movwf	?___llmod,c
 15813  002F00  0E00               	movlw	0
 15814  002F02  202B               	addwfc	dayOfWeek@tmp+1,w,c
 15815  002F04  6E15               	movwf	?___llmod+1,c
 15816  002F06  0E00               	movlw	0
 15817  002F08  202C               	addwfc	dayOfWeek@tmp+2,w,c
 15818  002F0A  6E16               	movwf	?___llmod+2,c
 15819  002F0C  0E00               	movlw	0
 15820  002F0E  202D               	addwfc	dayOfWeek@tmp+3,w,c
 15821  002F10  6E17               	movwf	?___llmod+3,c
 15822  002F12  0E07               	movlw	7
 15823  002F14  6E18               	movwf	?___llmod+4,c
 15824  002F16  0E00               	movlw	0
 15825  002F18  6E19               	movwf	?___llmod+5,c
 15826  002F1A  0E00               	movlw	0
 15827  002F1C  6E1A               	movwf	?___llmod+6,c
 15828  002F1E  0E00               	movlw	0
 15829  002F20  6E1B               	movwf	?___llmod+7,c
 15830  002F22  ECA7  F022         	call	___llmod	;wreg free
 15831  002F26  5014               	movf	?___llmod,w,c
 15832  002F28  0012               	return	
 15833  002F2A                     __end_of_dayOfWeek:
 15834                           	opt stack 0
 15835                           tosu	equ	0xFFF
 15836                           tosh	equ	0xFFE
 15837                           tosl	equ	0xFFD
 15838                           pclatu	equ	0xFFB
 15839                           pclath	equ	0xFFA
 15840                           tblptru	equ	0xFF8
 15841                           tblptrh	equ	0xFF7
 15842                           tblptrl	equ	0xFF6
 15843                           tablat	equ	0xFF5
 15844                           prodh	equ	0xFF4
 15845                           prodl	equ	0xFF3
 15846                           intcon	equ	0xFF2
 15847                           intcon2	equ	0xFF1
 15848                           indf0	equ	0xFEF
 15849                           postinc0	equ	0xFEE
 15850                           fsr0h	equ	0xFEA
 15851                           fsr0l	equ	0xFE9
 15852                           wreg	equ	0xFE8
 15853                           postinc1	equ	0xFE6
 15854                           postdec1	equ	0xFE5
 15855                           fsr1h	equ	0xFE2
 15856                           fsr1l	equ	0xFE1
 15857                           indf2	equ	0xFDF
 15858                           postinc2	equ	0xFDE
 15859                           postdec2	equ	0xFDD
 15860                           plusw2	equ	0xFDB
 15861                           fsr2h	equ	0xFDA
 15862                           fsr2l	equ	0xFD9
 15863                           status	equ	0xFD8
 15864                           
 15865 ;; *************** function _daysOfMonth *****************
 15866 ;; Defined at:
 15867 ;;		line 100 in file "RTC.c"
 15868 ;; Parameters:    Size  Location     Type
 15869 ;;  month           1    7[COMRAM] unsigned char 
 15870 ;;  year            2    8[COMRAM] unsigned int 
 15871 ;; Auto vars:     Size  Location     Type
 15872 ;;		None
 15873 ;; Return value:  Size  Location     Type
 15874 ;;                  1    wreg      unsigned char 
 15875 ;; Registers used:
 15876 ;;		wreg, status,2, status,0, cstack
 15877 ;; Tracked objects:
 15878 ;;		On entry : 0/0
 15879 ;;		On exit  : 0/0
 15880 ;;		Unchanged: 0/0
 15881 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 15882 ;;      Params:         3       0       0       0       0       0       0       0       0
 15883 ;;      Locals:         0       0       0       0       0       0       0       0       0
 15884 ;;      Temps:          2       0       0       0       0       0       0       0       0
 15885 ;;      Totals:         5       0       0       0       0       0       0       0       0
 15886 ;;Total ram usage:        5 bytes
 15887 ;; Hardware stack levels used:    1
 15888 ;; Hardware stack levels required when called:    1
 15889 ;; This function calls:
 15890 ;;		___lwmod
 15891 ;; This function is called by:
 15892 ;;		_tick
 15893 ;; This function uses a non-reentrant model
 15894 ;;
 15895                           
 15896                           	psect	text56
 15897  003CB6                     __ptext56:
 15898                           	opt stack 0
 15899  003CB6                     _daysOfMonth:
 15900                           	opt stack 23
 15901                           
 15902                           ;RTC.c: 101: switch (month)
 15903                           
 15904                           ;incstack = 0
 15905                           ;incstack = 0
 15906  003CB6  D02E               	goto	i2l5769
 15907  003CB8                     i2l5745:
 15908                           
 15909                           ;RTC.c: 104: case 3:
 15910                           ;RTC.c: 105: case 5:
 15911                           ;RTC.c: 106: case 7:
 15912                           ;RTC.c: 107: case 8:
 15913                           ;RTC.c: 108: case 10:
 15914                           ;RTC.c: 109: case 12:
 15915                           ;RTC.c: 110: return 31;
 15916  003CB8  0E1F               	movlw	31
 15917  003CBA  D052               	goto	i2l209
 15918  003CBC                     i2l5749:
 15919                           
 15920                           ;RTC.c: 113: case 6:
 15921                           ;RTC.c: 114: case 9:
 15922                           ;RTC.c: 115: case 11:
 15923                           ;RTC.c: 116: return 30;
 15924  003CBC  0E1E               	movlw	30
 15925  003CBE  D050               	goto	i2l209
 15926  003CC0                     i2l5753:
 15927                           
 15928                           ;RTC.c: 119: if ((((year)%4 == 0) && (((year)%100 != 0) || ((year)%400 == 0))))
 15929  003CC0  0E03               	movlw	3
 15930  003CC2  1409               	andwf	daysOfMonth@year,w,c
 15931  003CC4  6E0B               	movwf	??_daysOfMonth& (0+255),c
 15932  003CC6  0E00               	movlw	0
 15933  003CC8  140A               	andwf	daysOfMonth@year+1,w,c
 15934  003CCA  6E0C               	movwf	(??_daysOfMonth+1)& (0+255),c
 15935  003CCC  500C               	movf	??_daysOfMonth+1,w,c
 15936  003CCE  100B               	iorwf	??_daysOfMonth,w,c
 15937  003CD0  A4D8               	btfss	status,2,c
 15938  003CD2  D01E               	goto	i2l5765
 15939  003CD4  C009  F001         	movff	daysOfMonth@year,?___lwmod
 15940  003CD8  C00A  F002         	movff	daysOfMonth@year+1,?___lwmod+1
 15941  003CDC  0E00               	movlw	0
 15942  003CDE  6E04               	movwf	?___lwmod+3,c
 15943  003CE0  0E64               	movlw	100
 15944  003CE2  6E03               	movwf	?___lwmod+2,c
 15945  003CE4  ECBA  F023         	call	___lwmod	;wreg free
 15946  003CE8  5002               	movf	?___lwmod+1,w,c
 15947  003CEA  1001               	iorwf	?___lwmod,w,c
 15948  003CEC  A4D8               	btfss	status,2,c
 15949  003CEE  D00E               	goto	i2l5759
 15950  003CF0  C009  F001         	movff	daysOfMonth@year,?___lwmod
 15951  003CF4  C00A  F002         	movff	daysOfMonth@year+1,?___lwmod+1
 15952  003CF8  0E01               	movlw	1
 15953  003CFA  6E04               	movwf	?___lwmod+3,c
 15954  003CFC  0E90               	movlw	144
 15955  003CFE  6E03               	movwf	?___lwmod+2,c
 15956  003D00  ECBA  F023         	call	___lwmod	;wreg free
 15957  003D04  5002               	movf	?___lwmod+1,w,c
 15958  003D06  1001               	iorwf	?___lwmod,w,c
 15959  003D08  A4D8               	btfss	status,2,c
 15960  003D0A  D002               	goto	i2l5765
 15961  003D0C                     i2l5759:
 15962                           
 15963                           ;RTC.c: 120: return 29;
 15964  003D0C  0E1D               	movlw	29
 15965  003D0E  D028               	goto	i2l209
 15966  003D10                     i2l5765:
 15967                           
 15968                           ;RTC.c: 121: else
 15969                           ;RTC.c: 122: return 28;
 15970  003D10  0E1C               	movlw	28
 15971  003D12  D026               	goto	i2l209
 15972  003D14                     i2l5769:
 15973  003D14  5008               	movf	daysOfMonth@month,w,c
 15974                           
 15975                           ; Switch size 1, requested type "space"
 15976                           ; Number of cases is 12, Range of values is 1 to 12
 15977                           ; switch strategies available:
 15978                           ; Name         Instructions Cycles
 15979                           ; simple_byte           37    19 (average)
 15980                           ;	Chosen strategy is simple_byte
 15981  003D16  0A01               	xorlw	1	; case 1
 15982  003D18  B4D8               	btfsc	status,2,c
 15983  003D1A  D7CE               	goto	i2l5745
 15984  003D1C  0A03               	xorlw	3	; case 2
 15985  003D1E  B4D8               	btfsc	status,2,c
 15986  003D20  D7CF               	goto	i2l5753
 15987  003D22  0A01               	xorlw	1	; case 3
 15988  003D24  B4D8               	btfsc	status,2,c
 15989  003D26  D7C8               	goto	i2l5745
 15990  003D28  0A07               	xorlw	7	; case 4
 15991  003D2A  B4D8               	btfsc	status,2,c
 15992  003D2C  D7C7               	goto	i2l5749
 15993  003D2E  0A01               	xorlw	1	; case 5
 15994  003D30  B4D8               	btfsc	status,2,c
 15995  003D32  D7C2               	goto	i2l5745
 15996  003D34  0A03               	xorlw	3	; case 6
 15997  003D36  B4D8               	btfsc	status,2,c
 15998  003D38  D7C1               	goto	i2l5749
 15999  003D3A  0A01               	xorlw	1	; case 7
 16000  003D3C  B4D8               	btfsc	status,2,c
 16001  003D3E  D7BC               	goto	i2l5745
 16002  003D40  0A0F               	xorlw	15	; case 8
 16003  003D42  B4D8               	btfsc	status,2,c
 16004  003D44  D7B9               	goto	i2l5745
 16005  003D46  0A01               	xorlw	1	; case 9
 16006  003D48  B4D8               	btfsc	status,2,c
 16007  003D4A  D7B8               	goto	i2l5749
 16008  003D4C  0A03               	xorlw	3	; case 10
 16009  003D4E  B4D8               	btfsc	status,2,c
 16010  003D50  D7B3               	goto	i2l5745
 16011  003D52  0A01               	xorlw	1	; case 11
 16012  003D54  B4D8               	btfsc	status,2,c
 16013  003D56  D7B2               	goto	i2l5749
 16014  003D58  0A07               	xorlw	7	; case 12
 16015  003D5A  B4D8               	btfsc	status,2,c
 16016  003D5C  D7AD               	goto	i2l5745
 16017                           
 16018                           ;RTC.c: 125: return 0;
 16019  003D5E  0E00               	movlw	0
 16020  003D60                     i2l209:
 16021  003D60  0012               	return	
 16022  003D62                     __end_of_daysOfMonth:
 16023                           	opt stack 0
 16024                           tosu	equ	0xFFF
 16025                           tosh	equ	0xFFE
 16026                           tosl	equ	0xFFD
 16027                           pclatu	equ	0xFFB
 16028                           pclath	equ	0xFFA
 16029                           tblptru	equ	0xFF8
 16030                           tblptrh	equ	0xFF7
 16031                           tblptrl	equ	0xFF6
 16032                           tablat	equ	0xFF5
 16033                           prodh	equ	0xFF4
 16034                           prodl	equ	0xFF3
 16035                           intcon	equ	0xFF2
 16036                           intcon2	equ	0xFF1
 16037                           indf0	equ	0xFEF
 16038                           postinc0	equ	0xFEE
 16039                           fsr0h	equ	0xFEA
 16040                           fsr0l	equ	0xFE9
 16041                           wreg	equ	0xFE8
 16042                           postinc1	equ	0xFE6
 16043                           postdec1	equ	0xFE5
 16044                           fsr1h	equ	0xFE2
 16045                           fsr1l	equ	0xFE1
 16046                           indf2	equ	0xFDF
 16047                           postinc2	equ	0xFDE
 16048                           postdec2	equ	0xFDD
 16049                           plusw2	equ	0xFDB
 16050                           fsr2h	equ	0xFDA
 16051                           fsr2l	equ	0xFD9
 16052                           status	equ	0xFD8
 16053                           
 16054 ;; *************** function _saveTime *****************
 16055 ;; Defined at:
 16056 ;;		line 60 in file "RTC.c"
 16057 ;; Parameters:    Size  Location     Type
 16058 ;;  date            9    0[COMRAM] struct sDate
 16059 ;; Auto vars:     Size  Location     Type
 16060 ;;  cnt             1   11[COMRAM] unsigned char 
 16061 ;; Return value:  Size  Location     Type
 16062 ;;		None               void
 16063 ;; Registers used:
 16064 ;;		wreg, status,2, status,0
 16065 ;; Tracked objects:
 16066 ;;		On entry : 0/0
 16067 ;;		On exit  : 0/0
 16068 ;;		Unchanged: 0/0
 16069 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 16070 ;;      Params:         9       0       0       0       0       0       0       0       0
 16071 ;;      Locals:         2       0       0       0       0       0       0       0       0
 16072 ;;      Temps:          1       0       0       0       0       0       0       0       0
 16073 ;;      Totals:        12       0       0       0       0       0       0       0       0
 16074 ;;Total ram usage:       12 bytes
 16075 ;; Hardware stack levels used:    1
 16076 ;; This function calls:
 16077 ;;		Nothing
 16078 ;; This function is called by:
 16079 ;;		_tick
 16080 ;; This function uses a non-reentrant model
 16081 ;;
 16082                           
 16083                           	psect	text57
 16084  004402                     __ptext57:
 16085                           	opt stack 0
 16086  004402                     _saveTime:
 16087                           	opt stack 24
 16088                           
 16089                           ;RTC.c: 61: WREN = 1;
 16090                           
 16091                           ;incstack = 0
 16092                           ;incstack = 0
 16093  004402  84A6               	bsf	4006,2,c	;volatile
 16094                           
 16095                           ;RTC.c: 62: uint8_t cnt;
 16096                           ;RTC.c: 64: for (cnt = 1; cnt < 7; cnt++)
 16097  004404  6E0A               	movwf	??_saveTime& (0+255),c
 16098  004406  0E01               	movlw	1
 16099  004408  6E0C               	movwf	saveTime@cnt,c
 16100  00440A  500A               	movf	??_saveTime& (0+255),w,c
 16101  00440C  D030               	goto	L26
 16102  00440E                     i2l185:
 16103                           
 16104                           ;RTC.c: 65: {
 16105                           ;RTC.c: 66: EEADR = 0 + cnt;
 16106  00440E  C00C  FFA9         	movff	saveTime@cnt,4009	;volatile
 16107                           
 16108                           ;RTC.c: 67: switch (cnt)
 16109  004412  D00F               	goto	i2l5377
 16110  004414                     i2l188:
 16111                           
 16112                           ;RTC.c: 70: EEDATA = date.minute;
 16113  004414  C002  FFA8         	movff	saveTime@date+1,4008	;volatile
 16114                           
 16115                           ;RTC.c: 71: break;
 16116  004418  D01F               	goto	i2l5379
 16117  00441A                     i2l190:
 16118                           
 16119                           ;RTC.c: 73: EEDATA = date.hour;
 16120  00441A  C003  FFA8         	movff	saveTime@date+2,4008	;volatile
 16121                           
 16122                           ;RTC.c: 74: break;
 16123  00441E  D01C               	goto	i2l5379
 16124  004420                     i2l191:
 16125                           
 16126                           ;RTC.c: 76: EEDATA = date.day;
 16127  004420  C004  FFA8         	movff	saveTime@date+3,4008	;volatile
 16128                           
 16129                           ;RTC.c: 77: break;
 16130  004424  D019               	goto	i2l5379
 16131  004426                     i2l192:
 16132                           
 16133                           ;RTC.c: 79: EEDATA = date.month;
 16134  004426  C006  FFA8         	movff	saveTime@date+5,4008	;volatile
 16135                           
 16136                           ;RTC.c: 80: break;
 16137  00442A  D016               	goto	i2l5379
 16138  00442C                     i2l194:
 16139                           
 16140                           ;RTC.c: 85: EEDATA = date.year;
 16141  00442C  C007  FFA8         	movff	saveTime@date+6,4008	;volatile
 16142                           
 16143                           ;RTC.c: 86: break;
 16144  004430  D013               	goto	i2l5379
 16145  004432                     i2l5377:
 16146  004432  500C               	movf	saveTime@cnt,w,c
 16147                           
 16148                           ; Switch size 1, requested type "space"
 16149                           ; Number of cases is 6, Range of values is 1 to 6
 16150                           ; switch strategies available:
 16151                           ; Name         Instructions Cycles
 16152                           ; simple_byte           19    10 (average)
 16153                           ;	Chosen strategy is simple_byte
 16154  004434  0A01               	xorlw	1	; case 1
 16155  004436  B4D8               	btfsc	status,2,c
 16156  004438  D7ED               	goto	i2l188
 16157  00443A  0A03               	xorlw	3	; case 2
 16158  00443C  B4D8               	btfsc	status,2,c
 16159  00443E  D7ED               	goto	i2l190
 16160  004440  0A01               	xorlw	1	; case 3
 16161  004442  B4D8               	btfsc	status,2,c
 16162  004444  D7ED               	goto	i2l191
 16163  004446  0A07               	xorlw	7	; case 4
 16164  004448  B4D8               	btfsc	status,2,c
 16165  00444A  D7ED               	goto	i2l192
 16166  00444C  0A01               	xorlw	1	; case 5
 16167  00444E  B4D8               	btfsc	status,2,c
 16168  004450  D7ED               	goto	i2l194
 16169  004452  0A03               	xorlw	3	; case 6
 16170  004454  B4D8               	btfsc	status,2,c
 16171  004456  D7EA               	goto	i2l194
 16172  004458                     i2l5379:
 16173                           
 16174                           ;RTC.c: 88: EECON2 = 0x55;
 16175  004458  0E55               	movlw	85
 16176  00445A  6EA7               	movwf	4007,c	;volatile
 16177                           
 16178                           ;RTC.c: 89: EECON2 = 0xAA;
 16179  00445C  0EAA               	movlw	170
 16180  00445E  6EA7               	movwf	4007,c	;volatile
 16181                           
 16182                           ;RTC.c: 90: WR = 1;
 16183  004460  82A6               	bsf	4006,1,c	;volatile
 16184                           
 16185                           ;RTC.c: 91: while (WR)
 16186  004462  D001               	goto	i2l195
 16187  004464                     i2l196:
 16188                           
 16189                           ;RTC.c: 92: {
 16190                           ;RTC.c: 93: LATC2 = 1;
 16191  004464  848B               	bsf	3979,2,c	;volatile
 16192  004466                     i2l195:
 16193  004466  B2A6               	btfsc	4006,1,c	;volatile
 16194  004468  D7FD               	goto	i2l196
 16195                           
 16196                           ;RTC.c: 94: }
 16197                           ;RTC.c: 95: LATC2 = 0;
 16198  00446A  948B               	bcf	3979,2,c	;volatile
 16199  00446C  2A0C               	incf	saveTime@cnt,f,c
 16200  00446E                     L26:
 16201  00446E  0E06               	movlw	6
 16202  004470  640C               	cpfsgt	saveTime@cnt,c
 16203  004472  D7CD               	goto	i2l185
 16204  004474  0012               	return	
 16205  004476                     __end_of_saveTime:
 16206                           	opt stack 0
 16207                           tosu	equ	0xFFF
 16208                           tosh	equ	0xFFE
 16209                           tosl	equ	0xFFD
 16210                           pclatu	equ	0xFFB
 16211                           pclath	equ	0xFFA
 16212                           tblptru	equ	0xFF8
 16213                           tblptrh	equ	0xFF7
 16214                           tblptrl	equ	0xFF6
 16215                           tablat	equ	0xFF5
 16216                           prodh	equ	0xFF4
 16217                           prodl	equ	0xFF3
 16218                           intcon	equ	0xFF2
 16219                           intcon2	equ	0xFF1
 16220                           indf0	equ	0xFEF
 16221                           postinc0	equ	0xFEE
 16222                           fsr0h	equ	0xFEA
 16223                           fsr0l	equ	0xFE9
 16224                           wreg	equ	0xFE8
 16225                           postinc1	equ	0xFE6
 16226                           postdec1	equ	0xFE5
 16227                           fsr1h	equ	0xFE2
 16228                           fsr1l	equ	0xFE1
 16229                           indf2	equ	0xFDF
 16230                           postinc2	equ	0xFDE
 16231                           postdec2	equ	0xFDD
 16232                           plusw2	equ	0xFDB
 16233                           fsr2h	equ	0xFDA
 16234                           fsr2l	equ	0xFD9
 16235                           status	equ	0xFD8
 16236                           tosu	equ	0xFFF
 16237                           tosh	equ	0xFFE
 16238                           tosl	equ	0xFFD
 16239                           pclatu	equ	0xFFB
 16240                           pclath	equ	0xFFA
 16241                           tblptru	equ	0xFF8
 16242                           tblptrh	equ	0xFF7
 16243                           tblptrl	equ	0xFF6
 16244                           tablat	equ	0xFF5
 16245                           prodh	equ	0xFF4
 16246                           prodl	equ	0xFF3
 16247                           intcon	equ	0xFF2
 16248                           intcon2	equ	0xFF1
 16249                           indf0	equ	0xFEF
 16250                           postinc0	equ	0xFEE
 16251                           fsr0h	equ	0xFEA
 16252                           fsr0l	equ	0xFE9
 16253                           wreg	equ	0xFE8
 16254                           postinc1	equ	0xFE6
 16255                           postdec1	equ	0xFE5
 16256                           fsr1h	equ	0xFE2
 16257                           fsr1l	equ	0xFE1
 16258                           indf2	equ	0xFDF
 16259                           postinc2	equ	0xFDE
 16260                           postdec2	equ	0xFDD
 16261                           plusw2	equ	0xFDB
 16262                           fsr2h	equ	0xFDA
 16263                           fsr2l	equ	0xFD9
 16264                           status	equ	0xFD8
 16265                           
 16266                           	psect	text58
 16267  000000                     __ptext58:
 16268                           	opt stack 0
 16269                           tosu	equ	0xFFF
 16270                           tosh	equ	0xFFE
 16271                           tosl	equ	0xFFD
 16272                           pclatu	equ	0xFFB
 16273                           pclath	equ	0xFFA
 16274                           tblptru	equ	0xFF8
 16275                           tblptrh	equ	0xFF7
 16276                           tblptrl	equ	0xFF6
 16277                           tablat	equ	0xFF5
 16278                           prodh	equ	0xFF4
 16279                           prodl	equ	0xFF3
 16280                           intcon	equ	0xFF2
 16281                           intcon2	equ	0xFF1
 16282                           indf0	equ	0xFEF
 16283                           postinc0	equ	0xFEE
 16284                           fsr0h	equ	0xFEA
 16285                           fsr0l	equ	0xFE9
 16286                           wreg	equ	0xFE8
 16287                           postinc1	equ	0xFE6
 16288                           postdec1	equ	0xFE5
 16289                           fsr1h	equ	0xFE2
 16290                           fsr1l	equ	0xFE1
 16291                           indf2	equ	0xFDF
 16292                           postinc2	equ	0xFDE
 16293                           postdec2	equ	0xFDD
 16294                           plusw2	equ	0xFDB
 16295                           fsr2h	equ	0xFDA
 16296                           fsr2l	equ	0xFD9
 16297                           status	equ	0xFD8
 16298                           
 16299                           	psect	rparam
 16300  0000                     tosu	equ	0xFFF
 16301                           tosh	equ	0xFFE
 16302                           tosl	equ	0xFFD
 16303                           pclatu	equ	0xFFB
 16304                           pclath	equ	0xFFA
 16305                           tblptru	equ	0xFF8
 16306                           tblptrh	equ	0xFF7
 16307                           tblptrl	equ	0xFF6
 16308                           tablat	equ	0xFF5
 16309                           prodh	equ	0xFF4
 16310                           prodl	equ	0xFF3
 16311                           intcon	equ	0xFF2
 16312                           intcon2	equ	0xFF1
 16313                           indf0	equ	0xFEF
 16314                           postinc0	equ	0xFEE
 16315                           fsr0h	equ	0xFEA
 16316                           fsr0l	equ	0xFE9
 16317                           wreg	equ	0xFE8
 16318                           postinc1	equ	0xFE6
 16319                           postdec1	equ	0xFE5
 16320                           fsr1h	equ	0xFE2
 16321                           fsr1l	equ	0xFE1
 16322                           indf2	equ	0xFDF
 16323                           postinc2	equ	0xFDE
 16324                           postdec2	equ	0xFDD
 16325                           plusw2	equ	0xFDB
 16326                           fsr2h	equ	0xFDA
 16327                           fsr2l	equ	0xFD9
 16328                           status	equ	0xFD8


Data Sizes:
    Strings     97
    Constant    229
    Data        9
    BSS         107
    Persistent  5
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     95      95
    BANK0           160     70     139
    BANK1           256     34      86
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    NULL.printFn	PTR FTN(unsigned char ,)PTR void  size(2) Largest target is 0

    ?___ftsub	float  size(2) Largest target is 0

    ?___ftadd	float  size(2) Largest target is 28
		 -> dow(CODE[28]), 

    ?___ftpack	float  size(2) Largest target is 28
		 -> dow(CODE[28]), 

    ?___lldiv	unsigned long  size(2) Largest target is 0

    ?___asftsub	float  size(2) Largest target is 28
		 -> dow(CODE[28]), 

    ?___lltoft	float  size(2) Largest target is 0

    ?__tdiv_to_l_	unsigned long  size(2) Largest target is 0

    ?__div_to_l_	unsigned long  size(2) Largest target is 0

    ?___fttol	long  size(2) Largest target is 28
		 -> dow(CODE[28]), 

    ?___asftadd	float  size(2) Largest target is 28
		 -> dow(CODE[28]), 

    ?___asftmul	float  size(2) Largest target is 0

    ?___ftneg	float  size(2) Largest target is 28
		 -> dow(CODE[28]), 

    ?_scale	float  size(2) Largest target is 0

    ?_fround	float  size(2) Largest target is 0

    ?___ftmul	float  size(2) Largest target is 0

    ?_printRTC	PTR void  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    ?___llmod	unsigned long  size(2) Largest target is 28
		 -> dow(CODE[28]), 

    ?___awdiv	int  size(2) Largest target is 0

    ?___awmod	int  size(2) Largest target is 28
		 -> dow(CODE[28]), 

    ?___lwmod	unsigned int  size(2) Largest target is 28
		 -> dow(CODE[28]), 

    ?_loadTime	struct sDate size(2) Largest target is 0

    ?___wmul	unsigned int  size(2) Largest target is 28
		 -> dow(CODE[28]), 

    ?_hibit	unsigned long  size(2) Largest target is 4
		 -> hibit@log2Val(COMRAM[4]), 

    ?_log2	unsigned long  size(2) Largest target is 0

    __asftsub@f1p	PTR float  size(2) Largest target is 3
		 -> sprintf@fval(BANK0[3]), 

    __asftmul@f1p	PTR float  size(2) Largest target is 3
		 -> sprintf@integ(BANK0[3]), 

    __asftadd@f1p	PTR float  size(2) Largest target is 3
		 -> sprintf@fval(BANK0[3]), 

    sprintf@_val._cp	PTR const unsigned char  size(2) Largest target is 28
		 -> STR_18(CODE[7]), sprintf@c(BANK0[1]), dow(CODE[28]), 

    sprintf@f	PTR const unsigned char  size(2) Largest target is 17
		 -> STR_17(CODE[5]), STR_16(CODE[10]), STR_15(CODE[10]), STR_14(CODE[12]), 
		 -> STR_13(CODE[12]), STR_12(CODE[15]), STR_11(CODE[15]), STR_10(CODE[15]), 
		 -> STR_9(CODE[14]), STR_8(CODE[14]), STR_7(CODE[17]), STR_6(CODE[16]), 
		 -> STR_5(CODE[17]), STR_4(CODE[15]), STR_3(CODE[13]), STR_2(CODE[5]), 
		 -> STR_1(CODE[5]), 

    sprintf@sp	PTR unsigned char  size(2) Largest target is 12
		 -> printRTC@str(BANK0[12]), writeFloat@str(COMRAM[9]), writeLong@str(COMRAM[9]), 

    ?_sprintf	int  size(2) Largest target is 28
		 -> dow(CODE[28]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(COMRAM[2]), 

    S648$_cp	PTR const unsigned char  size(2) Largest target is 28
		 -> STR_18(CODE[7]), sprintf@c(BANK0[1]), dow(CODE[28]), 

    _val._str._cp	PTR const unsigned char  size(2) Largest target is 28
		 -> STR_18(CODE[7]), sprintf@c(BANK0[1]), dow(CODE[28]), 

    sp_S159$3	PTR void  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    menu.printFn	PTR FTN(unsigned char ,)PTR void  size(2) Largest target is 3
		 -> printRTC(), 

    menu	PTR struct sMenu size(2) Largest target is 5
		 -> tempMenu(BANK1[5]), NULL(NULL[0]), rtcMenu(BANK1[5]), 

    tempMenu.printFn	PTR FTN(unsigned char ,)PTR void  size(2) Largest target is 3
		 -> printRTC(), 

    sp__printRTC	PTR void  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    S159sMenu$printFn	PTR FTN(unsigned char ,)PTR void  size(2) Largest target is 3
		 -> printRTC(), 

    rtcMenu.printFn	PTR FTN(unsigned char ,)PTR void  size(2) Largest target is 3
		 -> printRTC(), 

    writeString@string	PTR unsigned char  size(2) Largest target is 12
		 -> printRTC@str(BANK0[12]), writeFloat@str(COMRAM[9]), writeLong@str(COMRAM[9]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _isr in COMRAM

    _isr->_printRTC
    _buttons->i2_update
    i2_update->i2_writeDigit
    i2_writeDigit->i2_log2
    i2_spi->i2_rotate
    _advState->___awmod
    _printRTC->_sprintf
    _writeString->_writeChar
    _writeChar->_getFontChar
    i2_log2->_hibit
    _getFontChar->___wmul
    _sprintf->___asftadd
    ___lltoft->___ftpack
    ___fttol->___wmul
    ___asftsub->___ftsub
    ___ftsub->___ftadd
    ___asftmul->___ftmul
    ___asftadd->_fround
    ___ftadd->___ftpack
    _scale->___ftmul
    _fround->___ftmul
    ___awdiv->___awmod
    ___ftmul->___fttol
    ___wmul->___awdiv
    ___llmod->___lldiv
    _tick->_checkDST
    _checkDST->_dayOfWeek
    _tick->_checkDST
    _dayOfWeek->___llmod
    _dayOfWeek->___wmul
    ___llmod->___lldiv
    _daysOfMonth->___lwmod
    _dayOfWeek->___llmod
    _dayOfWeek->___wmul
    _checkDST->_dayOfWeek
    _daysOfMonth->___lwmod

Critical Paths under _main in BANK0

    None.

Critical Paths under _isr in BANK0

    _isr->_printRTC
    _printRTC->_sprintf

Critical Paths under _main in BANK1

    _main->_update
    _setup->_initRTC
    _initRTC->_loadTime
    _startDisp->_setBrightness
    _startDisp->_setTest
    _update->_writeDigit
    _writeDigit->_spi
    _spi->_rotate

Critical Paths under _isr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _isr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _isr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _isr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _isr in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _isr in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _isr in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 9     4      5    1642
                                             25 BANK1      9     4      5
                             _update
                              _setup
 ---------------------------------------------------------------------------------
 (1) _setup                                                4     4      0     421
                                             13 BANK1      4     4      0
                          _startDisp
                            _initRTC
                       _setupButtons
 ---------------------------------------------------------------------------------
 (2) _setupButtons                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _initRTC                                              1     1      0     359
                                             12 BANK1      1     1      0
                           _loadTime
 ---------------------------------------------------------------------------------
 (3) _loadTime                                            12    12      0     359
                                              0 BANK1     12    12      0
 ---------------------------------------------------------------------------------
 (2) _startDisp                                            1     1      0      62
                                              1 BANK1      1     1      0
                      _setBrightness
                            _setTest
 ---------------------------------------------------------------------------------
 (3) _setTest                                              1     0      1      31
                                              0 BANK1      1     0      1
 ---------------------------------------------------------------------------------
 (3) _setBrightness                                        1     0      1      31
                                              0 BANK1      1     0      1
 ---------------------------------------------------------------------------------
 (1) _update                                               6     6      0    1136
                                             19 BANK1      6     6      0
                         _writeDigit
                                _spi
 ---------------------------------------------------------------------------------
 (2) _writeDigit                                           5     3      2     718
                                             14 BANK1      5     3      2
                                _spi
                               _log2
                             _rotate
 ---------------------------------------------------------------------------------
 (3) _rotate                                               6     5      1     198
                                              0 BANK1      6     5      1
 ---------------------------------------------------------------------------------
 (3) _log2                                                 8     4      4      68
                                              0 BANK1      8     4      4
 ---------------------------------------------------------------------------------
 (2) _spi                                                  8     6      2     226
                                              6 BANK1      8     6      2
                               _wait
                             _rotate (ARG)
 ---------------------------------------------------------------------------------
 (3) _wait                                                 4     0      4      31
                                              0 BANK1      4     0      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _isr                                                 15    15      0   32107
                                             55 BANK0     15    15      0
                               _tick
                           _printRTC
                            _buttons
 ---------------------------------------------------------------------------------
 (6) _buttons                                              8     8      0    2885
                                             30 COMRAM     8     8      0
                           _advState
                            _advMenu
                           i2_update
 ---------------------------------------------------------------------------------
 (7) i2_update                                             6     6      0    2589
                                             24 COMRAM     6     6      0
                              i2_spi
                       i2_writeDigit
 ---------------------------------------------------------------------------------
 (8) i2_writeDigit                                         5     3      2    1630
                                             19 COMRAM     5     3      2
                              i2_spi
                           i2_rotate
                             i2_log2
 ---------------------------------------------------------------------------------
 (9) i2_rotate                                             6     5      1     446
                                              0 COMRAM     6     5      1
 ---------------------------------------------------------------------------------
 (9) i2_spi                                                8     6      2     517
                                              6 COMRAM     8     6      2
                           i2_rotate (ARG)
                             i2_wait
 ---------------------------------------------------------------------------------
 (10) i2_wait                                              4     0      4      73
                                              0 COMRAM     4     0      4
 ---------------------------------------------------------------------------------
 (7) _advMenu                                              2     2      0       0
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (7) _advState                                             2     2      0     296
                                              9 COMRAM     2     2      0
                            ___awmod
 ---------------------------------------------------------------------------------
 (6) _printRTC                                            22    21      1   19892
                                             94 COMRAM     1     0      1
                                             38 BANK0     17    17      0
                          _countBits
                            _sprintf
                        _writeString
                            ___lwmod
 ---------------------------------------------------------------------------------
 (7) _writeString                                          9     6      3    1221
                                             36 COMRAM     9     6      3
                        _getFontChar
                          _writeChar
                          _countBits
                              _hibit
                             ___wmul
                             i2_log2
 ---------------------------------------------------------------------------------
 (8) _hibit                                               11     7      4      46
                                              0 COMRAM    11     7      4
 ---------------------------------------------------------------------------------
 (8) _countBits                                            5     1      4      90
                                              0 COMRAM     5     1      4
 ---------------------------------------------------------------------------------
 (8) _writeChar                                            3     1      2     305
                                             33 COMRAM     3     1      2
                        _getFontChar
                             ___wmul (ARG)
                             i2_log2
 ---------------------------------------------------------------------------------
 (9) i2_log2                                               8     4      4     150
                                             11 COMRAM     8     4      4
                              _hibit (ARG)
 ---------------------------------------------------------------------------------
 (9) _getFontChar                                          3     2      1      66
                                             30 COMRAM     3     2      1
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (7) _sprintf                                             54    42     12   16639
                                             82 COMRAM    12     0     12
                                              0 BANK0     38    38      0
                             _fround
                              _scale
                            _isdigit
                        __tdiv_to_l_
                         __div_to_l_
                          ___asftadd
                          ___asftmul
                            ___ftmul
                          ___asftsub
                            ___awdiv
                             ___ftge
                            ___ftneg
                            ___fttol
                            ___lldiv
                            ___llmod
                           ___lltoft
                            ___lwmod
                             ___wmul
 ---------------------------------------------------------------------------------
 (8) ___lltoft                                             9     5      4     278
                                              8 COMRAM     9     5      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (8) ___lldiv                                             14     6      8     162
                                              0 COMRAM    19    11      8
 ---------------------------------------------------------------------------------
 (8) ___fttol                                             15    11      4     252
                                             30 COMRAM    15    11      4
                           ___ftpack (ARG)
                            ___awdiv (ARG)
                            ___awmod (ARG)
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (8) ___ftneg                                              3     0      3      45
                                              0 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (8) ___ftge                                               9     3      6     136
                                              0 COMRAM     9     3      6
 ---------------------------------------------------------------------------------
 (8) ___asftsub                                            5     0      5    1160
                                             28 COMRAM     5     0      5
                            ___ftsub
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (9) ___ftsub                                              6     0      6    1094
                                             22 COMRAM     6     0      6
                            ___ftadd
 ---------------------------------------------------------------------------------
 (8) ___asftmul                                            5     0      5     601
                                             62 COMRAM     5     0      5
                            ___ftmul
 ---------------------------------------------------------------------------------
 (8) ___asftadd                                            5     0      5    1115
                                             77 COMRAM     5     0      5
                             _fround (ARG)
                            ___ftadd
 ---------------------------------------------------------------------------------
 (10) ___ftadd                                            14     8      6    1049
                                              8 COMRAM    14     8      6
                           ___ftpack
 ---------------------------------------------------------------------------------
 (9) ___ftpack                                             8     3      5     209
                                              0 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (8) __div_to_l_                                          13     7      6     446
                                              0 COMRAM    13     7      6
 ---------------------------------------------------------------------------------
 (8) __tdiv_to_l_                                         17    11      6     303
                                              0 COMRAM    17    11      6
 ---------------------------------------------------------------------------------
 (8) _isdigit                                              3     2      1      68
                                              0 COMRAM     3     2      1
 ---------------------------------------------------------------------------------
 (8) _scale                                               15    12      3    1779
                                             62 COMRAM    12     9      3
                            ___ftmul
                            ___awdiv
                            ___awmod
                            ___fttol (ARG)
                             ___wmul
 ---------------------------------------------------------------------------------
 (8) _fround                                              18    15      3    1581
                                             62 COMRAM    15    12      3
                            ___ftmul
                            ___awdiv
                            ___awmod
                             ___wmul
 ---------------------------------------------------------------------------------
 (8) ___awmod                                              7     3      4     296
                                              0 COMRAM     9     5      4
 ---------------------------------------------------------------------------------
 (8) ___awdiv                                              9     5      4     300
                                              9 COMRAM    13     9      4
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (8) ___ftmul                                             17    11      6     535
                                             45 COMRAM    17    11      6
                           ___ftpack
                            ___awdiv (ARG)
                            ___awmod (ARG)
                            ___fttol (ARG)
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (8) ___wmul                                               6     2      4     159
                                             22 COMRAM     8     4      4
                            ___awdiv (ARG)
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (7) ___lwmod                                              6     2      4     159
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (8) ___llmod                                             10     2      8     159
                                             19 COMRAM    11     3      8
                            ___lldiv (ARG)
 ---------------------------------------------------------------------------------
 (6) _tick                                                 2     1      1    9330
                                             54 COMRAM     2     1      1
                           _saveTime
                        _daysOfMonth
                           _checkDST
 ---------------------------------------------------------------------------------
 (7) _checkDST                                             8     8      0    4020
                                             45 COMRAM     9     9      0
                          _dayOfWeek
                               _tick
 ---------------------------------------------------------------------------------
 (6) _tick                                                 2     1      1    9330
                                             54 COMRAM     2     1      1
                           _saveTime
                        _daysOfMonth
                           _checkDST
 ---------------------------------------------------------------------------------
 (8) _dayOfWeek                                           11     8      3    1976
                                             30 COMRAM    15    12      3
                            ___awdiv
                            ___awmod
                            ___llmod
                             ___wmul
 ---------------------------------------------------------------------------------
 (8) ___llmod                                             10     2      8     159
                                             19 COMRAM    11     3      8
                            ___lldiv (ARG)
 ---------------------------------------------------------------------------------
 (7) _daysOfMonth                                          5     2      3     406
                                              7 COMRAM     5     2      3
                            ___lwmod
 ---------------------------------------------------------------------------------
 (7) ___lwmod                                              6     2      4     159
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (7) _saveTime                                            11     2      9     228
                                              0 COMRAM    12     3      9
 ---------------------------------------------------------------------------------
 (8) _dayOfWeek                                           11     8      3    1976
                                             30 COMRAM    15    12      3
                            ___awdiv
                            ___awmod
                            ___llmod
                             ___wmul
 ---------------------------------------------------------------------------------
 (7) _checkDST                                             8     8      0    4020
                                             45 COMRAM     9     9      0
                          _dayOfWeek
                               _tick
 ---------------------------------------------------------------------------------
 (7) _daysOfMonth                                          5     2      3     406
                                              7 COMRAM     5     2      3
                            ___lwmod
 ---------------------------------------------------------------------------------
 (7) _saveTime                                            11     2      9     228
                                              0 COMRAM    12     3      9
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 10
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _update
     _writeDigit
       _spi
         _wait
         _rotate (ARG)
       _log2
       _rotate
     _spi
       _wait
       _rotate (ARG)
   _setup
     _startDisp
       _setBrightness
       _setTest
     _initRTC
       _loadTime
     _setupButtons

 _isr (ROOT)
   _tick
     _saveTime
     _daysOfMonth
       ___lwmod
     _checkDST
       _dayOfWeek
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___llmod
           ___lldiv (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
   _printRTC
     _countBits
     _sprintf
       _fround
         ___ftmul
           ___ftpack
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___fttol (ARG)
             ___ftpack (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       _scale
         ___ftmul
           ___ftpack
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___fttol (ARG)
             ___ftpack (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___fttol (ARG)
           ___ftpack (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       _isdigit
       __tdiv_to_l_
       __div_to_l_
       ___asftadd
         _fround (ARG)
           ___ftmul
             ___ftpack
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___fttol (ARG)
               ___ftpack (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftadd (ARG)
           ___ftpack
       ___asftmul
         ___ftmul
           ___ftpack
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___fttol (ARG)
             ___ftpack (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftmul
         ___ftpack
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___fttol (ARG)
           ___ftpack (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___asftsub
         ___ftsub
           ___ftadd
             ___ftpack
         ___lltoft (ARG)
           ___ftpack
       ___awdiv
         ___awmod (ARG)
       ___ftge
       ___ftneg
       ___fttol
         ___ftpack (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___lldiv
       ___llmod
         ___lldiv (ARG)
       ___lltoft
         ___ftpack
       ___lwmod
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     _writeString
       _getFontChar
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       _writeChar
         _getFontChar
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         i2_log2 (ARG)
           _hibit (ARG)
       _countBits
       _hibit
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       i2_log2
         _hibit (ARG)
     ___lwmod
   _buttons
     _advState
       ___awmod
     _advMenu
     i2_update
       i2_spi
         i2_rotate (ARG)
         i2_wait (ARG)
       i2_writeDigit
         i2_spi
           i2_rotate (ARG)
           i2_wait (ARG)
         i2_rotate
         i2_log2
           _hibit (ARG)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0       0      21        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100     22      56       7       33.6%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     46      8B       5       86.9%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     5F      5F       1      100.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0      12       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     140      20        0.0%
DATA                 0      0     152       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.20 build 52243 
Symbol Table                                                                                   Sun Mar 30 20:49:59 2014

           ___asftadd@f2 0050            ___asftadd@f1p 004E                       l82 393E  
                     l58 1B30                       l88 420C                       _RD 007D30  
                     _WR 007D31             ___awdiv@sign 0014      ___wmul@multiplicand 0019  
           ___asftmul@f2 0041             ___asftsub@f2 001F             ___ftadd@exp1 0016  
           ___ftadd@exp2 0015              __CFG_LVP$ON 000000             ___ftadd@sign 0014  
                    l180 3ED4                      l172 3EB4                      l175 3EBC  
                    l440 451A                      l177 3EC2                      l178 3EC8  
                    l179 3ECE                      _GIE 007F97                      _dow 7F81  
                    _isr 0008                      _spi 3874             ___awmod@sign 0009  
                    prod 000FF3                      tosl 000FFD                      wreg 000FE8  
           __CFG_FOSC$HS 000000            ___asftmul@f1p 003F              _sprintf$663 0069  
          ___asftsub@f1p 001D             __CFG_WDT$OFF 000000                     l7221 16F8  
                   l7213 1640                     l7223 171C                     l7215 168C  
                   l7217 16B0                     l7219 16D4                     l7227 1746  
                   l7333 495A                     l7229 1AE4                     l7351 4060  
                   l7337 4500                     ?_isr 0001                     l7383 3F00  
                   l7385 3F2A                     l7379 3EE2                     l9491 1AB6  
                   l9493 1AC2                     l8685 43E6                     ?_spi 012C  
                   l9495 1ACE                     l9487 17A4                     l8679 43A8  
                   l9497 1ADA                     l9489 1AAA                     STR_1 7FF9  
                   STR_2 7FF4                     STR_3 7FDB                     STR_4 7FBE  
                   STR_5 7F9D                     STR_6 7FAE                     STR_7 7F9D  
                   STR_8 7FCD                     STR_9 7FCD                     _LATA 000F89  
                   _LATB 000F8A                     _LATC 000F8B            __CFG_DEBUG$ON 000000  
                   _IPEN 007E87                     _PEIE 007F96                     u5704 1760  
                   u5705 1758                     u5714 1AFE                     i2l43 2D48  
                   u5715 1AF6                     i2l82 3E86                     i2l58 2464  
                   u5834 4030                     u5690 1738                     u5835 402A  
                   u5764 38DA                     u5844 4048                     u5684 1656  
                   u5765 38D2                     u5845 4042                     u5685 1650  
                   u5775 38EC                     i2l88 4728                     u5776 38F4  
                   u5696 173A                     _RCON 000FD0                     u5795 4A26  
                   u5796 4A2C                     _TMR0 000FD6                     _TMR1 000FCE  
                   _WREN 007D32    __end_of_setBrightness 4A16                     _date 00C6  
                   _log2 44E4                     _main 438A             ___ftpack@arg 0001  
                   _menu 00D7             ___ftpack@exp 0004                     _tick 3964  
                   _wait 495A                     fsr0h 000FEA                     fsr1h 000FE2  
                   indf0 000FEF                     fsr0l 000FE9                     fsr2h 000FDA  
                   fsr1l 000FE1                     indf2 000FDF                     fsr2l 000FD9  
                   pclat 000FFA                     prodh 000FF4                     prodl 000FF3  
                   start 0018             _sprintf$1313 0066            __CFG_MCLRE$ON 000000  
           ___ftmul@cntr 003D           writeString@cnt 002C             ___ftmul@sign 003E  
           ___fttol@exp1 002D             ___fttol@lval 0029                    ??_isr 0097  
                  ??_spi 012E            __CFG_PLLDIV$4 000000                    ?_log2 0126  
                  ?_main 013F          __end_of___awdiv 4188                    _EEADR 000FA9  
        __end_of___ftadd 30F6                    STR_10 7F9F                    STR_11 7FAF  
                  STR_12 7F9F                    STR_13 7FCF                    STR_14 7FCF  
                  STR_15 7FD1                    STR_16 7FD1                    ?_tick 0037  
                  STR_17 7FEF                    STR_18 7FE8          __end_of___awmod 4310  
                  ?_wait 0126          __end_of___ftneg 49D2          __end_of___lldiv 4294  
        __end_of___ftmul 3780                    _T0CON 000FD5          ___awdiv@divisor 000C  
                  _T1CON 000FCD          __end_of___llmod 45B8          __end_of___ftsub 495A  
        __end_of___fttol 3B28                    _LATA1 007C49                    _LATA3 007C4B  
                  _LATC0 007C58                    _LATA4 007C4C                    _LATC1 007C59  
                  _LATA5 007C4D                    _LATC2 007C5A          __end_of___lwmod 47BA  
                  i2l113 32A0                    i2l303 1FBA                    i2l209 3D60  
                  i2l250 2DE0                    i2l251 2DF0                    i2l260 2E88  
                  i2l252 2E00                    i2l253 2E10                    i2l229 354C  
                  i2l245 3A46                    i2l190 441A                    i2l254 2E20  
                  i2l270 1B5A                    i2l191 4420                    i2l255 2E30  
                  i2l192 4426                    i2l256 2E40                    i2l440 474C  
                  i2l424 45DA                    i2l185 440E                    i2l257 2E50  
                  i2l194 442C                    i2l258 2E60                    i2l418 499C  
                  i2l195 4466                    i2l196 4464                    i2l188 4414  
                  i2l540 33EC                    i2l622 0B94                    i2l606 0270  
                  i2l376 1618                    i2l536 3376                    i2l537 3372  
                  i2l538 33EA                    i2l539 33E8                    i2l661 0A08  
                  i2l567 28B4                    i2l970 3872                    i2l972 37DE  
        ___awdiv@counter 0013                    i2l979 3862          __end_of_advMenu 3FD6  
                  _PORTB 000F81            __CFG_USBDIV$2 000000                    _TRISA 000F92  
                  _TRISB 000F93                    _TRISC 000F94            __CFG_PWRT$OFF 000000  
            _writeString 30F6                    i2_spi 3E04             ___lltoft@exp 0011  
                  _nRBPU 007F8F          __end_of_initRTC 438A                    _hibit 45B8  
        __end_of_dpowers 7F0B                    _pow10 7F0B                    _scale 2466  
        __end_of_isdigit 49F6          __end_of_buttons 161A            ___ftpack@sign 0005  
   __end_ofi2_writeDigit 472A                    _setup 3B28          __end_of_setTest 4A34  
                  pclath 000FFA                    tablat 000FF5                    plusw2 000FDB  
                  status 000FD8          __end_of_sprintf 0F8E         __end_ofi2_update 2466  
       __end_ofi2_rotate 46DC          __initialization 47BA          writeString@bits 002B  
           __end_of_log2 454E             __end_of_main 4402             __end_of_tick 3A48  
           __end_of_wait 4984     __size_of_daysOfMonth 00AC                   ??_log2 012A  
                 ??_main 0144            ___fttol@sign1 0028                   ??_tick 0038  
                 ??_wait 012A            __activetblptr 000002     __size_of_getFontChar 0214  
   __size_of__tdiv_to_l_ 0122                   ?i2_spi 0007                   ?_hibit 0001  
       ___llmod@dividend 0014                   ?_scale 003F                   _EEDATA 000FA8  
                 _EECON1 000FA6                   _EECON2 000FA7              loadTime@cnt 0128  
       ___awdiv@dividend 000A                   ?_setup 0001         __end_of___ftpack 3CB6  
       __end_of___lltoft 4680                   i2l1011 3CB4                   i2l1112 377E  
                 i2l1106 40F6                   i2l1122 49C4                   i2l1052 2FBC  
                 i2l1132 3B26                   i2l1063 3060                   i2l1072 307C  
                 i2l1048 2F92                   i2l1049 30F4                   i2l1091 360C  
                 i2l1255 47B0                   i2l1088 366E                   i2l1176 4282  
                 i2l1097 365E                   i2l1186 45A6                   i2l6003 2B72  
                 i2l6021 2E9A                   i2l6023 2EE4                   i2l6015 2DD0  
                 i2l6111 3AD8                   i2l5311 498C                   i2l6041 36D4  
                 i2l6121 3B00                   i2l6009 2B76                   i2l5401 3F9A  
                 i2l6035 369C                   i2l6107 3AC8                   i2l6213 25B0  
                 i2l6125 3B16                   i2l6117 3AF0                   i2l6055 370A  
                 i2l6231 27BE                   i2l6223 267A                   i2l6119 3AFC  
                 i2l5327 45CA                   i2l6065 3736                   i2l5601 3C1C  
                 i2l6313 3140                   i2l6401 11D8                   i2l6171 3528  
                 i2l6163 34E0                   i2l6059 371A                   i2l6219 266C  
                 i2l5523 3626                   i2l5507 35E4                   i2l5611 3C78  
                 i2l5603 3C26                   i2l6069 3746                   i2l6237 2886  
                 i2l5533 364E                   i2l5613 3C82                   i2l5605 3C44  
                 i2l6333 3256                   i2l6261 202E                   i2l6175 353A  
                 i2l6343 3966                   i2l5711 4786                   i2l5535 365A  
                 i2l5527 3636                   i2l5543 378C                   i2l5703 4274  
                 i2l6335 3298                   i2l6263 2046                   i2l6431 1496  
                 i2l5377 4432                   i2l6361 39D2                   i2l6353 39B0  
                 i2l5713 478E                   i2l5609 3C5A                   i2l6089 3A74  
                 i2l6329 31FE                   i2l6337 329A                   i2l6265 205E  
                 i2l6273 20AC                   i2l6425 13F2                   i2l6409 12A6  
                 i2l5379 4458                   i2l6347 3980                   i2l6371 3A20  
                 i2l5715 4792                   i2l5651 42EE                   i2l5643 42CE  
                 i2l5635 42B0                   i2l6339 329C                   i2l6267 2076  
                 i2l6275 2430                   i2l6259 1FF8                   i2l6419 134E  
                 i2l6365 39FC                   i2l5901 4564                   i2l5645 42D6  
                 i2l6197 2AEA                   i2l6189 2A12                   i2l5477 49EE  
                 i2l5493 35A6                   i2l5549 3798                   i2l5821 3024  
                 i2l5813 2FFC                   i2l9021 0B6C                   i2l9005 0A40  
                 i2l5397 3F6A                   i2l5741 4A34                   i2l6269 208E  
                 i2l6437 153A                   i2l5903 4570                   i2l5719 47A6  
                 i2l5647 42DA                   i2l5655 42F8                   i2l5639 42BC  
                 i2l5487 357A                   i2l5591 385E                   i2l5583 383A  
                 i2l5831 3050                   i2l5823 302C                   i2l5671 40C8  
                 i2l5735 46D8                   i2l5753 3CC0                   i2l5745 3CB8  
                 i2l6369 3A16                   i2l5905 4574                   i2l5569 380E  
                 i2l5833 305A                   i2l5825 3032                   i2l9121 0EB8  
                 i2l9033 0BC0                   i2l9009 0A92                   i2l6393 1130  
                 i2l6385 1062                   i2l5659 4306                   i2l5579 382A  
                 i2l5819 301A                   i2l5667 4098                   i2l5691 4234  
                 i2l5915 4626                   i2l9115 0E88                   i2l9107 0E58  
                 i2l9043 0C24                   i2l9027 0B86                   i2l9019 0B5C  
                 i2l9131 0F80                   i2l9211 32D8                   i2l5765 3D10  
                 i2l5749 3CBC                   i2l5909 4598                   i2l5861 4114  
                 i2l5589 3852                   i2l5597 3C0E                   i2l5677 40F4  
                 i2l5693 4240                   i2l5917 4632                   i2l9109 0E64  
                 i2l9221 331E                   i2l9213 32E0                   i2l5759 3D0C  
                 i2l5839 3098                   i2l5791 2FA0                   i2l5695 4244  
                 i2l9127 0F4E                   i2l9071 0D14                   i2l9063 0CA6  
                 i2l9151 1C32                   i2l9143 1B74                   i2l9231 337E  
                 i2l9223 3320                   i2l9215 32E4                   i2l5769 3D14  
                 i2l5873 413E                   i2l5849 30D0                   i2l9049 0C48  
                 i2l9129 0F64                   i2l9153 1C9C                   i2l9145 1BB2  
                 i2l9241 33E0                   i2l9233 3386                   i2l9225 3330  
                 i2l9217 32EC                   i2l9209 32D0                   i2l5875 4146  
                 i2l5867 4124                   i2l9091 0DF6                   i2l9083 0D96  
                 i2l9067 0CD4                   i2l5971 2B3C                   i2l5963 473C  
                 i2l9163 1D3E                   i2l9243 33E2                   i2l9235 338A  
                 i2l9227 3370                   i2l9219 3308                   i2l5893 417E  
                 i2l5885 4166                   i2l5877 414A                   i2l5797 2FCA  
                 i2l9085 0DA4                   i2l9077 0D4C                   i2l9181 1ED4  
                 i2l9173 1E5A                   i2l9165 1D70                   i2l9157 1CEA  
                 i2l9149 1C00                   i2l9501 2400                   i2l9237 3392  
                 i2l9245 33EA                   i2l9229 3376                   i2l5991 2B6A  
                 i2l5983 2B62                   i2l5975 2B5A                   i2l5967 2B38  
                 i2l9183 1EFE                   i2l9175 1E84                   i2l9167 1DA2  
                 i2l9159 1D14                   i2l9503 240A                   i2l9239 33BE  
                 i2l5889 4170                   i2l9089 0DE8                   i2l9169 1E0C  
                 i2l9193 1F56                   i2l9505 2414                   i2l9099 0E30  
                 i2l8811 02CE                   i2l5995 2B6E                   i2l5987 2B66  
                 i2l5979 2B5E                   i2l9195 1F9A                   i2l9187 1F28  
                 i2l9179 1EAE                   i2l9507 241E                   i2l8821 0332  
                 i2l9189 1F3C                   i2l9197 1FA0                   i2l9509 2428  
                 i2l8823 0342                   i2l8807 0280                   i2l8743 0050  
                 i2l8921 074C                   i2l8905 06AE                   i2l8841 03DC  
                 i2l8817 02FE                   i2l8809 0288                   i2l8745 006E  
                 i2l8737 002E                   i2l8835 03A4                   i2l8827 0352  
                 i2l8771 0154                   i2l8755 00AE                   i2l8763 011C  
                 i2l8941 0808                   i2l8909 06D4                   i2l8837 03BE  
                 i2l8829 036A                   i2l8749 0078                   i2l8927 07AA  
                 i2l8855 0466                   i2l8847 03FE                   i2l8783 01AA  
                 i2l8791 020E                   i2l8961 08CE                   i2l8953 089E  
                 i2l8945 0868                   i2l8881 0594                   i2l8865 04D0  
                 i2l8849 0444                   i2l8785 01BA                   i2l8795 0224  
                 i2l9499 20FC                   i2l8949 0894                   i2l8893 061E  
                 i2l8797 022C                   i2l8789 01F6                   i2l8991 09CE  
                 i2l8975 092A                   i2l8983 09A4                   i2l8959 08B8  
                 i2l8967 08E8                   i2l8799 0234                   i2l8985 09B4  
                 i2l8897 0656                   i2l8889 05F6                   i2l8997 0A0C  
       daysOfMonth@month 0008                   _TMR0IE 007F95                   _TMR0IF 007F92  
                 _TMR1IE 007CE8                   _TMR1IF 007CF0                   _TMR0ON 007EAF  
                 _TMR1ON 007E68         __end_of_checkDST 354E                   _TRISA1 007C91  
                 _TRISA2 007C92                   _TRISA3 007C93                   _TRISA4 007C94  
       __end_of_advState 44E4                   i2_log2 472A                   i2_wait 4A34  
           _checkDST$299 0036            dayOfWeek@year 001F         __end_of__powers_ 7F81  
       __end_of_lcd_font 7EE3                   ___ftge 4068                   ___wmul 48EA  
              ??___awdiv 000E                ??___ftadd 000F                ??___awmod 0005  
              ??___ftneg 0004                ??___lldiv 0009                ??___ftmul 0034  
              ??___llmod 001C                ??___ftsub 001D                ??___fttol 0023  
              ??___lwmod 0005         __end_of_loadTime 3F3C                ??_advMenu 0001  
                 _fround 28B6                   clear_0 47C0                   clear_1 47CC  
       ___awdiv@quotient 0015          ___awmod@divisor 0003                   _screen 00DE  
        ___awmod@counter 0008                   hibit@x 0001                   _update 161A  
                 _rotate 3FD6         __end_of_saveTime 4476    ___ftmul@f3_as_product 003A  
              ??_initRTC 0132                ??_isdigit 0002                ??_buttons 001F  
           countBits@ret 0005             countBits@num 0001         __end_of_printRTC 1FDE  
                 spi@cnt 0133             __mediumconst 7EB8                ??_setTest 0127  
                 tblptrh 000FF7                   tblptrl 000FF6                   tblptru 000FF8  
              ??_sprintf 0060       __size_of___asftadd 003C       __size_of___asftmul 003C  
     __size_of___asftsub 003C               __accesstop 0060  __end_of__initialization 47F2  
        __CFG_PBADEN$OFF 000000              i2wait@count 0001               ___ftadd@f1 0009  
             ___ftadd@f2 000C               ___ftge@ff1 0001               ___ftge@ff2 0004  
             ___ftneg@f1 0001               ___ftmul@f1 002E               ___ftmul@f2 0031  
          __end_ofi2_spi 3EA2               ___ftsub@f1 0017               ___ftsub@f2 001A  
             ___fttol@f1 001F           __pcstackCOMRAM 0001             __pidataBANK1 4A60  
     __size_of_dayOfWeek 01E0               ___lltoft@c 0009            __end_of_hibit 461C  
          __end_of_pow10 7F33            __end_of_scale 28B6            __end_of_setup 3BFE  
            i2update@cnt 001E               __div_to_l_ 3780              i2rotate@cnt 0006  
            i2rotate@seg 0001    __size_ofi2_writeDigit 004E              i2rotate@ret 0005  
                ??i2_spi 0009                ?i2_update 0001                ?i2_rotate 0001  
                ??_hibit 0005          __div_to_l_@exp1 000D          __div_to_l_@cntr 000C  
           sprintf@integ 0071                  ??_scale 0042          __div_to_l_@quot 0008  
           sprintf@width 007D                  ??_setup 0133               __pbssBANK0 00A6  
             __pbssBANK1 0100       __size_of_countBits 0028                  ?i2_log2 000C  
                ?i2_wait 0001            __div_to_l_@f1 0001            __div_to_l_@f2 0004  
                ?___ftge 0001                  ?___wmul 0017             i2_writeDigit 46DC  
      __end_of___asftadd 48B0                  ?_fround 003F        __end_of___asftmul 4874  
      __end_of___asftsub 4838                ?___ftpack 0001                ?___lltoft 0009  
                ?_update 0001                  ?_rotate 0126          i2writeDigit@dig 0017  
        i2writeDigit@cnt 0018              saveTime@cnt 000C                ?_checkDST 0001  
              ?_advState 0001             ?_writeString 0025               ??i2_update 0019  
             ??i2_rotate 0002       __size_of_startDisp 00A2        __end_of_dayOfWeek 2F2A  
              ?_loadTime 0001       __size_of_writeChar 003A          __size_ofi2_log2 004A  
        __size_ofi2_wait 001E                ?_saveTime 0001        __end_of__npowers_ 7F5A  
                __Hparam 0000           dayOfWeek@month 0020               _scale$1312 0048  
                __Lparam 0000                ?_printRTC 005F          __size_of___ftge 0090  
                ___awdiv 40F8                  ___ftadd 2F2A                  ___awmod 4294  
                ___ftneg 49AC                  ___lldiv 420E          __size_of___wmul 003A  
                ___ftmul 3670                  ___llmod 454E                  ___ftsub 4924  
                ___fttol 3A48                  ___lwmod 4774                  _advMenu 3F3C  
      i2writeDigit@digit 0014        __end_of_countBits 49AC                  __pcinit 47BA  
             ??___ftpack 0006          __size_of_fround 0280                  __ramtop 0800  
             ??___lltoft 000D                  __ptext0 438A                  __ptext1 3B28  
                __ptext2 4A52                  __ptext3 4310                  __ptext4 3EA2  
                __ptext5 3D62                  __ptext6 4A16                  __ptext7 49F6  
                __ptext8 161A                  __ptext9 4188          __size_of_update 0518  
        __size_of_rotate 0092                  _oldLATB 00DD   __size_of_setBrightness 0020  
            ?__div_to_l_ 0001                  _initRTC 4310                  _dpowers 7EE3  
             ??_checkDST 002E               ??_advState 000A                  _isdigit 49D2  
           __size_of_isr 341E                  _buttons 0F8E             __size_of_spi 00F0  
       ___awmod@dividend 0001                  _setTest 4A16                  _waitCnt 00A6  
                _rtcMenu 0151                  _waitcnt 00D3                  log2@num 0126  
                main@cnt 0144                  _sprintf 001C           __pintcode_body 32A2  
   end_of_initialization 47F2               ??_loadTime 0126            _tmr0BigCounts 00CF  
          __Lmediumconst 7EB8                  int_func 32A2             writeChar@dig 0024  
                tick@val 0037                  spi@addr 012C                  spi@data 012D  
        ___lldiv@divisor 0005               ??_saveTime 000A                  spi@send 0131  
        ___lldiv@counter 0013            ??_daysOfMonth 000B               ??_printRTC 0086  
                postdec1 000FE5                  postdec2 000FDD                  postinc0 000FEE  
                postinc1 000FE6                  postinc2 000FDE            ?_setupButtons 0001  
      __end_of_startDisp 3E04           __tdiv_to_l_@f1 0001           __tdiv_to_l_@f2 0004  
          ??_getFontChar 0020            ??__tdiv_to_l_ 0007        __end_of_writeChar 48EA  
            printRTC@cnt 0096              printRTC@str 0088             writeString@i 002D  
          _setBrightness 49F6      __size_of__div_to_l_ 00F4           __end_ofi2_log2 4774  
         __end_ofi2_wait 4A52              ___ftmul@exp 0039           ??_setupButtons 0126  
              i2log2@num 000C        writeString@digits 0025               _writeDigit 4188  
         __end_of___ftge 40F8           __end_of___wmul 4924        writeString@string 0026  
         __end_of_fround 2B36      __end_of_daysOfMonth 3D62           __end_of_update 1B32  
         __end_of_rotate 4068                i2spi@addr 0007                i2spi@data 0008  
    start_initialization 47BA                i2spi@send 000C      __end_of_getFontChar 2D4A  
    __end_of__tdiv_to_l_ 3670              __end_of_dow 7F9D              __end_of_isr 3426  
            __end_of_spi 3964     __size_of_writeString 01AC            i2log2@log2Val 0010  
      __size_ofi2_update 0488        __size_ofi2_rotate 005C           ?_setBrightness 0126  
        ___llmod@divisor 0018                 ??i2_log2 0010          ___llmod@counter 001E  
               ??i2_wait 0005          daysOfMonth@year 0009             dayOfWeek@day 0021  
           dayOfWeek@tmp 002A                 ??___ftge 0007                 ??___wmul 001B  
          sprintf@vd_665 006F              __pdataBANK1 0148                 ??_fround 0042  
               ??_update 0139                 ??_rotate 0127               fround@prec 003F  
      __size_of___ftpack 00B8                ___asftadd 4874                ___asftmul 4838  
              ___asftsub 47FC        __size_of___lltoft 0064            __pcstackBANK0 0060  
          __pcstackBANK1 0126        __size_of_checkDST 0128      __end_of__stringdata 7FFE  
      __size_of_advState 006E              sprintf@_val 0082              sprintf@flag 0078  
            sprintf@fval 007A              sprintf@prec 007F                _dayOfWeek 2D4A  
              __pnvBANK1 0151        __size_of_loadTime 009A                __pintcode 0008  
          __pmediumconst 7EB8        __size_of_saveTime 0074              _daysOfMonth 3CB6  
               ?___awdiv 000A                 ?___ftadd 0009                 ?___awmod 0001  
               ?___ftneg 0001              ?_writeDigit 0134                 ?___lldiv 0001  
               ?___ftmul 002E                 ?___llmod 0014                 ?___ftsub 0017  
              __npowers_ 7F33                 ?___fttol 001F                 ?___lwmod 0001  
               ?_advMenu 0001        __size_of_printRTC 04AC              _getFontChar 2B36  
            __tdiv_to_l_ 354E             ??__div_to_l_ 0007                 ?_initRTC 0001  
             ?___asftadd 004E                _countBits 4984                 ?_isdigit 0001  
               ?_buttons 0001               ?___asftmul 003F               ?___asftsub 001D  
        _rtc_small_ticks 00DB           __size_ofi2_spi 009E                 ?_setTest 0126  
   __end_of_setupButtons 4A60           __size_of_hibit 0064                 ?_sprintf 0053  
       i2writeDigit@segs 0015           __size_of_scale 0450          ??_setBrightness 0127  
         __size_of_setup 00D6             saveTime@date 0001           ___wmul@product 001D  
             ?_dayOfWeek 001F            getFontChar@ch 001F              writeChar@ch 0023  
               i2u410_44 3E42                 i2u410_45 3E3C                 i2u331_40 356C  
               i2u331_45 3564                 i2u411_45 3E4E                 i2u411_46 3E54  
               i2u324_45 3F56                 i2u333_40 3598                 i2u421_40 3A66  
               i2u333_45 3590                 i2u421_45 3A5E                 i2u325_45 3F84  
               i2u326_40 3FD2                 i2u318_44 4604                 i2u318_45 45FE  
               i2u326_45 3FCA                 i2u415_40 368E                 i2u423_40 3A92  
               i2u415_45 3686                 i2u423_45 3A8A                 i2u327_45 3FD4  
               i2u417_40 36BA                 i2u345_40 3840                 i2u417_45 36B2  
     __end_of__div_to_l_ 3874                 i2u418_40 36C6                 i2u338_40 363C  
               i2u426_40 3ADE                 i2u450_40 20A2                 i2u450_46 20A4  
               i2u371_44 46BC                 i2u451_44 20C0                 i2u371_45 46B8  
               i2u451_45 20BA                 i2u372_44 46CC                 i2u452_44 2444  
               i2u372_45 46C8                 i2u452_45 243E                 i2u437_40 3508  
               i2u461_44 3266                 i2u461_45 3262                 i2u437_46 350A  
               i2u454_44 3150                 i2u454_45 314C                 i2u470_45 105C  
               i2u470_46 1062                 i2u463_41 398A                 i2u480_45 13BC  
               i2u472_45 10D0                 i2u449_44 2008                 i2u449_45 2004  
               i2u378_40 2F48                 i2u458_44 31E6                 i2u378_45 2F40  
               i2u458_45 31E0                 i2u482_45 1460                 i2u474_45 119E  
               i2u379_40 2F6E                 i2u379_45 2F66                 i2u484_45 1504  
               i2u476_45 1246                 i2u469_45 1018                 i2u750_40 337E  
               i2u742_41 1B3C                 i2u750_41 337C                 i2u478_45 1316  
               i2u751_40 3386                 i2u751_41 3384                 i2u752_40 33BE  
               i2u752_41 33BC                 i2u682_40 02C8                 i2u746_40 32D8  
               i2u746_41 32D6                 i2u682_47 02C2                 i2u747_40 32E0  
               i2u747_41 32DE                 i2u748_40 3308                 i2u748_41 3306  
               i2u692_45 04A8                 i2u694_40 0524                 i2u749_48 335C  
               i2u749_49 3370                 i2u694_45 0518                 i2u688_40 0396  
               i2u688_47 038C          writeDigit@digit 0134                _startDisp 3D62  
            __stringdata 7F9D        ___wmul@multiplier 0017               ?_countBits 0001  
           setTest@state 0126                 i2_update 1FDE                 i2_rotate 4680  
              _writeChar 48B0                copy_data0 47E6      __size_of_writeDigit 0086  
               i2spi@cnt 000E          writeFloat@F5025 0118                 __Hrparam 0000  
               __Lrparam 0000          loadTime@newDate 0129         __size_of___awdiv 0090  
       __size_of___ftadd 01CC         __size_of___awmod 007C         __size_of___ftneg 0026  
       __size_of___lldiv 0086         __size_of___ftmul 0110         __size_of___llmod 006A  
       __size_of___ftsub 0036         __size_of___fttol 00E0         __size_of___lwmod 0046  
               ___ftpack 3BFE         __size_of_advMenu 009A              _fround$1310 004B  
            _fround$1311 0048                 ___lltoft 461C               ?_startDisp 0001  
            _isdigit$938 0003              ??___asftadd 0053                 _checkDST 3426  
               _advState 4476               sprintf@exp 0076              ??___asftmul 0044  
            ??___asftsub 0022            _printRTC$1309 0094         __size_of_initRTC 007A  
       __size_of_isdigit 0024         __size_of_buttons 068C           writeChar@digit 0022  
       __size_of_setTest 001E               ?_writeChar 0022                 __ptext10 3FD6  
               __ptext11 44E4                 __ptext20 4A34                 __ptext12 3874  
               __ptext21 3F3C                 __ptext13 495A                 __ptext30 001C  
               __ptext22 4476                 __ptext31 461C                 __ptext23 1B32  
               __ptext15 0F8E                 __ptext40 2F2A                 __ptext32 420E  
               __ptext24 30F6                 __ptext16 1FDE                 __ptext41 3BFE  
               __ptext33 3A48                 __ptext25 45B8                 __ptext17 46DC  
               __ptext50 48EA                 __ptext42 3780                 __ptext34 49AC  
               __ptext26 4984                 __ptext18 4680                 __ptext51 4774  
               __ptext43 354E                 __ptext35 4068                 __ptext27 48B0  
               __ptext19 3E04                 __ptext52 454E                 __ptext44 49D2  
               __ptext36 47FC                 __ptext28 472A                 __ptext53 3964  
               __ptext45 2466                 __ptext37 4924                 __ptext29 2B36  
               __ptext54 3426                 __ptext46 28B6                 __ptext38 4838  
               __ptext55 2D4A                 __ptext47 4294                 __ptext39 4874  
               __ptext56 3CB6                 __ptext48 40F8                 __ptext57 4402  
               __ptext49 3670                 __ptext58 0000                 __powers_ 7F5A  
               _lcd_font 7EB8         __size_of_sprintf 0F72            _rtc_big_ticks 00D9  
               _loadTime 3EA2                wait@count 0126            __size_of_log2 006A  
          __size_of_main 0078              ??_dayOfWeek 0022                 _oldTemps 0100  
          __size_of_tick 00E4            __size_of_wait 002A                 _saveTime 4402  
               _tempMenu 0121                 _printRTC 1B32           writeDigit@segs 0135  
          ?i2_writeDigit 0014                 main@argc 013F                 main@argv 0141  
  __CFG_CPUDIV$OSC3_PLL4 000000                update@cnt 013E    __size_of_setupButtons 000E  
            ??_countBits 0005                rotate@cnt 012B            ??_writeString 0028  
              rotate@seg 0126                rotate@ret 012A                 isdigit@c 0001  
               scale@scl 003F                 intlevel2 0000                sprintf@ap 0074  
       __tdiv_to_l_@exp1 0011                sprintf@vd 006D                sprintf@sp 0053  
       __tdiv_to_l_@cntr 0010         __tdiv_to_l_@quot 000C         ___lwmod@dividend 0001  
       ___lldiv@dividend 0001            writeDigit@dig 0137            writeDigit@cnt 0138  
         writeLong@F5021 0148           printRTC@digits 005F             ?_daysOfMonth 0008  
         ??i2_writeDigit 0016             ??_writeDigit 0136             _setupButtons 4A52  
          printRTC@F5073 010C             ?_getFontChar 001F      setBrightness@bright 0126  
           ?__tdiv_to_l_ 0001              ??_startDisp 0127                 sprintf@c 0081  
               sprintf@f 0055         ___lldiv@quotient 000F          ___lwmod@divisor 0003  
        ___lwmod@counter 0007              ??_writeChar 0024            printRTC@first 0087  
            log2@log2Val 012A      __end_of_writeString 32A2       __end_of_writeDigit 420E  
           hibit@log2Val 0008  
