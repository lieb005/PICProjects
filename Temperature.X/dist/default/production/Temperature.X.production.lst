

Microchip Technology PIC18 LITE Macro Assembler V1.20 build 52243 
                                                                                               Thu Nov 14 09:27:34 2013

Microchip Technology Omniscient Code Generator (Lite mode) build 52243
     1                           	processor	18F2550
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataBANK0,global,class=CODE,delta=1
     6                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1
     7                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    12                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    13                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    14                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    15                           	psect	text0,global,reloc=2,class=CODE,delta=1
    16                           	psect	text1,global,reloc=2,class=CODE,delta=1
    17                           	psect	text2,global,reloc=2,class=CODE,delta=1
    18                           	psect	text3,global,reloc=2,class=CODE,delta=1
    19                           	psect	text4,global,reloc=2,class=CODE,delta=1
    20                           	psect	text5,global,reloc=2,class=CODE,delta=1
    21                           	psect	text6,global,reloc=2,class=CODE,delta=1
    22                           	psect	text7,global,reloc=2,class=CODE,delta=1
    23                           	psect	text8,global,reloc=2,class=CODE,delta=1
    24                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    25                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    26                           	psect	text10,global,reloc=2,class=CODE,delta=1
    27                           	psect	text11,global,reloc=2,class=CODE,delta=1
    28                           	psect	text12,global,reloc=2,class=CODE,delta=1
    29                           	psect	text13,global,reloc=2,class=CODE,delta=1
    30                           	psect	text14,global,reloc=2,class=CODE,delta=1
    31                           	psect	text15,global,reloc=2,class=CODE,delta=1
    32                           	psect	text16,global,reloc=2,class=CODE,delta=1
    33                           	psect	text17,global,reloc=2,class=CODE,delta=1
    34                           	psect	text18,global,reloc=2,class=CODE,delta=1
    35                           	psect	text19,global,reloc=2,class=CODE,delta=1
    36                           	psect	text20,global,reloc=2,class=CODE,delta=1
    37                           	psect	text21,global,reloc=2,class=CODE,delta=1
    38                           	psect	text22,global,reloc=2,class=CODE,delta=1
    39                           	psect	text23,global,reloc=2,class=CODE,delta=1
    40                           	psect	text24,global,reloc=2,class=CODE,delta=1
    41                           	psect	text25,global,reloc=2,class=CODE,delta=1
    42                           	psect	text26,global,reloc=2,class=CODE,delta=1
    43                           	psect	text27,global,reloc=2,class=CODE,delta=1
    44                           	psect	text28,global,reloc=2,class=CODE,delta=1
    45                           	psect	text29,global,reloc=2,class=CODE,delta=1
    46                           	psect	text30,global,reloc=2,class=CODE,delta=1
    47                           	psect	text31,global,reloc=2,class=CODE,delta=1
    48                           	psect	text32,global,reloc=2,class=CODE,delta=1
    49                           	psect	text33,global,reloc=2,class=CODE,delta=1
    50                           	psect	text34,global,reloc=2,class=CODE,delta=1
    51                           	psect	text35,global,reloc=2,class=CODE,delta=1
    52                           	psect	text36,global,reloc=2,class=CODE,delta=1
    53                           	psect	text37,global,reloc=2,class=CODE,delta=1
    54                           	psect	text38,global,reloc=2,class=CODE,delta=1
    55                           	psect	text39,global,reloc=2,class=CODE,delta=1
    56                           	psect	text40,global,reloc=2,class=CODE,delta=1
    57                           	psect	text41,global,reloc=2,class=CODE,delta=1
    58                           	psect	text42,global,reloc=2,class=CODE,delta=1
    59                           	psect	text43,global,reloc=2,class=CODE,delta=1
    60                           	psect	text44,global,reloc=2,class=CODE,delta=1
    61                           	psect	text45,global,reloc=2,class=CODE,delta=1
    62                           	psect	text46,global,reloc=2,class=CODE,delta=1
    63                           	psect	text47,global,reloc=2,class=CODE,delta=1
    64                           	psect	text48,global,reloc=2,class=CODE,delta=1
    65                           	psect	text49,global,reloc=2,class=CODE,delta=1
    66                           	psect	text50,global,reloc=2,class=CODE,delta=1
    67                           	psect	text51,global,reloc=2,class=CODE,delta=1
    68                           	psect	text52,global,reloc=2,class=CODE,delta=1
    69                           	psect	text53,global,reloc=2,class=CODE,delta=1
    70                           	psect	text54,global,reloc=2,class=CODE,delta=1
    71                           	psect	text55,global,reloc=2,class=CODE,delta=1
    72                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    73                           	psect	text56,global,reloc=2,class=CODE,delta=1
    74                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    75  0000                     
    76                           	psect	idataBANK0
    77  003DA0                     __pidataBANK0:
    78                           	opt stack 0
    79                           
    80                           ;initializer for _dow
    81  003DA0  7FF4               	dw	STR_1& (0+65535)
    82  003DA2  7FF0               	dw	STR_2& (0+65535)
    83  003DA4  7FE0               	dw	STR_3& (0+65535)
    84  003DA6  7FF8               	dw	STR_4& (0+65535)
    85  003DA8  7FEC               	dw	STR_5& (0+65535)
    86  003DAA  7FE4               	dw	STR_6& (0+65535)
    87  003DAC  7FE8               	dw	STR_7& (0+65535)
    88                           
    89                           ;initializer for writeLong@F5021
    90  003DAE  30                 	db	48
    91  003DAF  30                 	db	48
    92  003DB0  30                 	db	48
    93  003DB1  30                 	db	48
    94  003DB2  30                 	db	48
    95  003DB3  30                 	db	48
    96  003DB4  30                 	db	48
    97  003DB5  30                 	db	48
    98  003DB6  00                 	db	0
    99                           
   100                           	psect	mediumconst
   101  007ECC                     __pmediumconst:
   102                           	opt stack 0
   103  007ECC                     _lcd_font:
   104                           	opt stack 0
   105  007ECC  3F                 	db	63
   106  007ECD  06                 	db	6
   107  007ECE  5B                 	db	91
   108  007ECF  4F                 	db	79
   109  007ED0  66                 	db	102
   110  007ED1  6D                 	db	109
   111  007ED2  7C                 	db	124
   112  007ED3  07                 	db	7
   113  007ED4  7F                 	db	127
   114  007ED5  67                 	db	103
   115  007ED6  00                 	db	0
   116  007ED7  00                 	db	0
   117  007ED8  61                 	db	97
   118  007ED9  48                 	db	72
   119  007EDA  00                 	db	0
   120  007EDB  53                 	db	83
   121  007EDC  00                 	db	0
   122  007EDD  77                 	db	119
   123  007EDE  7C                 	db	124
   124  007EDF  58                 	db	88
   125  007EE0  5E                 	db	94
   126  007EE1  79                 	db	121
   127  007EE2  71                 	db	113
   128  007EE3  6F                 	db	111
   129  007EE4  74                 	db	116
   130  007EE5  10                 	db	16
   131  007EE6  0F                 	db	15
   132  007EE7  68                 	db	104
   133  007EE8  38                 	db	56
   134  007EE9  37                 	db	55
   135  007EEA  54                 	db	84
   136  007EEB  5C                 	db	92
   137  007EEC  73                 	db	115
   138  007EED  67                 	db	103
   139  007EEE  50                 	db	80
   140  007EEF  6D                 	db	109
   141  007EF0  78                 	db	120
   142  007EF1  1C                 	db	28
   143  007EF2  1C                 	db	28
   144  007EF3  7E                 	db	126
   145  007EF4  76                 	db	118
   146  007EF5  6E                 	db	110
   147  007EF6  5B                 	db	91
   148  007EF7                     __end_of_lcd_font:
   149                           	opt stack 0
   150  007EF7                     _dpowers:
   151                           	opt stack 0
   152  007EF7  0001               	dw	1
   153  007EF9  0000               	dw	0
   154  007EFB  000A               	dw	10
   155  007EFD  0000               	dw	0
   156  007EFF  0064               	dw	100
   157  007F01  0000               	dw	0
   158  007F03  03E8               	dw	1000
   159  007F05  0000               	dw	0
   160  007F07  2710               	dw	10000
   161  007F09  0000               	dw	0
   162  007F0B  86A0               	dw	34464
   163  007F0D  0001               	dw	1
   164  007F0F  4240               	dw	16960
   165  007F11  000F               	dw	15
   166  007F13  9680               	dw	38528
   167  007F15  0098               	dw	152
   168  007F17  E100               	dw	57600
   169  007F19  05F5               	dw	1525
   170  007F1B  CA00               	dw	51712
   171  007F1D  3B9A               	dw	15258
   172  007F1F                     __end_of_dpowers:
   173                           	opt stack 0
   174  007F1F                     _pow10:
   175                           	opt stack 0
   176  007F1F  0001               	dw	1
   177  007F21  0000               	dw	0
   178  007F23  000A               	dw	10
   179  007F25  0000               	dw	0
   180  007F27  0064               	dw	100
   181  007F29  0000               	dw	0
   182  007F2B  03E8               	dw	1000
   183  007F2D  0000               	dw	0
   184  007F2F  2710               	dw	10000
   185  007F31  0000               	dw	0
   186  007F33  86A0               	dw	34464
   187  007F35  0001               	dw	1
   188  007F37  4240               	dw	16960
   189  007F39  000F               	dw	15
   190  007F3B  9680               	dw	38528
   191  007F3D  0098               	dw	152
   192  007F3F  E100               	dw	57600
   193  007F41  05F5               	dw	1525
   194  007F43  CA00               	dw	51712
   195  007F45  3B9A               	dw	15258
   196  007F47                     __end_of_pow10:
   197                           	opt stack 0
   198  007F47                     __npowers_:
   199                           	opt stack 0
   200  007F47  00                 	db	0
   201  007F48  80                 	db	128
   202  007F49  3F                 	db	63
   203  007F4A  CD                 	db	205
   204  007F4B  CC                 	db	204
   205  007F4C  3D                 	db	61
   206  007F4D  D7                 	db	215
   207  007F4E  23                 	db	35
   208  007F4F  3C                 	db	60
   209  007F50  12                 	db	18
   210  007F51  83                 	db	131
   211  007F52  3A                 	db	58
   212  007F53  B7                 	db	183
   213  007F54  D1                 	db	209
   214  007F55  38                 	db	56
   215  007F56  C6                 	db	198
   216  007F57  27                 	db	39
   217  007F58  37                 	db	55
   218  007F59  38                 	db	56
   219  007F5A  86                 	db	134
   220  007F5B  35                 	db	53
   221  007F5C  C0                 	db	192
   222  007F5D  D6                 	db	214
   223  007F5E  33                 	db	51
   224  007F5F  CC                 	db	204
   225  007F60  2B                 	db	43
   226  007F61  32                 	db	50
   227  007F62  70                 	db	112
   228  007F63  89                 	db	137
   229  007F64  30                 	db	48
   230  007F65  E7                 	db	231
   231  007F66  DB                 	db	219
   232  007F67  2E                 	db	46
   233  007F68  E5                 	db	229
   234  007F69  3C                 	db	60
   235  007F6A  1E                 	db	30
   236  007F6B  42                 	db	66
   237  007F6C  A2                 	db	162
   238  007F6D  0D                 	db	13
   239  007F6E                     __end_of__npowers_:
   240                           	opt stack 0
   241  007F6E                     __powers_:
   242                           	opt stack 0
   243  007F6E  00                 	db	0
   244  007F6F  80                 	db	128
   245  007F70  3F                 	db	63
   246  007F71  00                 	db	0
   247  007F72  20                 	db	32
   248  007F73  41                 	db	65
   249  007F74  00                 	db	0
   250  007F75  C8                 	db	200
   251  007F76  42                 	db	66
   252  007F77  00                 	db	0
   253  007F78  7A                 	db	122
   254  007F79  44                 	db	68
   255  007F7A  40                 	db	64
   256  007F7B  1C                 	db	28
   257  007F7C  46                 	db	70
   258  007F7D  50                 	db	80
   259  007F7E  C3                 	db	195
   260  007F7F  47                 	db	71
   261  007F80  24                 	db	36
   262  007F81  74                 	db	116
   263  007F82  49                 	db	73
   264  007F83  97                 	db	151
   265  007F84  18                 	db	24
   266  007F85  4B                 	db	75
   267  007F86  BC                 	db	188
   268  007F87  BE                 	db	190
   269  007F88  4C                 	db	76
   270  007F89  6B                 	db	107
   271  007F8A  6E                 	db	110
   272  007F8B  4E                 	db	78
   273  007F8C  03                 	db	3
   274  007F8D  15                 	db	21
   275  007F8E  50                 	db	80
   276  007F8F  79                 	db	121
   277  007F90  AD                 	db	173
   278  007F91  60                 	db	96
   279  007F92  F3                 	db	243
   280  007F93  49                 	db	73
   281  007F94  71                 	db	113
   282  007F95                     __end_of__powers_:
   283                           	opt stack 0
   284  0000                     _ADRES	set	4035
   285  0000                     _TMR0	set	4054
   286  0000                     _TMR1	set	4046
   287  0000                     _ADCON0	set	4034
   288  0000                     _ADCON1	set	4033
   289  0000                     _ADCON2	set	4032
   290  0000                     _LATB	set	3978
   291  0000                     _T0CON	set	4053
   292  0000                     _T1CON	set	4045
   293  0000                     _TRISB	set	3987
   294  0000                     _GIE	set	32663
   295  0000                     _GO	set	32273
   296  0000                     _LATA1	set	31817
   297  0000                     _LATA3	set	31819
   298  0000                     _LATA4	set	31820
   299  0000                     _LATA5	set	31821
   300  0000                     _PEIE	set	32662
   301  0000                     _TMR0IE	set	32661
   302  0000                     _TMR0IF	set	32658
   303  0000                     _TMR0ON	set	32431
   304  0000                     _TMR1IE	set	31976
   305  0000                     _TMR1IF	set	31984
   306  0000                     _TMR1ON	set	32360
   307  0000                     _TRISA1	set	31889
   308  0000                     _TRISA2	set	31890
   309  0000                     _TRISA3	set	31891
   310  0000                     _TRISA4	set	31892
   311  0000                     _TRISA5	set	31893
   312  0000                     _nRBPU	set	32655
   313  007F95                     __stringdata:
   314                           	opt stack 0
   315  007F95                     STR_22:
   316  007F95  25                 	db	37
   317  007F96  30                 	db	48	;'0'
   318  007F97  32                 	db	50	;'2'
   319  007F98  64                 	db	100	;'d'
   320  007F99  20                 	db	32
   321  007F9A  25                 	db	37
   322  007F9B  30                 	db	48	;'0'
   323  007F9C  32                 	db	50	;'2'
   324  007F9D  64                 	db	100	;'d'
   325  007F9E  20                 	db	32
   326  007F9F  25                 	db	37
   327  007FA0  30                 	db	48	;'0'
   328  007FA1  32                 	db	50	;'2'
   329  007FA2  64                 	db	100	;'d'
   330  007FA3  00                 	db	0
   331  007FA4                     STR_19:
   332  007FA4  25                 	db	37
   333  007FA5  63                 	db	99	;'c'
   334  007FA6  25                 	db	37
   335  007FA7  63                 	db	99	;'c'
   336  007FA8  20                 	db	32
   337  007FA9  25                 	db	37
   338  007FAA  30                 	db	48	;'0'
   339  007FAB  32                 	db	50	;'2'
   340  007FAC  64                 	db	100	;'d'
   341  007FAD  2E                 	db	46
   342  007FAE  25                 	db	37
   343  007FAF  30                 	db	48	;'0'
   344  007FB0  32                 	db	50	;'2'
   345  007FB1  64                 	db	100	;'d'
   346  007FB2  00                 	db	0
   347  007FB3                     STR_18:
   348  007FB3  25                 	db	37
   349  007FB4  30                 	db	48	;'0'
   350  007FB5  32                 	db	50	;'2'
   351  007FB6  64                 	db	100	;'d'
   352  007FB7  2E                 	db	46
   353  007FB8  25                 	db	37
   354  007FB9  30                 	db	48	;'0'
   355  007FBA  32                 	db	50	;'2'
   356  007FBB  64                 	db	100	;'d'
   357  007FBC  2E                 	db	46
   358  007FBD  25                 	db	37
   359  007FBE  30                 	db	48	;'0'
   360  007FBF  32                 	db	50	;'2'
   361  007FC0  64                 	db	100	;'d'
   362  007FC1  00                 	db	0
   363  007FC2                     STR_21:
   364  007FC2  25                 	db	37
   365  007FC3  73                 	db	115	;'s'
   366  007FC4  20                 	db	32
   367  007FC5  25                 	db	37
   368  007FC6  30                 	db	48	;'0'
   369  007FC7  32                 	db	50	;'2'
   370  007FC8  64                 	db	100	;'d'
   371  007FC9  2E                 	db	46
   372  007FCA  25                 	db	37
   373  007FCB  30                 	db	48	;'0'
   374  007FCC  32                 	db	50	;'2'
   375  007FCD  64                 	db	100	;'d'
   376  007FCE  00                 	db	0
   377  007FCF                     STR_38:
   378  007FCF  28                 	db	40
   379  007FD0  6E                 	db	110	;'n'
   380  007FD1  75                 	db	117	;'u'
   381  007FD2  6C                 	db	108	;'l'
   382  007FD3  6C                 	db	108	;'l'
   383  007FD4  29                 	db	41
   384  007FD5  00                 	db	0
   385  007FD6                     STR_9:
   386  007FD6  25                 	db	37
   387  007FD7  2E                 	db	46
   388  007FD8  2A                 	db	42
   389  007FD9  66                 	db	102	;'f'
   390  007FDA  00                 	db	0
   391  007FDB  25                 	db	37
   392  007FDC  2A                 	db	42
   393  007FDD  6C                 	db	108	;'l'
   394  007FDE  69                 	db	105	;'i'
   395  007FDF  00                 	db	0
   396  007FE0                     STR_3:
   397  007FE0  44                 	db	68	;'D'
   398  007FE1  65                 	db	101	;'e'
   399  007FE2  69                 	db	105	;'i'
   400  007FE3  00                 	db	0
   401  007FE4                     STR_6:
   402  007FE4  46                 	db	70	;'F'
   403  007FE5  72                 	db	114	;'r'
   404  007FE6  69                 	db	105	;'i'
   405  007FE7  00                 	db	0
   406  007FE8                     STR_7:
   407  007FE8  53                 	db	83	;'S'
   408  007FE9  61                 	db	97	;'a'
   409  007FEA  6D                 	db	109	;'m'
   410  007FEB  00                 	db	0
   411  007FEC                     STR_5:
   412  007FEC  44                 	db	68	;'D'
   413  007FED  6F                 	db	111	;'o'
   414  007FEE  6E                 	db	110	;'n'
   415  007FEF  00                 	db	0
   416  007FF0                     STR_2:
   417  007FF0  4D                 	db	77	;'M'
   418  007FF1  6F                 	db	111	;'o'
   419  007FF2  6E                 	db	110	;'n'
   420  007FF3  00                 	db	0
   421  007FF4                     STR_1:
   422  007FF4  53                 	db	83	;'S'
   423  007FF5  6F                 	db	111	;'o'
   424  007FF6  6E                 	db	110	;'n'
   425  007FF7  00                 	db	0
   426  007FF8                     STR_4:
   427  007FF8  4D                 	db	77	;'M'
   428  007FF9  69                 	db	105	;'i'
   429  007FFA  74                 	db	116	;'t'
   430  007FFB  00                 	db	0
   431  007FFC                     STR_30:
   432  007FFC  2A                 	db	42
   433  007FFD  43                 	db	67	;'C'
   434  007FFE  00                 	db	0
   435  007FFF                     __end_of__stringdata:
   436                           	opt stack 0
   437                           
   438                           ; #config settings
   439  007FFF  00                 	db	0	; dummy byte at the end
   440  0000                     
   441                           	psect	nvBANK0
   442  0000F5                     __pnvBANK0:
   443                           	opt stack 0
   444  0000F5                     _printFn:
   445                           	opt stack 0
   446  0000F5                     	ds	2
   447                           
   448                           	psect	cinit
   449  003AAE                     __pcinit:
   450                           	opt stack 0
   451  003AAE                     start_initialization:
   452                           	opt stack 0
   453  003AAE                     __initialization:
   454                           	opt stack 0
   455                           
   456                           ; Clear objects allocated to BANK1 (23 bytes)
   457  003AAE  EE01  F000         	lfsr	0,__pbssBANK1
   458  003AB2  0E17               	movlw	23
   459  003AB4                     clear_0:
   460  003AB4  6AEE               	clrf	postinc0,c
   461  003AB6  06E8               	decf	wreg,f,c
   462  003AB8  E1FD               	bnz	clear_0
   463                           
   464                           ; Clear objects allocated to BANK0 (39 bytes)
   465  003ABA  EE00  F0B7         	lfsr	0,__pbssBANK0
   466  003ABE  0E27               	movlw	39
   467  003AC0                     clear_1:
   468  003AC0  6AEE               	clrf	postinc0,c
   469  003AC2  06E8               	decf	wreg,f,c
   470  003AC4  E1FD               	bnz	clear_1
   471                           
   472                           ; Initialize objects allocated to BANK0 (23 bytes)
   473                           ; load TBLPTR registers with __pidataBANK0
   474  003AC6  0EA0               	movlw	low __pidataBANK0
   475  003AC8  6EF6               	movwf	tblptrl,c
   476  003ACA  0E3D               	movlw	high __pidataBANK0
   477  003ACC  6EF7               	movwf	tblptrh,c
   478  003ACE  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   479  003AD0  6EF8               	movwf	tblptru,c
   480  003AD2  EE00  F0DE         	lfsr	0,__pdataBANK0
   481  003AD6  EE10 F017          	lfsr	1,23
   482  003ADA                     copy_data0:
   483  003ADA  0009               	tblrd		*+
   484  003ADC  CFF5 FFEE          	movff	tablat,postinc0
   485  003AE0  50E5               	movf	postdec1,w,c
   486  003AE2  50E1               	movf	fsr1l,w,c
   487  003AE4  E1FA               	bnz	copy_data0
   488  003AE6                     end_of_initialization:
   489                           	opt stack 0
   490  003AE6                     __end_of__initialization:
   491                           	opt stack 0
   492  003AE6  0E00               	movlw	low (__Lmediumconst shr (0+16))
   493  003AE8  6EF8               	movwf	tblptru,c
   494  003AEA  0100               	movlb	0
   495  003AEC  EF85  F01B         	goto	_main	;jump to C main() function
   496                           tblptru	equ	0xFF8
   497                           tblptrh	equ	0xFF7
   498                           tblptrl	equ	0xFF6
   499                           tablat	equ	0xFF5
   500                           postinc0	equ	0xFEE
   501                           wreg	equ	0xFE8
   502                           postdec1	equ	0xFE5
   503                           fsr1l	equ	0xFE1
   504                           
   505                           	psect	bssBANK0
   506  0000B7                     __pbssBANK0:
   507                           	opt stack 0
   508  0000B7                     _oldTemps:
   509                           	opt stack 0
   510  0000B7                     	ds	12
   511  0000C3                     printRTC@F5061:
   512                           	opt stack 0
   513  0000C3                     	ds	9
   514  0000CC                     writeFloat@F5025:
   515                           	opt stack 0
   516  0000CC                     	ds	9
   517  0000D5                     _tmr0BigCounts:
   518                           	opt stack 0
   519  0000D5                     	ds	4
   520  0000D9                     _rtc_big_ticks:
   521                           	opt stack 0
   522  0000D9                     	ds	2
   523  0000DB                     _rtc_small_ticks:
   524                           	opt stack 0
   525  0000DB                     	ds	2
   526  0000DD                     _menu:
   527                           	opt stack 0
   528  0000DD                     	ds	1
   529                           tblptru	equ	0xFF8
   530                           tblptrh	equ	0xFF7
   531                           tblptrl	equ	0xFF6
   532                           tablat	equ	0xFF5
   533                           postinc0	equ	0xFEE
   534                           wreg	equ	0xFE8
   535                           postdec1	equ	0xFE5
   536                           fsr1l	equ	0xFE1
   537                           
   538                           	psect	dataBANK0
   539  0000DE                     __pdataBANK0:
   540                           	opt stack 0
   541  0000DE                     _dow:
   542                           	opt stack 0
   543  0000DE                     	ds	14
   544  0000EC                     writeLong@F5021:
   545                           	opt stack 0
   546  0000EC                     	ds	9
   547                           tblptru	equ	0xFF8
   548                           tblptrh	equ	0xFF7
   549                           tblptrl	equ	0xFF6
   550                           tablat	equ	0xFF5
   551                           postinc0	equ	0xFEE
   552                           wreg	equ	0xFE8
   553                           postdec1	equ	0xFE5
   554                           fsr1l	equ	0xFE1
   555                           
   556                           	psect	bssBANK1
   557  000100                     __pbssBANK1:
   558                           	opt stack 0
   559  000100                     _screen:
   560                           	opt stack 0
   561  000100                     	ds	13
   562  00010D                     _date:
   563                           	opt stack 0
   564  00010D                     	ds	10
   565                           tblptru	equ	0xFF8
   566                           tblptrh	equ	0xFF7
   567                           tblptrl	equ	0xFF6
   568                           tablat	equ	0xFF5
   569                           postinc0	equ	0xFEE
   570                           wreg	equ	0xFE8
   571                           postdec1	equ	0xFE5
   572                           fsr1l	equ	0xFE1
   573                           
   574                           	psect	cstackBANK1
   575  000117                     __pcstackBANK1:
   576                           	opt stack 0
   577  000117                     ?_setBrightness:
   578                           	opt stack 0
   579  000117                     ?_setTest:
   580                           	opt stack 0
   581  000117                     setBrightness@bright:
   582                           	opt stack 0
   583  000117                     setTest@state:
   584                           	opt stack 0
   585  000117                     loadTime@newDate:
   586                           	opt stack 0
   587                           
   588                           ; 10 bytes @ 0x0
   589  000117                     	ds	1
   590  000118                     ??_startDisp:
   591  000118                     
   592                           ; 0 bytes @ 0x1
   593  000118                     	ds	9
   594  000121                     ??_initRTC:
   595                           
   596                           ; 0 bytes @ 0xA
   597  000121                     	ds	1
   598  000122                     
   599                           ; 2 bytes @ 0xB
   600  000122                     	ds	2
   601  000124                     
   602                           ; 3 bytes @ 0xD
   603  000124                     	ds	3
   604  000127                     main@cnt:
   605                           	opt stack 0
   606                           
   607                           ; 4 bytes @ 0x10
   608  000127                     	ds	4
   609                           tblptru	equ	0xFF8
   610                           tblptrh	equ	0xFF7
   611                           tblptrl	equ	0xFF6
   612                           tablat	equ	0xFF5
   613                           postinc0	equ	0xFEE
   614                           wreg	equ	0xFE8
   615                           postdec1	equ	0xFE5
   616                           fsr1l	equ	0xFE1
   617                           
   618                           	psect	cstackBANK0
   619  000060                     __pcstackBANK0:
   620                           	opt stack 0
   621  000060                     ?_sprintf:
   622                           	opt stack 0
   623  000060                     sprintf@sp:
   624                           	opt stack 0
   625  000060                     getTemp@oldTempsTemp:
   626                           	opt stack 0
   627                           
   628                           ; 9 bytes @ 0x0
   629  000060                     	ds	2
   630  000062                     sprintf@f:
   631                           	opt stack 0
   632                           
   633                           ; 2 bytes @ 0x2
   634  000062                     	ds	7
   635  000069                     getTemp@temp:
   636                           	opt stack 0
   637                           
   638                           ; 3 bytes @ 0x9
   639  000069                     	ds	3
   640  00006C                     getTemp@total:
   641                           	opt stack 0
   642  00006C                     _sprintf$1281:
   643                           	opt stack 0
   644                           
   645                           ; 3 bytes @ 0xC
   646  00006C                     	ds	3
   647  00006F                     getTemp@cnt:
   648                           	opt stack 0
   649  00006F                     _sprintf$639:
   650                           	opt stack 0
   651                           
   652                           ; 4 bytes @ 0xF
   653  00006F                     	ds	4
   654  000073                     sprintf@vd:
   655                           	opt stack 0
   656                           
   657                           ; 2 bytes @ 0x13
   658  000073                     	ds	2
   659  000075                     sprintf@vd_641:
   660                           	opt stack 0
   661                           
   662                           ; 2 bytes @ 0x15
   663  000075                     	ds	2
   664  000077                     sprintf@integ:
   665                           	opt stack 0
   666                           
   667                           ; 3 bytes @ 0x17
   668  000077                     	ds	3
   669  00007A                     sprintf@ap:
   670                           	opt stack 0
   671                           
   672                           ; 2 bytes @ 0x1A
   673  00007A                     	ds	2
   674  00007C                     sprintf@exp:
   675                           	opt stack 0
   676                           
   677                           ; 2 bytes @ 0x1C
   678  00007C                     	ds	2
   679  00007E                     sprintf@flag:
   680                           	opt stack 0
   681                           
   682                           ; 2 bytes @ 0x1E
   683  00007E                     	ds	2
   684  000080                     sprintf@fval:
   685                           	opt stack 0
   686                           
   687                           ; 3 bytes @ 0x20
   688  000080                     	ds	3
   689  000083                     sprintf@width:
   690                           	opt stack 0
   691                           
   692                           ; 2 bytes @ 0x23
   693  000083                     	ds	2
   694  000085                     sprintf@prec:
   695                           	opt stack 0
   696                           
   697                           ; 2 bytes @ 0x25
   698  000085                     	ds	2
   699  000087                     sprintf@c:
   700                           	opt stack 0
   701                           
   702                           ; 1 bytes @ 0x27
   703  000087                     	ds	1
   704  000088                     sprintf@_val:
   705                           	opt stack 0
   706                           
   707                           ; 4 bytes @ 0x28
   708  000088                     	ds	4
   709  00008C                     ?_writeFloat:
   710                           	opt stack 0
   711  00008C                     writeFloat@digits:
   712                           	opt stack 0
   713                           
   714                           ; 1 bytes @ 0x2C
   715  00008C                     	ds	1
   716  00008D                     writeFloat@num:
   717                           	opt stack 0
   718                           
   719                           ; 3 bytes @ 0x2D
   720  00008D                     	ds	3
   721  000090                     writeFloat@str:
   722                           	opt stack 0
   723                           
   724                           ; 9 bytes @ 0x30
   725  000090                     	ds	9
   726  000099                     writeFloat@bits:
   727                           	opt stack 0
   728                           
   729                           ; 1 bytes @ 0x39
   730  000099                     	ds	1
   731  00009A                     ??_printRTC:
   732  00009A                     _printTemp$1277:
   733                           	opt stack 0
   734                           
   735                           ; 4 bytes @ 0x3A
   736  00009A                     	ds	2
   737  00009C                     printRTC@str:
   738                           	opt stack 0
   739                           
   740                           ; 9 bytes @ 0x3C
   741  00009C                     	ds	2
   742  00009E                     printTemp@units:
   743                           	opt stack 0
   744                           
   745                           ; 1 bytes @ 0x3E
   746  00009E                     	ds	7
   747  0000A5                     _printRTC$1276:
   748                           	opt stack 0
   749                           
   750                           ; 2 bytes @ 0x45
   751  0000A5                     	ds	2
   752  0000A7                     ??_high_isr:
   753                           
   754                           ; 0 bytes @ 0x47
   755  0000A7                     	ds	16
   756                           tblptru	equ	0xFF8
   757                           tblptrh	equ	0xFF7
   758                           tblptrl	equ	0xFF6
   759                           tablat	equ	0xFF5
   760                           postinc0	equ	0xFEE
   761                           wreg	equ	0xFE8
   762                           postdec1	equ	0xFE5
   763                           fsr1l	equ	0xFE1
   764                           
   765                           	psect	cstackCOMRAM
   766  000001                     __pcstackCOMRAM:
   767                           	opt stack 0
   768  000001                     ?_wait:
   769                           	opt stack 0
   770  000001                     ?_isdigit:
   771                           	opt stack 0
   772  000001                     ?___ftge:
   773                           	opt stack 0
   774  000001                     ?_rotate:
   775                           	opt stack 0
   776  000001                     ?_countBits:
   777                           	opt stack 0
   778  000001                     ?_getFontChar:
   779                           	opt stack 0
   780  000001                     ?___awmod:
   781                           	opt stack 0
   782  000001                     ?___lwmod:
   783                           	opt stack 0
   784  000001                     ?___ftpack:
   785                           	opt stack 0
   786  000001                     ?___ftneg:
   787                           	opt stack 0
   788  000001                     ?_hibit:
   789                           	opt stack 0
   790  000001                     ?_lowbit:
   791                           	opt stack 0
   792  000001                     ?__tdiv_to_l_:
   793                           	opt stack 0
   794  000001                     ?__div_to_l_:
   795                           	opt stack 0
   796  000001                     ?___lldiv:
   797                           	opt stack 0
   798  000001                     getFontChar@ch:
   799                           	opt stack 0
   800  000001                     rotate@seg:
   801                           	opt stack 0
   802  000001                     isdigit@c:
   803                           	opt stack 0
   804  000001                     ___awmod@dividend:
   805                           	opt stack 0
   806  000001                     ___lwmod@dividend:
   807                           	opt stack 0
   808  000001                     __div_to_l_@f1:
   809                           	opt stack 0
   810  000001                     ___ftpack@arg:
   811                           	opt stack 0
   812  000001                     __tdiv_to_l_@f1:
   813                           	opt stack 0
   814  000001                     ___ftge@ff1:
   815                           	opt stack 0
   816  000001                     ___ftneg@f1:
   817                           	opt stack 0
   818  000001                     wait@count:
   819                           	opt stack 0
   820  000001                     countBits@num:
   821                           	opt stack 0
   822  000001                     hibit@x:
   823                           	opt stack 0
   824  000001                     lowbit@x:
   825                           	opt stack 0
   826  000001                     ___lldiv@dividend:
   827                           	opt stack 0
   828                           
   829                           ; 4 bytes @ 0x0
   830  000001                     	ds	1
   831  000002                     ??_rotate:
   832  000002                     ??_isdigit:
   833  000002                     ??_getFontChar:
   834                           
   835                           ; 0 bytes @ 0x1
   836  000002                     	ds	1
   837  000003                     _isdigit$914:
   838                           	opt stack 0
   839  000003                     ___awmod@divisor:
   840                           	opt stack 0
   841  000003                     ___lwmod@divisor:
   842                           	opt stack 0
   843                           
   844                           ; 2 bytes @ 0x2
   845  000003                     	ds	1
   846  000004                     ___ftpack@exp:
   847                           	opt stack 0
   848  000004                     __div_to_l_@f2:
   849                           	opt stack 0
   850  000004                     __tdiv_to_l_@f2:
   851                           	opt stack 0
   852  000004                     ___ftge@ff2:
   853                           	opt stack 0
   854                           
   855                           ; 3 bytes @ 0x3
   856  000004                     	ds	1
   857  000005                     ??_hibit:
   858  000005                     ??_lowbit:
   859  000005                     ??___awmod:
   860  000005                     ??___lwmod:
   861  000005                     rotate@ret:
   862                           	opt stack 0
   863  000005                     countBits@ret:
   864                           	opt stack 0
   865  000005                     ___ftpack@sign:
   866                           	opt stack 0
   867  000005                     ___lldiv@divisor:
   868                           	opt stack 0
   869                           
   870                           ; 4 bytes @ 0x4
   871  000005                     	ds	1
   872  000006                     ??___ftpack:
   873  000006                     rotate@cnt:
   874                           	opt stack 0
   875                           
   876                           ; 1 bytes @ 0x5
   877  000006                     	ds	1
   878  000007                     ?_spi:
   879                           	opt stack 0
   880  000007                     ??__tdiv_to_l_:
   881  000007                     ??__div_to_l_:
   882  000007                     ??___ftge:
   883  000007                     spi@addr:
   884                           	opt stack 0
   885  000007                     ___lwmod@counter:
   886                           	opt stack 0
   887                           
   888                           ; 1 bytes @ 0x6
   889  000007                     	ds	1
   890  000008                     ?_daysOfMonth:
   891                           	opt stack 0
   892  000008                     spi@data:
   893                           	opt stack 0
   894  000008                     daysOfMonth@month:
   895                           	opt stack 0
   896  000008                     ___awmod@counter:
   897                           	opt stack 0
   898  000008                     hibit@log2Val:
   899                           	opt stack 0
   900  000008                     lowbit@log2Val:
   901                           	opt stack 0
   902  000008                     __div_to_l_@quot:
   903                           	opt stack 0
   904                           
   905                           ; 4 bytes @ 0x7
   906  000008                     	ds	1
   907  000009                     ??_spi:
   908  000009                     ??___lldiv:
   909  000009                     ?___ftdiv:
   910                           	opt stack 0
   911  000009                     ?___lltoft:
   912                           	opt stack 0
   913  000009                     ?___lwtoft:
   914                           	opt stack 0
   915  000009                     ___awmod@sign:
   916                           	opt stack 0
   917  000009                     daysOfMonth@year:
   918                           	opt stack 0
   919  000009                     ___lwtoft@c:
   920                           	opt stack 0
   921  000009                     ___ftdiv@f1:
   922                           	opt stack 0
   923  000009                     ___lltoft@c:
   924                           	opt stack 0
   925                           
   926                           ; 4 bytes @ 0x8
   927  000009                     	ds	1
   928  00000A                     ??_buttons:
   929  00000A                     ?___awdiv:
   930                           	opt stack 0
   931  00000A                     ___awdiv@dividend:
   932                           	opt stack 0
   933                           
   934                           ; 2 bytes @ 0x9
   935  00000A                     	ds	1
   936  00000B                     ??_daysOfMonth:
   937                           
   938                           ; 0 bytes @ 0xA
   939  00000B                     	ds	1
   940  00000C                     ??___lwtoft:
   941  00000C                     ?_log2:
   942                           	opt stack 0
   943  00000C                     __div_to_l_@cntr:
   944                           	opt stack 0
   945  00000C                     spi@send:
   946                           	opt stack 0
   947  00000C                     ___awdiv@divisor:
   948                           	opt stack 0
   949  00000C                     ___ftdiv@f2:
   950                           	opt stack 0
   951  00000C                     log2@num:
   952                           	opt stack 0
   953  00000C                     __tdiv_to_l_@quot:
   954                           	opt stack 0
   955                           
   956                           ; 4 bytes @ 0xB
   957  00000C                     	ds	1
   958  00000D                     ??___lltoft:
   959  00000D                     ?_tick:
   960                           	opt stack 0
   961  00000D                     tick@val:
   962                           	opt stack 0
   963  00000D                     __div_to_l_@exp1:
   964                           	opt stack 0
   965                           
   966                           ; 1 bytes @ 0xC
   967  00000D                     	ds	1
   968  00000E                     ??_tick:
   969  00000E                     ??___awdiv:
   970  00000E                     spi@cnt:
   971                           	opt stack 0
   972  00000E                     buttons@cnt:
   973                           	opt stack 0
   974                           
   975                           ; 1 bytes @ 0xD
   976  00000E                     	ds	1
   977  00000F                     ??___ftdiv:
   978  00000F                     ___lldiv@quotient:
   979                           	opt stack 0
   980                           
   981                           ; 4 bytes @ 0xE
   982  00000F                     	ds	1
   983  000010                     __tdiv_to_l_@cntr:
   984                           	opt stack 0
   985  000010                     log2@log2Val:
   986                           	opt stack 0
   987                           
   988                           ; 4 bytes @ 0xF
   989  000010                     	ds	1
   990  000011                     __tdiv_to_l_@exp1:
   991                           	opt stack 0
   992  000011                     ___lltoft@exp:
   993                           	opt stack 0
   994                           
   995                           ; 1 bytes @ 0x10
   996  000011                     	ds	2
   997  000013                     ___awdiv@counter:
   998                           	opt stack 0
   999  000013                     ___lldiv@counter:
  1000                           	opt stack 0
  1001                           
  1002                           ; 1 bytes @ 0x12
  1003  000013                     	ds	1
  1004  000014                     ?_writeDigit:
  1005                           	opt stack 0
  1006  000014                     ?___llmod:
  1007                           	opt stack 0
  1008  000014                     writeDigit@digit:
  1009                           	opt stack 0
  1010  000014                     ___awdiv@sign:
  1011                           	opt stack 0
  1012  000014                     ___ftdiv@cntr:
  1013                           	opt stack 0
  1014  000014                     ___llmod@dividend:
  1015                           	opt stack 0
  1016                           
  1017                           ; 4 bytes @ 0x13
  1018  000014                     	ds	1
  1019  000015                     writeDigit@segs:
  1020                           	opt stack 0
  1021  000015                     ___awdiv@quotient:
  1022                           	opt stack 0
  1023  000015                     ___ftdiv@f3:
  1024                           	opt stack 0
  1025                           
  1026                           ; 3 bytes @ 0x14
  1027  000015                     	ds	1
  1028  000016                     ??_writeDigit:
  1029                           
  1030                           ; 0 bytes @ 0x15
  1031  000016                     	ds	1
  1032  000017                     ?___wmul:
  1033                           	opt stack 0
  1034  000017                     writeDigit@dig:
  1035                           	opt stack 0
  1036  000017                     ___wmul@multiplier:
  1037                           	opt stack 0
  1038                           
  1039                           ; 2 bytes @ 0x16
  1040  000017                     	ds	1
  1041  000018                     writeDigit@cnt:
  1042                           	opt stack 0
  1043  000018                     ___ftdiv@exp:
  1044                           	opt stack 0
  1045  000018                     ___llmod@divisor:
  1046                           	opt stack 0
  1047                           
  1048                           ; 4 bytes @ 0x17
  1049  000018                     	ds	1
  1050  000019                     ??_update:
  1051  000019                     ___ftdiv@sign:
  1052                           	opt stack 0
  1053  000019                     ___wmul@multiplicand:
  1054                           	opt stack 0
  1055                           
  1056                           ; 2 bytes @ 0x18
  1057  000019                     	ds	2
  1058  00001B                     
  1059                           ; 0 bytes @ 0x1A
  1060  00001B                     	ds	1
  1061  00001C                     ??___llmod:
  1062                           
  1063                           ; 0 bytes @ 0x1B
  1064  00001C                     	ds	1
  1065  00001D                     ___wmul@product:
  1066                           	opt stack 0
  1067                           
  1068                           ; 2 bytes @ 0x1C
  1069  00001D                     	ds	1
  1070  00001E                     update@cnt:
  1071                           	opt stack 0
  1072  00001E                     ___llmod@counter:
  1073                           	opt stack 0
  1074                           
  1075                           ; 1 bytes @ 0x1D
  1076  00001E                     	ds	1
  1077  00001F                     ?_writeChar:
  1078                           	opt stack 0
  1079  00001F                     ?_dayOfWeek:
  1080                           	opt stack 0
  1081  00001F                     ?___fttol:
  1082                           	opt stack 0
  1083  00001F                     writeChar@digit:
  1084                           	opt stack 0
  1085  00001F                     dayOfWeek@year:
  1086                           	opt stack 0
  1087  00001F                     ___fttol@f1:
  1088                           	opt stack 0
  1089                           
  1090                           ; 3 bytes @ 0x1E
  1091  00001F                     	ds	1
  1092  000020                     writeChar@ch:
  1093                           	opt stack 0
  1094  000020                     dayOfWeek@month:
  1095                           	opt stack 0
  1096                           
  1097                           ; 1 bytes @ 0x1F
  1098  000020                     	ds	1
  1099  000021                     writeChar@dig:
  1100                           	opt stack 0
  1101  000021                     dayOfWeek@day:
  1102                           	opt stack 0
  1103                           
  1104                           ; 1 bytes @ 0x20
  1105  000021                     	ds	1
  1106  000022                     ?_writeString:
  1107                           	opt stack 0
  1108  000022                     ??_dayOfWeek:
  1109  000022                     writeString@digits:
  1110                           	opt stack 0
  1111                           
  1112                           ; 1 bytes @ 0x21
  1113  000022                     	ds	1
  1114  000023                     ??___fttol:
  1115  000023                     writeString@string:
  1116                           	opt stack 0
  1117                           
  1118                           ; 2 bytes @ 0x22
  1119  000023                     	ds	2
  1120  000025                     ??_writeString:
  1121                           
  1122                           ; 0 bytes @ 0x24
  1123  000025                     	ds	3
  1124  000028                     ___fttol@sign1:
  1125                           	opt stack 0
  1126                           
  1127                           ; 1 bytes @ 0x27
  1128  000028                     	ds	1
  1129  000029                     writeString@bits:
  1130                           	opt stack 0
  1131  000029                     ___fttol@lval:
  1132                           	opt stack 0
  1133                           
  1134                           ; 4 bytes @ 0x28
  1135  000029                     	ds	1
  1136  00002A                     writeString@i:
  1137                           	opt stack 0
  1138  00002A                     dayOfWeek@tmp:
  1139                           	opt stack 0
  1140                           
  1141                           ; 4 bytes @ 0x29
  1142  00002A                     	ds	1
  1143  00002B                     writeString@cnt:
  1144                           	opt stack 0
  1145                           
  1146                           ; 1 bytes @ 0x2A
  1147  00002B                     	ds	2
  1148  00002D                     ___fttol@exp1:
  1149                           	opt stack 0
  1150                           
  1151                           ; 1 bytes @ 0x2C
  1152  00002D                     	ds	1
  1153  00002E                     ??_checkDST:
  1154  00002E                     ?___ftmul:
  1155                           	opt stack 0
  1156  00002E                     ___ftmul@f1:
  1157                           	opt stack 0
  1158                           
  1159                           ; 3 bytes @ 0x2D
  1160  00002E                     	ds	3
  1161  000031                     ___ftmul@f2:
  1162                           	opt stack 0
  1163                           
  1164                           ; 3 bytes @ 0x30
  1165  000031                     	ds	3
  1166  000034                     ??___ftmul:
  1167                           
  1168                           ; 0 bytes @ 0x33
  1169  000034                     	ds	2
  1170  000036                     _checkDST$400:
  1171                           	opt stack 0
  1172                           
  1173                           ; 1 bytes @ 0x35
  1174  000036                     	ds	3
  1175  000039                     ___ftmul@exp:
  1176                           	opt stack 0
  1177                           
  1178                           ; 1 bytes @ 0x38
  1179  000039                     	ds	1
  1180  00003A                     ___ftmul@f3_as_product:
  1181                           	opt stack 0
  1182                           
  1183                           ; 3 bytes @ 0x39
  1184  00003A                     	ds	3
  1185  00003D                     ___ftmul@cntr:
  1186                           	opt stack 0
  1187                           
  1188                           ; 1 bytes @ 0x3C
  1189  00003D                     	ds	1
  1190  00003E                     ___ftmul@sign:
  1191                           	opt stack 0
  1192                           
  1193                           ; 1 bytes @ 0x3D
  1194  00003E                     	ds	1
  1195  00003F                     ?___ftadd:
  1196                           	opt stack 0
  1197  00003F                     ?_fround:
  1198                           	opt stack 0
  1199  00003F                     ?_scale:
  1200                           	opt stack 0
  1201  00003F                     ?___asftmul:
  1202                           	opt stack 0
  1203  00003F                     fround@prec:
  1204                           	opt stack 0
  1205  00003F                     scale@scl:
  1206                           	opt stack 0
  1207  00003F                     ___asftmul@f1p:
  1208                           	opt stack 0
  1209  00003F                     ___ftadd@f1:
  1210                           	opt stack 0
  1211                           
  1212                           ; 3 bytes @ 0x3E
  1213  00003F                     	ds	2
  1214  000041                     ___asftmul@f2:
  1215                           	opt stack 0
  1216                           
  1217                           ; 3 bytes @ 0x40
  1218  000041                     	ds	1
  1219  000042                     ??_fround:
  1220  000042                     ??_scale:
  1221  000042                     ___ftadd@f2:
  1222                           	opt stack 0
  1223                           
  1224                           ; 3 bytes @ 0x41
  1225  000042                     	ds	2
  1226  000044                     
  1227                           ; 0 bytes @ 0x43
  1228  000044                     	ds	1
  1229  000045                     ??___ftadd:
  1230                           
  1231                           ; 0 bytes @ 0x44
  1232  000045                     	ds	3
  1233  000048                     _fround$1279:
  1234                           	opt stack 0
  1235  000048                     _scale$1280:
  1236                           	opt stack 0
  1237                           
  1238                           ; 3 bytes @ 0x47
  1239  000048                     	ds	2
  1240  00004A                     ___ftadd@sign:
  1241                           	opt stack 0
  1242                           
  1243                           ; 1 bytes @ 0x49
  1244  00004A                     	ds	1
  1245  00004B                     ___ftadd@exp2:
  1246                           	opt stack 0
  1247  00004B                     _fround$1278:
  1248                           	opt stack 0
  1249                           
  1250                           ; 3 bytes @ 0x4A
  1251  00004B                     	ds	1
  1252  00004C                     ___ftadd@exp1:
  1253                           	opt stack 0
  1254                           
  1255                           ; 1 bytes @ 0x4B
  1256  00004C                     	ds	1
  1257  00004D                     ?___ftsub:
  1258                           	opt stack 0
  1259  00004D                     ___ftsub@f1:
  1260                           	opt stack 0
  1261                           
  1262                           ; 3 bytes @ 0x4C
  1263  00004D                     	ds	1
  1264  00004E                     ?___asftadd:
  1265                           	opt stack 0
  1266  00004E                     ___asftadd@f1p:
  1267                           	opt stack 0
  1268                           
  1269                           ; 2 bytes @ 0x4D
  1270  00004E                     	ds	2
  1271  000050                     ___asftadd@f2:
  1272                           	opt stack 0
  1273  000050                     ___ftsub@f2:
  1274                           	opt stack 0
  1275                           
  1276                           ; 3 bytes @ 0x4F
  1277  000050                     	ds	3
  1278  000053                     ?_getTemp:
  1279                           	opt stack 0
  1280  000053                     ?___asftsub:
  1281                           	opt stack 0
  1282  000053                     ___asftsub@f1p:
  1283                           	opt stack 0
  1284                           
  1285                           ; 2 bytes @ 0x52
  1286  000053                     	ds	2
  1287  000055                     ___asftsub@f2:
  1288                           	opt stack 0
  1289                           
  1290                           ; 3 bytes @ 0x54
  1291  000055                     	ds	1
  1292  000056                     ??_getTemp:
  1293                           
  1294                           ; 0 bytes @ 0x55
  1295  000056                     	ds	2
  1296  000058                     ??_sprintf:
  1297  000058                     
  1298                           ; 0 bytes @ 0x57
  1299  000058                     	ds	6
  1300  00005E                     ?_printRTC:
  1301                           	opt stack 0
  1302  00005E                     printRTC@digits:
  1303                           	opt stack 0
  1304  00005E                     printTemp@digits:
  1305                           	opt stack 0
  1306                           
  1307                           ; 1 bytes @ 0x5D
  1308  00005E                     	ds	1
  1309  00005F                     ??_printTemp:
  1310                           
  1311                           ; 0 bytes @ 0x5E
  1312  00005F                     	ds	1
  1313                           tblptru	equ	0xFF8
  1314                           tblptrh	equ	0xFF7
  1315                           tblptrl	equ	0xFF6
  1316                           tablat	equ	0xFF5
  1317                           postinc0	equ	0xFEE
  1318                           wreg	equ	0xFE8
  1319                           postdec1	equ	0xFE5
  1320                           fsr1l	equ	0xFE1
  1321                           
  1322 ;;
  1323 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1324 ;;
  1325 ;; *************** function _main *****************
  1326 ;; Defined at:
  1327 ;;		line 35 in file "main.c"
  1328 ;; Parameters:    Size  Location     Type
  1329 ;;  argc            2   11[BANK1 ] int 
  1330 ;;  argv            3   13[BANK1 ] PTR PTR unsigned char 
  1331 ;; Auto vars:     Size  Location     Type
  1332 ;;  cnt             4   16[BANK1 ] unsigned long 
  1333 ;; Return value:  Size  Location     Type
  1334 ;;                  2   11[BANK1 ] int 
  1335 ;; Registers used:
  1336 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  1337 ;; Tracked objects:
  1338 ;;		On entry : 0/0
  1339 ;;		On exit  : 0/0
  1340 ;;		Unchanged: 0/0
  1341 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1342 ;;      Params:         0       0       5       0       0       0       0       0       0
  1343 ;;      Locals:         0       0       4       0       0       0       0       0       0
  1344 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1345 ;;      Totals:         0       0       9       0       0       0       0       0       0
  1346 ;;Total ram usage:        9 bytes
  1347 ;; Hardware stack levels required when called:   11
  1348 ;; This function calls:
  1349 ;;		_setup
  1350 ;; This function is called by:
  1351 ;;		Startup code after reset
  1352 ;; This function uses a non-reentrant model
  1353 ;;
  1354                           
  1355                           	psect	text0
  1356  00370A                     __ptext0:
  1357                           	opt stack 0
  1358  00370A                     _main:
  1359                           	opt stack 20
  1360                           
  1361                           ;main.c: 36: setup();
  1362                           
  1363                           ;incstack = 0
  1364                           ;incstack = 0
  1365  00370A  EC6A  F01E         	call	_setup	;wreg free
  1366                           
  1367                           ;main.c: 37: uint32_t cnt = 0;
  1368  00370E  0E00               	movlw	0
  1369  003710  0101               	movlb	1	; () banked
  1370  003712  0101               	movlb	1	; () banked
  1371  003714  6F27               	movwf	main@cnt& (0+255),b
  1372  003716  0E00               	movlw	0
  1373  003718  0101               	movlb	1	; () banked
  1374  00371A  6F28               	movwf	(main@cnt+1)& (0+255),b
  1375  00371C  0E00               	movlw	0
  1376  00371E  0101               	movlb	1	; () banked
  1377  003720  6F29               	movwf	(main@cnt+2)& (0+255),b
  1378  003722  0E00               	movlw	0
  1379  003724  0101               	movlb	1	; () banked
  1380  003726  6F2A               	movwf	(main@cnt+3)& (0+255),b
  1381  003728                     l4545:
  1382                           
  1383                           ; BSR set to: 1
  1384                           ;main.c: 39: if (cnt > 200L) {
  1385  003728  0EC9               	movlw	201
  1386  00372A  0101               	movlb	1	; () banked
  1387  00372C  0101               	movlb	1	; () banked
  1388  00372E  5D27               	subwf	main@cnt& (0+255),w,b
  1389  003730  0E00               	movlw	0
  1390  003732  0101               	movlb	1	; () banked
  1391  003734  5928               	subwfb	(main@cnt+1)& (0+255),w,b
  1392  003736  0E00               	movlw	0
  1393  003738  0101               	movlb	1	; () banked
  1394  00373A  5929               	subwfb	(main@cnt+2)& (0+255),w,b
  1395  00373C  0E00               	movlw	0
  1396  00373E  0101               	movlb	1	; () banked
  1397  003740  0101               	movlb	1	; () banked
  1398  003742  592A               	subwfb	(main@cnt+3)& (0+255),w,b
  1399  003744  A0D8               	btfss	status,0,c
  1400  003746  D00D               	goto	l4549
  1401                           
  1402                           ; BSR set to: 1
  1403                           ;main.c: 40: cnt = 0;
  1404  003748  0E00               	movlw	0
  1405  00374A  0101               	movlb	1	; () banked
  1406  00374C  0101               	movlb	1	; () banked
  1407  00374E  6F27               	movwf	main@cnt& (0+255),b
  1408  003750  0E00               	movlw	0
  1409  003752  0101               	movlb	1	; () banked
  1410  003754  6F28               	movwf	(main@cnt+1)& (0+255),b
  1411  003756  0E00               	movlw	0
  1412  003758  0101               	movlb	1	; () banked
  1413  00375A  6F29               	movwf	(main@cnt+2)& (0+255),b
  1414  00375C  0E00               	movlw	0
  1415  00375E  0101               	movlb	1	; () banked
  1416  003760  6F2A               	movwf	(main@cnt+3)& (0+255),b
  1417  003762                     l4549:
  1418                           
  1419                           ; BSR set to: 1
  1420                           ;main.c: 43: }
  1421                           ;main.c: 44: cnt++;
  1422  003762  0E01               	movlw	1
  1423  003764  0101               	movlb	1	; () banked
  1424  003766  0101               	movlb	1	; () banked
  1425  003768  2727               	addwf	main@cnt& (0+255),f,b
  1426  00376A  0E00               	movlw	0
  1427  00376C  0101               	movlb	1	; () banked
  1428  00376E  2328               	addwfc	(main@cnt+1)& (0+255),f,b
  1429  003770  0E00               	movlw	0
  1430  003772  0101               	movlb	1	; () banked
  1431  003774  2329               	addwfc	(main@cnt+2)& (0+255),f,b
  1432  003776  0E00               	movlw	0
  1433  003778  0101               	movlb	1	; () banked
  1434  00377A  232A               	addwfc	(main@cnt+3)& (0+255),f,b
  1435  00377C  D7D5               	goto	l4545
  1436  00377E                     __end_of_main:
  1437                           	opt stack 0
  1438                           tblptru	equ	0xFF8
  1439                           tblptrh	equ	0xFF7
  1440                           tblptrl	equ	0xFF6
  1441                           tablat	equ	0xFF5
  1442                           postinc0	equ	0xFEE
  1443                           wreg	equ	0xFE8
  1444                           postdec1	equ	0xFE5
  1445                           fsr1l	equ	0xFE1
  1446                           status	equ	0xFD8
  1447                           
  1448 ;; *************** function _setup *****************
  1449 ;; Defined at:
  1450 ;;		line 51 in file "main.c"
  1451 ;; Parameters:    Size  Location     Type
  1452 ;;		None
  1453 ;; Auto vars:     Size  Location     Type
  1454 ;;		None
  1455 ;; Return value:  Size  Location     Type
  1456 ;;		None               void
  1457 ;; Registers used:
  1458 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  1459 ;; Tracked objects:
  1460 ;;		On entry : 0/0
  1461 ;;		On exit  : 0/0
  1462 ;;		Unchanged: 0/0
  1463 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1464 ;;      Params:         0       0       0       0       0       0       0       0       0
  1465 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1466 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1467 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1468 ;;Total ram usage:        0 bytes
  1469 ;; Hardware stack levels used:    1
  1470 ;; Hardware stack levels required when called:   10
  1471 ;; This function calls:
  1472 ;;		_startDisp
  1473 ;;		_initRTC
  1474 ;;		_initTemp
  1475 ;;		_setupButtons
  1476 ;; This function is called by:
  1477 ;;		_main
  1478 ;; This function uses a non-reentrant model
  1479 ;;
  1480                           
  1481                           	psect	text1
  1482  003CD4                     __ptext1:
  1483                           	opt stack 0
  1484  003CD4                     _setup:
  1485                           	opt stack 20
  1486                           
  1487                           ;main.c: 53: GIE = 1;
  1488                           
  1489                           ; BSR set to: 1
  1490                           ;incstack = 0
  1491                           ;incstack = 0
  1492  003CD4  8EF2               	bsf	intcon,7,c	;volatile
  1493                           
  1494                           ;main.c: 54: PEIE = 1;
  1495  003CD6  8CF2               	bsf	intcon,6,c	;volatile
  1496                           
  1497                           ;main.c: 56: startDisp();
  1498  003CD8  EC48  F019         	call	_startDisp	;wreg free
  1499                           
  1500                           ;main.c: 57: initRTC();
  1501  003CDC  ECBD  F01C         	call	_initRTC	;wreg free
  1502                           
  1503                           ;main.c: 60: initTemp();
  1504  003CE0  ECDC  F01E         	call	_initTemp	;wreg free
  1505                           
  1506                           ;main.c: 61: setupButtons();
  1507  003CE4  EC27  F01E         	call	_setupButtons	;wreg free
  1508                           
  1509                           ;main.c: 63: printFn = &printTemp;
  1510  003CE8  0E33               	movlw	high _printTemp
  1511  003CEA  0100               	movlb	0	; () banked
  1512  003CEC  0100               	movlb	0	; () banked
  1513  003CEE  6FF6               	movwf	(_printFn+1)& (0+255),b
  1514  003CF0  0ED0               	movlw	low _printTemp
  1515  003CF2  0100               	movlb	0	; () banked
  1516  003CF4  6FF5               	movwf	_printFn& (0+255),b
  1517                           
  1518                           ; BSR set to: 0
  1519                           ;main.c: 67: TRISA5 = 0;
  1520  003CF6  9A92               	bcf	3986,5,c	;volatile
  1521                           
  1522                           ; BSR set to: 0
  1523  003CF8  0012               	return	
  1524  003CFA                     __end_of_setup:
  1525                           	opt stack 0
  1526                           tblptru	equ	0xFF8
  1527                           tblptrh	equ	0xFF7
  1528                           tblptrl	equ	0xFF6
  1529                           tablat	equ	0xFF5
  1530                           intcon	equ	0xFF2
  1531                           postinc0	equ	0xFEE
  1532                           wreg	equ	0xFE8
  1533                           postdec1	equ	0xFE5
  1534                           fsr1l	equ	0xFE1
  1535                           status	equ	0xFD8
  1536                           
  1537 ;; *************** function _setupButtons *****************
  1538 ;; Defined at:
  1539 ;;		line 9 in file "buttons.c"
  1540 ;; Parameters:    Size  Location     Type
  1541 ;;		None
  1542 ;; Auto vars:     Size  Location     Type
  1543 ;;		None
  1544 ;; Return value:  Size  Location     Type
  1545 ;;		None               void
  1546 ;; Registers used:
  1547 ;;		wreg, status,2
  1548 ;; Tracked objects:
  1549 ;;		On entry : 0/0
  1550 ;;		On exit  : 0/0
  1551 ;;		Unchanged: 0/0
  1552 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1553 ;;      Params:         0       0       0       0       0       0       0       0       0
  1554 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1555 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1556 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1557 ;;Total ram usage:        0 bytes
  1558 ;; Hardware stack levels used:    1
  1559 ;; Hardware stack levels required when called:    8
  1560 ;; This function calls:
  1561 ;;		Nothing
  1562 ;; This function is called by:
  1563 ;;		_setup
  1564 ;; This function uses a non-reentrant model
  1565 ;;
  1566                           
  1567                           	psect	text2
  1568  003C4E                     __ptext2:
  1569                           	opt stack 0
  1570  003C4E                     _setupButtons:
  1571                           	opt stack 21
  1572                           
  1573                           ;buttons.c: 11: TRISB = 0xFF;
  1574                           
  1575                           ; BSR set to: 0
  1576                           ;incstack = 0
  1577                           ;incstack = 0
  1578  003C4E  6893               	setf	3987,c	;volatile
  1579                           
  1580                           ;buttons.c: 12: nRBPU = !0;
  1581  003C50  8EF1               	bsf	intcon2,7,c	;volatile
  1582                           
  1583                           ;buttons.c: 21: tmr0BigCounts = 0;
  1584  003C52  0E00               	movlw	0
  1585  003C54  0100               	movlb	0	; () banked
  1586  003C56  0100               	movlb	0	; () banked
  1587  003C58  6FD5               	movwf	_tmr0BigCounts& (0+255),b
  1588  003C5A  0E00               	movlw	0
  1589  003C5C  0100               	movlb	0	; () banked
  1590  003C5E  6FD6               	movwf	(_tmr0BigCounts+1)& (0+255),b
  1591  003C60  0E00               	movlw	0
  1592  003C62  0100               	movlb	0	; () banked
  1593  003C64  6FD7               	movwf	(_tmr0BigCounts+2)& (0+255),b
  1594  003C66  0E00               	movlw	0
  1595  003C68  0100               	movlb	0	; () banked
  1596  003C6A  6FD8               	movwf	(_tmr0BigCounts+3)& (0+255),b
  1597                           
  1598                           ;buttons.c: 22: T0CON = 0b00000111;
  1599  003C6C  0E07               	movlw	7
  1600  003C6E  6ED5               	movwf	4053,c	;volatile
  1601                           
  1602                           ;buttons.c: 23: TMR0 = (65536-50356);
  1603  003C70  0E3B               	movlw	59
  1604  003C72  6ED7               	movwf	4055,c	;volatile
  1605  003C74  0E4C               	movlw	76
  1606  003C76  6ED6               	movwf	4054,c	;volatile
  1607                           
  1608                           ; BSR set to: 0
  1609                           ;buttons.c: 24: TMR0IE = 1;
  1610  003C78  8AF2               	bsf	intcon,5,c	;volatile
  1611                           
  1612                           ; BSR set to: 0
  1613                           ;buttons.c: 25: TMR0IF = CLEAR;
  1614  003C7A  94F2               	bcf	intcon,2,c	;volatile
  1615                           
  1616                           ; BSR set to: 0
  1617                           ;buttons.c: 26: TMR0ON = 1;
  1618  003C7C  8ED5               	bsf	4053,7,c	;volatile
  1619                           
  1620                           ; BSR set to: 0
  1621  003C7E  0012               	return	
  1622  003C80                     __end_of_setupButtons:
  1623                           	opt stack 0
  1624                           tblptru	equ	0xFF8
  1625                           tblptrh	equ	0xFF7
  1626                           tblptrl	equ	0xFF6
  1627                           tablat	equ	0xFF5
  1628                           intcon	equ	0xFF2
  1629                           intcon2	equ	0xFF1
  1630                           postinc0	equ	0xFEE
  1631                           wreg	equ	0xFE8
  1632                           postdec1	equ	0xFE5
  1633                           fsr1l	equ	0xFE1
  1634                           status	equ	0xFD8
  1635                           
  1636 ;; *************** function _initTemp *****************
  1637 ;; Defined at:
  1638 ;;		line 7 in file "temp.c"
  1639 ;; Parameters:    Size  Location     Type
  1640 ;;		None
  1641 ;; Auto vars:     Size  Location     Type
  1642 ;;		None
  1643 ;; Return value:  Size  Location     Type
  1644 ;;		None               void
  1645 ;; Registers used:
  1646 ;;		wreg, status,2
  1647 ;; Tracked objects:
  1648 ;;		On entry : 0/0
  1649 ;;		On exit  : 0/0
  1650 ;;		Unchanged: 0/0
  1651 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1652 ;;      Params:         0       0       0       0       0       0       0       0       0
  1653 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1654 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1655 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1656 ;;Total ram usage:        0 bytes
  1657 ;; Hardware stack levels used:    1
  1658 ;; Hardware stack levels required when called:    8
  1659 ;; This function calls:
  1660 ;;		Nothing
  1661 ;; This function is called by:
  1662 ;;		_setup
  1663 ;; This function uses a non-reentrant model
  1664 ;;
  1665                           
  1666                           	psect	text3
  1667  003DB8                     __ptext3:
  1668                           	opt stack 0
  1669  003DB8                     _initTemp:
  1670                           	opt stack 21
  1671                           
  1672                           ;temp.c: 15: ADCON0 = 0b00000001;
  1673                           
  1674                           ; BSR set to: 0
  1675                           ;incstack = 0
  1676                           ;incstack = 0
  1677  003DB8  0E01               	movlw	1
  1678  003DBA  6EC2               	movwf	4034,c	;volatile
  1679                           
  1680                           ;temp.c: 22: ADCON1 = 0b00001110;
  1681  003DBC  0E0E               	movlw	14
  1682  003DBE  6EC1               	movwf	4033,c	;volatile
  1683                           
  1684                           ;temp.c: 31: ADCON2 = 0b10001101;
  1685  003DC0  0E8D               	movlw	141
  1686  003DC2  6EC0               	movwf	4032,c	;volatile
  1687  003DC4  0012               	return	
  1688  003DC6                     __end_of_initTemp:
  1689                           	opt stack 0
  1690                           tblptru	equ	0xFF8
  1691                           tblptrh	equ	0xFF7
  1692                           tblptrl	equ	0xFF6
  1693                           tablat	equ	0xFF5
  1694                           intcon	equ	0xFF2
  1695                           intcon2	equ	0xFF1
  1696                           postinc0	equ	0xFEE
  1697                           wreg	equ	0xFE8
  1698                           postdec1	equ	0xFE5
  1699                           fsr1l	equ	0xFE1
  1700                           status	equ	0xFD8
  1701                           
  1702 ;; *************** function _initRTC *****************
  1703 ;; Defined at:
  1704 ;;		line 7 in file "RTC.c"
  1705 ;; Parameters:    Size  Location     Type
  1706 ;;		None
  1707 ;; Auto vars:     Size  Location     Type
  1708 ;;		None
  1709 ;; Return value:  Size  Location     Type
  1710 ;;		None               void
  1711 ;; Registers used:
  1712 ;;		wreg, status,2, cstack
  1713 ;; Tracked objects:
  1714 ;;		On entry : 0/0
  1715 ;;		On exit  : 0/0
  1716 ;;		Unchanged: 0/0
  1717 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1718 ;;      Params:         0       0       0       0       0       0       0       0       0
  1719 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1720 ;;      Temps:          0       0       1       0       0       0       0       0       0
  1721 ;;      Totals:         0       0       1       0       0       0       0       0       0
  1722 ;;Total ram usage:        1 bytes
  1723 ;; Hardware stack levels used:    1
  1724 ;; Hardware stack levels required when called:    9
  1725 ;; This function calls:
  1726 ;;		_loadTime
  1727 ;; This function is called by:
  1728 ;;		_setup
  1729 ;; This function uses a non-reentrant model
  1730 ;;
  1731                           
  1732                           	psect	text4
  1733  00397A                     __ptext4:
  1734                           	opt stack 0
  1735  00397A                     _initRTC:
  1736                           	opt stack 20
  1737                           
  1738                           ;RTC.c: 8: date.view = DD_MM_YY;
  1739                           
  1740                           ;incstack = 0
  1741                           ;incstack = 0
  1742  00397A  0101               	movlb	1	; () banked
  1743  00397C  6F21               	movwf	??_initRTC& (0+255),b
  1744  00397E  0E09               	movlw	9
  1745  003980  0101               	movlb	1	; () banked
  1746  003982  0101               	movlb	1	; () banked
  1747  003984  6F16               	movwf	(_date+9)& (0+255),b
  1748  003986  0101               	movlb	1	; () banked
  1749  003988  5121               	movf	??_initRTC& (0+255),w,b
  1750                           
  1751                           ;RTC.c: 9: date.month = 1;
  1752  00398A  0101               	movlb	1	; () banked
  1753  00398C  6F21               	movwf	??_initRTC& (0+255),b
  1754  00398E  0E01               	movlw	1
  1755  003990  0101               	movlb	1	; () banked
  1756  003992  0101               	movlb	1	; () banked
  1757  003994  6F12               	movwf	(_date+5)& (0+255),b
  1758  003996  0101               	movlb	1	; () banked
  1759  003998  5121               	movf	??_initRTC& (0+255),w,b
  1760                           
  1761                           ;RTC.c: 10: date.day = 1;
  1762  00399A  0101               	movlb	1	; () banked
  1763  00399C  6F21               	movwf	??_initRTC& (0+255),b
  1764  00399E  0E01               	movlw	1
  1765  0039A0  0101               	movlb	1	; () banked
  1766  0039A2  0101               	movlb	1	; () banked
  1767  0039A4  6F10               	movwf	(_date+3)& (0+255),b
  1768  0039A6  0101               	movlb	1	; () banked
  1769  0039A8  5121               	movf	??_initRTC& (0+255),w,b
  1770                           
  1771                           ; BSR set to: 1
  1772                           ;RTC.c: 11: date.year = 2013;
  1773  0039AA  0E07               	movlw	7
  1774  0039AC  0101               	movlb	1	; () banked
  1775  0039AE  0101               	movlb	1	; () banked
  1776  0039B0  6F14               	movwf	(_date+7)& (0+255),b
  1777  0039B2  0EDD               	movlw	221
  1778  0039B4  0101               	movlb	1	; () banked
  1779  0039B6  6F13               	movwf	(_date+6)& (0+255),b
  1780                           
  1781                           ; BSR set to: 1
  1782                           ;RTC.c: 13: loadTime();
  1783  0039B8  ECE3  F01E         	call	_loadTime	;wreg free
  1784                           
  1785                           ;RTC.c: 16: T1CON = 0b10110000;
  1786  0039BC  0EB0               	movlw	176
  1787  0039BE  6ECD               	movwf	4045,c	;volatile
  1788                           
  1789                           ;RTC.c: 17: TMR1 = (65536-63765);
  1790  0039C0  0E06               	movlw	6
  1791  0039C2  6ECF               	movwf	4047,c	;volatile
  1792  0039C4  0EEB               	movlw	235
  1793  0039C6  6ECE               	movwf	4046,c	;volatile
  1794                           
  1795                           ;RTC.c: 18: TMR1IE = 1;
  1796  0039C8  809D               	bsf	3997,0,c	;volatile
  1797                           
  1798                           ;RTC.c: 19: TMR1IF = CLEAR;
  1799  0039CA  909E               	bcf	3998,0,c	;volatile
  1800                           
  1801                           ;RTC.c: 20: TMR1ON = 1;
  1802  0039CC  80CD               	bsf	4045,0,c	;volatile
  1803  0039CE  0012               	return	
  1804  0039D0                     __end_of_initRTC:
  1805                           	opt stack 0
  1806                           tblptru	equ	0xFF8
  1807                           tblptrh	equ	0xFF7
  1808                           tblptrl	equ	0xFF6
  1809                           tablat	equ	0xFF5
  1810                           intcon	equ	0xFF2
  1811                           intcon2	equ	0xFF1
  1812                           postinc0	equ	0xFEE
  1813                           wreg	equ	0xFE8
  1814                           postdec1	equ	0xFE5
  1815                           fsr1l	equ	0xFE1
  1816                           status	equ	0xFD8
  1817                           
  1818 ;; *************** function _loadTime *****************
  1819 ;; Defined at:
  1820 ;;		line 25 in file "RTC.c"
  1821 ;; Parameters:    Size  Location     Type
  1822 ;;		None
  1823 ;; Auto vars:     Size  Location     Type
  1824 ;;  newDate        10    0[BANK1 ] struct sDate
  1825 ;; Return value:  Size  Location     Type
  1826 ;;                  10  198[COMRAM] struct sDate
  1827 ;; Registers used:
  1828 ;;		None
  1829 ;; Tracked objects:
  1830 ;;		On entry : 0/0
  1831 ;;		On exit  : 0/0
  1832 ;;		Unchanged: 0/0
  1833 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1834 ;;      Params:         0       0       0       0       0       0       0       0       0
  1835 ;;      Locals:         0       0      10       0       0       0       0       0       0
  1836 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1837 ;;      Totals:         0       0      10       0       0       0       0       0       0
  1838 ;;Total ram usage:       10 bytes
  1839 ;; Hardware stack levels used:    1
  1840 ;; Hardware stack levels required when called:    8
  1841 ;; This function calls:
  1842 ;;		Nothing
  1843 ;; This function is called by:
  1844 ;;		_initRTC
  1845 ;; This function uses a non-reentrant model
  1846 ;;
  1847                           
  1848                           	psect	text5
  1849  003DC6                     __ptext5:
  1850                           	opt stack 0
  1851  003DC6                     _loadTime:
  1852                           	opt stack 20
  1853                           
  1854                           ;RTC.c: 26: struct sDate newDate;
  1855                           ;RTC.c: 27: return newDate;
  1856                           ;	Return value of _loadTime is never used
  1857                           
  1858                           ;incstack = 0
  1859                           ;incstack = 0
  1860  003DC6  0012               	return	
  1861  003DC8                     __end_of_loadTime:
  1862                           	opt stack 0
  1863                           tblptru	equ	0xFF8
  1864                           tblptrh	equ	0xFF7
  1865                           tblptrl	equ	0xFF6
  1866                           tablat	equ	0xFF5
  1867                           intcon	equ	0xFF2
  1868                           intcon2	equ	0xFF1
  1869                           postinc0	equ	0xFEE
  1870                           wreg	equ	0xFE8
  1871                           postdec1	equ	0xFE5
  1872                           fsr1l	equ	0xFE1
  1873                           status	equ	0xFD8
  1874                           
  1875 ;; *************** function _startDisp *****************
  1876 ;; Defined at:
  1877 ;;		line 59 in file "disp.c"
  1878 ;; Parameters:    Size  Location     Type
  1879 ;;		None
  1880 ;; Auto vars:     Size  Location     Type
  1881 ;;		None
  1882 ;; Return value:  Size  Location     Type
  1883 ;;		None               void
  1884 ;; Registers used:
  1885 ;;		wreg, status,2, status,0, cstack
  1886 ;; Tracked objects:
  1887 ;;		On entry : 0/0
  1888 ;;		On exit  : 0/0
  1889 ;;		Unchanged: 0/0
  1890 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1891 ;;      Params:         0       0       0       0       0       0       0       0       0
  1892 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1893 ;;      Temps:          0       0       1       0       0       0       0       0       0
  1894 ;;      Totals:         0       0       1       0       0       0       0       0       0
  1895 ;;Total ram usage:        1 bytes
  1896 ;; Hardware stack levels used:    1
  1897 ;; Hardware stack levels required when called:    9
  1898 ;; This function calls:
  1899 ;;		_setBrightness
  1900 ;;		_setTest
  1901 ;; This function is called by:
  1902 ;;		_setup
  1903 ;; This function uses a non-reentrant model
  1904 ;;
  1905                           
  1906                           	psect	text6
  1907  003290                     __ptext6:
  1908                           	opt stack 0
  1909  003290                     _startDisp:
  1910                           	opt stack 20
  1911                           
  1912                           ;disp.c: 61: TRISA1 = 0;
  1913                           
  1914                           ;incstack = 0
  1915                           ;incstack = 0
  1916  003290  9292               	bcf	3986,1,c	;volatile
  1917                           
  1918                           ;disp.c: 62: TRISA3 = 0;
  1919  003292  9692               	bcf	3986,3,c	;volatile
  1920                           
  1921                           ;disp.c: 63: TRISA4 = 0;
  1922  003294  9892               	bcf	3986,4,c	;volatile
  1923                           
  1924                           ;disp.c: 64: TRISA2 = 1;
  1925  003296  8492               	bsf	3986,2,c	;volatile
  1926                           
  1927                           ;disp.c: 67: screen.digits.bits[0] = 0;
  1928  003298  0E00               	movlw	0
  1929  00329A  0101               	movlb	1	; () banked
  1930  00329C  0101               	movlb	1	; () banked
  1931  00329E  6F00               	movwf	_screen& (0+255),b
  1932  0032A0  0E00               	movlw	0
  1933  0032A2  0101               	movlb	1	; () banked
  1934  0032A4  6F01               	movwf	(_screen+1)& (0+255),b
  1935  0032A6  0E00               	movlw	0
  1936  0032A8  0101               	movlb	1	; () banked
  1937  0032AA  6F02               	movwf	(_screen+2)& (0+255),b
  1938  0032AC  0E00               	movlw	0
  1939  0032AE  0101               	movlb	1	; () banked
  1940  0032B0  6F03               	movwf	(_screen+3)& (0+255),b
  1941                           
  1942                           ;disp.c: 68: screen.digits.bits[1] = 0;
  1943  0032B2  0E00               	movlw	0
  1944  0032B4  0101               	movlb	1	; () banked
  1945  0032B6  0101               	movlb	1	; () banked
  1946  0032B8  6F04               	movwf	(_screen+4)& (0+255),b
  1947  0032BA  0E00               	movlw	0
  1948  0032BC  0101               	movlb	1	; () banked
  1949  0032BE  6F05               	movwf	(_screen+5)& (0+255),b
  1950  0032C0  0E00               	movlw	0
  1951  0032C2  0101               	movlb	1	; () banked
  1952  0032C4  6F06               	movwf	(_screen+6)& (0+255),b
  1953  0032C6  0E00               	movlw	0
  1954  0032C8  0101               	movlb	1	; () banked
  1955  0032CA  6F07               	movwf	(_screen+7)& (0+255),b
  1956                           
  1957                           ; BSR set to: 1
  1958                           ;disp.c: 70: setBrightness(0b1111);
  1959  0032CC  0101               	movlb	1	; () banked
  1960  0032CE  6F18               	movwf	??_startDisp& (0+255),b
  1961  0032D0  0E0F               	movlw	15
  1962  0032D2  0101               	movlb	1	; () banked
  1963  0032D4  0101               	movlb	1	; () banked
  1964  0032D6  6F17               	movwf	?_setBrightness& (0+255),b
  1965  0032D8  0101               	movlb	1	; () banked
  1966  0032DA  5118               	movf	??_startDisp& (0+255),w,b
  1967  0032DC  ECA2  F01E         	call	_setBrightness	;wreg free
  1968                           
  1969                           ;disp.c: 72: screen.decode = 0;
  1970  0032E0  0101               	movlb	1	; () banked
  1971  0032E2  9108               	bcf	(_screen+8)& (0+255),0,b
  1972  0032E4  0101               	movlb	1	; () banked
  1973  0032E6  9308               	bcf	(_screen+8)& (0+255),1,b
  1974  0032E8  0101               	movlb	1	; () banked
  1975  0032EA  9508               	bcf	(_screen+8)& (0+255),2,b
  1976  0032EC  0101               	movlb	1	; () banked
  1977  0032EE  9708               	bcf	(_screen+8)& (0+255),3,b
  1978  0032F0  0101               	movlb	1	; () banked
  1979  0032F2  9908               	bcf	(_screen+8)& (0+255),4,b
  1980  0032F4  0101               	movlb	1	; () banked
  1981  0032F6  9B08               	bcf	(_screen+8)& (0+255),5,b
  1982  0032F8  0101               	movlb	1	; () banked
  1983  0032FA  9D08               	bcf	(_screen+8)& (0+255),6,b
  1984  0032FC  0101               	movlb	1	; () banked
  1985  0032FE  9F08               	bcf	(_screen+8)& (0+255),7,b
  1986                           
  1987                           ; BSR set to: 1
  1988                           ;disp.c: 74: screen.scan = 0b111;
  1989  003300  0101               	movlb	1	; () banked
  1990  003302  8909               	bsf	(_screen+9)& (0+255),4,b
  1991  003304  0101               	movlb	1	; () banked
  1992  003306  8B09               	bsf	(_screen+9)& (0+255),5,b
  1993  003308  0101               	movlb	1	; () banked
  1994  00330A  8D09               	bsf	(_screen+9)& (0+255),6,b
  1995                           
  1996                           ; BSR set to: 1
  1997                           ;disp.c: 76: setTest(0);
  1998  00330C  0101               	movlb	1	; () banked
  1999  00330E  6F18               	movwf	??_startDisp& (0+255),b
  2000  003310  0E00               	movlw	0
  2001  003312  0101               	movlb	1	; () banked
  2002  003314  0101               	movlb	1	; () banked
  2003  003316  6F17               	movwf	?_setTest& (0+255),b
  2004  003318  0101               	movlb	1	; () banked
  2005  00331A  5118               	movf	??_startDisp& (0+255),w,b
  2006  00331C  ECB2  F01E         	call	_setTest	;wreg free
  2007                           
  2008                           ;disp.c: 78: screen.shutdown = 0;
  2009  003320  0101               	movlb	1	; () banked
  2010  003322  0101               	movlb	1	; () banked
  2011  003324  910A               	bcf	(_screen+10)& (0+255),0,b
  2012                           
  2013                           ; BSR set to: 1
  2014                           ;disp.c: 80: screen.changed = 0xFFFF;
  2015  003326  0101               	movlb	1	; () banked
  2016  003328  0101               	movlb	1	; () banked
  2017  00332A  690B               	setf	(_screen+11)& (0+255),b
  2018  00332C  0101               	movlb	1	; () banked
  2019  00332E  690C               	setf	(_screen+12)& (0+255),b
  2020                           
  2021                           ; BSR set to: 1
  2022  003330  0012               	return	
  2023  003332                     __end_of_startDisp:
  2024                           	opt stack 0
  2025                           tblptru	equ	0xFF8
  2026                           tblptrh	equ	0xFF7
  2027                           tblptrl	equ	0xFF6
  2028                           tablat	equ	0xFF5
  2029                           intcon	equ	0xFF2
  2030                           intcon2	equ	0xFF1
  2031                           postinc0	equ	0xFEE
  2032                           wreg	equ	0xFE8
  2033                           postdec1	equ	0xFE5
  2034                           fsr1l	equ	0xFE1
  2035                           status	equ	0xFD8
  2036                           
  2037 ;; *************** function _setTest *****************
  2038 ;; Defined at:
  2039 ;;		line 53 in file "disp.c"
  2040 ;; Parameters:    Size  Location     Type
  2041 ;;  state           1    0[BANK1 ] unsigned char 
  2042 ;; Auto vars:     Size  Location     Type
  2043 ;;		None
  2044 ;; Return value:  Size  Location     Type
  2045 ;;		None               void
  2046 ;; Registers used:
  2047 ;;		status,2, status,0
  2048 ;; Tracked objects:
  2049 ;;		On entry : 0/0
  2050 ;;		On exit  : 0/0
  2051 ;;		Unchanged: 0/0
  2052 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2053 ;;      Params:         0       0       1       0       0       0       0       0       0
  2054 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2055 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2056 ;;      Totals:         0       0       1       0       0       0       0       0       0
  2057 ;;Total ram usage:        1 bytes
  2058 ;; Hardware stack levels used:    1
  2059 ;; Hardware stack levels required when called:    8
  2060 ;; This function calls:
  2061 ;;		Nothing
  2062 ;; This function is called by:
  2063 ;;		_startDisp
  2064 ;; This function uses a non-reentrant model
  2065 ;;
  2066                           
  2067                           	psect	text7
  2068  003D64                     __ptext7:
  2069                           	opt stack 0
  2070  003D64                     _setTest:
  2071                           	opt stack 20
  2072                           
  2073                           ;disp.c: 54: screen.test = state;
  2074                           
  2075                           ; BSR set to: 1
  2076                           ;incstack = 0
  2077                           ;incstack = 0
  2078  003D64  0101               	movlb	1	; () banked
  2079  003D66  0101               	movlb	1	; () banked
  2080  003D68  B117               	btfsc	setTest@state& (0+255),0,b
  2081  003D6A  D004               	bra	u2445
  2082  003D6C  0101               	movlb	1	; () banked
  2083  003D6E  0101               	movlb	1	; () banked
  2084  003D70  9F09               	bcf	(_screen+9)& (0+255),7,b
  2085  003D72  D003               	bra	u2446
  2086  003D74                     u2445:
  2087  003D74  0101               	movlb	1	; () banked
  2088  003D76  0101               	movlb	1	; () banked
  2089  003D78  8F09               	bsf	(_screen+9)& (0+255),7,b
  2090  003D7A                     u2446:
  2091                           
  2092                           ; BSR set to: 1
  2093                           ;disp.c: 55: screen.changed |= (1 << 12);
  2094  003D7A  0101               	movlb	1	; () banked
  2095  003D7C  0101               	movlb	1	; () banked
  2096  003D7E  890C               	bsf	(_screen+12)& (0+255),4,b
  2097                           
  2098                           ; BSR set to: 1
  2099  003D80  0012               	return	
  2100  003D82                     __end_of_setTest:
  2101                           	opt stack 0
  2102                           tblptru	equ	0xFF8
  2103                           tblptrh	equ	0xFF7
  2104                           tblptrl	equ	0xFF6
  2105                           tablat	equ	0xFF5
  2106                           intcon	equ	0xFF2
  2107                           intcon2	equ	0xFF1
  2108                           postinc0	equ	0xFEE
  2109                           wreg	equ	0xFE8
  2110                           postdec1	equ	0xFE5
  2111                           fsr1l	equ	0xFE1
  2112                           status	equ	0xFD8
  2113                           
  2114 ;; *************** function _setBrightness *****************
  2115 ;; Defined at:
  2116 ;;		line 46 in file "disp.c"
  2117 ;; Parameters:    Size  Location     Type
  2118 ;;  bright          1    0[BANK1 ] unsigned char 
  2119 ;; Auto vars:     Size  Location     Type
  2120 ;;		None
  2121 ;; Return value:  Size  Location     Type
  2122 ;;		None               void
  2123 ;; Registers used:
  2124 ;;		wreg, status,2, status,0
  2125 ;; Tracked objects:
  2126 ;;		On entry : 0/0
  2127 ;;		On exit  : 0/0
  2128 ;;		Unchanged: 0/0
  2129 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2130 ;;      Params:         0       0       1       0       0       0       0       0       0
  2131 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2132 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2133 ;;      Totals:         0       0       1       0       0       0       0       0       0
  2134 ;;Total ram usage:        1 bytes
  2135 ;; Hardware stack levels used:    1
  2136 ;; Hardware stack levels required when called:    8
  2137 ;; This function calls:
  2138 ;;		Nothing
  2139 ;; This function is called by:
  2140 ;;		_startDisp
  2141 ;; This function uses a non-reentrant model
  2142 ;;
  2143                           
  2144                           	psect	text8
  2145  003D44                     __ptext8:
  2146                           	opt stack 0
  2147  003D44                     _setBrightness:
  2148                           	opt stack 20
  2149                           
  2150                           ;disp.c: 47: screen.brightness = bright;
  2151                           
  2152                           ; BSR set to: 1
  2153                           ;incstack = 0
  2154                           ;incstack = 0
  2155  003D44  0101               	movlb	1	; () banked
  2156  003D46  0101               	movlb	1	; () banked
  2157  003D48  5109               	movf	(_screen+9)& (0+255),w,b
  2158  003D4A  0101               	movlb	1	; () banked
  2159  003D4C  0101               	movlb	1	; () banked
  2160  003D4E  1917               	xorwf	setBrightness@bright& (0+255),w,b
  2161  003D50  0BF0               	andlw	-16
  2162  003D52  0101               	movlb	1	; () banked
  2163  003D54  1917               	xorwf	setBrightness@bright& (0+255),w,b
  2164  003D56  0101               	movlb	1	; () banked
  2165  003D58  0101               	movlb	1	; () banked
  2166  003D5A  6F09               	movwf	(_screen+9)& (0+255),b
  2167                           
  2168                           ; BSR set to: 1
  2169                           ;disp.c: 48: screen.changed |= (1 << 10);
  2170  003D5C  0101               	movlb	1	; () banked
  2171  003D5E  0101               	movlb	1	; () banked
  2172  003D60  850C               	bsf	(_screen+12)& (0+255),2,b
  2173                           
  2174                           ; BSR set to: 1
  2175  003D62  0012               	return	
  2176  003D64                     __end_of_setBrightness:
  2177                           	opt stack 0
  2178                           tblptru	equ	0xFF8
  2179                           tblptrh	equ	0xFF7
  2180                           tblptrl	equ	0xFF6
  2181                           tablat	equ	0xFF5
  2182                           intcon	equ	0xFF2
  2183                           intcon2	equ	0xFF1
  2184                           postinc0	equ	0xFEE
  2185                           wreg	equ	0xFE8
  2186                           postdec1	equ	0xFE5
  2187                           fsr1l	equ	0xFE1
  2188                           status	equ	0xFD8
  2189                           
  2190 ;; *************** function _high_isr *****************
  2191 ;; Defined at:
  2192 ;;		line 72 in file "main.c"
  2193 ;; Parameters:    Size  Location     Type
  2194 ;;		None
  2195 ;; Auto vars:     Size  Location     Type
  2196 ;;		None
  2197 ;; Return value:  Size  Location     Type
  2198 ;;		None               void
  2199 ;; Registers used:
  2200 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  2201 ;; Tracked objects:
  2202 ;;		On entry : 0/0
  2203 ;;		On exit  : 0/0
  2204 ;;		Unchanged: 0/0
  2205 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2206 ;;      Params:         0       0       0       0       0       0       0       0       0
  2207 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2208 ;;      Temps:          0      16       0       0       0       0       0       0       0
  2209 ;;      Totals:         0      16       0       0       0       0       0       0       0
  2210 ;;Total ram usage:       16 bytes
  2211 ;; Hardware stack levels used:    1
  2212 ;; Hardware stack levels required when called:    7
  2213 ;; This function calls:
  2214 ;;		_tick
  2215 ;;		_update
  2216 ;;		_buttons
  2217 ;;		_printRTC
  2218 ;;		_printTemp
  2219 ;;		Absolute function
  2220 ;; This function is called by:
  2221 ;;		Interrupt level 2
  2222 ;; This function uses a non-reentrant model
  2223 ;;
  2224                           
  2225                           	psect	intcode
  2226  000008                     __pintcode:
  2227                           	opt stack 0
  2228  000008                     _high_isr:
  2229                           	opt stack 20
  2230                           
  2231                           ; BSR set to: 1
  2232                           ;incstack = 0
  2233  000008  CFFA F0A9          	movff	pclath,??_high_isr+2
  2234  00000C  CFFB F0AA          	movff	pclatu,??_high_isr+3
  2235  000010  CFE9 F0AB          	movff	fsr0l,??_high_isr+4
  2236  000014  ED2D  F010         	call	int_func,f	;refresh shadow registers
  2237                           pclatu	equ	0xFFB
  2238                           pclath	equ	0xFFA
  2239                           tblptru	equ	0xFF8
  2240                           tblptrh	equ	0xFF7
  2241                           tblptrl	equ	0xFF6
  2242                           tablat	equ	0xFF5
  2243                           intcon	equ	0xFF2
  2244                           intcon2	equ	0xFF1
  2245                           postinc0	equ	0xFEE
  2246                           fsr0l	equ	0xFE9
  2247                           wreg	equ	0xFE8
  2248                           postdec1	equ	0xFE5
  2249                           fsr1l	equ	0xFE1
  2250                           status	equ	0xFD8
  2251                           
  2252                           	psect	intcode_body
  2253  00205A                     __pintcode_body:
  2254                           	opt stack 20
  2255  00205A                     int_func:
  2256                           	opt stack 20
  2257  00205A  0006               	pop		; remove dummy address from shadow register refresh
  2258  00205C  CFEA F0AC          	movff	fsr0h,??_high_isr+5
  2259  002060  CFE1 F0AD          	movff	fsr1l,??_high_isr+6
  2260  002064  CFE2 F0AE          	movff	fsr1h,??_high_isr+7
  2261  002068  CFD9 F0AF          	movff	fsr2l,??_high_isr+8
  2262  00206C  CFDA F0B0          	movff	fsr2h,??_high_isr+9
  2263  002070  CFF3 F0B1          	movff	prodl,??_high_isr+10
  2264  002074  CFF4 F0B2          	movff	prodh,??_high_isr+11
  2265  002078  CFF6 F0B3          	movff	tblptrl,??_high_isr+12
  2266  00207C  CFF7 F0B4          	movff	tblptrh,??_high_isr+13
  2267  002080  CFF8 F0B5          	movff	tblptru,??_high_isr+14
  2268  002084  CFF5 F0B6          	movff	tablat,??_high_isr+15
  2269  002088                     
  2270                           ;main.c: 73: if (TMR1IE && TMR1IF) {
  2271  002088  A09D               	btfss	3997,0,c	;volatile
  2272  00208A  D001               	goto	i2u475_41
  2273  00208C  D001               	goto	i2u475_40
  2274  00208E                     i2u475_41:
  2275  00208E  D085               	goto	i2l6157
  2276  002090                     i2u475_40:
  2277  002090  A09E               	btfss	3998,0,c	;volatile
  2278  002092  D001               	goto	i2u476_41
  2279  002094  D001               	goto	i2u476_40
  2280  002096                     i2u476_41:
  2281  002096  D081               	goto	i2l6157
  2282  002098                     i2u476_40:
  2283  002098                     
  2284                           ;main.c: 74: TMR1ON = 0;
  2285  002098  90CD               	bcf	4045,0,c	;volatile
  2286                           
  2287                           ;main.c: 75: TMR1IF = CLEAR;
  2288  00209A  909E               	bcf	3998,0,c	;volatile
  2289  00209C                     
  2290                           ;main.c: 76: TMR1 = 0;
  2291  00209C  0E00               	movlw	0
  2292  00209E  6ECF               	movwf	4047,c	;volatile
  2293  0020A0  0E00               	movlw	0
  2294  0020A2  6ECE               	movwf	4046,c	;volatile
  2295  0020A4                     
  2296                           ;main.c: 77: if (++rtc_big_ticks > (1+1)) {
  2297  0020A4  0100               	movlb	0	; () banked
  2298  0020A6  0100               	movlb	0	; () banked
  2299  0020A8  4BD9               	infsnz	_rtc_big_ticks& (0+255),f,b
  2300  0020AA  2BDA               	incf	(_rtc_big_ticks+1)& (0+255),f,b
  2301  0020AC  0E03               	movlw	3
  2302  0020AE  0100               	movlb	0	; () banked
  2303  0020B0  5DD9               	subwf	_rtc_big_ticks& (0+255),w,b
  2304  0020B2  0E00               	movlw	0
  2305  0020B4  0100               	movlb	0	; () banked
  2306  0020B6  59DA               	subwfb	(_rtc_big_ticks+1)& (0+255),w,b
  2307  0020B8  A0D8               	btfss	status,0,c
  2308  0020BA  D001               	goto	i2u477_41
  2309  0020BC  D001               	goto	i2u477_40
  2310  0020BE                     i2u477_41:
  2311  0020BE  D06B               	goto	i2l6155
  2312  0020C0                     i2u477_40:
  2313  0020C0                     
  2314                           ; BSR set to: 0
  2315                           ;main.c: 78: rtc_big_ticks = 0;
  2316  0020C0  0E00               	movlw	0
  2317  0020C2  0100               	movlb	0	; () banked
  2318  0020C4  0100               	movlb	0	; () banked
  2319  0020C6  6FDA               	movwf	(_rtc_big_ticks+1)& (0+255),b
  2320  0020C8  0E00               	movlw	0
  2321  0020CA  0100               	movlb	0	; () banked
  2322  0020CC  6FD9               	movwf	_rtc_big_ticks& (0+255),b
  2323                           
  2324                           ;main.c: 79: TMR1 = (65536-63765);
  2325  0020CE  0E06               	movlw	6
  2326  0020D0  6ECF               	movwf	4047,c	;volatile
  2327  0020D2  0EEB               	movlw	235
  2328  0020D4  6ECE               	movwf	4046,c	;volatile
  2329  0020D6                     
  2330                           ; BSR set to: 0
  2331                           ;main.c: 80: tick(second);
  2332  0020D6  0100               	movlb	0	; () banked
  2333  0020D8  6FA7               	movwf	??_high_isr& (0+255),b
  2334  0020DA  0E00               	movlw	0
  2335  0020DC  6E0D               	movwf	?_tick,c
  2336  0020DE  0100               	movlb	0	; () banked
  2337  0020E0  51A7               	movf	??_high_isr& (0+255),w,b
  2338  0020E2  EC2F  F018         	call	_tick	;wreg free
  2339  0020E6                     
  2340                           ;main.c: 81: if (printFn == &printTemp) {
  2341  0020E6  0ED0               	movlw	low _printTemp
  2342  0020E8  0100               	movlb	0	; () banked
  2343  0020EA  6FA7               	movwf	??_high_isr& (0+255),b
  2344  0020EC  0E33               	movlw	high _printTemp
  2345  0020EE  6FA8               	movwf	(??_high_isr+1)& (0+255),b
  2346  0020F0  0100               	movlb	0	; () banked
  2347  0020F2  51A8               	movf	(??_high_isr+1)& (0+255),w,b
  2348  0020F4  0100               	movlb	0	; () banked
  2349  0020F6  0100               	movlb	0	; () banked
  2350  0020F8  19F6               	xorwf	(_printFn+1)& (0+255),w,b
  2351  0020FA  E105               	bnz	i2u478_45
  2352  0020FC  0100               	movlb	0	; () banked
  2353  0020FE  51A7               	movf	??_high_isr& (0+255),w,b
  2354  002100  0100               	movlb	0	; () banked
  2355  002102  0100               	movlb	0	; () banked
  2356  002104  19F5               	xorwf	_printFn& (0+255),w,b
  2357  002106                     i2u478_45:
  2358  002106  A4D8               	btfss	status,2,c
  2359  002108  D001               	goto	i2u478_41
  2360  00210A  D001               	goto	i2u478_40
  2361  00210C                     i2u478_41:
  2362  00210C  D016               	goto	i2l6149
  2363  00210E                     i2u478_40:
  2364  00210E                     
  2365                           ; BSR set to: 0
  2366                           ;main.c: 83: printFn(0b00011111);
  2367  00210E  0100               	movlb	0	; () banked
  2368  002110  6FA7               	movwf	??_high_isr& (0+255),b
  2369  002112  0E1F               	movlw	31
  2370  002114  6E5E               	movwf	?_printRTC,c
  2371  002116  0100               	movlb	0	; () banked
  2372  002118  51A7               	movf	??_high_isr& (0+255),w,b
  2373  00211A  D801               	call	i2u479_48
  2374  00211C  D00D               	goto	i2u479_49
  2375  00211E                     i2u479_48:
  2376  00211E  0005               	push	
  2377  002120  0100               	movlb	0	; () banked
  2378  002122  6EFA               	movwf	pclath,c
  2379  002124  0100               	movlb	0	; () banked
  2380  002126  51F5               	movf	_printFn& (0+255),w,b
  2381  002128  6EFD               	movwf	tosl,c
  2382  00212A  0100               	movlb	0	; () banked
  2383  00212C  51F6               	movf	(_printFn+1)& (0+255),w,b
  2384  00212E  6EFE               	movwf	tosh,c
  2385  002130  50F8               	movf	tblptru,w,c
  2386  002132  6EFF               	movwf	tosu,c
  2387  002134  50FA               	movf	pclath,w,c
  2388  002136  0012               	return		;indir
  2389  002138                     i2u479_49:
  2390                           
  2391                           ;main.c: 84: } else if (printFn == &printRTC) {
  2392  002138  D02B               	goto	i2l6153
  2393  00213A                     i2l6149:
  2394  00213A  0E86               	movlw	low _printRTC
  2395  00213C  0100               	movlb	0	; () banked
  2396  00213E  6FA7               	movwf	??_high_isr& (0+255),b
  2397  002140  0E18               	movlw	high _printRTC
  2398  002142  6FA8               	movwf	(??_high_isr+1)& (0+255),b
  2399  002144  0100               	movlb	0	; () banked
  2400  002146  51A8               	movf	(??_high_isr+1)& (0+255),w,b
  2401  002148  0100               	movlb	0	; () banked
  2402  00214A  0100               	movlb	0	; () banked
  2403  00214C  19F6               	xorwf	(_printFn+1)& (0+255),w,b
  2404  00214E  E105               	bnz	i2u480_45
  2405  002150  0100               	movlb	0	; () banked
  2406  002152  51A7               	movf	??_high_isr& (0+255),w,b
  2407  002154  0100               	movlb	0	; () banked
  2408  002156  0100               	movlb	0	; () banked
  2409  002158  19F5               	xorwf	_printFn& (0+255),w,b
  2410  00215A                     i2u480_45:
  2411  00215A  A4D8               	btfss	status,2,c
  2412  00215C  D001               	goto	i2u480_41
  2413  00215E  D001               	goto	i2u480_40
  2414  002160                     i2u480_41:
  2415  002160  D017               	goto	i2l6153
  2416  002162                     i2u480_40:
  2417  002162                     
  2418                           ; BSR set to: 0
  2419                           ;main.c: 85: printFn(0b11111111);
  2420  002162  0100               	movlb	0	; () banked
  2421  002164  6FA7               	movwf	??_high_isr& (0+255),b
  2422  002166  0EFF               	movlw	255
  2423  002168  6E5E               	movwf	?_printRTC,c
  2424  00216A  0100               	movlb	0	; () banked
  2425  00216C  51A7               	movf	??_high_isr& (0+255),w,b
  2426  00216E  D801               	call	i2u481_48
  2427  002170  D00D               	goto	i2u481_49
  2428  002172                     i2u481_48:
  2429  002172  0005               	push	
  2430  002174  0100               	movlb	0	; () banked
  2431  002176  6EFA               	movwf	pclath,c
  2432  002178  0100               	movlb	0	; () banked
  2433  00217A  51F5               	movf	_printFn& (0+255),w,b
  2434  00217C  6EFD               	movwf	tosl,c
  2435  00217E  0100               	movlb	0	; () banked
  2436  002180  51F6               	movf	(_printFn+1)& (0+255),w,b
  2437  002182  6EFE               	movwf	tosh,c
  2438  002184  50F8               	movf	tblptru,w,c
  2439  002186  6EFF               	movwf	tosu,c
  2440  002188  50FA               	movf	pclath,w,c
  2441  00218A  0012               	return		;indir
  2442  00218C                     i2u481_49:
  2443  00218C  D001               	goto	i2l6153
  2444  00218E  D000               	goto	i2l6153
  2445  002190                     i2l6153:
  2446                           
  2447                           ;main.c: 86: }
  2448                           ;main.c: 89: update();
  2449  002190  ECD7  F007         	call	_update	;wreg free
  2450  002194  D000               	goto	i2l6155
  2451  002196                     i2l6155:
  2452                           
  2453                           ;main.c: 90: }
  2454                           ;main.c: 91: TMR1ON = 1;
  2455  002196  80CD               	bsf	4045,0,c	;volatile
  2456  002198  D000               	goto	i2l6157
  2457  00219A                     i2l6157:
  2458                           
  2459                           ;main.c: 92: }
  2460                           ;main.c: 93: if (TMR0IE && TMR0IF) {
  2461  00219A  AAF2               	btfss	intcon,5,c	;volatile
  2462  00219C  D001               	goto	i2u482_41
  2463  00219E  D001               	goto	i2u482_40
  2464  0021A0                     i2u482_41:
  2465  0021A0  D03D               	goto	i2l82
  2466  0021A2                     i2u482_40:
  2467  0021A2  A4F2               	btfss	intcon,2,c	;volatile
  2468  0021A4  D001               	goto	i2u483_41
  2469  0021A6  D001               	goto	i2u483_40
  2470  0021A8                     i2u483_41:
  2471  0021A8  D039               	goto	i2l82
  2472  0021AA                     i2u483_40:
  2473  0021AA                     
  2474                           ;main.c: 94: TMR0IF = CLEAR;
  2475  0021AA  94F2               	bcf	intcon,2,c	;volatile
  2476                           
  2477                           ;main.c: 95: TMR0ON = 0;
  2478  0021AC  9ED5               	bcf	4053,7,c	;volatile
  2479  0021AE                     
  2480                           ;main.c: 96: TMR0 = 0;
  2481  0021AE  0E00               	movlw	0
  2482  0021B0  6ED7               	movwf	4055,c	;volatile
  2483  0021B2  0E00               	movlw	0
  2484  0021B4  6ED6               	movwf	4054,c	;volatile
  2485  0021B6                     
  2486                           ;main.c: 97: if (++tmr0BigCounts > (3+1)) {
  2487  0021B6  0E01               	movlw	1
  2488  0021B8  0100               	movlb	0	; () banked
  2489  0021BA  0100               	movlb	0	; () banked
  2490  0021BC  27D5               	addwf	_tmr0BigCounts& (0+255),f,b
  2491  0021BE  0E00               	movlw	0
  2492  0021C0  0100               	movlb	0	; () banked
  2493  0021C2  23D6               	addwfc	(_tmr0BigCounts+1)& (0+255),f,b
  2494  0021C4  0E00               	movlw	0
  2495  0021C6  0100               	movlb	0	; () banked
  2496  0021C8  23D7               	addwfc	(_tmr0BigCounts+2)& (0+255),f,b
  2497  0021CA  0E00               	movlw	0
  2498  0021CC  0100               	movlb	0	; () banked
  2499  0021CE  23D8               	addwfc	(_tmr0BigCounts+3)& (0+255),f,b
  2500  0021D0  0E05               	movlw	5
  2501  0021D2  0100               	movlb	0	; () banked
  2502  0021D4  5DD5               	subwf	_tmr0BigCounts& (0+255),w,b
  2503  0021D6  0E00               	movlw	0
  2504  0021D8  0100               	movlb	0	; () banked
  2505  0021DA  59D6               	subwfb	(_tmr0BigCounts+1)& (0+255),w,b
  2506  0021DC  0E00               	movlw	0
  2507  0021DE  0100               	movlb	0	; () banked
  2508  0021E0  59D7               	subwfb	(_tmr0BigCounts+2)& (0+255),w,b
  2509  0021E2  0E00               	movlw	0
  2510  0021E4  0100               	movlb	0	; () banked
  2511  0021E6  59D8               	subwfb	(_tmr0BigCounts+3)& (0+255),w,b
  2512  0021E8  A0D8               	btfss	status,0,c
  2513  0021EA  D001               	goto	i2u484_41
  2514  0021EC  D001               	goto	i2u484_40
  2515  0021EE                     i2u484_41:
  2516  0021EE  D014               	goto	i2l6173
  2517  0021F0                     i2u484_40:
  2518  0021F0                     
  2519                           ; BSR set to: 0
  2520                           ;main.c: 98: buttons();
  2521  0021F0  EC45  F017         	call	_buttons	;wreg free
  2522  0021F4                     
  2523                           ;main.c: 99: TMR0 = (65536-50356);
  2524  0021F4  0E3B               	movlw	59
  2525  0021F6  6ED7               	movwf	4055,c	;volatile
  2526  0021F8  0E4C               	movlw	76
  2527  0021FA  6ED6               	movwf	4054,c	;volatile
  2528  0021FC                     
  2529                           ;main.c: 100: tmr0BigCounts = 0;
  2530  0021FC  0E00               	movlw	0
  2531  0021FE  0100               	movlb	0	; () banked
  2532  002200  0100               	movlb	0	; () banked
  2533  002202  6FD5               	movwf	_tmr0BigCounts& (0+255),b
  2534  002204  0E00               	movlw	0
  2535  002206  0100               	movlb	0	; () banked
  2536  002208  6FD6               	movwf	(_tmr0BigCounts+1)& (0+255),b
  2537  00220A  0E00               	movlw	0
  2538  00220C  0100               	movlb	0	; () banked
  2539  00220E  6FD7               	movwf	(_tmr0BigCounts+2)& (0+255),b
  2540  002210  0E00               	movlw	0
  2541  002212  0100               	movlb	0	; () banked
  2542  002214  6FD8               	movwf	(_tmr0BigCounts+3)& (0+255),b
  2543  002216  D000               	goto	i2l6173
  2544  002218                     i2l6173:
  2545                           
  2546                           ; BSR set to: 0
  2547                           ;main.c: 101: }
  2548                           ;main.c: 102: TMR0ON = 1;
  2549  002218  8ED5               	bsf	4053,7,c	;volatile
  2550  00221A  D000               	goto	i2l82
  2551  00221C                     i2l82:
  2552  00221C  C0B6  FFF5         	movff	??_high_isr+15,tablat
  2553  002220  C0B5  FFF8         	movff	??_high_isr+14,tblptru
  2554  002224  C0B4  FFF7         	movff	??_high_isr+13,tblptrh
  2555  002228  C0B3  FFF6         	movff	??_high_isr+12,tblptrl
  2556  00222C  C0B2  FFF4         	movff	??_high_isr+11,prodh
  2557  002230  C0B1  FFF3         	movff	??_high_isr+10,prodl
  2558  002234  C0B0  FFDA         	movff	??_high_isr+9,fsr2h
  2559  002238  C0AF  FFD9         	movff	??_high_isr+8,fsr2l
  2560  00223C  C0AE  FFE2         	movff	??_high_isr+7,fsr1h
  2561  002240  C0AD  FFE1         	movff	??_high_isr+6,fsr1l
  2562  002244  C0AC  FFEA         	movff	??_high_isr+5,fsr0h
  2563  002248  C0AB  FFE9         	movff	??_high_isr+4,fsr0l
  2564  00224C  C0AA  FFFB         	movff	??_high_isr+3,pclatu
  2565  002250  C0A9  FFFA         	movff	??_high_isr+2,pclath
  2566  002254  0011               	retfie		f
  2567  002256                     __end_of_high_isr:
  2568                           	opt stack 0
  2569                           tosu	equ	0xFFF
  2570                           tosh	equ	0xFFE
  2571                           tosl	equ	0xFFD
  2572                           pclatu	equ	0xFFB
  2573                           pclath	equ	0xFFA
  2574                           tblptru	equ	0xFF8
  2575                           tblptrh	equ	0xFF7
  2576                           tblptrl	equ	0xFF6
  2577                           tablat	equ	0xFF5
  2578                           prodh	equ	0xFF4
  2579                           prodl	equ	0xFF3
  2580                           intcon	equ	0xFF2
  2581                           intcon2	equ	0xFF1
  2582                           postinc0	equ	0xFEE
  2583                           fsr0h	equ	0xFEA
  2584                           fsr0l	equ	0xFE9
  2585                           wreg	equ	0xFE8
  2586                           postdec1	equ	0xFE5
  2587                           fsr1h	equ	0xFE2
  2588                           fsr1l	equ	0xFE1
  2589                           fsr2h	equ	0xFDA
  2590                           fsr2l	equ	0xFD9
  2591                           status	equ	0xFD8
  2592                           
  2593 ;; *************** function _printRTC *****************
  2594 ;; Defined at:
  2595 ;;		line 164 in file "RTC.c"
  2596 ;; Parameters:    Size  Location     Type
  2597 ;;  digits          1   93[COMRAM] unsigned char 
  2598 ;; Auto vars:     Size  Location     Type
  2599 ;;  str             9   60[BANK0 ] unsigned char [9]
  2600 ;; Return value:  Size  Location     Type
  2601 ;;		None               void
  2602 ;; Registers used:
  2603 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2604 ;; Tracked objects:
  2605 ;;		On entry : 0/0
  2606 ;;		On exit  : 0/0
  2607 ;;		Unchanged: 0/0
  2608 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2609 ;;      Params:         1       0       0       0       0       0       0       0       0
  2610 ;;      Locals:         0      11       0       0       0       0       0       0       0
  2611 ;;      Temps:          0       2       0       0       0       0       0       0       0
  2612 ;;      Totals:         1      13       0       0       0       0       0       0       0
  2613 ;;Total ram usage:       14 bytes
  2614 ;; Hardware stack levels used:    1
  2615 ;; Hardware stack levels required when called:    5
  2616 ;; This function calls:
  2617 ;;		_countBits
  2618 ;;		_sprintf
  2619 ;;		_writeString
  2620 ;;		___lwmod
  2621 ;; This function is called by:
  2622 ;;		_high_isr
  2623 ;;		_buttons
  2624 ;; This function uses a non-reentrant model
  2625 ;;
  2626                           
  2627                           	psect	text10
  2628  001886                     __ptext10:
  2629                           	opt stack 0
  2630  001886                     _printRTC:
  2631                           	opt stack 21
  2632                           
  2633                           ;RTC.c: 165: char str[9] = "";
  2634                           
  2635                           ;incstack = 0
  2636                           ;incstack = 0
  2637  001886  EE20  F0C3         	lfsr	2,printRTC@F5061
  2638  00188A  EE10  F09C         	lfsr	1,printRTC@str
  2639  00188E  0E09               	movlw	9
  2640  001890                     i2u474_41:
  2641  001890  CFDE FFE6          	movff	postinc2,postinc1
  2642  001894  2EE8               	decfsz	wreg,f,c
  2643  001896  D7FC               	goto	i2u474_41
  2644                           
  2645                           ;RTC.c: 166: switch (countBits(digits)) {
  2646  001898  D176               	goto	i2l6115
  2647  00189A                     i2l6079:
  2648                           
  2649                           ;RTC.c: 172: sprintf(&str, "%02d.%02d", date.hour, date.minute);
  2650  00189A  0100               	movlb	0	; () banked
  2651  00189C  0E00               	movlw	high printRTC@str
  2652  00189E  0100               	movlb	0	; () banked
  2653  0018A0  0100               	movlb	0	; () banked
  2654  0018A2  6F61               	movwf	(?_sprintf+1)& (0+255),b
  2655  0018A4  0100               	movlb	0	; () banked
  2656  0018A6  0E9C               	movlw	low printRTC@str
  2657  0018A8  0100               	movlb	0	; () banked
  2658  0018AA  6F60               	movwf	?_sprintf& (0+255),b
  2659  0018AC  0E7F               	movlw	high (STR_19+5)
  2660  0018AE  0100               	movlb	0	; () banked
  2661  0018B0  0100               	movlb	0	; () banked
  2662  0018B2  6F63               	movwf	(?_sprintf+3)& (0+255),b
  2663  0018B4  0EA9               	movlw	low (STR_19+5)
  2664  0018B6  0100               	movlb	0	; () banked
  2665  0018B8  6F62               	movwf	(?_sprintf+2)& (0+255),b
  2666  0018BA  0101               	movlb	1	; () banked
  2667  0018BC  0100               	movlb	0	; () banked
  2668  0018BE  C10F  F064         	movff	_date+2,?_sprintf+4
  2669  0018C2  0100               	movlb	0	; () banked
  2670  0018C4  0100               	movlb	0	; () banked
  2671  0018C6  6B65               	clrf	(?_sprintf+5)& (0+255),b
  2672  0018C8  0101               	movlb	1	; () banked
  2673  0018CA  0100               	movlb	0	; () banked
  2674  0018CC  C10E  F066         	movff	_date+1,?_sprintf+6
  2675  0018D0  0100               	movlb	0	; () banked
  2676  0018D2  0100               	movlb	0	; () banked
  2677  0018D4  6B67               	clrf	(?_sprintf+7)& (0+255),b
  2678  0018D6  EC0E  F000         	call	_sprintf	;wreg free
  2679                           
  2680                           ;RTC.c: 173: break;
  2681  0018DA  D006               	goto	i2l6085
  2682  0018DC                     i2l6083:
  2683  0018DC  0101               	movlb	1	; () banked
  2684  0018DE  0101               	movlb	1	; () banked
  2685  0018E0  5116               	movf	(_date+9)& (0+255),w,b
  2686                           
  2687                           ; Switch size 1, requested type "space"
  2688                           ; Number of cases is 1, Range of values is 0 to 0
  2689                           ; switch strategies available:
  2690                           ; Name         Instructions Cycles
  2691                           ; simple_byte            4     3 (average)
  2692                           ;	Chosen strategy is simple_byte
  2693  0018E2  0A00               	xorlw	0	; case 0
  2694  0018E4  B4D8               	btfsc	status,2,c
  2695  0018E6  D7D9               	goto	i2l6079
  2696  0018E8                     i2l6085:
  2697                           
  2698                           ;RTC.c: 175: writeString(digits, &str);
  2699  0018E8  C05E  F022         	movff	printRTC@digits,?_writeString
  2700  0018EC  0100               	movlb	0	; () banked
  2701  0018EE  0E00               	movlw	high printRTC@str
  2702  0018F0  6E24               	movwf	?_writeString+2,c
  2703  0018F2  0100               	movlb	0	; () banked
  2704  0018F4  0E9C               	movlw	low printRTC@str
  2705  0018F6  6E23               	movwf	?_writeString+1,c
  2706  0018F8  EC01  F013         	call	_writeString	;wreg free
  2707                           
  2708                           ;RTC.c: 176: break;
  2709  0018FC  D166               	goto	i2l311
  2710  0018FE                     i2l6087:
  2711                           
  2712                           ;RTC.c: 180: sprintf(&str, "%02d.%02d.%02d", date.hour, date.minute, date.second);
  2713  0018FE  0100               	movlb	0	; () banked
  2714  001900  0E00               	movlw	high printRTC@str
  2715  001902  0100               	movlb	0	; () banked
  2716  001904  0100               	movlb	0	; () banked
  2717  001906  6F61               	movwf	(?_sprintf+1)& (0+255),b
  2718  001908  0100               	movlb	0	; () banked
  2719  00190A  0E9C               	movlw	low printRTC@str
  2720  00190C  0100               	movlb	0	; () banked
  2721  00190E  6F60               	movwf	?_sprintf& (0+255),b
  2722  001910  0E7F               	movlw	high STR_18
  2723  001912  0100               	movlb	0	; () banked
  2724  001914  0100               	movlb	0	; () banked
  2725  001916  6F63               	movwf	(?_sprintf+3)& (0+255),b
  2726  001918  0EB3               	movlw	low STR_18
  2727  00191A  0100               	movlb	0	; () banked
  2728  00191C  6F62               	movwf	(?_sprintf+2)& (0+255),b
  2729  00191E  0101               	movlb	1	; () banked
  2730  001920  0100               	movlb	0	; () banked
  2731  001922  C10F  F064         	movff	_date+2,?_sprintf+4
  2732  001926  0100               	movlb	0	; () banked
  2733  001928  0100               	movlb	0	; () banked
  2734  00192A  6B65               	clrf	(?_sprintf+5)& (0+255),b
  2735  00192C  0101               	movlb	1	; () banked
  2736  00192E  0100               	movlb	0	; () banked
  2737  001930  C10E  F066         	movff	_date+1,?_sprintf+6
  2738  001934  0100               	movlb	0	; () banked
  2739  001936  0100               	movlb	0	; () banked
  2740  001938  6B67               	clrf	(?_sprintf+7)& (0+255),b
  2741  00193A  0101               	movlb	1	; () banked
  2742  00193C  0100               	movlb	0	; () banked
  2743  00193E  C10D  F068         	movff	_date,?_sprintf+8
  2744  001942  0100               	movlb	0	; () banked
  2745  001944  0100               	movlb	0	; () banked
  2746  001946  6B69               	clrf	(?_sprintf+9)& (0+255),b
  2747  001948  EC0E  F000         	call	_sprintf	;wreg free
  2748                           
  2749                           ;RTC.c: 181: break;
  2750  00194C  D097               	goto	i2l6099
  2751  00194E                     i2l6089:
  2752                           
  2753                           ;RTC.c: 183: sprintf(&str, "%c%c %02d.%02d", (dow[date.dow])[0], (dow[date.dow])[1], dat
      +                          e.minute, date.second);
  2754  00194E  0100               	movlb	0	; () banked
  2755  001950  0E00               	movlw	high printRTC@str
  2756  001952  0100               	movlb	0	; () banked
  2757  001954  0100               	movlb	0	; () banked
  2758  001956  6F61               	movwf	(?_sprintf+1)& (0+255),b
  2759  001958  0100               	movlb	0	; () banked
  2760  00195A  0E9C               	movlw	low printRTC@str
  2761  00195C  0100               	movlb	0	; () banked
  2762  00195E  6F60               	movwf	?_sprintf& (0+255),b
  2763  001960  0E7F               	movlw	high STR_19
  2764  001962  0100               	movlb	0	; () banked
  2765  001964  0100               	movlb	0	; () banked
  2766  001966  6F63               	movwf	(?_sprintf+3)& (0+255),b
  2767  001968  0EA4               	movlw	low STR_19
  2768  00196A  0100               	movlb	0	; () banked
  2769  00196C  6F62               	movwf	(?_sprintf+2)& (0+255),b
  2770  00196E  0101               	movlb	1	; () banked
  2771  001970  0101               	movlb	1	; () banked
  2772  001972  5111               	movf	(_date+4)& (0+255),w,b
  2773  001974  0D02               	mullw	2
  2774  001976  0100               	movlb	0	; () banked
  2775  001978  0EDE               	movlw	low _dow
  2776  00197A  24F3               	addwf	prodl,w,c
  2777  00197C  6ED9               	movwf	fsr2l,c
  2778  00197E  0100               	movlb	0	; () banked
  2779  001980  0E00               	movlw	high _dow
  2780  001982  20F4               	addwfc	prodh,w,c
  2781  001984  6EDA               	movwf	fsr2h,c
  2782  001986  CFDE FFF6          	movff	postinc2,tblptrl
  2783  00198A  CFDD FFF7          	movff	postdec2,tblptrh
  2784  00198E  0008               	tblrd		*
  2785  001990  50F5               	movf	tablat,w,c
  2786  001992  0100               	movlb	0	; () banked
  2787  001994  0100               	movlb	0	; () banked
  2788  001996  6F64               	movwf	(?_sprintf+4)& (0+255),b
  2789  001998  0100               	movlb	0	; () banked
  2790  00199A  6B65               	clrf	(?_sprintf+5)& (0+255),b
  2791  00199C  0101               	movlb	1	; () banked
  2792  00199E  0101               	movlb	1	; () banked
  2793  0019A0  5111               	movf	(_date+4)& (0+255),w,b
  2794  0019A2  0D02               	mullw	2
  2795  0019A4  0100               	movlb	0	; () banked
  2796  0019A6  0EDE               	movlw	low _dow
  2797  0019A8  24F3               	addwf	prodl,w,c
  2798  0019AA  6ED9               	movwf	fsr2l,c
  2799  0019AC  0100               	movlb	0	; () banked
  2800  0019AE  0E00               	movlw	high _dow
  2801  0019B0  20F4               	addwfc	prodh,w,c
  2802  0019B2  6EDA               	movwf	fsr2h,c
  2803  0019B4  CFDE F09A          	movff	postinc2,??_printRTC
  2804  0019B8  CFDD F09B          	movff	postdec2,??_printRTC+1
  2805  0019BC  0E01               	movlw	1
  2806  0019BE  0100               	movlb	0	; () banked
  2807  0019C0  279A               	addwf	??_printRTC& (0+255),f,b
  2808  0019C2  0E00               	movlw	0
  2809  0019C4  239B               	addwfc	(??_printRTC+1)& (0+255),f,b
  2810  0019C6  C09A  FFF6         	movff	??_printRTC,tblptrl
  2811  0019CA  C09B  FFF7         	movff	??_printRTC+1,tblptrh
  2812  0019CE  0008               	tblrd		*
  2813  0019D0  50F5               	movf	tablat,w,c
  2814  0019D2  0100               	movlb	0	; () banked
  2815  0019D4  0100               	movlb	0	; () banked
  2816  0019D6  6F66               	movwf	(?_sprintf+6)& (0+255),b
  2817  0019D8  0100               	movlb	0	; () banked
  2818  0019DA  6B67               	clrf	(?_sprintf+7)& (0+255),b
  2819  0019DC  0101               	movlb	1	; () banked
  2820  0019DE  0100               	movlb	0	; () banked
  2821  0019E0  C10E  F068         	movff	_date+1,?_sprintf+8
  2822  0019E4  0100               	movlb	0	; () banked
  2823  0019E6  0100               	movlb	0	; () banked
  2824  0019E8  6B69               	clrf	(?_sprintf+9)& (0+255),b
  2825  0019EA  0101               	movlb	1	; () banked
  2826  0019EC  0100               	movlb	0	; () banked
  2827  0019EE  C10D  F06A         	movff	_date,?_sprintf+10
  2828  0019F2  0100               	movlb	0	; () banked
  2829  0019F4  0100               	movlb	0	; () banked
  2830  0019F6  6B6B               	clrf	(?_sprintf+11)& (0+255),b
  2831  0019F8  EC0E  F000         	call	_sprintf	;wreg free
  2832                           
  2833                           ;RTC.c: 184: break;
  2834  0019FC  D03F               	goto	i2l6099
  2835  0019FE                     i2l6091:
  2836                           
  2837                           ;RTC.c: 186: sprintf(&str, "%02d.%02d.%02d", date.day, date.month, date.year % 100);
  2838  0019FE  C113  F001         	movff	_date+6,?___lwmod
  2839  001A02  C114  F002         	movff	_date+7,?___lwmod+1
  2840  001A06  0E00               	movlw	0
  2841  001A08  6E04               	movwf	?___lwmod+3,c
  2842  001A0A  0E64               	movlw	100
  2843  001A0C  6E03               	movwf	?___lwmod+2,c
  2844  001A0E  EC34  F01D         	call	___lwmod	;wreg free
  2845  001A12  C001  F0A5         	movff	?___lwmod,_printRTC$1276
  2846  001A16  C002  F0A6         	movff	?___lwmod+1,_printRTC$1276+1
  2847                           
  2848                           ;RTC.c: 186: sprintf(&str, "%02d.%02d.%02d", date.day, date.month, date.year % 100);
  2849  001A1A  0100               	movlb	0	; () banked
  2850  001A1C  0E00               	movlw	high printRTC@str
  2851  001A1E  0100               	movlb	0	; () banked
  2852  001A20  0100               	movlb	0	; () banked
  2853  001A22  6F61               	movwf	(?_sprintf+1)& (0+255),b
  2854  001A24  0100               	movlb	0	; () banked
  2855  001A26  0E9C               	movlw	low printRTC@str
  2856  001A28  0100               	movlb	0	; () banked
  2857  001A2A  6F60               	movwf	?_sprintf& (0+255),b
  2858  001A2C  0E7F               	movlw	high STR_18
  2859  001A2E  0100               	movlb	0	; () banked
  2860  001A30  0100               	movlb	0	; () banked
  2861  001A32  6F63               	movwf	(?_sprintf+3)& (0+255),b
  2862  001A34  0EB3               	movlw	low STR_18
  2863  001A36  0100               	movlb	0	; () banked
  2864  001A38  6F62               	movwf	(?_sprintf+2)& (0+255),b
  2865  001A3A  0101               	movlb	1	; () banked
  2866  001A3C  0100               	movlb	0	; () banked
  2867  001A3E  C110  F064         	movff	_date+3,?_sprintf+4
  2868  001A42  0100               	movlb	0	; () banked
  2869  001A44  0100               	movlb	0	; () banked
  2870  001A46  6B65               	clrf	(?_sprintf+5)& (0+255),b
  2871  001A48  0101               	movlb	1	; () banked
  2872  001A4A  0100               	movlb	0	; () banked
  2873  001A4C  C112  F066         	movff	_date+5,?_sprintf+6
  2874  001A50  0100               	movlb	0	; () banked
  2875  001A52  0100               	movlb	0	; () banked
  2876  001A54  6B67               	clrf	(?_sprintf+7)& (0+255),b
  2877  001A56  C0A5  F068         	movff	_printRTC$1276,?_sprintf+8
  2878  001A5A  C0A6  F069         	movff	_printRTC$1276+1,?_sprintf+9
  2879  001A5E  EC0E  F000         	call	_sprintf	;wreg free
  2880                           
  2881                           ;RTC.c: 187: break;
  2882  001A62  D00C               	goto	i2l6099
  2883  001A64                     i2l6097:
  2884  001A64  0101               	movlb	1	; () banked
  2885  001A66  0101               	movlb	1	; () banked
  2886  001A68  5116               	movf	(_date+9)& (0+255),w,b
  2887                           
  2888                           ; Switch size 1, requested type "space"
  2889                           ; Number of cases is 3, Range of values is 1 to 8
  2890                           ; switch strategies available:
  2891                           ; Name         Instructions Cycles
  2892                           ; simple_byte           10     6 (average)
  2893                           ;	Chosen strategy is simple_byte
  2894  001A6A  0A01               	xorlw	1	; case 1
  2895  001A6C  B4D8               	btfsc	status,2,c
  2896  001A6E  D747               	goto	i2l6087
  2897  001A70  0A02               	xorlw	2	; case 3
  2898  001A72  B4D8               	btfsc	status,2,c
  2899  001A74  D76C               	goto	i2l6089
  2900  001A76  0A0B               	xorlw	11	; case 8
  2901  001A78  B4D8               	btfsc	status,2,c
  2902  001A7A  D7C1               	goto	i2l6091
  2903  001A7C                     i2l6099:
  2904                           
  2905                           ;RTC.c: 190: writeString(digits, &str);
  2906  001A7C  C05E  F022         	movff	printRTC@digits,?_writeString
  2907  001A80  0100               	movlb	0	; () banked
  2908  001A82  0E00               	movlw	high printRTC@str
  2909  001A84  6E24               	movwf	?_writeString+2,c
  2910  001A86  0100               	movlb	0	; () banked
  2911  001A88  0E9C               	movlw	low printRTC@str
  2912  001A8A  6E23               	movwf	?_writeString+1,c
  2913  001A8C  EC01  F013         	call	_writeString	;wreg free
  2914                           
  2915                           ;RTC.c: 191: break;
  2916  001A90  D09C               	goto	i2l311
  2917  001A92                     i2l6101:
  2918                           
  2919                           ;RTC.c: 195: sprintf(&str, "%s %02d.%02d", (dow[date.dow]), date.hour, date.minute);
  2920  001A92  0100               	movlb	0	; () banked
  2921  001A94  0E00               	movlw	high printRTC@str
  2922  001A96  0100               	movlb	0	; () banked
  2923  001A98  0100               	movlb	0	; () banked
  2924  001A9A  6F61               	movwf	(?_sprintf+1)& (0+255),b
  2925  001A9C  0100               	movlb	0	; () banked
  2926  001A9E  0E9C               	movlw	low printRTC@str
  2927  001AA0  0100               	movlb	0	; () banked
  2928  001AA2  6F60               	movwf	?_sprintf& (0+255),b
  2929  001AA4  0E7F               	movlw	high STR_21
  2930  001AA6  0100               	movlb	0	; () banked
  2931  001AA8  0100               	movlb	0	; () banked
  2932  001AAA  6F63               	movwf	(?_sprintf+3)& (0+255),b
  2933  001AAC  0EC2               	movlw	low STR_21
  2934  001AAE  0100               	movlb	0	; () banked
  2935  001AB0  6F62               	movwf	(?_sprintf+2)& (0+255),b
  2936  001AB2  0101               	movlb	1	; () banked
  2937  001AB4  0101               	movlb	1	; () banked
  2938  001AB6  5111               	movf	(_date+4)& (0+255),w,b
  2939  001AB8  0D02               	mullw	2
  2940  001ABA  0100               	movlb	0	; () banked
  2941  001ABC  0EDE               	movlw	low _dow
  2942  001ABE  24F3               	addwf	prodl,w,c
  2943  001AC0  6ED9               	movwf	fsr2l,c
  2944  001AC2  0100               	movlb	0	; () banked
  2945  001AC4  0E00               	movlw	high _dow
  2946  001AC6  20F4               	addwfc	prodh,w,c
  2947  001AC8  6EDA               	movwf	fsr2h,c
  2948  001ACA  0100               	movlb	0	; () banked
  2949  001ACC  CFDE F064          	movff	postinc2,?_sprintf+4
  2950  001AD0  0100               	movlb	0	; () banked
  2951  001AD2  CFDD F065          	movff	postdec2,?_sprintf+5
  2952  001AD6  0101               	movlb	1	; () banked
  2953  001AD8  0100               	movlb	0	; () banked
  2954  001ADA  C10F  F066         	movff	_date+2,?_sprintf+6
  2955  001ADE  0100               	movlb	0	; () banked
  2956  001AE0  0100               	movlb	0	; () banked
  2957  001AE2  6B67               	clrf	(?_sprintf+7)& (0+255),b
  2958  001AE4  0101               	movlb	1	; () banked
  2959  001AE6  0100               	movlb	0	; () banked
  2960  001AE8  C10E  F068         	movff	_date+1,?_sprintf+8
  2961  001AEC  0100               	movlb	0	; () banked
  2962  001AEE  0100               	movlb	0	; () banked
  2963  001AF0  6B69               	clrf	(?_sprintf+9)& (0+255),b
  2964  001AF2  EC0E  F000         	call	_sprintf	;wreg free
  2965                           
  2966                           ;RTC.c: 196: break;
  2967  001AF6  D03C               	goto	i2l6111
  2968  001AF8                     i2l6103:
  2969                           
  2970                           ;RTC.c: 198: sprintf(&str, "%02d %02d %02d", date.day, date.month, date.year % 100);
  2971  001AF8  C113  F001         	movff	_date+6,?___lwmod
  2972  001AFC  C114  F002         	movff	_date+7,?___lwmod+1
  2973  001B00  0E00               	movlw	0
  2974  001B02  6E04               	movwf	?___lwmod+3,c
  2975  001B04  0E64               	movlw	100
  2976  001B06  6E03               	movwf	?___lwmod+2,c
  2977  001B08  EC34  F01D         	call	___lwmod	;wreg free
  2978  001B0C  C001  F0A5         	movff	?___lwmod,_printRTC$1276
  2979  001B10  C002  F0A6         	movff	?___lwmod+1,_printRTC$1276+1
  2980                           
  2981                           ;RTC.c: 198: sprintf(&str, "%02d %02d %02d", date.day, date.month, date.year % 100);
  2982  001B14  0100               	movlb	0	; () banked
  2983  001B16  0E00               	movlw	high printRTC@str
  2984  001B18  0100               	movlb	0	; () banked
  2985  001B1A  0100               	movlb	0	; () banked
  2986  001B1C  6F61               	movwf	(?_sprintf+1)& (0+255),b
  2987  001B1E  0100               	movlb	0	; () banked
  2988  001B20  0E9C               	movlw	low printRTC@str
  2989  001B22  0100               	movlb	0	; () banked
  2990  001B24  6F60               	movwf	?_sprintf& (0+255),b
  2991  001B26  0E7F               	movlw	high STR_22
  2992  001B28  0100               	movlb	0	; () banked
  2993  001B2A  0100               	movlb	0	; () banked
  2994  001B2C  6F63               	movwf	(?_sprintf+3)& (0+255),b
  2995  001B2E  0E95               	movlw	low STR_22
  2996  001B30  0100               	movlb	0	; () banked
  2997  001B32  6F62               	movwf	(?_sprintf+2)& (0+255),b
  2998  001B34  0101               	movlb	1	; () banked
  2999  001B36  0100               	movlb	0	; () banked
  3000  001B38  C110  F064         	movff	_date+3,?_sprintf+4
  3001  001B3C  0100               	movlb	0	; () banked
  3002  001B3E  0100               	movlb	0	; () banked
  3003  001B40  6B65               	clrf	(?_sprintf+5)& (0+255),b
  3004  001B42  0101               	movlb	1	; () banked
  3005  001B44  0100               	movlb	0	; () banked
  3006  001B46  C112  F066         	movff	_date+5,?_sprintf+6
  3007  001B4A  0100               	movlb	0	; () banked
  3008  001B4C  0100               	movlb	0	; () banked
  3009  001B4E  6B67               	clrf	(?_sprintf+7)& (0+255),b
  3010  001B50  C0A5  F068         	movff	_printRTC$1276,?_sprintf+8
  3011  001B54  C0A6  F069         	movff	_printRTC$1276+1,?_sprintf+9
  3012  001B58  EC0E  F000         	call	_sprintf	;wreg free
  3013                           
  3014                           ;RTC.c: 199: break;
  3015  001B5C  D009               	goto	i2l6111
  3016  001B5E                     i2l6109:
  3017  001B5E  0101               	movlb	1	; () banked
  3018  001B60  0101               	movlb	1	; () banked
  3019  001B62  5116               	movf	(_date+9)& (0+255),w,b
  3020                           
  3021                           ; Switch size 1, requested type "space"
  3022                           ; Number of cases is 2, Range of values is 2 to 9
  3023                           ; switch strategies available:
  3024                           ; Name         Instructions Cycles
  3025                           ; simple_byte            7     4 (average)
  3026                           ;	Chosen strategy is simple_byte
  3027  001B64  0A02               	xorlw	2	; case 2
  3028  001B66  B4D8               	btfsc	status,2,c
  3029  001B68  D794               	goto	i2l6101
  3030  001B6A  0A0B               	xorlw	11	; case 9
  3031  001B6C  B4D8               	btfsc	status,2,c
  3032  001B6E  D7C4               	goto	i2l6103
  3033  001B70                     i2l6111:
  3034                           
  3035                           ;RTC.c: 202: writeString(digits, &str);
  3036  001B70  C05E  F022         	movff	printRTC@digits,?_writeString
  3037  001B74  0100               	movlb	0	; () banked
  3038  001B76  0E00               	movlw	high printRTC@str
  3039  001B78  6E24               	movwf	?_writeString+2,c
  3040  001B7A  0100               	movlb	0	; () banked
  3041  001B7C  0E9C               	movlw	low printRTC@str
  3042  001B7E  6E23               	movwf	?_writeString+1,c
  3043  001B80  EC01  F013         	call	_writeString	;wreg free
  3044                           
  3045                           ;RTC.c: 203: break;
  3046  001B84  D022               	goto	i2l311
  3047  001B86                     i2l6115:
  3048  001B86  505E               	movf	printRTC@digits,w,c
  3049  001B88  6E01               	movwf	?_countBits,c
  3050  001B8A  6A02               	clrf	?_countBits+1,c
  3051  001B8C  6A03               	clrf	?_countBits+2,c
  3052  001B8E  6A04               	clrf	?_countBits+3,c
  3053  001B90  EC56  F01E         	call	_countBits	;wreg free
  3054                           
  3055                           ; Switch size 1, requested type "space"
  3056                           ; Number of cases is 9, Range of values is 0 to 8
  3057                           ; switch strategies available:
  3058                           ; Name         Instructions Cycles
  3059                           ; simple_byte           28    15 (average)
  3060                           ;	Chosen strategy is simple_byte
  3061  001B94  0A00               	xorlw	0	; case 0
  3062  001B96  B4D8               	btfsc	status,2,c
  3063  001B98  D018               	goto	i2l311
  3064  001B9A  0A01               	xorlw	1	; case 1
  3065  001B9C  B4D8               	btfsc	status,2,c
  3066  001B9E  D015               	goto	i2l311
  3067  001BA0  0A03               	xorlw	3	; case 2
  3068  001BA2  B4D8               	btfsc	status,2,c
  3069  001BA4  D012               	goto	i2l311
  3070  001BA6  0A01               	xorlw	1	; case 3
  3071  001BA8  B4D8               	btfsc	status,2,c
  3072  001BAA  D00F               	goto	i2l311
  3073  001BAC  0A07               	xorlw	7	; case 4
  3074  001BAE  B4D8               	btfsc	status,2,c
  3075  001BB0  D695               	goto	i2l6083
  3076  001BB2  0A01               	xorlw	1	; case 5
  3077  001BB4  B4D8               	btfsc	status,2,c
  3078  001BB6  D692               	goto	i2l6083
  3079  001BB8  0A03               	xorlw	3	; case 6
  3080  001BBA  B4D8               	btfsc	status,2,c
  3081  001BBC  D753               	goto	i2l6097
  3082  001BBE  0A01               	xorlw	1	; case 7
  3083  001BC0  B4D8               	btfsc	status,2,c
  3084  001BC2  D750               	goto	i2l6097
  3085  001BC4  0A0F               	xorlw	15	; case 8
  3086  001BC6  B4D8               	btfsc	status,2,c
  3087  001BC8  D7CA               	goto	i2l6109
  3088  001BCA                     i2l311:
  3089  001BCA  0012               	return	
  3090  001BCC                     __end_of_printRTC:
  3091                           	opt stack 0
  3092                           tosu	equ	0xFFF
  3093                           tosh	equ	0xFFE
  3094                           tosl	equ	0xFFD
  3095                           pclatu	equ	0xFFB
  3096                           pclath	equ	0xFFA
  3097                           tblptru	equ	0xFF8
  3098                           tblptrh	equ	0xFF7
  3099                           tblptrl	equ	0xFF6
  3100                           tablat	equ	0xFF5
  3101                           prodh	equ	0xFF4
  3102                           prodl	equ	0xFF3
  3103                           intcon	equ	0xFF2
  3104                           intcon2	equ	0xFF1
  3105                           postinc0	equ	0xFEE
  3106                           fsr0h	equ	0xFEA
  3107                           fsr0l	equ	0xFE9
  3108                           wreg	equ	0xFE8
  3109                           postinc1	equ	0xFE6
  3110                           postdec1	equ	0xFE5
  3111                           fsr1h	equ	0xFE2
  3112                           fsr1l	equ	0xFE1
  3113                           postinc2	equ	0xFDE
  3114                           postdec2	equ	0xFDD
  3115                           fsr2h	equ	0xFDA
  3116                           fsr2l	equ	0xFD9
  3117                           status	equ	0xFD8
  3118                           
  3119 ;; *************** function _printTemp *****************
  3120 ;; Defined at:
  3121 ;;		line 57 in file "temp.c"
  3122 ;; Parameters:    Size  Location     Type
  3123 ;;  digits          1   93[COMRAM] unsigned char 
  3124 ;; Auto vars:     Size  Location     Type
  3125 ;;  units           1   62[BANK0 ] unsigned char 
  3126 ;; Return value:  Size  Location     Type
  3127 ;;		None               void
  3128 ;; Registers used:
  3129 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3130 ;; Tracked objects:
  3131 ;;		On entry : 0/0
  3132 ;;		On exit  : 0/0
  3133 ;;		Unchanged: 0/0
  3134 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3135 ;;      Params:         1       0       0       0       0       0       0       0       0
  3136 ;;      Locals:         0       5       0       0       0       0       0       0       0
  3137 ;;      Temps:          1       0       0       0       0       0       0       0       0
  3138 ;;      Totals:         2       5       0       0       0       0       0       0       0
  3139 ;;Total ram usage:        7 bytes
  3140 ;; Hardware stack levels used:    1
  3141 ;; Hardware stack levels required when called:    6
  3142 ;; This function calls:
  3143 ;;		_writeString
  3144 ;;		_writeFloat
  3145 ;;		_getTemp
  3146 ;;		_lowbit
  3147 ;; This function is called by:
  3148 ;;		_setup
  3149 ;;		_high_isr
  3150 ;;		_buttons
  3151 ;; This function uses a non-reentrant model
  3152 ;;
  3153                           
  3154                           	psect	text11
  3155  0033D0                     __ptext11:
  3156                           	opt stack 0
  3157  0033D0                     _printTemp:
  3158                           	opt stack 20
  3159                           
  3160                           ;temp.c: 58: uint8_t units = 0;
  3161                           
  3162                           ;incstack = 0
  3163                           ;incstack = 0
  3164  0033D0  6E5F               	movwf	??_printTemp& (0+255),c
  3165  0033D2  0E00               	movlw	0
  3166  0033D4  0100               	movlb	0	; () banked
  3167  0033D6  0100               	movlb	0	; () banked
  3168  0033D8  6F9E               	movwf	printTemp@units& (0+255),b
  3169  0033DA  505F               	movf	??_printTemp& (0+255),w,c
  3170                           
  3171                           ; BSR set to: 0
  3172                           ;temp.c: 59: units |= lowbit(digits);
  3173  0033DC  505E               	movf	printTemp@digits,w,c
  3174  0033DE  6E01               	movwf	?_lowbit,c
  3175  0033E0  6A02               	clrf	?_lowbit+1,c
  3176  0033E2  6A03               	clrf	?_lowbit+2,c
  3177  0033E4  6A04               	clrf	?_lowbit+3,c
  3178  0033E6  ECBF  F01B         	call	_lowbit	;wreg free
  3179  0033EA  5001               	movf	?_lowbit,w,c
  3180  0033EC  0100               	movlb	0	; () banked
  3181  0033EE  0100               	movlb	0	; () banked
  3182  0033F0  139E               	iorwf	printTemp@units& (0+255),f,b
  3183                           
  3184                           ; BSR set to: 0
  3185                           ;temp.c: 60: units |= lowbit(digits &= (~lowbit(digits)));
  3186  0033F2  505E               	movf	printTemp@digits,w,c
  3187  0033F4  6E01               	movwf	?_lowbit,c
  3188  0033F6  6A02               	clrf	?_lowbit+1,c
  3189  0033F8  6A03               	clrf	?_lowbit+2,c
  3190  0033FA  6A04               	clrf	?_lowbit+3,c
  3191  0033FC  ECBF  F01B         	call	_lowbit	;wreg free
  3192  003400  5001               	movf	?_lowbit,w,c
  3193  003402  0AFF               	xorlw	255
  3194  003404  165E               	andwf	printTemp@digits,f,c
  3195  003406  505E               	movf	printTemp@digits& (0+255),w,c
  3196  003408  0100               	movlb	0	; () banked
  3197  00340A  0100               	movlb	0	; () banked
  3198  00340C  6F9A               	movwf	_printTemp$1277& (0+255),b
  3199  00340E  0100               	movlb	0	; () banked
  3200  003410  6B9B               	clrf	(_printTemp$1277+1)& (0+255),b
  3201  003412  0100               	movlb	0	; () banked
  3202  003414  6B9C               	clrf	(_printTemp$1277+2)& (0+255),b
  3203  003416  0100               	movlb	0	; () banked
  3204  003418  6B9D               	clrf	(_printTemp$1277+3)& (0+255),b
  3205                           
  3206                           ; BSR set to: 0
  3207                           ;temp.c: 60: units |= lowbit(digits &= (~lowbit(digits)));
  3208  00341A  C09A  F001         	movff	_printTemp$1277,?_lowbit
  3209  00341E  C09B  F002         	movff	_printTemp$1277+1,?_lowbit+1
  3210  003422  C09C  F003         	movff	_printTemp$1277+2,?_lowbit+2
  3211  003426  C09D  F004         	movff	_printTemp$1277+3,?_lowbit+3
  3212  00342A  ECBF  F01B         	call	_lowbit	;wreg free
  3213  00342E  5001               	movf	?_lowbit,w,c
  3214  003430  0100               	movlb	0	; () banked
  3215  003432  0100               	movlb	0	; () banked
  3216  003434  139E               	iorwf	printTemp@units& (0+255),f,b
  3217                           
  3218                           ; BSR set to: 0
  3219                           ;temp.c: 61: digits &= ~units;
  3220  003436  0100               	movlb	0	; () banked
  3221  003438  0100               	movlb	0	; () banked
  3222  00343A  519E               	movf	printTemp@units& (0+255),w,b
  3223  00343C  0AFF               	xorlw	255
  3224  00343E  165E               	andwf	printTemp@digits,f,c
  3225                           
  3226                           ; BSR set to: 0
  3227                           ;temp.c: 63: writeString(units, (char*) "*C");
  3228  003440  C09E  F022         	movff	printTemp@units,?_writeString
  3229  003444  0E7F               	movlw	high STR_30
  3230  003446  6E24               	movwf	?_writeString+2,c
  3231  003448  0EFC               	movlw	low STR_30
  3232  00344A  6E23               	movwf	?_writeString+1,c
  3233  00344C  EC01  F013         	call	_writeString	;wreg free
  3234                           
  3235                           ;temp.c: 65: writeFloat(digits, getTemp());
  3236  003450  C05E  F08C         	movff	printTemp@digits,?_writeFloat
  3237  003454  ECD4  F013         	call	_getTemp	;wreg free
  3238  003458  C055  F08F         	movff	?_getTemp+2,?_writeFloat+3
  3239  00345C  C054  F08E         	movff	?_getTemp+1,?_writeFloat+2
  3240  003460  C053  F08D         	movff	?_getTemp,?_writeFloat+1
  3241  003464  EC08  F01B         	call	_writeFloat	;wreg free
  3242  003468  0012               	return	
  3243  00346A                     __end_of_printTemp:
  3244                           	opt stack 0
  3245                           tosu	equ	0xFFF
  3246                           tosh	equ	0xFFE
  3247                           tosl	equ	0xFFD
  3248                           pclatu	equ	0xFFB
  3249                           pclath	equ	0xFFA
  3250                           tblptru	equ	0xFF8
  3251                           tblptrh	equ	0xFF7
  3252                           tblptrl	equ	0xFF6
  3253                           tablat	equ	0xFF5
  3254                           prodh	equ	0xFF4
  3255                           prodl	equ	0xFF3
  3256                           intcon	equ	0xFF2
  3257                           intcon2	equ	0xFF1
  3258                           postinc0	equ	0xFEE
  3259                           fsr0h	equ	0xFEA
  3260                           fsr0l	equ	0xFE9
  3261                           wreg	equ	0xFE8
  3262                           postinc1	equ	0xFE6
  3263                           postdec1	equ	0xFE5
  3264                           fsr1h	equ	0xFE2
  3265                           fsr1l	equ	0xFE1
  3266                           postinc2	equ	0xFDE
  3267                           postdec2	equ	0xFDD
  3268                           fsr2h	equ	0xFDA
  3269                           fsr2l	equ	0xFD9
  3270                           status	equ	0xFD8
  3271                           
  3272 ;; *************** function _lowbit *****************
  3273 ;; Defined at:
  3274 ;;		line 26 in file "defs.c"
  3275 ;; Parameters:    Size  Location     Type
  3276 ;;  x               4    0[COMRAM] unsigned long 
  3277 ;; Auto vars:     Size  Location     Type
  3278 ;;  log2Val         4    7[COMRAM] unsigned long 
  3279 ;; Return value:  Size  Location     Type
  3280 ;;                  4    0[COMRAM] unsigned long 
  3281 ;; Registers used:
  3282 ;;		wreg, status,2, status,0
  3283 ;; Tracked objects:
  3284 ;;		On entry : 0/0
  3285 ;;		On exit  : 0/0
  3286 ;;		Unchanged: 0/0
  3287 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3288 ;;      Params:         4       0       0       0       0       0       0       0       0
  3289 ;;      Locals:         4       0       0       0       0       0       0       0       0
  3290 ;;      Temps:          3       0       0       0       0       0       0       0       0
  3291 ;;      Totals:        11       0       0       0       0       0       0       0       0
  3292 ;;Total ram usage:       11 bytes
  3293 ;; Hardware stack levels used:    1
  3294 ;; This function calls:
  3295 ;;		Nothing
  3296 ;; This function is called by:
  3297 ;;		_printTemp
  3298 ;; This function uses a non-reentrant model
  3299 ;;
  3300                           
  3301                           	psect	text12
  3302  00377E                     __ptext12:
  3303                           	opt stack 0
  3304  00377E                     _lowbit:
  3305                           	opt stack 25
  3306                           
  3307                           ;defs.c: 27: uint32_t log2Val = 0;
  3308                           
  3309                           ;incstack = 0
  3310                           ;incstack = 0
  3311  00377E  0E00               	movlw	0
  3312  003780  6E08               	movwf	lowbit@log2Val,c
  3313  003782  0E00               	movlw	0
  3314  003784  6E09               	movwf	lowbit@log2Val+1,c
  3315  003786  0E00               	movlw	0
  3316  003788  6E0A               	movwf	lowbit@log2Val+2,c
  3317  00378A  0E00               	movlw	0
  3318  00378C  6E0B               	movwf	lowbit@log2Val+3,c
  3319                           
  3320                           ;defs.c: 28: if (x & 1)
  3321  00378E  A001               	btfss	lowbit@x,0,c
  3322  003790  D008               	goto	i2l4711
  3323                           
  3324                           ;defs.c: 29: return 1;
  3325  003792  0E01               	movlw	1
  3326  003794  6E01               	movwf	?_lowbit,c
  3327  003796  0E00               	movlw	0
  3328  003798  6E02               	movwf	?_lowbit+1,c
  3329  00379A  0E00               	movlw	0
  3330  00379C  6E03               	movwf	?_lowbit+2,c
  3331  00379E  0E00               	movlw	0
  3332  0037A0  D023               	goto	L1
  3333  0037A2                     i2l4711:
  3334  0037A2  0E01               	movlw	1
  3335  0037A4  2608               	addwf	lowbit@log2Val,f,c
  3336  0037A6  0E00               	movlw	0
  3337  0037A8  2209               	addwfc	lowbit@log2Val+1,f,c
  3338  0037AA  0E00               	movlw	0
  3339  0037AC  220A               	addwfc	lowbit@log2Val+2,f,c
  3340  0037AE  0E00               	movlw	0
  3341  0037B0  220B               	addwfc	lowbit@log2Val+3,f,c
  3342  0037B2  90D8               	bcf	status,0,c
  3343  0037B4  3204               	rrcf	lowbit@x+3,f,c
  3344  0037B6  3203               	rrcf	lowbit@x+2,f,c
  3345  0037B8  3202               	rrcf	lowbit@x+1,f,c
  3346  0037BA  3201               	rrcf	lowbit@x,f,c
  3347  0037BC  A001               	btfss	lowbit@x& (0+255),0,c
  3348  0037BE  D7F1               	goto	i2l4711
  3349                           
  3350                           ;defs.c: 32: return 1 << log2Val;
  3351  0037C0  C008  F005         	movff	lowbit@log2Val,??_lowbit
  3352  0037C4  0E01               	movlw	1
  3353  0037C6  6E06               	movwf	(??_lowbit+1)& (0+255),c
  3354  0037C8  6A07               	clrf	(??_lowbit+2)& (0+255),c
  3355  0037CA  2A05               	incf	??_lowbit,f,c
  3356  0037CC  D003               	goto	i2u256_44
  3357  0037CE                     i2u256_45:
  3358  0037CE  90D8               	bcf	status,0,c
  3359  0037D0  3606               	rlcf	??_lowbit+1,f,c
  3360  0037D2  3607               	rlcf	??_lowbit+2,f,c
  3361  0037D4                     i2u256_44:
  3362  0037D4  2E05               	decfsz	??_lowbit,f,c
  3363  0037D6  D7FB               	goto	i2u256_45
  3364  0037D8  C006  F001         	movff	??_lowbit+1,?_lowbit
  3365  0037DC  C007  F002         	movff	??_lowbit+2,?_lowbit+1
  3366  0037E0  0E00               	movlw	0
  3367  0037E2  BE02               	btfsc	?_lowbit+1,7,c
  3368  0037E4  0EFF               	movlw	-1
  3369  0037E6  6E03               	movwf	?_lowbit+2,c
  3370  0037E8                     L1:
  3371  0037E8  6E04               	movwf	?_lowbit+3,c
  3372  0037EA  0012               	return	
  3373  0037EC                     __end_of_lowbit:
  3374                           	opt stack 0
  3375                           tosu	equ	0xFFF
  3376                           tosh	equ	0xFFE
  3377                           tosl	equ	0xFFD
  3378                           pclatu	equ	0xFFB
  3379                           pclath	equ	0xFFA
  3380                           tblptru	equ	0xFF8
  3381                           tblptrh	equ	0xFF7
  3382                           tblptrl	equ	0xFF6
  3383                           tablat	equ	0xFF5
  3384                           prodh	equ	0xFF4
  3385                           prodl	equ	0xFF3
  3386                           intcon	equ	0xFF2
  3387                           intcon2	equ	0xFF1
  3388                           postinc0	equ	0xFEE
  3389                           fsr0h	equ	0xFEA
  3390                           fsr0l	equ	0xFE9
  3391                           wreg	equ	0xFE8
  3392                           postinc1	equ	0xFE6
  3393                           postdec1	equ	0xFE5
  3394                           fsr1h	equ	0xFE2
  3395                           fsr1l	equ	0xFE1
  3396                           postinc2	equ	0xFDE
  3397                           postdec2	equ	0xFDD
  3398                           fsr2h	equ	0xFDA
  3399                           fsr2l	equ	0xFD9
  3400                           status	equ	0xFD8
  3401                           
  3402 ;; *************** function _getTemp *****************
  3403 ;; Defined at:
  3404 ;;		line 35 in file "temp.c"
  3405 ;; Parameters:    Size  Location     Type
  3406 ;;		None
  3407 ;; Auto vars:     Size  Location     Type
  3408 ;;  oldTempsTemp    9    0[BANK0 ] [3]
  3409 ;;  total           3   12[BANK0 ] [3]
  3410 ;;  temp            3    9[BANK0 ] [3]
  3411 ;;  cnt             1   15[BANK0 ] unsigned char 
  3412 ;; Return value:  Size  Location     Type
  3413 ;;                  3   82[COMRAM] unsigned char 
  3414 ;; Registers used:
  3415 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3416 ;; Tracked objects:
  3417 ;;		On entry : 0/0
  3418 ;;		On exit  : 0/0
  3419 ;;		Unchanged: 0/0
  3420 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3421 ;;      Params:         3       0       0       0       0       0       0       0       0
  3422 ;;      Locals:         0      16       0       0       0       0       0       0       0
  3423 ;;      Temps:          1       0       0       0       0       0       0       0       0
  3424 ;;      Totals:         4      16       0       0       0       0       0       0       0
  3425 ;;Total ram usage:       20 bytes
  3426 ;; Hardware stack levels used:    1
  3427 ;; Hardware stack levels required when called:    3
  3428 ;; This function calls:
  3429 ;;		___asftadd
  3430 ;;		___ftadd
  3431 ;;		___ftdiv
  3432 ;;		___ftmul
  3433 ;;		___lwtoft
  3434 ;;		___wmul
  3435 ;; This function is called by:
  3436 ;;		_printTemp
  3437 ;; This function uses a non-reentrant model
  3438 ;;
  3439                           
  3440                           	psect	text13
  3441  0027A8                     __ptext13:
  3442                           	opt stack 0
  3443  0027A8                     _getTemp:
  3444                           	opt stack 22
  3445                           
  3446                           ;temp.c: 36: double oldTempsTemp[3];
  3447                           ;temp.c: 37: uint8_t cnt;
  3448                           ;temp.c: 38: for (cnt = 3;cnt > 0;cnt--)
  3449                           
  3450                           ;incstack = 0
  3451                           ;incstack = 0
  3452  0027A8  6E56               	movwf	??_getTemp& (0+255),c
  3453  0027AA  0E03               	movlw	3
  3454  0027AC  0100               	movlb	0	; () banked
  3455  0027AE  0100               	movlb	0	; () banked
  3456  0027B0  6F6F               	movwf	getTemp@cnt& (0+255),b
  3457  0027B2  5056               	movf	??_getTemp& (0+255),w,c
  3458  0027B4  D02C               	goto	L2
  3459  0027B6                     i2l5637:
  3460                           
  3461                           ; BSR set to: 0
  3462                           ;temp.c: 39: {
  3463                           ;temp.c: 40: oldTempsTemp[cnt-1] = oldTemps[cnt];
  3464  0027B6  0100               	movlb	0	; () banked
  3465  0027B8  0100               	movlb	0	; () banked
  3466  0027BA  516F               	movf	getTemp@cnt& (0+255),w,b
  3467  0027BC  0D03               	mullw	3
  3468  0027BE  0100               	movlb	0	; () banked
  3469  0027C0  0EB7               	movlw	low _oldTemps
  3470  0027C2  24F3               	addwf	prodl,w,c
  3471  0027C4  6ED9               	movwf	fsr2l,c
  3472  0027C6  0100               	movlb	0	; () banked
  3473  0027C8  0E00               	movlw	high _oldTemps
  3474  0027CA  20F4               	addwfc	prodh,w,c
  3475  0027CC  6EDA               	movwf	fsr2h,c
  3476  0027CE  0EFF               	movlw	255
  3477  0027D0  0100               	movlb	0	; () banked
  3478  0027D2  0100               	movlb	0	; () banked
  3479  0027D4  256F               	addwf	getTemp@cnt& (0+255),w,b
  3480  0027D6  6E17               	movwf	?___wmul,c
  3481  0027D8  6A18               	clrf	?___wmul+1,c
  3482  0027DA  0EFF               	movlw	255
  3483  0027DC  2218               	addwfc	?___wmul+1,f,c
  3484  0027DE  0E00               	movlw	0
  3485  0027E0  6E1A               	movwf	?___wmul+3,c
  3486  0027E2  0E03               	movlw	3
  3487  0027E4  6E19               	movwf	?___wmul+2,c
  3488  0027E6  ECEF  F01D         	call	___wmul	;wreg free
  3489  0027EA  0100               	movlb	0	; () banked
  3490  0027EC  0E60               	movlw	low getTemp@oldTempsTemp
  3491  0027EE  2417               	addwf	?___wmul,w,c
  3492  0027F0  6EE1               	movwf	fsr1l,c
  3493  0027F2  0100               	movlb	0	; () banked
  3494  0027F4  0E00               	movlw	high getTemp@oldTempsTemp
  3495  0027F6  2018               	addwfc	?___wmul+1,w,c
  3496  0027F8  6EE2               	movwf	fsr1h,c
  3497  0027FA  CFDE FFE6          	movff	postinc2,postinc1
  3498  0027FE  CFDE FFE6          	movff	postinc2,postinc1
  3499  002802  CFDE FFE5          	movff	postinc2,postdec1
  3500  002806  52E5               	movf	postdec1,f,c
  3501                           
  3502                           ; BSR set to: 0
  3503  002808  0100               	movlb	0	; () banked
  3504  00280A  0100               	movlb	0	; () banked
  3505  00280C  076F               	decf	getTemp@cnt& (0+255),f,b
  3506  00280E                     L2:
  3507                           
  3508                           ; BSR set to: 0
  3509  00280E  0100               	movlb	0	; () banked
  3510  002810  0100               	movlb	0	; () banked
  3511  002812  676F               	tstfsz	getTemp@cnt& (0+255),b
  3512  002814  D7D0               	goto	i2l5637
  3513                           
  3514                           ; BSR set to: 0
  3515                           ;temp.c: 41: }
  3516                           ;temp.c: 42: GO = 1;
  3517  002816  82C2               	bsf	4034,1,c	;volatile
  3518  002818                     i2l365:
  3519  002818  B2C2               	btfsc	4034,1,c	;volatile
  3520  00281A  D7FE               	goto	i2l365
  3521                           
  3522                           ;temp.c: 44: double temp = (((double)ADRES) * ((0.0048828125)/0.0195/(4.0303030303030303
      +                          0303030303)) - (20.5128205128));
  3523  00281C  0E7B               	movlw	123
  3524  00281E  6E31               	movwf	?___ftmul+3,c
  3525  002820  0E7E               	movlw	126
  3526  002822  6E32               	movwf	?___ftmul+4,c
  3527  002824  0E3D               	movlw	61
  3528  002826  6E33               	movwf	?___ftmul+5,c
  3529  002828  CFC3 F009          	movff	4035,?___lwtoft	;volatile
  3530  00282C  CFC4 F00A          	movff	4036,?___lwtoft+1	;volatile
  3531  002830  EC40  F01E         	call	___lwtoft	;wreg free
  3532  002834  C00B  F030         	movff	?___lwtoft+2,?___ftmul+2
  3533  002838  C00A  F02F         	movff	?___lwtoft+1,?___ftmul+1
  3534  00283C  C009  F02E         	movff	?___lwtoft,?___ftmul
  3535  002840  ECC4  F015         	call	___ftmul	;wreg free
  3536  002844  C030  F041         	movff	?___ftmul+2,?___ftadd+2
  3537  002848  C02F  F040         	movff	?___ftmul+1,?___ftadd+1
  3538  00284C  C02E  F03F         	movff	?___ftmul,?___ftadd
  3539  002850  0E1A               	movlw	26
  3540  002852  6E42               	movwf	?___ftadd+3,c
  3541  002854  0EA4               	movlw	164
  3542  002856  6E43               	movwf	?___ftadd+4,c
  3543  002858  0EC1               	movlw	193
  3544  00285A  6E44               	movwf	?___ftadd+5,c
  3545  00285C  EC1B  F012         	call	___ftadd	;wreg free
  3546  002860  C041  F06B         	movff	?___ftadd+2,getTemp@temp+2
  3547  002864  C040  F06A         	movff	?___ftadd+1,getTemp@temp+1
  3548  002868  C03F  F069         	movff	?___ftadd,getTemp@temp
  3549                           
  3550                           ;temp.c: 45: double total = temp;
  3551  00286C  C069  F06C         	movff	getTemp@temp,getTemp@total
  3552  002870  C06A  F06D         	movff	getTemp@temp+1,getTemp@total+1
  3553  002874  C06B  F06E         	movff	getTemp@temp+2,getTemp@total+2
  3554                           
  3555                           ;temp.c: 46: for (cnt = 0;cnt < 3;cnt++)
  3556  002878  6E56               	movwf	??_getTemp& (0+255),c
  3557  00287A  0E00               	movlw	0
  3558  00287C  0100               	movlb	0	; () banked
  3559  00287E  0100               	movlb	0	; () banked
  3560  002880  6F6F               	movwf	getTemp@cnt& (0+255),b
  3561  002882  5056               	movf	??_getTemp& (0+255),w,c
  3562  002884  D03C               	goto	L3
  3563  002886                     i2l5653:
  3564                           
  3565                           ; BSR set to: 0
  3566                           ;temp.c: 47: {
  3567                           ;temp.c: 48: oldTemps[cnt] = oldTempsTemp[cnt];
  3568  002886  0100               	movlb	0	; () banked
  3569  002888  0100               	movlb	0	; () banked
  3570  00288A  516F               	movf	getTemp@cnt& (0+255),w,b
  3571  00288C  0D03               	mullw	3
  3572  00288E  0100               	movlb	0	; () banked
  3573  002890  0E60               	movlw	low getTemp@oldTempsTemp
  3574  002892  24F3               	addwf	prodl,w,c
  3575  002894  6ED9               	movwf	fsr2l,c
  3576  002896  0100               	movlb	0	; () banked
  3577  002898  0E00               	movlw	high getTemp@oldTempsTemp
  3578  00289A  20F4               	addwfc	prodh,w,c
  3579  00289C  6EDA               	movwf	fsr2h,c
  3580  00289E  0100               	movlb	0	; () banked
  3581  0028A0  0100               	movlb	0	; () banked
  3582  0028A2  516F               	movf	getTemp@cnt& (0+255),w,b
  3583  0028A4  0D03               	mullw	3
  3584  0028A6  0100               	movlb	0	; () banked
  3585  0028A8  0EB7               	movlw	low _oldTemps
  3586  0028AA  24F3               	addwf	prodl,w,c
  3587  0028AC  6EE1               	movwf	fsr1l,c
  3588  0028AE  0100               	movlb	0	; () banked
  3589  0028B0  0E00               	movlw	high _oldTemps
  3590  0028B2  20F4               	addwfc	prodh,w,c
  3591  0028B4  6EE2               	movwf	fsr1h,c
  3592  0028B6  CFDE FFE6          	movff	postinc2,postinc1
  3593  0028BA  CFDE FFE6          	movff	postinc2,postinc1
  3594  0028BE  CFDE FFE5          	movff	postinc2,postdec1
  3595  0028C2  52E5               	movf	postdec1,f,c
  3596                           
  3597                           ; BSR set to: 0
  3598                           ;temp.c: 49: total += oldTemps[cnt];
  3599  0028C4  0100               	movlb	0	; () banked
  3600  0028C6  0E00               	movlw	high getTemp@total
  3601  0028C8  6E4F               	movwf	?___asftadd+1,c
  3602  0028CA  0100               	movlb	0	; () banked
  3603  0028CC  0E6C               	movlw	low getTemp@total
  3604  0028CE  6E4E               	movwf	?___asftadd,c
  3605  0028D0  0100               	movlb	0	; () banked
  3606  0028D2  0100               	movlb	0	; () banked
  3607  0028D4  516F               	movf	getTemp@cnt& (0+255),w,b
  3608  0028D6  0D03               	mullw	3
  3609  0028D8  0100               	movlb	0	; () banked
  3610  0028DA  0EB7               	movlw	low _oldTemps
  3611  0028DC  24F3               	addwf	prodl,w,c
  3612  0028DE  6ED9               	movwf	fsr2l,c
  3613  0028E0  0100               	movlb	0	; () banked
  3614  0028E2  0E00               	movlw	high _oldTemps
  3615  0028E4  20F4               	addwfc	prodh,w,c
  3616  0028E6  6EDA               	movwf	fsr2h,c
  3617  0028E8  CFDE F050          	movff	postinc2,?___asftadd+2
  3618  0028EC  CFDE F051          	movff	postinc2,?___asftadd+3
  3619  0028F0  CFDD F052          	movff	postdec2,?___asftadd+4
  3620  0028F4  ECB4  F01D         	call	___asftadd	;wreg free
  3621  0028F8  0100               	movlb	0	; () banked
  3622  0028FA  0100               	movlb	0	; () banked
  3623  0028FC  2B6F               	incf	getTemp@cnt& (0+255),f,b
  3624  0028FE                     L3:
  3625                           
  3626                           ; BSR set to: 0
  3627  0028FE  0E02               	movlw	2
  3628  002900  0100               	movlb	0	; () banked
  3629  002902  0100               	movlb	0	; () banked
  3630  002904  656F               	cpfsgt	getTemp@cnt& (0+255),b
  3631  002906  D7BF               	goto	i2l5653
  3632                           
  3633                           ; BSR set to: 0
  3634                           ;temp.c: 50: }
  3635                           ;temp.c: 51: oldTemps[3] = temp;
  3636  002908  C069  F0C0         	movff	getTemp@temp,_oldTemps+9
  3637  00290C  C06A  F0C1         	movff	getTemp@temp+1,_oldTemps+10
  3638  002910  C06B  F0C2         	movff	getTemp@temp+2,_oldTemps+11
  3639                           
  3640                           ; BSR set to: 0
  3641                           ;temp.c: 53: return total/4;
  3642  002914  C06C  F009         	movff	getTemp@total,?___ftdiv
  3643  002918  C06D  F00A         	movff	getTemp@total+1,?___ftdiv+1
  3644  00291C  C06E  F00B         	movff	getTemp@total+2,?___ftdiv+2
  3645  002920  0E00               	movlw	0
  3646  002922  6E0C               	movwf	?___ftdiv+3,c
  3647  002924  0E80               	movlw	128
  3648  002926  6E0D               	movwf	?___ftdiv+4,c
  3649  002928  0E40               	movlw	64
  3650  00292A  6E0E               	movwf	?___ftdiv+5,c
  3651  00292C  EC4C  F016         	call	___ftdiv	;wreg free
  3652  002930  C00B  F055         	movff	?___ftdiv+2,?_getTemp+2
  3653  002934  C00A  F054         	movff	?___ftdiv+1,?_getTemp+1
  3654  002938  C009  F053         	movff	?___ftdiv,?_getTemp
  3655  00293C  0012               	return	
  3656  00293E                     __end_of_getTemp:
  3657                           	opt stack 0
  3658                           tosu	equ	0xFFF
  3659                           tosh	equ	0xFFE
  3660                           tosl	equ	0xFFD
  3661                           pclatu	equ	0xFFB
  3662                           pclath	equ	0xFFA
  3663                           tblptru	equ	0xFF8
  3664                           tblptrh	equ	0xFF7
  3665                           tblptrl	equ	0xFF6
  3666                           tablat	equ	0xFF5
  3667                           prodh	equ	0xFF4
  3668                           prodl	equ	0xFF3
  3669                           intcon	equ	0xFF2
  3670                           intcon2	equ	0xFF1
  3671                           postinc0	equ	0xFEE
  3672                           fsr0h	equ	0xFEA
  3673                           fsr0l	equ	0xFE9
  3674                           wreg	equ	0xFE8
  3675                           postinc1	equ	0xFE6
  3676                           postdec1	equ	0xFE5
  3677                           fsr1h	equ	0xFE2
  3678                           fsr1l	equ	0xFE1
  3679                           postinc2	equ	0xFDE
  3680                           postdec2	equ	0xFDD
  3681                           fsr2h	equ	0xFDA
  3682                           fsr2l	equ	0xFD9
  3683                           status	equ	0xFD8
  3684                           
  3685 ;; *************** function ___lwtoft *****************
  3686 ;; Defined at:
  3687 ;;		line 29 in file "/usr/opt/microchip/xc8/v1.20/sources/common/lwtoft.c"
  3688 ;; Parameters:    Size  Location     Type
  3689 ;;  c               2    8[COMRAM] unsigned int 
  3690 ;; Auto vars:     Size  Location     Type
  3691 ;;		None
  3692 ;; Return value:  Size  Location     Type
  3693 ;;                  3    8[COMRAM] float 
  3694 ;; Registers used:
  3695 ;;		wreg, status,2, status,0, cstack
  3696 ;; Tracked objects:
  3697 ;;		On entry : 0/0
  3698 ;;		On exit  : 0/0
  3699 ;;		Unchanged: 0/0
  3700 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3701 ;;      Params:         3       0       0       0       0       0       0       0       0
  3702 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3703 ;;      Temps:          2       0       0       0       0       0       0       0       0
  3704 ;;      Totals:         5       0       0       0       0       0       0       0       0
  3705 ;;Total ram usage:        5 bytes
  3706 ;; Hardware stack levels used:    1
  3707 ;; Hardware stack levels required when called:    1
  3708 ;; This function calls:
  3709 ;;		___ftpack
  3710 ;; This function is called by:
  3711 ;;		_getTemp
  3712 ;; This function uses a non-reentrant model
  3713 ;;
  3714                           
  3715                           	psect	text14
  3716  003C80                     __ptext14:
  3717                           	opt stack 0
  3718  003C80                     ___lwtoft:
  3719                           	opt stack 23
  3720                           
  3721                           ;incstack = 0
  3722                           ;incstack = 0
  3723  003C80  C009  F001         	movff	___lwtoft@c,?___ftpack
  3724  003C84  C00A  F002         	movff	___lwtoft@c+1,?___ftpack+1
  3725  003C88  6A03               	clrf	?___ftpack+2,c
  3726  003C8A  6E0C               	movwf	??___lwtoft& (0+255),c
  3727  003C8C  0E8E               	movlw	142
  3728  003C8E  6E04               	movwf	?___ftpack+3,c
  3729  003C90  500C               	movf	??___lwtoft& (0+255),w,c
  3730  003C92  6E0D               	movwf	(??___lwtoft+1)& (0+255),c
  3731  003C94  0E00               	movlw	0
  3732  003C96  6E05               	movwf	?___ftpack+4,c
  3733  003C98  500D               	movf	(??___lwtoft+1)& (0+255),w,c
  3734  003C9A  EC96  F018         	call	___ftpack	;wreg free
  3735  003C9E  C003  F00B         	movff	?___ftpack+2,?___lwtoft+2
  3736  003CA2  C002  F00A         	movff	?___ftpack+1,?___lwtoft+1
  3737  003CA6  C001  F009         	movff	?___ftpack,?___lwtoft
  3738  003CAA  0012               	return	
  3739  003CAC                     __end_of___lwtoft:
  3740                           	opt stack 0
  3741                           tosu	equ	0xFFF
  3742                           tosh	equ	0xFFE
  3743                           tosl	equ	0xFFD
  3744                           pclatu	equ	0xFFB
  3745                           pclath	equ	0xFFA
  3746                           tblptru	equ	0xFF8
  3747                           tblptrh	equ	0xFF7
  3748                           tblptrl	equ	0xFF6
  3749                           tablat	equ	0xFF5
  3750                           prodh	equ	0xFF4
  3751                           prodl	equ	0xFF3
  3752                           intcon	equ	0xFF2
  3753                           intcon2	equ	0xFF1
  3754                           postinc0	equ	0xFEE
  3755                           fsr0h	equ	0xFEA
  3756                           fsr0l	equ	0xFE9
  3757                           wreg	equ	0xFE8
  3758                           postinc1	equ	0xFE6
  3759                           postdec1	equ	0xFE5
  3760                           fsr1h	equ	0xFE2
  3761                           fsr1l	equ	0xFE1
  3762                           postinc2	equ	0xFDE
  3763                           postdec2	equ	0xFDD
  3764                           fsr2h	equ	0xFDA
  3765                           fsr2l	equ	0xFD9
  3766                           status	equ	0xFD8
  3767                           
  3768 ;; *************** function ___ftdiv *****************
  3769 ;; Defined at:
  3770 ;;		line 50 in file "/usr/opt/microchip/xc8/v1.20/sources/common/ftdiv.c"
  3771 ;; Parameters:    Size  Location     Type
  3772 ;;  f1              3    8[COMRAM] float 
  3773 ;;  f2              3   11[COMRAM] float 
  3774 ;; Auto vars:     Size  Location     Type
  3775 ;;  f3              3   20[COMRAM] float 
  3776 ;;  sign            1   24[COMRAM] unsigned char 
  3777 ;;  exp             1   23[COMRAM] unsigned char 
  3778 ;;  cntr            1   19[COMRAM] unsigned char 
  3779 ;; Return value:  Size  Location     Type
  3780 ;;                  3    8[COMRAM] float 
  3781 ;; Registers used:
  3782 ;;		wreg, status,2, status,0, cstack
  3783 ;; Tracked objects:
  3784 ;;		On entry : 0/0
  3785 ;;		On exit  : 0/0
  3786 ;;		Unchanged: 0/0
  3787 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3788 ;;      Params:         6       0       0       0       0       0       0       0       0
  3789 ;;      Locals:         6       0       0       0       0       0       0       0       0
  3790 ;;      Temps:          5       0       0       0       0       0       0       0       0
  3791 ;;      Totals:        17       0       0       0       0       0       0       0       0
  3792 ;;Total ram usage:       17 bytes
  3793 ;; Hardware stack levels used:    1
  3794 ;; Hardware stack levels required when called:    1
  3795 ;; This function calls:
  3796 ;;		___ftpack
  3797 ;; This function is called by:
  3798 ;;		_getTemp
  3799 ;; This function uses a non-reentrant model
  3800 ;;
  3801                           
  3802                           	psect	text15
  3803  002C98                     __ptext15:
  3804                           	opt stack 0
  3805  002C98                     ___ftdiv:
  3806                           	opt stack 23
  3807                           
  3808                           ;incstack = 0
  3809                           ;incstack = 0
  3810  002C98  0E0F               	movlw	15
  3811  002C9A  6E0F               	movwf	??___ftdiv& (0+255),c
  3812  002C9C  C009  F010         	movff	___ftdiv@f1,??___ftdiv+1
  3813  002CA0  C00A  F011         	movff	___ftdiv@f1+1,??___ftdiv+2
  3814  002CA4  C00B  F012         	movff	___ftdiv@f1+2,??___ftdiv+3
  3815  002CA8  280F               	incf	??___ftdiv,w,c
  3816  002CAA  6E13               	movwf	(??___ftdiv+4)& (0+255),c
  3817  002CAC  D004               	goto	i2u310_40
  3818  002CAE                     i2u310_45:
  3819  002CAE  90D8               	bcf	status,0,c
  3820  002CB0  3212               	rrcf	??___ftdiv+3,f,c
  3821  002CB2  3211               	rrcf	??___ftdiv+2,f,c
  3822  002CB4  3210               	rrcf	??___ftdiv+1,f,c
  3823  002CB6                     i2u310_40:
  3824  002CB6  2E13               	decfsz	(??___ftdiv+4)& (0+255),f,c
  3825  002CB8  D7FA               	goto	i2u310_45
  3826  002CBA  5010               	movf	??___ftdiv+1,w,c
  3827  002CBC  6E18               	movwf	___ftdiv@exp,c
  3828  002CBE  6618               	tstfsz	___ftdiv@exp& (0+255),c
  3829  002CC0  D001               	goto	i2l5087
  3830  002CC2  D015               	goto	i2u313_40
  3831  002CC4                     i2l5087:
  3832  002CC4  0E0F               	movlw	15
  3833  002CC6  6E0F               	movwf	??___ftdiv& (0+255),c
  3834  002CC8  C00C  F010         	movff	___ftdiv@f2,??___ftdiv+1
  3835  002CCC  C00D  F011         	movff	___ftdiv@f2+1,??___ftdiv+2
  3836  002CD0  C00E  F012         	movff	___ftdiv@f2+2,??___ftdiv+3
  3837  002CD4  280F               	incf	??___ftdiv,w,c
  3838  002CD6  6E13               	movwf	(??___ftdiv+4)& (0+255),c
  3839  002CD8  D004               	goto	i2u312_40
  3840  002CDA                     i2u312_45:
  3841  002CDA  90D8               	bcf	status,0,c
  3842  002CDC  3212               	rrcf	??___ftdiv+3,f,c
  3843  002CDE  3211               	rrcf	??___ftdiv+2,f,c
  3844  002CE0  3210               	rrcf	??___ftdiv+1,f,c
  3845  002CE2                     i2u312_40:
  3846  002CE2  2E13               	decfsz	(??___ftdiv+4)& (0+255),f,c
  3847  002CE4  D7FA               	goto	i2u312_45
  3848  002CE6  5010               	movf	??___ftdiv+1,w,c
  3849  002CE8  6E19               	movwf	___ftdiv@sign,c
  3850  002CEA  6619               	tstfsz	___ftdiv@sign& (0+255),c
  3851  002CEC  D007               	goto	i2l5093
  3852  002CEE                     i2u313_40:
  3853  002CEE  0E00               	movlw	0
  3854  002CF0  6E09               	movwf	?___ftdiv,c
  3855  002CF2  0E00               	movlw	0
  3856  002CF4  6E0A               	movwf	?___ftdiv+1,c
  3857  002CF6  0E00               	movlw	0
  3858  002CF8  6E0B               	movwf	?___ftdiv+2,c
  3859  002CFA  D04C               	goto	i2l1012
  3860  002CFC                     i2l5093:
  3861  002CFC  0E00               	movlw	0
  3862  002CFE  6E15               	movwf	___ftdiv@f3,c
  3863  002D00  0E00               	movlw	0
  3864  002D02  6E16               	movwf	___ftdiv@f3+1,c
  3865  002D04  0E00               	movlw	0
  3866  002D06  6E17               	movwf	___ftdiv@f3+2,c
  3867  002D08  5019               	movf	___ftdiv@sign,w,c
  3868  002D0A  0F89               	addlw	137
  3869  002D0C  5E18               	subwf	___ftdiv@exp,f,c
  3870  002D0E  C00B  F019         	movff	___ftdiv@f1+2,___ftdiv@sign
  3871  002D12  500E               	movf	(___ftdiv@f2+2)& (0+255),w,c
  3872  002D14  1A19               	xorwf	___ftdiv@sign,f,c
  3873  002D16  0E80               	movlw	128
  3874  002D18  1619               	andwf	___ftdiv@sign,f,c
  3875  002D1A  8E0A               	bsf	___ftdiv@f1+1,7,c
  3876  002D1C  0EFF               	movlw	255
  3877  002D1E  1609               	andwf	___ftdiv@f1,f,c
  3878  002D20  0EFF               	movlw	255
  3879  002D22  160A               	andwf	___ftdiv@f1+1,f,c
  3880  002D24  0E00               	movlw	0
  3881  002D26  160B               	andwf	___ftdiv@f1+2,f,c
  3882  002D28  8E0D               	bsf	___ftdiv@f2+1,7,c
  3883  002D2A  0EFF               	movlw	255
  3884  002D2C  160C               	andwf	___ftdiv@f2,f,c
  3885  002D2E  0EFF               	movlw	255
  3886  002D30  160D               	andwf	___ftdiv@f2+1,f,c
  3887  002D32  0E00               	movlw	0
  3888  002D34  160E               	andwf	___ftdiv@f2+2,f,c
  3889  002D36  6E0F               	movwf	??___ftdiv& (0+255),c
  3890  002D38  0E18               	movlw	24
  3891  002D3A  6E14               	movwf	___ftdiv@cntr,c
  3892  002D3C  500F               	movf	??___ftdiv& (0+255),w,c
  3893  002D3E                     i2l1014:
  3894  002D3E  90D8               	bcf	status,0,c
  3895  002D40  3615               	rlcf	___ftdiv@f3,f,c
  3896  002D42  3616               	rlcf	___ftdiv@f3+1,f,c
  3897  002D44  3617               	rlcf	___ftdiv@f3+2,f,c
  3898  002D46  500C               	movf	___ftdiv@f2,w,c
  3899  002D48  5C09               	subwf	___ftdiv@f1,w,c
  3900  002D4A  500D               	movf	___ftdiv@f2+1,w,c
  3901  002D4C  580A               	subwfb	___ftdiv@f1+1,w,c
  3902  002D4E  500E               	movf	___ftdiv@f2+2,w,c
  3903  002D50  580B               	subwfb	___ftdiv@f1+2,w,c
  3904  002D52  A0D8               	btfss	status,0,c
  3905  002D54  D007               	goto	i2l1015
  3906  002D56  500C               	movf	___ftdiv@f2,w,c
  3907  002D58  5E09               	subwf	___ftdiv@f1,f,c
  3908  002D5A  500D               	movf	___ftdiv@f2+1,w,c
  3909  002D5C  5A0A               	subwfb	___ftdiv@f1+1,f,c
  3910  002D5E  500E               	movf	___ftdiv@f2+2,w,c
  3911  002D60  5A0B               	subwfb	___ftdiv@f1+2,f,c
  3912  002D62  8015               	bsf	___ftdiv@f3,0,c
  3913  002D64                     i2l1015:
  3914  002D64  90D8               	bcf	status,0,c
  3915  002D66  3609               	rlcf	___ftdiv@f1,f,c
  3916  002D68  360A               	rlcf	___ftdiv@f1+1,f,c
  3917  002D6A  360B               	rlcf	___ftdiv@f1+2,f,c
  3918  002D6C  2E14               	decfsz	___ftdiv@cntr,f,c
  3919  002D6E  D7E7               	goto	i2l1014
  3920  002D70  C015  F001         	movff	___ftdiv@f3,?___ftpack
  3921  002D74  C016  F002         	movff	___ftdiv@f3+1,?___ftpack+1
  3922  002D78  C017  F003         	movff	___ftdiv@f3+2,?___ftpack+2
  3923  002D7C  C018  F004         	movff	___ftdiv@exp,?___ftpack+3
  3924  002D80  C019  F005         	movff	___ftdiv@sign,?___ftpack+4
  3925  002D84  EC96  F018         	call	___ftpack	;wreg free
  3926  002D88  C003  F00B         	movff	?___ftpack+2,?___ftdiv+2
  3927  002D8C  C002  F00A         	movff	?___ftpack+1,?___ftdiv+1
  3928  002D90  C001  F009         	movff	?___ftpack,?___ftdiv
  3929  002D94                     i2l1012:
  3930  002D94  0012               	return	
  3931  002D96                     __end_of___ftdiv:
  3932                           	opt stack 0
  3933                           tosu	equ	0xFFF
  3934                           tosh	equ	0xFFE
  3935                           tosl	equ	0xFFD
  3936                           pclatu	equ	0xFFB
  3937                           pclath	equ	0xFFA
  3938                           tblptru	equ	0xFF8
  3939                           tblptrh	equ	0xFF7
  3940                           tblptrl	equ	0xFF6
  3941                           tablat	equ	0xFF5
  3942                           prodh	equ	0xFF4
  3943                           prodl	equ	0xFF3
  3944                           intcon	equ	0xFF2
  3945                           intcon2	equ	0xFF1
  3946                           postinc0	equ	0xFEE
  3947                           fsr0h	equ	0xFEA
  3948                           fsr0l	equ	0xFE9
  3949                           wreg	equ	0xFE8
  3950                           postinc1	equ	0xFE6
  3951                           postdec1	equ	0xFE5
  3952                           fsr1h	equ	0xFE2
  3953                           fsr1l	equ	0xFE1
  3954                           postinc2	equ	0xFDE
  3955                           postdec2	equ	0xFDD
  3956                           fsr2h	equ	0xFDA
  3957                           fsr2l	equ	0xFD9
  3958                           status	equ	0xFD8
  3959                           
  3960 ;; *************** function _writeFloat *****************
  3961 ;; Defined at:
  3962 ;;		line 157 in file "disp.c"
  3963 ;; Parameters:    Size  Location     Type
  3964 ;;  digits          1   44[BANK0 ] unsigned char 
  3965 ;;  num             3   45[BANK0 ] unsigned char 
  3966 ;; Auto vars:     Size  Location     Type
  3967 ;;  str             9   48[BANK0 ] unsigned char [9]
  3968 ;;  bits            1   57[BANK0 ] unsigned char 
  3969 ;; Return value:  Size  Location     Type
  3970 ;;		None               void
  3971 ;; Registers used:
  3972 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3973 ;; Tracked objects:
  3974 ;;		On entry : 0/0
  3975 ;;		On exit  : 0/0
  3976 ;;		Unchanged: 0/0
  3977 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3978 ;;      Params:         0       4       0       0       0       0       0       0       0
  3979 ;;      Locals:         0      10       0       0       0       0       0       0       0
  3980 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3981 ;;      Totals:         0      14       0       0       0       0       0       0       0
  3982 ;;Total ram usage:       14 bytes
  3983 ;; Hardware stack levels used:    1
  3984 ;; Hardware stack levels required when called:    5
  3985 ;; This function calls:
  3986 ;;		_countBits
  3987 ;;		_sprintf
  3988 ;;		_writeString
  3989 ;; This function is called by:
  3990 ;;		_printTemp
  3991 ;; This function uses a non-reentrant model
  3992 ;;
  3993                           
  3994                           	psect	text16
  3995  003610                     __ptext16:
  3996                           	opt stack 0
  3997  003610                     _writeFloat:
  3998                           	opt stack 20
  3999                           
  4000                           ;disp.c: 158: char str[9] = "";
  4001                           
  4002                           ;incstack = 0
  4003                           ;incstack = 0
  4004  003610  EE20  F0CC         	lfsr	2,writeFloat@F5025
  4005  003614  EE10  F090         	lfsr	1,writeFloat@str
  4006  003618  0E09               	movlw	9
  4007  00361A                     i2u473_41:
  4008  00361A  CFDE FFE6          	movff	postinc2,postinc1
  4009  00361E  2EE8               	decfsz	wreg,f,c
  4010  003620  D7FC               	goto	i2u473_41
  4011                           
  4012                           ;disp.c: 159: uint8_t bits = countBits(digits);
  4013  003622  0100               	movlb	0	; () banked
  4014  003624  0100               	movlb	0	; () banked
  4015  003626  518C               	movf	writeFloat@digits& (0+255),w,b
  4016  003628  6E01               	movwf	?_countBits,c
  4017  00362A  6A02               	clrf	?_countBits+1,c
  4018  00362C  6A03               	clrf	?_countBits+2,c
  4019  00362E  6A04               	clrf	?_countBits+3,c
  4020  003630  EC56  F01E         	call	_countBits	;wreg free
  4021  003634  0100               	movlb	0	; () banked
  4022  003636  0100               	movlb	0	; () banked
  4023  003638  6F99               	movwf	writeFloat@bits& (0+255),b
  4024                           
  4025                           ; BSR set to: 0
  4026                           ;disp.c: 160: sprintf(&str, "%.*f", bits, num);
  4027  00363A  0100               	movlb	0	; () banked
  4028  00363C  0E00               	movlw	high writeFloat@str
  4029  00363E  0100               	movlb	0	; () banked
  4030  003640  0100               	movlb	0	; () banked
  4031  003642  6F61               	movwf	(?_sprintf+1)& (0+255),b
  4032  003644  0100               	movlb	0	; () banked
  4033  003646  0E90               	movlw	low writeFloat@str
  4034  003648  0100               	movlb	0	; () banked
  4035  00364A  6F60               	movwf	?_sprintf& (0+255),b
  4036  00364C  0E7F               	movlw	high STR_9
  4037  00364E  0100               	movlb	0	; () banked
  4038  003650  0100               	movlb	0	; () banked
  4039  003652  6F63               	movwf	(?_sprintf+3)& (0+255),b
  4040  003654  0ED6               	movlw	low STR_9
  4041  003656  0100               	movlb	0	; () banked
  4042  003658  6F62               	movwf	(?_sprintf+2)& (0+255),b
  4043  00365A  0100               	movlb	0	; () banked
  4044  00365C  0100               	movlb	0	; () banked
  4045  00365E  C099  F064         	movff	writeFloat@bits,?_sprintf+4
  4046  003662  0100               	movlb	0	; () banked
  4047  003664  0100               	movlb	0	; () banked
  4048  003666  6B65               	clrf	(?_sprintf+5)& (0+255),b
  4049  003668  C08D  F066         	movff	writeFloat@num,?_sprintf+6
  4050  00366C  C08E  F067         	movff	writeFloat@num+1,?_sprintf+7
  4051  003670  C08F  F068         	movff	writeFloat@num+2,?_sprintf+8
  4052  003674  EC0E  F000         	call	_sprintf	;wreg free
  4053                           
  4054                           ;disp.c: 162: writeString(digits, str);
  4055  003678  C08C  F022         	movff	writeFloat@digits,?_writeString
  4056  00367C  0100               	movlb	0	; () banked
  4057  00367E  0E00               	movlw	high writeFloat@str
  4058  003680  6E24               	movwf	?_writeString+2,c
  4059  003682  0100               	movlb	0	; () banked
  4060  003684  0E90               	movlw	low writeFloat@str
  4061  003686  6E23               	movwf	?_writeString+1,c
  4062  003688  EC01  F013         	call	_writeString	;wreg free
  4063  00368C  0012               	return	
  4064  00368E                     __end_of_writeFloat:
  4065                           	opt stack 0
  4066                           tosu	equ	0xFFF
  4067                           tosh	equ	0xFFE
  4068                           tosl	equ	0xFFD
  4069                           pclatu	equ	0xFFB
  4070                           pclath	equ	0xFFA
  4071                           tblptru	equ	0xFF8
  4072                           tblptrh	equ	0xFF7
  4073                           tblptrl	equ	0xFF6
  4074                           tablat	equ	0xFF5
  4075                           prodh	equ	0xFF4
  4076                           prodl	equ	0xFF3
  4077                           intcon	equ	0xFF2
  4078                           intcon2	equ	0xFF1
  4079                           postinc0	equ	0xFEE
  4080                           fsr0h	equ	0xFEA
  4081                           fsr0l	equ	0xFE9
  4082                           wreg	equ	0xFE8
  4083                           postinc1	equ	0xFE6
  4084                           postdec1	equ	0xFE5
  4085                           fsr1h	equ	0xFE2
  4086                           fsr1l	equ	0xFE1
  4087                           postinc2	equ	0xFDE
  4088                           postdec2	equ	0xFDD
  4089                           fsr2h	equ	0xFDA
  4090                           fsr2l	equ	0xFD9
  4091                           status	equ	0xFD8
  4092                           
  4093 ;; *************** function _writeString *****************
  4094 ;; Defined at:
  4095 ;;		line 166 in file "disp.c"
  4096 ;; Parameters:    Size  Location     Type
  4097 ;;  digits          1   33[COMRAM] unsigned char 
  4098 ;;  string          2   34[COMRAM] PTR unsigned char 
  4099 ;;		 -> STR_30(3), printRTC@str(9), writeFloat@str(9), writeLong@str(9), 
  4100 ;; Auto vars:     Size  Location     Type
  4101 ;;  cnt             1   42[COMRAM] char 
  4102 ;;  i               1   41[COMRAM] char 
  4103 ;;  bits            1   40[COMRAM] unsigned char 
  4104 ;; Return value:  Size  Location     Type
  4105 ;;		None               void
  4106 ;; Registers used:
  4107 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4108 ;; Tracked objects:
  4109 ;;		On entry : 0/0
  4110 ;;		On exit  : 0/0
  4111 ;;		Unchanged: 0/0
  4112 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4113 ;;      Params:         3       0       0       0       0       0       0       0       0
  4114 ;;      Locals:         3       0       0       0       0       0       0       0       0
  4115 ;;      Temps:          4       0       0       0       0       0       0       0       0
  4116 ;;      Totals:        10       0       0       0       0       0       0       0       0
  4117 ;;Total ram usage:       10 bytes
  4118 ;; Hardware stack levels used:    1
  4119 ;; Hardware stack levels required when called:    2
  4120 ;; This function calls:
  4121 ;;		_log2
  4122 ;;		_writeChar
  4123 ;;		_countBits
  4124 ;;		_hibit
  4125 ;;		___wmul
  4126 ;; This function is called by:
  4127 ;;		_writeFloat
  4128 ;;		_printRTC
  4129 ;;		_printTemp
  4130 ;;		_writeLong
  4131 ;; This function uses a non-reentrant model
  4132 ;;
  4133                           
  4134                           	psect	text17
  4135  002602                     __ptext17:
  4136                           	opt stack 0
  4137  002602                     _writeString:
  4138                           	opt stack 22
  4139                           
  4140                           ;disp.c: 171: int8_t cnt = 0, i = 0;
  4141                           
  4142                           ;incstack = 0
  4143                           ;incstack = 0
  4144  002602  6E25               	movwf	??_writeString& (0+255),c
  4145  002604  0E00               	movlw	0
  4146  002606  6E2B               	movwf	writeString@cnt,c
  4147  002608  5025               	movf	??_writeString& (0+255),w,c
  4148  00260A  6E25               	movwf	??_writeString& (0+255),c
  4149  00260C  0E00               	movlw	0
  4150  00260E  6E2A               	movwf	writeString@i,c
  4151  002610  5025               	movf	??_writeString& (0+255),w,c
  4152                           
  4153                           ;disp.c: 172: uint8_t bits = countBits(digits);
  4154  002612  5022               	movf	writeString@digits,w,c
  4155  002614  6E01               	movwf	?_countBits,c
  4156  002616  6A02               	clrf	?_countBits+1,c
  4157  002618  6A03               	clrf	?_countBits+2,c
  4158  00261A  6A04               	clrf	?_countBits+3,c
  4159  00261C  EC56  F01E         	call	_countBits	;wreg free
  4160  002620  6E29               	movwf	writeString@bits,c
  4161                           
  4162                           ;disp.c: 174: bits += 1;
  4163  002622  2A29               	incf	writeString@bits,f,c
  4164                           
  4165                           ;disp.c: 175: for (cnt = log2(hibit(digits)); --bits; cnt--) {
  4166  002624  5022               	movf	writeString@digits,w,c
  4167  002626  6E01               	movwf	?_hibit,c
  4168  002628  6A02               	clrf	?_hibit+1,c
  4169  00262A  6A03               	clrf	?_hibit+2,c
  4170  00262C  6A04               	clrf	?_hibit+3,c
  4171  00262E  EC2B  F01C         	call	_hibit	;wreg free
  4172  002632  C004  F00F         	movff	?_hibit+3,?_log2+3
  4173  002636  C003  F00E         	movff	?_hibit+2,?_log2+2
  4174  00263A  C002  F00D         	movff	?_hibit+1,?_log2+1
  4175  00263E  C001  F00C         	movff	?_hibit,?_log2
  4176  002642  EC0F  F01D         	call	_log2	;wreg free
  4177  002646  500C               	movf	?_log2,w,c
  4178  002648  6E2B               	movwf	writeString@cnt,c
  4179  00264A  D0AB               	goto	i2l5591
  4180  00264C                     i2l5569:
  4181                           
  4182                           ;disp.c: 176: if (0x1 & (digits >> cnt)) {
  4183  00264C  C02B  F025         	movff	writeString@cnt,??_writeString
  4184  002650  C022  F026         	movff	writeString@digits,??_writeString+1
  4185  002654  2A25               	incf	??_writeString,f,c
  4186  002656  D002               	goto	i2u382_44
  4187  002658                     i2u382_45:
  4188  002658  90D8               	bcf	status,0,c
  4189  00265A  3226               	rrcf	??_writeString+1,f,c
  4190  00265C                     i2u382_44:
  4191  00265C  2E25               	decfsz	??_writeString,f,c
  4192  00265E  D7FC               	goto	i2u382_45
  4193  002660  A026               	btfss	??_writeString+1,0,c
  4194  002662  D09E               	goto	i2l5589
  4195                           
  4196                           ;disp.c: 177: if (string[i] == '\0') {
  4197  002664  502A               	movf	writeString@i,w,c
  4198  002666  6E17               	movwf	?___wmul,c
  4199  002668  6A18               	clrf	?___wmul+1,c
  4200  00266A  BE17               	btfsc	?___wmul,7,c
  4201  00266C  0618               	decf	?___wmul+1,f,c
  4202  00266E  0E00               	movlw	0
  4203  002670  6E1A               	movwf	?___wmul+3,c
  4204  002672  0E01               	movlw	1
  4205  002674  6E19               	movwf	?___wmul+2,c
  4206  002676  ECEF  F01D         	call	___wmul	;wreg free
  4207  00267A  5017               	movf	?___wmul,w,c
  4208  00267C  2423               	addwf	writeString@string,w,c
  4209  00267E  6E25               	movwf	??_writeString& (0+255),c
  4210  002680  5018               	movf	?___wmul+1,w,c
  4211  002682  2024               	addwfc	writeString@string+1,w,c
  4212  002684  6E26               	movwf	(??_writeString+1)& (0+255),c
  4213  002686  5025               	movf	??_writeString,w,c
  4214  002688  6EF6               	movwf	tblptrl,c
  4215  00268A  6EE9               	movwf	fsr0l,c
  4216  00268C  0E07               	movlw	(high __ramtop+-1)
  4217  00268E  6EEA               	movwf	fsr0h,c
  4218  002690  5026               	movf	??_writeString+1,w,c
  4219  002692  64EA               	cpfsgt	fsr0h,c
  4220  002694  D003               	bra	i2u384_47
  4221  002696  6EEA               	movwf	fsr0h,c
  4222  002698  50EF               	movf	indf0,w,c
  4223  00269A  D003               	bra	i2u384_40
  4224  00269C                     i2u384_47:
  4225  00269C  6EF7               	movwf	tblptrh,c
  4226  00269E  0008               	tblrd		*
  4227  0026A0  50F5               	movf	tablat,w,c
  4228  0026A2                     i2u384_40:
  4229  0026A2  0900               	iorlw	0
  4230  0026A4  B4D8               	btfsc	status,2,c
  4231  0026A6  D07F               	goto	i2l191
  4232                           
  4233                           ;disp.c: 179: }
  4234                           ;disp.c: 180: if (string[i] == '.') {
  4235                           
  4236                           ;disp.c: 178: break;
  4237  0026A8  502A               	movf	writeString@i,w,c
  4238  0026AA  6E17               	movwf	?___wmul,c
  4239  0026AC  6A18               	clrf	?___wmul+1,c
  4240  0026AE  BE17               	btfsc	?___wmul,7,c
  4241  0026B0  0618               	decf	?___wmul+1,f,c
  4242  0026B2  0E00               	movlw	0
  4243  0026B4  6E1A               	movwf	?___wmul+3,c
  4244  0026B6  0E01               	movlw	1
  4245  0026B8  6E19               	movwf	?___wmul+2,c
  4246  0026BA  ECEF  F01D         	call	___wmul	;wreg free
  4247  0026BE  5017               	movf	?___wmul,w,c
  4248  0026C0  2423               	addwf	writeString@string,w,c
  4249  0026C2  6E25               	movwf	??_writeString& (0+255),c
  4250  0026C4  5018               	movf	?___wmul+1,w,c
  4251  0026C6  2024               	addwfc	writeString@string+1,w,c
  4252  0026C8  6E26               	movwf	(??_writeString+1)& (0+255),c
  4253  0026CA  5025               	movf	??_writeString,w,c
  4254  0026CC  6EF6               	movwf	tblptrl,c
  4255  0026CE  6EE9               	movwf	fsr0l,c
  4256  0026D0  0E07               	movlw	(high __ramtop+-1)
  4257  0026D2  6EEA               	movwf	fsr0h,c
  4258  0026D4  5026               	movf	??_writeString+1,w,c
  4259  0026D6  64EA               	cpfsgt	fsr0h,c
  4260  0026D8  D003               	bra	i2u386_47
  4261  0026DA  6EEA               	movwf	fsr0h,c
  4262  0026DC  50EF               	movf	indf0,w,c
  4263  0026DE  D003               	bra	i2u386_40
  4264  0026E0                     i2u386_47:
  4265  0026E0  6EF7               	movwf	tblptrh,c
  4266  0026E2  0008               	tblrd		*
  4267  0026E4  50F5               	movf	tablat,w,c
  4268  0026E6                     i2u386_40:
  4269  0026E6  0A2E               	xorlw	46
  4270  0026E8  A4D8               	btfss	status,2,c
  4271  0026EA  D02B               	goto	i2l5585
  4272                           
  4273                           ;disp.c: 181: screen.digits.screen[cnt + 1].bits |= 0b10000000;
  4274  0026EC  C02B  F025         	movff	writeString@cnt,??_writeString
  4275  0026F0  6A26               	clrf	(??_writeString+1)& (0+255),c
  4276  0026F2  BE25               	btfsc	??_writeString& (0+255),7,c
  4277  0026F4  0626               	decf	(??_writeString+1)& (0+255),f,c
  4278  0026F6  0E01               	movlw	1
  4279  0026F8  2625               	addwf	??_writeString,f,c
  4280  0026FA  0E00               	movlw	0
  4281  0026FC  2226               	addwfc	??_writeString+1,f,c
  4282  0026FE  0101               	movlb	1	; () banked
  4283  002700  0E00               	movlw	low _screen
  4284  002702  2425               	addwf	??_writeString,w,c
  4285  002704  6ED9               	movwf	fsr2l,c
  4286  002706  0101               	movlb	1	; () banked
  4287  002708  0E01               	movlw	high _screen
  4288  00270A  2026               	addwfc	??_writeString+1,w,c
  4289  00270C  6EDA               	movwf	fsr2h,c
  4290  00270E  0E00               	movlw	0
  4291  002710  8EDB               	bsf	plusw2,7,c
  4292                           
  4293                           ; BSR set to: 1
  4294                           ;disp.c: 182: screen.changed |= 1 << (cnt + 1);
  4295  002712  C02B  F025         	movff	writeString@cnt,??_writeString
  4296  002716  0E01               	movlw	1
  4297  002718  2625               	addwf	??_writeString,f,c
  4298  00271A  0E01               	movlw	1
  4299  00271C  6E26               	movwf	(??_writeString+1)& (0+255),c
  4300  00271E  6A27               	clrf	(??_writeString+2)& (0+255),c
  4301  002720  2A25               	incf	??_writeString,f,c
  4302  002722  D003               	goto	i2u388_44
  4303  002724                     i2u388_45:
  4304  002724  90D8               	bcf	status,0,c
  4305  002726  3626               	rlcf	??_writeString+1,f,c
  4306  002728  3627               	rlcf	??_writeString+2,f,c
  4307  00272A                     i2u388_44:
  4308  00272A  2E25               	decfsz	??_writeString,f,c
  4309  00272C  D7FB               	goto	i2u388_45
  4310  00272E  5026               	movf	??_writeString+1,w,c
  4311  002730  0101               	movlb	1	; () banked
  4312  002732  0101               	movlb	1	; () banked
  4313  002734  130B               	iorwf	(_screen+11)& (0+255),f,b
  4314  002736  5027               	movf	??_writeString+2,w,c
  4315  002738  0101               	movlb	1	; () banked
  4316  00273A  0101               	movlb	1	; () banked
  4317  00273C  130C               	iorwf	(_screen+12)& (0+255),f,b
  4318                           
  4319                           ; BSR set to: 1
  4320                           ;disp.c: 183: bits++;
  4321  00273E  2A29               	incf	writeString@bits,f,c
  4322                           
  4323                           ; BSR set to: 1
  4324                           ;disp.c: 184: i++;
  4325  002740  2A2A               	incf	writeString@i,f,c
  4326  002742                     i2l5585:
  4327                           
  4328                           ;disp.c: 185: }
  4329                           ;disp.c: 186: writeChar(1 << cnt, string[i]);
  4330  002742  C02B  F025         	movff	writeString@cnt,??_writeString
  4331  002746  0E01               	movlw	1
  4332  002748  6E26               	movwf	(??_writeString+1)& (0+255),c
  4333  00274A  2A25               	incf	??_writeString,f,c
  4334  00274C  D002               	goto	i2u389_44
  4335  00274E                     i2u389_45:
  4336  00274E  90D8               	bcf	status,0,c
  4337  002750  3626               	rlcf	??_writeString+1,f,c
  4338  002752                     i2u389_44:
  4339  002752  2E25               	decfsz	??_writeString,f,c
  4340  002754  D7FC               	goto	i2u389_45
  4341  002756  5026               	movf	??_writeString+1,w,c
  4342  002758  6E1F               	movwf	?_writeChar,c
  4343  00275A  502A               	movf	writeString@i,w,c
  4344  00275C  6E17               	movwf	?___wmul,c
  4345  00275E  6A18               	clrf	?___wmul+1,c
  4346  002760  BE17               	btfsc	?___wmul,7,c
  4347  002762  0618               	decf	?___wmul+1,f,c
  4348  002764  0E00               	movlw	0
  4349  002766  6E1A               	movwf	?___wmul+3,c
  4350  002768  0E01               	movlw	1
  4351  00276A  6E19               	movwf	?___wmul+2,c
  4352  00276C  ECEF  F01D         	call	___wmul	;wreg free
  4353  002770  5017               	movf	?___wmul,w,c
  4354  002772  2423               	addwf	writeString@string,w,c
  4355  002774  6E27               	movwf	(??_writeString+2)& (0+255),c
  4356  002776  5018               	movf	?___wmul+1,w,c
  4357  002778  2024               	addwfc	writeString@string+1,w,c
  4358  00277A  6E28               	movwf	(??_writeString+3)& (0+255),c
  4359  00277C  5027               	movf	??_writeString+2,w,c
  4360  00277E  6EF6               	movwf	tblptrl,c
  4361  002780  6EE9               	movwf	fsr0l,c
  4362  002782  0E07               	movlw	(high __ramtop+-1)
  4363  002784  6EEA               	movwf	fsr0h,c
  4364  002786  5028               	movf	??_writeString+3,w,c
  4365  002788  64EA               	cpfsgt	fsr0h,c
  4366  00278A  D003               	bra	i2u390_47
  4367  00278C  6EEA               	movwf	fsr0h,c
  4368  00278E  50EF               	movf	indf0,w,c
  4369  002790  D003               	bra	i2u390_40
  4370  002792                     i2u390_47:
  4371  002792  6EF7               	movwf	tblptrh,c
  4372  002794  0008               	tblrd		*
  4373  002796  50F5               	movf	tablat,w,c
  4374  002798                     i2u390_40:
  4375  002798  6E20               	movwf	?_writeChar+1,c
  4376  00279A  ECD2  F01D         	call	_writeChar	;wreg free
  4377                           
  4378                           ;disp.c: 187: i++;
  4379  00279E  2A2A               	incf	writeString@i,f,c
  4380  0027A0                     i2l5589:
  4381  0027A0  062B               	decf	writeString@cnt,f,c
  4382  0027A2                     i2l5591:
  4383  0027A2  2E29               	decfsz	writeString@bits,f,c
  4384  0027A4  D753               	goto	i2l5569
  4385  0027A6                     i2l191:
  4386  0027A6  0012               	return	
  4387  0027A8                     __end_of_writeString:
  4388                           	opt stack 0
  4389                           tosu	equ	0xFFF
  4390                           tosh	equ	0xFFE
  4391                           tosl	equ	0xFFD
  4392                           pclatu	equ	0xFFB
  4393                           pclath	equ	0xFFA
  4394                           tblptru	equ	0xFF8
  4395                           tblptrh	equ	0xFF7
  4396                           tblptrl	equ	0xFF6
  4397                           tablat	equ	0xFF5
  4398                           prodh	equ	0xFF4
  4399                           prodl	equ	0xFF3
  4400                           intcon	equ	0xFF2
  4401                           intcon2	equ	0xFF1
  4402                           indf0	equ	0xFEF
  4403                           postinc0	equ	0xFEE
  4404                           fsr0h	equ	0xFEA
  4405                           fsr0l	equ	0xFE9
  4406                           wreg	equ	0xFE8
  4407                           postinc1	equ	0xFE6
  4408                           postdec1	equ	0xFE5
  4409                           fsr1h	equ	0xFE2
  4410                           fsr1l	equ	0xFE1
  4411                           postinc2	equ	0xFDE
  4412                           postdec2	equ	0xFDD
  4413                           plusw2	equ	0xFDB
  4414                           fsr2h	equ	0xFDA
  4415                           fsr2l	equ	0xFD9
  4416                           status	equ	0xFD8
  4417                           
  4418 ;; *************** function _hibit *****************
  4419 ;; Defined at:
  4420 ;;		line 19 in file "defs.c"
  4421 ;; Parameters:    Size  Location     Type
  4422 ;;  x               4    0[COMRAM] unsigned long 
  4423 ;; Auto vars:     Size  Location     Type
  4424 ;;  log2Val         4    7[COMRAM] unsigned long 
  4425 ;; Return value:  Size  Location     Type
  4426 ;;                  4    0[COMRAM] unsigned long 
  4427 ;; Registers used:
  4428 ;;		wreg, status,2, status,0
  4429 ;; Tracked objects:
  4430 ;;		On entry : 0/0
  4431 ;;		On exit  : 0/0
  4432 ;;		Unchanged: 0/0
  4433 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4434 ;;      Params:         4       0       0       0       0       0       0       0       0
  4435 ;;      Locals:         4       0       0       0       0       0       0       0       0
  4436 ;;      Temps:          3       0       0       0       0       0       0       0       0
  4437 ;;      Totals:        11       0       0       0       0       0       0       0       0
  4438 ;;Total ram usage:       11 bytes
  4439 ;; Hardware stack levels used:    1
  4440 ;; This function calls:
  4441 ;;		Nothing
  4442 ;; This function is called by:
  4443 ;;		_writeString
  4444 ;; This function uses a non-reentrant model
  4445 ;;
  4446                           
  4447                           	psect	text18
  4448  003856                     __ptext18:
  4449                           	opt stack 0
  4450  003856                     _hibit:
  4451                           	opt stack 23
  4452                           
  4453                           ;defs.c: 20: uint32_t log2Val = 0;
  4454                           
  4455                           ;incstack = 0
  4456                           ;incstack = 0
  4457  003856  0E00               	movlw	0
  4458  003858  6E08               	movwf	hibit@log2Val,c
  4459  00385A  0E00               	movlw	0
  4460  00385C  6E09               	movwf	hibit@log2Val+1,c
  4461  00385E  0E00               	movlw	0
  4462  003860  6E0A               	movwf	hibit@log2Val+2,c
  4463  003862  0E00               	movlw	0
  4464  003864  6E0B               	movwf	hibit@log2Val+3,c
  4465                           
  4466                           ;defs.c: 21: while (x >>= 1) log2Val++;
  4467  003866  D008               	goto	i2l453
  4468  003868                     i2l4693:
  4469  003868  0E01               	movlw	1
  4470  00386A  2608               	addwf	hibit@log2Val,f,c
  4471  00386C  0E00               	movlw	0
  4472  00386E  2209               	addwfc	hibit@log2Val+1,f,c
  4473  003870  0E00               	movlw	0
  4474  003872  220A               	addwfc	hibit@log2Val+2,f,c
  4475  003874  0E00               	movlw	0
  4476  003876  220B               	addwfc	hibit@log2Val+3,f,c
  4477  003878                     i2l453:
  4478  003878  90D8               	bcf	status,0,c
  4479  00387A  3204               	rrcf	hibit@x+3,f,c
  4480  00387C  3203               	rrcf	hibit@x+2,f,c
  4481  00387E  3202               	rrcf	hibit@x+1,f,c
  4482  003880  3201               	rrcf	hibit@x,f,c
  4483  003882  5004               	movf	(hibit@x+3)& (0+255),w,c
  4484  003884  1001               	iorwf	hibit@x& (0+255),w,c
  4485  003886  1002               	iorwf	(hibit@x+1)& (0+255),w,c
  4486  003888  1003               	iorwf	(hibit@x+2)& (0+255),w,c
  4487  00388A  A4D8               	btfss	status,2,c
  4488  00388C  D7ED               	goto	i2l4693
  4489                           
  4490                           ;defs.c: 22: return 1 << log2Val;
  4491  00388E  C008  F005         	movff	hibit@log2Val,??_hibit
  4492  003892  0E01               	movlw	1
  4493  003894  6E06               	movwf	(??_hibit+1)& (0+255),c
  4494  003896  6A07               	clrf	(??_hibit+2)& (0+255),c
  4495  003898  2A05               	incf	??_hibit,f,c
  4496  00389A  D003               	goto	i2u253_44
  4497  00389C                     i2u253_45:
  4498  00389C  90D8               	bcf	status,0,c
  4499  00389E  3606               	rlcf	??_hibit+1,f,c
  4500  0038A0  3607               	rlcf	??_hibit+2,f,c
  4501  0038A2                     i2u253_44:
  4502  0038A2  2E05               	decfsz	??_hibit,f,c
  4503  0038A4  D7FB               	goto	i2u253_45
  4504  0038A6  C006  F001         	movff	??_hibit+1,?_hibit
  4505  0038AA  C007  F002         	movff	??_hibit+2,?_hibit+1
  4506  0038AE  0E00               	movlw	0
  4507  0038B0  BE02               	btfsc	?_hibit+1,7,c
  4508  0038B2  0EFF               	movlw	-1
  4509  0038B4  6E03               	movwf	?_hibit+2,c
  4510  0038B6  6E04               	movwf	?_hibit+3,c
  4511  0038B8  0012               	return	
  4512  0038BA                     __end_of_hibit:
  4513                           	opt stack 0
  4514                           tosu	equ	0xFFF
  4515                           tosh	equ	0xFFE
  4516                           tosl	equ	0xFFD
  4517                           pclatu	equ	0xFFB
  4518                           pclath	equ	0xFFA
  4519                           tblptru	equ	0xFF8
  4520                           tblptrh	equ	0xFF7
  4521                           tblptrl	equ	0xFF6
  4522                           tablat	equ	0xFF5
  4523                           prodh	equ	0xFF4
  4524                           prodl	equ	0xFF3
  4525                           intcon	equ	0xFF2
  4526                           intcon2	equ	0xFF1
  4527                           indf0	equ	0xFEF
  4528                           postinc0	equ	0xFEE
  4529                           fsr0h	equ	0xFEA
  4530                           fsr0l	equ	0xFE9
  4531                           wreg	equ	0xFE8
  4532                           postinc1	equ	0xFE6
  4533                           postdec1	equ	0xFE5
  4534                           fsr1h	equ	0xFE2
  4535                           fsr1l	equ	0xFE1
  4536                           postinc2	equ	0xFDE
  4537                           postdec2	equ	0xFDD
  4538                           plusw2	equ	0xFDB
  4539                           fsr2h	equ	0xFDA
  4540                           fsr2l	equ	0xFD9
  4541                           status	equ	0xFD8
  4542                           
  4543 ;; *************** function _countBits *****************
  4544 ;; Defined at:
  4545 ;;		line 9 in file "defs.c"
  4546 ;; Parameters:    Size  Location     Type
  4547 ;;  num             4    0[COMRAM] unsigned long 
  4548 ;; Auto vars:     Size  Location     Type
  4549 ;;  ret             1    4[COMRAM] unsigned char 
  4550 ;; Return value:  Size  Location     Type
  4551 ;;                  1    wreg      unsigned char 
  4552 ;; Registers used:
  4553 ;;		wreg, status,2, status,0
  4554 ;; Tracked objects:
  4555 ;;		On entry : 0/0
  4556 ;;		On exit  : 0/0
  4557 ;;		Unchanged: 0/0
  4558 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4559 ;;      Params:         4       0       0       0       0       0       0       0       0
  4560 ;;      Locals:         1       0       0       0       0       0       0       0       0
  4561 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4562 ;;      Totals:         5       0       0       0       0       0       0       0       0
  4563 ;;Total ram usage:        5 bytes
  4564 ;; Hardware stack levels used:    1
  4565 ;; This function calls:
  4566 ;;		Nothing
  4567 ;; This function is called by:
  4568 ;;		_writeFloat
  4569 ;;		_writeString
  4570 ;;		_printRTC
  4571 ;;		_writeLong
  4572 ;;		_maxSize
  4573 ;; This function uses a non-reentrant model
  4574 ;;
  4575                           
  4576                           	psect	text19
  4577  003CAC                     __ptext19:
  4578                           	opt stack 0
  4579  003CAC                     _countBits:
  4580                           	opt stack 23
  4581                           
  4582                           ;defs.c: 10: uint8_t ret = num & 1;
  4583                           
  4584                           ;incstack = 0
  4585                           ;incstack = 0
  4586  003CAC  5001               	movf	countBits@num,w,c
  4587  003CAE  0B01               	andlw	1
  4588  003CB0  6E05               	movwf	countBits@ret,c
  4589                           
  4590                           ;defs.c: 11: while (num) ret += (0x1 & (num >>= 1));
  4591  003CB2  D008               	goto	i2l447
  4592  003CB4                     i2l4685:
  4593  003CB4  90D8               	bcf	status,0,c
  4594  003CB6  3204               	rrcf	countBits@num+3,f,c
  4595  003CB8  3203               	rrcf	countBits@num+2,f,c
  4596  003CBA  3202               	rrcf	countBits@num+1,f,c
  4597  003CBC  3201               	rrcf	countBits@num,f,c
  4598  003CBE  5001               	movf	countBits@num& (0+255),w,c
  4599  003CC0  0B01               	andlw	1
  4600  003CC2  2605               	addwf	countBits@ret,f,c
  4601  003CC4                     i2l447:
  4602  003CC4  5004               	movf	countBits@num+3,w,c
  4603  003CC6  1001               	iorwf	countBits@num,w,c
  4604  003CC8  1002               	iorwf	countBits@num+1,w,c
  4605  003CCA  1003               	iorwf	countBits@num+2,w,c
  4606  003CCC  A4D8               	btfss	status,2,c
  4607  003CCE  D7F2               	goto	i2l4685
  4608                           
  4609                           ;defs.c: 12: return ret;
  4610  003CD0  5005               	movf	countBits@ret,w,c
  4611  003CD2  0012               	return	
  4612  003CD4                     __end_of_countBits:
  4613                           	opt stack 0
  4614                           tosu	equ	0xFFF
  4615                           tosh	equ	0xFFE
  4616                           tosl	equ	0xFFD
  4617                           pclatu	equ	0xFFB
  4618                           pclath	equ	0xFFA
  4619                           tblptru	equ	0xFF8
  4620                           tblptrh	equ	0xFF7
  4621                           tblptrl	equ	0xFF6
  4622                           tablat	equ	0xFF5
  4623                           prodh	equ	0xFF4
  4624                           prodl	equ	0xFF3
  4625                           intcon	equ	0xFF2
  4626                           intcon2	equ	0xFF1
  4627                           indf0	equ	0xFEF
  4628                           postinc0	equ	0xFEE
  4629                           fsr0h	equ	0xFEA
  4630                           fsr0l	equ	0xFE9
  4631                           wreg	equ	0xFE8
  4632                           postinc1	equ	0xFE6
  4633                           postdec1	equ	0xFE5
  4634                           fsr1h	equ	0xFE2
  4635                           fsr1l	equ	0xFE1
  4636                           postinc2	equ	0xFDE
  4637                           postdec2	equ	0xFDD
  4638                           plusw2	equ	0xFDB
  4639                           fsr2h	equ	0xFDA
  4640                           fsr2l	equ	0xFD9
  4641                           status	equ	0xFD8
  4642                           
  4643 ;; *************** function _writeChar *****************
  4644 ;; Defined at:
  4645 ;;		line 118 in file "disp.c"
  4646 ;; Parameters:    Size  Location     Type
  4647 ;;  digit           1   30[COMRAM] unsigned char 
  4648 ;;  ch              1   31[COMRAM] unsigned char 
  4649 ;; Auto vars:     Size  Location     Type
  4650 ;;  dig             1   32[COMRAM] unsigned char 
  4651 ;; Return value:  Size  Location     Type
  4652 ;;		None               void
  4653 ;; Registers used:
  4654 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4655 ;; Tracked objects:
  4656 ;;		On entry : 0/0
  4657 ;;		On exit  : 0/0
  4658 ;;		Unchanged: 0/0
  4659 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4660 ;;      Params:         2       0       0       0       0       0       0       0       0
  4661 ;;      Locals:         1       0       0       0       0       0       0       0       0
  4662 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4663 ;;      Totals:         3       0       0       0       0       0       0       0       0
  4664 ;;Total ram usage:        3 bytes
  4665 ;; Hardware stack levels used:    1
  4666 ;; Hardware stack levels required when called:    1
  4667 ;; This function calls:
  4668 ;;		_getFontChar
  4669 ;;		_log2
  4670 ;; This function is called by:
  4671 ;;		_writeString
  4672 ;; This function uses a non-reentrant model
  4673 ;;
  4674                           
  4675                           	psect	text20
  4676  003BA4                     __ptext20:
  4677                           	opt stack 0
  4678  003BA4                     _writeChar:
  4679                           	opt stack 22
  4680                           
  4681                           ;disp.c: 119: uint8_t dig = (uint8_t) log2(digit);
  4682                           
  4683                           ;incstack = 0
  4684                           ;incstack = 0
  4685  003BA4  501F               	movf	writeChar@digit,w,c
  4686  003BA6  6E0C               	movwf	?_log2,c
  4687  003BA8  6A0D               	clrf	?_log2+1,c
  4688  003BAA  6A0E               	clrf	?_log2+2,c
  4689  003BAC  6A0F               	clrf	?_log2+3,c
  4690  003BAE  EC0F  F01D         	call	_log2	;wreg free
  4691  003BB2  500C               	movf	?_log2,w,c
  4692  003BB4  6E21               	movwf	writeChar@dig,c
  4693                           
  4694                           ;disp.c: 120: screen.digits.screen[dig].bits = getFontChar(ch);
  4695  003BB6  5021               	movf	writeChar@dig,w,c
  4696  003BB8  0D01               	mullw	1
  4697  003BBA  0101               	movlb	1	; () banked
  4698  003BBC  0E00               	movlw	low _screen
  4699  003BBE  24F3               	addwf	prodl,w,c
  4700  003BC0  6ED9               	movwf	fsr2l,c
  4701  003BC2  0101               	movlb	1	; () banked
  4702  003BC4  0E01               	movlw	high _screen
  4703  003BC6  20F4               	addwfc	prodh,w,c
  4704  003BC8  6EDA               	movwf	fsr2h,c
  4705  003BCA  C020  F001         	movff	writeChar@ch,?_getFontChar
  4706  003BCE  EC26  F00F         	call	_getFontChar	;wreg free
  4707  003BD2  6EDF               	movwf	indf2,c
  4708                           
  4709                           ;disp.c: 121: screen.changed |= digit;
  4710  003BD4  501F               	movf	writeChar@digit,w,c
  4711  003BD6  0101               	movlb	1	; () banked
  4712  003BD8  0101               	movlb	1	; () banked
  4713  003BDA  130B               	iorwf	(_screen+11)& (0+255),f,b
  4714                           
  4715                           ; BSR set to: 1
  4716  003BDC  0012               	return	
  4717  003BDE                     __end_of_writeChar:
  4718                           	opt stack 0
  4719                           tosu	equ	0xFFF
  4720                           tosh	equ	0xFFE
  4721                           tosl	equ	0xFFD
  4722                           pclatu	equ	0xFFB
  4723                           pclath	equ	0xFFA
  4724                           tblptru	equ	0xFF8
  4725                           tblptrh	equ	0xFF7
  4726                           tblptrl	equ	0xFF6
  4727                           tablat	equ	0xFF5
  4728                           prodh	equ	0xFF4
  4729                           prodl	equ	0xFF3
  4730                           intcon	equ	0xFF2
  4731                           intcon2	equ	0xFF1
  4732                           indf0	equ	0xFEF
  4733                           postinc0	equ	0xFEE
  4734                           fsr0h	equ	0xFEA
  4735                           fsr0l	equ	0xFE9
  4736                           wreg	equ	0xFE8
  4737                           postinc1	equ	0xFE6
  4738                           postdec1	equ	0xFE5
  4739                           fsr1h	equ	0xFE2
  4740                           fsr1l	equ	0xFE1
  4741                           indf2	equ	0xFDF
  4742                           postinc2	equ	0xFDE
  4743                           postdec2	equ	0xFDD
  4744                           plusw2	equ	0xFDB
  4745                           fsr2h	equ	0xFDA
  4746                           fsr2l	equ	0xFD9
  4747                           status	equ	0xFD8
  4748                           
  4749 ;; *************** function _getFontChar *****************
  4750 ;; Defined at:
  4751 ;;		line 117 in file "display1.h"
  4752 ;; Parameters:    Size  Location     Type
  4753 ;;  ch              1    0[COMRAM] unsigned char 
  4754 ;; Auto vars:     Size  Location     Type
  4755 ;;		None
  4756 ;; Return value:  Size  Location     Type
  4757 ;;                  1    wreg      unsigned char 
  4758 ;; Registers used:
  4759 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru
  4760 ;; Tracked objects:
  4761 ;;		On entry : 0/0
  4762 ;;		On exit  : 0/0
  4763 ;;		Unchanged: 0/0
  4764 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4765 ;;      Params:         1       0       0       0       0       0       0       0       0
  4766 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4767 ;;      Temps:          2       0       0       0       0       0       0       0       0
  4768 ;;      Totals:         3       0       0       0       0       0       0       0       0
  4769 ;;Total ram usage:        3 bytes
  4770 ;; Hardware stack levels used:    1
  4771 ;; This function calls:
  4772 ;;		Nothing
  4773 ;; This function is called by:
  4774 ;;		_writeChar
  4775 ;; This function uses a non-reentrant model
  4776 ;;
  4777                           
  4778                           	psect	text21
  4779  001E4C                     __ptext21:
  4780                           	opt stack 0
  4781  001E4C                     _getFontChar:
  4782                           	opt stack 22
  4783                           
  4784                           ;display1.h: 118: switch (ch)
  4785                           
  4786                           ; BSR set to: 1
  4787                           ;incstack = 0
  4788                           ;incstack = 0
  4789  001E4C  D01F               	goto	i2l4647
  4790  001E4E                     i2l4609:
  4791                           
  4792                           ;display1.h: 121: return lcd_font[ch - '0'];
  4793  001E4E  0ED0               	movlw	208
  4794  001E50  D001               	goto	L4
  4795  001E52                     i2l4613:
  4796                           
  4797                           ;display1.h: 123: return lcd_font[ch - ('0' + ('a' - 'A'))];
  4798  001E52  0EB0               	movlw	176
  4799  001E54                     L4:
  4800  001E54  2401               	addwf	getFontChar@ch,w,c
  4801  001E56  6E02               	movwf	??_getFontChar& (0+255),c
  4802  001E58  6A03               	clrf	(??_getFontChar+1)& (0+255),c
  4803  001E5A  0EFF               	movlw	255
  4804  001E5C  2203               	addwfc	(??_getFontChar+1)& (0+255),f,c
  4805  001E5E  0ECC               	movlw	low _lcd_font
  4806  001E60  2402               	addwf	??_getFontChar,w,c
  4807  001E62  6EF6               	movwf	tblptrl,c
  4808  001E64  0E7E               	movlw	high _lcd_font
  4809  001E66  2003               	addwfc	??_getFontChar+1,w,c
  4810  001E68  6EF7               	movwf	tblptrh,c
  4811  001E6A  0008               	tblrd		*
  4812  001E6C  50F5               	movf	tablat,w,c
  4813  001E6E  D0F4               	goto	i2l125
  4814  001E70                     i2l4617:
  4815                           
  4816                           ;display1.h: 125: return 0b01000000;
  4817  001E70  0E40               	movlw	64
  4818  001E72  D0F2               	goto	i2l125
  4819  001E74                     i2l4621:
  4820                           
  4821                           ;display1.h: 127: case ',':
  4822                           ;display1.h: 128: return 0b10000000;
  4823  001E74  0E80               	movlw	128
  4824  001E76  D0F0               	goto	i2l125
  4825  001E78                     i2l4625:
  4826                           
  4827                           ;display1.h: 130: return 0b00000001 + 0b00001000 + 0b00010000 + 0b00100000;
  4828  001E78  0E39               	movlw	57
  4829  001E7A  D0EE               	goto	i2l125
  4830  001E7C                     i2l4629:
  4831                           
  4832                           ;display1.h: 132: return 0b00000001 + 0b00000010 + 0b00000100 + 0b00001000;
  4833  001E7C  0E0F               	movlw	15
  4834  001E7E  D0EC               	goto	i2l125
  4835  001E80                     i2l4633:
  4836                           
  4837                           ;display1.h: 134: return 0b00001000;
  4838  001E80  0E08               	movlw	8
  4839  001E82  D0EA               	goto	i2l125
  4840  001E84                     i2l4637:
  4841                           
  4842                           ;display1.h: 136: return 0b00000001 + 0b00000010 + 0b00100000 + 0b01000000;
  4843  001E84  0E63               	movlw	99
  4844  001E86  D0E8               	goto	i2l125
  4845  001E88                     i2l4641:
  4846                           
  4847                           ;display1.h: 138: return 0;
  4848  001E88  0E00               	movlw	0
  4849  001E8A  D0E6               	goto	i2l125
  4850  001E8C                     i2l4647:
  4851  001E8C  5001               	movf	getFontChar@ch,w,c
  4852                           
  4853                           ; Switch size 1, requested type "space"
  4854                           ; Number of cases is 76, Range of values is 42 to 122
  4855                           ; switch strategies available:
  4856                           ; Name         Instructions Cycles
  4857                           ; simple_byte          229   115 (average)
  4858                           ;	Chosen strategy is simple_byte
  4859  001E8E  0A2A               	xorlw	42	; case 42
  4860  001E90  B4D8               	btfsc	status,2,c
  4861  001E92  D7F8               	goto	i2l4637
  4862  001E94  0A06               	xorlw	6	; case 44
  4863  001E96  B4D8               	btfsc	status,2,c
  4864  001E98  D7ED               	goto	i2l4621
  4865  001E9A  0A01               	xorlw	1	; case 45
  4866  001E9C  B4D8               	btfsc	status,2,c
  4867  001E9E  D7E8               	goto	i2l4617
  4868  001EA0  0A03               	xorlw	3	; case 46
  4869  001EA2  B4D8               	btfsc	status,2,c
  4870  001EA4  D7E7               	goto	i2l4621
  4871  001EA6  0A1E               	xorlw	30	; case 48
  4872  001EA8  B4D8               	btfsc	status,2,c
  4873  001EAA  D7D1               	goto	i2l4609
  4874  001EAC  0A01               	xorlw	1	; case 49
  4875  001EAE  B4D8               	btfsc	status,2,c
  4876  001EB0  D7CE               	goto	i2l4609
  4877  001EB2  0A03               	xorlw	3	; case 50
  4878  001EB4  B4D8               	btfsc	status,2,c
  4879  001EB6  D7CB               	goto	i2l4609
  4880  001EB8  0A01               	xorlw	1	; case 51
  4881  001EBA  B4D8               	btfsc	status,2,c
  4882  001EBC  D7C8               	goto	i2l4609
  4883  001EBE  0A07               	xorlw	7	; case 52
  4884  001EC0  B4D8               	btfsc	status,2,c
  4885  001EC2  D7C5               	goto	i2l4609
  4886  001EC4  0A01               	xorlw	1	; case 53
  4887  001EC6  B4D8               	btfsc	status,2,c
  4888  001EC8  D7C2               	goto	i2l4609
  4889  001ECA  0A03               	xorlw	3	; case 54
  4890  001ECC  B4D8               	btfsc	status,2,c
  4891  001ECE  D7BF               	goto	i2l4609
  4892  001ED0  0A01               	xorlw	1	; case 55
  4893  001ED2  B4D8               	btfsc	status,2,c
  4894  001ED4  D7BC               	goto	i2l4609
  4895  001ED6  0A0F               	xorlw	15	; case 56
  4896  001ED8  B4D8               	btfsc	status,2,c
  4897  001EDA  D7B9               	goto	i2l4609
  4898  001EDC  0A01               	xorlw	1	; case 57
  4899  001EDE  B4D8               	btfsc	status,2,c
  4900  001EE0  D7B6               	goto	i2l4609
  4901  001EE2  0A03               	xorlw	3	; case 58
  4902  001EE4  B4D8               	btfsc	status,2,c
  4903  001EE6  D7B3               	goto	i2l4609
  4904  001EE8  0A01               	xorlw	1	; case 59
  4905  001EEA  B4D8               	btfsc	status,2,c
  4906  001EEC  D7B0               	goto	i2l4609
  4907  001EEE  0A07               	xorlw	7	; case 60
  4908  001EF0  B4D8               	btfsc	status,2,c
  4909  001EF2  D7AD               	goto	i2l4609
  4910  001EF4  0A01               	xorlw	1	; case 61
  4911  001EF6  B4D8               	btfsc	status,2,c
  4912  001EF8  D7AA               	goto	i2l4609
  4913  001EFA  0A03               	xorlw	3	; case 62
  4914  001EFC  B4D8               	btfsc	status,2,c
  4915  001EFE  D7A7               	goto	i2l4609
  4916  001F00  0A01               	xorlw	1	; case 63
  4917  001F02  B4D8               	btfsc	status,2,c
  4918  001F04  D7A4               	goto	i2l4609
  4919  001F06  0A7F               	xorlw	127	; case 64
  4920  001F08  B4D8               	btfsc	status,2,c
  4921  001F0A  D7A1               	goto	i2l4609
  4922  001F0C  0A01               	xorlw	1	; case 65
  4923  001F0E  B4D8               	btfsc	status,2,c
  4924  001F10  D79E               	goto	i2l4609
  4925  001F12  0A03               	xorlw	3	; case 66
  4926  001F14  B4D8               	btfsc	status,2,c
  4927  001F16  D79B               	goto	i2l4609
  4928  001F18  0A01               	xorlw	1	; case 67
  4929  001F1A  B4D8               	btfsc	status,2,c
  4930  001F1C  D798               	goto	i2l4609
  4931  001F1E  0A07               	xorlw	7	; case 68
  4932  001F20  B4D8               	btfsc	status,2,c
  4933  001F22  D795               	goto	i2l4609
  4934  001F24  0A01               	xorlw	1	; case 69
  4935  001F26  B4D8               	btfsc	status,2,c
  4936  001F28  D792               	goto	i2l4609
  4937  001F2A  0A03               	xorlw	3	; case 70
  4938  001F2C  B4D8               	btfsc	status,2,c
  4939  001F2E  D78F               	goto	i2l4609
  4940  001F30  0A01               	xorlw	1	; case 71
  4941  001F32  B4D8               	btfsc	status,2,c
  4942  001F34  D78C               	goto	i2l4609
  4943  001F36  0A0F               	xorlw	15	; case 72
  4944  001F38  B4D8               	btfsc	status,2,c
  4945  001F3A  D789               	goto	i2l4609
  4946  001F3C  0A01               	xorlw	1	; case 73
  4947  001F3E  B4D8               	btfsc	status,2,c
  4948  001F40  D786               	goto	i2l4609
  4949  001F42  0A03               	xorlw	3	; case 74
  4950  001F44  B4D8               	btfsc	status,2,c
  4951  001F46  D783               	goto	i2l4609
  4952  001F48  0A01               	xorlw	1	; case 75
  4953  001F4A  B4D8               	btfsc	status,2,c
  4954  001F4C  D780               	goto	i2l4609
  4955  001F4E  0A07               	xorlw	7	; case 76
  4956  001F50  B4D8               	btfsc	status,2,c
  4957  001F52  D77D               	goto	i2l4609
  4958  001F54  0A01               	xorlw	1	; case 77
  4959  001F56  B4D8               	btfsc	status,2,c
  4960  001F58  D77A               	goto	i2l4609
  4961  001F5A  0A03               	xorlw	3	; case 78
  4962  001F5C  B4D8               	btfsc	status,2,c
  4963  001F5E  D777               	goto	i2l4609
  4964  001F60  0A01               	xorlw	1	; case 79
  4965  001F62  B4D8               	btfsc	status,2,c
  4966  001F64  D774               	goto	i2l4609
  4967  001F66  0A1F               	xorlw	31	; case 80
  4968  001F68  B4D8               	btfsc	status,2,c
  4969  001F6A  D771               	goto	i2l4609
  4970  001F6C  0A01               	xorlw	1	; case 81
  4971  001F6E  B4D8               	btfsc	status,2,c
  4972  001F70  D76E               	goto	i2l4609
  4973  001F72  0A03               	xorlw	3	; case 82
  4974  001F74  B4D8               	btfsc	status,2,c
  4975  001F76  D76B               	goto	i2l4609
  4976  001F78  0A01               	xorlw	1	; case 83
  4977  001F7A  B4D8               	btfsc	status,2,c
  4978  001F7C  D768               	goto	i2l4609
  4979  001F7E  0A07               	xorlw	7	; case 84
  4980  001F80  B4D8               	btfsc	status,2,c
  4981  001F82  D765               	goto	i2l4609
  4982  001F84  0A01               	xorlw	1	; case 85
  4983  001F86  B4D8               	btfsc	status,2,c
  4984  001F88  D762               	goto	i2l4609
  4985  001F8A  0A03               	xorlw	3	; case 86
  4986  001F8C  B4D8               	btfsc	status,2,c
  4987  001F8E  D75F               	goto	i2l4609
  4988  001F90  0A01               	xorlw	1	; case 87
  4989  001F92  B4D8               	btfsc	status,2,c
  4990  001F94  D75C               	goto	i2l4609
  4991  001F96  0A0F               	xorlw	15	; case 88
  4992  001F98  B4D8               	btfsc	status,2,c
  4993  001F9A  D759               	goto	i2l4609
  4994  001F9C  0A01               	xorlw	1	; case 89
  4995  001F9E  B4D8               	btfsc	status,2,c
  4996  001FA0  D756               	goto	i2l4609
  4997  001FA2  0A03               	xorlw	3	; case 90
  4998  001FA4  B4D8               	btfsc	status,2,c
  4999  001FA6  D753               	goto	i2l4609
  5000  001FA8  0A01               	xorlw	1	; case 91
  5001  001FAA  B4D8               	btfsc	status,2,c
  5002  001FAC  D765               	goto	i2l4625
  5003  001FAE  0A06               	xorlw	6	; case 93
  5004  001FB0  B4D8               	btfsc	status,2,c
  5005  001FB2  D764               	goto	i2l4629
  5006  001FB4  0A02               	xorlw	2	; case 95
  5007  001FB6  B4D8               	btfsc	status,2,c
  5008  001FB8  D763               	goto	i2l4633
  5009  001FBA  0A3E               	xorlw	62	; case 97
  5010  001FBC  B4D8               	btfsc	status,2,c
  5011  001FBE  D749               	goto	i2l4613
  5012  001FC0  0A03               	xorlw	3	; case 98
  5013  001FC2  B4D8               	btfsc	status,2,c
  5014  001FC4  D746               	goto	i2l4613
  5015  001FC6  0A01               	xorlw	1	; case 99
  5016  001FC8  B4D8               	btfsc	status,2,c
  5017  001FCA  D743               	goto	i2l4613
  5018  001FCC  0A07               	xorlw	7	; case 100
  5019  001FCE  B4D8               	btfsc	status,2,c
  5020  001FD0  D740               	goto	i2l4613
  5021  001FD2  0A01               	xorlw	1	; case 101
  5022  001FD4  B4D8               	btfsc	status,2,c
  5023  001FD6  D73D               	goto	i2l4613
  5024  001FD8  0A03               	xorlw	3	; case 102
  5025  001FDA  B4D8               	btfsc	status,2,c
  5026  001FDC  D73A               	goto	i2l4613
  5027  001FDE  0A01               	xorlw	1	; case 103
  5028  001FE0  B4D8               	btfsc	status,2,c
  5029  001FE2  D737               	goto	i2l4613
  5030  001FE4  0A0F               	xorlw	15	; case 104
  5031  001FE6  B4D8               	btfsc	status,2,c
  5032  001FE8  D734               	goto	i2l4613
  5033  001FEA  0A01               	xorlw	1	; case 105
  5034  001FEC  B4D8               	btfsc	status,2,c
  5035  001FEE  D731               	goto	i2l4613
  5036  001FF0  0A03               	xorlw	3	; case 106
  5037  001FF2  B4D8               	btfsc	status,2,c
  5038  001FF4  D72E               	goto	i2l4613
  5039  001FF6  0A01               	xorlw	1	; case 107
  5040  001FF8  B4D8               	btfsc	status,2,c
  5041  001FFA  D72B               	goto	i2l4613
  5042  001FFC  0A07               	xorlw	7	; case 108
  5043  001FFE  B4D8               	btfsc	status,2,c
  5044  002000  D728               	goto	i2l4613
  5045  002002  0A01               	xorlw	1	; case 109
  5046  002004  B4D8               	btfsc	status,2,c
  5047  002006  D725               	goto	i2l4613
  5048  002008  0A03               	xorlw	3	; case 110
  5049  00200A  B4D8               	btfsc	status,2,c
  5050  00200C  D722               	goto	i2l4613
  5051  00200E  0A01               	xorlw	1	; case 111
  5052  002010  B4D8               	btfsc	status,2,c
  5053  002012  D71F               	goto	i2l4613
  5054  002014  0A1F               	xorlw	31	; case 112
  5055  002016  B4D8               	btfsc	status,2,c
  5056  002018  D71C               	goto	i2l4613
  5057  00201A  0A01               	xorlw	1	; case 113
  5058  00201C  B4D8               	btfsc	status,2,c
  5059  00201E  D719               	goto	i2l4613
  5060  002020  0A03               	xorlw	3	; case 114
  5061  002022  B4D8               	btfsc	status,2,c
  5062  002024  D716               	goto	i2l4613
  5063  002026  0A01               	xorlw	1	; case 115
  5064  002028  B4D8               	btfsc	status,2,c
  5065  00202A  D713               	goto	i2l4613
  5066  00202C  0A07               	xorlw	7	; case 116
  5067  00202E  B4D8               	btfsc	status,2,c
  5068  002030  D710               	goto	i2l4613
  5069  002032  0A01               	xorlw	1	; case 117
  5070  002034  B4D8               	btfsc	status,2,c
  5071  002036  D70D               	goto	i2l4613
  5072  002038  0A03               	xorlw	3	; case 118
  5073  00203A  B4D8               	btfsc	status,2,c
  5074  00203C  D70A               	goto	i2l4613
  5075  00203E  0A01               	xorlw	1	; case 119
  5076  002040  B4D8               	btfsc	status,2,c
  5077  002042  D707               	goto	i2l4613
  5078  002044  0A0F               	xorlw	15	; case 120
  5079  002046  B4D8               	btfsc	status,2,c
  5080  002048  D704               	goto	i2l4613
  5081  00204A  0A01               	xorlw	1	; case 121
  5082  00204C  B4D8               	btfsc	status,2,c
  5083  00204E  D701               	goto	i2l4613
  5084  002050  0A03               	xorlw	3	; case 122
  5085  002052  B4D8               	btfsc	status,2,c
  5086  002054  D6FE               	goto	i2l4613
  5087  002056  D718               	goto	i2l4641
  5088  002058                     i2l125:
  5089  002058  0012               	return	
  5090  00205A                     __end_of_getFontChar:
  5091                           	opt stack 0
  5092                           tosu	equ	0xFFF
  5093                           tosh	equ	0xFFE
  5094                           tosl	equ	0xFFD
  5095                           pclatu	equ	0xFFB
  5096                           pclath	equ	0xFFA
  5097                           tblptru	equ	0xFF8
  5098                           tblptrh	equ	0xFF7
  5099                           tblptrl	equ	0xFF6
  5100                           tablat	equ	0xFF5
  5101                           prodh	equ	0xFF4
  5102                           prodl	equ	0xFF3
  5103                           intcon	equ	0xFF2
  5104                           intcon2	equ	0xFF1
  5105                           indf0	equ	0xFEF
  5106                           postinc0	equ	0xFEE
  5107                           fsr0h	equ	0xFEA
  5108                           fsr0l	equ	0xFE9
  5109                           wreg	equ	0xFE8
  5110                           postinc1	equ	0xFE6
  5111                           postdec1	equ	0xFE5
  5112                           fsr1h	equ	0xFE2
  5113                           fsr1l	equ	0xFE1
  5114                           indf2	equ	0xFDF
  5115                           postinc2	equ	0xFDE
  5116                           postdec2	equ	0xFDD
  5117                           plusw2	equ	0xFDB
  5118                           fsr2h	equ	0xFDA
  5119                           fsr2l	equ	0xFD9
  5120                           status	equ	0xFD8
  5121                           
  5122 ;; *************** function _sprintf *****************
  5123 ;; Defined at:
  5124 ;;		line 493 in file "/usr/opt/microchip/xc8/v1.20/sources/common/doprnt.c"
  5125 ;; Parameters:    Size  Location     Type
  5126 ;;  sp              2    0[BANK0 ] PTR unsigned char 
  5127 ;;		 -> printRTC@str(9), writeFloat@str(9), writeLong@str(9), 
  5128 ;;  f               2    2[BANK0 ] PTR const unsigned char 
  5129 ;;		 -> STR_22(15), STR_21(13), STR_20(15), STR_19(15), 
  5130 ;;		 -> STR_18(15), STR_17(10), STR_9(5), STR_8(5), 
  5131 ;; Auto vars:     Size  Location     Type
  5132 ;;  vd              2   19[BANK0 ] unsigned int 
  5133 ;;  vd              2   21[BANK0 ] unsigned int 
  5134 ;;  _val            4   40[BANK0 ] struct .
  5135 ;;  fval            3   32[BANK0 ] struct .
  5136 ;;  integ           3   23[BANK0 ] struct .
  5137 ;;  ival            3    0        struct .
  5138 ;;  prec            2   37[BANK0 ] int 
  5139 ;;  width           2   35[BANK0 ] int 
  5140 ;;  flag            2   30[BANK0 ] unsigned short 
  5141 ;;  exp             2   28[BANK0 ] int 
  5142 ;;  ap              2   26[BANK0 ] PTR void [1]
  5143 ;;		 -> ?_sprintf(2), 
  5144 ;;  c               1   39[BANK0 ] char 
  5145 ;;  d               1    0        unsigned char 
  5146 ;; Return value:  Size  Location     Type
  5147 ;;                  2    0[BANK0 ] int 
  5148 ;; Registers used:
  5149 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5150 ;; Tracked objects:
  5151 ;;		On entry : 0/0
  5152 ;;		On exit  : 0/0
  5153 ;;		Unchanged: 0/0
  5154 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5155 ;;      Params:         0      12       0       0       0       0       0       0       0
  5156 ;;      Locals:         0      32       0       0       0       0       0       0       0
  5157 ;;      Temps:          6       0       0       0       0       0       0       0       0
  5158 ;;      Totals:         6      44       0       0       0       0       0       0       0
  5159 ;;Total ram usage:       50 bytes
  5160 ;; Hardware stack levels used:    1
  5161 ;; Hardware stack levels required when called:    4
  5162 ;; This function calls:
  5163 ;;		_fround
  5164 ;;		_scale
  5165 ;;		_isdigit
  5166 ;;		__tdiv_to_l_
  5167 ;;		__div_to_l_
  5168 ;;		___asftadd
  5169 ;;		___asftmul
  5170 ;;		___ftmul
  5171 ;;		___asftsub
  5172 ;;		___awdiv
  5173 ;;		___ftge
  5174 ;;		___ftneg
  5175 ;;		___fttol
  5176 ;;		___lldiv
  5177 ;;		___llmod
  5178 ;;		___lltoft
  5179 ;;		___lwmod
  5180 ;;		___wmul
  5181 ;; This function is called by:
  5182 ;;		_writeFloat
  5183 ;;		_printRTC
  5184 ;;		_writeLong
  5185 ;; This function uses a non-reentrant model
  5186 ;;
  5187                           
  5188                           	psect	text22
  5189  00001C                     __ptext22:
  5190                           	opt stack 0
  5191  00001C                     _sprintf:
  5192                           	opt stack 20
  5193                           
  5194                           ;doprnt.c: 494: va_list ap;
  5195                           ;doprnt.c: 499: signed char c;
  5196                           ;doprnt.c: 501: int width;
  5197                           ;doprnt.c: 504: int prec;
  5198                           ;doprnt.c: 508: unsigned short flag;
  5199                           ;doprnt.c: 515: char d;
  5200                           ;doprnt.c: 516: double fval, integ;
  5201                           ;doprnt.c: 517: int exp;
  5202                           ;doprnt.c: 518: double ival;
  5203                           ;doprnt.c: 519: union {
  5204                           ;doprnt.c: 520: unsigned long _val;
  5205                           ;doprnt.c: 521: struct {
  5206                           ;doprnt.c: 522: const char * _cp;
  5207                           ;doprnt.c: 523: unsigned _len;
  5208                           ;doprnt.c: 524: } _str;
  5209                           ;doprnt.c: 525: } _val;
  5210                           ;doprnt.c: 542: *ap = __va_start();
  5211                           
  5212                           ;incstack = 0
  5213                           ;incstack = 0
  5214  00001C  0100               	movlb	0	; () banked
  5215  00001E  0E00               	movlw	high (?_sprintf+4)
  5216  000020  0100               	movlb	0	; () banked
  5217  000022  0100               	movlb	0	; () banked
  5218  000024  6F7B               	movwf	(sprintf@ap+1)& (0+255),b
  5219  000026  0100               	movlb	0	; () banked
  5220  000028  0E64               	movlw	low (?_sprintf+4)
  5221  00002A  0100               	movlb	0	; () banked
  5222  00002C  6F7A               	movwf	sprintf@ap& (0+255),b
  5223                           
  5224                           ;doprnt.c: 545: while(c = *f++) {
  5225  00002E  EFBE  F007         	goto	i2l6063
  5226  000032                     i2l5671:
  5227                           
  5228                           ; BSR set to: 0
  5229                           ;doprnt.c: 547: if(c != '%')
  5230  000032  0100               	movlb	0	; () banked
  5231  000034  0100               	movlb	0	; () banked
  5232  000036  5187               	movf	sprintf@c& (0+255),w,b
  5233  000038  0A25               	xorlw	37
  5234  00003A  B4D8               	btfsc	status,2,c
  5235  00003C  D00D               	goto	i2l5677
  5236                           
  5237                           ; BSR set to: 0
  5238                           ;doprnt.c: 549: {
  5239                           ;doprnt.c: 550: ((*sp++ = (c)));
  5240  00003E  C060  FFD9         	movff	sprintf@sp,fsr2l
  5241  000042  C061  FFDA         	movff	sprintf@sp+1,fsr2h
  5242  000046  0100               	movlb	0	; () banked
  5243  000048  C087  FFDF         	movff	sprintf@c,indf2
  5244                           
  5245                           ; BSR set to: 0
  5246  00004C  0100               	movlb	0	; () banked
  5247  00004E  0100               	movlb	0	; () banked
  5248  000050  4B60               	infsnz	sprintf@sp& (0+255),f,b
  5249  000052  2B61               	incf	(sprintf@sp+1)& (0+255),f,b
  5250                           
  5251                           ;doprnt.c: 551: continue;
  5252  000054  EFBE  F007         	goto	i2l6063
  5253  000058                     i2l5677:
  5254                           
  5255                           ; BSR set to: 0
  5256                           ;doprnt.c: 552: }
  5257                           ;doprnt.c: 555: width = 0;
  5258  000058  0E00               	movlw	0
  5259  00005A  0100               	movlb	0	; () banked
  5260  00005C  0100               	movlb	0	; () banked
  5261  00005E  6F84               	movwf	(sprintf@width+1)& (0+255),b
  5262  000060  0E00               	movlw	0
  5263  000062  0100               	movlb	0	; () banked
  5264  000064  6F83               	movwf	sprintf@width& (0+255),b
  5265                           
  5266                           ;doprnt.c: 557: flag = 0;
  5267  000066  0E00               	movlw	0
  5268  000068  0100               	movlb	0	; () banked
  5269  00006A  0100               	movlb	0	; () banked
  5270  00006C  6F7F               	movwf	(sprintf@flag+1)& (0+255),b
  5271  00006E  0E00               	movlw	0
  5272  000070  0100               	movlb	0	; () banked
  5273  000072  6F7E               	movwf	sprintf@flag& (0+255),b
  5274  000074  D007               	goto	i2l5683
  5275  000076                     i2l5679:
  5276                           
  5277                           ; BSR set to: 0
  5278                           ;doprnt.c: 589: flag |= 0x04;
  5279  000076  0100               	movlb	0	; () banked
  5280  000078  0100               	movlb	0	; () banked
  5281  00007A  857E               	bsf	sprintf@flag& (0+255),2,b
  5282                           
  5283                           ;doprnt.c: 590: f++;
  5284  00007C  0100               	movlb	0	; () banked
  5285  00007E  0100               	movlb	0	; () banked
  5286  000080  4B62               	infsnz	sprintf@f& (0+255),f,b
  5287  000082  2B63               	incf	(sprintf@f+1)& (0+255),f,b
  5288  000084                     i2l5683:
  5289                           
  5290                           ; BSR set to: 0
  5291  000084  0100               	movlb	0	; () banked
  5292  000086  C062  FFF6         	movff	sprintf@f,tblptrl
  5293  00008A  0100               	movlb	0	; () banked
  5294  00008C  C063  FFF7         	movff	sprintf@f+1,tblptrh
  5295  000090  0008               	tblrd		*
  5296  000092  50F5               	movf	tablat,w,c
  5297                           
  5298                           ; Switch size 1, requested type "space"
  5299                           ; Number of cases is 1, Range of values is 48 to 48
  5300                           ; switch strategies available:
  5301                           ; Name         Instructions Cycles
  5302                           ; simple_byte            4     3 (average)
  5303                           ;	Chosen strategy is simple_byte
  5304  000094  0A30               	xorlw	48	; case 48
  5305  000096  B4D8               	btfsc	status,2,c
  5306  000098  D7EE               	goto	i2l5679
  5307                           
  5308                           ; BSR set to: 0
  5309                           ;doprnt.c: 606: if(isdigit((unsigned)*f)) {
  5310                           
  5311                           ; BSR set to: 0
  5312                           
  5313                           ; BSR set to: 0
  5314                           ;doprnt.c: 595: }
  5315                           
  5316                           ; BSR set to: 0
  5317                           ;doprnt.c: 594: break;
  5318  00009A  0100               	movlb	0	; () banked
  5319  00009C  C062  FFF6         	movff	sprintf@f,tblptrl
  5320  0000A0  0100               	movlb	0	; () banked
  5321  0000A2  C063  FFF7         	movff	sprintf@f+1,tblptrh
  5322  0000A6  0008               	tblrd		*
  5323  0000A8  CFF5 F001          	movff	tablat,?_isdigit
  5324  0000AC  EC90  F01E         	call	_isdigit	;wreg free
  5325  0000B0  A0D8               	btfss	status,0,c
  5326  0000B2  D03E               	goto	i2l5697
  5327                           
  5328                           ;doprnt.c: 607: width = 0;
  5329  0000B4  0E00               	movlw	0
  5330  0000B6  0100               	movlb	0	; () banked
  5331  0000B8  0100               	movlb	0	; () banked
  5332  0000BA  6F84               	movwf	(sprintf@width+1)& (0+255),b
  5333  0000BC  0E00               	movlw	0
  5334  0000BE  0100               	movlb	0	; () banked
  5335  0000C0  6F83               	movwf	sprintf@width& (0+255),b
  5336  0000C2                     i2l5689:
  5337                           
  5338                           ;doprnt.c: 609: width *= 10;
  5339  0000C2  C083  F017         	movff	sprintf@width,?___wmul
  5340  0000C6  C084  F018         	movff	sprintf@width+1,?___wmul+1
  5341  0000CA  0E00               	movlw	0
  5342  0000CC  6E1A               	movwf	?___wmul+3,c
  5343  0000CE  0E0A               	movlw	10
  5344  0000D0  6E19               	movwf	?___wmul+2,c
  5345  0000D2  ECEF  F01D         	call	___wmul	;wreg free
  5346  0000D6  C017  F083         	movff	?___wmul,sprintf@width
  5347  0000DA  C018  F084         	movff	?___wmul+1,sprintf@width+1
  5348                           
  5349                           ;doprnt.c: 610: width += *f++ - '0';
  5350  0000DE  0100               	movlb	0	; () banked
  5351  0000E0  C062  FFF6         	movff	sprintf@f,tblptrl
  5352  0000E4  0100               	movlb	0	; () banked
  5353  0000E6  C063  FFF7         	movff	sprintf@f+1,tblptrh
  5354  0000EA  0008               	tblrd		*
  5355  0000EC  CFF5 F058          	movff	tablat,??_sprintf
  5356  0000F0  0ED0               	movlw	208
  5357  0000F2  2458               	addwf	??_sprintf,w,c
  5358  0000F4  6E59               	movwf	(??_sprintf+1)& (0+255),c
  5359  0000F6  6A5A               	clrf	(??_sprintf+2)& (0+255),c
  5360  0000F8  0EFF               	movlw	255
  5361  0000FA  225A               	addwfc	(??_sprintf+2)& (0+255),f,c
  5362  0000FC  5059               	movf	??_sprintf+1,w,c
  5363  0000FE  0100               	movlb	0	; () banked
  5364  000100  0100               	movlb	0	; () banked
  5365  000102  2783               	addwf	sprintf@width& (0+255),f,b
  5366  000104  505A               	movf	??_sprintf+2,w,c
  5367  000106  0100               	movlb	0	; () banked
  5368  000108  0100               	movlb	0	; () banked
  5369  00010A  2384               	addwfc	(sprintf@width+1)& (0+255),f,b
  5370                           
  5371                           ; BSR set to: 0
  5372  00010C  0100               	movlb	0	; () banked
  5373  00010E  0100               	movlb	0	; () banked
  5374  000110  4B62               	infsnz	sprintf@f& (0+255),f,b
  5375  000112  2B63               	incf	(sprintf@f+1)& (0+255),f,b
  5376                           
  5377                           ; BSR set to: 0
  5378                           ;doprnt.c: 611: } while(isdigit((unsigned)*f));
  5379  000114  0100               	movlb	0	; () banked
  5380  000116  C062  FFF6         	movff	sprintf@f,tblptrl
  5381  00011A  0100               	movlb	0	; () banked
  5382  00011C  C063  FFF7         	movff	sprintf@f+1,tblptrh
  5383  000120  0008               	tblrd		*
  5384  000122  CFF5 F001          	movff	tablat,?_isdigit
  5385  000126  EC90  F01E         	call	_isdigit	;wreg free
  5386  00012A  A0D8               	btfss	status,0,c
  5387  00012C  D021               	goto	i2l5705
  5388  00012E  D7C9               	goto	i2l5689
  5389  000130                     i2l5697:
  5390  000130  0100               	movlb	0	; () banked
  5391  000132  C062  FFF6         	movff	sprintf@f,tblptrl
  5392  000136  0100               	movlb	0	; () banked
  5393  000138  C063  FFF7         	movff	sprintf@f+1,tblptrh
  5394  00013C  0008               	tblrd		*
  5395  00013E  50F5               	movf	tablat,w,c
  5396  000140  0A2A               	xorlw	42
  5397  000142  A4D8               	btfss	status,2,c
  5398  000144  D015               	goto	i2l5705
  5399                           
  5400                           ; BSR set to: 0
  5401                           ;doprnt.c: 614: width = (*(int *)__va_arg((*(int **)ap), (int)0));
  5402  000146  C07A  FFD9         	movff	sprintf@ap,fsr2l
  5403  00014A  C07B  FFDA         	movff	sprintf@ap+1,fsr2h
  5404  00014E  0100               	movlb	0	; () banked
  5405  000150  CFDE F083          	movff	postinc2,sprintf@width
  5406  000154  0100               	movlb	0	; () banked
  5407  000156  CFDD F084          	movff	postdec2,sprintf@width+1
  5408                           
  5409                           ; BSR set to: 0
  5410  00015A  0E02               	movlw	2
  5411  00015C  0100               	movlb	0	; () banked
  5412  00015E  0100               	movlb	0	; () banked
  5413  000160  277A               	addwf	sprintf@ap& (0+255),f,b
  5414  000162  0E00               	movlw	0
  5415  000164  0100               	movlb	0	; () banked
  5416  000166  237B               	addwfc	(sprintf@ap+1)& (0+255),f,b
  5417                           
  5418                           ; BSR set to: 0
  5419                           ;doprnt.c: 615: f++;
  5420  000168  0100               	movlb	0	; () banked
  5421  00016A  0100               	movlb	0	; () banked
  5422  00016C  4B62               	infsnz	sprintf@f& (0+255),f,b
  5423  00016E  2B63               	incf	(sprintf@f+1)& (0+255),f,b
  5424  000170                     i2l5705:
  5425                           
  5426                           ;doprnt.c: 617: }
  5427                           ;doprnt.c: 620: if(*f == '.') {
  5428  000170  0100               	movlb	0	; () banked
  5429  000172  C062  FFF6         	movff	sprintf@f,tblptrl
  5430  000176  0100               	movlb	0	; () banked
  5431  000178  C063  FFF7         	movff	sprintf@f+1,tblptrh
  5432  00017C  0008               	tblrd		*
  5433  00017E  50F5               	movf	tablat,w,c
  5434  000180  0A2E               	xorlw	46
  5435  000182  A4D8               	btfss	status,2,c
  5436  000184  D060               	goto	i2l5725
  5437                           
  5438                           ; BSR set to: 0
  5439                           ;doprnt.c: 621: flag |= 0x4000;
  5440  000186  0100               	movlb	0	; () banked
  5441  000188  0100               	movlb	0	; () banked
  5442  00018A  8D7F               	bsf	(sprintf@flag+1)& (0+255),6,b
  5443                           
  5444                           ;doprnt.c: 622: f++;
  5445  00018C  0100               	movlb	0	; () banked
  5446  00018E  0100               	movlb	0	; () banked
  5447  000190  4B62               	infsnz	sprintf@f& (0+255),f,b
  5448  000192  2B63               	incf	(sprintf@f+1)& (0+255),f,b
  5449                           
  5450                           ; BSR set to: 0
  5451                           ;doprnt.c: 624: if(*f == '*') {
  5452  000194  0100               	movlb	0	; () banked
  5453  000196  C062  FFF6         	movff	sprintf@f,tblptrl
  5454  00019A  0100               	movlb	0	; () banked
  5455  00019C  C063  FFF7         	movff	sprintf@f+1,tblptrh
  5456  0001A0  0008               	tblrd		*
  5457  0001A2  50F5               	movf	tablat,w,c
  5458  0001A4  0A2A               	xorlw	42
  5459  0001A6  A4D8               	btfss	status,2,c
  5460  0001A8  D016               	goto	i2l5717
  5461                           
  5462                           ; BSR set to: 0
  5463                           ;doprnt.c: 625: prec = (*(int *)__va_arg((*(int **)ap), (int)0));
  5464  0001AA  C07A  FFD9         	movff	sprintf@ap,fsr2l
  5465  0001AE  C07B  FFDA         	movff	sprintf@ap+1,fsr2h
  5466  0001B2  0100               	movlb	0	; () banked
  5467  0001B4  CFDE F085          	movff	postinc2,sprintf@prec
  5468  0001B8  0100               	movlb	0	; () banked
  5469  0001BA  CFDD F086          	movff	postdec2,sprintf@prec+1
  5470                           
  5471                           ; BSR set to: 0
  5472  0001BE  0E02               	movlw	2
  5473  0001C0  0100               	movlb	0	; () banked
  5474  0001C2  0100               	movlb	0	; () banked
  5475  0001C4  277A               	addwf	sprintf@ap& (0+255),f,b
  5476  0001C6  0E00               	movlw	0
  5477  0001C8  0100               	movlb	0	; () banked
  5478  0001CA  237B               	addwfc	(sprintf@ap+1)& (0+255),f,b
  5479                           
  5480                           ; BSR set to: 0
  5481                           ;doprnt.c: 626: f++;
  5482  0001CC  0100               	movlb	0	; () banked
  5483  0001CE  0100               	movlb	0	; () banked
  5484  0001D0  4B62               	infsnz	sprintf@f& (0+255),f,b
  5485  0001D2  2B63               	incf	(sprintf@f+1)& (0+255),f,b
  5486                           
  5487                           ;doprnt.c: 627: } else
  5488  0001D4  D130               	goto	i2l5781
  5489  0001D6                     i2l5717:
  5490                           
  5491                           ; BSR set to: 0
  5492                           ;doprnt.c: 629: {
  5493                           ;doprnt.c: 630: prec = 0;
  5494  0001D6  0E00               	movlw	0
  5495  0001D8  0100               	movlb	0	; () banked
  5496  0001DA  0100               	movlb	0	; () banked
  5497  0001DC  6F86               	movwf	(sprintf@prec+1)& (0+255),b
  5498  0001DE  0E00               	movlw	0
  5499  0001E0  0100               	movlb	0	; () banked
  5500  0001E2  6F85               	movwf	sprintf@prec& (0+255),b
  5501                           
  5502                           ;doprnt.c: 631: while(isdigit((unsigned)*f))
  5503  0001E4  D022               	goto	i2l5723
  5504  0001E6                     i2l5719:
  5505                           
  5506                           ;doprnt.c: 632: prec = prec*10 + *f++ - '0';
  5507  0001E6  C085  F017         	movff	sprintf@prec,?___wmul
  5508  0001EA  C086  F018         	movff	sprintf@prec+1,?___wmul+1
  5509  0001EE  0E00               	movlw	0
  5510  0001F0  6E1A               	movwf	?___wmul+3,c
  5511  0001F2  0E0A               	movlw	10
  5512  0001F4  6E19               	movwf	?___wmul+2,c
  5513  0001F6  ECEF  F01D         	call	___wmul	;wreg free
  5514  0001FA  0100               	movlb	0	; () banked
  5515  0001FC  C062  FFF6         	movff	sprintf@f,tblptrl
  5516  000200  0100               	movlb	0	; () banked
  5517  000202  C063  FFF7         	movff	sprintf@f+1,tblptrh
  5518  000206  0008               	tblrd		*
  5519  000208  50F5               	movf	tablat,w,c
  5520  00020A  2617               	addwf	?___wmul,f,c
  5521  00020C  0E00               	movlw	0
  5522  00020E  2218               	addwfc	?___wmul+1,f,c
  5523  000210  0ED0               	movlw	208
  5524  000212  2417               	addwf	?___wmul,w,c
  5525  000214  0100               	movlb	0	; () banked
  5526  000216  0100               	movlb	0	; () banked
  5527  000218  6F85               	movwf	sprintf@prec& (0+255),b
  5528  00021A  0EFF               	movlw	255
  5529  00021C  2018               	addwfc	?___wmul+1,w,c
  5530  00021E  0100               	movlb	0	; () banked
  5531  000220  6F86               	movwf	(sprintf@prec+1)& (0+255),b
  5532                           
  5533                           ; BSR set to: 0
  5534  000222  0100               	movlb	0	; () banked
  5535  000224  0100               	movlb	0	; () banked
  5536  000226  4B62               	infsnz	sprintf@f& (0+255),f,b
  5537  000228  2B63               	incf	(sprintf@f+1)& (0+255),f,b
  5538  00022A                     i2l5723:
  5539                           
  5540                           ; BSR set to: 0
  5541  00022A  0100               	movlb	0	; () banked
  5542  00022C  C062  FFF6         	movff	sprintf@f,tblptrl
  5543  000230  0100               	movlb	0	; () banked
  5544  000232  C063  FFF7         	movff	sprintf@f+1,tblptrh
  5545  000236  0008               	tblrd		*
  5546  000238  CFF5 F001          	movff	tablat,?_isdigit
  5547  00023C  EC90  F01E         	call	_isdigit	;wreg free
  5548  000240  A0D8               	btfss	status,0,c
  5549  000242  D0F9               	goto	i2l5781
  5550  000244  D7D0               	goto	i2l5719
  5551  000246                     i2l5725:
  5552                           
  5553                           ;doprnt.c: 635: prec = 0;
  5554  000246  0E00               	movlw	0
  5555  000248  0100               	movlb	0	; () banked
  5556  00024A  0100               	movlb	0	; () banked
  5557  00024C  6F86               	movwf	(sprintf@prec+1)& (0+255),b
  5558  00024E  0E00               	movlw	0
  5559  000250  0100               	movlb	0	; () banked
  5560  000252  6F85               	movwf	sprintf@prec& (0+255),b
  5561                           
  5562                           ; BSR set to: 0
  5563                           ;doprnt.c: 637: flag |= 0x1000;
  5564  000254  0100               	movlb	0	; () banked
  5565  000256  0100               	movlb	0	; () banked
  5566  000258  897F               	bsf	(sprintf@flag+1)& (0+255),4,b
  5567  00025A  D0ED               	goto	i2l5781
  5568  00025C                     i2l5729:
  5569                           
  5570                           ; BSR set to: 0
  5571                           ;doprnt.c: 652: flag |= 0x10;
  5572  00025C  0100               	movlb	0	; () banked
  5573  00025E  0100               	movlb	0	; () banked
  5574  000260  897E               	bsf	sprintf@flag& (0+255),4,b
  5575                           
  5576                           ;doprnt.c: 653: goto loop;
  5577  000262  D0E9               	goto	i2l5781
  5578  000264                     i2l5731:
  5579                           
  5580                           ; BSR set to: 0
  5581                           ;doprnt.c: 672: flag |= 0x400;
  5582  000264  0100               	movlb	0	; () banked
  5583  000266  0100               	movlb	0	; () banked
  5584  000268  857F               	bsf	(sprintf@flag+1)& (0+255),2,b
  5585                           
  5586                           ;doprnt.c: 673: break;
  5587  00026A  D10C               	goto	i2l5783
  5588  00026C                     i2l5733:
  5589                           
  5590                           ; BSR set to: 0
  5591                           ;doprnt.c: 743: _val._str._cp = (*(const char * *)__va_arg((*(const char * **)ap), (cons
      +                          t char *)0));
  5592  00026C  C07A  FFD9         	movff	sprintf@ap,fsr2l
  5593  000270  C07B  FFDA         	movff	sprintf@ap+1,fsr2h
  5594  000274  0100               	movlb	0	; () banked
  5595  000276  CFDE F088          	movff	postinc2,sprintf@_val
  5596  00027A  0100               	movlb	0	; () banked
  5597  00027C  CFDD F089          	movff	postdec2,sprintf@_val+1
  5598                           
  5599                           ; BSR set to: 0
  5600  000280  0E02               	movlw	2
  5601  000282  0100               	movlb	0	; () banked
  5602  000284  0100               	movlb	0	; () banked
  5603  000286  277A               	addwf	sprintf@ap& (0+255),f,b
  5604  000288  0E00               	movlw	0
  5605  00028A  0100               	movlb	0	; () banked
  5606  00028C  237B               	addwfc	(sprintf@ap+1)& (0+255),f,b
  5607                           
  5608                           ; BSR set to: 0
  5609                           ;doprnt.c: 749: if(!_val._str._cp)
  5610  00028E  0100               	movlb	0	; () banked
  5611  000290  0100               	movlb	0	; () banked
  5612  000292  5189               	movf	(sprintf@_val+1)& (0+255),w,b
  5613  000294  1188               	iorwf	sprintf@_val& (0+255),w,b
  5614  000296  A4D8               	btfss	status,2,c
  5615  000298  D007               	goto	i2l538
  5616                           
  5617                           ; BSR set to: 0
  5618                           ;doprnt.c: 750: _val._str._cp = "(null)";
  5619  00029A  0E7F               	movlw	high STR_38
  5620  00029C  0100               	movlb	0	; () banked
  5621  00029E  0100               	movlb	0	; () banked
  5622  0002A0  6F89               	movwf	(sprintf@_val+1)& (0+255),b
  5623  0002A2  0ECF               	movlw	low STR_38
  5624  0002A4  0100               	movlb	0	; () banked
  5625  0002A6  6F88               	movwf	sprintf@_val& (0+255),b
  5626  0002A8                     i2l538:
  5627                           
  5628                           ; BSR set to: 0
  5629                           ;doprnt.c: 754: _val._str._len = 0;
  5630  0002A8  0E00               	movlw	0
  5631  0002AA  0100               	movlb	0	; () banked
  5632  0002AC  0100               	movlb	0	; () banked
  5633  0002AE  6F8B               	movwf	(sprintf@_val+3)& (0+255),b
  5634  0002B0  0E00               	movlw	0
  5635  0002B2  0100               	movlb	0	; () banked
  5636  0002B4  6F8A               	movwf	(sprintf@_val+2)& (0+255),b
  5637                           
  5638                           ;doprnt.c: 755: while(_val._str._cp[_val._str._len])
  5639  0002B6  D004               	goto	i2l5743
  5640  0002B8                     i2l5741:
  5641                           
  5642                           ;doprnt.c: 756: _val._str._len++;
  5643  0002B8  0100               	movlb	0	; () banked
  5644  0002BA  0100               	movlb	0	; () banked
  5645  0002BC  4B8A               	infsnz	(sprintf@_val+2)& (0+255),f,b
  5646  0002BE  2B8B               	incf	(sprintf@_val+3)& (0+255),f,b
  5647  0002C0                     i2l5743:
  5648                           
  5649                           ; BSR set to: 0
  5650  0002C0  0100               	movlb	0	; () banked
  5651  0002C2  C088  F058         	movff	sprintf@_val,??_sprintf
  5652  0002C6  0100               	movlb	0	; () banked
  5653  0002C8  C089  F059         	movff	sprintf@_val+1,??_sprintf+1
  5654  0002CC  0100               	movlb	0	; () banked
  5655  0002CE  0100               	movlb	0	; () banked
  5656  0002D0  518A               	movf	(sprintf@_val+2)& (0+255),w,b
  5657  0002D2  2658               	addwf	??_sprintf,f,c
  5658  0002D4  0100               	movlb	0	; () banked
  5659  0002D6  0100               	movlb	0	; () banked
  5660  0002D8  518B               	movf	(sprintf@_val+3)& (0+255),w,b
  5661  0002DA  2259               	addwfc	??_sprintf+1,f,c
  5662  0002DC  5058               	movf	??_sprintf,w,c
  5663  0002DE  6EF6               	movwf	tblptrl,c
  5664  0002E0  6EE9               	movwf	fsr0l,c
  5665  0002E2  0E07               	movlw	(high __ramtop+-1)
  5666  0002E4  6EEA               	movwf	fsr0h,c
  5667  0002E6  5059               	movf	??_sprintf+1,w,c
  5668  0002E8  64EA               	cpfsgt	fsr0h,c
  5669  0002EA  D003               	bra	i2u413_47
  5670  0002EC  6EEA               	movwf	fsr0h,c
  5671  0002EE  50EF               	movf	indf0,w,c
  5672  0002F0  D003               	bra	i2u413_40
  5673  0002F2                     i2u413_47:
  5674  0002F2  6EF7               	movwf	tblptrh,c
  5675  0002F4  0008               	tblrd		*
  5676  0002F6  50F5               	movf	tablat,w,c
  5677  0002F8                     i2u413_40:
  5678  0002F8  0900               	iorlw	0
  5679  0002FA  A4D8               	btfss	status,2,c
  5680  0002FC  D7DD               	goto	i2l5741
  5681  0002FE                     i2l5745:
  5682                           
  5683                           ;doprnt.c: 762: if(prec && prec < _val._str._len)
  5684  0002FE  0100               	movlb	0	; () banked
  5685  000300  0100               	movlb	0	; () banked
  5686  000302  5186               	movf	(sprintf@prec+1)& (0+255),w,b
  5687  000304  1185               	iorwf	sprintf@prec& (0+255),w,b
  5688  000306  B4D8               	btfsc	status,2,c
  5689  000308  D012               	goto	i2l5751
  5690                           
  5691                           ; BSR set to: 0
  5692  00030A  0100               	movlb	0	; () banked
  5693  00030C  0100               	movlb	0	; () banked
  5694  00030E  518A               	movf	(sprintf@_val+2)& (0+255),w,b
  5695  000310  0100               	movlb	0	; () banked
  5696  000312  0100               	movlb	0	; () banked
  5697  000314  5D85               	subwf	sprintf@prec& (0+255),w,b
  5698  000316  0100               	movlb	0	; () banked
  5699  000318  0100               	movlb	0	; () banked
  5700  00031A  518B               	movf	(sprintf@_val+3)& (0+255),w,b
  5701  00031C  0100               	movlb	0	; () banked
  5702  00031E  0100               	movlb	0	; () banked
  5703  000320  5986               	subwfb	(sprintf@prec+1)& (0+255),w,b
  5704  000322  B0D8               	btfsc	status,0,c
  5705  000324  D004               	goto	i2l5751
  5706                           
  5707                           ; BSR set to: 0
  5708                           ;doprnt.c: 763: _val._str._len = prec;
  5709  000326  C085  F08A         	movff	sprintf@prec,sprintf@_val+2
  5710  00032A  C086  F08B         	movff	sprintf@prec+1,sprintf@_val+3
  5711  00032E                     i2l5751:
  5712                           
  5713                           ; BSR set to: 0
  5714                           ;doprnt.c: 766: if(width > _val._str._len)
  5715  00032E  0100               	movlb	0	; () banked
  5716  000330  0100               	movlb	0	; () banked
  5717  000332  5183               	movf	sprintf@width& (0+255),w,b
  5718  000334  0100               	movlb	0	; () banked
  5719  000336  0100               	movlb	0	; () banked
  5720  000338  5D8A               	subwf	(sprintf@_val+2)& (0+255),w,b
  5721  00033A  0100               	movlb	0	; () banked
  5722  00033C  0100               	movlb	0	; () banked
  5723  00033E  5184               	movf	(sprintf@width+1)& (0+255),w,b
  5724  000340  0100               	movlb	0	; () banked
  5725  000342  0100               	movlb	0	; () banked
  5726  000344  598B               	subwfb	(sprintf@_val+3)& (0+255),w,b
  5727  000346  B0D8               	btfsc	status,0,c
  5728  000348  D00C               	goto	i2l5755
  5729                           
  5730                           ; BSR set to: 0
  5731                           ;doprnt.c: 767: width -= _val._str._len;
  5732  00034A  0100               	movlb	0	; () banked
  5733  00034C  EE20  F08A         	lfsr	2,sprintf@_val+2
  5734  000350  50DE               	movf	postinc2,w,c
  5735  000352  0100               	movlb	0	; () banked
  5736  000354  0100               	movlb	0	; () banked
  5737  000356  5F83               	subwf	sprintf@width& (0+255),f,b
  5738  000358  50DD               	movf	postdec2,w,c
  5739  00035A  0100               	movlb	0	; () banked
  5740  00035C  0100               	movlb	0	; () banked
  5741  00035E  5B84               	subwfb	(sprintf@width+1)& (0+255),f,b
  5742  000360  D012               	goto	i2l5761
  5743  000362                     i2l5755:
  5744                           
  5745                           ; BSR set to: 0
  5746                           ;doprnt.c: 768: else
  5747                           ;doprnt.c: 769: width = 0;
  5748  000362  0E00               	movlw	0
  5749  000364  0100               	movlb	0	; () banked
  5750  000366  0100               	movlb	0	; () banked
  5751  000368  6F84               	movwf	(sprintf@width+1)& (0+255),b
  5752  00036A  0E00               	movlw	0
  5753  00036C  0100               	movlb	0	; () banked
  5754  00036E  6F83               	movwf	sprintf@width& (0+255),b
  5755  000370  D00A               	goto	i2l5761
  5756  000372                     i2l5757:
  5757                           
  5758                           ; BSR set to: 0
  5759                           ;doprnt.c: 774: ((*sp++ = (' ')));
  5760  000372  C060  FFD9         	movff	sprintf@sp,fsr2l
  5761  000376  C061  FFDA         	movff	sprintf@sp+1,fsr2h
  5762  00037A  0E20               	movlw	32
  5763  00037C  6EDF               	movwf	indf2,c
  5764                           
  5765                           ; BSR set to: 0
  5766  00037E  0100               	movlb	0	; () banked
  5767  000380  0100               	movlb	0	; () banked
  5768  000382  4B60               	infsnz	sprintf@sp& (0+255),f,b
  5769  000384  2B61               	incf	(sprintf@sp+1)& (0+255),f,b
  5770  000386                     i2l5761:
  5771                           
  5772                           ; BSR set to: 0
  5773  000386  0100               	movlb	0	; () banked
  5774  000388  0100               	movlb	0	; () banked
  5775  00038A  0783               	decf	sprintf@width& (0+255),f,b
  5776  00038C  A0D8               	btfss	status,0,c
  5777  00038E  0784               	decf	(sprintf@width+1)& (0+255),f,b
  5778  000390  0100               	movlb	0	; () banked
  5779  000392  2983               	incf	sprintf@width& (0+255),w,b
  5780  000394  B4D8               	btfsc	status,2,c
  5781  000396  2984               	incf	(sprintf@width+1)& (0+255),w,b
  5782  000398  B4D8               	btfsc	status,2,c
  5783  00039A  D020               	goto	i2l5769
  5784  00039C  D7EA               	goto	i2l5757
  5785  00039E                     i2l5763:
  5786                           
  5787                           ; BSR set to: 0
  5788                           ;doprnt.c: 777: ((*sp++ = (*_val._str._cp++)));
  5789  00039E  0100               	movlb	0	; () banked
  5790  0003A0  C088  FFF6         	movff	sprintf@_val,tblptrl
  5791  0003A4  0100               	movlb	0	; () banked
  5792  0003A6  C089  FFF7         	movff	sprintf@_val+1,tblptrh
  5793  0003AA  6AF8               	clrf	tblptru,c
  5794  0003AC  C060  FFD9         	movff	sprintf@sp,fsr2l
  5795  0003B0  C061  FFDA         	movff	sprintf@sp+1,fsr2h
  5796  0003B4  0E07               	movlw	(high __ramtop+-1)
  5797  0003B6  64F7               	cpfsgt	tblptrh,c
  5798  0003B8  D003               	bra	i2u419_47
  5799  0003BA  0008               	tblrd		*
  5800  0003BC  50F5               	movf	tablat,w,c
  5801  0003BE  D005               	bra	i2u419_40
  5802  0003C0                     i2u419_47:
  5803  0003C0  CFF6 FFE9          	movff	tblptrl,fsr0l
  5804  0003C4  CFF7 FFEA          	movff	tblptrh,fsr0h
  5805  0003C8  50EF               	movf	indf0,w,c
  5806  0003CA                     i2u419_40:
  5807  0003CA  6EDF               	movwf	indf2,c
  5808  0003CC  0100               	movlb	0	; () banked
  5809  0003CE  0100               	movlb	0	; () banked
  5810  0003D0  4B88               	infsnz	sprintf@_val& (0+255),f,b
  5811  0003D2  2B89               	incf	(sprintf@_val+1)& (0+255),f,b
  5812                           
  5813                           ; BSR set to: 0
  5814  0003D4  0100               	movlb	0	; () banked
  5815  0003D6  0100               	movlb	0	; () banked
  5816  0003D8  4B60               	infsnz	sprintf@sp& (0+255),f,b
  5817  0003DA  2B61               	incf	(sprintf@sp+1)& (0+255),f,b
  5818  0003DC                     i2l5769:
  5819                           
  5820                           ; BSR set to: 0
  5821  0003DC  0100               	movlb	0	; () banked
  5822  0003DE  0100               	movlb	0	; () banked
  5823  0003E0  078A               	decf	(sprintf@_val+2)& (0+255),f,b
  5824  0003E2  A0D8               	btfss	status,0,c
  5825  0003E4  078B               	decf	(sprintf@_val+3)& (0+255),f,b
  5826  0003E6  0100               	movlb	0	; () banked
  5827  0003E8  298A               	incf	(sprintf@_val+2)& (0+255),w,b
  5828  0003EA  B4D8               	btfsc	status,2,c
  5829  0003EC  298B               	incf	(sprintf@_val+3)& (0+255),w,b
  5830  0003EE  B4D8               	btfsc	status,2,c
  5831  0003F0  EFBE  F007         	goto	i2l6063
  5832  0003F4  D7D4               	goto	i2l5763
  5833  0003F6                     i2l5771:
  5834                           
  5835                           ; BSR set to: 0
  5836                           ;doprnt.c: 808: c = (*(int *)__va_arg((*(int **)ap), (int)0));
  5837  0003F6  C07A  FFD9         	movff	sprintf@ap,fsr2l
  5838  0003FA  C07B  FFDA         	movff	sprintf@ap+1,fsr2h
  5839  0003FE  50DF               	movf	indf2,w,c
  5840  000400  0100               	movlb	0	; () banked
  5841  000402  0100               	movlb	0	; () banked
  5842  000404  6F87               	movwf	sprintf@c& (0+255),b
  5843                           
  5844                           ; BSR set to: 0
  5845  000406  0E02               	movlw	2
  5846  000408  0100               	movlb	0	; () banked
  5847  00040A  0100               	movlb	0	; () banked
  5848  00040C  277A               	addwf	sprintf@ap& (0+255),f,b
  5849  00040E  0E00               	movlw	0
  5850  000410  0100               	movlb	0	; () banked
  5851  000412  237B               	addwfc	(sprintf@ap+1)& (0+255),f,b
  5852  000414                     i2l5775:
  5853                           
  5854                           ; BSR set to: 0
  5855                           ;doprnt.c: 814: _val._str._cp = (char *)&c;
  5856  000414  0100               	movlb	0	; () banked
  5857  000416  0E00               	movlw	high sprintf@c
  5858  000418  0100               	movlb	0	; () banked
  5859  00041A  0100               	movlb	0	; () banked
  5860  00041C  6F89               	movwf	(sprintf@_val+1)& (0+255),b
  5861  00041E  0100               	movlb	0	; () banked
  5862  000420  0E87               	movlw	low sprintf@c
  5863  000422  0100               	movlb	0	; () banked
  5864  000424  6F88               	movwf	sprintf@_val& (0+255),b
  5865                           
  5866                           ; BSR set to: 0
  5867                           ;doprnt.c: 815: _val._str._len = 1;
  5868  000426  0E00               	movlw	0
  5869  000428  0100               	movlb	0	; () banked
  5870  00042A  0100               	movlb	0	; () banked
  5871  00042C  6F8B               	movwf	(sprintf@_val+3)& (0+255),b
  5872  00042E  0E01               	movlw	1
  5873  000430  0100               	movlb	0	; () banked
  5874  000432  6F8A               	movwf	(sprintf@_val+2)& (0+255),b
  5875                           
  5876                           ;doprnt.c: 816: goto dostring;
  5877  000434  D764               	goto	i2l5745
  5878  000436                     i2l5781:
  5879  000436  0100               	movlb	0	; () banked
  5880  000438  C062  FFF6         	movff	sprintf@f,tblptrl
  5881  00043C  0100               	movlb	0	; () banked
  5882  00043E  C063  FFF7         	movff	sprintf@f+1,tblptrh
  5883  000442  0100               	movlb	0	; () banked
  5884  000444  0100               	movlb	0	; () banked
  5885  000446  4B62               	infsnz	sprintf@f& (0+255),f,b
  5886  000448  2B63               	incf	(sprintf@f+1)& (0+255),f,b
  5887  00044A  0008               	tblrd		*
  5888  00044C  0100               	movlb	0	; () banked
  5889  00044E  CFF5 F087          	movff	tablat,sprintf@c
  5890  000452  0100               	movlb	0	; () banked
  5891  000454  5187               	movf	sprintf@c& (0+255),w,b
  5892                           
  5893                           ; Switch size 1, requested type "space"
  5894                           ; Number of cases is 7, Range of values is 0 to 115
  5895                           ; switch strategies available:
  5896                           ; Name         Instructions Cycles
  5897                           ; simple_byte           22    12 (average)
  5898                           ;	Chosen strategy is simple_byte
  5899  000456  0A00               	xorlw	0	; case 0
  5900  000458  B4D8               	btfsc	status,2,c
  5901  00045A  EFD0  F007         	goto	i2l6065
  5902  00045E  0A63               	xorlw	99	; case 99
  5903  000460  B4D8               	btfsc	status,2,c
  5904  000462  D7C9               	goto	i2l5771
  5905  000464  0A07               	xorlw	7	; case 100
  5906  000466  B4D8               	btfsc	status,2,c
  5907  000468  D00D               	goto	i2l5783
  5908  00046A  0A02               	xorlw	2	; case 102
  5909  00046C  B4D8               	btfsc	status,2,c
  5910  00046E  D6FA               	goto	i2l5731
  5911  000470  0A0F               	xorlw	15	; case 105
  5912  000472  B4D8               	btfsc	status,2,c
  5913  000474  D007               	goto	i2l5783
  5914  000476  0A05               	xorlw	5	; case 108
  5915  000478  B4D8               	btfsc	status,2,c
  5916  00047A  D6F0               	goto	i2l5729
  5917  00047C  0A1F               	xorlw	31	; case 115
  5918  00047E  B4D8               	btfsc	status,2,c
  5919  000480  D6F5               	goto	i2l5733
  5920  000482  D7C8               	goto	i2l5775
  5921  000484                     i2l5783:
  5922                           
  5923                           ; BSR set to: 0
  5924                           ;doprnt.c: 834: if(flag & (0x700)) {
  5925  000484  0E07               	movlw	7
  5926  000486  0100               	movlb	0	; () banked
  5927  000488  0100               	movlb	0	; () banked
  5928  00048A  157F               	andwf	(sprintf@flag+1)& (0+255),w,b
  5929  00048C  B4D8               	btfsc	status,2,c
  5930  00048E  D39A               	goto	i2l554
  5931                           
  5932                           ; BSR set to: 0
  5933                           ;doprnt.c: 836: if(flag & 0x1000)
  5934  000490  0100               	movlb	0	; () banked
  5935  000492  0100               	movlb	0	; () banked
  5936  000494  A97F               	btfss	(sprintf@flag+1)& (0+255),4,b
  5937  000496  D007               	goto	i2l5789
  5938                           
  5939                           ; BSR set to: 0
  5940                           ;doprnt.c: 838: prec = 6;
  5941  000498  0E00               	movlw	0
  5942  00049A  0100               	movlb	0	; () banked
  5943  00049C  0100               	movlb	0	; () banked
  5944  00049E  6F86               	movwf	(sprintf@prec+1)& (0+255),b
  5945  0004A0  0E06               	movlw	6
  5946  0004A2  0100               	movlb	0	; () banked
  5947  0004A4  6F85               	movwf	sprintf@prec& (0+255),b
  5948  0004A6                     i2l5789:
  5949                           
  5950                           ; BSR set to: 0
  5951                           ;doprnt.c: 839: fval = (*(double *)__va_arg((*(double **)ap), (double)0));
  5952  0004A6  C07A  FFD9         	movff	sprintf@ap,fsr2l
  5953  0004AA  C07B  FFDA         	movff	sprintf@ap+1,fsr2h
  5954  0004AE  0100               	movlb	0	; () banked
  5955  0004B0  CFDE F080          	movff	postinc2,sprintf@fval
  5956  0004B4  0100               	movlb	0	; () banked
  5957  0004B6  CFDE F081          	movff	postinc2,sprintf@fval+1
  5958  0004BA  0100               	movlb	0	; () banked
  5959  0004BC  CFDD F082          	movff	postdec2,sprintf@fval+2
  5960                           
  5961                           ; BSR set to: 0
  5962  0004C0  0E03               	movlw	3
  5963  0004C2  0100               	movlb	0	; () banked
  5964  0004C4  0100               	movlb	0	; () banked
  5965  0004C6  277A               	addwf	sprintf@ap& (0+255),f,b
  5966  0004C8  0E00               	movlw	0
  5967  0004CA  0100               	movlb	0	; () banked
  5968  0004CC  237B               	addwfc	(sprintf@ap+1)& (0+255),f,b
  5969                           
  5970                           ; BSR set to: 0
  5971                           ;doprnt.c: 840: if(fval < 0.0) {
  5972  0004CE  0100               	movlb	0	; () banked
  5973  0004D0  0100               	movlb	0	; () banked
  5974  0004D2  5182               	movf	(sprintf@fval+2)& (0+255),w,b
  5975  0004D4  0A80               	xorlw	128
  5976  0004D6  0F80               	addlw	128
  5977  0004D8  E107               	bnz	i2u423_45
  5978  0004DA  0E00               	movlw	0
  5979  0004DC  0100               	movlb	0	; () banked
  5980  0004DE  5D81               	subwf	(sprintf@fval+1)& (0+255),w,b
  5981  0004E0  E103               	bnz	i2u423_45
  5982  0004E2  0E00               	movlw	0
  5983  0004E4  0100               	movlb	0	; () banked
  5984  0004E6  5D80               	subwf	sprintf@fval& (0+255),w,b
  5985  0004E8                     i2u423_45:
  5986  0004E8  B0D8               	btfsc	status,0,c
  5987  0004EA  D012               	goto	i2l5799
  5988                           
  5989                           ; BSR set to: 0
  5990                           ;doprnt.c: 841: fval = -fval;
  5991  0004EC  C080  F001         	movff	sprintf@fval,?___ftneg
  5992  0004F0  C081  F002         	movff	sprintf@fval+1,?___ftneg+1
  5993  0004F4  C082  F003         	movff	sprintf@fval+2,?___ftneg+2
  5994  0004F8  EC7D  F01E         	call	___ftneg	;wreg free
  5995  0004FC  C003  F082         	movff	?___ftneg+2,sprintf@fval+2
  5996  000500  C002  F081         	movff	?___ftneg+1,sprintf@fval+1
  5997  000504  C001  F080         	movff	?___ftneg,sprintf@fval
  5998                           
  5999                           ;doprnt.c: 842: flag |= 0x03;
  6000  000508  0E03               	movlw	3
  6001  00050A  0100               	movlb	0	; () banked
  6002  00050C  0100               	movlb	0	; () banked
  6003  00050E  137E               	iorwf	sprintf@flag& (0+255),f,b
  6004  000510                     i2l5799:
  6005                           
  6006                           ; BSR set to: 0
  6007                           ;doprnt.c: 843: }
  6008                           ;doprnt.c: 844: exp = 0;
  6009  000510  0E00               	movlw	0
  6010  000512  0100               	movlb	0	; () banked
  6011  000514  0100               	movlb	0	; () banked
  6012  000516  6F7D               	movwf	(sprintf@exp+1)& (0+255),b
  6013  000518  0E00               	movlw	0
  6014  00051A  0100               	movlb	0	; () banked
  6015  00051C  6F7C               	movwf	sprintf@exp& (0+255),b
  6016                           
  6017                           ; BSR set to: 0
  6018                           ;doprnt.c: 845: if( fval!=0) {
  6019  00051E  0E7F               	movlw	127
  6020  000520  0100               	movlb	0	; () banked
  6021  000522  0100               	movlb	0	; () banked
  6022  000524  1582               	andwf	(sprintf@fval+2)& (0+255),w,b
  6023  000526  0100               	movlb	0	; () banked
  6024  000528  1181               	iorwf	(sprintf@fval+1)& (0+255),w,b
  6025  00052A  0100               	movlb	0	; () banked
  6026  00052C  1180               	iorwf	sprintf@fval& (0+255),w,b
  6027  00052E  B4D8               	btfsc	status,2,c
  6028  000530  D091               	goto	i2l5827
  6029                           
  6030                           ; BSR set to: 0
  6031                           ;doprnt.c: 846: (void)(*(&exp) = ((*(unsigned long *)&fval >> 15) & 255) - 126);
  6032  000532  0E82               	movlw	130
  6033  000534  6E58               	movwf	??_sprintf& (0+255),c
  6034  000536  0EFF               	movlw	255
  6035  000538  6E59               	movwf	(??_sprintf+1)& (0+255),c
  6036  00053A  0100               	movlb	0	; () banked
  6037  00053C  C080  F05A         	movff	sprintf@fval,??_sprintf+2
  6038  000540  0100               	movlb	0	; () banked
  6039  000542  C081  F05B         	movff	sprintf@fval+1,??_sprintf+3
  6040  000546  0100               	movlb	0	; () banked
  6041  000548  C082  F05C         	movff	sprintf@fval+2,??_sprintf+4
  6042  00054C  0100               	movlb	0	; () banked
  6043  00054E  C083  F05D         	movff	sprintf@fval+3,??_sprintf+5
  6044  000552  0E10               	movlw	16
  6045  000554  D005               	goto	i2u425_40
  6046  000556                     i2u425_45:
  6047  000556  90D8               	bcf	status,0,c
  6048  000558  325D               	rrcf	??_sprintf+5,f,c
  6049  00055A  325C               	rrcf	??_sprintf+4,f,c
  6050  00055C  325B               	rrcf	??_sprintf+3,f,c
  6051  00055E  325A               	rrcf	??_sprintf+2,f,c
  6052  000560                     i2u425_40:
  6053  000560  2EE8               	decfsz	wreg,f,c
  6054  000562  D7F9               	goto	i2u425_45
  6055  000564  505A               	movf	??_sprintf+2,w,c
  6056  000566  2458               	addwf	??_sprintf,w,c
  6057  000568  0100               	movlb	0	; () banked
  6058  00056A  0100               	movlb	0	; () banked
  6059  00056C  6F7C               	movwf	sprintf@exp& (0+255),b
  6060  00056E  0100               	movlb	0	; () banked
  6061  000570  0E00               	movlw	0
  6062  000572  2059               	addwfc	??_sprintf+1,w,c
  6063  000574  6F7D               	movwf	(sprintf@exp+1)& (0+255),b
  6064                           
  6065                           ; BSR set to: 0
  6066                           ;doprnt.c: 847: exp--;
  6067  000576  0100               	movlb	0	; () banked
  6068  000578  0100               	movlb	0	; () banked
  6069  00057A  077C               	decf	sprintf@exp& (0+255),f,b
  6070  00057C  A0D8               	btfss	status,0,c
  6071  00057E  077D               	decf	(sprintf@exp+1)& (0+255),f,b
  6072                           
  6073                           ; BSR set to: 0
  6074                           ;doprnt.c: 848: exp *= 3;
  6075  000580  C07C  F017         	movff	sprintf@exp,?___wmul
  6076  000584  C07D  F018         	movff	sprintf@exp+1,?___wmul+1
  6077  000588  0E00               	movlw	0
  6078  00058A  6E1A               	movwf	?___wmul+3,c
  6079  00058C  0E03               	movlw	3
  6080  00058E  6E19               	movwf	?___wmul+2,c
  6081  000590  ECEF  F01D         	call	___wmul	;wreg free
  6082  000594  C017  F07C         	movff	?___wmul,sprintf@exp
  6083  000598  C018  F07D         	movff	?___wmul+1,sprintf@exp+1
  6084                           
  6085                           ;doprnt.c: 849: exp /= 10;
  6086  00059C  C07C  F00A         	movff	sprintf@exp,?___awdiv
  6087  0005A0  C07D  F00B         	movff	sprintf@exp+1,?___awdiv+1
  6088  0005A4  0E00               	movlw	0
  6089  0005A6  6E0D               	movwf	?___awdiv+3,c
  6090  0005A8  0E0A               	movlw	10
  6091  0005AA  6E0C               	movwf	?___awdiv+2,c
  6092  0005AC  EC7D  F01A         	call	___awdiv	;wreg free
  6093  0005B0  C00A  F07C         	movff	?___awdiv,sprintf@exp
  6094  0005B4  C00B  F07D         	movff	?___awdiv+1,sprintf@exp+1
  6095                           
  6096                           ;doprnt.c: 850: if(exp < 0)
  6097  0005B8  0100               	movlb	0	; () banked
  6098  0005BA  0100               	movlb	0	; () banked
  6099  0005BC  AF7D               	btfss	(sprintf@exp+1)& (0+255),7,b
  6100  0005BE  D005               	goto	i2l5815
  6101                           
  6102                           ; BSR set to: 0
  6103                           ;doprnt.c: 851: exp--;
  6104  0005C0  0100               	movlb	0	; () banked
  6105  0005C2  0100               	movlb	0	; () banked
  6106  0005C4  077C               	decf	sprintf@exp& (0+255),f,b
  6107  0005C6  A0D8               	btfss	status,0,c
  6108  0005C8  077D               	decf	(sprintf@exp+1)& (0+255),f,b
  6109  0005CA                     i2l5815:
  6110                           
  6111                           ; BSR set to: 0
  6112                           ;doprnt.c: 855: integ = scale(-exp);
  6113  0005CA  0100               	movlb	0	; () banked
  6114  0005CC  0100               	movlb	0	; () banked
  6115  0005CE  517C               	movf	sprintf@exp& (0+255),w,b
  6116  0005D0  0800               	sublw	0
  6117  0005D2  6E3F               	movwf	?_scale,c
  6118  0005D4  EC1B  F00A         	call	_scale	;wreg free
  6119  0005D8  C041  F079         	movff	?_scale+2,sprintf@integ+2
  6120  0005DC  C040  F078         	movff	?_scale+1,sprintf@integ+1
  6121  0005E0  C03F  F077         	movff	?_scale,sprintf@integ
  6122                           
  6123                           ;doprnt.c: 856: integ *= fval;
  6124  0005E4  0100               	movlb	0	; () banked
  6125  0005E6  0E00               	movlw	high sprintf@integ
  6126  0005E8  6E40               	movwf	?___asftmul+1,c
  6127  0005EA  0100               	movlb	0	; () banked
  6128  0005EC  0E77               	movlw	low sprintf@integ
  6129  0005EE  6E3F               	movwf	?___asftmul,c
  6130  0005F0  C080  F041         	movff	sprintf@fval,?___asftmul+2
  6131  0005F4  C081  F042         	movff	sprintf@fval+1,?___asftmul+3
  6132  0005F8  C082  F043         	movff	sprintf@fval+2,?___asftmul+4
  6133  0005FC  EC96  F01D         	call	___asftmul	;wreg free
  6134                           
  6135                           ;doprnt.c: 857: if(integ < 1.0)
  6136  000600  C077  F001         	movff	sprintf@integ,?___ftge
  6137  000604  C078  F002         	movff	sprintf@integ+1,?___ftge+1
  6138  000608  C079  F003         	movff	sprintf@integ+2,?___ftge+2
  6139  00060C  0E00               	movlw	0
  6140  00060E  6E04               	movwf	?___ftge+3,c
  6141  000610  0E80               	movlw	128
  6142  000612  6E05               	movwf	?___ftge+4,c
  6143  000614  0E3F               	movlw	63
  6144  000616  6E06               	movwf	?___ftge+5,c
  6145  000618  EC35  F01A         	call	___ftge	;wreg free
  6146  00061C  B0D8               	btfsc	status,0,c
  6147  00061E  D006               	goto	i2l5823
  6148                           
  6149                           ;doprnt.c: 858: exp--;
  6150  000620  0100               	movlb	0	; () banked
  6151  000622  0100               	movlb	0	; () banked
  6152  000624  077C               	decf	sprintf@exp& (0+255),f,b
  6153  000626  A0D8               	btfss	status,0,c
  6154  000628  077D               	decf	(sprintf@exp+1)& (0+255),f,b
  6155  00062A  D014               	goto	i2l5827
  6156  00062C                     i2l5823:
  6157                           
  6158                           ;doprnt.c: 859: else if(integ >= 10.0)
  6159  00062C  C077  F001         	movff	sprintf@integ,?___ftge
  6160  000630  C078  F002         	movff	sprintf@integ+1,?___ftge+1
  6161  000634  C079  F003         	movff	sprintf@integ+2,?___ftge+2
  6162  000638  0E00               	movlw	0
  6163  00063A  6E04               	movwf	?___ftge+3,c
  6164  00063C  0E20               	movlw	32
  6165  00063E  6E05               	movwf	?___ftge+4,c
  6166  000640  0E41               	movlw	65
  6167  000642  6E06               	movwf	?___ftge+5,c
  6168  000644  EC35  F01A         	call	___ftge	;wreg free
  6169  000648  A0D8               	btfss	status,0,c
  6170  00064A  D004               	goto	i2l5827
  6171                           
  6172                           ;doprnt.c: 860: exp++;
  6173  00064C  0100               	movlb	0	; () banked
  6174  00064E  0100               	movlb	0	; () banked
  6175  000650  4B7C               	infsnz	sprintf@exp& (0+255),f,b
  6176  000652  2B7D               	incf	(sprintf@exp+1)& (0+255),f,b
  6177  000654                     i2l5827:
  6178                           
  6179                           ;doprnt.c: 861: }
  6180                           ;doprnt.c: 1121: if(prec <= 12)
  6181  000654  0100               	movlb	0	; () banked
  6182  000656  0100               	movlb	0	; () banked
  6183  000658  5186               	movf	(sprintf@prec+1)& (0+255),w,b
  6184  00065A  0A80               	xorlw	128
  6185  00065C  0F80               	addlw	-128
  6186  00065E  0E0D               	movlw	13
  6187  000660  B4D8               	btfsc	status,2,c
  6188  000662  5D85               	subwf	sprintf@prec& (0+255),w,b
  6189  000664  B0D8               	btfsc	status,0,c
  6190  000666  D012               	goto	i2l5831
  6191                           
  6192                           ; BSR set to: 0
  6193                           ;doprnt.c: 1122: fval += fround(prec);
  6194  000668  0100               	movlb	0	; () banked
  6195  00066A  0E00               	movlw	high sprintf@fval
  6196  00066C  6E4F               	movwf	?___asftadd+1,c
  6197  00066E  0100               	movlb	0	; () banked
  6198  000670  0E80               	movlw	low sprintf@fval
  6199  000672  6E4E               	movwf	?___asftadd,c
  6200  000674  C085  F03F         	movff	sprintf@prec,?_fround
  6201  000678  ECE6  F00D         	call	_fround	;wreg free
  6202  00067C  C041  F052         	movff	?_fround+2,?___asftadd+4
  6203  000680  C040  F051         	movff	?_fround+1,?___asftadd+3
  6204  000684  C03F  F050         	movff	?_fround,?___asftadd+2
  6205  000688  ECB4  F01D         	call	___asftadd	;wreg free
  6206  00068C                     i2l5831:
  6207                           
  6208                           ;doprnt.c: 1125: if((exp > 9)||(fval != 0 && (unsigned long)fval == 0 && exp > 1)) {
  6209  00068C  0100               	movlb	0	; () banked
  6210  00068E  0100               	movlb	0	; () banked
  6211  000690  517D               	movf	(sprintf@exp+1)& (0+255),w,b
  6212  000692  0A80               	xorlw	128
  6213  000694  0F80               	addlw	-128
  6214  000696  0E0A               	movlw	10
  6215  000698  B4D8               	btfsc	status,2,c
  6216  00069A  5D7C               	subwf	sprintf@exp& (0+255),w,b
  6217  00069C  B0D8               	btfsc	status,0,c
  6218  00069E  D022               	goto	i2l5839
  6219                           
  6220                           ; BSR set to: 0
  6221  0006A0  0E7F               	movlw	127
  6222  0006A2  0100               	movlb	0	; () banked
  6223  0006A4  0100               	movlb	0	; () banked
  6224  0006A6  1582               	andwf	(sprintf@fval+2)& (0+255),w,b
  6225  0006A8  0100               	movlb	0	; () banked
  6226  0006AA  1181               	iorwf	(sprintf@fval+1)& (0+255),w,b
  6227  0006AC  0100               	movlb	0	; () banked
  6228  0006AE  1180               	iorwf	sprintf@fval& (0+255),w,b
  6229  0006B0  B4D8               	btfsc	status,2,c
  6230  0006B2  D067               	goto	i2l5855
  6231                           
  6232                           ; BSR set to: 0
  6233  0006B4  C080  F01F         	movff	sprintf@fval,?___fttol
  6234  0006B8  C081  F020         	movff	sprintf@fval+1,?___fttol+1
  6235  0006BC  C082  F021         	movff	sprintf@fval+2,?___fttol+2
  6236  0006C0  ECBF  F017         	call	___fttol	;wreg free
  6237  0006C4  5022               	movf	?___fttol+3,w,c
  6238  0006C6  101F               	iorwf	?___fttol,w,c
  6239  0006C8  1020               	iorwf	?___fttol+1,w,c
  6240  0006CA  1021               	iorwf	?___fttol+2,w,c
  6241  0006CC  A4D8               	btfss	status,2,c
  6242  0006CE  D059               	goto	i2l5855
  6243  0006D0  0100               	movlb	0	; () banked
  6244  0006D2  0100               	movlb	0	; () banked
  6245  0006D4  517D               	movf	(sprintf@exp+1)& (0+255),w,b
  6246  0006D6  0A80               	xorlw	128
  6247  0006D8  0F80               	addlw	-128
  6248  0006DA  0E02               	movlw	2
  6249  0006DC  B4D8               	btfsc	status,2,c
  6250  0006DE  5D7C               	subwf	sprintf@exp& (0+255),w,b
  6251  0006E0  A0D8               	btfss	status,0,c
  6252  0006E2  D04F               	goto	i2l5855
  6253  0006E4                     i2l5839:
  6254                           
  6255                           ; BSR set to: 0
  6256                           ;doprnt.c: 1129: if(integ < 4.294967296){
  6257  0006E4  C077  F001         	movff	sprintf@integ,?___ftge
  6258  0006E8  C078  F002         	movff	sprintf@integ+1,?___ftge+1
  6259  0006EC  C079  F003         	movff	sprintf@integ+2,?___ftge+2
  6260  0006F0  0E70               	movlw	112
  6261  0006F2  6E04               	movwf	?___ftge+3,c
  6262  0006F4  0E89               	movlw	137
  6263  0006F6  6E05               	movwf	?___ftge+4,c
  6264  0006F8  0E40               	movlw	64
  6265  0006FA  6E06               	movwf	?___ftge+5,c
  6266  0006FC  EC35  F01A         	call	___ftge	;wreg free
  6267  000700  B0D8               	btfsc	status,0,c
  6268  000702  D003               	goto	i2l5843
  6269                           
  6270                           ;doprnt.c: 1130: exp -= (sizeof dpowers/sizeof dpowers[0])-1;
  6271  000704  0100               	movlb	0	; () banked
  6272  000706  0EF7               	movlw	247
  6273  000708  D002               	goto	L5
  6274  00070A                     i2l5843:
  6275                           
  6276                           ;doprnt.c: 1132: exp -= (sizeof dpowers/sizeof dpowers[0])-2;
  6277  00070A  0100               	movlb	0	; () banked
  6278  00070C  0EF8               	movlw	248
  6279  00070E                     L5:
  6280  00070E  0100               	movlb	0	; () banked
  6281  000710  277C               	addwf	sprintf@exp& (0+255),f,b
  6282  000712  0EFF               	movlw	255
  6283  000714  0100               	movlb	0	; () banked
  6284  000716  237D               	addwfc	(sprintf@exp+1)& (0+255),f,b
  6285                           
  6286                           ; BSR set to: 0
  6287                           ;doprnt.c: 1133: }
  6288                           ;doprnt.c: 1134: integ = scale(exp);
  6289                           
  6290                           ; BSR set to: 0
  6291  000718  C07C  F03F         	movff	sprintf@exp,?_scale
  6292  00071C  EC1B  F00A         	call	_scale	;wreg free
  6293  000720  C041  F079         	movff	?_scale+2,sprintf@integ+2
  6294  000724  C040  F078         	movff	?_scale+1,sprintf@integ+1
  6295  000728  C03F  F077         	movff	?_scale,sprintf@integ
  6296                           
  6297                           ;doprnt.c: 1135: _val._val = ((sizeof(double)== 3) ? _tdiv_to_l_(fval,integ) : _div_to_l
      +                          _(fval,integ));
  6298  00072C  C080  F001         	movff	sprintf@fval,?__tdiv_to_l_
  6299  000730  C081  F002         	movff	sprintf@fval+1,?__tdiv_to_l_+1
  6300  000734  C082  F003         	movff	sprintf@fval+2,?__tdiv_to_l_+2
  6301  000738  C077  F004         	movff	sprintf@integ,?__tdiv_to_l_+3
  6302  00073C  C078  F005         	movff	sprintf@integ+1,?__tdiv_to_l_+4
  6303  000740  C079  F006         	movff	sprintf@integ+2,?__tdiv_to_l_+5
  6304  000744  EC33  F015         	call	__tdiv_to_l_	;wreg free
  6305  000748  C004  F072         	movff	?__tdiv_to_l_+3,_sprintf$639+3
  6306  00074C  C003  F071         	movff	?__tdiv_to_l_+2,_sprintf$639+2
  6307  000750  C002  F070         	movff	?__tdiv_to_l_+1,_sprintf$639+1
  6308  000754  C001  F06F         	movff	?__tdiv_to_l_,_sprintf$639
  6309  000758  C06F  F088         	movff	_sprintf$639,sprintf@_val
  6310  00075C  C070  F089         	movff	_sprintf$639+1,sprintf@_val+1
  6311  000760  C071  F08A         	movff	_sprintf$639+2,sprintf@_val+2
  6312  000764  C072  F08B         	movff	_sprintf$639+3,sprintf@_val+3
  6313                           
  6314                           ;doprnt.c: 1138: fval = 0.0;
  6315  000768  0E00               	movlw	0
  6316  00076A  0100               	movlb	0	; () banked
  6317  00076C  0100               	movlb	0	; () banked
  6318  00076E  6F80               	movwf	sprintf@fval& (0+255),b
  6319  000770  0E00               	movlw	0
  6320  000772  0100               	movlb	0	; () banked
  6321  000774  0100               	movlb	0	; () banked
  6322  000776  6F81               	movwf	(sprintf@fval+1)& (0+255),b
  6323  000778  0E00               	movlw	0
  6324  00077A  0100               	movlb	0	; () banked
  6325  00077C  0100               	movlb	0	; () banked
  6326  00077E  6F82               	movwf	(sprintf@fval+2)& (0+255),b
  6327                           
  6328                           ;doprnt.c: 1139: } else {
  6329  000780  D02F               	goto	i2l5861
  6330  000782                     i2l5855:
  6331                           
  6332                           ;doprnt.c: 1140: _val._val = (unsigned long)fval;
  6333  000782  C080  F01F         	movff	sprintf@fval,?___fttol
  6334  000786  C081  F020         	movff	sprintf@fval+1,?___fttol+1
  6335  00078A  C082  F021         	movff	sprintf@fval+2,?___fttol+2
  6336  00078E  ECBF  F017         	call	___fttol	;wreg free
  6337  000792  C022  F08B         	movff	?___fttol+3,sprintf@_val+3
  6338  000796  C021  F08A         	movff	?___fttol+2,sprintf@_val+2
  6339  00079A  C020  F089         	movff	?___fttol+1,sprintf@_val+1
  6340  00079E  C01F  F088         	movff	?___fttol,sprintf@_val
  6341                           
  6342                           ;doprnt.c: 1141: fval -= (double)_val._val;
  6343  0007A2  0100               	movlb	0	; () banked
  6344  0007A4  0E00               	movlw	high sprintf@fval
  6345  0007A6  6E54               	movwf	?___asftsub+1,c
  6346  0007A8  0100               	movlb	0	; () banked
  6347  0007AA  0E80               	movlw	low sprintf@fval
  6348  0007AC  6E53               	movwf	?___asftsub,c
  6349  0007AE  C088  F009         	movff	sprintf@_val,?___lltoft
  6350  0007B2  C089  F00A         	movff	sprintf@_val+1,?___lltoft+1
  6351  0007B6  C08A  F00B         	movff	sprintf@_val+2,?___lltoft+2
  6352  0007BA  C08B  F00C         	movff	sprintf@_val+3,?___lltoft+3
  6353  0007BE  EC5D  F01C         	call	___lltoft	;wreg free
  6354  0007C2  C00B  F057         	movff	?___lltoft+2,?___asftsub+4
  6355  0007C6  C00A  F056         	movff	?___lltoft+1,?___asftsub+3
  6356  0007CA  C009  F055         	movff	?___lltoft,?___asftsub+2
  6357  0007CE  EC78  F01D         	call	___asftsub	;wreg free
  6358                           
  6359                           ;doprnt.c: 1142: exp = 0;
  6360  0007D2  0E00               	movlw	0
  6361  0007D4  0100               	movlb	0	; () banked
  6362  0007D6  0100               	movlb	0	; () banked
  6363  0007D8  6F7D               	movwf	(sprintf@exp+1)& (0+255),b
  6364  0007DA  0E00               	movlw	0
  6365  0007DC  0100               	movlb	0	; () banked
  6366  0007DE  6F7C               	movwf	sprintf@exp& (0+255),b
  6367  0007E0                     i2l5861:
  6368                           
  6369                           ; BSR set to: 0
  6370                           ;doprnt.c: 1143: }
  6371                           ;doprnt.c: 1145: for(c = 1 ; c != (sizeof dpowers/sizeof dpowers[0]) ; c++)
  6372  0007E0  6E58               	movwf	??_sprintf& (0+255),c
  6373  0007E2  0E01               	movlw	1
  6374  0007E4  0100               	movlb	0	; () banked
  6375  0007E6  0100               	movlb	0	; () banked
  6376  0007E8  6F87               	movwf	sprintf@c& (0+255),b
  6377  0007EA  5058               	movf	??_sprintf& (0+255),w,c
  6378  0007EC                     
  6379                           ; BSR set to: 0
  6380  0007EC  0100               	movlb	0	; () banked
  6381  0007EE  0100               	movlb	0	; () banked
  6382  0007F0  5187               	movf	sprintf@c& (0+255),w,b
  6383  0007F2  0A0A               	xorlw	10
  6384  0007F4  B4D8               	btfsc	status,2,c
  6385  0007F6  D021               	goto	i2l5875
  6386                           
  6387                           ; BSR set to: 0
  6388                           ;doprnt.c: 1146: if(_val._val < dpowers[c])
  6389                           
  6390                           ; BSR set to: 0
  6391                           
  6392                           ; BSR set to: 0
  6393  0007F8  0100               	movlb	0	; () banked
  6394  0007FA  0100               	movlb	0	; () banked
  6395  0007FC  5187               	movf	sprintf@c& (0+255),w,b
  6396  0007FE  0D04               	mullw	4
  6397  000800  0EF7               	movlw	low _dpowers
  6398  000802  24F3               	addwf	prodl,w,c
  6399  000804  6EF6               	movwf	tblptrl,c
  6400  000806  0E7E               	movlw	high _dpowers
  6401  000808  20F4               	addwfc	prodh,w,c
  6402  00080A  6EF7               	movwf	tblptrh,c
  6403  00080C  0009               	tblrd		*+
  6404  00080E  50F5               	movf	tablat,w,c
  6405  000810  0100               	movlb	0	; () banked
  6406  000812  0100               	movlb	0	; () banked
  6407  000814  5D88               	subwf	sprintf@_val& (0+255),w,b
  6408  000816  0009               	tblrd		*+
  6409  000818  50F5               	movf	tablat,w,c
  6410  00081A  0100               	movlb	0	; () banked
  6411  00081C  5989               	subwfb	(sprintf@_val+1)& (0+255),w,b
  6412  00081E  0009               	tblrd		*+
  6413  000820  50F5               	movf	tablat,w,c
  6414  000822  0100               	movlb	0	; () banked
  6415  000824  598A               	subwfb	(sprintf@_val+2)& (0+255),w,b
  6416  000826  0009               	tblrd		*+
  6417  000828  50F5               	movf	tablat,w,c
  6418  00082A  0100               	movlb	0	; () banked
  6419  00082C  598B               	subwfb	(sprintf@_val+3)& (0+255),w,b
  6420  00082E  A0D8               	btfss	status,0,c
  6421  000830  D004               	goto	i2l5875
  6422                           
  6423                           ; BSR set to: 0
  6424                           
  6425                           ; BSR set to: 0
  6426                           
  6427                           ; BSR set to: 0
  6428                           ;doprnt.c: 1147: break;
  6429  000832  0100               	movlb	0	; () banked
  6430  000834  0100               	movlb	0	; () banked
  6431  000836  2B87               	incf	sprintf@c& (0+255),f,b
  6432  000838  D7D9               	goto	L6
  6433  00083A                     i2l5875:
  6434                           
  6435                           ; BSR set to: 0
  6436                           ;doprnt.c: 1151: width -= prec + c + exp;
  6437  00083A  0100               	movlb	0	; () banked
  6438  00083C  C087  F058         	movff	sprintf@c,??_sprintf
  6439  000840  6A59               	clrf	(??_sprintf+1)& (0+255),c
  6440  000842  BE58               	btfsc	??_sprintf& (0+255),7,c
  6441  000844  0659               	decf	(??_sprintf+1)& (0+255),f,c
  6442  000846  0100               	movlb	0	; () banked
  6443  000848  0100               	movlb	0	; () banked
  6444  00084A  5185               	movf	sprintf@prec& (0+255),w,b
  6445  00084C  2658               	addwf	??_sprintf,f,c
  6446  00084E  0100               	movlb	0	; () banked
  6447  000850  0100               	movlb	0	; () banked
  6448  000852  5186               	movf	(sprintf@prec+1)& (0+255),w,b
  6449  000854  2259               	addwfc	??_sprintf+1,f,c
  6450  000856  0100               	movlb	0	; () banked
  6451  000858  0100               	movlb	0	; () banked
  6452  00085A  517C               	movf	sprintf@exp& (0+255),w,b
  6453  00085C  2658               	addwf	??_sprintf,f,c
  6454  00085E  0100               	movlb	0	; () banked
  6455  000860  0100               	movlb	0	; () banked
  6456  000862  517D               	movf	(sprintf@exp+1)& (0+255),w,b
  6457  000864  2259               	addwfc	??_sprintf+1,f,c
  6458  000866  5058               	movf	??_sprintf,w,c
  6459  000868  0100               	movlb	0	; () banked
  6460  00086A  0100               	movlb	0	; () banked
  6461  00086C  5F83               	subwf	sprintf@width& (0+255),f,b
  6462  00086E  5059               	movf	??_sprintf+1,w,c
  6463  000870  0100               	movlb	0	; () banked
  6464  000872  0100               	movlb	0	; () banked
  6465  000874  5B84               	subwfb	(sprintf@width+1)& (0+255),f,b
  6466                           
  6467                           ;doprnt.c: 1152: if(
  6468                           ;doprnt.c: 1156: prec)
  6469  000876  0100               	movlb	0	; () banked
  6470  000878  0100               	movlb	0	; () banked
  6471  00087A  5186               	movf	(sprintf@prec+1)& (0+255),w,b
  6472  00087C  1185               	iorwf	sprintf@prec& (0+255),w,b
  6473  00087E  B4D8               	btfsc	status,2,c
  6474  000880  D005               	goto	i2l5879
  6475                           
  6476                           ; BSR set to: 0
  6477                           ;doprnt.c: 1157: width--;
  6478  000882  0100               	movlb	0	; () banked
  6479  000884  0100               	movlb	0	; () banked
  6480  000886  0783               	decf	sprintf@width& (0+255),f,b
  6481  000888  A0D8               	btfss	status,0,c
  6482  00088A  0784               	decf	(sprintf@width+1)& (0+255),f,b
  6483  00088C                     i2l5879:
  6484                           
  6485                           ; BSR set to: 0
  6486                           ;doprnt.c: 1158: if(flag & 0x03)
  6487  00088C  0E03               	movlw	3
  6488  00088E  0100               	movlb	0	; () banked
  6489  000890  0100               	movlb	0	; () banked
  6490  000892  157E               	andwf	sprintf@flag& (0+255),w,b
  6491  000894  6E58               	movwf	??_sprintf& (0+255),c
  6492  000896  0E00               	movlw	0
  6493  000898  0100               	movlb	0	; () banked
  6494  00089A  0100               	movlb	0	; () banked
  6495  00089C  157F               	andwf	(sprintf@flag+1)& (0+255),w,b
  6496  00089E  6E59               	movwf	(??_sprintf+1)& (0+255),c
  6497  0008A0  5059               	movf	??_sprintf+1,w,c
  6498  0008A2  1058               	iorwf	??_sprintf,w,c
  6499  0008A4  B4D8               	btfsc	status,2,c
  6500  0008A6  D005               	goto	i2l5883
  6501                           
  6502                           ; BSR set to: 0
  6503                           ;doprnt.c: 1159: width--;
  6504  0008A8  0100               	movlb	0	; () banked
  6505  0008AA  0100               	movlb	0	; () banked
  6506  0008AC  0783               	decf	sprintf@width& (0+255),f,b
  6507  0008AE  A0D8               	btfss	status,0,c
  6508  0008B0  0784               	decf	(sprintf@width+1)& (0+255),f,b
  6509  0008B2                     i2l5883:
  6510                           
  6511                           ; BSR set to: 0
  6512                           ;doprnt.c: 1162: if(flag & 0x04) {
  6513  0008B2  0100               	movlb	0	; () banked
  6514  0008B4  0100               	movlb	0	; () banked
  6515  0008B6  B57E               	btfsc	sprintf@flag& (0+255),2,b
  6516  0008B8  D010               	goto	i2l5893
  6517  0008BA  D029               	goto	i2l5901
  6518  0008BC                     i2l5887:
  6519                           
  6520                           ; BSR set to: 0
  6521                           ;doprnt.c: 1176: ((*sp++ = ('0')));
  6522  0008BC  C060  FFD9         	movff	sprintf@sp,fsr2l
  6523  0008C0  C061  FFDA         	movff	sprintf@sp+1,fsr2h
  6524  0008C4  0E30               	movlw	48
  6525  0008C6  6EDF               	movwf	indf2,c
  6526                           
  6527                           ; BSR set to: 0
  6528  0008C8  0100               	movlb	0	; () banked
  6529  0008CA  0100               	movlb	0	; () banked
  6530  0008CC  4B60               	infsnz	sprintf@sp& (0+255),f,b
  6531  0008CE  2B61               	incf	(sprintf@sp+1)& (0+255),f,b
  6532                           
  6533                           ; BSR set to: 0
  6534                           ;doprnt.c: 1177: width--;
  6535  0008D0  0100               	movlb	0	; () banked
  6536  0008D2  0100               	movlb	0	; () banked
  6537  0008D4  0783               	decf	sprintf@width& (0+255),f,b
  6538  0008D6  A0D8               	btfss	status,0,c
  6539  0008D8  0784               	decf	(sprintf@width+1)& (0+255),f,b
  6540  0008DA                     i2l5893:
  6541                           
  6542                           ; BSR set to: 0
  6543  0008DA  0100               	movlb	0	; () banked
  6544  0008DC  0100               	movlb	0	; () banked
  6545  0008DE  5184               	movf	(sprintf@width+1)& (0+255),w,b
  6546  0008E0  0A80               	xorlw	128
  6547  0008E2  0F80               	addlw	-128
  6548  0008E4  0E01               	movlw	1
  6549  0008E6  B4D8               	btfsc	status,2,c
  6550  0008E8  5D83               	subwf	sprintf@width& (0+255),w,b
  6551  0008EA  A0D8               	btfss	status,0,c
  6552  0008EC  D06D               	goto	i2l5917
  6553  0008EE  D7E6               	goto	i2l5887
  6554  0008F0                     i2l5895:
  6555                           
  6556                           ; BSR set to: 0
  6557                           ;doprnt.c: 1188: ((*sp++ = (' ')));
  6558  0008F0  C060  FFD9         	movff	sprintf@sp,fsr2l
  6559  0008F4  C061  FFDA         	movff	sprintf@sp+1,fsr2h
  6560  0008F8  0E20               	movlw	32
  6561  0008FA  6EDF               	movwf	indf2,c
  6562                           
  6563                           ; BSR set to: 0
  6564  0008FC  0100               	movlb	0	; () banked
  6565  0008FE  0100               	movlb	0	; () banked
  6566  000900  4B60               	infsnz	sprintf@sp& (0+255),f,b
  6567  000902  2B61               	incf	(sprintf@sp+1)& (0+255),f,b
  6568                           
  6569                           ; BSR set to: 0
  6570                           ;doprnt.c: 1189: width--;
  6571  000904  0100               	movlb	0	; () banked
  6572  000906  0100               	movlb	0	; () banked
  6573  000908  0783               	decf	sprintf@width& (0+255),f,b
  6574  00090A  A0D8               	btfss	status,0,c
  6575  00090C  0784               	decf	(sprintf@width+1)& (0+255),f,b
  6576  00090E                     i2l5901:
  6577                           
  6578                           ; BSR set to: 0
  6579  00090E  0100               	movlb	0	; () banked
  6580  000910  0100               	movlb	0	; () banked
  6581  000912  5184               	movf	(sprintf@width+1)& (0+255),w,b
  6582  000914  0A80               	xorlw	128
  6583  000916  0F80               	addlw	-128
  6584  000918  0E01               	movlw	1
  6585  00091A  B4D8               	btfsc	status,2,c
  6586  00091C  5D83               	subwf	sprintf@width& (0+255),w,b
  6587  00091E  B0D8               	btfsc	status,0,c
  6588  000920  D7E7               	goto	i2l5895
  6589                           
  6590                           ; BSR set to: 0
  6591                           ;doprnt.c: 1190: }
  6592                           ;doprnt.c: 1195: if(flag & 0x03)
  6593                           
  6594                           ; BSR set to: 0
  6595  000922  0E03               	movlw	3
  6596  000924  0100               	movlb	0	; () banked
  6597  000926  0100               	movlb	0	; () banked
  6598  000928  157E               	andwf	sprintf@flag& (0+255),w,b
  6599  00092A  6E58               	movwf	??_sprintf& (0+255),c
  6600  00092C  0E00               	movlw	0
  6601  00092E  0100               	movlb	0	; () banked
  6602  000930  0100               	movlb	0	; () banked
  6603  000932  157F               	andwf	(sprintf@flag+1)& (0+255),w,b
  6604  000934  6E59               	movwf	(??_sprintf+1)& (0+255),c
  6605  000936  5059               	movf	??_sprintf+1,w,c
  6606  000938  1058               	iorwf	??_sprintf,w,c
  6607  00093A  B4D8               	btfsc	status,2,c
  6608  00093C  D045               	goto	i2l5917
  6609                           
  6610                           ; BSR set to: 0
  6611                           ;doprnt.c: 1197: ((*sp++ = ('-')));
  6612  00093E  C060  FFD9         	movff	sprintf@sp,fsr2l
  6613  000942  C061  FFDA         	movff	sprintf@sp+1,fsr2h
  6614  000946  0E2D               	movlw	45
  6615  000948  D03A               	goto	L7
  6616  00094A                     i2l5909:
  6617                           
  6618                           ; BSR set to: 0
  6619                           ;doprnt.c: 1207: {
  6620                           ;doprnt.c: 1208: unsigned vd = _val._val/dpowers[c];
  6621  00094A  C088  F001         	movff	sprintf@_val,?___lldiv
  6622  00094E  C089  F002         	movff	sprintf@_val+1,?___lldiv+1
  6623  000952  C08A  F003         	movff	sprintf@_val+2,?___lldiv+2
  6624  000956  C08B  F004         	movff	sprintf@_val+3,?___lldiv+3
  6625  00095A  0100               	movlb	0	; () banked
  6626  00095C  0100               	movlb	0	; () banked
  6627  00095E  5187               	movf	sprintf@c& (0+255),w,b
  6628  000960  0D04               	mullw	4
  6629  000962  0EF7               	movlw	low _dpowers
  6630  000964  24F3               	addwf	prodl,w,c
  6631  000966  6EF6               	movwf	tblptrl,c
  6632  000968  0E7E               	movlw	high _dpowers
  6633  00096A  20F4               	addwfc	prodh,w,c
  6634  00096C  6EF7               	movwf	tblptrh,c
  6635  00096E  0009               	tblrd		*+
  6636  000970  CFF5 F005          	movff	tablat,?___lldiv+4
  6637  000974  0009               	tblrd		*+
  6638  000976  CFF5 F006          	movff	tablat,?___lldiv+5
  6639  00097A  0009               	tblrd		*+
  6640  00097C  CFF5 F007          	movff	tablat,?___lldiv+6
  6641  000980  000A               	tblrd		*-
  6642  000982  CFF5 F008          	movff	tablat,?___lldiv+7
  6643  000986  ECC5  F01A         	call	___lldiv	;wreg free
  6644  00098A  C001  F073         	movff	?___lldiv,sprintf@vd
  6645  00098E  C002  F074         	movff	?___lldiv+1,sprintf@vd+1
  6646                           
  6647                           ;doprnt.c: 1209: vd %= 10;
  6648  000992  C073  F001         	movff	sprintf@vd,?___lwmod
  6649  000996  C074  F002         	movff	sprintf@vd+1,?___lwmod+1
  6650  00099A  0E00               	movlw	0
  6651  00099C  6E04               	movwf	?___lwmod+3,c
  6652  00099E  0E0A               	movlw	10
  6653  0009A0  6E03               	movwf	?___lwmod+2,c
  6654  0009A2  EC34  F01D         	call	___lwmod	;wreg free
  6655  0009A6  C001  F073         	movff	?___lwmod,sprintf@vd
  6656  0009AA  C002  F074         	movff	?___lwmod+1,sprintf@vd+1
  6657                           
  6658                           ;doprnt.c: 1210: ((*sp++ = ('0' + vd)));
  6659  0009AE  0100               	movlb	0	; () banked
  6660  0009B0  0100               	movlb	0	; () banked
  6661  0009B2  5173               	movf	sprintf@vd& (0+255),w,b
  6662  0009B4  0F30               	addlw	48
  6663  0009B6  C060  FFD9         	movff	sprintf@sp,fsr2l
  6664  0009BA  C061  FFDA         	movff	sprintf@sp+1,fsr2h
  6665  0009BE                     L7:
  6666  0009BE  6EDF               	movwf	indf2,c
  6667                           
  6668                           ; BSR set to: 0
  6669  0009C0  0100               	movlb	0	; () banked
  6670  0009C2  0100               	movlb	0	; () banked
  6671  0009C4  4B60               	infsnz	sprintf@sp& (0+255),f,b
  6672  0009C6  2B61               	incf	(sprintf@sp+1)& (0+255),f,b
  6673  0009C8                     i2l5917:
  6674                           
  6675                           ; BSR set to: 0
  6676  0009C8  0100               	movlb	0	; () banked
  6677  0009CA  0100               	movlb	0	; () banked
  6678  0009CC  0787               	decf	sprintf@c& (0+255),f,b
  6679  0009CE  0100               	movlb	0	; () banked
  6680  0009D0  2987               	incf	sprintf@c& (0+255),w,b
  6681  0009D2  B4D8               	btfsc	status,2,c
  6682  0009D4  D010               	goto	i2l5925
  6683  0009D6  D7B9               	goto	i2l5909
  6684  0009D8                     i2l5919:
  6685                           
  6686                           ; BSR set to: 0
  6687                           ;doprnt.c: 1215: ((*sp++ = ('0')));
  6688  0009D8  C060  FFD9         	movff	sprintf@sp,fsr2l
  6689  0009DC  C061  FFDA         	movff	sprintf@sp+1,fsr2h
  6690  0009E0  0E30               	movlw	48
  6691  0009E2  6EDF               	movwf	indf2,c
  6692                           
  6693                           ; BSR set to: 0
  6694  0009E4  0100               	movlb	0	; () banked
  6695  0009E6  0100               	movlb	0	; () banked
  6696  0009E8  4B60               	infsnz	sprintf@sp& (0+255),f,b
  6697  0009EA  2B61               	incf	(sprintf@sp+1)& (0+255),f,b
  6698                           
  6699                           ; BSR set to: 0
  6700                           ;doprnt.c: 1216: exp--;
  6701  0009EC  0100               	movlb	0	; () banked
  6702  0009EE  0100               	movlb	0	; () banked
  6703  0009F0  077C               	decf	sprintf@exp& (0+255),f,b
  6704  0009F2  A0D8               	btfss	status,0,c
  6705  0009F4  077D               	decf	(sprintf@exp+1)& (0+255),f,b
  6706  0009F6                     i2l5925:
  6707                           
  6708                           ; BSR set to: 0
  6709  0009F6  0100               	movlb	0	; () banked
  6710  0009F8  0100               	movlb	0	; () banked
  6711  0009FA  517D               	movf	(sprintf@exp+1)& (0+255),w,b
  6712  0009FC  0A80               	xorlw	128
  6713  0009FE  0F80               	addlw	-128
  6714  000A00  0E01               	movlw	1
  6715  000A02  B4D8               	btfsc	status,2,c
  6716  000A04  5D7C               	subwf	sprintf@exp& (0+255),w,b
  6717  000A06  B0D8               	btfsc	status,0,c
  6718  000A08  D7E7               	goto	i2l5919
  6719                           
  6720                           ; BSR set to: 0
  6721                           ;doprnt.c: 1217: }
  6722                           ;doprnt.c: 1218: if(prec > (int)((sizeof dpowers/sizeof dpowers[0])-2))
  6723                           
  6724                           ; BSR set to: 0
  6725  000A0A  0100               	movlb	0	; () banked
  6726  000A0C  0100               	movlb	0	; () banked
  6727  000A0E  5186               	movf	(sprintf@prec+1)& (0+255),w,b
  6728  000A10  0A80               	xorlw	128
  6729  000A12  0F80               	addlw	-128
  6730  000A14  0E09               	movlw	9
  6731  000A16  B4D8               	btfsc	status,2,c
  6732  000A18  5D85               	subwf	sprintf@prec& (0+255),w,b
  6733  000A1A  A0D8               	btfss	status,0,c
  6734  000A1C  D007               	goto	i2l593
  6735                           
  6736                           ; BSR set to: 0
  6737                           ;doprnt.c: 1219: c = (sizeof dpowers/sizeof dpowers[0])-2;
  6738  000A1E  6E58               	movwf	??_sprintf& (0+255),c
  6739  000A20  0E08               	movlw	8
  6740  000A22  0100               	movlb	0	; () banked
  6741  000A24  0100               	movlb	0	; () banked
  6742  000A26  6F87               	movwf	sprintf@c& (0+255),b
  6743  000A28  5058               	movf	??_sprintf& (0+255),w,c
  6744  000A2A  D002               	goto	i2l5931
  6745  000A2C                     i2l593:
  6746                           
  6747                           ; BSR set to: 0
  6748                           ;doprnt.c: 1220: else
  6749                           ;doprnt.c: 1221: c = prec;
  6750  000A2C  C085  F087         	movff	sprintf@prec,sprintf@c
  6751  000A30                     i2l5931:
  6752                           
  6753                           ; BSR set to: 0
  6754                           ;doprnt.c: 1222: prec -= c;
  6755  000A30  0100               	movlb	0	; () banked
  6756  000A32  0100               	movlb	0	; () banked
  6757  000A34  5187               	movf	sprintf@c& (0+255),w,b
  6758  000A36  0100               	movlb	0	; () banked
  6759  000A38  0100               	movlb	0	; () banked
  6760  000A3A  5F85               	subwf	sprintf@prec& (0+255),f,b
  6761  000A3C  0E00               	movlw	0
  6762  000A3E  0100               	movlb	0	; () banked
  6763  000A40  BF87               	btfsc	sprintf@c& (0+255),7,b
  6764  000A42  0EFF               	movlw	255
  6765  000A44  0100               	movlb	0	; () banked
  6766  000A46  0100               	movlb	0	; () banked
  6767  000A48  5B86               	subwfb	(sprintf@prec+1)& (0+255),f,b
  6768                           
  6769                           ; BSR set to: 0
  6770                           ;doprnt.c: 1226: if(c)
  6771  000A4A  0100               	movlb	0	; () banked
  6772  000A4C  0100               	movlb	0	; () banked
  6773  000A4E  5187               	movf	sprintf@c& (0+255),w,b
  6774  000A50  B4D8               	btfsc	status,2,c
  6775  000A52  D00A               	goto	i2l5939
  6776                           
  6777                           ; BSR set to: 0
  6778                           ;doprnt.c: 1228: ((*sp++ = ('.')));
  6779  000A54  C060  FFD9         	movff	sprintf@sp,fsr2l
  6780  000A58  C061  FFDA         	movff	sprintf@sp+1,fsr2h
  6781  000A5C  0E2E               	movlw	46
  6782  000A5E  6EDF               	movwf	indf2,c
  6783                           
  6784                           ; BSR set to: 0
  6785  000A60  0100               	movlb	0	; () banked
  6786  000A62  0100               	movlb	0	; () banked
  6787  000A64  4B60               	infsnz	sprintf@sp& (0+255),f,b
  6788  000A66  2B61               	incf	(sprintf@sp+1)& (0+255),f,b
  6789  000A68                     i2l5939:
  6790                           
  6791                           ; BSR set to: 0
  6792                           ;doprnt.c: 1234: _val._val = (long)(fval * scale(c));
  6793  000A68  C087  F03F         	movff	sprintf@c,?_scale
  6794  000A6C  EC1B  F00A         	call	_scale	;wreg free
  6795  000A70  C041  F06E         	movff	?_scale+2,_sprintf$1281+2
  6796  000A74  C040  F06D         	movff	?_scale+1,_sprintf$1281+1
  6797  000A78  C03F  F06C         	movff	?_scale,_sprintf$1281
  6798                           
  6799                           ;doprnt.c: 1234: _val._val = (long)(fval * scale(c));
  6800  000A7C  C080  F031         	movff	sprintf@fval,?___ftmul+3
  6801  000A80  C081  F032         	movff	sprintf@fval+1,?___ftmul+4
  6802  000A84  C082  F033         	movff	sprintf@fval+2,?___ftmul+5
  6803  000A88  C06C  F02E         	movff	_sprintf$1281,?___ftmul
  6804  000A8C  C06D  F02F         	movff	_sprintf$1281+1,?___ftmul+1
  6805  000A90  C06E  F030         	movff	_sprintf$1281+2,?___ftmul+2
  6806  000A94  ECC4  F015         	call	___ftmul	;wreg free
  6807  000A98  C030  F021         	movff	?___ftmul+2,?___fttol+2
  6808  000A9C  C02F  F020         	movff	?___ftmul+1,?___fttol+1
  6809  000AA0  C02E  F01F         	movff	?___ftmul,?___fttol
  6810  000AA4  ECBF  F017         	call	___fttol	;wreg free
  6811  000AA8  C022  F08B         	movff	?___fttol+3,sprintf@_val+3
  6812  000AAC  C021  F08A         	movff	?___fttol+2,sprintf@_val+2
  6813  000AB0  C020  F089         	movff	?___fttol+1,sprintf@_val+1
  6814  000AB4  C01F  F088         	movff	?___fttol,sprintf@_val
  6815                           
  6816                           ;doprnt.c: 1235: while(c--) {
  6817  000AB8  D067               	goto	i2l5953
  6818  000ABA                     i2l5943:
  6819                           
  6820                           ;doprnt.c: 1236: unsigned vd = _val._val/dpowers[c];
  6821  000ABA  C088  F001         	movff	sprintf@_val,?___lldiv
  6822  000ABE  C089  F002         	movff	sprintf@_val+1,?___lldiv+1
  6823  000AC2  C08A  F003         	movff	sprintf@_val+2,?___lldiv+2
  6824  000AC6  C08B  F004         	movff	sprintf@_val+3,?___lldiv+3
  6825  000ACA  0100               	movlb	0	; () banked
  6826  000ACC  0100               	movlb	0	; () banked
  6827  000ACE  5187               	movf	sprintf@c& (0+255),w,b
  6828  000AD0  0D04               	mullw	4
  6829  000AD2  0EF7               	movlw	low _dpowers
  6830  000AD4  24F3               	addwf	prodl,w,c
  6831  000AD6  6EF6               	movwf	tblptrl,c
  6832  000AD8  0E7E               	movlw	high _dpowers
  6833  000ADA  20F4               	addwfc	prodh,w,c
  6834  000ADC  6EF7               	movwf	tblptrh,c
  6835  000ADE  0009               	tblrd		*+
  6836  000AE0  CFF5 F005          	movff	tablat,?___lldiv+4
  6837  000AE4  0009               	tblrd		*+
  6838  000AE6  CFF5 F006          	movff	tablat,?___lldiv+5
  6839  000AEA  0009               	tblrd		*+
  6840  000AEC  CFF5 F007          	movff	tablat,?___lldiv+6
  6841  000AF0  000A               	tblrd		*-
  6842  000AF2  CFF5 F008          	movff	tablat,?___lldiv+7
  6843  000AF6  ECC5  F01A         	call	___lldiv	;wreg free
  6844  000AFA  C001  F075         	movff	?___lldiv,sprintf@vd_641
  6845  000AFE  C002  F076         	movff	?___lldiv+1,sprintf@vd_641+1
  6846                           
  6847                           ;doprnt.c: 1237: vd %= 10;
  6848  000B02  C075  F001         	movff	sprintf@vd_641,?___lwmod
  6849  000B06  C076  F002         	movff	sprintf@vd_641+1,?___lwmod+1
  6850  000B0A  0E00               	movlw	0
  6851  000B0C  6E04               	movwf	?___lwmod+3,c
  6852  000B0E  0E0A               	movlw	10
  6853  000B10  6E03               	movwf	?___lwmod+2,c
  6854  000B12  EC34  F01D         	call	___lwmod	;wreg free
  6855  000B16  C001  F075         	movff	?___lwmod,sprintf@vd_641
  6856  000B1A  C002  F076         	movff	?___lwmod+1,sprintf@vd_641+1
  6857                           
  6858                           ;doprnt.c: 1238: ((*sp++ = ('0' + vd)));
  6859  000B1E  0100               	movlb	0	; () banked
  6860  000B20  0100               	movlb	0	; () banked
  6861  000B22  5175               	movf	sprintf@vd_641& (0+255),w,b
  6862  000B24  0F30               	addlw	48
  6863  000B26  C060  FFD9         	movff	sprintf@sp,fsr2l
  6864  000B2A  C061  FFDA         	movff	sprintf@sp+1,fsr2h
  6865  000B2E  6EDF               	movwf	indf2,c
  6866                           
  6867                           ; BSR set to: 0
  6868  000B30  0100               	movlb	0	; () banked
  6869  000B32  0100               	movlb	0	; () banked
  6870  000B34  4B60               	infsnz	sprintf@sp& (0+255),f,b
  6871  000B36  2B61               	incf	(sprintf@sp+1)& (0+255),f,b
  6872                           
  6873                           ; BSR set to: 0
  6874                           ;doprnt.c: 1239: _val._val %= dpowers[c];
  6875  000B38  C088  F014         	movff	sprintf@_val,?___llmod
  6876  000B3C  C089  F015         	movff	sprintf@_val+1,?___llmod+1
  6877  000B40  C08A  F016         	movff	sprintf@_val+2,?___llmod+2
  6878  000B44  C08B  F017         	movff	sprintf@_val+3,?___llmod+3
  6879  000B48  0100               	movlb	0	; () banked
  6880  000B4A  0100               	movlb	0	; () banked
  6881  000B4C  5187               	movf	sprintf@c& (0+255),w,b
  6882  000B4E  0D04               	mullw	4
  6883  000B50  0EF7               	movlw	low _dpowers
  6884  000B52  24F3               	addwf	prodl,w,c
  6885  000B54  6EF6               	movwf	tblptrl,c
  6886  000B56  0E7E               	movlw	high _dpowers
  6887  000B58  20F4               	addwfc	prodh,w,c
  6888  000B5A  6EF7               	movwf	tblptrh,c
  6889  000B5C  0009               	tblrd		*+
  6890  000B5E  CFF5 F018          	movff	tablat,?___llmod+4
  6891  000B62  0009               	tblrd		*+
  6892  000B64  CFF5 F019          	movff	tablat,?___llmod+5
  6893  000B68  0009               	tblrd		*+
  6894  000B6A  CFF5 F01A          	movff	tablat,?___llmod+6
  6895  000B6E  000A               	tblrd		*-
  6896  000B70  CFF5 F01B          	movff	tablat,?___llmod+7
  6897  000B74  ECF6  F01B         	call	___llmod	;wreg free
  6898  000B78  C017  F08B         	movff	?___llmod+3,sprintf@_val+3
  6899  000B7C  C016  F08A         	movff	?___llmod+2,sprintf@_val+2
  6900  000B80  C015  F089         	movff	?___llmod+1,sprintf@_val+1
  6901  000B84  C014  F088         	movff	?___llmod,sprintf@_val
  6902  000B88                     i2l5953:
  6903  000B88  0100               	movlb	0	; () banked
  6904  000B8A  0100               	movlb	0	; () banked
  6905  000B8C  0787               	decf	sprintf@c& (0+255),f,b
  6906  000B8E  0100               	movlb	0	; () banked
  6907  000B90  2987               	incf	sprintf@c& (0+255),w,b
  6908  000B92  B4D8               	btfsc	status,2,c
  6909  000B94  D010               	goto	i2l5961
  6910  000B96  D791               	goto	i2l5943
  6911  000B98                     i2l5955:
  6912                           
  6913                           ; BSR set to: 0
  6914                           ;doprnt.c: 1243: ((*sp++ = ('0')));
  6915  000B98  C060  FFD9         	movff	sprintf@sp,fsr2l
  6916  000B9C  C061  FFDA         	movff	sprintf@sp+1,fsr2h
  6917  000BA0  0E30               	movlw	48
  6918  000BA2  6EDF               	movwf	indf2,c
  6919                           
  6920                           ; BSR set to: 0
  6921  000BA4  0100               	movlb	0	; () banked
  6922  000BA6  0100               	movlb	0	; () banked
  6923  000BA8  4B60               	infsnz	sprintf@sp& (0+255),f,b
  6924  000BAA  2B61               	incf	(sprintf@sp+1)& (0+255),f,b
  6925                           
  6926                           ; BSR set to: 0
  6927                           ;doprnt.c: 1244: prec--;
  6928  000BAC  0100               	movlb	0	; () banked
  6929  000BAE  0100               	movlb	0	; () banked
  6930  000BB0  0785               	decf	sprintf@prec& (0+255),f,b
  6931  000BB2  A0D8               	btfss	status,0,c
  6932  000BB4  0786               	decf	(sprintf@prec+1)& (0+255),f,b
  6933  000BB6                     i2l5961:
  6934                           
  6935                           ; BSR set to: 0
  6936  000BB6  0100               	movlb	0	; () banked
  6937  000BB8  0100               	movlb	0	; () banked
  6938  000BBA  5186               	movf	(sprintf@prec+1)& (0+255),w,b
  6939  000BBC  1185               	iorwf	sprintf@prec& (0+255),w,b
  6940  000BBE  B4D8               	btfsc	status,2,c
  6941  000BC0  D1DD               	goto	i2l6063
  6942  000BC2  D7EA               	goto	i2l5955
  6943  000BC4                     i2l554:
  6944                           
  6945                           ; BSR set to: 0
  6946                           ;doprnt.c: 1253: }
  6947                           ;doprnt.c: 1260: {
  6948                           ;doprnt.c: 1262: if(flag & 0x10)
  6949  000BC4  0100               	movlb	0	; () banked
  6950  000BC6  0100               	movlb	0	; () banked
  6951  000BC8  A97E               	btfss	sprintf@flag& (0+255),4,b
  6952  000BCA  D012               	goto	i2l5967
  6953                           
  6954                           ; BSR set to: 0
  6955                           ;doprnt.c: 1263: _val._val = (*(long *)__va_arg((*(long **)ap), (long)0));
  6956  000BCC  C07A  FFD9         	movff	sprintf@ap,fsr2l
  6957  000BD0  C07B  FFDA         	movff	sprintf@ap+1,fsr2h
  6958  000BD4  0100               	movlb	0	; () banked
  6959  000BD6  CFDE F088          	movff	postinc2,sprintf@_val
  6960  000BDA  0100               	movlb	0	; () banked
  6961  000BDC  CFDE F089          	movff	postinc2,sprintf@_val+1
  6962  000BE0  0100               	movlb	0	; () banked
  6963  000BE2  CFDE F08A          	movff	postinc2,sprintf@_val+2
  6964  000BE6  0100               	movlb	0	; () banked
  6965  000BE8  CFDE F08B          	movff	postinc2,sprintf@_val+3
  6966                           
  6967                           ; BSR set to: 0
  6968  000BEC  0E04               	movlw	4
  6969  000BEE  D014               	goto	L8
  6970  000BF0                     i2l5967:
  6971                           
  6972                           ; BSR set to: 0
  6973                           ;doprnt.c: 1264: else
  6974                           ;doprnt.c: 1266: _val._val = (long)(*(int *)__va_arg((*(int **)ap), (int)0));
  6975  000BF0  C07A  FFD9         	movff	sprintf@ap,fsr2l
  6976  000BF4  C07B  FFDA         	movff	sprintf@ap+1,fsr2h
  6977  000BF8  0100               	movlb	0	; () banked
  6978  000BFA  CFDE F088          	movff	postinc2,sprintf@_val
  6979  000BFE  0100               	movlb	0	; () banked
  6980  000C00  CFDD F089          	movff	postdec2,sprintf@_val+1
  6981  000C04  0100               	movlb	0	; () banked
  6982  000C06  0E00               	movlw	0
  6983  000C08  0100               	movlb	0	; () banked
  6984  000C0A  BF89               	btfsc	(sprintf@_val+1)& (0+255),7,b
  6985  000C0C  0EFF               	movlw	-1
  6986  000C0E  0100               	movlb	0	; () banked
  6987  000C10  6F8A               	movwf	(sprintf@_val+2)& (0+255),b
  6988  000C12  0100               	movlb	0	; () banked
  6989  000C14  6F8B               	movwf	(sprintf@_val+3)& (0+255),b
  6990                           
  6991                           ; BSR set to: 0
  6992  000C16  0E02               	movlw	2
  6993  000C18                     L8:
  6994  000C18  0100               	movlb	0	; () banked
  6995  000C1A  0100               	movlb	0	; () banked
  6996  000C1C  277A               	addwf	sprintf@ap& (0+255),f,b
  6997  000C1E  0E00               	movlw	0
  6998  000C20  0100               	movlb	0	; () banked
  6999  000C22  237B               	addwfc	(sprintf@ap+1)& (0+255),f,b
  7000                           
  7001                           ; BSR set to: 0
  7002                           ;doprnt.c: 1268: if((long)_val._val < 0) {
  7003                           
  7004                           ; BSR set to: 0
  7005  000C24  0100               	movlb	0	; () banked
  7006  000C26  0100               	movlb	0	; () banked
  7007  000C28  AF8B               	btfss	(sprintf@_val+3)& (0+255),7,b
  7008  000C2A  D014               	goto	i2l5977
  7009                           
  7010                           ; BSR set to: 0
  7011                           ;doprnt.c: 1269: flag |= 0x03;
  7012  000C2C  0E03               	movlw	3
  7013  000C2E  0100               	movlb	0	; () banked
  7014  000C30  0100               	movlb	0	; () banked
  7015  000C32  137E               	iorwf	sprintf@flag& (0+255),f,b
  7016                           
  7017                           ; BSR set to: 0
  7018                           ;doprnt.c: 1270: _val._val = -_val._val;
  7019  000C34  0100               	movlb	0	; () banked
  7020  000C36  0100               	movlb	0	; () banked
  7021  000C38  1F8B               	comf	(sprintf@_val+3)& (0+255),f,b
  7022  000C3A  0100               	movlb	0	; () banked
  7023  000C3C  1F8A               	comf	(sprintf@_val+2)& (0+255),f,b
  7024  000C3E  0100               	movlb	0	; () banked
  7025  000C40  1F89               	comf	(sprintf@_val+1)& (0+255),f,b
  7026  000C42  0100               	movlb	0	; () banked
  7027  000C44  6D88               	negf	sprintf@_val& (0+255),b
  7028  000C46  0E00               	movlw	0
  7029  000C48  0100               	movlb	0	; () banked
  7030  000C4A  2389               	addwfc	(sprintf@_val+1)& (0+255),f,b
  7031  000C4C  0100               	movlb	0	; () banked
  7032  000C4E  238A               	addwfc	(sprintf@_val+2)& (0+255),f,b
  7033  000C50  0100               	movlb	0	; () banked
  7034  000C52  238B               	addwfc	(sprintf@_val+3)& (0+255),f,b
  7035  000C54                     i2l5977:
  7036                           
  7037                           ; BSR set to: 0
  7038                           ;doprnt.c: 1271: }
  7039                           ;doprnt.c: 1273: }
  7040                           ;doprnt.c: 1297: if(prec == 0 && _val._val == 0)
  7041  000C54  0100               	movlb	0	; () banked
  7042  000C56  0100               	movlb	0	; () banked
  7043  000C58  5186               	movf	(sprintf@prec+1)& (0+255),w,b
  7044  000C5A  1185               	iorwf	sprintf@prec& (0+255),w,b
  7045  000C5C  A4D8               	btfss	status,2,c
  7046  000C5E  D00C               	goto	i2l5983
  7047                           
  7048                           ; BSR set to: 0
  7049  000C60  0100               	movlb	0	; () banked
  7050  000C62  0100               	movlb	0	; () banked
  7051  000C64  518B               	movf	(sprintf@_val+3)& (0+255),w,b
  7052  000C66  1188               	iorwf	sprintf@_val& (0+255),w,b
  7053  000C68  1189               	iorwf	(sprintf@_val+1)& (0+255),w,b
  7054  000C6A  118A               	iorwf	(sprintf@_val+2)& (0+255),w,b
  7055  000C6C  A4D8               	btfss	status,2,c
  7056  000C6E  D004               	goto	i2l5983
  7057                           
  7058                           ; BSR set to: 0
  7059                           ;doprnt.c: 1298: prec++;
  7060  000C70  0100               	movlb	0	; () banked
  7061  000C72  0100               	movlb	0	; () banked
  7062  000C74  4B85               	infsnz	sprintf@prec& (0+255),f,b
  7063  000C76  2B86               	incf	(sprintf@prec+1)& (0+255),f,b
  7064  000C78                     i2l5983:
  7065                           
  7066                           ; BSR set to: 0
  7067                           ;doprnt.c: 1312: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  7068  000C78  6E58               	movwf	??_sprintf& (0+255),c
  7069  000C7A  0E01               	movlw	1
  7070  000C7C  0100               	movlb	0	; () banked
  7071  000C7E  0100               	movlb	0	; () banked
  7072  000C80  6F87               	movwf	sprintf@c& (0+255),b
  7073  000C82  5058               	movf	??_sprintf& (0+255),w,c
  7074  000C84                     
  7075                           ; BSR set to: 0
  7076  000C84  0100               	movlb	0	; () banked
  7077  000C86  0100               	movlb	0	; () banked
  7078  000C88  5187               	movf	sprintf@c& (0+255),w,b
  7079  000C8A  0A0A               	xorlw	10
  7080  000C8C  B4D8               	btfsc	status,2,c
  7081  000C8E  D021               	goto	i2l5997
  7082                           
  7083                           ; BSR set to: 0
  7084                           ;doprnt.c: 1313: if(_val._val < dpowers[c])
  7085                           
  7086                           ; BSR set to: 0
  7087                           
  7088                           ; BSR set to: 0
  7089  000C90  0100               	movlb	0	; () banked
  7090  000C92  0100               	movlb	0	; () banked
  7091  000C94  5187               	movf	sprintf@c& (0+255),w,b
  7092  000C96  0D04               	mullw	4
  7093  000C98  0EF7               	movlw	low _dpowers
  7094  000C9A  24F3               	addwf	prodl,w,c
  7095  000C9C  6EF6               	movwf	tblptrl,c
  7096  000C9E  0E7E               	movlw	high _dpowers
  7097  000CA0  20F4               	addwfc	prodh,w,c
  7098  000CA2  6EF7               	movwf	tblptrh,c
  7099  000CA4  0009               	tblrd		*+
  7100  000CA6  50F5               	movf	tablat,w,c
  7101  000CA8  0100               	movlb	0	; () banked
  7102  000CAA  0100               	movlb	0	; () banked
  7103  000CAC  5D88               	subwf	sprintf@_val& (0+255),w,b
  7104  000CAE  0009               	tblrd		*+
  7105  000CB0  50F5               	movf	tablat,w,c
  7106  000CB2  0100               	movlb	0	; () banked
  7107  000CB4  5989               	subwfb	(sprintf@_val+1)& (0+255),w,b
  7108  000CB6  0009               	tblrd		*+
  7109  000CB8  50F5               	movf	tablat,w,c
  7110  000CBA  0100               	movlb	0	; () banked
  7111  000CBC  598A               	subwfb	(sprintf@_val+2)& (0+255),w,b
  7112  000CBE  0009               	tblrd		*+
  7113  000CC0  50F5               	movf	tablat,w,c
  7114  000CC2  0100               	movlb	0	; () banked
  7115  000CC4  598B               	subwfb	(sprintf@_val+3)& (0+255),w,b
  7116  000CC6  A0D8               	btfss	status,0,c
  7117  000CC8  D004               	goto	i2l5997
  7118                           
  7119                           ; BSR set to: 0
  7120                           
  7121                           ; BSR set to: 0
  7122                           
  7123                           ; BSR set to: 0
  7124                           ;doprnt.c: 1314: break;
  7125  000CCA  0100               	movlb	0	; () banked
  7126  000CCC  0100               	movlb	0	; () banked
  7127  000CCE  2B87               	incf	sprintf@c& (0+255),f,b
  7128  000CD0  D7D9               	goto	L9
  7129  000CD2                     i2l5997:
  7130                           
  7131                           ; BSR set to: 0
  7132                           ;doprnt.c: 1346: if(c < prec)
  7133  000CD2  0E80               	movlw	128
  7134  000CD4  0100               	movlb	0	; () banked
  7135  000CD6  0100               	movlb	0	; () banked
  7136  000CD8  BF87               	btfsc	sprintf@c& (0+255),7,b
  7137  000CDA  0E7F               	movlw	127
  7138  000CDC  6E58               	movwf	??_sprintf& (0+255),c
  7139  000CDE  0100               	movlb	0	; () banked
  7140  000CE0  0100               	movlb	0	; () banked
  7141  000CE2  5185               	movf	sprintf@prec& (0+255),w,b
  7142  000CE4  0100               	movlb	0	; () banked
  7143  000CE6  0100               	movlb	0	; () banked
  7144  000CE8  5D87               	subwf	sprintf@c& (0+255),w,b
  7145  000CEA  0100               	movlb	0	; () banked
  7146  000CEC  0100               	movlb	0	; () banked
  7147  000CEE  5186               	movf	(sprintf@prec+1)& (0+255),w,b
  7148  000CF0  0A80               	xorlw	128
  7149  000CF2  5858               	subwfb	??_sprintf& (0+255),w,c
  7150  000CF4  B0D8               	btfsc	status,0,c
  7151  000CF6  D003               	goto	i2l6001
  7152                           
  7153                           ; BSR set to: 0
  7154                           ;doprnt.c: 1347: c = prec;
  7155  000CF8  C085  F087         	movff	sprintf@prec,sprintf@c
  7156  000CFC  D01E               	goto	i2l6005
  7157  000CFE                     i2l6001:
  7158                           
  7159                           ; BSR set to: 0
  7160                           ;doprnt.c: 1348: else if(prec < c)
  7161  000CFE  0100               	movlb	0	; () banked
  7162  000D00  0100               	movlb	0	; () banked
  7163  000D02  5186               	movf	(sprintf@prec+1)& (0+255),w,b
  7164  000D04  0A80               	xorlw	128
  7165  000D06  6E58               	movwf	??_sprintf& (0+255),c
  7166  000D08  0100               	movlb	0	; () banked
  7167  000D0A  0100               	movlb	0	; () banked
  7168  000D0C  5187               	movf	sprintf@c& (0+255),w,b
  7169  000D0E  0100               	movlb	0	; () banked
  7170  000D10  0100               	movlb	0	; () banked
  7171  000D12  5D85               	subwf	sprintf@prec& (0+255),w,b
  7172  000D14  0E80               	movlw	128
  7173  000D16  0100               	movlb	0	; () banked
  7174  000D18  0100               	movlb	0	; () banked
  7175  000D1A  BF87               	btfsc	sprintf@c& (0+255),7,b
  7176  000D1C  0E7F               	movlw	127
  7177  000D1E  5858               	subwfb	??_sprintf& (0+255),w,c
  7178  000D20  B0D8               	btfsc	status,0,c
  7179  000D22  D00B               	goto	i2l6005
  7180                           
  7181                           ; BSR set to: 0
  7182                           ;doprnt.c: 1349: prec = c;
  7183  000D24  0100               	movlb	0	; () banked
  7184  000D26  0100               	movlb	0	; () banked
  7185  000D28  5187               	movf	sprintf@c& (0+255),w,b
  7186  000D2A  0100               	movlb	0	; () banked
  7187  000D2C  0100               	movlb	0	; () banked
  7188  000D2E  6F85               	movwf	sprintf@prec& (0+255),b
  7189  000D30  0100               	movlb	0	; () banked
  7190  000D32  6B86               	clrf	(sprintf@prec+1)& (0+255),b
  7191  000D34  0100               	movlb	0	; () banked
  7192  000D36  BF85               	btfsc	sprintf@prec& (0+255),7,b
  7193  000D38  0786               	decf	(sprintf@prec+1)& (0+255),f,b
  7194  000D3A                     i2l6005:
  7195                           
  7196                           ; BSR set to: 0
  7197                           ;doprnt.c: 1352: if(width && flag & 0x03)
  7198  000D3A  0100               	movlb	0	; () banked
  7199  000D3C  0100               	movlb	0	; () banked
  7200  000D3E  5184               	movf	(sprintf@width+1)& (0+255),w,b
  7201  000D40  1183               	iorwf	sprintf@width& (0+255),w,b
  7202  000D42  B4D8               	btfsc	status,2,c
  7203  000D44  D013               	goto	i2l6011
  7204                           
  7205                           ; BSR set to: 0
  7206  000D46  0E03               	movlw	3
  7207  000D48  0100               	movlb	0	; () banked
  7208  000D4A  0100               	movlb	0	; () banked
  7209  000D4C  157E               	andwf	sprintf@flag& (0+255),w,b
  7210  000D4E  6E58               	movwf	??_sprintf& (0+255),c
  7211  000D50  0E00               	movlw	0
  7212  000D52  0100               	movlb	0	; () banked
  7213  000D54  0100               	movlb	0	; () banked
  7214  000D56  157F               	andwf	(sprintf@flag+1)& (0+255),w,b
  7215  000D58  6E59               	movwf	(??_sprintf+1)& (0+255),c
  7216  000D5A  5059               	movf	??_sprintf+1,w,c
  7217  000D5C  1058               	iorwf	??_sprintf,w,c
  7218  000D5E  B4D8               	btfsc	status,2,c
  7219  000D60  D005               	goto	i2l6011
  7220                           
  7221                           ; BSR set to: 0
  7222                           ;doprnt.c: 1353: width--;
  7223  000D62  0100               	movlb	0	; () banked
  7224  000D64  0100               	movlb	0	; () banked
  7225  000D66  0783               	decf	sprintf@width& (0+255),f,b
  7226  000D68  A0D8               	btfss	status,0,c
  7227  000D6A  0784               	decf	(sprintf@width+1)& (0+255),f,b
  7228  000D6C                     i2l6011:
  7229                           
  7230                           ; BSR set to: 0
  7231                           ;doprnt.c: 1355: if(flag & 0x4000) {
  7232  000D6C  0100               	movlb	0	; () banked
  7233  000D6E  0100               	movlb	0	; () banked
  7234  000D70  AD7F               	btfss	(sprintf@flag+1)& (0+255),6,b
  7235  000D72  D026               	goto	i2l6019
  7236                           
  7237                           ; BSR set to: 0
  7238                           ;doprnt.c: 1356: if(width > prec)
  7239  000D74  0100               	movlb	0	; () banked
  7240  000D76  0100               	movlb	0	; () banked
  7241  000D78  5186               	movf	(sprintf@prec+1)& (0+255),w,b
  7242  000D7A  0A80               	xorlw	128
  7243  000D7C  6E58               	movwf	??_sprintf& (0+255),c
  7244  000D7E  0100               	movlb	0	; () banked
  7245  000D80  0100               	movlb	0	; () banked
  7246  000D82  5183               	movf	sprintf@width& (0+255),w,b
  7247  000D84  0100               	movlb	0	; () banked
  7248  000D86  0100               	movlb	0	; () banked
  7249  000D88  5D85               	subwf	sprintf@prec& (0+255),w,b
  7250  000D8A  0100               	movlb	0	; () banked
  7251  000D8C  0100               	movlb	0	; () banked
  7252  000D8E  5184               	movf	(sprintf@width+1)& (0+255),w,b
  7253  000D90  0A80               	xorlw	128
  7254  000D92  5858               	subwfb	??_sprintf& (0+255),w,c
  7255  000D94  B0D8               	btfsc	status,0,c
  7256  000D96  D00D               	goto	i2l6017
  7257                           
  7258                           ; BSR set to: 0
  7259                           ;doprnt.c: 1357: width -= prec;
  7260  000D98  0100               	movlb	0	; () banked
  7261  000D9A  0100               	movlb	0	; () banked
  7262  000D9C  5185               	movf	sprintf@prec& (0+255),w,b
  7263  000D9E  0100               	movlb	0	; () banked
  7264  000DA0  0100               	movlb	0	; () banked
  7265  000DA2  5F83               	subwf	sprintf@width& (0+255),f,b
  7266  000DA4  0100               	movlb	0	; () banked
  7267  000DA6  0100               	movlb	0	; () banked
  7268  000DA8  5186               	movf	(sprintf@prec+1)& (0+255),w,b
  7269  000DAA  0100               	movlb	0	; () banked
  7270  000DAC  0100               	movlb	0	; () banked
  7271  000DAE  5B84               	subwfb	(sprintf@width+1)& (0+255),f,b
  7272  000DB0  D007               	goto	i2l6019
  7273  000DB2                     i2l6017:
  7274                           
  7275                           ; BSR set to: 0
  7276                           ;doprnt.c: 1358: else
  7277                           ;doprnt.c: 1359: width = 0;
  7278  000DB2  0E00               	movlw	0
  7279  000DB4  0100               	movlb	0	; () banked
  7280  000DB6  0100               	movlb	0	; () banked
  7281  000DB8  6F84               	movwf	(sprintf@width+1)& (0+255),b
  7282  000DBA  0E00               	movlw	0
  7283  000DBC  0100               	movlb	0	; () banked
  7284  000DBE  6F83               	movwf	sprintf@width& (0+255),b
  7285  000DC0                     i2l6019:
  7286                           
  7287                           ; BSR set to: 0
  7288                           ;doprnt.c: 1360: }
  7289                           ;doprnt.c: 1388: if(width > c)
  7290  000DC0  0E80               	movlw	128
  7291  000DC2  0100               	movlb	0	; () banked
  7292  000DC4  0100               	movlb	0	; () banked
  7293  000DC6  BF87               	btfsc	sprintf@c& (0+255),7,b
  7294  000DC8  0E7F               	movlw	127
  7295  000DCA  6E58               	movwf	??_sprintf& (0+255),c
  7296  000DCC  0100               	movlb	0	; () banked
  7297  000DCE  0100               	movlb	0	; () banked
  7298  000DD0  5183               	movf	sprintf@width& (0+255),w,b
  7299  000DD2  0100               	movlb	0	; () banked
  7300  000DD4  0100               	movlb	0	; () banked
  7301  000DD6  5D87               	subwf	sprintf@c& (0+255),w,b
  7302  000DD8  0100               	movlb	0	; () banked
  7303  000DDA  0100               	movlb	0	; () banked
  7304  000DDC  5184               	movf	(sprintf@width+1)& (0+255),w,b
  7305  000DDE  0A80               	xorlw	128
  7306  000DE0  5858               	subwfb	??_sprintf& (0+255),w,c
  7307  000DE2  B0D8               	btfsc	status,0,c
  7308  000DE4  D00E               	goto	i2l6023
  7309                           
  7310                           ; BSR set to: 0
  7311                           ;doprnt.c: 1389: width -= c;
  7312  000DE6  0100               	movlb	0	; () banked
  7313  000DE8  0100               	movlb	0	; () banked
  7314  000DEA  5187               	movf	sprintf@c& (0+255),w,b
  7315  000DEC  0100               	movlb	0	; () banked
  7316  000DEE  0100               	movlb	0	; () banked
  7317  000DF0  5F83               	subwf	sprintf@width& (0+255),f,b
  7318  000DF2  0E00               	movlw	0
  7319  000DF4  0100               	movlb	0	; () banked
  7320  000DF6  BF87               	btfsc	sprintf@c& (0+255),7,b
  7321  000DF8  0EFF               	movlw	255
  7322  000DFA  0100               	movlb	0	; () banked
  7323  000DFC  0100               	movlb	0	; () banked
  7324  000DFE  5B84               	subwfb	(sprintf@width+1)& (0+255),f,b
  7325  000E00  D007               	goto	i2l6025
  7326  000E02                     i2l6023:
  7327                           
  7328                           ; BSR set to: 0
  7329                           ;doprnt.c: 1390: else
  7330                           ;doprnt.c: 1391: width = 0;
  7331  000E02  0E00               	movlw	0
  7332  000E04  0100               	movlb	0	; () banked
  7333  000E06  0100               	movlb	0	; () banked
  7334  000E08  6F84               	movwf	(sprintf@width+1)& (0+255),b
  7335  000E0A  0E00               	movlw	0
  7336  000E0C  0100               	movlb	0	; () banked
  7337  000E0E  6F83               	movwf	sprintf@width& (0+255),b
  7338  000E10                     i2l6025:
  7339                           
  7340                           ; BSR set to: 0
  7341                           ;doprnt.c: 1394: if(flag & 0x04) {
  7342  000E10  0100               	movlb	0	; () banked
  7343  000E12  0100               	movlb	0	; () banked
  7344  000E14  A57E               	btfss	sprintf@flag& (0+255),2,b
  7345  000E16  D02E               	goto	i2l6041
  7346                           
  7347                           ; BSR set to: 0
  7348                           ;doprnt.c: 1399: if(flag & 0x03)
  7349  000E18  0E03               	movlw	3
  7350  000E1A  0100               	movlb	0	; () banked
  7351  000E1C  0100               	movlb	0	; () banked
  7352  000E1E  157E               	andwf	sprintf@flag& (0+255),w,b
  7353  000E20  6E58               	movwf	??_sprintf& (0+255),c
  7354  000E22  0E00               	movlw	0
  7355  000E24  0100               	movlb	0	; () banked
  7356  000E26  0100               	movlb	0	; () banked
  7357  000E28  157F               	andwf	(sprintf@flag+1)& (0+255),w,b
  7358  000E2A  6E59               	movwf	(??_sprintf+1)& (0+255),c
  7359  000E2C  5059               	movf	??_sprintf+1,w,c
  7360  000E2E  1058               	iorwf	??_sprintf,w,c
  7361  000E30  B4D8               	btfsc	status,2,c
  7362  000E32  D00A               	goto	i2l6033
  7363                           
  7364                           ; BSR set to: 0
  7365                           ;doprnt.c: 1400: ((*sp++ = ('-')));
  7366  000E34  C060  FFD9         	movff	sprintf@sp,fsr2l
  7367  000E38  C061  FFDA         	movff	sprintf@sp+1,fsr2h
  7368  000E3C  0E2D               	movlw	45
  7369  000E3E  6EDF               	movwf	indf2,c
  7370                           
  7371                           ; BSR set to: 0
  7372  000E40  0100               	movlb	0	; () banked
  7373  000E42  0100               	movlb	0	; () banked
  7374  000E44  4B60               	infsnz	sprintf@sp& (0+255),f,b
  7375  000E46  2B61               	incf	(sprintf@sp+1)& (0+255),f,b
  7376  000E48                     i2l6033:
  7377                           
  7378                           ; BSR set to: 0
  7379                           ;doprnt.c: 1422: if(width)
  7380  000E48  0100               	movlb	0	; () banked
  7381  000E4A  0100               	movlb	0	; () banked
  7382  000E4C  5184               	movf	(sprintf@width+1)& (0+255),w,b
  7383  000E4E  1183               	iorwf	sprintf@width& (0+255),w,b
  7384  000E50  B4D8               	btfsc	status,2,c
  7385  000E52  D089               	goto	i2l6061
  7386                           
  7387                           ; BSR set to: 0
  7388                           ;doprnt.c: 1424: ((*sp++ = ('0')));
  7389                           
  7390                           ; BSR set to: 0
  7391                           
  7392                           ;doprnt.c: 1423: do
  7393  000E54  C060  FFD9         	movff	sprintf@sp,fsr2l
  7394  000E58  C061  FFDA         	movff	sprintf@sp+1,fsr2h
  7395  000E5C  0E30               	movlw	48
  7396  000E5E  6EDF               	movwf	indf2,c
  7397                           
  7398                           ; BSR set to: 0
  7399  000E60  0100               	movlb	0	; () banked
  7400  000E62  0100               	movlb	0	; () banked
  7401  000E64  4B60               	infsnz	sprintf@sp& (0+255),f,b
  7402  000E66  2B61               	incf	(sprintf@sp+1)& (0+255),f,b
  7403                           
  7404                           ; BSR set to: 0
  7405                           ;doprnt.c: 1425: while(--width);
  7406  000E68  0100               	movlb	0	; () banked
  7407  000E6A  0100               	movlb	0	; () banked
  7408  000E6C  0783               	decf	sprintf@width& (0+255),f,b
  7409  000E6E  A0D8               	btfss	status,0,c
  7410  000E70  0784               	decf	(sprintf@width+1)& (0+255),f,b
  7411  000E72  D7EB               	goto	L11
  7412  000E74                     i2l6041:
  7413                           
  7414                           ; BSR set to: 0
  7415                           ;doprnt.c: 1429: {
  7416                           ;doprnt.c: 1431: if(width
  7417                           ;doprnt.c: 1435: )
  7418  000E74  0100               	movlb	0	; () banked
  7419  000E76  0100               	movlb	0	; () banked
  7420  000E78  5184               	movf	(sprintf@width+1)& (0+255),w,b
  7421  000E7A  1183               	iorwf	sprintf@width& (0+255),w,b
  7422  000E7C  B4D8               	btfsc	status,2,c
  7423  000E7E  D014               	goto	i2l6049
  7424  000E80                     i2l6043:
  7425                           
  7426                           ; BSR set to: 0
  7427                           ;doprnt.c: 1437: ((*sp++ = (' ')));
  7428  000E80  C060  FFD9         	movff	sprintf@sp,fsr2l
  7429  000E84  C061  FFDA         	movff	sprintf@sp+1,fsr2h
  7430  000E88  0E20               	movlw	32
  7431  000E8A  6EDF               	movwf	indf2,c
  7432                           
  7433                           ; BSR set to: 0
  7434  000E8C  0100               	movlb	0	; () banked
  7435  000E8E  0100               	movlb	0	; () banked
  7436  000E90  4B60               	infsnz	sprintf@sp& (0+255),f,b
  7437  000E92  2B61               	incf	(sprintf@sp+1)& (0+255),f,b
  7438                           
  7439                           ; BSR set to: 0
  7440                           ;doprnt.c: 1438: while(--width);
  7441  000E94  0100               	movlb	0	; () banked
  7442  000E96  0100               	movlb	0	; () banked
  7443  000E98  0783               	decf	sprintf@width& (0+255),f,b
  7444  000E9A  A0D8               	btfss	status,0,c
  7445  000E9C  0784               	decf	(sprintf@width+1)& (0+255),f,b
  7446  000E9E  0100               	movlb	0	; () banked
  7447  000EA0  5184               	movf	(sprintf@width+1)& (0+255),w,b
  7448  000EA2  1183               	iorwf	sprintf@width& (0+255),w,b
  7449  000EA4  A4D8               	btfss	status,2,c
  7450  000EA6  D7EC               	goto	i2l6043
  7451  000EA8                     i2l6049:
  7452                           
  7453                           ; BSR set to: 0
  7454                           ;doprnt.c: 1445: if(flag & 0x03)
  7455  000EA8  0E03               	movlw	3
  7456  000EAA  0100               	movlb	0	; () banked
  7457  000EAC  0100               	movlb	0	; () banked
  7458  000EAE  157E               	andwf	sprintf@flag& (0+255),w,b
  7459  000EB0  6E58               	movwf	??_sprintf& (0+255),c
  7460  000EB2  0E00               	movlw	0
  7461  000EB4  0100               	movlb	0	; () banked
  7462  000EB6  0100               	movlb	0	; () banked
  7463  000EB8  157F               	andwf	(sprintf@flag+1)& (0+255),w,b
  7464  000EBA  6E59               	movwf	(??_sprintf+1)& (0+255),c
  7465  000EBC  5059               	movf	??_sprintf+1,w,c
  7466  000EBE  1058               	iorwf	??_sprintf,w,c
  7467  000EC0  B4D8               	btfsc	status,2,c
  7468  000EC2  D051               	goto	i2l6061
  7469                           
  7470                           ; BSR set to: 0
  7471                           ;doprnt.c: 1446: ((*sp++ = ('-')));
  7472  000EC4  C060  FFD9         	movff	sprintf@sp,fsr2l
  7473  000EC8  C061  FFDA         	movff	sprintf@sp+1,fsr2h
  7474  000ECC  0E2D               	movlw	45
  7475  000ECE  6EDF               	movwf	indf2,c
  7476  000ED0  D046               	goto	L10
  7477  000ED2                     i2l6055:
  7478                           
  7479                           ; BSR set to: 0
  7480                           ;doprnt.c: 1485: {
  7481                           ;doprnt.c: 1496: c = (_val._val / dpowers[prec]) % 10 + '0';
  7482  000ED2  0100               	movlb	0	; () banked
  7483  000ED4  C085  F058         	movff	sprintf@prec,??_sprintf
  7484  000ED8  0100               	movlb	0	; () banked
  7485  000EDA  C086  F059         	movff	sprintf@prec+1,??_sprintf+1
  7486  000EDE  90D8               	bcf	status,0,c
  7487  000EE0  3658               	rlcf	??_sprintf,f,c
  7488  000EE2  3659               	rlcf	??_sprintf+1,f,c
  7489  000EE4  90D8               	bcf	status,0,c
  7490  000EE6  3658               	rlcf	??_sprintf,f,c
  7491  000EE8  3659               	rlcf	??_sprintf+1,f,c
  7492  000EEA  0EF7               	movlw	low _dpowers
  7493  000EEC  2458               	addwf	??_sprintf,w,c
  7494  000EEE  6EF6               	movwf	tblptrl,c
  7495  000EF0  0E7E               	movlw	high _dpowers
  7496  000EF2  2059               	addwfc	??_sprintf+1,w,c
  7497  000EF4  6EF7               	movwf	tblptrh,c
  7498  000EF6  0009               	tblrd		*+
  7499  000EF8  CFF5 F005          	movff	tablat,?___lldiv+4
  7500  000EFC  0009               	tblrd		*+
  7501  000EFE  CFF5 F006          	movff	tablat,?___lldiv+5
  7502  000F02  0009               	tblrd		*+
  7503  000F04  CFF5 F007          	movff	tablat,?___lldiv+6
  7504  000F08  000A               	tblrd		*-
  7505  000F0A  CFF5 F008          	movff	tablat,?___lldiv+7
  7506  000F0E  C088  F001         	movff	sprintf@_val,?___lldiv
  7507  000F12  C089  F002         	movff	sprintf@_val+1,?___lldiv+1
  7508  000F16  C08A  F003         	movff	sprintf@_val+2,?___lldiv+2
  7509  000F1A  C08B  F004         	movff	sprintf@_val+3,?___lldiv+3
  7510  000F1E  ECC5  F01A         	call	___lldiv	;wreg free
  7511  000F22  C004  F017         	movff	?___lldiv+3,?___llmod+3
  7512  000F26  C003  F016         	movff	?___lldiv+2,?___llmod+2
  7513  000F2A  C002  F015         	movff	?___lldiv+1,?___llmod+1
  7514  000F2E  C001  F014         	movff	?___lldiv,?___llmod
  7515  000F32  0E0A               	movlw	10
  7516  000F34  6E18               	movwf	?___llmod+4,c
  7517  000F36  0E00               	movlw	0
  7518  000F38  6E19               	movwf	?___llmod+5,c
  7519  000F3A  0E00               	movlw	0
  7520  000F3C  6E1A               	movwf	?___llmod+6,c
  7521  000F3E  0E00               	movlw	0
  7522  000F40  6E1B               	movwf	?___llmod+7,c
  7523  000F42  ECF6  F01B         	call	___llmod	;wreg free
  7524  000F46  5014               	movf	?___llmod,w,c
  7525  000F48  0F30               	addlw	48
  7526  000F4A  0100               	movlb	0	; () banked
  7527  000F4C  0100               	movlb	0	; () banked
  7528  000F4E  6F87               	movwf	sprintf@c& (0+255),b
  7529                           
  7530                           ; BSR set to: 0
  7531                           ;doprnt.c: 1530: }
  7532                           ;doprnt.c: 1531: ((*sp++ = (c)));
  7533  000F50  C060  FFD9         	movff	sprintf@sp,fsr2l
  7534  000F54  C061  FFDA         	movff	sprintf@sp+1,fsr2h
  7535  000F58  0100               	movlb	0	; () banked
  7536  000F5A  C087  FFDF         	movff	sprintf@c,indf2
  7537  000F5E                     L10:
  7538                           
  7539                           ; BSR set to: 0
  7540  000F5E  0100               	movlb	0	; () banked
  7541  000F60  0100               	movlb	0	; () banked
  7542  000F62  4B60               	infsnz	sprintf@sp& (0+255),f,b
  7543  000F64  2B61               	incf	(sprintf@sp+1)& (0+255),f,b
  7544  000F66                     i2l6061:
  7545                           
  7546                           ; BSR set to: 0
  7547  000F66  0100               	movlb	0	; () banked
  7548  000F68  0100               	movlb	0	; () banked
  7549  000F6A  0785               	decf	sprintf@prec& (0+255),f,b
  7550  000F6C  A0D8               	btfss	status,0,c
  7551  000F6E  0786               	decf	(sprintf@prec+1)& (0+255),f,b
  7552  000F70  0100               	movlb	0	; () banked
  7553  000F72  2985               	incf	sprintf@prec& (0+255),w,b
  7554  000F74  B4D8               	btfsc	status,2,c
  7555  000F76  2986               	incf	(sprintf@prec+1)& (0+255),w,b
  7556  000F78  A4D8               	btfss	status,2,c
  7557  000F7A  D7AB               	goto	i2l6055
  7558  000F7C                     i2l6063:
  7559                           
  7560                           ; BSR set to: 0
  7561  000F7C  0100               	movlb	0	; () banked
  7562  000F7E  C062  FFF6         	movff	sprintf@f,tblptrl
  7563  000F82  0100               	movlb	0	; () banked
  7564  000F84  C063  FFF7         	movff	sprintf@f+1,tblptrh
  7565  000F88  0100               	movlb	0	; () banked
  7566  000F8A  0100               	movlb	0	; () banked
  7567  000F8C  4B62               	infsnz	sprintf@f& (0+255),f,b
  7568  000F8E  2B63               	incf	(sprintf@f+1)& (0+255),f,b
  7569  000F90  0008               	tblrd		*
  7570  000F92  0100               	movlb	0	; () banked
  7571  000F94  CFF5 F087          	movff	tablat,sprintf@c
  7572  000F98  0100               	movlb	0	; () banked
  7573  000F9A  6787               	tstfsz	sprintf@c& (0+255),b
  7574  000F9C  EF19  F000         	goto	i2l5671
  7575  000FA0                     i2l6065:
  7576                           
  7577                           ; BSR set to: 0
  7578                           ;doprnt.c: 1545: *sp = 0;
  7579  000FA0  C060  FFD9         	movff	sprintf@sp,fsr2l
  7580  000FA4  C061  FFDA         	movff	sprintf@sp+1,fsr2h
  7581  000FA8  0E00               	movlw	0
  7582  000FAA  6EDF               	movwf	indf2,c
  7583                           
  7584                           ; BSR set to: 0
  7585                           
  7586                           ; BSR set to: 0
  7587                           ;doprnt.c: 1547: return 0;
  7588                           ;	Return value of _sprintf is never used
  7589  000FAC  0012               	return	
  7590  000FAE                     __end_of_sprintf:
  7591                           	opt stack 0
  7592                           tosu	equ	0xFFF
  7593                           tosh	equ	0xFFE
  7594                           tosl	equ	0xFFD
  7595                           pclatu	equ	0xFFB
  7596                           pclath	equ	0xFFA
  7597                           tblptru	equ	0xFF8
  7598                           tblptrh	equ	0xFF7
  7599                           tblptrl	equ	0xFF6
  7600                           tablat	equ	0xFF5
  7601                           prodh	equ	0xFF4
  7602                           prodl	equ	0xFF3
  7603                           intcon	equ	0xFF2
  7604                           intcon2	equ	0xFF1
  7605                           indf0	equ	0xFEF
  7606                           postinc0	equ	0xFEE
  7607                           fsr0h	equ	0xFEA
  7608                           fsr0l	equ	0xFE9
  7609                           wreg	equ	0xFE8
  7610                           postinc1	equ	0xFE6
  7611                           postdec1	equ	0xFE5
  7612                           fsr1h	equ	0xFE2
  7613                           fsr1l	equ	0xFE1
  7614                           indf2	equ	0xFDF
  7615                           postinc2	equ	0xFDE
  7616                           postdec2	equ	0xFDD
  7617                           plusw2	equ	0xFDB
  7618                           fsr2h	equ	0xFDA
  7619                           fsr2l	equ	0xFD9
  7620                           status	equ	0xFD8
  7621                           
  7622 ;; *************** function ___lltoft *****************
  7623 ;; Defined at:
  7624 ;;		line 36 in file "/usr/opt/microchip/xc8/v1.20/sources/common/lltoft.c"
  7625 ;; Parameters:    Size  Location     Type
  7626 ;;  c               4    8[COMRAM] unsigned long 
  7627 ;; Auto vars:     Size  Location     Type
  7628 ;;  exp             1   16[COMRAM] unsigned char 
  7629 ;; Return value:  Size  Location     Type
  7630 ;;                  3    8[COMRAM] float 
  7631 ;; Registers used:
  7632 ;;		wreg, status,2, status,0, cstack
  7633 ;; Tracked objects:
  7634 ;;		On entry : 0/0
  7635 ;;		On exit  : 0/0
  7636 ;;		Unchanged: 0/0
  7637 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7638 ;;      Params:         4       0       0       0       0       0       0       0       0
  7639 ;;      Locals:         1       0       0       0       0       0       0       0       0
  7640 ;;      Temps:          4       0       0       0       0       0       0       0       0
  7641 ;;      Totals:         9       0       0       0       0       0       0       0       0
  7642 ;;Total ram usage:        9 bytes
  7643 ;; Hardware stack levels used:    1
  7644 ;; Hardware stack levels required when called:    1
  7645 ;; This function calls:
  7646 ;;		___ftpack
  7647 ;; This function is called by:
  7648 ;;		_sprintf
  7649 ;; This function uses a non-reentrant model
  7650 ;;
  7651                           
  7652                           	psect	text23
  7653  0038BA                     __ptext23:
  7654                           	opt stack 0
  7655  0038BA                     ___lltoft:
  7656                           	opt stack 22
  7657                           
  7658                           ; BSR set to: 0
  7659                           ;incstack = 0
  7660                           ;incstack = 0
  7661  0038BA  6E0D               	movwf	??___lltoft& (0+255),c
  7662  0038BC  0E8E               	movlw	142
  7663  0038BE  6E11               	movwf	___lltoft@exp,c
  7664  0038C0  500D               	movf	??___lltoft& (0+255),w,c
  7665  0038C2  D006               	goto	i2l5189
  7666  0038C4                     i2l5187:
  7667  0038C4  90D8               	bcf	status,0,c
  7668  0038C6  320C               	rrcf	___lltoft@c+3,f,c
  7669  0038C8  320B               	rrcf	___lltoft@c+2,f,c
  7670  0038CA  320A               	rrcf	___lltoft@c+1,f,c
  7671  0038CC  3209               	rrcf	___lltoft@c,f,c
  7672  0038CE  2A11               	incf	___lltoft@exp,f,c
  7673  0038D0                     i2l5189:
  7674  0038D0  0E00               	movlw	0
  7675  0038D2  1409               	andwf	___lltoft@c,w,c
  7676  0038D4  6E0D               	movwf	??___lltoft& (0+255),c
  7677  0038D6  0E00               	movlw	0
  7678  0038D8  140A               	andwf	___lltoft@c+1,w,c
  7679  0038DA  6E0E               	movwf	(??___lltoft+1)& (0+255),c
  7680  0038DC  0E00               	movlw	0
  7681  0038DE  140B               	andwf	___lltoft@c+2,w,c
  7682  0038E0  6E0F               	movwf	(??___lltoft+2)& (0+255),c
  7683  0038E2  0EFF               	movlw	255
  7684  0038E4  140C               	andwf	___lltoft@c+3,w,c
  7685  0038E6  6E10               	movwf	(??___lltoft+3)& (0+255),c
  7686  0038E8  5010               	movf	??___lltoft+3,w,c
  7687  0038EA  100D               	iorwf	??___lltoft,w,c
  7688  0038EC  100E               	iorwf	??___lltoft+1,w,c
  7689  0038EE  100F               	iorwf	??___lltoft+2,w,c
  7690  0038F0  A4D8               	btfss	status,2,c
  7691  0038F2  D7E8               	goto	i2l5187
  7692  0038F4  C009  F001         	movff	___lltoft@c,?___ftpack
  7693  0038F8  C00A  F002         	movff	___lltoft@c+1,?___ftpack+1
  7694  0038FC  C00B  F003         	movff	___lltoft@c+2,?___ftpack+2
  7695  003900  C011  F004         	movff	___lltoft@exp,?___ftpack+3
  7696  003904  6E0D               	movwf	??___lltoft& (0+255),c
  7697  003906  0E00               	movlw	0
  7698  003908  6E05               	movwf	?___ftpack+4,c
  7699  00390A  500D               	movf	??___lltoft& (0+255),w,c
  7700  00390C  EC96  F018         	call	___ftpack	;wreg free
  7701  003910  C003  F00B         	movff	?___ftpack+2,?___lltoft+2
  7702  003914  C002  F00A         	movff	?___ftpack+1,?___lltoft+1
  7703  003918  C001  F009         	movff	?___ftpack,?___lltoft
  7704  00391C  0012               	return	
  7705  00391E                     __end_of___lltoft:
  7706                           	opt stack 0
  7707                           tosu	equ	0xFFF
  7708                           tosh	equ	0xFFE
  7709                           tosl	equ	0xFFD
  7710                           pclatu	equ	0xFFB
  7711                           pclath	equ	0xFFA
  7712                           tblptru	equ	0xFF8
  7713                           tblptrh	equ	0xFF7
  7714                           tblptrl	equ	0xFF6
  7715                           tablat	equ	0xFF5
  7716                           prodh	equ	0xFF4
  7717                           prodl	equ	0xFF3
  7718                           intcon	equ	0xFF2
  7719                           intcon2	equ	0xFF1
  7720                           indf0	equ	0xFEF
  7721                           postinc0	equ	0xFEE
  7722                           fsr0h	equ	0xFEA
  7723                           fsr0l	equ	0xFE9
  7724                           wreg	equ	0xFE8
  7725                           postinc1	equ	0xFE6
  7726                           postdec1	equ	0xFE5
  7727                           fsr1h	equ	0xFE2
  7728                           fsr1l	equ	0xFE1
  7729                           indf2	equ	0xFDF
  7730                           postinc2	equ	0xFDE
  7731                           postdec2	equ	0xFDD
  7732                           plusw2	equ	0xFDB
  7733                           fsr2h	equ	0xFDA
  7734                           fsr2l	equ	0xFD9
  7735                           status	equ	0xFD8
  7736                           
  7737 ;; *************** function ___lldiv *****************
  7738 ;; Defined at:
  7739 ;;		line 10 in file "/usr/opt/microchip/xc8/v1.20/sources/common/lldiv.c"
  7740 ;; Parameters:    Size  Location     Type
  7741 ;;  dividend        4    0[COMRAM] unsigned long 
  7742 ;;  divisor         4    4[COMRAM] unsigned long 
  7743 ;; Auto vars:     Size  Location     Type
  7744 ;;  quotient        4   14[COMRAM] unsigned long 
  7745 ;;  counter         1   18[COMRAM] unsigned char 
  7746 ;; Return value:  Size  Location     Type
  7747 ;;                  4    0[COMRAM] unsigned long 
  7748 ;; Registers used:
  7749 ;;		wreg, status,2, status,0
  7750 ;; Tracked objects:
  7751 ;;		On entry : 0/0
  7752 ;;		On exit  : 0/0
  7753 ;;		Unchanged: 0/0
  7754 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7755 ;;      Params:         8       0       0       0       0       0       0       0       0
  7756 ;;      Locals:        10       0       0       0       0       0       0       0       0
  7757 ;;      Temps:          1       0       0       0       0       0       0       0       0
  7758 ;;      Totals:        19       0       0       0       0       0       0       0       0
  7759 ;;Total ram usage:       19 bytes
  7760 ;; Hardware stack levels used:    1
  7761 ;; This function calls:
  7762 ;;		Nothing
  7763 ;; This function is called by:
  7764 ;;		_sprintf
  7765 ;; This function uses a non-reentrant model
  7766 ;;
  7767                           
  7768                           	psect	text24
  7769  00358A                     __ptext24:
  7770                           	opt stack 0
  7771  00358A                     ___lldiv:
  7772                           	opt stack 23
  7773                           
  7774                           ;incstack = 0
  7775                           ;incstack = 0
  7776  00358A  0E00               	movlw	0
  7777  00358C  6E0F               	movwf	___lldiv@quotient,c
  7778  00358E  0E00               	movlw	0
  7779  003590  6E10               	movwf	___lldiv@quotient+1,c
  7780  003592  0E00               	movlw	0
  7781  003594  6E11               	movwf	___lldiv@quotient+2,c
  7782  003596  0E00               	movlw	0
  7783  003598  6E12               	movwf	___lldiv@quotient+3,c
  7784  00359A  5008               	movf	___lldiv@divisor+3,w,c
  7785  00359C  1005               	iorwf	___lldiv@divisor,w,c
  7786  00359E  1006               	iorwf	___lldiv@divisor+1,w,c
  7787  0035A0  1007               	iorwf	___lldiv@divisor+2,w,c
  7788  0035A2  B4D8               	btfsc	status,2,c
  7789  0035A4  D02C               	goto	i2l1108
  7790  0035A6  6E09               	movwf	??___lldiv& (0+255),c
  7791  0035A8  0E01               	movlw	1
  7792  0035AA  6E13               	movwf	___lldiv@counter,c
  7793  0035AC  5009               	movf	??___lldiv& (0+255),w,c
  7794  0035AE  D006               	goto	i2l4947
  7795  0035B0                     i2l4945:
  7796  0035B0  90D8               	bcf	status,0,c
  7797  0035B2  3605               	rlcf	___lldiv@divisor,f,c
  7798  0035B4  3606               	rlcf	___lldiv@divisor+1,f,c
  7799  0035B6  3607               	rlcf	___lldiv@divisor+2,f,c
  7800  0035B8  3608               	rlcf	___lldiv@divisor+3,f,c
  7801  0035BA  2A13               	incf	___lldiv@counter,f,c
  7802  0035BC                     i2l4947:
  7803  0035BC  AE08               	btfss	___lldiv@divisor+3,7,c
  7804  0035BE  D7F8               	goto	i2l4945
  7805  0035C0                     i2l4949:
  7806  0035C0  90D8               	bcf	status,0,c
  7807  0035C2  360F               	rlcf	___lldiv@quotient,f,c
  7808  0035C4  3610               	rlcf	___lldiv@quotient+1,f,c
  7809  0035C6  3611               	rlcf	___lldiv@quotient+2,f,c
  7810  0035C8  3612               	rlcf	___lldiv@quotient+3,f,c
  7811  0035CA  5005               	movf	___lldiv@divisor,w,c
  7812  0035CC  5C01               	subwf	___lldiv@dividend,w,c
  7813  0035CE  5006               	movf	___lldiv@divisor+1,w,c
  7814  0035D0  5802               	subwfb	___lldiv@dividend+1,w,c
  7815  0035D2  5007               	movf	___lldiv@divisor+2,w,c
  7816  0035D4  5803               	subwfb	___lldiv@dividend+2,w,c
  7817  0035D6  5008               	movf	___lldiv@divisor+3,w,c
  7818  0035D8  5804               	subwfb	___lldiv@dividend+3,w,c
  7819  0035DA  A0D8               	btfss	status,0,c
  7820  0035DC  D009               	goto	i2l4957
  7821  0035DE  5005               	movf	___lldiv@divisor,w,c
  7822  0035E0  5E01               	subwf	___lldiv@dividend,f,c
  7823  0035E2  5006               	movf	___lldiv@divisor+1,w,c
  7824  0035E4  5A02               	subwfb	___lldiv@dividend+1,f,c
  7825  0035E6  5007               	movf	___lldiv@divisor+2,w,c
  7826  0035E8  5A03               	subwfb	___lldiv@dividend+2,f,c
  7827  0035EA  5008               	movf	___lldiv@divisor+3,w,c
  7828  0035EC  5A04               	subwfb	___lldiv@dividend+3,f,c
  7829  0035EE  800F               	bsf	___lldiv@quotient,0,c
  7830  0035F0                     i2l4957:
  7831  0035F0  90D8               	bcf	status,0,c
  7832  0035F2  3208               	rrcf	___lldiv@divisor+3,f,c
  7833  0035F4  3207               	rrcf	___lldiv@divisor+2,f,c
  7834  0035F6  3206               	rrcf	___lldiv@divisor+1,f,c
  7835  0035F8  3205               	rrcf	___lldiv@divisor,f,c
  7836  0035FA  2E13               	decfsz	___lldiv@counter,f,c
  7837  0035FC  D7E1               	goto	i2l4949
  7838  0035FE                     i2l1108:
  7839  0035FE  C00F  F001         	movff	___lldiv@quotient,?___lldiv
  7840  003602  C010  F002         	movff	___lldiv@quotient+1,?___lldiv+1
  7841  003606  C011  F003         	movff	___lldiv@quotient+2,?___lldiv+2
  7842  00360A  C012  F004         	movff	___lldiv@quotient+3,?___lldiv+3
  7843  00360E  0012               	return	
  7844  003610                     __end_of___lldiv:
  7845                           	opt stack 0
  7846                           tosu	equ	0xFFF
  7847                           tosh	equ	0xFFE
  7848                           tosl	equ	0xFFD
  7849                           pclatu	equ	0xFFB
  7850                           pclath	equ	0xFFA
  7851                           tblptru	equ	0xFF8
  7852                           tblptrh	equ	0xFF7
  7853                           tblptrl	equ	0xFF6
  7854                           tablat	equ	0xFF5
  7855                           prodh	equ	0xFF4
  7856                           prodl	equ	0xFF3
  7857                           intcon	equ	0xFF2
  7858                           intcon2	equ	0xFF1
  7859                           indf0	equ	0xFEF
  7860                           postinc0	equ	0xFEE
  7861                           fsr0h	equ	0xFEA
  7862                           fsr0l	equ	0xFE9
  7863                           wreg	equ	0xFE8
  7864                           postinc1	equ	0xFE6
  7865                           postdec1	equ	0xFE5
  7866                           fsr1h	equ	0xFE2
  7867                           fsr1l	equ	0xFE1
  7868                           indf2	equ	0xFDF
  7869                           postinc2	equ	0xFDE
  7870                           postdec2	equ	0xFDD
  7871                           plusw2	equ	0xFDB
  7872                           fsr2h	equ	0xFDA
  7873                           fsr2l	equ	0xFD9
  7874                           status	equ	0xFD8
  7875                           
  7876 ;; *************** function ___fttol *****************
  7877 ;; Defined at:
  7878 ;;		line 45 in file "/usr/opt/microchip/xc8/v1.20/sources/common/fttol.c"
  7879 ;; Parameters:    Size  Location     Type
  7880 ;;  f1              3   30[COMRAM] float 
  7881 ;; Auto vars:     Size  Location     Type
  7882 ;;  lval            4   40[COMRAM] unsigned long 
  7883 ;;  exp1            1   44[COMRAM] unsigned char 
  7884 ;;  sign1           1   39[COMRAM] unsigned char 
  7885 ;; Return value:  Size  Location     Type
  7886 ;;                  4   30[COMRAM] long 
  7887 ;; Registers used:
  7888 ;;		wreg, status,2, status,0
  7889 ;; Tracked objects:
  7890 ;;		On entry : 0/0
  7891 ;;		On exit  : 0/0
  7892 ;;		Unchanged: 0/0
  7893 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7894 ;;      Params:         4       0       0       0       0       0       0       0       0
  7895 ;;      Locals:         6       0       0       0       0       0       0       0       0
  7896 ;;      Temps:          5       0       0       0       0       0       0       0       0
  7897 ;;      Totals:        15       0       0       0       0       0       0       0       0
  7898 ;;Total ram usage:       15 bytes
  7899 ;; Hardware stack levels used:    1
  7900 ;; This function calls:
  7901 ;;		Nothing
  7902 ;; This function is called by:
  7903 ;;		_sprintf
  7904 ;; This function uses a non-reentrant model
  7905 ;;
  7906                           
  7907                           	psect	text25
  7908  002F7E                     __ptext25:
  7909                           	opt stack 0
  7910  002F7E                     ___fttol:
  7911                           	opt stack 23
  7912                           
  7913                           ;incstack = 0
  7914                           ;incstack = 0
  7915  002F7E  0E0F               	movlw	15
  7916  002F80  6E23               	movwf	??___fttol& (0+255),c
  7917  002F82  C01F  F024         	movff	___fttol@f1,??___fttol+1
  7918  002F86  C020  F025         	movff	___fttol@f1+1,??___fttol+2
  7919  002F8A  C021  F026         	movff	___fttol@f1+2,??___fttol+3
  7920  002F8E  2823               	incf	??___fttol,w,c
  7921  002F90  6E27               	movwf	(??___fttol+4)& (0+255),c
  7922  002F92  D004               	goto	i2u374_40
  7923  002F94                     i2u374_45:
  7924  002F94  90D8               	bcf	status,0,c
  7925  002F96  3226               	rrcf	??___fttol+3,f,c
  7926  002F98  3225               	rrcf	??___fttol+2,f,c
  7927  002F9A  3224               	rrcf	??___fttol+1,f,c
  7928  002F9C                     i2u374_40:
  7929  002F9C  2E27               	decfsz	(??___fttol+4)& (0+255),f,c
  7930  002F9E  D7FA               	goto	i2u374_45
  7931  002FA0  5024               	movf	??___fttol+1,w,c
  7932  002FA2  6E2D               	movwf	___fttol@exp1,c
  7933  002FA4  662D               	tstfsz	___fttol@exp1& (0+255),c
  7934  002FA6  D001               	goto	i2l5521
  7935  002FA8  D035               	goto	i2u379_40
  7936  002FAA                     i2l5521:
  7937  002FAA  0E17               	movlw	23
  7938  002FAC  6E23               	movwf	??___fttol& (0+255),c
  7939  002FAE  C01F  F024         	movff	___fttol@f1,??___fttol+1
  7940  002FB2  C020  F025         	movff	___fttol@f1+1,??___fttol+2
  7941  002FB6  C021  F026         	movff	___fttol@f1+2,??___fttol+3
  7942  002FBA  2823               	incf	??___fttol,w,c
  7943  002FBC  6E27               	movwf	(??___fttol+4)& (0+255),c
  7944  002FBE  D004               	goto	i2u376_40
  7945  002FC0                     i2u376_45:
  7946  002FC0  90D8               	bcf	status,0,c
  7947  002FC2  3226               	rrcf	??___fttol+3,f,c
  7948  002FC4  3225               	rrcf	??___fttol+2,f,c
  7949  002FC6  3224               	rrcf	??___fttol+1,f,c
  7950  002FC8                     i2u376_40:
  7951  002FC8  2E27               	decfsz	(??___fttol+4)& (0+255),f,c
  7952  002FCA  D7FA               	goto	i2u376_45
  7953  002FCC  5024               	movf	??___fttol+1,w,c
  7954  002FCE  6E28               	movwf	___fttol@sign1,c
  7955  002FD0  8E20               	bsf	___fttol@f1+1,7,c
  7956  002FD2  0EFF               	movlw	255
  7957  002FD4  161F               	andwf	___fttol@f1,f,c
  7958  002FD6  0EFF               	movlw	255
  7959  002FD8  1620               	andwf	___fttol@f1+1,f,c
  7960  002FDA  0E00               	movlw	0
  7961  002FDC  1621               	andwf	___fttol@f1+2,f,c
  7962  002FDE  501F               	movf	___fttol@f1,w,c
  7963  002FE0  6E29               	movwf	___fttol@lval,c
  7964  002FE2  5020               	movf	___fttol@f1+1,w,c
  7965  002FE4  6E2A               	movwf	___fttol@lval+1,c
  7966  002FE6  5021               	movf	___fttol@f1+2,w,c
  7967  002FE8  6E2B               	movwf	___fttol@lval+2,c
  7968  002FEA  6A2C               	clrf	___fttol@lval+3,c
  7969  002FEC  0E8E               	movlw	142
  7970  002FEE  5E2D               	subwf	___fttol@exp1,f,c
  7971  002FF0  AE2D               	btfss	___fttol@exp1,7,c
  7972  002FF2  D00D               	goto	i2l5543
  7973  002FF4  502D               	movf	___fttol@exp1,w,c
  7974  002FF6  0A80               	xorlw	128
  7975  002FF8  0F8F               	addlw	143
  7976  002FFA  A0D8               	btfss	status,0,c
  7977  002FFC  D00B               	goto	i2u379_40
  7978  002FFE                     i2l5539:
  7979  002FFE  90D8               	bcf	status,0,c
  7980  003000  322C               	rrcf	___fttol@lval+3,f,c
  7981  003002  322B               	rrcf	___fttol@lval+2,f,c
  7982  003004  322A               	rrcf	___fttol@lval+1,f,c
  7983  003006  3229               	rrcf	___fttol@lval,f,c
  7984  003008  3E2D               	incfsz	___fttol@exp1,f,c
  7985  00300A  D7F9               	goto	i2l5539
  7986  00300C  D014               	goto	i2l5553
  7987  00300E                     i2l5543:
  7988  00300E  0E17               	movlw	23
  7989  003010  642D               	cpfsgt	___fttol@exp1,c
  7990  003012  D00F               	goto	i2l5551
  7991  003014                     i2u379_40:
  7992  003014  0E00               	movlw	0
  7993  003016  6E1F               	movwf	?___fttol,c
  7994  003018  0E00               	movlw	0
  7995  00301A  6E20               	movwf	?___fttol+1,c
  7996  00301C  0E00               	movlw	0
  7997  00301E  6E21               	movwf	?___fttol+2,c
  7998  003020  0E00               	movlw	0
  7999  003022  6E22               	movwf	?___fttol+3,c
  8000  003024  D01B               	goto	i2l1064
  8001  003026                     i2l5549:
  8002  003026  90D8               	bcf	status,0,c
  8003  003028  3629               	rlcf	___fttol@lval,f,c
  8004  00302A  362A               	rlcf	___fttol@lval+1,f,c
  8005  00302C  362B               	rlcf	___fttol@lval+2,f,c
  8006  00302E  362C               	rlcf	___fttol@lval+3,f,c
  8007  003030  062D               	decf	___fttol@exp1,f,c
  8008  003032                     i2l5551:
  8009  003032  662D               	tstfsz	___fttol@exp1,c
  8010  003034  D7F8               	goto	i2l5549
  8011  003036                     i2l5553:
  8012  003036  5028               	movf	___fttol@sign1,w,c
  8013  003038  B4D8               	btfsc	status,2,c
  8014  00303A  D008               	goto	i2l5557
  8015  00303C  1E2C               	comf	___fttol@lval+3,f,c
  8016  00303E  1E2B               	comf	___fttol@lval+2,f,c
  8017  003040  1E2A               	comf	___fttol@lval+1,f,c
  8018  003042  6C29               	negf	___fttol@lval,c
  8019  003044  0E00               	movlw	0
  8020  003046  222A               	addwfc	___fttol@lval+1,f,c
  8021  003048  222B               	addwfc	___fttol@lval+2,f,c
  8022  00304A  222C               	addwfc	___fttol@lval+3,f,c
  8023  00304C                     i2l5557:
  8024  00304C  C029  F01F         	movff	___fttol@lval,?___fttol
  8025  003050  C02A  F020         	movff	___fttol@lval+1,?___fttol+1
  8026  003054  C02B  F021         	movff	___fttol@lval+2,?___fttol+2
  8027  003058  C02C  F022         	movff	___fttol@lval+3,?___fttol+3
  8028  00305C                     i2l1064:
  8029  00305C  0012               	return	
  8030  00305E                     __end_of___fttol:
  8031                           	opt stack 0
  8032                           tosu	equ	0xFFF
  8033                           tosh	equ	0xFFE
  8034                           tosl	equ	0xFFD
  8035                           pclatu	equ	0xFFB
  8036                           pclath	equ	0xFFA
  8037                           tblptru	equ	0xFF8
  8038                           tblptrh	equ	0xFF7
  8039                           tblptrl	equ	0xFF6
  8040                           tablat	equ	0xFF5
  8041                           prodh	equ	0xFF4
  8042                           prodl	equ	0xFF3
  8043                           intcon	equ	0xFF2
  8044                           intcon2	equ	0xFF1
  8045                           indf0	equ	0xFEF
  8046                           postinc0	equ	0xFEE
  8047                           fsr0h	equ	0xFEA
  8048                           fsr0l	equ	0xFE9
  8049                           wreg	equ	0xFE8
  8050                           postinc1	equ	0xFE6
  8051                           postdec1	equ	0xFE5
  8052                           fsr1h	equ	0xFE2
  8053                           fsr1l	equ	0xFE1
  8054                           indf2	equ	0xFDF
  8055                           postinc2	equ	0xFDE
  8056                           postdec2	equ	0xFDD
  8057                           plusw2	equ	0xFDB
  8058                           fsr2h	equ	0xFDA
  8059                           fsr2l	equ	0xFD9
  8060                           status	equ	0xFD8
  8061                           
  8062 ;; *************** function ___ftneg *****************
  8063 ;; Defined at:
  8064 ;;		line 16 in file "/usr/opt/microchip/xc8/v1.20/sources/common/ftneg.c"
  8065 ;; Parameters:    Size  Location     Type
  8066 ;;  f1              3    0[COMRAM] float 
  8067 ;; Auto vars:     Size  Location     Type
  8068 ;;		None
  8069 ;; Return value:  Size  Location     Type
  8070 ;;                  3    0[COMRAM] float 
  8071 ;; Registers used:
  8072 ;;		wreg, status,2, status,0
  8073 ;; Tracked objects:
  8074 ;;		On entry : 0/0
  8075 ;;		On exit  : 0/0
  8076 ;;		Unchanged: 0/0
  8077 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8078 ;;      Params:         3       0       0       0       0       0       0       0       0
  8079 ;;      Locals:         0       0       0       0       0       0       0       0       0
  8080 ;;      Temps:          0       0       0       0       0       0       0       0       0
  8081 ;;      Totals:         3       0       0       0       0       0       0       0       0
  8082 ;;Total ram usage:        3 bytes
  8083 ;; Hardware stack levels used:    1
  8084 ;; This function calls:
  8085 ;;		Nothing
  8086 ;; This function is called by:
  8087 ;;		_sprintf
  8088 ;; This function uses a non-reentrant model
  8089 ;;
  8090                           
  8091                           	psect	text26
  8092  003CFA                     __ptext26:
  8093                           	opt stack 0
  8094  003CFA                     ___ftneg:
  8095                           	opt stack 23
  8096                           
  8097                           ;incstack = 0
  8098                           ;incstack = 0
  8099  003CFA  0E7F               	movlw	127
  8100  003CFC  1403               	andwf	___ftneg@f1+2,w,c
  8101  003CFE  1002               	iorwf	___ftneg@f1+1,w,c
  8102  003D00  1001               	iorwf	___ftneg@f1,w,c
  8103  003D02  B4D8               	btfsc	status,2,c
  8104  003D04  D006               	goto	i2l1054
  8105  003D06  0E00               	movlw	0
  8106  003D08  1A01               	xorwf	___ftneg@f1,f,c
  8107  003D0A  0E00               	movlw	0
  8108  003D0C  1A02               	xorwf	___ftneg@f1+1,f,c
  8109  003D0E  0E80               	movlw	128
  8110  003D10  1A03               	xorwf	___ftneg@f1+2,f,c
  8111  003D12                     i2l1054:
  8112  003D12  C001  F001         	movff	___ftneg@f1,?___ftneg
  8113  003D16  C002  F002         	movff	___ftneg@f1+1,?___ftneg+1
  8114  003D1A  C003  F003         	movff	___ftneg@f1+2,?___ftneg+2
  8115  003D1E  0012               	return	
  8116  003D20                     __end_of___ftneg:
  8117                           	opt stack 0
  8118                           tosu	equ	0xFFF
  8119                           tosh	equ	0xFFE
  8120                           tosl	equ	0xFFD
  8121                           pclatu	equ	0xFFB
  8122                           pclath	equ	0xFFA
  8123                           tblptru	equ	0xFF8
  8124                           tblptrh	equ	0xFF7
  8125                           tblptrl	equ	0xFF6
  8126                           tablat	equ	0xFF5
  8127                           prodh	equ	0xFF4
  8128                           prodl	equ	0xFF3
  8129                           intcon	equ	0xFF2
  8130                           intcon2	equ	0xFF1
  8131                           indf0	equ	0xFEF
  8132                           postinc0	equ	0xFEE
  8133                           fsr0h	equ	0xFEA
  8134                           fsr0l	equ	0xFE9
  8135                           wreg	equ	0xFE8
  8136                           postinc1	equ	0xFE6
  8137                           postdec1	equ	0xFE5
  8138                           fsr1h	equ	0xFE2
  8139                           fsr1l	equ	0xFE1
  8140                           indf2	equ	0xFDF
  8141                           postinc2	equ	0xFDE
  8142                           postdec2	equ	0xFDD
  8143                           plusw2	equ	0xFDB
  8144                           fsr2h	equ	0xFDA
  8145                           fsr2l	equ	0xFD9
  8146                           status	equ	0xFD8
  8147                           
  8148 ;; *************** function ___ftge *****************
  8149 ;; Defined at:
  8150 ;;		line 5 in file "/usr/opt/microchip/xc8/v1.20/sources/common/ftge.c"
  8151 ;; Parameters:    Size  Location     Type
  8152 ;;  ff1             3    0[COMRAM] float 
  8153 ;;  ff2             3    3[COMRAM] float 
  8154 ;; Auto vars:     Size  Location     Type
  8155 ;;		None
  8156 ;; Return value:  Size  Location     Type
  8157 ;;		None               void
  8158 ;; Registers used:
  8159 ;;		wreg, status,2, status,0
  8160 ;; Tracked objects:
  8161 ;;		On entry : 0/0
  8162 ;;		On exit  : 0/0
  8163 ;;		Unchanged: 0/0
  8164 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8165 ;;      Params:         6       0       0       0       0       0       0       0       0
  8166 ;;      Locals:         0       0       0       0       0       0       0       0       0
  8167 ;;      Temps:          3       0       0       0       0       0       0       0       0
  8168 ;;      Totals:         9       0       0       0       0       0       0       0       0
  8169 ;;Total ram usage:        9 bytes
  8170 ;; Hardware stack levels used:    1
  8171 ;; This function calls:
  8172 ;;		Nothing
  8173 ;; This function is called by:
  8174 ;;		_sprintf
  8175 ;; This function uses a non-reentrant model
  8176 ;;
  8177                           
  8178                           	psect	text27
  8179  00346A                     __ptext27:
  8180                           	opt stack 0
  8181  00346A                     ___ftge:
  8182                           	opt stack 23
  8183                           
  8184                           ;incstack = 0
  8185                           ;incstack = 0
  8186  00346A  AE03               	btfss	___ftge@ff1+2,7,c
  8187  00346C  D016               	goto	i2l4921
  8188  00346E  C001  F007         	movff	___ftge@ff1,??___ftge
  8189  003472  C002  F008         	movff	___ftge@ff1+1,??___ftge+1
  8190  003476  C003  F009         	movff	___ftge@ff1+2,??___ftge+2
  8191  00347A  1E07               	comf	??___ftge,f,c
  8192  00347C  1E08               	comf	??___ftge+1,f,c
  8193  00347E  1E09               	comf	??___ftge+2,f,c
  8194  003480  2A07               	incf	??___ftge,f,c
  8195  003482  0E00               	movlw	0
  8196  003484  2208               	addwfc	??___ftge+1,f,c
  8197  003486  2209               	addwfc	??___ftge+2,f,c
  8198  003488  0E00               	movlw	0
  8199  00348A  2407               	addwf	??___ftge,w,c
  8200  00348C  6E01               	movwf	___ftge@ff1,c
  8201  00348E  0E00               	movlw	0
  8202  003490  2008               	addwfc	??___ftge+1,w,c
  8203  003492  6E02               	movwf	___ftge@ff1+1,c
  8204  003494  0E80               	movlw	128
  8205  003496  2009               	addwfc	??___ftge+2,w,c
  8206  003498  6E03               	movwf	___ftge@ff1+2,c
  8207  00349A                     i2l4921:
  8208  00349A  AE06               	btfss	___ftge@ff2+2,7,c
  8209  00349C  D016               	goto	i2l4925
  8210  00349E  C004  F007         	movff	___ftge@ff2,??___ftge
  8211  0034A2  C005  F008         	movff	___ftge@ff2+1,??___ftge+1
  8212  0034A6  C006  F009         	movff	___ftge@ff2+2,??___ftge+2
  8213  0034AA  1E07               	comf	??___ftge,f,c
  8214  0034AC  1E08               	comf	??___ftge+1,f,c
  8215  0034AE  1E09               	comf	??___ftge+2,f,c
  8216  0034B0  2A07               	incf	??___ftge,f,c
  8217  0034B2  0E00               	movlw	0
  8218  0034B4  2208               	addwfc	??___ftge+1,f,c
  8219  0034B6  2209               	addwfc	??___ftge+2,f,c
  8220  0034B8  0E00               	movlw	0
  8221  0034BA  2407               	addwf	??___ftge,w,c
  8222  0034BC  6E04               	movwf	___ftge@ff2,c
  8223  0034BE  0E00               	movlw	0
  8224  0034C0  2008               	addwfc	??___ftge+1,w,c
  8225  0034C2  6E05               	movwf	___ftge@ff2+1,c
  8226  0034C4  0E80               	movlw	128
  8227  0034C6  2009               	addwfc	??___ftge+2,w,c
  8228  0034C8  6E06               	movwf	___ftge@ff2+2,c
  8229  0034CA                     i2l4925:
  8230  0034CA  0E00               	movlw	0
  8231  0034CC  1A01               	xorwf	___ftge@ff1,f,c
  8232  0034CE  0E00               	movlw	0
  8233  0034D0  1A02               	xorwf	___ftge@ff1+1,f,c
  8234  0034D2  0E80               	movlw	128
  8235  0034D4  1A03               	xorwf	___ftge@ff1+2,f,c
  8236  0034D6  0E00               	movlw	0
  8237  0034D8  1A04               	xorwf	___ftge@ff2,f,c
  8238  0034DA  0E00               	movlw	0
  8239  0034DC  1A05               	xorwf	___ftge@ff2+1,f,c
  8240  0034DE  0E80               	movlw	128
  8241  0034E0  1A06               	xorwf	___ftge@ff2+2,f,c
  8242  0034E2  5004               	movf	___ftge@ff2,w,c
  8243  0034E4  5C01               	subwf	___ftge@ff1,w,c
  8244  0034E6  5005               	movf	___ftge@ff2+1,w,c
  8245  0034E8  5802               	subwfb	___ftge@ff1+1,w,c
  8246  0034EA  5006               	movf	___ftge@ff2+2,w,c
  8247  0034EC  5803               	subwfb	___ftge@ff1+2,w,c
  8248  0034EE  B0D8               	btfsc	status,0,c
  8249  0034F0  D002               	goto	i2l4931
  8250  0034F2  90D8               	bcf	status,0,c
  8251  0034F4  D001               	goto	i2l1038
  8252  0034F6                     i2l4931:
  8253  0034F6  80D8               	bsf	status,0,c
  8254  0034F8                     i2l1038:
  8255  0034F8  0012               	return	
  8256  0034FA                     __end_of___ftge:
  8257                           	opt stack 0
  8258                           tosu	equ	0xFFF
  8259                           tosh	equ	0xFFE
  8260                           tosl	equ	0xFFD
  8261                           pclatu	equ	0xFFB
  8262                           pclath	equ	0xFFA
  8263                           tblptru	equ	0xFF8
  8264                           tblptrh	equ	0xFF7
  8265                           tblptrl	equ	0xFF6
  8266                           tablat	equ	0xFF5
  8267                           prodh	equ	0xFF4
  8268                           prodl	equ	0xFF3
  8269                           intcon	equ	0xFF2
  8270                           intcon2	equ	0xFF1
  8271                           indf0	equ	0xFEF
  8272                           postinc0	equ	0xFEE
  8273                           fsr0h	equ	0xFEA
  8274                           fsr0l	equ	0xFE9
  8275                           wreg	equ	0xFE8
  8276                           postinc1	equ	0xFE6
  8277                           postdec1	equ	0xFE5
  8278                           fsr1h	equ	0xFE2
  8279                           fsr1l	equ	0xFE1
  8280                           indf2	equ	0xFDF
  8281                           postinc2	equ	0xFDE
  8282                           postdec2	equ	0xFDD
  8283                           plusw2	equ	0xFDB
  8284                           fsr2h	equ	0xFDA
  8285                           fsr2l	equ	0xFD9
  8286                           status	equ	0xFD8
  8287                           
  8288 ;; *************** function ___asftsub *****************
  8289 ;; Defined at:
  8290 ;;		line 5 in file "/usr/opt/microchip/xc8/v1.20/sources/pic18/asftsub.c"
  8291 ;; Parameters:    Size  Location     Type
  8292 ;;  f1p             2   82[COMRAM] PTR float 
  8293 ;;		 -> sprintf@fval(3), 
  8294 ;;  f2              3   84[COMRAM] float 
  8295 ;; Auto vars:     Size  Location     Type
  8296 ;;		None
  8297 ;; Return value:  Size  Location     Type
  8298 ;;                  3   82[COMRAM] float 
  8299 ;; Registers used:
  8300 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  8301 ;; Tracked objects:
  8302 ;;		On entry : 0/0
  8303 ;;		On exit  : 0/0
  8304 ;;		Unchanged: 0/0
  8305 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8306 ;;      Params:         5       0       0       0       0       0       0       0       0
  8307 ;;      Locals:         0       0       0       0       0       0       0       0       0
  8308 ;;      Temps:          0       0       0       0       0       0       0       0       0
  8309 ;;      Totals:         5       0       0       0       0       0       0       0       0
  8310 ;;Total ram usage:        5 bytes
  8311 ;; Hardware stack levels used:    1
  8312 ;; Hardware stack levels required when called:    3
  8313 ;; This function calls:
  8314 ;;		___ftsub
  8315 ;; This function is called by:
  8316 ;;		_sprintf
  8317 ;; This function uses a non-reentrant model
  8318 ;;
  8319                           
  8320                           	psect	text28
  8321  003AF0                     __ptext28:
  8322                           	opt stack 0
  8323  003AF0                     ___asftsub:
  8324                           	opt stack 20
  8325                           
  8326                           ;	Return value of ___asftsub is never used
  8327                           
  8328                           ;incstack = 0
  8329                           ;incstack = 0
  8330  003AF0  C053  FFD9         	movff	___asftsub@f1p,fsr2l
  8331  003AF4  C054  FFDA         	movff	___asftsub@f1p+1,fsr2h
  8332  003AF8  CFDE F04D          	movff	postinc2,?___ftsub
  8333  003AFC  CFDE F04E          	movff	postinc2,?___ftsub+1
  8334  003B00  CFDD F04F          	movff	postdec2,?___ftsub+2
  8335  003B04  C055  F050         	movff	___asftsub@f2,?___ftsub+3
  8336  003B08  C056  F051         	movff	___asftsub@f2+1,?___ftsub+4
  8337  003B0C  C057  F052         	movff	___asftsub@f2+2,?___ftsub+5
  8338  003B10  EC0C  F01E         	call	___ftsub	;wreg free
  8339  003B14  C053  FFD9         	movff	___asftsub@f1p,fsr2l
  8340  003B18  C054  FFDA         	movff	___asftsub@f1p+1,fsr2h
  8341  003B1C  C04D  FFDE         	movff	?___ftsub,postinc2
  8342  003B20  C04E  FFDE         	movff	?___ftsub+1,postinc2
  8343  003B24  C04F  FFDD         	movff	?___ftsub+2,postdec2
  8344  003B28  52DD               	movf	postdec2,f,c
  8345  003B2A  0012               	return	
  8346  003B2C                     __end_of___asftsub:
  8347                           	opt stack 0
  8348                           tosu	equ	0xFFF
  8349                           tosh	equ	0xFFE
  8350                           tosl	equ	0xFFD
  8351                           pclatu	equ	0xFFB
  8352                           pclath	equ	0xFFA
  8353                           tblptru	equ	0xFF8
  8354                           tblptrh	equ	0xFF7
  8355                           tblptrl	equ	0xFF6
  8356                           tablat	equ	0xFF5
  8357                           prodh	equ	0xFF4
  8358                           prodl	equ	0xFF3
  8359                           intcon	equ	0xFF2
  8360                           intcon2	equ	0xFF1
  8361                           indf0	equ	0xFEF
  8362                           postinc0	equ	0xFEE
  8363                           fsr0h	equ	0xFEA
  8364                           fsr0l	equ	0xFE9
  8365                           wreg	equ	0xFE8
  8366                           postinc1	equ	0xFE6
  8367                           postdec1	equ	0xFE5
  8368                           fsr1h	equ	0xFE2
  8369                           fsr1l	equ	0xFE1
  8370                           indf2	equ	0xFDF
  8371                           postinc2	equ	0xFDE
  8372                           postdec2	equ	0xFDD
  8373                           plusw2	equ	0xFDB
  8374                           fsr2h	equ	0xFDA
  8375                           fsr2l	equ	0xFD9
  8376                           status	equ	0xFD8
  8377                           
  8378 ;; *************** function ___ftsub *****************
  8379 ;; Defined at:
  8380 ;;		line 22 in file "/usr/opt/microchip/xc8/v1.20/sources/common/ftsub.c"
  8381 ;; Parameters:    Size  Location     Type
  8382 ;;  f1              3   76[COMRAM] float 
  8383 ;;  f2              3   79[COMRAM] float 
  8384 ;; Auto vars:     Size  Location     Type
  8385 ;;		None
  8386 ;; Return value:  Size  Location     Type
  8387 ;;                  3   76[COMRAM] float 
  8388 ;; Registers used:
  8389 ;;		wreg, status,2, status,0, cstack
  8390 ;; Tracked objects:
  8391 ;;		On entry : 0/0
  8392 ;;		On exit  : 0/0
  8393 ;;		Unchanged: 0/0
  8394 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8395 ;;      Params:         6       0       0       0       0       0       0       0       0
  8396 ;;      Locals:         0       0       0       0       0       0       0       0       0
  8397 ;;      Temps:          0       0       0       0       0       0       0       0       0
  8398 ;;      Totals:         6       0       0       0       0       0       0       0       0
  8399 ;;Total ram usage:        6 bytes
  8400 ;; Hardware stack levels used:    1
  8401 ;; Hardware stack levels required when called:    2
  8402 ;; This function calls:
  8403 ;;		___ftadd
  8404 ;; This function is called by:
  8405 ;;		___asftsub
  8406 ;; This function uses a non-reentrant model
  8407 ;;
  8408                           
  8409                           	psect	text29
  8410  003C18                     __ptext29:
  8411                           	opt stack 0
  8412  003C18                     ___ftsub:
  8413                           	opt stack 20
  8414                           
  8415                           ;incstack = 0
  8416                           ;incstack = 0
  8417  003C18  0E00               	movlw	0
  8418  003C1A  1A50               	xorwf	___ftsub@f2,f,c
  8419  003C1C  0E00               	movlw	0
  8420  003C1E  1A51               	xorwf	___ftsub@f2+1,f,c
  8421  003C20  0E80               	movlw	128
  8422  003C22  1A52               	xorwf	___ftsub@f2+2,f,c
  8423  003C24  C04D  F03F         	movff	___ftsub@f1,?___ftadd
  8424  003C28  C04E  F040         	movff	___ftsub@f1+1,?___ftadd+1
  8425  003C2C  C04F  F041         	movff	___ftsub@f1+2,?___ftadd+2
  8426  003C30  C050  F042         	movff	___ftsub@f2,?___ftadd+3
  8427  003C34  C051  F043         	movff	___ftsub@f2+1,?___ftadd+4
  8428  003C38  C052  F044         	movff	___ftsub@f2+2,?___ftadd+5
  8429  003C3C  EC1B  F012         	call	___ftadd	;wreg free
  8430  003C40  C041  F04F         	movff	?___ftadd+2,?___ftsub+2
  8431  003C44  C040  F04E         	movff	?___ftadd+1,?___ftsub+1
  8432  003C48  C03F  F04D         	movff	?___ftadd,?___ftsub
  8433  003C4C  0012               	return	
  8434  003C4E                     __end_of___ftsub:
  8435                           	opt stack 0
  8436                           tosu	equ	0xFFF
  8437                           tosh	equ	0xFFE
  8438                           tosl	equ	0xFFD
  8439                           pclatu	equ	0xFFB
  8440                           pclath	equ	0xFFA
  8441                           tblptru	equ	0xFF8
  8442                           tblptrh	equ	0xFF7
  8443                           tblptrl	equ	0xFF6
  8444                           tablat	equ	0xFF5
  8445                           prodh	equ	0xFF4
  8446                           prodl	equ	0xFF3
  8447                           intcon	equ	0xFF2
  8448                           intcon2	equ	0xFF1
  8449                           indf0	equ	0xFEF
  8450                           postinc0	equ	0xFEE
  8451                           fsr0h	equ	0xFEA
  8452                           fsr0l	equ	0xFE9
  8453                           wreg	equ	0xFE8
  8454                           postinc1	equ	0xFE6
  8455                           postdec1	equ	0xFE5
  8456                           fsr1h	equ	0xFE2
  8457                           fsr1l	equ	0xFE1
  8458                           indf2	equ	0xFDF
  8459                           postinc2	equ	0xFDE
  8460                           postdec2	equ	0xFDD
  8461                           plusw2	equ	0xFDB
  8462                           fsr2h	equ	0xFDA
  8463                           fsr2l	equ	0xFD9
  8464                           status	equ	0xFD8
  8465                           
  8466 ;; *************** function ___asftmul *****************
  8467 ;; Defined at:
  8468 ;;		line 5 in file "/usr/opt/microchip/xc8/v1.20/sources/pic18/asftmul.c"
  8469 ;; Parameters:    Size  Location     Type
  8470 ;;  f1p             2   62[COMRAM] PTR float 
  8471 ;;		 -> sprintf@integ(3), 
  8472 ;;  f2              3   64[COMRAM] float 
  8473 ;; Auto vars:     Size  Location     Type
  8474 ;;		None
  8475 ;; Return value:  Size  Location     Type
  8476 ;;                  3   62[COMRAM] float 
  8477 ;; Registers used:
  8478 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  8479 ;; Tracked objects:
  8480 ;;		On entry : 0/0
  8481 ;;		On exit  : 0/0
  8482 ;;		Unchanged: 0/0
  8483 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8484 ;;      Params:         5       0       0       0       0       0       0       0       0
  8485 ;;      Locals:         0       0       0       0       0       0       0       0       0
  8486 ;;      Temps:          0       0       0       0       0       0       0       0       0
  8487 ;;      Totals:         5       0       0       0       0       0       0       0       0
  8488 ;;Total ram usage:        5 bytes
  8489 ;; Hardware stack levels used:    1
  8490 ;; Hardware stack levels required when called:    2
  8491 ;; This function calls:
  8492 ;;		___ftmul
  8493 ;; This function is called by:
  8494 ;;		_sprintf
  8495 ;; This function uses a non-reentrant model
  8496 ;;
  8497                           
  8498                           	psect	text30
  8499  003B2C                     __ptext30:
  8500                           	opt stack 0
  8501  003B2C                     ___asftmul:
  8502                           	opt stack 21
  8503                           
  8504                           ;	Return value of ___asftmul is never used
  8505                           
  8506                           ;incstack = 0
  8507                           ;incstack = 0
  8508  003B2C  C03F  FFD9         	movff	___asftmul@f1p,fsr2l
  8509  003B30  C040  FFDA         	movff	___asftmul@f1p+1,fsr2h
  8510  003B34  CFDE F02E          	movff	postinc2,?___ftmul
  8511  003B38  CFDE F02F          	movff	postinc2,?___ftmul+1
  8512  003B3C  CFDD F030          	movff	postdec2,?___ftmul+2
  8513  003B40  C041  F031         	movff	___asftmul@f2,?___ftmul+3
  8514  003B44  C042  F032         	movff	___asftmul@f2+1,?___ftmul+4
  8515  003B48  C043  F033         	movff	___asftmul@f2+2,?___ftmul+5
  8516  003B4C  ECC4  F015         	call	___ftmul	;wreg free
  8517  003B50  C03F  FFD9         	movff	___asftmul@f1p,fsr2l
  8518  003B54  C040  FFDA         	movff	___asftmul@f1p+1,fsr2h
  8519  003B58  C02E  FFDE         	movff	?___ftmul,postinc2
  8520  003B5C  C02F  FFDE         	movff	?___ftmul+1,postinc2
  8521  003B60  C030  FFDD         	movff	?___ftmul+2,postdec2
  8522  003B64  52DD               	movf	postdec2,f,c
  8523  003B66  0012               	return	
  8524  003B68                     __end_of___asftmul:
  8525                           	opt stack 0
  8526                           tosu	equ	0xFFF
  8527                           tosh	equ	0xFFE
  8528                           tosl	equ	0xFFD
  8529                           pclatu	equ	0xFFB
  8530                           pclath	equ	0xFFA
  8531                           tblptru	equ	0xFF8
  8532                           tblptrh	equ	0xFF7
  8533                           tblptrl	equ	0xFF6
  8534                           tablat	equ	0xFF5
  8535                           prodh	equ	0xFF4
  8536                           prodl	equ	0xFF3
  8537                           intcon	equ	0xFF2
  8538                           intcon2	equ	0xFF1
  8539                           indf0	equ	0xFEF
  8540                           postinc0	equ	0xFEE
  8541                           fsr0h	equ	0xFEA
  8542                           fsr0l	equ	0xFE9
  8543                           wreg	equ	0xFE8
  8544                           postinc1	equ	0xFE6
  8545                           postdec1	equ	0xFE5
  8546                           fsr1h	equ	0xFE2
  8547                           fsr1l	equ	0xFE1
  8548                           indf2	equ	0xFDF
  8549                           postinc2	equ	0xFDE
  8550                           postdec2	equ	0xFDD
  8551                           plusw2	equ	0xFDB
  8552                           fsr2h	equ	0xFDA
  8553                           fsr2l	equ	0xFD9
  8554                           status	equ	0xFD8
  8555                           
  8556 ;; *************** function ___asftadd *****************
  8557 ;; Defined at:
  8558 ;;		line 5 in file "/usr/opt/microchip/xc8/v1.20/sources/pic18/asftadd.c"
  8559 ;; Parameters:    Size  Location     Type
  8560 ;;  f1p             2   77[COMRAM] PTR float 
  8561 ;;		 -> sprintf@fval(3), getTemp@total(3), 
  8562 ;;  f2              3   79[COMRAM] float 
  8563 ;; Auto vars:     Size  Location     Type
  8564 ;;		None
  8565 ;; Return value:  Size  Location     Type
  8566 ;;                  3   77[COMRAM] float 
  8567 ;; Registers used:
  8568 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  8569 ;; Tracked objects:
  8570 ;;		On entry : 0/0
  8571 ;;		On exit  : 0/0
  8572 ;;		Unchanged: 0/0
  8573 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8574 ;;      Params:         5       0       0       0       0       0       0       0       0
  8575 ;;      Locals:         0       0       0       0       0       0       0       0       0
  8576 ;;      Temps:          0       0       0       0       0       0       0       0       0
  8577 ;;      Totals:         5       0       0       0       0       0       0       0       0
  8578 ;;Total ram usage:        5 bytes
  8579 ;; Hardware stack levels used:    1
  8580 ;; Hardware stack levels required when called:    2
  8581 ;; This function calls:
  8582 ;;		___ftadd
  8583 ;; This function is called by:
  8584 ;;		_getTemp
  8585 ;;		_sprintf
  8586 ;; This function uses a non-reentrant model
  8587 ;;
  8588                           
  8589                           	psect	text31
  8590  003B68                     __ptext31:
  8591                           	opt stack 0
  8592  003B68                     ___asftadd:
  8593                           	opt stack 22
  8594                           
  8595                           ;	Return value of ___asftadd is never used
  8596                           
  8597                           ;incstack = 0
  8598                           ;incstack = 0
  8599  003B68  C04E  FFD9         	movff	___asftadd@f1p,fsr2l
  8600  003B6C  C04F  FFDA         	movff	___asftadd@f1p+1,fsr2h
  8601  003B70  CFDE F03F          	movff	postinc2,?___ftadd
  8602  003B74  CFDE F040          	movff	postinc2,?___ftadd+1
  8603  003B78  CFDD F041          	movff	postdec2,?___ftadd+2
  8604  003B7C  C050  F042         	movff	___asftadd@f2,?___ftadd+3
  8605  003B80  C051  F043         	movff	___asftadd@f2+1,?___ftadd+4
  8606  003B84  C052  F044         	movff	___asftadd@f2+2,?___ftadd+5
  8607  003B88  EC1B  F012         	call	___ftadd	;wreg free
  8608  003B8C  C04E  FFD9         	movff	___asftadd@f1p,fsr2l
  8609  003B90  C04F  FFDA         	movff	___asftadd@f1p+1,fsr2h
  8610  003B94  C03F  FFDE         	movff	?___ftadd,postinc2
  8611  003B98  C040  FFDE         	movff	?___ftadd+1,postinc2
  8612  003B9C  C041  FFDD         	movff	?___ftadd+2,postdec2
  8613  003BA0  52DD               	movf	postdec2,f,c
  8614  003BA2  0012               	return	
  8615  003BA4                     __end_of___asftadd:
  8616                           	opt stack 0
  8617                           tosu	equ	0xFFF
  8618                           tosh	equ	0xFFE
  8619                           tosl	equ	0xFFD
  8620                           pclatu	equ	0xFFB
  8621                           pclath	equ	0xFFA
  8622                           tblptru	equ	0xFF8
  8623                           tblptrh	equ	0xFF7
  8624                           tblptrl	equ	0xFF6
  8625                           tablat	equ	0xFF5
  8626                           prodh	equ	0xFF4
  8627                           prodl	equ	0xFF3
  8628                           intcon	equ	0xFF2
  8629                           intcon2	equ	0xFF1
  8630                           indf0	equ	0xFEF
  8631                           postinc0	equ	0xFEE
  8632                           fsr0h	equ	0xFEA
  8633                           fsr0l	equ	0xFE9
  8634                           wreg	equ	0xFE8
  8635                           postinc1	equ	0xFE6
  8636                           postdec1	equ	0xFE5
  8637                           fsr1h	equ	0xFE2
  8638                           fsr1l	equ	0xFE1
  8639                           indf2	equ	0xFDF
  8640                           postinc2	equ	0xFDE
  8641                           postdec2	equ	0xFDD
  8642                           plusw2	equ	0xFDB
  8643                           fsr2h	equ	0xFDA
  8644                           fsr2l	equ	0xFD9
  8645                           status	equ	0xFD8
  8646                           
  8647 ;; *************** function ___ftadd *****************
  8648 ;; Defined at:
  8649 ;;		line 87 in file "/usr/opt/microchip/xc8/v1.20/sources/common/ftadd.c"
  8650 ;; Parameters:    Size  Location     Type
  8651 ;;  f1              3   62[COMRAM] float 
  8652 ;;  f2              3   65[COMRAM] float 
  8653 ;; Auto vars:     Size  Location     Type
  8654 ;;  exp1            1   75[COMRAM] unsigned char 
  8655 ;;  exp2            1   74[COMRAM] unsigned char 
  8656 ;;  sign            1   73[COMRAM] unsigned char 
  8657 ;; Return value:  Size  Location     Type
  8658 ;;                  3   62[COMRAM] float 
  8659 ;; Registers used:
  8660 ;;		wreg, status,2, status,0, cstack
  8661 ;; Tracked objects:
  8662 ;;		On entry : 0/0
  8663 ;;		On exit  : 0/0
  8664 ;;		Unchanged: 0/0
  8665 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8666 ;;      Params:         6       0       0       0       0       0       0       0       0
  8667 ;;      Locals:         3       0       0       0       0       0       0       0       0
  8668 ;;      Temps:          5       0       0       0       0       0       0       0       0
  8669 ;;      Totals:        14       0       0       0       0       0       0       0       0
  8670 ;;Total ram usage:       14 bytes
  8671 ;; Hardware stack levels used:    1
  8672 ;; Hardware stack levels required when called:    1
  8673 ;; This function calls:
  8674 ;;		___ftpack
  8675 ;; This function is called by:
  8676 ;;		_getTemp
  8677 ;;		___asftadd
  8678 ;;		___ftsub
  8679 ;; This function uses a non-reentrant model
  8680 ;;
  8681                           
  8682                           	psect	text32
  8683  002436                     __ptext32:
  8684                           	opt stack 0
  8685  002436                     ___ftadd:
  8686                           	opt stack 23
  8687                           
  8688                           ;incstack = 0
  8689                           ;incstack = 0
  8690  002436  0E0F               	movlw	15
  8691  002438  6E45               	movwf	??___ftadd& (0+255),c
  8692  00243A  C03F  F046         	movff	___ftadd@f1,??___ftadd+1
  8693  00243E  C040  F047         	movff	___ftadd@f1+1,??___ftadd+2
  8694  002442  C041  F048         	movff	___ftadd@f1+2,??___ftadd+3
  8695  002446  2845               	incf	??___ftadd,w,c
  8696  002448  6E49               	movwf	(??___ftadd+4)& (0+255),c
  8697  00244A  D004               	goto	i2u353_40
  8698  00244C                     i2u353_45:
  8699  00244C  90D8               	bcf	status,0,c
  8700  00244E  3248               	rrcf	??___ftadd+3,f,c
  8701  002450  3247               	rrcf	??___ftadd+2,f,c
  8702  002452  3246               	rrcf	??___ftadd+1,f,c
  8703  002454                     i2u353_40:
  8704  002454  2E49               	decfsz	(??___ftadd+4)& (0+255),f,c
  8705  002456  D7FA               	goto	i2u353_45
  8706  002458  5046               	movf	??___ftadd+1,w,c
  8707  00245A  6E4C               	movwf	___ftadd@exp1,c
  8708  00245C  0E0F               	movlw	15
  8709  00245E  6E45               	movwf	??___ftadd& (0+255),c
  8710  002460  C042  F046         	movff	___ftadd@f2,??___ftadd+1
  8711  002464  C043  F047         	movff	___ftadd@f2+1,??___ftadd+2
  8712  002468  C044  F048         	movff	___ftadd@f2+2,??___ftadd+3
  8713  00246C  2845               	incf	??___ftadd,w,c
  8714  00246E  6E49               	movwf	(??___ftadd+4)& (0+255),c
  8715  002470  D004               	goto	i2u354_40
  8716  002472                     i2u354_45:
  8717  002472  90D8               	bcf	status,0,c
  8718  002474  3248               	rrcf	??___ftadd+3,f,c
  8719  002476  3247               	rrcf	??___ftadd+2,f,c
  8720  002478  3246               	rrcf	??___ftadd+1,f,c
  8721  00247A                     i2u354_40:
  8722  00247A  2E49               	decfsz	(??___ftadd+4)& (0+255),f,c
  8723  00247C  D7FA               	goto	i2u354_45
  8724  00247E  5046               	movf	??___ftadd+1,w,c
  8725  002480  6E4B               	movwf	___ftadd@exp2,c
  8726  002482  504C               	movf	___ftadd@exp1,w,c
  8727  002484  B4D8               	btfsc	status,2,c
  8728  002486  D00B               	goto	i2l980
  8729  002488  504B               	movf	___ftadd@exp2,w,c
  8730  00248A  604C               	cpfslt	___ftadd@exp1,c
  8731  00248C  D00F               	goto	i2l5449
  8732  00248E  504C               	movf	___ftadd@exp1,w,c
  8733  002490  0800               	sublw	0
  8734  002492  244B               	addwf	___ftadd@exp2,w,c
  8735  002494  6E45               	movwf	??___ftadd& (0+255),c
  8736  002496  0E19               	movlw	25
  8737  002498  5C45               	subwf	??___ftadd,w,c
  8738  00249A  A0D8               	btfss	status,0,c
  8739  00249C  D007               	goto	i2l5449
  8740  00249E                     i2l980:
  8741  00249E  C042  F03F         	movff	___ftadd@f2,?___ftadd
  8742  0024A2  C043  F040         	movff	___ftadd@f2+1,?___ftadd+1
  8743  0024A6  C044  F041         	movff	___ftadd@f2+2,?___ftadd+2
  8744  0024AA  D0AA               	goto	i2l981
  8745  0024AC                     i2l5449:
  8746  0024AC  504B               	movf	___ftadd@exp2,w,c
  8747  0024AE  B4D8               	btfsc	status,2,c
  8748  0024B0  D00B               	goto	i2l984
  8749  0024B2  504C               	movf	___ftadd@exp1,w,c
  8750  0024B4  604B               	cpfslt	___ftadd@exp2,c
  8751  0024B6  D00F               	goto	i2l5455
  8752  0024B8  504B               	movf	___ftadd@exp2,w,c
  8753  0024BA  0800               	sublw	0
  8754  0024BC  244C               	addwf	___ftadd@exp1,w,c
  8755  0024BE  6E45               	movwf	??___ftadd& (0+255),c
  8756  0024C0  0E19               	movlw	25
  8757  0024C2  5C45               	subwf	??___ftadd,w,c
  8758  0024C4  A0D8               	btfss	status,0,c
  8759  0024C6  D007               	goto	i2l5455
  8760  0024C8                     i2l984:
  8761  0024C8  C03F  F03F         	movff	___ftadd@f1,?___ftadd
  8762  0024CC  C040  F040         	movff	___ftadd@f1+1,?___ftadd+1
  8763  0024D0  C041  F041         	movff	___ftadd@f1+2,?___ftadd+2
  8764  0024D4  D095               	goto	i2l981
  8765  0024D6                     i2l5455:
  8766  0024D6  6E45               	movwf	??___ftadd& (0+255),c
  8767  0024D8  0E06               	movlw	6
  8768  0024DA  6E4A               	movwf	___ftadd@sign,c
  8769  0024DC  5045               	movf	??___ftadd& (0+255),w,c
  8770  0024DE  BE41               	btfsc	___ftadd@f1+2,7,c
  8771  0024E0  8E4A               	bsf	___ftadd@sign,7,c
  8772  0024E2  BE44               	btfsc	___ftadd@f2+2,7,c
  8773  0024E4  8C4A               	bsf	___ftadd@sign,6,c
  8774  0024E6  8E40               	bsf	___ftadd@f1+1,7,c
  8775  0024E8  0EFF               	movlw	255
  8776  0024EA  163F               	andwf	___ftadd@f1,f,c
  8777  0024EC  0EFF               	movlw	255
  8778  0024EE  1640               	andwf	___ftadd@f1+1,f,c
  8779  0024F0  0E00               	movlw	0
  8780  0024F2  1641               	andwf	___ftadd@f1+2,f,c
  8781  0024F4  8E43               	bsf	___ftadd@f2+1,7,c
  8782  0024F6  0EFF               	movlw	255
  8783  0024F8  1642               	andwf	___ftadd@f2,f,c
  8784  0024FA  0EFF               	movlw	255
  8785  0024FC  1643               	andwf	___ftadd@f2+1,f,c
  8786  0024FE  0E00               	movlw	0
  8787  002500  1644               	andwf	___ftadd@f2+2,f,c
  8788  002502  504B               	movf	___ftadd@exp2,w,c
  8789  002504  604C               	cpfslt	___ftadd@exp1,c
  8790  002506  D018               	goto	i2l5481
  8791  002508                     i2l5471:
  8792  002508  90D8               	bcf	status,0,c
  8793  00250A  3642               	rlcf	___ftadd@f2,f,c
  8794  00250C  3643               	rlcf	___ftadd@f2+1,f,c
  8795  00250E  3644               	rlcf	___ftadd@f2+2,f,c
  8796  002510  064B               	decf	___ftadd@exp2,f,c
  8797  002512  504B               	movf	___ftadd@exp2,w,c
  8798  002514  184C               	xorwf	___ftadd@exp1,w,c
  8799  002516  B4D8               	btfsc	status,2,c
  8800  002518  D00B               	goto	i2l5479
  8801  00251A  064A               	decf	___ftadd@sign,f,c
  8802  00251C  504A               	movf	___ftadd@sign& (0+255),w,c
  8803  00251E  0B07               	andlw	7
  8804  002520  B4D8               	btfsc	status,2,c
  8805  002522  D006               	goto	i2l5479
  8806  002524  D7F1               	goto	i2l5471
  8807  002526                     i2l5477:
  8808  002526  90D8               	bcf	status,0,c
  8809  002528  3241               	rrcf	___ftadd@f1+2,f,c
  8810  00252A  3240               	rrcf	___ftadd@f1+1,f,c
  8811  00252C  323F               	rrcf	___ftadd@f1,f,c
  8812  00252E  2A4C               	incf	___ftadd@exp1,f,c
  8813  002530                     i2l5479:
  8814  002530  504B               	movf	___ftadd@exp2,w,c
  8815  002532  624C               	cpfseq	___ftadd@exp1,c
  8816  002534  D7F8               	goto	i2l5477
  8817  002536  D01A               	goto	i2l995
  8818  002538                     i2l5481:
  8819  002538  504C               	movf	___ftadd@exp1,w,c
  8820  00253A  604B               	cpfslt	___ftadd@exp2,c
  8821  00253C  D017               	goto	i2l995
  8822  00253E                     i2l5483:
  8823  00253E  90D8               	bcf	status,0,c
  8824  002540  363F               	rlcf	___ftadd@f1,f,c
  8825  002542  3640               	rlcf	___ftadd@f1+1,f,c
  8826  002544  3641               	rlcf	___ftadd@f1+2,f,c
  8827  002546  064C               	decf	___ftadd@exp1,f,c
  8828  002548  504B               	movf	___ftadd@exp2,w,c
  8829  00254A  184C               	xorwf	___ftadd@exp1,w,c
  8830  00254C  B4D8               	btfsc	status,2,c
  8831  00254E  D00B               	goto	i2l5491
  8832  002550  064A               	decf	___ftadd@sign,f,c
  8833  002552  504A               	movf	___ftadd@sign& (0+255),w,c
  8834  002554  0B07               	andlw	7
  8835  002556  B4D8               	btfsc	status,2,c
  8836  002558  D006               	goto	i2l5491
  8837  00255A  D7F1               	goto	i2l5483
  8838  00255C                     i2l5489:
  8839  00255C  90D8               	bcf	status,0,c
  8840  00255E  3244               	rrcf	___ftadd@f2+2,f,c
  8841  002560  3243               	rrcf	___ftadd@f2+1,f,c
  8842  002562  3242               	rrcf	___ftadd@f2,f,c
  8843  002564  2A4B               	incf	___ftadd@exp2,f,c
  8844  002566                     i2l5491:
  8845  002566  504B               	movf	___ftadd@exp2,w,c
  8846  002568  624C               	cpfseq	___ftadd@exp1,c
  8847  00256A  D7F8               	goto	i2l5489
  8848  00256C                     i2l995:
  8849  00256C  AE4A               	btfss	___ftadd@sign,7,c
  8850  00256E  D00C               	goto	i2l1004
  8851  002570  0EFF               	movlw	255
  8852  002572  1A3F               	xorwf	___ftadd@f1,f,c
  8853  002574  0EFF               	movlw	255
  8854  002576  1A40               	xorwf	___ftadd@f1+1,f,c
  8855  002578  0EFF               	movlw	255
  8856  00257A  1A41               	xorwf	___ftadd@f1+2,f,c
  8857  00257C  0E01               	movlw	1
  8858  00257E  263F               	addwf	___ftadd@f1,f,c
  8859  002580  0E00               	movlw	0
  8860  002582  2240               	addwfc	___ftadd@f1+1,f,c
  8861  002584  0E00               	movlw	0
  8862  002586  2241               	addwfc	___ftadd@f1+2,f,c
  8863  002588                     i2l1004:
  8864  002588  AC4A               	btfss	___ftadd@sign,6,c
  8865  00258A  D00C               	goto	i2l5497
  8866  00258C  0EFF               	movlw	255
  8867  00258E  1A42               	xorwf	___ftadd@f2,f,c
  8868  002590  0EFF               	movlw	255
  8869  002592  1A43               	xorwf	___ftadd@f2+1,f,c
  8870  002594  0EFF               	movlw	255
  8871  002596  1A44               	xorwf	___ftadd@f2+2,f,c
  8872  002598  0E01               	movlw	1
  8873  00259A  2642               	addwf	___ftadd@f2,f,c
  8874  00259C  0E00               	movlw	0
  8875  00259E  2243               	addwfc	___ftadd@f2+1,f,c
  8876  0025A0  0E00               	movlw	0
  8877  0025A2  2244               	addwfc	___ftadd@f2+2,f,c
  8878  0025A4                     i2l5497:
  8879  0025A4  6E45               	movwf	??___ftadd& (0+255),c
  8880  0025A6  0E00               	movlw	0
  8881  0025A8  6E4A               	movwf	___ftadd@sign,c
  8882  0025AA  5045               	movf	??___ftadd& (0+255),w,c
  8883  0025AC  503F               	movf	___ftadd@f1,w,c
  8884  0025AE  2642               	addwf	___ftadd@f2,f,c
  8885  0025B0  5040               	movf	___ftadd@f1+1,w,c
  8886  0025B2  2243               	addwfc	___ftadd@f2+1,f,c
  8887  0025B4  5041               	movf	___ftadd@f1+2,w,c
  8888  0025B6  2244               	addwfc	___ftadd@f2+2,f,c
  8889  0025B8  AE44               	btfss	___ftadd@f2+2,7,c
  8890  0025BA  D010               	goto	i2l5507
  8891  0025BC  0EFF               	movlw	255
  8892  0025BE  1A42               	xorwf	___ftadd@f2,f,c
  8893  0025C0  0EFF               	movlw	255
  8894  0025C2  1A43               	xorwf	___ftadd@f2+1,f,c
  8895  0025C4  0EFF               	movlw	255
  8896  0025C6  1A44               	xorwf	___ftadd@f2+2,f,c
  8897  0025C8  0E01               	movlw	1
  8898  0025CA  2642               	addwf	___ftadd@f2,f,c
  8899  0025CC  0E00               	movlw	0
  8900  0025CE  2243               	addwfc	___ftadd@f2+1,f,c
  8901  0025D0  0E00               	movlw	0
  8902  0025D2  2244               	addwfc	___ftadd@f2+2,f,c
  8903  0025D4  6E45               	movwf	??___ftadd& (0+255),c
  8904  0025D6  0E01               	movlw	1
  8905  0025D8  6E4A               	movwf	___ftadd@sign,c
  8906  0025DA  5045               	movf	??___ftadd& (0+255),w,c
  8907  0025DC                     i2l5507:
  8908  0025DC  C042  F001         	movff	___ftadd@f2,?___ftpack
  8909  0025E0  C043  F002         	movff	___ftadd@f2+1,?___ftpack+1
  8910  0025E4  C044  F003         	movff	___ftadd@f2+2,?___ftpack+2
  8911  0025E8  C04C  F004         	movff	___ftadd@exp1,?___ftpack+3
  8912  0025EC  C04A  F005         	movff	___ftadd@sign,?___ftpack+4
  8913  0025F0  EC96  F018         	call	___ftpack	;wreg free
  8914  0025F4  C003  F041         	movff	?___ftpack+2,?___ftadd+2
  8915  0025F8  C002  F040         	movff	?___ftpack+1,?___ftadd+1
  8916  0025FC  C001  F03F         	movff	?___ftpack,?___ftadd
  8917  002600                     i2l981:
  8918  002600  0012               	return	
  8919  002602                     __end_of___ftadd:
  8920                           	opt stack 0
  8921                           tosu	equ	0xFFF
  8922                           tosh	equ	0xFFE
  8923                           tosl	equ	0xFFD
  8924                           pclatu	equ	0xFFB
  8925                           pclath	equ	0xFFA
  8926                           tblptru	equ	0xFF8
  8927                           tblptrh	equ	0xFF7
  8928                           tblptrl	equ	0xFF6
  8929                           tablat	equ	0xFF5
  8930                           prodh	equ	0xFF4
  8931                           prodl	equ	0xFF3
  8932                           intcon	equ	0xFF2
  8933                           intcon2	equ	0xFF1
  8934                           indf0	equ	0xFEF
  8935                           postinc0	equ	0xFEE
  8936                           fsr0h	equ	0xFEA
  8937                           fsr0l	equ	0xFE9
  8938                           wreg	equ	0xFE8
  8939                           postinc1	equ	0xFE6
  8940                           postdec1	equ	0xFE5
  8941                           fsr1h	equ	0xFE2
  8942                           fsr1l	equ	0xFE1
  8943                           indf2	equ	0xFDF
  8944                           postinc2	equ	0xFDE
  8945                           postdec2	equ	0xFDD
  8946                           plusw2	equ	0xFDB
  8947                           fsr2h	equ	0xFDA
  8948                           fsr2l	equ	0xFD9
  8949                           status	equ	0xFD8
  8950                           
  8951 ;; *************** function ___ftpack *****************
  8952 ;; Defined at:
  8953 ;;		line 63 in file "/usr/opt/microchip/xc8/v1.20/sources/common/float.c"
  8954 ;; Parameters:    Size  Location     Type
  8955 ;;  arg             3    0[COMRAM] unsigned um
  8956 ;;  exp             1    3[COMRAM] unsigned char 
  8957 ;;  sign            1    4[COMRAM] unsigned char 
  8958 ;; Auto vars:     Size  Location     Type
  8959 ;;		None
  8960 ;; Return value:  Size  Location     Type
  8961 ;;                  3    0[COMRAM] float 
  8962 ;; Registers used:
  8963 ;;		wreg, status,2, status,0
  8964 ;; Tracked objects:
  8965 ;;		On entry : 0/0
  8966 ;;		On exit  : 0/0
  8967 ;;		Unchanged: 0/0
  8968 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8969 ;;      Params:         5       0       0       0       0       0       0       0       0
  8970 ;;      Locals:         0       0       0       0       0       0       0       0       0
  8971 ;;      Temps:          3       0       0       0       0       0       0       0       0
  8972 ;;      Totals:         8       0       0       0       0       0       0       0       0
  8973 ;;Total ram usage:        8 bytes
  8974 ;; Hardware stack levels used:    1
  8975 ;; This function calls:
  8976 ;;		Nothing
  8977 ;; This function is called by:
  8978 ;;		___ftadd
  8979 ;;		___ftdiv
  8980 ;;		___ftmul
  8981 ;;		___lltoft
  8982 ;;		___lwtoft
  8983 ;; This function uses a non-reentrant model
  8984 ;;
  8985                           
  8986                           	psect	text33
  8987  00312C                     __ptext33:
  8988                           	opt stack 0
  8989  00312C                     ___ftpack:
  8990                           	opt stack 23
  8991                           
  8992                           ;incstack = 0
  8993                           ;incstack = 0
  8994  00312C  5004               	movf	___ftpack@exp,w,c
  8995  00312E  B4D8               	btfsc	status,2,c
  8996  003130  D005               	goto	i2l4851
  8997  003132  5001               	movf	___ftpack@arg,w,c
  8998  003134  1002               	iorwf	___ftpack@arg+1,w,c
  8999  003136  1003               	iorwf	___ftpack@arg+2,w,c
  9000  003138  A4D8               	btfss	status,2,c
  9001  00313A  D00C               	goto	i2l4857
  9002  00313C                     i2l4851:
  9003  00313C  0E00               	movlw	0
  9004  00313E  6E01               	movwf	?___ftpack,c
  9005  003140  0E00               	movlw	0
  9006  003142  6E02               	movwf	?___ftpack+1,c
  9007  003144  0E00               	movlw	0
  9008  003146  6E03               	movwf	?___ftpack+2,c
  9009  003148  D04C               	goto	i2l943
  9010  00314A                     i2l4855:
  9011  00314A  2A04               	incf	___ftpack@exp,f,c
  9012  00314C  90D8               	bcf	status,0,c
  9013  00314E  3203               	rrcf	___ftpack@arg+2,f,c
  9014  003150  3202               	rrcf	___ftpack@arg+1,f,c
  9015  003152  3201               	rrcf	___ftpack@arg,f,c
  9016  003154                     i2l4857:
  9017  003154  0E00               	movlw	0
  9018  003156  1401               	andwf	___ftpack@arg,w,c
  9019  003158  6E06               	movwf	??___ftpack& (0+255),c
  9020  00315A  0E00               	movlw	0
  9021  00315C  1402               	andwf	___ftpack@arg+1,w,c
  9022  00315E  6E07               	movwf	(??___ftpack+1)& (0+255),c
  9023  003160  0EFE               	movlw	254
  9024  003162  1403               	andwf	___ftpack@arg+2,w,c
  9025  003164  6E08               	movwf	(??___ftpack+2)& (0+255),c
  9026  003166  5006               	movf	??___ftpack,w,c
  9027  003168  1007               	iorwf	??___ftpack+1,w,c
  9028  00316A  1008               	iorwf	??___ftpack+2,w,c
  9029  00316C  B4D8               	btfsc	status,2,c
  9030  00316E  D00C               	goto	i2l4863
  9031  003170  D7EC               	goto	i2l4855
  9032  003172                     i2l4859:
  9033  003172  2A04               	incf	___ftpack@exp,f,c
  9034  003174  0E01               	movlw	1
  9035  003176  2601               	addwf	___ftpack@arg,f,c
  9036  003178  0E00               	movlw	0
  9037  00317A  2202               	addwfc	___ftpack@arg+1,f,c
  9038  00317C  0E00               	movlw	0
  9039  00317E  2203               	addwfc	___ftpack@arg+2,f,c
  9040  003180  90D8               	bcf	status,0,c
  9041  003182  3203               	rrcf	___ftpack@arg+2,f,c
  9042  003184  3202               	rrcf	___ftpack@arg+1,f,c
  9043  003186  3201               	rrcf	___ftpack@arg,f,c
  9044  003188                     i2l4863:
  9045  003188  0E00               	movlw	0
  9046  00318A  1401               	andwf	___ftpack@arg,w,c
  9047  00318C  6E06               	movwf	??___ftpack& (0+255),c
  9048  00318E  0E00               	movlw	0
  9049  003190  1402               	andwf	___ftpack@arg+1,w,c
  9050  003192  6E07               	movwf	(??___ftpack+1)& (0+255),c
  9051  003194  0EFF               	movlw	255
  9052  003196  1403               	andwf	___ftpack@arg+2,w,c
  9053  003198  6E08               	movwf	(??___ftpack+2)& (0+255),c
  9054  00319A  5006               	movf	??___ftpack,w,c
  9055  00319C  1007               	iorwf	??___ftpack+1,w,c
  9056  00319E  1008               	iorwf	??___ftpack+2,w,c
  9057  0031A0  B4D8               	btfsc	status,2,c
  9058  0031A2  D006               	goto	i2l4867
  9059  0031A4  D7E6               	goto	i2l4859
  9060  0031A6                     i2l4865:
  9061  0031A6  0604               	decf	___ftpack@exp,f,c
  9062  0031A8  90D8               	bcf	status,0,c
  9063  0031AA  3601               	rlcf	___ftpack@arg,f,c
  9064  0031AC  3602               	rlcf	___ftpack@arg+1,f,c
  9065  0031AE  3603               	rlcf	___ftpack@arg+2,f,c
  9066  0031B0                     i2l4867:
  9067  0031B0  AE02               	btfss	___ftpack@arg+1,7,c
  9068  0031B2  D7F9               	goto	i2l4865
  9069  0031B4  A004               	btfss	___ftpack@exp,0,c
  9070  0031B6  9E02               	bcf	___ftpack@arg+1,7,c
  9071  0031B8  90D8               	bcf	status,0,c
  9072  0031BA  3204               	rrcf	___ftpack@exp,f,c
  9073  0031BC  5004               	movf	___ftpack@exp,w,c
  9074  0031BE  6E08               	movwf	(??___ftpack+2)& (0+255),c
  9075  0031C0  6A07               	clrf	(??___ftpack+1)& (0+255),c
  9076  0031C2  6A06               	clrf	??___ftpack& (0+255),c
  9077  0031C4  5006               	movf	??___ftpack,w,c
  9078  0031C6  1201               	iorwf	___ftpack@arg,f,c
  9079  0031C8  5007               	movf	??___ftpack+1,w,c
  9080  0031CA  1202               	iorwf	___ftpack@arg+1,f,c
  9081  0031CC  5008               	movf	??___ftpack+2,w,c
  9082  0031CE  1203               	iorwf	___ftpack@arg+2,f,c
  9083  0031D0  5005               	movf	___ftpack@sign,w,c
  9084  0031D2  A4D8               	btfss	status,2,c
  9085  0031D4  8E03               	bsf	___ftpack@arg+2,7,c
  9086  0031D6  C001  F001         	movff	___ftpack@arg,?___ftpack
  9087  0031DA  C002  F002         	movff	___ftpack@arg+1,?___ftpack+1
  9088  0031DE  C003  F003         	movff	___ftpack@arg+2,?___ftpack+2
  9089  0031E2                     i2l943:
  9090  0031E2  0012               	return	
  9091  0031E4                     __end_of___ftpack:
  9092                           	opt stack 0
  9093                           tosu	equ	0xFFF
  9094                           tosh	equ	0xFFE
  9095                           tosl	equ	0xFFD
  9096                           pclatu	equ	0xFFB
  9097                           pclath	equ	0xFFA
  9098                           tblptru	equ	0xFF8
  9099                           tblptrh	equ	0xFF7
  9100                           tblptrl	equ	0xFF6
  9101                           tablat	equ	0xFF5
  9102                           prodh	equ	0xFF4
  9103                           prodl	equ	0xFF3
  9104                           intcon	equ	0xFF2
  9105                           intcon2	equ	0xFF1
  9106                           indf0	equ	0xFEF
  9107                           postinc0	equ	0xFEE
  9108                           fsr0h	equ	0xFEA
  9109                           fsr0l	equ	0xFE9
  9110                           wreg	equ	0xFE8
  9111                           postinc1	equ	0xFE6
  9112                           postdec1	equ	0xFE5
  9113                           fsr1h	equ	0xFE2
  9114                           fsr1l	equ	0xFE1
  9115                           indf2	equ	0xFDF
  9116                           postinc2	equ	0xFDE
  9117                           postdec2	equ	0xFDD
  9118                           plusw2	equ	0xFDB
  9119                           fsr2h	equ	0xFDA
  9120                           fsr2l	equ	0xFD9
  9121                           status	equ	0xFD8
  9122                           
  9123 ;; *************** function __div_to_l_ *****************
  9124 ;; Defined at:
  9125 ;;		line 61 in file "/usr/opt/microchip/xc8/v1.20/sources/common/fldivl.c"
  9126 ;; Parameters:    Size  Location     Type
  9127 ;;  f1              3    0[COMRAM] float 
  9128 ;;  f2              3    3[COMRAM] float 
  9129 ;; Auto vars:     Size  Location     Type
  9130 ;;  quot            4    7[COMRAM] unsigned long 
  9131 ;;  exp1            1   12[COMRAM] unsigned char 
  9132 ;;  cntr            1   11[COMRAM] unsigned char 
  9133 ;; Return value:  Size  Location     Type
  9134 ;;                  4    0[COMRAM] unsigned long 
  9135 ;; Registers used:
  9136 ;;		wreg, status,2, status,0
  9137 ;; Tracked objects:
  9138 ;;		On entry : 0/0
  9139 ;;		On exit  : 0/0
  9140 ;;		Unchanged: 0/0
  9141 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9142 ;;      Params:         6       0       0       0       0       0       0       0       0
  9143 ;;      Locals:         6       0       0       0       0       0       0       0       0
  9144 ;;      Temps:          1       0       0       0       0       0       0       0       0
  9145 ;;      Totals:        13       0       0       0       0       0       0       0       0
  9146 ;;Total ram usage:       13 bytes
  9147 ;; Hardware stack levels used:    1
  9148 ;; This function calls:
  9149 ;;		Nothing
  9150 ;; This function is called by:
  9151 ;;		_sprintf
  9152 ;; This function uses a non-reentrant model
  9153 ;;
  9154                           
  9155                           	psect	text34
  9156  002D96                     __ptext34:
  9157                           	opt stack 0
  9158  002D96                     __div_to_l_:
  9159                           	opt stack 23
  9160                           
  9161                           ;incstack = 0
  9162                           ;incstack = 0
  9163  002D96  3403               	rlcf	(__div_to_l_@f1+2)& (0+255),w,c
  9164  002D98  3404               	rlcf	(__div_to_l_@f1+3)& (0+255),w,c
  9165  002D9A  6E0D               	movwf	__div_to_l_@exp1,c
  9166  002D9C  660D               	tstfsz	__div_to_l_@exp1& (0+255),c
  9167  002D9E  D001               	goto	i2l4797
  9168  002DA0  D05A               	goto	i2u273_40
  9169  002DA2                     i2l4797:
  9170  002DA2  3406               	rlcf	(__div_to_l_@f2+2)& (0+255),w,c
  9171  002DA4  3407               	rlcf	(__div_to_l_@f2+3)& (0+255),w,c
  9172  002DA6  6E0C               	movwf	__div_to_l_@cntr,c
  9173  002DA8  660C               	tstfsz	__div_to_l_@cntr& (0+255),c
  9174  002DAA  D001               	goto	i2l4803
  9175  002DAC  D054               	goto	i2u273_40
  9176  002DAE                     i2l4803:
  9177  002DAE  8E03               	bsf	__div_to_l_@f1+2,7,c
  9178  002DB0  0EFF               	movlw	255
  9179  002DB2  1601               	andwf	__div_to_l_@f1,f,c
  9180  002DB4  0EFF               	movlw	255
  9181  002DB6  1602               	andwf	__div_to_l_@f1+1,f,c
  9182  002DB8  0EFF               	movlw	255
  9183  002DBA  1603               	andwf	__div_to_l_@f1+2,f,c
  9184  002DBC  0E00               	movlw	0
  9185  002DBE  1604               	andwf	__div_to_l_@f1+3,f,c
  9186  002DC0  8E06               	bsf	__div_to_l_@f2+2,7,c
  9187  002DC2  0EFF               	movlw	255
  9188  002DC4  1604               	andwf	__div_to_l_@f2,f,c
  9189  002DC6  0EFF               	movlw	255
  9190  002DC8  1605               	andwf	__div_to_l_@f2+1,f,c
  9191  002DCA  0EFF               	movlw	255
  9192  002DCC  1606               	andwf	__div_to_l_@f2+2,f,c
  9193  002DCE  0E00               	movlw	0
  9194  002DD0  1607               	andwf	__div_to_l_@f2+3,f,c
  9195  002DD2  0E00               	movlw	0
  9196  002DD4  6E08               	movwf	__div_to_l_@quot,c
  9197  002DD6  0E00               	movlw	0
  9198  002DD8  6E09               	movwf	__div_to_l_@quot+1,c
  9199  002DDA  0E00               	movlw	0
  9200  002DDC  6E0A               	movwf	__div_to_l_@quot+2,c
  9201  002DDE  0E00               	movlw	0
  9202  002DE0  6E0B               	movwf	__div_to_l_@quot+3,c
  9203  002DE2  0E7F               	movlw	127
  9204  002DE4  5E0D               	subwf	__div_to_l_@exp1,f,c
  9205  002DE6  500C               	movf	__div_to_l_@cntr,w,c
  9206  002DE8  0FA0               	addlw	160
  9207  002DEA  5E0D               	subwf	__div_to_l_@exp1,f,c
  9208  002DEC  6E07               	movwf	??__div_to_l_& (0+255),c
  9209  002DEE  0E20               	movlw	32
  9210  002DF0  6E0C               	movwf	__div_to_l_@cntr,c
  9211  002DF2  5007               	movf	??__div_to_l_& (0+255),w,c
  9212  002DF4                     i2l904:
  9213  002DF4  90D8               	bcf	status,0,c
  9214  002DF6  3608               	rlcf	__div_to_l_@quot,f,c
  9215  002DF8  3609               	rlcf	__div_to_l_@quot+1,f,c
  9216  002DFA  360A               	rlcf	__div_to_l_@quot+2,f,c
  9217  002DFC  360B               	rlcf	__div_to_l_@quot+3,f,c
  9218  002DFE  5004               	movf	__div_to_l_@f2,w,c
  9219  002E00  5C01               	subwf	__div_to_l_@f1,w,c
  9220  002E02  5005               	movf	__div_to_l_@f2+1,w,c
  9221  002E04  5802               	subwfb	__div_to_l_@f1+1,w,c
  9222  002E06  5006               	movf	__div_to_l_@f2+2,w,c
  9223  002E08  5803               	subwfb	__div_to_l_@f1+2,w,c
  9224  002E0A  5007               	movf	__div_to_l_@f2+3,w,c
  9225  002E0C  5804               	subwfb	__div_to_l_@f1+3,w,c
  9226  002E0E  A0D8               	btfss	status,0,c
  9227  002E10  D009               	goto	i2l4823
  9228  002E12  5004               	movf	__div_to_l_@f2,w,c
  9229  002E14  5E01               	subwf	__div_to_l_@f1,f,c
  9230  002E16  5005               	movf	__div_to_l_@f2+1,w,c
  9231  002E18  5A02               	subwfb	__div_to_l_@f1+1,f,c
  9232  002E1A  5006               	movf	__div_to_l_@f2+2,w,c
  9233  002E1C  5A03               	subwfb	__div_to_l_@f1+2,f,c
  9234  002E1E  5007               	movf	__div_to_l_@f2+3,w,c
  9235  002E20  5A04               	subwfb	__div_to_l_@f1+3,f,c
  9236  002E22  8008               	bsf	__div_to_l_@quot,0,c
  9237  002E24                     i2l4823:
  9238  002E24  90D8               	bcf	status,0,c
  9239  002E26  3601               	rlcf	__div_to_l_@f1,f,c
  9240  002E28  3602               	rlcf	__div_to_l_@f1+1,f,c
  9241  002E2A  3603               	rlcf	__div_to_l_@f1+2,f,c
  9242  002E2C  3604               	rlcf	__div_to_l_@f1+3,f,c
  9243  002E2E  2E0C               	decfsz	__div_to_l_@cntr,f,c
  9244  002E30  D7E1               	goto	i2l904
  9245  002E32  AE0D               	btfss	__div_to_l_@exp1,7,c
  9246  002E34  D00D               	goto	i2l4837
  9247  002E36  500D               	movf	__div_to_l_@exp1,w,c
  9248  002E38  0A80               	xorlw	128
  9249  002E3A  0F9F               	addlw	159
  9250  002E3C  A0D8               	btfss	status,0,c
  9251  002E3E  D00B               	goto	i2u273_40
  9252  002E40                     i2l4833:
  9253  002E40  90D8               	bcf	status,0,c
  9254  002E42  320B               	rrcf	__div_to_l_@quot+3,f,c
  9255  002E44  320A               	rrcf	__div_to_l_@quot+2,f,c
  9256  002E46  3209               	rrcf	__div_to_l_@quot+1,f,c
  9257  002E48  3208               	rrcf	__div_to_l_@quot,f,c
  9258  002E4A  3E0D               	incfsz	__div_to_l_@exp1,f,c
  9259  002E4C  D7F9               	goto	i2l4833
  9260  002E4E  D014               	goto	i2l911
  9261  002E50                     i2l4837:
  9262  002E50  0E1F               	movlw	31
  9263  002E52  640D               	cpfsgt	__div_to_l_@exp1,c
  9264  002E54  D00F               	goto	i2l4845
  9265  002E56                     i2u273_40:
  9266  002E56  0E00               	movlw	0
  9267  002E58  6E01               	movwf	?__div_to_l_,c
  9268  002E5A  0E00               	movlw	0
  9269  002E5C  6E02               	movwf	?__div_to_l_+1,c
  9270  002E5E  0E00               	movlw	0
  9271  002E60  6E03               	movwf	?__div_to_l_+2,c
  9272  002E62  0E00               	movlw	0
  9273  002E64  6E04               	movwf	?__div_to_l_+3,c
  9274  002E66  D010               	goto	i2l902
  9275  002E68                     i2l4843:
  9276  002E68  90D8               	bcf	status,0,c
  9277  002E6A  3608               	rlcf	__div_to_l_@quot,f,c
  9278  002E6C  3609               	rlcf	__div_to_l_@quot+1,f,c
  9279  002E6E  360A               	rlcf	__div_to_l_@quot+2,f,c
  9280  002E70  360B               	rlcf	__div_to_l_@quot+3,f,c
  9281  002E72  060D               	decf	__div_to_l_@exp1,f,c
  9282  002E74                     i2l4845:
  9283  002E74  660D               	tstfsz	__div_to_l_@exp1,c
  9284  002E76  D7F8               	goto	i2l4843
  9285  002E78                     i2l911:
  9286  002E78  C008  F001         	movff	__div_to_l_@quot,?__div_to_l_
  9287  002E7C  C009  F002         	movff	__div_to_l_@quot+1,?__div_to_l_+1
  9288  002E80  C00A  F003         	movff	__div_to_l_@quot+2,?__div_to_l_+2
  9289  002E84  C00B  F004         	movff	__div_to_l_@quot+3,?__div_to_l_+3
  9290  002E88                     i2l902:
  9291  002E88  0012               	return	
  9292  002E8A                     __end_of__div_to_l_:
  9293                           	opt stack 0
  9294                           tosu	equ	0xFFF
  9295                           tosh	equ	0xFFE
  9296                           tosl	equ	0xFFD
  9297                           pclatu	equ	0xFFB
  9298                           pclath	equ	0xFFA
  9299                           tblptru	equ	0xFF8
  9300                           tblptrh	equ	0xFF7
  9301                           tblptrl	equ	0xFF6
  9302                           tablat	equ	0xFF5
  9303                           prodh	equ	0xFF4
  9304                           prodl	equ	0xFF3
  9305                           intcon	equ	0xFF2
  9306                           intcon2	equ	0xFF1
  9307                           indf0	equ	0xFEF
  9308                           postinc0	equ	0xFEE
  9309                           fsr0h	equ	0xFEA
  9310                           fsr0l	equ	0xFE9
  9311                           wreg	equ	0xFE8
  9312                           postinc1	equ	0xFE6
  9313                           postdec1	equ	0xFE5
  9314                           fsr1h	equ	0xFE2
  9315                           fsr1l	equ	0xFE1
  9316                           indf2	equ	0xFDF
  9317                           postinc2	equ	0xFDE
  9318                           postdec2	equ	0xFDD
  9319                           plusw2	equ	0xFDB
  9320                           fsr2h	equ	0xFDA
  9321                           fsr2l	equ	0xFD9
  9322                           status	equ	0xFD8
  9323                           
  9324 ;; *************** function __tdiv_to_l_ *****************
  9325 ;; Defined at:
  9326 ;;		line 61 in file "/usr/opt/microchip/xc8/v1.20/sources/common/ftdivl.c"
  9327 ;; Parameters:    Size  Location     Type
  9328 ;;  f1              3    0[COMRAM] float 
  9329 ;;  f2              3    3[COMRAM] float 
  9330 ;; Auto vars:     Size  Location     Type
  9331 ;;  quot            4   11[COMRAM] unsigned long 
  9332 ;;  exp1            1   16[COMRAM] unsigned char 
  9333 ;;  cntr            1   15[COMRAM] unsigned char 
  9334 ;; Return value:  Size  Location     Type
  9335 ;;                  4    0[COMRAM] unsigned long 
  9336 ;; Registers used:
  9337 ;;		wreg, status,2, status,0
  9338 ;; Tracked objects:
  9339 ;;		On entry : 0/0
  9340 ;;		On exit  : 0/0
  9341 ;;		Unchanged: 0/0
  9342 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9343 ;;      Params:         6       0       0       0       0       0       0       0       0
  9344 ;;      Locals:         6       0       0       0       0       0       0       0       0
  9345 ;;      Temps:          5       0       0       0       0       0       0       0       0
  9346 ;;      Totals:        17       0       0       0       0       0       0       0       0
  9347 ;;Total ram usage:       17 bytes
  9348 ;; Hardware stack levels used:    1
  9349 ;; This function calls:
  9350 ;;		Nothing
  9351 ;; This function is called by:
  9352 ;;		_sprintf
  9353 ;; This function uses a non-reentrant model
  9354 ;;
  9355                           
  9356                           	psect	text35
  9357  002A66                     __ptext35:
  9358                           	opt stack 0
  9359  002A66                     __tdiv_to_l_:
  9360                           	opt stack 23
  9361                           
  9362                           ;incstack = 0
  9363                           ;incstack = 0
  9364  002A66  0E0F               	movlw	15
  9365  002A68  6E07               	movwf	??__tdiv_to_l_& (0+255),c
  9366  002A6A  C001  F008         	movff	__tdiv_to_l_@f1,??__tdiv_to_l_+1
  9367  002A6E  C002  F009         	movff	__tdiv_to_l_@f1+1,??__tdiv_to_l_+2
  9368  002A72  C003  F00A         	movff	__tdiv_to_l_@f1+2,??__tdiv_to_l_+3
  9369  002A76  2807               	incf	??__tdiv_to_l_,w,c
  9370  002A78  6E0B               	movwf	(??__tdiv_to_l_+4)& (0+255),c
  9371  002A7A  D004               	goto	i2u259_40
  9372  002A7C                     i2u259_45:
  9373  002A7C  90D8               	bcf	status,0,c
  9374  002A7E  320A               	rrcf	??__tdiv_to_l_+3,f,c
  9375  002A80  3209               	rrcf	??__tdiv_to_l_+2,f,c
  9376  002A82  3208               	rrcf	??__tdiv_to_l_+1,f,c
  9377  002A84                     i2u259_40:
  9378  002A84  2E0B               	decfsz	(??__tdiv_to_l_+4)& (0+255),f,c
  9379  002A86  D7FA               	goto	i2u259_45
  9380  002A88  5008               	movf	??__tdiv_to_l_+1,w,c
  9381  002A8A  6E11               	movwf	__tdiv_to_l_@exp1,c
  9382  002A8C  6611               	tstfsz	__tdiv_to_l_@exp1& (0+255),c
  9383  002A8E  D001               	goto	i2l4741
  9384  002A90  D061               	goto	i2u266_40
  9385  002A92                     i2l4741:
  9386  002A92  0E0F               	movlw	15
  9387  002A94  6E07               	movwf	??__tdiv_to_l_& (0+255),c
  9388  002A96  C004  F008         	movff	__tdiv_to_l_@f2,??__tdiv_to_l_+1
  9389  002A9A  C005  F009         	movff	__tdiv_to_l_@f2+1,??__tdiv_to_l_+2
  9390  002A9E  C006  F00A         	movff	__tdiv_to_l_@f2+2,??__tdiv_to_l_+3
  9391  002AA2  2807               	incf	??__tdiv_to_l_,w,c
  9392  002AA4  6E0B               	movwf	(??__tdiv_to_l_+4)& (0+255),c
  9393  002AA6  D004               	goto	i2u261_40
  9394  002AA8                     i2u261_45:
  9395  002AA8  90D8               	bcf	status,0,c
  9396  002AAA  320A               	rrcf	??__tdiv_to_l_+3,f,c
  9397  002AAC  3209               	rrcf	??__tdiv_to_l_+2,f,c
  9398  002AAE  3208               	rrcf	??__tdiv_to_l_+1,f,c
  9399  002AB0                     i2u261_40:
  9400  002AB0  2E0B               	decfsz	(??__tdiv_to_l_+4)& (0+255),f,c
  9401  002AB2  D7FA               	goto	i2u261_45
  9402  002AB4  5008               	movf	??__tdiv_to_l_+1,w,c
  9403  002AB6  6E10               	movwf	__tdiv_to_l_@cntr,c
  9404  002AB8  6610               	tstfsz	__tdiv_to_l_@cntr& (0+255),c
  9405  002ABA  D001               	goto	i2l4747
  9406  002ABC  D04B               	goto	i2u266_40
  9407  002ABE                     i2l4747:
  9408  002ABE  8E02               	bsf	__tdiv_to_l_@f1+1,7,c
  9409  002AC0  0EFF               	movlw	255
  9410  002AC2  1601               	andwf	__tdiv_to_l_@f1,f,c
  9411  002AC4  0EFF               	movlw	255
  9412  002AC6  1602               	andwf	__tdiv_to_l_@f1+1,f,c
  9413  002AC8  0E00               	movlw	0
  9414  002ACA  1603               	andwf	__tdiv_to_l_@f1+2,f,c
  9415  002ACC  8E05               	bsf	__tdiv_to_l_@f2+1,7,c
  9416  002ACE  0EFF               	movlw	255
  9417  002AD0  1604               	andwf	__tdiv_to_l_@f2,f,c
  9418  002AD2  0EFF               	movlw	255
  9419  002AD4  1605               	andwf	__tdiv_to_l_@f2+1,f,c
  9420  002AD6  0E00               	movlw	0
  9421  002AD8  1606               	andwf	__tdiv_to_l_@f2+2,f,c
  9422  002ADA  0E00               	movlw	0
  9423  002ADC  6E0C               	movwf	__tdiv_to_l_@quot,c
  9424  002ADE  0E00               	movlw	0
  9425  002AE0  6E0D               	movwf	__tdiv_to_l_@quot+1,c
  9426  002AE2  0E00               	movlw	0
  9427  002AE4  6E0E               	movwf	__tdiv_to_l_@quot+2,c
  9428  002AE6  0E00               	movlw	0
  9429  002AE8  6E0F               	movwf	__tdiv_to_l_@quot+3,c
  9430  002AEA  0E7F               	movlw	127
  9431  002AEC  5E11               	subwf	__tdiv_to_l_@exp1,f,c
  9432  002AEE  5010               	movf	__tdiv_to_l_@cntr,w,c
  9433  002AF0  0F98               	addlw	152
  9434  002AF2  5E11               	subwf	__tdiv_to_l_@exp1,f,c
  9435  002AF4  6E07               	movwf	??__tdiv_to_l_& (0+255),c
  9436  002AF6  0E18               	movlw	24
  9437  002AF8  6E10               	movwf	__tdiv_to_l_@cntr,c
  9438  002AFA  5007               	movf	??__tdiv_to_l_& (0+255),w,c
  9439  002AFC                     i2l4761:
  9440  002AFC  90D8               	bcf	status,0,c
  9441  002AFE  360C               	rlcf	__tdiv_to_l_@quot,f,c
  9442  002B00  360D               	rlcf	__tdiv_to_l_@quot+1,f,c
  9443  002B02  360E               	rlcf	__tdiv_to_l_@quot+2,f,c
  9444  002B04  360F               	rlcf	__tdiv_to_l_@quot+3,f,c
  9445  002B06  5004               	movf	__tdiv_to_l_@f2,w,c
  9446  002B08  5C01               	subwf	__tdiv_to_l_@f1,w,c
  9447  002B0A  5005               	movf	__tdiv_to_l_@f2+1,w,c
  9448  002B0C  5802               	subwfb	__tdiv_to_l_@f1+1,w,c
  9449  002B0E  5006               	movf	__tdiv_to_l_@f2+2,w,c
  9450  002B10  5803               	subwfb	__tdiv_to_l_@f1+2,w,c
  9451  002B12  A0D8               	btfss	status,0,c
  9452  002B14  D007               	goto	i2l1023
  9453  002B16  5004               	movf	__tdiv_to_l_@f2,w,c
  9454  002B18  5E01               	subwf	__tdiv_to_l_@f1,f,c
  9455  002B1A  5005               	movf	__tdiv_to_l_@f2+1,w,c
  9456  002B1C  5A02               	subwfb	__tdiv_to_l_@f1+1,f,c
  9457  002B1E  5006               	movf	__tdiv_to_l_@f2+2,w,c
  9458  002B20  5A03               	subwfb	__tdiv_to_l_@f1+2,f,c
  9459  002B22  800C               	bsf	__tdiv_to_l_@quot,0,c
  9460  002B24                     i2l1023:
  9461  002B24  90D8               	bcf	status,0,c
  9462  002B26  3601               	rlcf	__tdiv_to_l_@f1,f,c
  9463  002B28  3602               	rlcf	__tdiv_to_l_@f1+1,f,c
  9464  002B2A  3603               	rlcf	__tdiv_to_l_@f1+2,f,c
  9465  002B2C  2E10               	decfsz	__tdiv_to_l_@cntr,f,c
  9466  002B2E  D7E6               	goto	i2l4761
  9467  002B30  AE11               	btfss	__tdiv_to_l_@exp1,7,c
  9468  002B32  D00D               	goto	i2l4781
  9469  002B34  5011               	movf	__tdiv_to_l_@exp1,w,c
  9470  002B36  0A80               	xorlw	128
  9471  002B38  0F97               	addlw	151
  9472  002B3A  A0D8               	btfss	status,0,c
  9473  002B3C  D00B               	goto	i2u266_40
  9474  002B3E                     i2l4777:
  9475  002B3E  90D8               	bcf	status,0,c
  9476  002B40  320F               	rrcf	__tdiv_to_l_@quot+3,f,c
  9477  002B42  320E               	rrcf	__tdiv_to_l_@quot+2,f,c
  9478  002B44  320D               	rrcf	__tdiv_to_l_@quot+1,f,c
  9479  002B46  320C               	rrcf	__tdiv_to_l_@quot,f,c
  9480  002B48  3E11               	incfsz	__tdiv_to_l_@exp1,f,c
  9481  002B4A  D7F9               	goto	i2l4777
  9482  002B4C  D014               	goto	i2l1029
  9483  002B4E                     i2l4781:
  9484  002B4E  0E17               	movlw	23
  9485  002B50  6411               	cpfsgt	__tdiv_to_l_@exp1,c
  9486  002B52  D00F               	goto	i2l4789
  9487  002B54                     i2u266_40:
  9488  002B54  0E00               	movlw	0
  9489  002B56  6E01               	movwf	?__tdiv_to_l_,c
  9490  002B58  0E00               	movlw	0
  9491  002B5A  6E02               	movwf	?__tdiv_to_l_+1,c
  9492  002B5C  0E00               	movlw	0
  9493  002B5E  6E03               	movwf	?__tdiv_to_l_+2,c
  9494  002B60  0E00               	movlw	0
  9495  002B62  6E04               	movwf	?__tdiv_to_l_+3,c
  9496  002B64  D010               	goto	i2l1020
  9497  002B66                     i2l4787:
  9498  002B66  90D8               	bcf	status,0,c
  9499  002B68  360C               	rlcf	__tdiv_to_l_@quot,f,c
  9500  002B6A  360D               	rlcf	__tdiv_to_l_@quot+1,f,c
  9501  002B6C  360E               	rlcf	__tdiv_to_l_@quot+2,f,c
  9502  002B6E  360F               	rlcf	__tdiv_to_l_@quot+3,f,c
  9503  002B70  0611               	decf	__tdiv_to_l_@exp1,f,c
  9504  002B72                     i2l4789:
  9505  002B72  6611               	tstfsz	__tdiv_to_l_@exp1,c
  9506  002B74  D7F8               	goto	i2l4787
  9507  002B76                     i2l1029:
  9508  002B76  C00C  F001         	movff	__tdiv_to_l_@quot,?__tdiv_to_l_
  9509  002B7A  C00D  F002         	movff	__tdiv_to_l_@quot+1,?__tdiv_to_l_+1
  9510  002B7E  C00E  F003         	movff	__tdiv_to_l_@quot+2,?__tdiv_to_l_+2
  9511  002B82  C00F  F004         	movff	__tdiv_to_l_@quot+3,?__tdiv_to_l_+3
  9512  002B86                     i2l1020:
  9513  002B86  0012               	return	
  9514  002B88                     __end_of__tdiv_to_l_:
  9515                           	opt stack 0
  9516                           tosu	equ	0xFFF
  9517                           tosh	equ	0xFFE
  9518                           tosl	equ	0xFFD
  9519                           pclatu	equ	0xFFB
  9520                           pclath	equ	0xFFA
  9521                           tblptru	equ	0xFF8
  9522                           tblptrh	equ	0xFF7
  9523                           tblptrl	equ	0xFF6
  9524                           tablat	equ	0xFF5
  9525                           prodh	equ	0xFF4
  9526                           prodl	equ	0xFF3
  9527                           intcon	equ	0xFF2
  9528                           intcon2	equ	0xFF1
  9529                           indf0	equ	0xFEF
  9530                           postinc0	equ	0xFEE
  9531                           fsr0h	equ	0xFEA
  9532                           fsr0l	equ	0xFE9
  9533                           wreg	equ	0xFE8
  9534                           postinc1	equ	0xFE6
  9535                           postdec1	equ	0xFE5
  9536                           fsr1h	equ	0xFE2
  9537                           fsr1l	equ	0xFE1
  9538                           indf2	equ	0xFDF
  9539                           postinc2	equ	0xFDE
  9540                           postdec2	equ	0xFDD
  9541                           plusw2	equ	0xFDB
  9542                           fsr2h	equ	0xFDA
  9543                           fsr2l	equ	0xFD9
  9544                           status	equ	0xFD8
  9545                           
  9546 ;; *************** function _isdigit *****************
  9547 ;; Defined at:
  9548 ;;		line 13 in file "/usr/opt/microchip/xc8/v1.20/sources/common/isdigit.c"
  9549 ;; Parameters:    Size  Location     Type
  9550 ;;  c               1    0[COMRAM] unsigned char 
  9551 ;; Auto vars:     Size  Location     Type
  9552 ;;		None
  9553 ;; Return value:  Size  Location     Type
  9554 ;;		None               void
  9555 ;; Registers used:
  9556 ;;		wreg, status,2, status,0
  9557 ;; Tracked objects:
  9558 ;;		On entry : 0/0
  9559 ;;		On exit  : 0/0
  9560 ;;		Unchanged: 0/0
  9561 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9562 ;;      Params:         1       0       0       0       0       0       0       0       0
  9563 ;;      Locals:         1       0       0       0       0       0       0       0       0
  9564 ;;      Temps:          1       0       0       0       0       0       0       0       0
  9565 ;;      Totals:         3       0       0       0       0       0       0       0       0
  9566 ;;Total ram usage:        3 bytes
  9567 ;; Hardware stack levels used:    1
  9568 ;; This function calls:
  9569 ;;		Nothing
  9570 ;; This function is called by:
  9571 ;;		_sprintf
  9572 ;; This function uses a non-reentrant model
  9573 ;;
  9574                           
  9575                           	psect	text36
  9576  003D20                     __ptext36:
  9577                           	opt stack 0
  9578  003D20                     _isdigit:
  9579                           	opt stack 23
  9580                           
  9581                           ;incstack = 0
  9582                           ;incstack = 0
  9583  003D20  6E02               	movwf	??_isdigit& (0+255),c
  9584  003D22  0E00               	movlw	0
  9585  003D24  6E03               	movwf	_isdigit$914,c
  9586  003D26  5002               	movf	??_isdigit& (0+255),w,c
  9587  003D28  0E3A               	movlw	58
  9588  003D2A  6001               	cpfslt	isdigit@c,c
  9589  003D2C  D007               	goto	i2l4731
  9590  003D2E  0E2F               	movlw	47
  9591  003D30  6401               	cpfsgt	isdigit@c,c
  9592  003D32  D004               	goto	i2l4731
  9593  003D34  6E02               	movwf	??_isdigit& (0+255),c
  9594  003D36  0E01               	movlw	1
  9595  003D38  6E03               	movwf	_isdigit$914,c
  9596  003D3A  5002               	movf	??_isdigit& (0+255),w,c
  9597  003D3C                     i2l4731:
  9598  003D3C  C003  F002         	movff	_isdigit$914,??_isdigit
  9599  003D40  3002               	rrcf	??_isdigit,w,c
  9600  003D42  0012               	return	
  9601  003D44                     __end_of_isdigit:
  9602                           	opt stack 0
  9603                           tosu	equ	0xFFF
  9604                           tosh	equ	0xFFE
  9605                           tosl	equ	0xFFD
  9606                           pclatu	equ	0xFFB
  9607                           pclath	equ	0xFFA
  9608                           tblptru	equ	0xFF8
  9609                           tblptrh	equ	0xFF7
  9610                           tblptrl	equ	0xFF6
  9611                           tablat	equ	0xFF5
  9612                           prodh	equ	0xFF4
  9613                           prodl	equ	0xFF3
  9614                           intcon	equ	0xFF2
  9615                           intcon2	equ	0xFF1
  9616                           indf0	equ	0xFEF
  9617                           postinc0	equ	0xFEE
  9618                           fsr0h	equ	0xFEA
  9619                           fsr0l	equ	0xFE9
  9620                           wreg	equ	0xFE8
  9621                           postinc1	equ	0xFE6
  9622                           postdec1	equ	0xFE5
  9623                           fsr1h	equ	0xFE2
  9624                           fsr1l	equ	0xFE1
  9625                           indf2	equ	0xFDF
  9626                           postinc2	equ	0xFDE
  9627                           postdec2	equ	0xFDD
  9628                           plusw2	equ	0xFDB
  9629                           fsr2h	equ	0xFDA
  9630                           fsr2l	equ	0xFD9
  9631                           status	equ	0xFD8
  9632                           
  9633 ;; *************** function _scale *****************
  9634 ;; Defined at:
  9635 ;;		line 426 in file "/usr/opt/microchip/xc8/v1.20/sources/common/doprnt.c"
  9636 ;; Parameters:    Size  Location     Type
  9637 ;;  scl             1   62[COMRAM] char 
  9638 ;; Auto vars:     Size  Location     Type
  9639 ;;		None
  9640 ;; Return value:  Size  Location     Type
  9641 ;;                  3   62[COMRAM] char 
  9642 ;; Registers used:
  9643 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9644 ;; Tracked objects:
  9645 ;;		On entry : 0/0
  9646 ;;		On exit  : 0/0
  9647 ;;		Unchanged: 0/0
  9648 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9649 ;;      Params:         3       0       0       0       0       0       0       0       0
  9650 ;;      Locals:         3       0       0       0       0       0       0       0       0
  9651 ;;      Temps:          6       0       0       0       0       0       0       0       0
  9652 ;;      Totals:        12       0       0       0       0       0       0       0       0
  9653 ;;Total ram usage:       12 bytes
  9654 ;; Hardware stack levels used:    1
  9655 ;; Hardware stack levels required when called:    2
  9656 ;; This function calls:
  9657 ;;		___ftmul
  9658 ;;		___awdiv
  9659 ;;		___awmod
  9660 ;;		___wmul
  9661 ;; This function is called by:
  9662 ;;		_sprintf
  9663 ;; This function uses a non-reentrant model
  9664 ;;
  9665                           
  9666                           	psect	text37
  9667  001436                     __ptext37:
  9668                           	opt stack 0
  9669  001436                     _scale:
  9670                           	opt stack 21
  9671                           
  9672                           ;doprnt.c: 428: if(scl < 0) {
  9673                           
  9674                           ;incstack = 0
  9675                           ;incstack = 0
  9676  001436  AE3F               	btfss	scale@scl,7,c
  9677  001438  D108               	goto	i2l5423
  9678                           
  9679                           ;doprnt.c: 429: scl = -scl;
  9680  00143A  6C3F               	negf	scale@scl,c
  9681                           
  9682                           ;doprnt.c: 430: if(scl>=110)
  9683  00143C  503F               	movf	scale@scl,w,c
  9684  00143E  0A80               	xorlw	128
  9685  001440  0F12               	addlw	-238
  9686  001442  A0D8               	btfss	status,0,c
  9687  001444  D09D               	goto	i2l5413
  9688                           
  9689                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  9690  001446  0E00               	movlw	0
  9691  001448  6E1A               	movwf	?___wmul+3,c
  9692  00144A  0E03               	movlw	3
  9693  00144C  6E19               	movwf	?___wmul+2,c
  9694  00144E  0E00               	movlw	0
  9695  001450  6E0D               	movwf	?___awdiv+3,c
  9696  001452  0E0A               	movlw	10
  9697  001454  6E0C               	movwf	?___awdiv+2,c
  9698  001456  0E00               	movlw	0
  9699  001458  6E04               	movwf	?___awmod+3,c
  9700  00145A  0E64               	movlw	100
  9701  00145C  6E03               	movwf	?___awmod+2,c
  9702  00145E  503F               	movf	scale@scl,w,c
  9703  001460  6E01               	movwf	?___awmod,c
  9704  001462  6A02               	clrf	?___awmod+1,c
  9705  001464  BE01               	btfsc	?___awmod,7,c
  9706  001466  0602               	decf	?___awmod+1,f,c
  9707  001468  EC47  F01B         	call	___awmod	;wreg free
  9708  00146C  C001  F00A         	movff	?___awmod,?___awdiv
  9709  001470  C002  F00B         	movff	?___awmod+1,?___awdiv+1
  9710  001474  EC7D  F01A         	call	___awdiv	;wreg free
  9711  001478  0E09               	movlw	9
  9712  00147A  240A               	addwf	?___awdiv,w,c
  9713  00147C  6E17               	movwf	?___wmul,c
  9714  00147E  0E00               	movlw	0
  9715  001480  200B               	addwfc	?___awdiv+1,w,c
  9716  001482  6E18               	movwf	?___wmul+1,c
  9717  001484  ECEF  F01D         	call	___wmul	;wreg free
  9718  001488  0E47               	movlw	low __npowers_
  9719  00148A  2417               	addwf	?___wmul,w,c
  9720  00148C  6EF6               	movwf	tblptrl,c
  9721  00148E  0E7F               	movlw	high __npowers_
  9722  001490  2018               	addwfc	?___wmul+1,w,c
  9723  001492  6EF7               	movwf	tblptrh,c
  9724  001494  0009               	tblrd		*+
  9725  001496  CFF5 F042          	movff	tablat,??_scale
  9726  00149A  0009               	tblrd		*+
  9727  00149C  CFF5 F043          	movff	tablat,??_scale+1
  9728  0014A0  0009               	tblrd		*+
  9729  0014A2  CFF5 F044          	movff	tablat,??_scale+2
  9730  0014A6  C044  F033         	movff	??_scale+2,?___ftmul+5
  9731  0014AA  C043  F032         	movff	??_scale+1,?___ftmul+4
  9732  0014AE  C042  F031         	movff	??_scale,?___ftmul+3
  9733  0014B2  0E00               	movlw	0
  9734  0014B4  6E1A               	movwf	?___wmul+3,c
  9735  0014B6  0E03               	movlw	3
  9736  0014B8  6E19               	movwf	?___wmul+2,c
  9737  0014BA  0E00               	movlw	0
  9738  0014BC  6E0D               	movwf	?___awdiv+3,c
  9739  0014BE  0E64               	movlw	100
  9740  0014C0  6E0C               	movwf	?___awdiv+2,c
  9741  0014C2  503F               	movf	scale@scl,w,c
  9742  0014C4  6E0A               	movwf	?___awdiv,c
  9743  0014C6  6A0B               	clrf	?___awdiv+1,c
  9744  0014C8  BE0A               	btfsc	?___awdiv,7,c
  9745  0014CA  060B               	decf	?___awdiv+1,f,c
  9746  0014CC  EC7D  F01A         	call	___awdiv	;wreg free
  9747  0014D0  0E12               	movlw	18
  9748  0014D2  240A               	addwf	?___awdiv,w,c
  9749  0014D4  6E17               	movwf	?___wmul,c
  9750  0014D6  0E00               	movlw	0
  9751  0014D8  200B               	addwfc	?___awdiv+1,w,c
  9752  0014DA  6E18               	movwf	?___wmul+1,c
  9753  0014DC  ECEF  F01D         	call	___wmul	;wreg free
  9754  0014E0  0E47               	movlw	low __npowers_
  9755  0014E2  2417               	addwf	?___wmul,w,c
  9756  0014E4  6EF6               	movwf	tblptrl,c
  9757  0014E6  0E7F               	movlw	high __npowers_
  9758  0014E8  2018               	addwfc	?___wmul+1,w,c
  9759  0014EA  6EF7               	movwf	tblptrh,c
  9760  0014EC  0009               	tblrd		*+
  9761  0014EE  CFF5 F045          	movff	tablat,??_scale+3
  9762  0014F2  0009               	tblrd		*+
  9763  0014F4  CFF5 F046          	movff	tablat,??_scale+4
  9764  0014F8  0009               	tblrd		*+
  9765  0014FA  CFF5 F047          	movff	tablat,??_scale+5
  9766  0014FE  C047  F030         	movff	??_scale+5,?___ftmul+2
  9767  001502  C046  F02F         	movff	??_scale+4,?___ftmul+1
  9768  001506  C045  F02E         	movff	??_scale+3,?___ftmul
  9769  00150A  ECC4  F015         	call	___ftmul	;wreg free
  9770  00150E  C030  F04A         	movff	?___ftmul+2,_scale$1280+2
  9771  001512  C02F  F049         	movff	?___ftmul+1,_scale$1280+1
  9772  001516  C02E  F048         	movff	?___ftmul,_scale$1280
  9773                           
  9774                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  9775  00151A  C048  F02E         	movff	_scale$1280,?___ftmul
  9776  00151E  C049  F02F         	movff	_scale$1280+1,?___ftmul+1
  9777  001522  C04A  F030         	movff	_scale$1280+2,?___ftmul+2
  9778  001526  0E00               	movlw	0
  9779  001528  6E1A               	movwf	?___wmul+3,c
  9780  00152A  0E03               	movlw	3
  9781  00152C  6E19               	movwf	?___wmul+2,c
  9782  00152E  0E00               	movlw	0
  9783  001530  6E04               	movwf	?___awmod+3,c
  9784  001532  0E0A               	movlw	10
  9785  001534  6E03               	movwf	?___awmod+2,c
  9786  001536  503F               	movf	scale@scl,w,c
  9787  001538  6E01               	movwf	?___awmod,c
  9788  00153A  6A02               	clrf	?___awmod+1,c
  9789  00153C  BE01               	btfsc	?___awmod,7,c
  9790  00153E  0602               	decf	?___awmod+1,f,c
  9791  001540  EC47  F01B         	call	___awmod	;wreg free
  9792  001544  C001  F017         	movff	?___awmod,?___wmul
  9793  001548  C002  F018         	movff	?___awmod+1,?___wmul+1
  9794  00154C  ECEF  F01D         	call	___wmul	;wreg free
  9795  001550  0E47               	movlw	low __npowers_
  9796  001552  2417               	addwf	?___wmul,w,c
  9797  001554  6EF6               	movwf	tblptrl,c
  9798  001556  0E7F               	movlw	high __npowers_
  9799  001558  2018               	addwfc	?___wmul+1,w,c
  9800  00155A  6EF7               	movwf	tblptrh,c
  9801  00155C  0009               	tblrd		*+
  9802  00155E  CFF5 F042          	movff	tablat,??_scale
  9803  001562  0009               	tblrd		*+
  9804  001564  CFF5 F043          	movff	tablat,??_scale+1
  9805  001568  0009               	tblrd		*+
  9806  00156A  CFF5 F044          	movff	tablat,??_scale+2
  9807  00156E  C044  F033         	movff	??_scale+2,?___ftmul+5
  9808  001572  C043  F032         	movff	??_scale+1,?___ftmul+4
  9809  001576  C042  F031         	movff	??_scale,?___ftmul+3
  9810  00157A  ECC4  F015         	call	___ftmul	;wreg free
  9811  00157E  D164               	goto	L16
  9812  001580                     i2l5413:
  9813                           
  9814                           ;doprnt.c: 432: else if(scl > 10)
  9815  001580  503F               	movf	scale@scl,w,c
  9816  001582  0A80               	xorlw	128
  9817  001584  0F75               	addlw	-139
  9818  001586  A0D8               	btfss	status,0,c
  9819  001588  D059               	goto	i2l5419
  9820                           
  9821                           ;doprnt.c: 433: return _npowers_[scl/10+9] * _npowers_[scl%10];
  9822  00158A  0E00               	movlw	0
  9823  00158C  6E1A               	movwf	?___wmul+3,c
  9824  00158E  0E03               	movlw	3
  9825  001590  6E19               	movwf	?___wmul+2,c
  9826  001592  0E00               	movlw	0
  9827  001594  6E0D               	movwf	?___awdiv+3,c
  9828  001596  0E0A               	movlw	10
  9829  001598  6E0C               	movwf	?___awdiv+2,c
  9830  00159A  503F               	movf	scale@scl,w,c
  9831  00159C  6E0A               	movwf	?___awdiv,c
  9832  00159E  6A0B               	clrf	?___awdiv+1,c
  9833  0015A0  BE0A               	btfsc	?___awdiv,7,c
  9834  0015A2  060B               	decf	?___awdiv+1,f,c
  9835  0015A4  EC7D  F01A         	call	___awdiv	;wreg free
  9836  0015A8  0E09               	movlw	9
  9837  0015AA  240A               	addwf	?___awdiv,w,c
  9838  0015AC  6E17               	movwf	?___wmul,c
  9839  0015AE  0E00               	movlw	0
  9840  0015B0  200B               	addwfc	?___awdiv+1,w,c
  9841  0015B2  6E18               	movwf	?___wmul+1,c
  9842  0015B4  ECEF  F01D         	call	___wmul	;wreg free
  9843  0015B8  0E47               	movlw	low __npowers_
  9844  0015BA  2417               	addwf	?___wmul,w,c
  9845  0015BC  6EF6               	movwf	tblptrl,c
  9846  0015BE  0E7F               	movlw	high __npowers_
  9847  0015C0  2018               	addwfc	?___wmul+1,w,c
  9848  0015C2  6EF7               	movwf	tblptrh,c
  9849  0015C4  0009               	tblrd		*+
  9850  0015C6  CFF5 F042          	movff	tablat,??_scale
  9851  0015CA  0009               	tblrd		*+
  9852  0015CC  CFF5 F043          	movff	tablat,??_scale+1
  9853  0015D0  0009               	tblrd		*+
  9854  0015D2  CFF5 F044          	movff	tablat,??_scale+2
  9855  0015D6  C044  F030         	movff	??_scale+2,?___ftmul+2
  9856  0015DA  C043  F02F         	movff	??_scale+1,?___ftmul+1
  9857  0015DE  C042  F02E         	movff	??_scale,?___ftmul
  9858  0015E2  0E00               	movlw	0
  9859  0015E4  6E1A               	movwf	?___wmul+3,c
  9860  0015E6  0E03               	movlw	3
  9861  0015E8  6E19               	movwf	?___wmul+2,c
  9862  0015EA  0E00               	movlw	0
  9863  0015EC  6E04               	movwf	?___awmod+3,c
  9864  0015EE  0E0A               	movlw	10
  9865  0015F0  6E03               	movwf	?___awmod+2,c
  9866  0015F2  503F               	movf	scale@scl,w,c
  9867  0015F4  6E01               	movwf	?___awmod,c
  9868  0015F6  6A02               	clrf	?___awmod+1,c
  9869  0015F8  BE01               	btfsc	?___awmod,7,c
  9870  0015FA  0602               	decf	?___awmod+1,f,c
  9871  0015FC  EC47  F01B         	call	___awmod	;wreg free
  9872  001600  C001  F017         	movff	?___awmod,?___wmul
  9873  001604  C002  F018         	movff	?___awmod+1,?___wmul+1
  9874  001608  ECEF  F01D         	call	___wmul	;wreg free
  9875  00160C  0E47               	movlw	low __npowers_
  9876  00160E  2417               	addwf	?___wmul,w,c
  9877  001610  6EF6               	movwf	tblptrl,c
  9878  001612  0E7F               	movlw	high __npowers_
  9879  001614  2018               	addwfc	?___wmul+1,w,c
  9880  001616  6EF7               	movwf	tblptrh,c
  9881  001618  0009               	tblrd		*+
  9882  00161A  CFF5 F045          	movff	tablat,??_scale+3
  9883  00161E  0009               	tblrd		*+
  9884  001620  CFF5 F046          	movff	tablat,??_scale+4
  9885  001624  0009               	tblrd		*+
  9886  001626  CFF5 F047          	movff	tablat,??_scale+5
  9887  00162A  C047  F033         	movff	??_scale+5,?___ftmul+5
  9888  00162E  C046  F032         	movff	??_scale+4,?___ftmul+4
  9889  001632  C045  F031         	movff	??_scale+3,?___ftmul+3
  9890  001636  ECC4  F015         	call	___ftmul	;wreg free
  9891  00163A  D106               	goto	L16
  9892  00163C                     i2l5419:
  9893                           
  9894                           ;doprnt.c: 434: return _npowers_[scl];
  9895  00163C  503F               	movf	scale@scl,w,c
  9896  00163E  0D03               	mullw	3
  9897  001640  0E47               	movlw	low __npowers_
  9898  001642  24F3               	addwf	prodl,w,c
  9899  001644  6EF6               	movwf	tblptrl,c
  9900  001646  0E7F               	movlw	high __npowers_
  9901  001648  D10C               	goto	L15
  9902  00164A                     i2l5423:
  9903                           
  9904                           ;doprnt.c: 435: }
  9905                           ;doprnt.c: 436: if(scl>=110)
  9906  00164A  503F               	movf	scale@scl,w,c
  9907  00164C  0A80               	xorlw	128
  9908  00164E  0F12               	addlw	-238
  9909  001650  A0D8               	btfss	status,0,c
  9910  001652  D09D               	goto	i2l5431
  9911                           
  9912                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  9913  001654  0E00               	movlw	0
  9914  001656  6E1A               	movwf	?___wmul+3,c
  9915  001658  0E03               	movlw	3
  9916  00165A  6E19               	movwf	?___wmul+2,c
  9917  00165C  0E00               	movlw	0
  9918  00165E  6E0D               	movwf	?___awdiv+3,c
  9919  001660  0E0A               	movlw	10
  9920  001662  6E0C               	movwf	?___awdiv+2,c
  9921  001664  0E00               	movlw	0
  9922  001666  6E04               	movwf	?___awmod+3,c
  9923  001668  0E64               	movlw	100
  9924  00166A  6E03               	movwf	?___awmod+2,c
  9925  00166C  503F               	movf	scale@scl,w,c
  9926  00166E  6E01               	movwf	?___awmod,c
  9927  001670  6A02               	clrf	?___awmod+1,c
  9928  001672  BE01               	btfsc	?___awmod,7,c
  9929  001674  0602               	decf	?___awmod+1,f,c
  9930  001676  EC47  F01B         	call	___awmod	;wreg free
  9931  00167A  C001  F00A         	movff	?___awmod,?___awdiv
  9932  00167E  C002  F00B         	movff	?___awmod+1,?___awdiv+1
  9933  001682  EC7D  F01A         	call	___awdiv	;wreg free
  9934  001686  0E09               	movlw	9
  9935  001688  240A               	addwf	?___awdiv,w,c
  9936  00168A  6E17               	movwf	?___wmul,c
  9937  00168C  0E00               	movlw	0
  9938  00168E  200B               	addwfc	?___awdiv+1,w,c
  9939  001690  6E18               	movwf	?___wmul+1,c
  9940  001692  ECEF  F01D         	call	___wmul	;wreg free
  9941  001696  0E6E               	movlw	low __powers_
  9942  001698  2417               	addwf	?___wmul,w,c
  9943  00169A  6EF6               	movwf	tblptrl,c
  9944  00169C  0E7F               	movlw	high __powers_
  9945  00169E  2018               	addwfc	?___wmul+1,w,c
  9946  0016A0  6EF7               	movwf	tblptrh,c
  9947  0016A2  0009               	tblrd		*+
  9948  0016A4  CFF5 F042          	movff	tablat,??_scale
  9949  0016A8  0009               	tblrd		*+
  9950  0016AA  CFF5 F043          	movff	tablat,??_scale+1
  9951  0016AE  0009               	tblrd		*+
  9952  0016B0  CFF5 F044          	movff	tablat,??_scale+2
  9953  0016B4  C044  F033         	movff	??_scale+2,?___ftmul+5
  9954  0016B8  C043  F032         	movff	??_scale+1,?___ftmul+4
  9955  0016BC  C042  F031         	movff	??_scale,?___ftmul+3
  9956  0016C0  0E00               	movlw	0
  9957  0016C2  6E1A               	movwf	?___wmul+3,c
  9958  0016C4  0E03               	movlw	3
  9959  0016C6  6E19               	movwf	?___wmul+2,c
  9960  0016C8  0E00               	movlw	0
  9961  0016CA  6E0D               	movwf	?___awdiv+3,c
  9962  0016CC  0E64               	movlw	100
  9963  0016CE  6E0C               	movwf	?___awdiv+2,c
  9964  0016D0  503F               	movf	scale@scl,w,c
  9965  0016D2  6E0A               	movwf	?___awdiv,c
  9966  0016D4  6A0B               	clrf	?___awdiv+1,c
  9967  0016D6  BE0A               	btfsc	?___awdiv,7,c
  9968  0016D8  060B               	decf	?___awdiv+1,f,c
  9969  0016DA  EC7D  F01A         	call	___awdiv	;wreg free
  9970  0016DE  0E12               	movlw	18
  9971  0016E0  240A               	addwf	?___awdiv,w,c
  9972  0016E2  6E17               	movwf	?___wmul,c
  9973  0016E4  0E00               	movlw	0
  9974  0016E6  200B               	addwfc	?___awdiv+1,w,c
  9975  0016E8  6E18               	movwf	?___wmul+1,c
  9976  0016EA  ECEF  F01D         	call	___wmul	;wreg free
  9977  0016EE  0E6E               	movlw	low __powers_
  9978  0016F0  2417               	addwf	?___wmul,w,c
  9979  0016F2  6EF6               	movwf	tblptrl,c
  9980  0016F4  0E7F               	movlw	high __powers_
  9981  0016F6  2018               	addwfc	?___wmul+1,w,c
  9982  0016F8  6EF7               	movwf	tblptrh,c
  9983  0016FA  0009               	tblrd		*+
  9984  0016FC  CFF5 F045          	movff	tablat,??_scale+3
  9985  001700  0009               	tblrd		*+
  9986  001702  CFF5 F046          	movff	tablat,??_scale+4
  9987  001706  0009               	tblrd		*+
  9988  001708  CFF5 F047          	movff	tablat,??_scale+5
  9989  00170C  C047  F030         	movff	??_scale+5,?___ftmul+2
  9990  001710  C046  F02F         	movff	??_scale+4,?___ftmul+1
  9991  001714  C045  F02E         	movff	??_scale+3,?___ftmul
  9992  001718  ECC4  F015         	call	___ftmul	;wreg free
  9993  00171C  C030  F04A         	movff	?___ftmul+2,_scale$1280+2
  9994  001720  C02F  F049         	movff	?___ftmul+1,_scale$1280+1
  9995  001724  C02E  F048         	movff	?___ftmul,_scale$1280
  9996                           
  9997                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  9998  001728  C048  F02E         	movff	_scale$1280,?___ftmul
  9999  00172C  C049  F02F         	movff	_scale$1280+1,?___ftmul+1
 10000  001730  C04A  F030         	movff	_scale$1280+2,?___ftmul+2
 10001  001734  0E00               	movlw	0
 10002  001736  6E1A               	movwf	?___wmul+3,c
 10003  001738  0E03               	movlw	3
 10004  00173A  6E19               	movwf	?___wmul+2,c
 10005  00173C  0E00               	movlw	0
 10006  00173E  6E04               	movwf	?___awmod+3,c
 10007  001740  0E0A               	movlw	10
 10008  001742  6E03               	movwf	?___awmod+2,c
 10009  001744  503F               	movf	scale@scl,w,c
 10010  001746  6E01               	movwf	?___awmod,c
 10011  001748  6A02               	clrf	?___awmod+1,c
 10012  00174A  BE01               	btfsc	?___awmod,7,c
 10013  00174C  0602               	decf	?___awmod+1,f,c
 10014  00174E  EC47  F01B         	call	___awmod	;wreg free
 10015  001752  C001  F017         	movff	?___awmod,?___wmul
 10016  001756  C002  F018         	movff	?___awmod+1,?___wmul+1
 10017  00175A  ECEF  F01D         	call	___wmul	;wreg free
 10018  00175E  0E6E               	movlw	low __powers_
 10019  001760  2417               	addwf	?___wmul,w,c
 10020  001762  6EF6               	movwf	tblptrl,c
 10021  001764  0E7F               	movlw	high __powers_
 10022  001766  2018               	addwfc	?___wmul+1,w,c
 10023  001768  6EF7               	movwf	tblptrh,c
 10024  00176A  0009               	tblrd		*+
 10025  00176C  CFF5 F042          	movff	tablat,??_scale
 10026  001770  0009               	tblrd		*+
 10027  001772  CFF5 F043          	movff	tablat,??_scale+1
 10028  001776  0009               	tblrd		*+
 10029  001778  CFF5 F044          	movff	tablat,??_scale+2
 10030  00177C  C044  F033         	movff	??_scale+2,?___ftmul+5
 10031  001780  C043  F032         	movff	??_scale+1,?___ftmul+4
 10032  001784  C042  F031         	movff	??_scale,?___ftmul+3
 10033  001788  ECC4  F015         	call	___ftmul	;wreg free
 10034  00178C  D05D               	goto	L16
 10035  00178E                     i2l5431:
 10036                           
 10037                           ;doprnt.c: 438: else if(scl > 10)
 10038  00178E  503F               	movf	scale@scl,w,c
 10039  001790  0A80               	xorlw	128
 10040  001792  0F75               	addlw	-139
 10041  001794  A0D8               	btfss	status,0,c
 10042  001796  D05F               	goto	i2l5437
 10043                           
 10044                           ;doprnt.c: 439: return _powers_[scl/10+9] * _powers_[scl%10];
 10045  001798  0E00               	movlw	0
 10046  00179A  6E1A               	movwf	?___wmul+3,c
 10047  00179C  0E03               	movlw	3
 10048  00179E  6E19               	movwf	?___wmul+2,c
 10049  0017A0  0E00               	movlw	0
 10050  0017A2  6E0D               	movwf	?___awdiv+3,c
 10051  0017A4  0E0A               	movlw	10
 10052  0017A6  6E0C               	movwf	?___awdiv+2,c
 10053  0017A8  503F               	movf	scale@scl,w,c
 10054  0017AA  6E0A               	movwf	?___awdiv,c
 10055  0017AC  6A0B               	clrf	?___awdiv+1,c
 10056  0017AE  BE0A               	btfsc	?___awdiv,7,c
 10057  0017B0  060B               	decf	?___awdiv+1,f,c
 10058  0017B2  EC7D  F01A         	call	___awdiv	;wreg free
 10059  0017B6  0E09               	movlw	9
 10060  0017B8  240A               	addwf	?___awdiv,w,c
 10061  0017BA  6E17               	movwf	?___wmul,c
 10062  0017BC  0E00               	movlw	0
 10063  0017BE  200B               	addwfc	?___awdiv+1,w,c
 10064  0017C0  6E18               	movwf	?___wmul+1,c
 10065  0017C2  ECEF  F01D         	call	___wmul	;wreg free
 10066  0017C6  0E6E               	movlw	low __powers_
 10067  0017C8  2417               	addwf	?___wmul,w,c
 10068  0017CA  6EF6               	movwf	tblptrl,c
 10069  0017CC  0E7F               	movlw	high __powers_
 10070  0017CE  2018               	addwfc	?___wmul+1,w,c
 10071  0017D0  6EF7               	movwf	tblptrh,c
 10072  0017D2  0009               	tblrd		*+
 10073  0017D4  CFF5 F042          	movff	tablat,??_scale
 10074  0017D8  0009               	tblrd		*+
 10075  0017DA  CFF5 F043          	movff	tablat,??_scale+1
 10076  0017DE  0009               	tblrd		*+
 10077  0017E0  CFF5 F044          	movff	tablat,??_scale+2
 10078  0017E4  C044  F030         	movff	??_scale+2,?___ftmul+2
 10079  0017E8  C043  F02F         	movff	??_scale+1,?___ftmul+1
 10080  0017EC  C042  F02E         	movff	??_scale,?___ftmul
 10081  0017F0  0E00               	movlw	0
 10082  0017F2  6E1A               	movwf	?___wmul+3,c
 10083  0017F4  0E03               	movlw	3
 10084  0017F6  6E19               	movwf	?___wmul+2,c
 10085  0017F8  0E00               	movlw	0
 10086  0017FA  6E04               	movwf	?___awmod+3,c
 10087  0017FC  0E0A               	movlw	10
 10088  0017FE  6E03               	movwf	?___awmod+2,c
 10089  001800  503F               	movf	scale@scl,w,c
 10090  001802  6E01               	movwf	?___awmod,c
 10091  001804  6A02               	clrf	?___awmod+1,c
 10092  001806  BE01               	btfsc	?___awmod,7,c
 10093  001808  0602               	decf	?___awmod+1,f,c
 10094  00180A  EC47  F01B         	call	___awmod	;wreg free
 10095  00180E  C001  F017         	movff	?___awmod,?___wmul
 10096  001812  C002  F018         	movff	?___awmod+1,?___wmul+1
 10097  001816  ECEF  F01D         	call	___wmul	;wreg free
 10098  00181A  0E6E               	movlw	low __powers_
 10099  00181C  2417               	addwf	?___wmul,w,c
 10100  00181E  6EF6               	movwf	tblptrl,c
 10101  001820  0E7F               	movlw	high __powers_
 10102  001822  2018               	addwfc	?___wmul+1,w,c
 10103  001824  6EF7               	movwf	tblptrh,c
 10104  001826  0009               	tblrd		*+
 10105  001828  CFF5 F045          	movff	tablat,??_scale+3
 10106  00182C  0009               	tblrd		*+
 10107  00182E  CFF5 F046          	movff	tablat,??_scale+4
 10108  001832  0009               	tblrd		*+
 10109  001834  CFF5 F047          	movff	tablat,??_scale+5
 10110  001838  C047  F033         	movff	??_scale+5,?___ftmul+5
 10111  00183C  C046  F032         	movff	??_scale+4,?___ftmul+4
 10112  001840  C045  F031         	movff	??_scale+3,?___ftmul+3
 10113  001844  ECC4  F015         	call	___ftmul	;wreg free
 10114  001848                     L16:
 10115  001848  C030  F041         	movff	?___ftmul+2,?_scale+2
 10116  00184C  C02F  F040         	movff	?___ftmul+1,?_scale+1
 10117  001850  C02E  F03F         	movff	?___ftmul,?_scale
 10118  001854  D017               	goto	i2l499
 10119  001856                     i2l5437:
 10120                           
 10121                           ;doprnt.c: 440: return _powers_[scl];
 10122  001856  503F               	movf	scale@scl,w,c
 10123  001858  0D03               	mullw	3
 10124  00185A  0E6E               	movlw	low __powers_
 10125  00185C  24F3               	addwf	prodl,w,c
 10126  00185E  6EF6               	movwf	tblptrl,c
 10127  001860  0E7F               	movlw	high __powers_
 10128  001862                     L15:
 10129  001862  20F4               	addwfc	prodh,w,c
 10130  001864  6EF7               	movwf	tblptrh,c
 10131  001866  0009               	tblrd		*+
 10132  001868  CFF5 F042          	movff	tablat,??_scale
 10133  00186C  0009               	tblrd		*+
 10134  00186E  CFF5 F043          	movff	tablat,??_scale+1
 10135  001872  0009               	tblrd		*+
 10136  001874  CFF5 F044          	movff	tablat,??_scale+2
 10137  001878  C044  F041         	movff	??_scale+2,?_scale+2
 10138  00187C  C043  F040         	movff	??_scale+1,?_scale+1
 10139  001880  C042  F03F         	movff	??_scale,?_scale
 10140  001884                     i2l499:
 10141  001884  0012               	return	
 10142  001886                     __end_of_scale:
 10143                           	opt stack 0
 10144                           tosu	equ	0xFFF
 10145                           tosh	equ	0xFFE
 10146                           tosl	equ	0xFFD
 10147                           pclatu	equ	0xFFB
 10148                           pclath	equ	0xFFA
 10149                           tblptru	equ	0xFF8
 10150                           tblptrh	equ	0xFF7
 10151                           tblptrl	equ	0xFF6
 10152                           tablat	equ	0xFF5
 10153                           prodh	equ	0xFF4
 10154                           prodl	equ	0xFF3
 10155                           intcon	equ	0xFF2
 10156                           intcon2	equ	0xFF1
 10157                           indf0	equ	0xFEF
 10158                           postinc0	equ	0xFEE
 10159                           fsr0h	equ	0xFEA
 10160                           fsr0l	equ	0xFE9
 10161                           wreg	equ	0xFE8
 10162                           postinc1	equ	0xFE6
 10163                           postdec1	equ	0xFE5
 10164                           fsr1h	equ	0xFE2
 10165                           fsr1l	equ	0xFE1
 10166                           indf2	equ	0xFDF
 10167                           postinc2	equ	0xFDE
 10168                           postdec2	equ	0xFDD
 10169                           plusw2	equ	0xFDB
 10170                           fsr2h	equ	0xFDA
 10171                           fsr2l	equ	0xFD9
 10172                           status	equ	0xFD8
 10173                           
 10174 ;; *************** function ___wmul *****************
 10175 ;; Defined at:
 10176 ;;		line 5 in file "/usr/opt/microchip/xc8/v1.20/sources/common/wmul.c"
 10177 ;; Parameters:    Size  Location     Type
 10178 ;;  multiplier      2   22[COMRAM] unsigned int 
 10179 ;;  multiplicand    2   24[COMRAM] unsigned int 
 10180 ;; Auto vars:     Size  Location     Type
 10181 ;;  product         2   28[COMRAM] unsigned int 
 10182 ;; Return value:  Size  Location     Type
 10183 ;;                  2   22[COMRAM] unsigned int 
 10184 ;; Registers used:
 10185 ;;		wreg, status,2, status,0, prodl, prodh
 10186 ;; Tracked objects:
 10187 ;;		On entry : 0/0
 10188 ;;		On exit  : 0/0
 10189 ;;		Unchanged: 0/0
 10190 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10191 ;;      Params:         4       0       0       0       0       0       0       0       0
 10192 ;;      Locals:         4       0       0       0       0       0       0       0       0
 10193 ;;      Temps:          0       0       0       0       0       0       0       0       0
 10194 ;;      Totals:         8       0       0       0       0       0       0       0       0
 10195 ;;Total ram usage:        8 bytes
 10196 ;; Hardware stack levels used:    1
 10197 ;; This function calls:
 10198 ;;		Nothing
 10199 ;; This function is called by:
 10200 ;;		_writeString
 10201 ;;		_dayOfWeek
 10202 ;;		_getTemp
 10203 ;;		_fround
 10204 ;;		_scale
 10205 ;;		_sprintf
 10206 ;; This function uses a non-reentrant model
 10207 ;;
 10208                           
 10209                           	psect	text38
 10210  003BDE                     __ptext38:
 10211                           	opt stack 0
 10212  003BDE                     ___wmul:
 10213                           	opt stack 24
 10214                           
 10215                           ;incstack = 0
 10216                           ;incstack = 0
 10217  003BDE  5017               	movf	___wmul@multiplier,w,c
 10218  003BE0  0219               	mulwf	___wmul@multiplicand,c
 10219  003BE2  CFF3 F01D          	movff	prodl,___wmul@product
 10220  003BE6  CFF4 F01E          	movff	prodh,___wmul@product+1
 10221  003BEA  5017               	movf	___wmul@multiplier,w,c
 10222  003BEC  021A               	mulwf	___wmul@multiplicand+1,c
 10223  003BEE  CFF3 FFF4          	movff	prodl,prodh
 10224  003BF2  6AF3               	clrf	prodl,c
 10225  003BF4  50F3               	movf	prodl,w,c
 10226  003BF6  261D               	addwf	___wmul@product,f,c
 10227  003BF8  50F4               	movf	prodh,w,c
 10228  003BFA  221E               	addwfc	___wmul@product+1,f,c
 10229  003BFC  5018               	movf	___wmul@multiplier+1,w,c
 10230  003BFE  0219               	mulwf	___wmul@multiplicand,c
 10231  003C00  CFF3 FFF4          	movff	prodl,prodh
 10232  003C04  6AF3               	clrf	prodl,c
 10233  003C06  50F3               	movf	prodl,w,c
 10234  003C08  261D               	addwf	___wmul@product,f,c
 10235  003C0A  50F4               	movf	prodh,w,c
 10236  003C0C  221E               	addwfc	___wmul@product+1,f,c
 10237  003C0E  C01D  F017         	movff	___wmul@product,?___wmul
 10238  003C12  C01E  F018         	movff	___wmul@product+1,?___wmul+1
 10239  003C16  0012               	return	
 10240  003C18                     __end_of___wmul:
 10241                           	opt stack 0
 10242                           tosu	equ	0xFFF
 10243                           tosh	equ	0xFFE
 10244                           tosl	equ	0xFFD
 10245                           pclatu	equ	0xFFB
 10246                           pclath	equ	0xFFA
 10247                           tblptru	equ	0xFF8
 10248                           tblptrh	equ	0xFF7
 10249                           tblptrl	equ	0xFF6
 10250                           tablat	equ	0xFF5
 10251                           prodh	equ	0xFF4
 10252                           prodl	equ	0xFF3
 10253                           intcon	equ	0xFF2
 10254                           intcon2	equ	0xFF1
 10255                           indf0	equ	0xFEF
 10256                           postinc0	equ	0xFEE
 10257                           fsr0h	equ	0xFEA
 10258                           fsr0l	equ	0xFE9
 10259                           wreg	equ	0xFE8
 10260                           postinc1	equ	0xFE6
 10261                           postdec1	equ	0xFE5
 10262                           fsr1h	equ	0xFE2
 10263                           fsr1l	equ	0xFE1
 10264                           indf2	equ	0xFDF
 10265                           postinc2	equ	0xFDE
 10266                           postdec2	equ	0xFDD
 10267                           plusw2	equ	0xFDB
 10268                           fsr2h	equ	0xFDA
 10269                           fsr2l	equ	0xFD9
 10270                           status	equ	0xFD8
 10271                           
 10272 ;; *************** function ___ftmul *****************
 10273 ;; Defined at:
 10274 ;;		line 52 in file "/usr/opt/microchip/xc8/v1.20/sources/common/ftmul.c"
 10275 ;; Parameters:    Size  Location     Type
 10276 ;;  f1              3   45[COMRAM] float 
 10277 ;;  f2              3   48[COMRAM] float 
 10278 ;; Auto vars:     Size  Location     Type
 10279 ;;  f3_as_produc    3   57[COMRAM] unsigned um
 10280 ;;  sign            1   61[COMRAM] unsigned char 
 10281 ;;  cntr            1   60[COMRAM] unsigned char 
 10282 ;;  exp             1   56[COMRAM] unsigned char 
 10283 ;; Return value:  Size  Location     Type
 10284 ;;                  3   45[COMRAM] float 
 10285 ;; Registers used:
 10286 ;;		wreg, status,2, status,0, cstack
 10287 ;; Tracked objects:
 10288 ;;		On entry : 0/0
 10289 ;;		On exit  : 0/0
 10290 ;;		Unchanged: 0/0
 10291 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10292 ;;      Params:         6       0       0       0       0       0       0       0       0
 10293 ;;      Locals:         6       0       0       0       0       0       0       0       0
 10294 ;;      Temps:          5       0       0       0       0       0       0       0       0
 10295 ;;      Totals:        17       0       0       0       0       0       0       0       0
 10296 ;;Total ram usage:       17 bytes
 10297 ;; Hardware stack levels used:    1
 10298 ;; Hardware stack levels required when called:    1
 10299 ;; This function calls:
 10300 ;;		___ftpack
 10301 ;; This function is called by:
 10302 ;;		_getTemp
 10303 ;;		_fround
 10304 ;;		_scale
 10305 ;;		_sprintf
 10306 ;;		___asftmul
 10307 ;; This function uses a non-reentrant model
 10308 ;;
 10309                           
 10310                           	psect	text39
 10311  002B88                     __ptext39:
 10312                           	opt stack 0
 10313  002B88                     ___ftmul:
 10314                           	opt stack 23
 10315                           
 10316                           ;incstack = 0
 10317                           ;incstack = 0
 10318  002B88  0E0F               	movlw	15
 10319  002B8A  6E34               	movwf	??___ftmul& (0+255),c
 10320  002B8C  C02E  F035         	movff	___ftmul@f1,??___ftmul+1
 10321  002B90  C02F  F036         	movff	___ftmul@f1+1,??___ftmul+2
 10322  002B94  C030  F037         	movff	___ftmul@f1+2,??___ftmul+3
 10323  002B98  2834               	incf	??___ftmul,w,c
 10324  002B9A  6E38               	movwf	(??___ftmul+4)& (0+255),c
 10325  002B9C  D004               	goto	i2u330_40
 10326  002B9E                     i2u330_45:
 10327  002B9E  90D8               	bcf	status,0,c
 10328  002BA0  3237               	rrcf	??___ftmul+3,f,c
 10329  002BA2  3236               	rrcf	??___ftmul+2,f,c
 10330  002BA4  3235               	rrcf	??___ftmul+1,f,c
 10331  002BA6                     i2u330_40:
 10332  002BA6  2E38               	decfsz	(??___ftmul+4)& (0+255),f,c
 10333  002BA8  D7FA               	goto	i2u330_45
 10334  002BAA  5035               	movf	??___ftmul+1,w,c
 10335  002BAC  6E39               	movwf	___ftmul@exp,c
 10336  002BAE  6639               	tstfsz	___ftmul@exp& (0+255),c
 10337  002BB0  D001               	goto	i2l5261
 10338  002BB2  D015               	goto	i2u333_40
 10339  002BB4                     i2l5261:
 10340  002BB4  0E0F               	movlw	15
 10341  002BB6  6E34               	movwf	??___ftmul& (0+255),c
 10342  002BB8  C031  F035         	movff	___ftmul@f2,??___ftmul+1
 10343  002BBC  C032  F036         	movff	___ftmul@f2+1,??___ftmul+2
 10344  002BC0  C033  F037         	movff	___ftmul@f2+2,??___ftmul+3
 10345  002BC4  2834               	incf	??___ftmul,w,c
 10346  002BC6  6E38               	movwf	(??___ftmul+4)& (0+255),c
 10347  002BC8  D004               	goto	i2u332_40
 10348  002BCA                     i2u332_45:
 10349  002BCA  90D8               	bcf	status,0,c
 10350  002BCC  3237               	rrcf	??___ftmul+3,f,c
 10351  002BCE  3236               	rrcf	??___ftmul+2,f,c
 10352  002BD0  3235               	rrcf	??___ftmul+1,f,c
 10353  002BD2                     i2u332_40:
 10354  002BD2  2E38               	decfsz	(??___ftmul+4)& (0+255),f,c
 10355  002BD4  D7FA               	goto	i2u332_45
 10356  002BD6  5035               	movf	??___ftmul+1,w,c
 10357  002BD8  6E3E               	movwf	___ftmul@sign,c
 10358  002BDA  663E               	tstfsz	___ftmul@sign& (0+255),c
 10359  002BDC  D007               	goto	i2l5267
 10360  002BDE                     i2u333_40:
 10361  002BDE  0E00               	movlw	0
 10362  002BE0  6E2E               	movwf	?___ftmul,c
 10363  002BE2  0E00               	movlw	0
 10364  002BE4  6E2F               	movwf	?___ftmul+1,c
 10365  002BE6  0E00               	movlw	0
 10366  002BE8  6E30               	movwf	?___ftmul+2,c
 10367  002BEA  D055               	goto	i2l1044
 10368  002BEC                     i2l5267:
 10369  002BEC  503E               	movf	___ftmul@sign,w,c
 10370  002BEE  0F7B               	addlw	123
 10371  002BF0  2639               	addwf	___ftmul@exp,f,c
 10372  002BF2  C030  F03E         	movff	___ftmul@f1+2,___ftmul@sign
 10373  002BF6  5033               	movf	(___ftmul@f2+2)& (0+255),w,c
 10374  002BF8  1A3E               	xorwf	___ftmul@sign,f,c
 10375  002BFA  0E80               	movlw	128
 10376  002BFC  163E               	andwf	___ftmul@sign,f,c
 10377  002BFE  8E2F               	bsf	___ftmul@f1+1,7,c
 10378  002C00  8E32               	bsf	___ftmul@f2+1,7,c
 10379  002C02  0EFF               	movlw	255
 10380  002C04  1631               	andwf	___ftmul@f2,f,c
 10381  002C06  0EFF               	movlw	255
 10382  002C08  1632               	andwf	___ftmul@f2+1,f,c
 10383  002C0A  0E00               	movlw	0
 10384  002C0C  1633               	andwf	___ftmul@f2+2,f,c
 10385  002C0E  0E00               	movlw	0
 10386  002C10  6E3A               	movwf	___ftmul@f3_as_product,c
 10387  002C12  0E00               	movlw	0
 10388  002C14  6E3B               	movwf	___ftmul@f3_as_product+1,c
 10389  002C16  0E00               	movlw	0
 10390  002C18  6E3C               	movwf	___ftmul@f3_as_product+2,c
 10391  002C1A  6E34               	movwf	??___ftmul& (0+255),c
 10392  002C1C  0E07               	movlw	7
 10393  002C1E  6E3D               	movwf	___ftmul@cntr,c
 10394  002C20  5034               	movf	??___ftmul& (0+255),w,c
 10395  002C22                     i2l5281:
 10396  002C22  A02E               	btfss	___ftmul@f1,0,c
 10397  002C24  D006               	goto	i2l5285
 10398  002C26  5031               	movf	___ftmul@f2,w,c
 10399  002C28  263A               	addwf	___ftmul@f3_as_product,f,c
 10400  002C2A  5032               	movf	___ftmul@f2+1,w,c
 10401  002C2C  223B               	addwfc	___ftmul@f3_as_product+1,f,c
 10402  002C2E  5033               	movf	___ftmul@f2+2,w,c
 10403  002C30  223C               	addwfc	___ftmul@f3_as_product+2,f,c
 10404  002C32                     i2l5285:
 10405  002C32  90D8               	bcf	status,0,c
 10406  002C34  3230               	rrcf	___ftmul@f1+2,f,c
 10407  002C36  322F               	rrcf	___ftmul@f1+1,f,c
 10408  002C38  322E               	rrcf	___ftmul@f1,f,c
 10409  002C3A  90D8               	bcf	status,0,c
 10410  002C3C  3631               	rlcf	___ftmul@f2,f,c
 10411  002C3E  3632               	rlcf	___ftmul@f2+1,f,c
 10412  002C40  3633               	rlcf	___ftmul@f2+2,f,c
 10413  002C42  2E3D               	decfsz	___ftmul@cntr,f,c
 10414  002C44  D7EE               	goto	i2l5281
 10415  002C46  6E34               	movwf	??___ftmul& (0+255),c
 10416  002C48  0E09               	movlw	9
 10417  002C4A  6E3D               	movwf	___ftmul@cntr,c
 10418  002C4C  5034               	movf	??___ftmul& (0+255),w,c
 10419  002C4E                     i2l5291:
 10420  002C4E  A02E               	btfss	___ftmul@f1,0,c
 10421  002C50  D006               	goto	i2l5295
 10422  002C52  5031               	movf	___ftmul@f2,w,c
 10423  002C54  263A               	addwf	___ftmul@f3_as_product,f,c
 10424  002C56  5032               	movf	___ftmul@f2+1,w,c
 10425  002C58  223B               	addwfc	___ftmul@f3_as_product+1,f,c
 10426  002C5A  5033               	movf	___ftmul@f2+2,w,c
 10427  002C5C  223C               	addwfc	___ftmul@f3_as_product+2,f,c
 10428  002C5E                     i2l5295:
 10429  002C5E  90D8               	bcf	status,0,c
 10430  002C60  3230               	rrcf	___ftmul@f1+2,f,c
 10431  002C62  322F               	rrcf	___ftmul@f1+1,f,c
 10432  002C64  322E               	rrcf	___ftmul@f1,f,c
 10433  002C66  90D8               	bcf	status,0,c
 10434  002C68  323C               	rrcf	___ftmul@f3_as_product+2,f,c
 10435  002C6A  323B               	rrcf	___ftmul@f3_as_product+1,f,c
 10436  002C6C  323A               	rrcf	___ftmul@f3_as_product,f,c
 10437  002C6E  2E3D               	decfsz	___ftmul@cntr,f,c
 10438  002C70  D7EE               	goto	i2l5291
 10439  002C72  C03A  F001         	movff	___ftmul@f3_as_product,?___ftpack
 10440  002C76  C03B  F002         	movff	___ftmul@f3_as_product+1,?___ftpack+1
 10441  002C7A  C03C  F003         	movff	___ftmul@f3_as_product+2,?___ftpack+2
 10442  002C7E  C039  F004         	movff	___ftmul@exp,?___ftpack+3
 10443  002C82  C03E  F005         	movff	___ftmul@sign,?___ftpack+4
 10444  002C86  EC96  F018         	call	___ftpack	;wreg free
 10445  002C8A  C003  F030         	movff	?___ftpack+2,?___ftmul+2
 10446  002C8E  C002  F02F         	movff	?___ftpack+1,?___ftmul+1
 10447  002C92  C001  F02E         	movff	?___ftpack,?___ftmul
 10448  002C96                     i2l1044:
 10449  002C96  0012               	return	
 10450  002C98                     __end_of___ftmul:
 10451                           	opt stack 0
 10452                           tosu	equ	0xFFF
 10453                           tosh	equ	0xFFE
 10454                           tosl	equ	0xFFD
 10455                           pclatu	equ	0xFFB
 10456                           pclath	equ	0xFFA
 10457                           tblptru	equ	0xFF8
 10458                           tblptrh	equ	0xFF7
 10459                           tblptrl	equ	0xFF6
 10460                           tablat	equ	0xFF5
 10461                           prodh	equ	0xFF4
 10462                           prodl	equ	0xFF3
 10463                           intcon	equ	0xFF2
 10464                           intcon2	equ	0xFF1
 10465                           indf0	equ	0xFEF
 10466                           postinc0	equ	0xFEE
 10467                           fsr0h	equ	0xFEA
 10468                           fsr0l	equ	0xFE9
 10469                           wreg	equ	0xFE8
 10470                           postinc1	equ	0xFE6
 10471                           postdec1	equ	0xFE5
 10472                           fsr1h	equ	0xFE2
 10473                           fsr1l	equ	0xFE1
 10474                           indf2	equ	0xFDF
 10475                           postinc2	equ	0xFDE
 10476                           postdec2	equ	0xFDD
 10477                           plusw2	equ	0xFDB
 10478                           fsr2h	equ	0xFDA
 10479                           fsr2l	equ	0xFD9
 10480                           status	equ	0xFD8
 10481                           
 10482 ;; *************** function _fround *****************
 10483 ;; Defined at:
 10484 ;;		line 410 in file "/usr/opt/microchip/xc8/v1.20/sources/common/doprnt.c"
 10485 ;; Parameters:    Size  Location     Type
 10486 ;;  prec            1   62[COMRAM] unsigned char 
 10487 ;; Auto vars:     Size  Location     Type
 10488 ;;		None
 10489 ;; Return value:  Size  Location     Type
 10490 ;;                  3   62[COMRAM] unsigned char 
 10491 ;; Registers used:
 10492 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10493 ;; Tracked objects:
 10494 ;;		On entry : 0/0
 10495 ;;		On exit  : 0/0
 10496 ;;		Unchanged: 0/0
 10497 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10498 ;;      Params:         3       0       0       0       0       0       0       0       0
 10499 ;;      Locals:         6       0       0       0       0       0       0       0       0
 10500 ;;      Temps:          6       0       0       0       0       0       0       0       0
 10501 ;;      Totals:        15       0       0       0       0       0       0       0       0
 10502 ;;Total ram usage:       15 bytes
 10503 ;; Hardware stack levels used:    1
 10504 ;; Hardware stack levels required when called:    2
 10505 ;; This function calls:
 10506 ;;		___ftmul
 10507 ;;		___awdiv
 10508 ;;		___awmod
 10509 ;;		___wmul
 10510 ;; This function is called by:
 10511 ;;		_sprintf
 10512 ;; This function uses a non-reentrant model
 10513 ;;
 10514                           
 10515                           	psect	text40
 10516  001BCC                     __ptext40:
 10517                           	opt stack 0
 10518  001BCC                     _fround:
 10519                           	opt stack 21
 10520                           
 10521                           ;doprnt.c: 413: if(prec>=110)
 10522                           
 10523                           ;incstack = 0
 10524                           ;incstack = 0
 10525  001BCC  0E6D               	movlw	109
 10526  001BCE  643F               	cpfsgt	fround@prec,c
 10527  001BD0  D0AB               	goto	i2l5243
 10528                           
 10529                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
 10530  001BD2  0E00               	movlw	0
 10531  001BD4  6E1A               	movwf	?___wmul+3,c
 10532  001BD6  0E03               	movlw	3
 10533  001BD8  6E19               	movwf	?___wmul+2,c
 10534  001BDA  0E00               	movlw	0
 10535  001BDC  6E0D               	movwf	?___awdiv+3,c
 10536  001BDE  0E0A               	movlw	10
 10537  001BE0  6E0C               	movwf	?___awdiv+2,c
 10538  001BE2  0E00               	movlw	0
 10539  001BE4  6E04               	movwf	?___awmod+3,c
 10540  001BE6  0E64               	movlw	100
 10541  001BE8  6E03               	movwf	?___awmod+2,c
 10542  001BEA  C03F  F001         	movff	fround@prec,?___awmod
 10543  001BEE  6A02               	clrf	?___awmod+1,c
 10544  001BF0  EC47  F01B         	call	___awmod	;wreg free
 10545  001BF4  C001  F00A         	movff	?___awmod,?___awdiv
 10546  001BF8  C002  F00B         	movff	?___awmod+1,?___awdiv+1
 10547  001BFC  EC7D  F01A         	call	___awdiv	;wreg free
 10548  001C00  0E09               	movlw	9
 10549  001C02  240A               	addwf	?___awdiv,w,c
 10550  001C04  6E17               	movwf	?___wmul,c
 10551  001C06  0E00               	movlw	0
 10552  001C08  200B               	addwfc	?___awdiv+1,w,c
 10553  001C0A  6E18               	movwf	?___wmul+1,c
 10554  001C0C  ECEF  F01D         	call	___wmul	;wreg free
 10555  001C10  0E47               	movlw	low __npowers_
 10556  001C12  2417               	addwf	?___wmul,w,c
 10557  001C14  6EF6               	movwf	tblptrl,c
 10558  001C16  0E7F               	movlw	high __npowers_
 10559  001C18  2018               	addwfc	?___wmul+1,w,c
 10560  001C1A  6EF7               	movwf	tblptrh,c
 10561  001C1C  0009               	tblrd		*+
 10562  001C1E  CFF5 F042          	movff	tablat,??_fround
 10563  001C22  0009               	tblrd		*+
 10564  001C24  CFF5 F043          	movff	tablat,??_fround+1
 10565  001C28  0009               	tblrd		*+
 10566  001C2A  CFF5 F044          	movff	tablat,??_fround+2
 10567  001C2E  C044  F033         	movff	??_fround+2,?___ftmul+5
 10568  001C32  C043  F032         	movff	??_fround+1,?___ftmul+4
 10569  001C36  C042  F031         	movff	??_fround,?___ftmul+3
 10570  001C3A  0E00               	movlw	0
 10571  001C3C  6E1A               	movwf	?___wmul+3,c
 10572  001C3E  0E03               	movlw	3
 10573  001C40  6E19               	movwf	?___wmul+2,c
 10574  001C42  0E00               	movlw	0
 10575  001C44  6E0D               	movwf	?___awdiv+3,c
 10576  001C46  0E64               	movlw	100
 10577  001C48  6E0C               	movwf	?___awdiv+2,c
 10578  001C4A  C03F  F00A         	movff	fround@prec,?___awdiv
 10579  001C4E  6A0B               	clrf	?___awdiv+1,c
 10580  001C50  EC7D  F01A         	call	___awdiv	;wreg free
 10581  001C54  0E12               	movlw	18
 10582  001C56  240A               	addwf	?___awdiv,w,c
 10583  001C58  6E17               	movwf	?___wmul,c
 10584  001C5A  0E00               	movlw	0
 10585  001C5C  200B               	addwfc	?___awdiv+1,w,c
 10586  001C5E  6E18               	movwf	?___wmul+1,c
 10587  001C60  ECEF  F01D         	call	___wmul	;wreg free
 10588  001C64  0E47               	movlw	low __npowers_
 10589  001C66  2417               	addwf	?___wmul,w,c
 10590  001C68  6EF6               	movwf	tblptrl,c
 10591  001C6A  0E7F               	movlw	high __npowers_
 10592  001C6C  2018               	addwfc	?___wmul+1,w,c
 10593  001C6E  6EF7               	movwf	tblptrh,c
 10594  001C70  0009               	tblrd		*+
 10595  001C72  CFF5 F045          	movff	tablat,??_fround+3
 10596  001C76  0009               	tblrd		*+
 10597  001C78  CFF5 F046          	movff	tablat,??_fround+4
 10598  001C7C  0009               	tblrd		*+
 10599  001C7E  CFF5 F047          	movff	tablat,??_fround+5
 10600  001C82  C047  F030         	movff	??_fround+5,?___ftmul+2
 10601  001C86  C046  F02F         	movff	??_fround+4,?___ftmul+1
 10602  001C8A  C045  F02E         	movff	??_fround+3,?___ftmul
 10603  001C8E  ECC4  F015         	call	___ftmul	;wreg free
 10604  001C92  C030  F04D         	movff	?___ftmul+2,_fround$1278+2
 10605  001C96  C02F  F04C         	movff	?___ftmul+1,_fround$1278+1
 10606  001C9A  C02E  F04B         	movff	?___ftmul,_fround$1278
 10607                           
 10608                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
 10609  001C9E  0E00               	movlw	0
 10610  001CA0  6E1A               	movwf	?___wmul+3,c
 10611  001CA2  0E03               	movlw	3
 10612  001CA4  6E19               	movwf	?___wmul+2,c
 10613  001CA6  0E00               	movlw	0
 10614  001CA8  6E04               	movwf	?___awmod+3,c
 10615  001CAA  0E0A               	movlw	10
 10616  001CAC  6E03               	movwf	?___awmod+2,c
 10617  001CAE  C03F  F001         	movff	fround@prec,?___awmod
 10618  001CB2  6A02               	clrf	?___awmod+1,c
 10619  001CB4  EC47  F01B         	call	___awmod	;wreg free
 10620  001CB8  C001  F017         	movff	?___awmod,?___wmul
 10621  001CBC  C002  F018         	movff	?___awmod+1,?___wmul+1
 10622  001CC0  ECEF  F01D         	call	___wmul	;wreg free
 10623  001CC4  0E47               	movlw	low __npowers_
 10624  001CC6  2417               	addwf	?___wmul,w,c
 10625  001CC8  6EF6               	movwf	tblptrl,c
 10626  001CCA  0E7F               	movlw	high __npowers_
 10627  001CCC  2018               	addwfc	?___wmul+1,w,c
 10628  001CCE  6EF7               	movwf	tblptrh,c
 10629  001CD0  0009               	tblrd		*+
 10630  001CD2  CFF5 F042          	movff	tablat,??_fround
 10631  001CD6  0009               	tblrd		*+
 10632  001CD8  CFF5 F043          	movff	tablat,??_fround+1
 10633  001CDC  0009               	tblrd		*+
 10634  001CDE  CFF5 F044          	movff	tablat,??_fround+2
 10635  001CE2  C044  F033         	movff	??_fround+2,?___ftmul+5
 10636  001CE6  C043  F032         	movff	??_fround+1,?___ftmul+4
 10637  001CEA  C042  F031         	movff	??_fround,?___ftmul+3
 10638  001CEE  C04B  F02E         	movff	_fround$1278,?___ftmul
 10639  001CF2  C04C  F02F         	movff	_fround$1278+1,?___ftmul+1
 10640  001CF6  C04D  F030         	movff	_fround$1278+2,?___ftmul+2
 10641  001CFA  ECC4  F015         	call	___ftmul	;wreg free
 10642  001CFE  C030  F04A         	movff	?___ftmul+2,_fround$1279+2
 10643  001D02  C02F  F049         	movff	?___ftmul+1,_fround$1279+1
 10644  001D06  C02E  F048         	movff	?___ftmul,_fround$1279
 10645                           
 10646                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
 10647  001D0A  C048  F02E         	movff	_fround$1279,?___ftmul
 10648  001D0E  C049  F02F         	movff	_fround$1279+1,?___ftmul+1
 10649  001D12  C04A  F030         	movff	_fround$1279+2,?___ftmul+2
 10650  001D16  0E00               	movlw	0
 10651  001D18  6E31               	movwf	?___ftmul+3,c
 10652  001D1A  0E00               	movlw	0
 10653  001D1C  6E32               	movwf	?___ftmul+4,c
 10654  001D1E  0E3F               	movlw	63
 10655  001D20  6E33               	movwf	?___ftmul+5,c
 10656  001D22  ECC4  F015         	call	___ftmul	;wreg free
 10657  001D26  D08B               	goto	L18
 10658  001D28                     i2l5243:
 10659                           
 10660                           ;doprnt.c: 415: else if(prec > 10)
 10661  001D28  0E0A               	movlw	10
 10662  001D2A  643F               	cpfsgt	fround@prec,c
 10663  001D2C  D069               	goto	i2l5251
 10664                           
 10665                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
 10666  001D2E  0E00               	movlw	0
 10667  001D30  6E1A               	movwf	?___wmul+3,c
 10668  001D32  0E03               	movlw	3
 10669  001D34  6E19               	movwf	?___wmul+2,c
 10670  001D36  0E00               	movlw	0
 10671  001D38  6E04               	movwf	?___awmod+3,c
 10672  001D3A  0E0A               	movlw	10
 10673  001D3C  6E03               	movwf	?___awmod+2,c
 10674  001D3E  C03F  F001         	movff	fround@prec,?___awmod
 10675  001D42  6A02               	clrf	?___awmod+1,c
 10676  001D44  EC47  F01B         	call	___awmod	;wreg free
 10677  001D48  C001  F017         	movff	?___awmod,?___wmul
 10678  001D4C  C002  F018         	movff	?___awmod+1,?___wmul+1
 10679  001D50  ECEF  F01D         	call	___wmul	;wreg free
 10680  001D54  0E47               	movlw	low __npowers_
 10681  001D56  2417               	addwf	?___wmul,w,c
 10682  001D58  6EF6               	movwf	tblptrl,c
 10683  001D5A  0E7F               	movlw	high __npowers_
 10684  001D5C  2018               	addwfc	?___wmul+1,w,c
 10685  001D5E  6EF7               	movwf	tblptrh,c
 10686  001D60  0009               	tblrd		*+
 10687  001D62  CFF5 F042          	movff	tablat,??_fround
 10688  001D66  0009               	tblrd		*+
 10689  001D68  CFF5 F043          	movff	tablat,??_fround+1
 10690  001D6C  0009               	tblrd		*+
 10691  001D6E  CFF5 F044          	movff	tablat,??_fround+2
 10692  001D72  C044  F033         	movff	??_fround+2,?___ftmul+5
 10693  001D76  C043  F032         	movff	??_fround+1,?___ftmul+4
 10694  001D7A  C042  F031         	movff	??_fround,?___ftmul+3
 10695  001D7E  0E00               	movlw	0
 10696  001D80  6E1A               	movwf	?___wmul+3,c
 10697  001D82  0E03               	movlw	3
 10698  001D84  6E19               	movwf	?___wmul+2,c
 10699  001D86  0E00               	movlw	0
 10700  001D88  6E0D               	movwf	?___awdiv+3,c
 10701  001D8A  0E0A               	movlw	10
 10702  001D8C  6E0C               	movwf	?___awdiv+2,c
 10703  001D8E  C03F  F00A         	movff	fround@prec,?___awdiv
 10704  001D92  6A0B               	clrf	?___awdiv+1,c
 10705  001D94  EC7D  F01A         	call	___awdiv	;wreg free
 10706  001D98  0E09               	movlw	9
 10707  001D9A  240A               	addwf	?___awdiv,w,c
 10708  001D9C  6E17               	movwf	?___wmul,c
 10709  001D9E  0E00               	movlw	0
 10710  001DA0  200B               	addwfc	?___awdiv+1,w,c
 10711  001DA2  6E18               	movwf	?___wmul+1,c
 10712  001DA4  ECEF  F01D         	call	___wmul	;wreg free
 10713  001DA8  0E47               	movlw	low __npowers_
 10714  001DAA  2417               	addwf	?___wmul,w,c
 10715  001DAC  6EF6               	movwf	tblptrl,c
 10716  001DAE  0E7F               	movlw	high __npowers_
 10717  001DB0  2018               	addwfc	?___wmul+1,w,c
 10718  001DB2  6EF7               	movwf	tblptrh,c
 10719  001DB4  0009               	tblrd		*+
 10720  001DB6  CFF5 F045          	movff	tablat,??_fround+3
 10721  001DBA  0009               	tblrd		*+
 10722  001DBC  CFF5 F046          	movff	tablat,??_fround+4
 10723  001DC0  0009               	tblrd		*+
 10724  001DC2  CFF5 F047          	movff	tablat,??_fround+5
 10725  001DC6  C047  F030         	movff	??_fround+5,?___ftmul+2
 10726  001DCA  C046  F02F         	movff	??_fround+4,?___ftmul+1
 10727  001DCE  C045  F02E         	movff	??_fround+3,?___ftmul
 10728  001DD2  ECC4  F015         	call	___ftmul	;wreg free
 10729  001DD6  C030  F04D         	movff	?___ftmul+2,_fround$1278+2
 10730  001DDA  C02F  F04C         	movff	?___ftmul+1,_fround$1278+1
 10731  001DDE  C02E  F04B         	movff	?___ftmul,_fround$1278
 10732                           
 10733                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
 10734  001DE2  C04B  F02E         	movff	_fround$1278,?___ftmul
 10735  001DE6  C04C  F02F         	movff	_fround$1278+1,?___ftmul+1
 10736  001DEA  C04D  F030         	movff	_fround$1278+2,?___ftmul+2
 10737  001DEE  0E00               	movlw	0
 10738  001DF0  6E31               	movwf	?___ftmul+3,c
 10739  001DF2  0E00               	movlw	0
 10740  001DF4  6E32               	movwf	?___ftmul+4,c
 10741  001DF6  0E3F               	movlw	63
 10742  001DF8  6E33               	movwf	?___ftmul+5,c
 10743  001DFA  ECC4  F015         	call	___ftmul	;wreg free
 10744  001DFE  D01F               	goto	L18
 10745  001E00                     i2l5251:
 10746                           
 10747                           ;doprnt.c: 417: return 0.5 * _npowers_[prec];
 10748  001E00  503F               	movf	fround@prec,w,c
 10749  001E02  0D03               	mullw	3
 10750  001E04  0E47               	movlw	low __npowers_
 10751  001E06  24F3               	addwf	prodl,w,c
 10752  001E08  6EF6               	movwf	tblptrl,c
 10753  001E0A  0E7F               	movlw	high __npowers_
 10754  001E0C  20F4               	addwfc	prodh,w,c
 10755  001E0E  6EF7               	movwf	tblptrh,c
 10756  001E10  0009               	tblrd		*+
 10757  001E12  CFF5 F042          	movff	tablat,??_fround
 10758  001E16  0009               	tblrd		*+
 10759  001E18  CFF5 F043          	movff	tablat,??_fround+1
 10760  001E1C  0009               	tblrd		*+
 10761  001E1E  CFF5 F044          	movff	tablat,??_fround+2
 10762  001E22  C044  F030         	movff	??_fround+2,?___ftmul+2
 10763  001E26  C043  F02F         	movff	??_fround+1,?___ftmul+1
 10764  001E2A  C042  F02E         	movff	??_fround,?___ftmul
 10765  001E2E  0E00               	movlw	0
 10766  001E30  6E31               	movwf	?___ftmul+3,c
 10767  001E32  0E00               	movlw	0
 10768  001E34  6E32               	movwf	?___ftmul+4,c
 10769  001E36  0E3F               	movlw	63
 10770  001E38  6E33               	movwf	?___ftmul+5,c
 10771  001E3A  ECC4  F015         	call	___ftmul	;wreg free
 10772  001E3E                     L18:
 10773  001E3E  C030  F041         	movff	?___ftmul+2,?_fround+2
 10774  001E42  C02F  F040         	movff	?___ftmul+1,?_fround+1
 10775  001E46  C02E  F03F         	movff	?___ftmul,?_fround
 10776  001E4A  0012               	return	
 10777  001E4C                     __end_of_fround:
 10778                           	opt stack 0
 10779                           tosu	equ	0xFFF
 10780                           tosh	equ	0xFFE
 10781                           tosl	equ	0xFFD
 10782                           pclatu	equ	0xFFB
 10783                           pclath	equ	0xFFA
 10784                           tblptru	equ	0xFF8
 10785                           tblptrh	equ	0xFF7
 10786                           tblptrl	equ	0xFF6
 10787                           tablat	equ	0xFF5
 10788                           prodh	equ	0xFF4
 10789                           prodl	equ	0xFF3
 10790                           intcon	equ	0xFF2
 10791                           intcon2	equ	0xFF1
 10792                           indf0	equ	0xFEF
 10793                           postinc0	equ	0xFEE
 10794                           fsr0h	equ	0xFEA
 10795                           fsr0l	equ	0xFE9
 10796                           wreg	equ	0xFE8
 10797                           postinc1	equ	0xFE6
 10798                           postdec1	equ	0xFE5
 10799                           fsr1h	equ	0xFE2
 10800                           fsr1l	equ	0xFE1
 10801                           indf2	equ	0xFDF
 10802                           postinc2	equ	0xFDE
 10803                           postdec2	equ	0xFDD
 10804                           plusw2	equ	0xFDB
 10805                           fsr2h	equ	0xFDA
 10806                           fsr2l	equ	0xFD9
 10807                           status	equ	0xFD8
 10808                           
 10809 ;; *************** function _buttons *****************
 10810 ;; Defined at:
 10811 ;;		line 30 in file "buttons.c"
 10812 ;; Parameters:    Size  Location     Type
 10813 ;;		None
 10814 ;; Auto vars:     Size  Location     Type
 10815 ;;  cnt             1   13[COMRAM] unsigned char 
 10816 ;; Return value:  Size  Location     Type
 10817 ;;		None               void
 10818 ;; Registers used:
 10819 ;;		wreg, status,2, status,0, cstack
 10820 ;; Tracked objects:
 10821 ;;		On entry : 0/0
 10822 ;;		On exit  : 0/0
 10823 ;;		Unchanged: 0/0
 10824 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10825 ;;      Params:         0       0       0       0       0       0       0       0       0
 10826 ;;      Locals:         1       0       0       0       0       0       0       0       0
 10827 ;;      Temps:          4       0       0       0       0       0       0       0       0
 10828 ;;      Totals:         5       0       0       0       0       0       0       0       0
 10829 ;;Total ram usage:        5 bytes
 10830 ;; Hardware stack levels used:    1
 10831 ;; Hardware stack levels required when called:    1
 10832 ;; This function calls:
 10833 ;;		___awmod
 10834 ;; This function is called by:
 10835 ;;		_high_isr
 10836 ;; This function uses a non-reentrant model
 10837 ;;
 10838                           
 10839                           	psect	text41
 10840  002E8A                     __ptext41:
 10841                           	opt stack 0
 10842  002E8A                     _buttons:
 10843                           	opt stack 25
 10844                           
 10845                           ;buttons.c: 31: uint8_t cnt;
 10846                           ;buttons.c: 32: LATA5 = 0;
 10847                           
 10848                           ;incstack = 0
 10849                           ;incstack = 0
 10850  002E8A  9A89               	bcf	3977,5,c	;volatile
 10851                           
 10852                           ;buttons.c: 33: for (cnt = 0; cnt < 8; cnt++) {
 10853  002E8C  6E0A               	movwf	??_buttons& (0+255),c
 10854  002E8E  0E00               	movlw	0
 10855  002E90  6E0E               	movwf	buttons@cnt,c
 10856  002E92  500A               	movf	??_buttons& (0+255),w,c
 10857  002E94  D070               	goto	L22
 10858  002E96                     i2l426:
 10859                           
 10860                           ;buttons.c: 40: screen.brightness = 0xF;
 10861  002E96  0101               	movlb	1	; () banked
 10862  002E98  8109               	bsf	(_screen+9)& (0+255),0,b
 10863  002E9A  0101               	movlb	1	; () banked
 10864  002E9C  8309               	bsf	(_screen+9)& (0+255),1,b
 10865  002E9E  0101               	movlb	1	; () banked
 10866  002EA0  8509               	bsf	(_screen+9)& (0+255),2,b
 10867  002EA2  0101               	movlb	1	; () banked
 10868  002EA4  8709               	bsf	(_screen+9)& (0+255),3,b
 10869  002EA6  D00C               	goto	L19
 10870  002EA8                     i2l4989:
 10871                           
 10872                           ;buttons.c: 44: menu.state -= 1;
 10873  002EA8  0100               	movlb	0	; () banked
 10874  002EAA  0100               	movlb	0	; () banked
 10875  002EAC  71DD               	btg	_menu& (0+255),0,b
 10876  002EAE  D020               	goto	L20
 10877  002EB0                     i2l428:
 10878                           
 10879                           ;buttons.c: 48: screen.brightness = 0;
 10880  002EB0  0101               	movlb	1	; () banked
 10881  002EB2  9109               	bcf	(_screen+9)& (0+255),0,b
 10882  002EB4  0101               	movlb	1	; () banked
 10883  002EB6  9309               	bcf	(_screen+9)& (0+255),1,b
 10884  002EB8  0101               	movlb	1	; () banked
 10885  002EBA  9509               	bcf	(_screen+9)& (0+255),2,b
 10886  002EBC  0101               	movlb	1	; () banked
 10887  002EBE  9709               	bcf	(_screen+9)& (0+255),3,b
 10888  002EC0                     L19:
 10889                           
 10890                           ; BSR set to: 1
 10891                           ;buttons.c: 49: screen.changed |= (1 << 10);
 10892  002EC0  0101               	movlb	1	; () banked
 10893  002EC2  0101               	movlb	1	; () banked
 10894  002EC4  850C               	bsf	(_screen+12)& (0+255),2,b
 10895                           
 10896                           ;buttons.c: 50: break;
 10897  002EC6  D056               	goto	i2l5005
 10898  002EC8                     i2l430:
 10899                           
 10900                           ;buttons.c: 55: LATA5 = 1;
 10901  002EC8  8A89               	bsf	3977,5,c	;volatile
 10902                           
 10903                           ;buttons.c: 56: break;
 10904  002ECA  D054               	goto	i2l5005
 10905  002ECC                     i2l4993:
 10906                           
 10907                           ;buttons.c: 58: date.view = 10 % (date.view + 1);
 10908  002ECC  0E00               	movlw	0
 10909  002ECE  6E02               	movwf	?___awmod+1,c
 10910  002ED0  0E0A               	movlw	10
 10911  002ED2  6E01               	movwf	?___awmod,c
 10912  002ED4  0E01               	movlw	1
 10913  002ED6  0101               	movlb	1	; () banked
 10914  002ED8  0101               	movlb	1	; () banked
 10915  002EDA  2516               	addwf	(_date+9)& (0+255),w,b
 10916  002EDC  6E03               	movwf	?___awmod+2,c
 10917  002EDE  6A04               	clrf	?___awmod+3,c
 10918  002EE0  0E00               	movlw	0
 10919  002EE2  2204               	addwfc	?___awmod+3,f,c
 10920  002EE4  EC47  F01B         	call	___awmod	;wreg free
 10921  002EE8  5001               	movf	?___awmod,w,c
 10922  002EEA  0101               	movlb	1	; () banked
 10923  002EEC  0101               	movlb	1	; () banked
 10924  002EEE  6F16               	movwf	(_date+9)& (0+255),b
 10925  002EF0                     L20:
 10926                           
 10927                           ; BSR set to: 1
 10928                           ;buttons.c: 59: screen.changed |= 0b11111111;
 10929  002EF0  0EFF               	movlw	255
 10930  002EF2  0101               	movlb	1	; () banked
 10931  002EF4  0101               	movlb	1	; () banked
 10932  002EF6  130B               	iorwf	(_screen+11)& (0+255),f,b
 10933                           
 10934                           ;buttons.c: 60: break;
 10935  002EF8  D03D               	goto	i2l5005
 10936  002EFA                     i2l432:
 10937                           
 10938                           ;buttons.c: 62: if (menu.state) {
 10939  002EFA  0100               	movlb	0	; () banked
 10940  002EFC  0100               	movlb	0	; () banked
 10941  002EFE  A1DD               	btfss	_menu& (0+255),0,b
 10942  002F00  D006               	goto	i2l4999
 10943                           
 10944                           ; BSR set to: 0
 10945                           ;buttons.c: 63: printFn = &printTemp;
 10946  002F02  0E33               	movlw	high _printTemp
 10947  002F04  0100               	movlb	0	; () banked
 10948  002F06  0100               	movlb	0	; () banked
 10949  002F08  6FF6               	movwf	(_printFn+1)& (0+255),b
 10950  002F0A  0ED0               	movlw	low _printTemp
 10951  002F0C  D005               	goto	L21
 10952  002F0E                     i2l4999:
 10953                           
 10954                           ; BSR set to: 0
 10955                           ;buttons.c: 65: printFn = &printRTC;
 10956  002F0E  0E18               	movlw	high _printRTC
 10957  002F10  0100               	movlb	0	; () banked
 10958  002F12  0100               	movlb	0	; () banked
 10959  002F14  6FF6               	movwf	(_printFn+1)& (0+255),b
 10960  002F16  0E86               	movlw	low _printRTC
 10961  002F18                     L21:
 10962  002F18  0100               	movlb	0	; () banked
 10963  002F1A  6FF5               	movwf	_printFn& (0+255),b
 10964  002F1C  D02B               	goto	i2l5005
 10965  002F1E                     i2l5003:
 10966  002F1E  C00E  F00A         	movff	buttons@cnt,??_buttons
 10967  002F22  0E01               	movlw	1
 10968  002F24  6E0B               	movwf	(??_buttons+1)& (0+255),c
 10969  002F26  2A0A               	incf	??_buttons,f,c
 10970  002F28  D002               	goto	i2u300_44
 10971  002F2A                     i2u300_45:
 10972  002F2A  90D8               	bcf	status,0,c
 10973  002F2C  360B               	rlcf	??_buttons+1,f,c
 10974  002F2E                     i2u300_44:
 10975  002F2E  2E0A               	decfsz	??_buttons,f,c
 10976  002F30  D7FC               	goto	i2u300_45
 10977  002F32  500B               	movf	??_buttons+1,w,c
 10978  002F34  148A               	andwf	3978,w,c	;volatile
 10979  002F36  6E0C               	movwf	(??_buttons+2)& (0+255),c
 10980  002F38  6A0D               	clrf	(??_buttons+3)& (0+255),c
 10981                           
 10982                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 10983                           ; Switch size 1, requested type "space"
 10984                           ; Number of cases is 1, Range of values is 0 to 0
 10985                           ; switch strategies available:
 10986                           ; Name         Instructions Cycles
 10987                           ; simple_byte            4     3 (average)
 10988                           ;	Chosen strategy is simple_byte
 10989  002F3A  500D               	movf	??_buttons+3,w,c
 10990  002F3C  0A00               	xorlw	0	; case 0
 10991  002F3E  A4D8               	btfss	status,2,c
 10992  002F40  D019               	goto	i2l5005
 10993                           
 10994                           ; Switch size 1, requested type "space"
 10995                           ; Number of cases is 8, Range of values is 1 to 128
 10996                           ; switch strategies available:
 10997                           ; Name         Instructions Cycles
 10998                           ; simple_byte           25    13 (average)
 10999                           ;	Chosen strategy is simple_byte
 11000  002F42  500C               	movf	??_buttons+2,w,c
 11001  002F44  0A01               	xorlw	1	; case 1
 11002  002F46  B4D8               	btfsc	status,2,c
 11003  002F48  D7AF               	goto	i2l4989
 11004  002F4A  0A03               	xorlw	3	; case 2
 11005  002F4C  B4D8               	btfsc	status,2,c
 11006  002F4E  D7A3               	goto	i2l426
 11007  002F50  0A06               	xorlw	6	; case 4
 11008  002F52  B4D8               	btfsc	status,2,c
 11009  002F54  D7A9               	goto	i2l4989
 11010  002F56  0A0C               	xorlw	12	; case 8
 11011  002F58  B4D8               	btfsc	status,2,c
 11012  002F5A  D7AA               	goto	i2l428
 11013  002F5C  0A18               	xorlw	24	; case 16
 11014  002F5E  B4D8               	btfsc	status,2,c
 11015  002F60  D7B3               	goto	i2l430
 11016  002F62  0A30               	xorlw	48	; case 32
 11017  002F64  B4D8               	btfsc	status,2,c
 11018  002F66  D7B0               	goto	i2l430
 11019  002F68  0A60               	xorlw	96	; case 64
 11020  002F6A  B4D8               	btfsc	status,2,c
 11021  002F6C  D7AF               	goto	i2l4993
 11022  002F6E  0AC0               	xorlw	192	; case 128
 11023  002F70  B4D8               	btfsc	status,2,c
 11024  002F72  D7C3               	goto	i2l432
 11025  002F74                     i2l5005:
 11026  002F74  2A0E               	incf	buttons@cnt,f,c
 11027  002F76                     L22:
 11028  002F76  0E07               	movlw	7
 11029  002F78  640E               	cpfsgt	buttons@cnt,c
 11030  002F7A  D7D1               	goto	i2l5003
 11031  002F7C  0012               	return	
 11032  002F7E                     __end_of_buttons:
 11033                           	opt stack 0
 11034                           tosu	equ	0xFFF
 11035                           tosh	equ	0xFFE
 11036                           tosl	equ	0xFFD
 11037                           pclatu	equ	0xFFB
 11038                           pclath	equ	0xFFA
 11039                           tblptru	equ	0xFF8
 11040                           tblptrh	equ	0xFF7
 11041                           tblptrl	equ	0xFF6
 11042                           tablat	equ	0xFF5
 11043                           prodh	equ	0xFF4
 11044                           prodl	equ	0xFF3
 11045                           intcon	equ	0xFF2
 11046                           intcon2	equ	0xFF1
 11047                           indf0	equ	0xFEF
 11048                           postinc0	equ	0xFEE
 11049                           fsr0h	equ	0xFEA
 11050                           fsr0l	equ	0xFE9
 11051                           wreg	equ	0xFE8
 11052                           postinc1	equ	0xFE6
 11053                           postdec1	equ	0xFE5
 11054                           fsr1h	equ	0xFE2
 11055                           fsr1l	equ	0xFE1
 11056                           indf2	equ	0xFDF
 11057                           postinc2	equ	0xFDE
 11058                           postdec2	equ	0xFDD
 11059                           plusw2	equ	0xFDB
 11060                           fsr2h	equ	0xFDA
 11061                           fsr2l	equ	0xFD9
 11062                           status	equ	0xFD8
 11063                           
 11064 ;; *************** function _update *****************
 11065 ;; Defined at:
 11066 ;;		line 13 in file "disp.c"
 11067 ;; Parameters:    Size  Location     Type
 11068 ;;		None
 11069 ;; Auto vars:     Size  Location     Type
 11070 ;;  cnt             1   29[COMRAM] char 
 11071 ;; Return value:  Size  Location     Type
 11072 ;;		None               void
 11073 ;; Registers used:
 11074 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 11075 ;; Tracked objects:
 11076 ;;		On entry : 0/0
 11077 ;;		On exit  : 0/0
 11078 ;;		Unchanged: 0/0
 11079 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11080 ;;      Params:         0       0       0       0       0       0       0       0       0
 11081 ;;      Locals:         1       0       0       0       0       0       0       0       0
 11082 ;;      Temps:          5       0       0       0       0       0       0       0       0
 11083 ;;      Totals:         6       0       0       0       0       0       0       0       0
 11084 ;;Total ram usage:        6 bytes
 11085 ;; Hardware stack levels used:    1
 11086 ;; Hardware stack levels required when called:    3
 11087 ;; This function calls:
 11088 ;;		_writeDigit
 11089 ;;		_spi
 11090 ;; This function is called by:
 11091 ;;		_high_isr
 11092 ;; This function uses a non-reentrant model
 11093 ;;
 11094                           
 11095                           	psect	text42
 11096  000FAE                     __ptext42:
 11097                           	opt stack 0
 11098  000FAE                     _update:
 11099                           	opt stack 23
 11100                           
 11101                           ;disp.c: 14: if (screen.changed == 0) {
 11102                           
 11103                           ;incstack = 0
 11104                           ;incstack = 0
 11105  000FAE  0101               	movlb	1	; () banked
 11106  000FB0  0101               	movlb	1	; () banked
 11107  000FB2  510C               	movf	(_screen+12)& (0+255),w,b
 11108  000FB4  110B               	iorwf	(_screen+11)& (0+255),w,b
 11109  000FB6  B4D8               	btfsc	status,2,c
 11110  000FB8  D23D               	goto	i2l139
 11111                           
 11112                           ; BSR set to: 1
 11113                           ;disp.c: 16: }
 11114                           ;disp.c: 17: int8_t cnt;
 11115                           ;disp.c: 18: for (cnt = 15; cnt >= 0; cnt--) {
 11116                           
 11117                           ; BSR set to: 1
 11118                           
 11119                           ; BSR set to: 1
 11120                           ;disp.c: 15: return;
 11121  000FBA  6E19               	movwf	??_update& (0+255),c
 11122  000FBC  0E0F               	movlw	15
 11123  000FBE  6E1E               	movwf	update@cnt,c
 11124  000FC0  5019               	movf	??_update& (0+255),w,c
 11125  000FC2                     
 11126                           ; BSR set to: 1
 11127  000FC2  BE1E               	btfsc	update@cnt,7,c
 11128  000FC4  D237               	goto	i2l139
 11129  000FC6  D05A               	goto	i2l5363
 11130  000FC8                     i2l5349:
 11131                           
 11132                           ; BSR set to: 1
 11133                           ;disp.c: 21: writeDigit(1 << cnt, screen.digits.screen[cnt].bits);
 11134  000FC8  C01E  F019         	movff	update@cnt,??_update
 11135  000FCC  0E01               	movlw	1
 11136  000FCE  6E1A               	movwf	(??_update+1)& (0+255),c
 11137  000FD0  2A19               	incf	??_update,f,c
 11138  000FD2  D002               	goto	i2u343_44
 11139  000FD4                     i2u343_45:
 11140  000FD4  90D8               	bcf	status,0,c
 11141  000FD6  361A               	rlcf	??_update+1,f,c
 11142  000FD8                     i2u343_44:
 11143  000FD8  2E19               	decfsz	??_update,f,c
 11144  000FDA  D7FC               	goto	i2u343_45
 11145  000FDC  501A               	movf	??_update+1,w,c
 11146  000FDE  6E14               	movwf	?_writeDigit,c
 11147  000FE0  501E               	movf	update@cnt,w,c
 11148  000FE2  0D01               	mullw	1
 11149  000FE4  0101               	movlb	1	; () banked
 11150  000FE6  0E00               	movlw	low _screen
 11151  000FE8  24F3               	addwf	prodl,w,c
 11152  000FEA  6ED9               	movwf	fsr2l,c
 11153  000FEC  0101               	movlb	1	; () banked
 11154  000FEE  0E01               	movlw	high _screen
 11155  000FF0  20F4               	addwfc	prodh,w,c
 11156  000FF2  6EDA               	movwf	fsr2h,c
 11157  000FF4  50DF               	movf	indf2,w,c
 11158  000FF6  6E15               	movwf	?_writeDigit+1,c
 11159  000FF8  ECE8  F01C         	call	_writeDigit	;wreg free
 11160                           
 11161                           ;disp.c: 22: break;
 11162  000FFC  D201               	goto	i2l5365
 11163  000FFE                     i2l5351:
 11164                           
 11165                           ;disp.c: 24: spi(0b1001, screen.decode);
 11166  000FFE  6E19               	movwf	??_update& (0+255),c
 11167  001000  0E09               	movlw	9
 11168  001002  6E07               	movwf	?_spi,c
 11169  001004  5019               	movf	??_update& (0+255),w,c
 11170  001006  0101               	movlb	1	; () banked
 11171  001008  0101               	movlb	1	; () banked
 11172  00100A  5108               	movf	(_screen+8)& (0+255),w,b
 11173  00100C  0BFF               	andlw	255
 11174  00100E  6E08               	movwf	?_spi+1,c
 11175  001010  EC99  F019         	call	_spi	;wreg free
 11176                           
 11177                           ;disp.c: 25: break;
 11178  001014  D1F5               	goto	i2l5365
 11179  001016                     i2l5353:
 11180                           
 11181                           ;disp.c: 27: spi(0b1010, screen.brightness);
 11182  001016  6E19               	movwf	??_update& (0+255),c
 11183  001018  0E0A               	movlw	10
 11184  00101A  6E07               	movwf	?_spi,c
 11185  00101C  5019               	movf	??_update& (0+255),w,c
 11186  00101E  0101               	movlb	1	; () banked
 11187  001020  0101               	movlb	1	; () banked
 11188  001022  5109               	movf	(_screen+9)& (0+255),w,b
 11189  001024  0B0F               	andlw	15
 11190  001026  6E08               	movwf	?_spi+1,c
 11191  001028  EC99  F019         	call	_spi	;wreg free
 11192                           
 11193                           ;disp.c: 28: break;
 11194  00102C  D1E9               	goto	i2l5365
 11195  00102E                     i2l5355:
 11196                           
 11197                           ;disp.c: 30: spi(0b1011, screen.scan);
 11198  00102E  6E19               	movwf	??_update& (0+255),c
 11199  001030  0E0B               	movlw	11
 11200  001032  6E07               	movwf	?_spi,c
 11201  001034  5019               	movf	??_update& (0+255),w,c
 11202  001036  0101               	movlb	1	; () banked
 11203  001038  0101               	movlb	1	; () banked
 11204  00103A  3909               	swapf	(_screen+9)& (0+255),w,b
 11205  00103C  0B07               	andlw	7
 11206  00103E  6E08               	movwf	?_spi+1,c
 11207  001040  EC99  F019         	call	_spi	;wreg free
 11208                           
 11209                           ;disp.c: 31: break;
 11210  001044  D1DD               	goto	i2l5365
 11211  001046                     i2l5357:
 11212                           
 11213                           ;disp.c: 33: spi(0b1111, screen.test);
 11214  001046  6E19               	movwf	??_update& (0+255),c
 11215  001048  0E0F               	movlw	15
 11216  00104A  6E07               	movwf	?_spi,c
 11217  00104C  5019               	movf	??_update& (0+255),w,c
 11218  00104E  0E00               	movlw	0
 11219  001050  0101               	movlb	1	; () banked
 11220  001052  BF09               	btfsc	(_screen+9)& (0+255),7,b
 11221  001054  0E01               	movlw	1
 11222  001056  6E08               	movwf	?_spi+1,c
 11223  001058  EC99  F019         	call	_spi	;wreg free
 11224                           
 11225                           ;disp.c: 34: break;
 11226  00105C  D1D1               	goto	i2l5365
 11227  00105E                     i2l5359:
 11228                           
 11229                           ;disp.c: 36: spi(0b1100, !screen.shutdown);
 11230  00105E  6E19               	movwf	??_update& (0+255),c
 11231  001060  0E0C               	movlw	12
 11232  001062  6E07               	movwf	?_spi,c
 11233  001064  5019               	movf	??_update& (0+255),w,c
 11234  001066  0101               	movlb	1	; () banked
 11235  001068  0101               	movlb	1	; () banked
 11236  00106A  B10A               	btfsc	(_screen+10)& (0+255),0,b
 11237  00106C  D002               	goto	i2u344_40
 11238  00106E  0E01               	movlw	1
 11239  001070  D001               	goto	i2u344_46
 11240  001072                     i2u344_40:
 11241  001072  0E00               	movlw	0
 11242  001074                     i2u344_46:
 11243  001074  6E08               	movwf	?_spi+1,c
 11244  001076  EC99  F019         	call	_spi	;wreg free
 11245                           
 11246                           ;disp.c: 37: break;
 11247  00107A  D1C2               	goto	i2l5365
 11248  00107C                     i2l5363:
 11249  00107C  C01E  F019         	movff	update@cnt,??_update
 11250  001080  0E01               	movlw	1
 11251  001082  6E1A               	movwf	(??_update+1)& (0+255),c
 11252  001084  6A1B               	clrf	(??_update+2)& (0+255),c
 11253  001086  2A19               	incf	??_update,f,c
 11254  001088  D003               	goto	i2u345_44
 11255  00108A                     i2u345_45:
 11256  00108A  90D8               	bcf	status,0,c
 11257  00108C  361A               	rlcf	??_update+1,f,c
 11258  00108E  361B               	rlcf	??_update+2,f,c
 11259  001090                     i2u345_44:
 11260  001090  2E19               	decfsz	??_update,f,c
 11261  001092  D7FB               	goto	i2u345_45
 11262  001094  0101               	movlb	1	; () banked
 11263  001096  0101               	movlb	1	; () banked
 11264  001098  510B               	movf	(_screen+11)& (0+255),w,b
 11265  00109A  161A               	andwf	??_update+1,f,c
 11266  00109C  0101               	movlb	1	; () banked
 11267  00109E  0101               	movlb	1	; () banked
 11268  0010A0  510C               	movf	(_screen+12)& (0+255),w,b
 11269  0010A2  161B               	andwf	??_update+2,f,c
 11270                           
 11271                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 6 sub-sw
      +                          itches
 11272                           ; Switch size 1, requested type "space"
 11273                           ; Number of cases is 6, Range of values is 0 to 32
 11274                           ; switch strategies available:
 11275                           ; Name         Instructions Cycles
 11276                           ; simple_byte           19    10 (average)
 11277                           ;	Chosen strategy is simple_byte
 11278  0010A4  501B               	movf	??_update+2,w,c
 11279  0010A6  0A00               	xorlw	0	; case 0
 11280  0010A8  B4D8               	btfsc	status,2,c
 11281  0010AA  D010               	goto	i2l6317
 11282  0010AC  0A02               	xorlw	2	; case 2
 11283  0010AE  B4D8               	btfsc	status,2,c
 11284  0010B0  D18F               	goto	i2l6319
 11285  0010B2  0A06               	xorlw	6	; case 4
 11286  0010B4  B4D8               	btfsc	status,2,c
 11287  0010B6  D191               	goto	i2l6321
 11288  0010B8  0A0C               	xorlw	12	; case 8
 11289  0010BA  B4D8               	btfsc	status,2,c
 11290  0010BC  D193               	goto	i2l6323
 11291  0010BE  0A18               	xorlw	24	; case 16
 11292  0010C0  B4D8               	btfsc	status,2,c
 11293  0010C2  D195               	goto	i2l6325
 11294  0010C4  0A30               	xorlw	48	; case 32
 11295  0010C6  B4D8               	btfsc	status,2,c
 11296  0010C8  D197               	goto	i2l6327
 11297  0010CA  D19A               	goto	i2l5365
 11298  0010CC                     i2l6317:
 11299                           
 11300                           ; BSR set to: 1
 11301                           ; Switch size 1, requested type "space"
 11302                           ; Number of cases is 128, Range of values is 1 to 128
 11303                           ; switch strategies available:
 11304                           ; Name         Instructions Cycles
 11305                           ; simple_byte          385   193 (average)
 11306                           ;	Chosen strategy is simple_byte
 11307  0010CC  501A               	movf	??_update+1,w,c
 11308  0010CE  0A01               	xorlw	1	; case 1
 11309  0010D0  B4D8               	btfsc	status,2,c
 11310  0010D2  D77A               	goto	i2l5349
 11311  0010D4  0A03               	xorlw	3	; case 2
 11312  0010D6  B4D8               	btfsc	status,2,c
 11313  0010D8  D777               	goto	i2l5349
 11314  0010DA  0A01               	xorlw	1	; case 3
 11315  0010DC  B4D8               	btfsc	status,2,c
 11316  0010DE  D774               	goto	i2l5349
 11317  0010E0  0A07               	xorlw	7	; case 4
 11318  0010E2  B4D8               	btfsc	status,2,c
 11319  0010E4  D771               	goto	i2l5349
 11320  0010E6  0A01               	xorlw	1	; case 5
 11321  0010E8  B4D8               	btfsc	status,2,c
 11322  0010EA  D76E               	goto	i2l5349
 11323  0010EC  0A03               	xorlw	3	; case 6
 11324  0010EE  B4D8               	btfsc	status,2,c
 11325  0010F0  D76B               	goto	i2l5349
 11326  0010F2  0A01               	xorlw	1	; case 7
 11327  0010F4  B4D8               	btfsc	status,2,c
 11328  0010F6  D768               	goto	i2l5349
 11329  0010F8  0A0F               	xorlw	15	; case 8
 11330  0010FA  B4D8               	btfsc	status,2,c
 11331  0010FC  D765               	goto	i2l5349
 11332  0010FE  0A01               	xorlw	1	; case 9
 11333  001100  B4D8               	btfsc	status,2,c
 11334  001102  D762               	goto	i2l5349
 11335  001104  0A03               	xorlw	3	; case 10
 11336  001106  B4D8               	btfsc	status,2,c
 11337  001108  D75F               	goto	i2l5349
 11338  00110A  0A01               	xorlw	1	; case 11
 11339  00110C  B4D8               	btfsc	status,2,c
 11340  00110E  D75C               	goto	i2l5349
 11341  001110  0A07               	xorlw	7	; case 12
 11342  001112  B4D8               	btfsc	status,2,c
 11343  001114  D759               	goto	i2l5349
 11344  001116  0A01               	xorlw	1	; case 13
 11345  001118  B4D8               	btfsc	status,2,c
 11346  00111A  D756               	goto	i2l5349
 11347  00111C  0A03               	xorlw	3	; case 14
 11348  00111E  B4D8               	btfsc	status,2,c
 11349  001120  D753               	goto	i2l5349
 11350  001122  0A01               	xorlw	1	; case 15
 11351  001124  B4D8               	btfsc	status,2,c
 11352  001126  D750               	goto	i2l5349
 11353  001128  0A1F               	xorlw	31	; case 16
 11354  00112A  B4D8               	btfsc	status,2,c
 11355  00112C  D74D               	goto	i2l5349
 11356  00112E  0A01               	xorlw	1	; case 17
 11357  001130  B4D8               	btfsc	status,2,c
 11358  001132  D74A               	goto	i2l5349
 11359  001134  0A03               	xorlw	3	; case 18
 11360  001136  B4D8               	btfsc	status,2,c
 11361  001138  D747               	goto	i2l5349
 11362  00113A  0A01               	xorlw	1	; case 19
 11363  00113C  B4D8               	btfsc	status,2,c
 11364  00113E  D744               	goto	i2l5349
 11365  001140  0A07               	xorlw	7	; case 20
 11366  001142  B4D8               	btfsc	status,2,c
 11367  001144  D741               	goto	i2l5349
 11368  001146  0A01               	xorlw	1	; case 21
 11369  001148  B4D8               	btfsc	status,2,c
 11370  00114A  D73E               	goto	i2l5349
 11371  00114C  0A03               	xorlw	3	; case 22
 11372  00114E  B4D8               	btfsc	status,2,c
 11373  001150  D73B               	goto	i2l5349
 11374  001152  0A01               	xorlw	1	; case 23
 11375  001154  B4D8               	btfsc	status,2,c
 11376  001156  D738               	goto	i2l5349
 11377  001158  0A0F               	xorlw	15	; case 24
 11378  00115A  B4D8               	btfsc	status,2,c
 11379  00115C  D735               	goto	i2l5349
 11380  00115E  0A01               	xorlw	1	; case 25
 11381  001160  B4D8               	btfsc	status,2,c
 11382  001162  D732               	goto	i2l5349
 11383  001164  0A03               	xorlw	3	; case 26
 11384  001166  B4D8               	btfsc	status,2,c
 11385  001168  D72F               	goto	i2l5349
 11386  00116A  0A01               	xorlw	1	; case 27
 11387  00116C  B4D8               	btfsc	status,2,c
 11388  00116E  D72C               	goto	i2l5349
 11389  001170  0A07               	xorlw	7	; case 28
 11390  001172  B4D8               	btfsc	status,2,c
 11391  001174  D729               	goto	i2l5349
 11392  001176  0A01               	xorlw	1	; case 29
 11393  001178  B4D8               	btfsc	status,2,c
 11394  00117A  D726               	goto	i2l5349
 11395  00117C  0A03               	xorlw	3	; case 30
 11396  00117E  B4D8               	btfsc	status,2,c
 11397  001180  D723               	goto	i2l5349
 11398  001182  0A01               	xorlw	1	; case 31
 11399  001184  B4D8               	btfsc	status,2,c
 11400  001186  D720               	goto	i2l5349
 11401  001188  0A3F               	xorlw	63	; case 32
 11402  00118A  B4D8               	btfsc	status,2,c
 11403  00118C  D71D               	goto	i2l5349
 11404  00118E  0A01               	xorlw	1	; case 33
 11405  001190  B4D8               	btfsc	status,2,c
 11406  001192  D71A               	goto	i2l5349
 11407  001194  0A03               	xorlw	3	; case 34
 11408  001196  B4D8               	btfsc	status,2,c
 11409  001198  D717               	goto	i2l5349
 11410  00119A  0A01               	xorlw	1	; case 35
 11411  00119C  B4D8               	btfsc	status,2,c
 11412  00119E  D714               	goto	i2l5349
 11413  0011A0  0A07               	xorlw	7	; case 36
 11414  0011A2  B4D8               	btfsc	status,2,c
 11415  0011A4  D711               	goto	i2l5349
 11416  0011A6  0A01               	xorlw	1	; case 37
 11417  0011A8  B4D8               	btfsc	status,2,c
 11418  0011AA  D70E               	goto	i2l5349
 11419  0011AC  0A03               	xorlw	3	; case 38
 11420  0011AE  B4D8               	btfsc	status,2,c
 11421  0011B0  D70B               	goto	i2l5349
 11422  0011B2  0A01               	xorlw	1	; case 39
 11423  0011B4  B4D8               	btfsc	status,2,c
 11424  0011B6  D708               	goto	i2l5349
 11425  0011B8  0A0F               	xorlw	15	; case 40
 11426  0011BA  B4D8               	btfsc	status,2,c
 11427  0011BC  D705               	goto	i2l5349
 11428  0011BE  0A01               	xorlw	1	; case 41
 11429  0011C0  B4D8               	btfsc	status,2,c
 11430  0011C2  D702               	goto	i2l5349
 11431  0011C4  0A03               	xorlw	3	; case 42
 11432  0011C6  B4D8               	btfsc	status,2,c
 11433  0011C8  D6FF               	goto	i2l5349
 11434  0011CA  0A01               	xorlw	1	; case 43
 11435  0011CC  B4D8               	btfsc	status,2,c
 11436  0011CE  D6FC               	goto	i2l5349
 11437  0011D0  0A07               	xorlw	7	; case 44
 11438  0011D2  B4D8               	btfsc	status,2,c
 11439  0011D4  D6F9               	goto	i2l5349
 11440  0011D6  0A01               	xorlw	1	; case 45
 11441  0011D8  B4D8               	btfsc	status,2,c
 11442  0011DA  D6F6               	goto	i2l5349
 11443  0011DC  0A03               	xorlw	3	; case 46
 11444  0011DE  B4D8               	btfsc	status,2,c
 11445  0011E0  D6F3               	goto	i2l5349
 11446  0011E2  0A01               	xorlw	1	; case 47
 11447  0011E4  B4D8               	btfsc	status,2,c
 11448  0011E6  D6F0               	goto	i2l5349
 11449  0011E8  0A1F               	xorlw	31	; case 48
 11450  0011EA  B4D8               	btfsc	status,2,c
 11451  0011EC  D6ED               	goto	i2l5349
 11452  0011EE  0A01               	xorlw	1	; case 49
 11453  0011F0  B4D8               	btfsc	status,2,c
 11454  0011F2  D6EA               	goto	i2l5349
 11455  0011F4  0A03               	xorlw	3	; case 50
 11456  0011F6  B4D8               	btfsc	status,2,c
 11457  0011F8  D6E7               	goto	i2l5349
 11458  0011FA  0A01               	xorlw	1	; case 51
 11459  0011FC  B4D8               	btfsc	status,2,c
 11460  0011FE  D6E4               	goto	i2l5349
 11461  001200  0A07               	xorlw	7	; case 52
 11462  001202  B4D8               	btfsc	status,2,c
 11463  001204  D6E1               	goto	i2l5349
 11464  001206  0A01               	xorlw	1	; case 53
 11465  001208  B4D8               	btfsc	status,2,c
 11466  00120A  D6DE               	goto	i2l5349
 11467  00120C  0A03               	xorlw	3	; case 54
 11468  00120E  B4D8               	btfsc	status,2,c
 11469  001210  D6DB               	goto	i2l5349
 11470  001212  0A01               	xorlw	1	; case 55
 11471  001214  B4D8               	btfsc	status,2,c
 11472  001216  D6D8               	goto	i2l5349
 11473  001218  0A0F               	xorlw	15	; case 56
 11474  00121A  B4D8               	btfsc	status,2,c
 11475  00121C  D6D5               	goto	i2l5349
 11476  00121E  0A01               	xorlw	1	; case 57
 11477  001220  B4D8               	btfsc	status,2,c
 11478  001222  D6D2               	goto	i2l5349
 11479  001224  0A03               	xorlw	3	; case 58
 11480  001226  B4D8               	btfsc	status,2,c
 11481  001228  D6CF               	goto	i2l5349
 11482  00122A  0A01               	xorlw	1	; case 59
 11483  00122C  B4D8               	btfsc	status,2,c
 11484  00122E  D6CC               	goto	i2l5349
 11485  001230  0A07               	xorlw	7	; case 60
 11486  001232  B4D8               	btfsc	status,2,c
 11487  001234  D6C9               	goto	i2l5349
 11488  001236  0A01               	xorlw	1	; case 61
 11489  001238  B4D8               	btfsc	status,2,c
 11490  00123A  D6C6               	goto	i2l5349
 11491  00123C  0A03               	xorlw	3	; case 62
 11492  00123E  B4D8               	btfsc	status,2,c
 11493  001240  D6C3               	goto	i2l5349
 11494  001242  0A01               	xorlw	1	; case 63
 11495  001244  B4D8               	btfsc	status,2,c
 11496  001246  D6C0               	goto	i2l5349
 11497  001248  0A7F               	xorlw	127	; case 64
 11498  00124A  B4D8               	btfsc	status,2,c
 11499  00124C  D6BD               	goto	i2l5349
 11500  00124E  0A01               	xorlw	1	; case 65
 11501  001250  B4D8               	btfsc	status,2,c
 11502  001252  D6BA               	goto	i2l5349
 11503  001254  0A03               	xorlw	3	; case 66
 11504  001256  B4D8               	btfsc	status,2,c
 11505  001258  D6B7               	goto	i2l5349
 11506  00125A  0A01               	xorlw	1	; case 67
 11507  00125C  B4D8               	btfsc	status,2,c
 11508  00125E  D6B4               	goto	i2l5349
 11509  001260  0A07               	xorlw	7	; case 68
 11510  001262  B4D8               	btfsc	status,2,c
 11511  001264  D6B1               	goto	i2l5349
 11512  001266  0A01               	xorlw	1	; case 69
 11513  001268  B4D8               	btfsc	status,2,c
 11514  00126A  D6AE               	goto	i2l5349
 11515  00126C  0A03               	xorlw	3	; case 70
 11516  00126E  B4D8               	btfsc	status,2,c
 11517  001270  D6AB               	goto	i2l5349
 11518  001272  0A01               	xorlw	1	; case 71
 11519  001274  B4D8               	btfsc	status,2,c
 11520  001276  D6A8               	goto	i2l5349
 11521  001278  0A0F               	xorlw	15	; case 72
 11522  00127A  B4D8               	btfsc	status,2,c
 11523  00127C  D6A5               	goto	i2l5349
 11524  00127E  0A01               	xorlw	1	; case 73
 11525  001280  B4D8               	btfsc	status,2,c
 11526  001282  D6A2               	goto	i2l5349
 11527  001284  0A03               	xorlw	3	; case 74
 11528  001286  B4D8               	btfsc	status,2,c
 11529  001288  D69F               	goto	i2l5349
 11530  00128A  0A01               	xorlw	1	; case 75
 11531  00128C  B4D8               	btfsc	status,2,c
 11532  00128E  D69C               	goto	i2l5349
 11533  001290  0A07               	xorlw	7	; case 76
 11534  001292  B4D8               	btfsc	status,2,c
 11535  001294  D699               	goto	i2l5349
 11536  001296  0A01               	xorlw	1	; case 77
 11537  001298  B4D8               	btfsc	status,2,c
 11538  00129A  D696               	goto	i2l5349
 11539  00129C  0A03               	xorlw	3	; case 78
 11540  00129E  B4D8               	btfsc	status,2,c
 11541  0012A0  D693               	goto	i2l5349
 11542  0012A2  0A01               	xorlw	1	; case 79
 11543  0012A4  B4D8               	btfsc	status,2,c
 11544  0012A6  D690               	goto	i2l5349
 11545  0012A8  0A1F               	xorlw	31	; case 80
 11546  0012AA  B4D8               	btfsc	status,2,c
 11547  0012AC  D68D               	goto	i2l5349
 11548  0012AE  0A01               	xorlw	1	; case 81
 11549  0012B0  B4D8               	btfsc	status,2,c
 11550  0012B2  D68A               	goto	i2l5349
 11551  0012B4  0A03               	xorlw	3	; case 82
 11552  0012B6  B4D8               	btfsc	status,2,c
 11553  0012B8  D687               	goto	i2l5349
 11554  0012BA  0A01               	xorlw	1	; case 83
 11555  0012BC  B4D8               	btfsc	status,2,c
 11556  0012BE  D684               	goto	i2l5349
 11557  0012C0  0A07               	xorlw	7	; case 84
 11558  0012C2  B4D8               	btfsc	status,2,c
 11559  0012C4  D681               	goto	i2l5349
 11560  0012C6  0A01               	xorlw	1	; case 85
 11561  0012C8  B4D8               	btfsc	status,2,c
 11562  0012CA  D67E               	goto	i2l5349
 11563  0012CC  0A03               	xorlw	3	; case 86
 11564  0012CE  B4D8               	btfsc	status,2,c
 11565  0012D0  D67B               	goto	i2l5349
 11566  0012D2  0A01               	xorlw	1	; case 87
 11567  0012D4  B4D8               	btfsc	status,2,c
 11568  0012D6  D678               	goto	i2l5349
 11569  0012D8  0A0F               	xorlw	15	; case 88
 11570  0012DA  B4D8               	btfsc	status,2,c
 11571  0012DC  D675               	goto	i2l5349
 11572  0012DE  0A01               	xorlw	1	; case 89
 11573  0012E0  B4D8               	btfsc	status,2,c
 11574  0012E2  D672               	goto	i2l5349
 11575  0012E4  0A03               	xorlw	3	; case 90
 11576  0012E6  B4D8               	btfsc	status,2,c
 11577  0012E8  D66F               	goto	i2l5349
 11578  0012EA  0A01               	xorlw	1	; case 91
 11579  0012EC  B4D8               	btfsc	status,2,c
 11580  0012EE  D66C               	goto	i2l5349
 11581  0012F0  0A07               	xorlw	7	; case 92
 11582  0012F2  B4D8               	btfsc	status,2,c
 11583  0012F4  D669               	goto	i2l5349
 11584  0012F6  0A01               	xorlw	1	; case 93
 11585  0012F8  B4D8               	btfsc	status,2,c
 11586  0012FA  D666               	goto	i2l5349
 11587  0012FC  0A03               	xorlw	3	; case 94
 11588  0012FE  B4D8               	btfsc	status,2,c
 11589  001300  D663               	goto	i2l5349
 11590  001302  0A01               	xorlw	1	; case 95
 11591  001304  B4D8               	btfsc	status,2,c
 11592  001306  D660               	goto	i2l5349
 11593  001308  0A3F               	xorlw	63	; case 96
 11594  00130A  B4D8               	btfsc	status,2,c
 11595  00130C  D65D               	goto	i2l5349
 11596  00130E  0A01               	xorlw	1	; case 97
 11597  001310  B4D8               	btfsc	status,2,c
 11598  001312  D65A               	goto	i2l5349
 11599  001314  0A03               	xorlw	3	; case 98
 11600  001316  B4D8               	btfsc	status,2,c
 11601  001318  D657               	goto	i2l5349
 11602  00131A  0A01               	xorlw	1	; case 99
 11603  00131C  B4D8               	btfsc	status,2,c
 11604  00131E  D654               	goto	i2l5349
 11605  001320  0A07               	xorlw	7	; case 100
 11606  001322  B4D8               	btfsc	status,2,c
 11607  001324  D651               	goto	i2l5349
 11608  001326  0A01               	xorlw	1	; case 101
 11609  001328  B4D8               	btfsc	status,2,c
 11610  00132A  D64E               	goto	i2l5349
 11611  00132C  0A03               	xorlw	3	; case 102
 11612  00132E  B4D8               	btfsc	status,2,c
 11613  001330  D64B               	goto	i2l5349
 11614  001332  0A01               	xorlw	1	; case 103
 11615  001334  B4D8               	btfsc	status,2,c
 11616  001336  D648               	goto	i2l5349
 11617  001338  0A0F               	xorlw	15	; case 104
 11618  00133A  B4D8               	btfsc	status,2,c
 11619  00133C  D645               	goto	i2l5349
 11620  00133E  0A01               	xorlw	1	; case 105
 11621  001340  B4D8               	btfsc	status,2,c
 11622  001342  D642               	goto	i2l5349
 11623  001344  0A03               	xorlw	3	; case 106
 11624  001346  B4D8               	btfsc	status,2,c
 11625  001348  D63F               	goto	i2l5349
 11626  00134A  0A01               	xorlw	1	; case 107
 11627  00134C  B4D8               	btfsc	status,2,c
 11628  00134E  D63C               	goto	i2l5349
 11629  001350  0A07               	xorlw	7	; case 108
 11630  001352  B4D8               	btfsc	status,2,c
 11631  001354  D639               	goto	i2l5349
 11632  001356  0A01               	xorlw	1	; case 109
 11633  001358  B4D8               	btfsc	status,2,c
 11634  00135A  D636               	goto	i2l5349
 11635  00135C  0A03               	xorlw	3	; case 110
 11636  00135E  B4D8               	btfsc	status,2,c
 11637  001360  D633               	goto	i2l5349
 11638  001362  0A01               	xorlw	1	; case 111
 11639  001364  B4D8               	btfsc	status,2,c
 11640  001366  D630               	goto	i2l5349
 11641  001368  0A1F               	xorlw	31	; case 112
 11642  00136A  B4D8               	btfsc	status,2,c
 11643  00136C  D62D               	goto	i2l5349
 11644  00136E  0A01               	xorlw	1	; case 113
 11645  001370  B4D8               	btfsc	status,2,c
 11646  001372  D62A               	goto	i2l5349
 11647  001374  0A03               	xorlw	3	; case 114
 11648  001376  B4D8               	btfsc	status,2,c
 11649  001378  D627               	goto	i2l5349
 11650  00137A  0A01               	xorlw	1	; case 115
 11651  00137C  B4D8               	btfsc	status,2,c
 11652  00137E  D624               	goto	i2l5349
 11653  001380  0A07               	xorlw	7	; case 116
 11654  001382  B4D8               	btfsc	status,2,c
 11655  001384  D621               	goto	i2l5349
 11656  001386  0A01               	xorlw	1	; case 117
 11657  001388  B4D8               	btfsc	status,2,c
 11658  00138A  D61E               	goto	i2l5349
 11659  00138C  0A03               	xorlw	3	; case 118
 11660  00138E  B4D8               	btfsc	status,2,c
 11661  001390  D61B               	goto	i2l5349
 11662  001392  0A01               	xorlw	1	; case 119
 11663  001394  B4D8               	btfsc	status,2,c
 11664  001396  D618               	goto	i2l5349
 11665  001398  0A0F               	xorlw	15	; case 120
 11666  00139A  B4D8               	btfsc	status,2,c
 11667  00139C  D615               	goto	i2l5349
 11668  00139E  0A01               	xorlw	1	; case 121
 11669  0013A0  B4D8               	btfsc	status,2,c
 11670  0013A2  D612               	goto	i2l5349
 11671  0013A4  0A03               	xorlw	3	; case 122
 11672  0013A6  B4D8               	btfsc	status,2,c
 11673  0013A8  D60F               	goto	i2l5349
 11674  0013AA  0A01               	xorlw	1	; case 123
 11675  0013AC  B4D8               	btfsc	status,2,c
 11676  0013AE  D60C               	goto	i2l5349
 11677  0013B0  0A07               	xorlw	7	; case 124
 11678  0013B2  B4D8               	btfsc	status,2,c
 11679  0013B4  D609               	goto	i2l5349
 11680  0013B6  0A01               	xorlw	1	; case 125
 11681  0013B8  B4D8               	btfsc	status,2,c
 11682  0013BA  D606               	goto	i2l5349
 11683  0013BC  0A03               	xorlw	3	; case 126
 11684  0013BE  B4D8               	btfsc	status,2,c
 11685  0013C0  D603               	goto	i2l5349
 11686  0013C2  0A01               	xorlw	1	; case 127
 11687  0013C4  B4D8               	btfsc	status,2,c
 11688  0013C6  D600               	goto	i2l5349
 11689  0013C8  0AFF               	xorlw	255	; case 128
 11690  0013CA  B4D8               	btfsc	status,2,c
 11691  0013CC  D5FD               	goto	i2l5349
 11692  0013CE  D018               	goto	i2l5365
 11693  0013D0                     i2l6319:
 11694                           
 11695                           ; BSR set to: 1
 11696                           ; Switch size 1, requested type "space"
 11697                           ; Number of cases is 1, Range of values is 0 to 0
 11698                           ; switch strategies available:
 11699                           ; Name         Instructions Cycles
 11700                           ; simple_byte            4     3 (average)
 11701                           ;	Chosen strategy is simple_byte
 11702  0013D0  501A               	movf	??_update+1,w,c
 11703  0013D2  0A00               	xorlw	0	; case 0
 11704  0013D4  B4D8               	btfsc	status,2,c
 11705  0013D6  D613               	goto	i2l5351
 11706  0013D8  D013               	goto	i2l5365
 11707  0013DA                     i2l6321:
 11708                           
 11709                           ; BSR set to: 1
 11710                           ; Switch size 1, requested type "space"
 11711                           ; Number of cases is 1, Range of values is 0 to 0
 11712                           ; switch strategies available:
 11713                           ; Name         Instructions Cycles
 11714                           ; simple_byte            4     3 (average)
 11715                           ;	Chosen strategy is simple_byte
 11716  0013DA  501A               	movf	??_update+1,w,c
 11717  0013DC  0A00               	xorlw	0	; case 0
 11718  0013DE  B4D8               	btfsc	status,2,c
 11719  0013E0  D61A               	goto	i2l5353
 11720  0013E2  D00E               	goto	i2l5365
 11721  0013E4                     i2l6323:
 11722                           
 11723                           ; BSR set to: 1
 11724                           ; Switch size 1, requested type "space"
 11725                           ; Number of cases is 1, Range of values is 0 to 0
 11726                           ; switch strategies available:
 11727                           ; Name         Instructions Cycles
 11728                           ; simple_byte            4     3 (average)
 11729                           ;	Chosen strategy is simple_byte
 11730  0013E4  501A               	movf	??_update+1,w,c
 11731  0013E6  0A00               	xorlw	0	; case 0
 11732  0013E8  B4D8               	btfsc	status,2,c
 11733  0013EA  D621               	goto	i2l5355
 11734  0013EC  D009               	goto	i2l5365
 11735  0013EE                     i2l6325:
 11736                           
 11737                           ; BSR set to: 1
 11738                           ; Switch size 1, requested type "space"
 11739                           ; Number of cases is 1, Range of values is 0 to 0
 11740                           ; switch strategies available:
 11741                           ; Name         Instructions Cycles
 11742                           ; simple_byte            4     3 (average)
 11743                           ;	Chosen strategy is simple_byte
 11744  0013EE  501A               	movf	??_update+1,w,c
 11745  0013F0  0A00               	xorlw	0	; case 0
 11746  0013F2  B4D8               	btfsc	status,2,c
 11747  0013F4  D628               	goto	i2l5357
 11748  0013F6  D004               	goto	i2l5365
 11749  0013F8                     i2l6327:
 11750                           
 11751                           ; BSR set to: 1
 11752                           ; Switch size 1, requested type "space"
 11753                           ; Number of cases is 1, Range of values is 0 to 0
 11754                           ; switch strategies available:
 11755                           ; Name         Instructions Cycles
 11756                           ; simple_byte            4     3 (average)
 11757                           ;	Chosen strategy is simple_byte
 11758  0013F8  501A               	movf	??_update+1,w,c
 11759  0013FA  0A00               	xorlw	0	; case 0
 11760  0013FC  B4D8               	btfsc	status,2,c
 11761  0013FE  D62F               	goto	i2l5359
 11762  001400                     i2l5365:
 11763                           
 11764                           ;disp.c: 41: screen.changed &= ~(1 << cnt);
 11765  001400  C01E  F019         	movff	update@cnt,??_update
 11766  001404  0E01               	movlw	1
 11767  001406  6E1A               	movwf	(??_update+1)& (0+255),c
 11768  001408  6A1B               	clrf	(??_update+2)& (0+255),c
 11769  00140A  2A19               	incf	??_update,f,c
 11770  00140C  D003               	goto	i2u346_44
 11771  00140E                     i2u346_45:
 11772  00140E  90D8               	bcf	status,0,c
 11773  001410  361A               	rlcf	??_update+1,f,c
 11774  001412  361B               	rlcf	??_update+2,f,c
 11775  001414                     i2u346_44:
 11776  001414  2E19               	decfsz	??_update,f,c
 11777  001416  D7FB               	goto	i2u346_45
 11778  001418  1C1A               	comf	??_update+1,w,c
 11779  00141A  6E1C               	movwf	(??_update+3)& (0+255),c
 11780  00141C  1C1B               	comf	??_update+2,w,c
 11781  00141E  6E1D               	movwf	(??_update+4)& (0+255),c
 11782  001420  501C               	movf	??_update+3,w,c
 11783  001422  0101               	movlb	1	; () banked
 11784  001424  0101               	movlb	1	; () banked
 11785  001426  170B               	andwf	(_screen+11)& (0+255),f,b
 11786  001428  501D               	movf	??_update+4,w,c
 11787  00142A  0101               	movlb	1	; () banked
 11788  00142C  0101               	movlb	1	; () banked
 11789  00142E  170C               	andwf	(_screen+12)& (0+255),f,b
 11790                           
 11791                           ; BSR set to: 1
 11792  001430  061E               	decf	update@cnt,f,c
 11793  001432  D5C7               	goto	L23
 11794  001434                     i2l139:
 11795                           
 11796                           ; BSR set to: 1
 11797  001434  0012               	return	
 11798  001436                     __end_of_update:
 11799                           	opt stack 0
 11800                           tosu	equ	0xFFF
 11801                           tosh	equ	0xFFE
 11802                           tosl	equ	0xFFD
 11803                           pclatu	equ	0xFFB
 11804                           pclath	equ	0xFFA
 11805                           tblptru	equ	0xFF8
 11806                           tblptrh	equ	0xFF7
 11807                           tblptrl	equ	0xFF6
 11808                           tablat	equ	0xFF5
 11809                           prodh	equ	0xFF4
 11810                           prodl	equ	0xFF3
 11811                           intcon	equ	0xFF2
 11812                           intcon2	equ	0xFF1
 11813                           indf0	equ	0xFEF
 11814                           postinc0	equ	0xFEE
 11815                           fsr0h	equ	0xFEA
 11816                           fsr0l	equ	0xFE9
 11817                           wreg	equ	0xFE8
 11818                           postinc1	equ	0xFE6
 11819                           postdec1	equ	0xFE5
 11820                           fsr1h	equ	0xFE2
 11821                           fsr1l	equ	0xFE1
 11822                           indf2	equ	0xFDF
 11823                           postinc2	equ	0xFDE
 11824                           postdec2	equ	0xFDD
 11825                           plusw2	equ	0xFDB
 11826                           fsr2h	equ	0xFDA
 11827                           fsr2l	equ	0xFD9
 11828                           status	equ	0xFD8
 11829                           
 11830 ;; *************** function _writeDigit *****************
 11831 ;; Defined at:
 11832 ;;		line 105 in file "disp.c"
 11833 ;; Parameters:    Size  Location     Type
 11834 ;;  digit           1   19[COMRAM] unsigned char 
 11835 ;;  segs            1   20[COMRAM] unsigned char 
 11836 ;; Auto vars:     Size  Location     Type
 11837 ;;  cnt             1   23[COMRAM] char 
 11838 ;;  dig             1   22[COMRAM] unsigned char 
 11839 ;; Return value:  Size  Location     Type
 11840 ;;		None               void
 11841 ;; Registers used:
 11842 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 11843 ;; Tracked objects:
 11844 ;;		On entry : 0/0
 11845 ;;		On exit  : 0/0
 11846 ;;		Unchanged: 0/0
 11847 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11848 ;;      Params:         2       0       0       0       0       0       0       0       0
 11849 ;;      Locals:         2       0       0       0       0       0       0       0       0
 11850 ;;      Temps:          1       0       0       0       0       0       0       0       0
 11851 ;;      Totals:         5       0       0       0       0       0       0       0       0
 11852 ;;Total ram usage:        5 bytes
 11853 ;; Hardware stack levels used:    1
 11854 ;; Hardware stack levels required when called:    2
 11855 ;; This function calls:
 11856 ;;		_spi
 11857 ;;		_log2
 11858 ;;		_rotate
 11859 ;; This function is called by:
 11860 ;;		_update
 11861 ;; This function uses a non-reentrant model
 11862 ;;
 11863                           
 11864                           	psect	text43
 11865  0039D0                     __ptext43:
 11866                           	opt stack 0
 11867  0039D0                     _writeDigit:
 11868                           	opt stack 23
 11869                           
 11870                           ;disp.c: 106: uint8_t dig = (uint8_t) log2(digit);
 11871                           
 11872                           ; BSR set to: 1
 11873                           ;incstack = 0
 11874                           ;incstack = 0
 11875  0039D0  5014               	movf	writeDigit@digit,w,c
 11876  0039D2  6E0C               	movwf	?_log2,c
 11877  0039D4  6A0D               	clrf	?_log2+1,c
 11878  0039D6  6A0E               	clrf	?_log2+2,c
 11879  0039D8  6A0F               	clrf	?_log2+3,c
 11880  0039DA  EC0F  F01D         	call	_log2	;wreg free
 11881  0039DE  500C               	movf	?_log2,w,c
 11882  0039E0  6E17               	movwf	writeDigit@dig,c
 11883                           
 11884                           ;disp.c: 107: screen.digits.screen[dig].bits = segs;
 11885  0039E2  5017               	movf	writeDigit@dig,w,c
 11886  0039E4  0D01               	mullw	1
 11887  0039E6  0101               	movlb	1	; () banked
 11888  0039E8  0E00               	movlw	low _screen
 11889  0039EA  24F3               	addwf	prodl,w,c
 11890  0039EC  6ED9               	movwf	fsr2l,c
 11891  0039EE  0101               	movlb	1	; () banked
 11892  0039F0  0E01               	movlw	high _screen
 11893  0039F2  20F4               	addwfc	prodh,w,c
 11894  0039F4  6EDA               	movwf	fsr2h,c
 11895  0039F6  C015  FFDF         	movff	writeDigit@segs,indf2
 11896                           
 11897                           ; BSR set to: 1
 11898                           ;disp.c: 110: int8_t cnt;
 11899                           ;disp.c: 111: for (cnt = 7; cnt >= 0; cnt--) {
 11900  0039FA  6E16               	movwf	??_writeDigit& (0+255),c
 11901  0039FC  0E07               	movlw	7
 11902  0039FE  6E18               	movwf	writeDigit@cnt,c
 11903  003A00  5016               	movf	??_writeDigit& (0+255),w,c
 11904  003A02                     
 11905                           ; BSR set to: 1
 11906  003A02  BE18               	btfsc	writeDigit@cnt,7,c
 11907  003A04  D00B               	goto	i2l169
 11908                           
 11909                           ;disp.c: 113: spi(cnt + 1, rotate(cnt));
 11910                           
 11911                           ; BSR set to: 1
 11912                           
 11913                           ; BSR set to: 1
 11914  003A06  2818               	incf	writeDigit@cnt,w,c
 11915  003A08  6E07               	movwf	?_spi,c
 11916  003A0A  C018  F001         	movff	writeDigit@cnt,?_rotate
 11917  003A0E  EC8F  F01C         	call	_rotate	;wreg free
 11918  003A12  6E08               	movwf	?_spi+1,c
 11919  003A14  EC99  F019         	call	_spi	;wreg free
 11920  003A18  0618               	decf	writeDigit@cnt,f,c
 11921  003A1A  D7F3               	goto	L24
 11922  003A1C                     i2l169:
 11923  003A1C  0012               	return	
 11924  003A1E                     __end_of_writeDigit:
 11925                           	opt stack 0
 11926                           tosu	equ	0xFFF
 11927                           tosh	equ	0xFFE
 11928                           tosl	equ	0xFFD
 11929                           pclatu	equ	0xFFB
 11930                           pclath	equ	0xFFA
 11931                           tblptru	equ	0xFF8
 11932                           tblptrh	equ	0xFF7
 11933                           tblptrl	equ	0xFF6
 11934                           tablat	equ	0xFF5
 11935                           prodh	equ	0xFF4
 11936                           prodl	equ	0xFF3
 11937                           intcon	equ	0xFF2
 11938                           intcon2	equ	0xFF1
 11939                           indf0	equ	0xFEF
 11940                           postinc0	equ	0xFEE
 11941                           fsr0h	equ	0xFEA
 11942                           fsr0l	equ	0xFE9
 11943                           wreg	equ	0xFE8
 11944                           postinc1	equ	0xFE6
 11945                           postdec1	equ	0xFE5
 11946                           fsr1h	equ	0xFE2
 11947                           fsr1l	equ	0xFE1
 11948                           indf2	equ	0xFDF
 11949                           postinc2	equ	0xFDE
 11950                           postdec2	equ	0xFDD
 11951                           plusw2	equ	0xFDB
 11952                           fsr2h	equ	0xFDA
 11953                           fsr2l	equ	0xFD9
 11954                           status	equ	0xFD8
 11955                           
 11956 ;; *************** function _rotate *****************
 11957 ;; Defined at:
 11958 ;;		line 194 in file "disp.c"
 11959 ;; Parameters:    Size  Location     Type
 11960 ;;  seg             1    0[COMRAM] unsigned char 
 11961 ;; Auto vars:     Size  Location     Type
 11962 ;;  cnt             1    5[COMRAM] char 
 11963 ;;  ret             1    4[COMRAM] unsigned char 
 11964 ;; Return value:  Size  Location     Type
 11965 ;;                  1    wreg      unsigned char 
 11966 ;; Registers used:
 11967 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 11968 ;; Tracked objects:
 11969 ;;		On entry : 0/0
 11970 ;;		On exit  : 0/0
 11971 ;;		Unchanged: 0/0
 11972 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11973 ;;      Params:         1       0       0       0       0       0       0       0       0
 11974 ;;      Locals:         2       0       0       0       0       0       0       0       0
 11975 ;;      Temps:          3       0       0       0       0       0       0       0       0
 11976 ;;      Totals:         6       0       0       0       0       0       0       0       0
 11977 ;;Total ram usage:        6 bytes
 11978 ;; Hardware stack levels used:    1
 11979 ;; This function calls:
 11980 ;;		Nothing
 11981 ;; This function is called by:
 11982 ;;		_writeDigit
 11983 ;; This function uses a non-reentrant model
 11984 ;;
 11985                           
 11986                           	psect	text44
 11987  00391E                     __ptext44:
 11988                           	opt stack 0
 11989  00391E                     _rotate:
 11990                           	opt stack 24
 11991                           
 11992                           ;disp.c: 195: uint8_t ret = 0;
 11993                           
 11994                           ;incstack = 0
 11995                           ;incstack = 0
 11996  00391E  6E02               	movwf	??_rotate& (0+255),c
 11997  003920  0E00               	movlw	0
 11998  003922  6E05               	movwf	rotate@ret,c
 11999  003924  5002               	movf	??_rotate& (0+255),w,c
 12000                           
 12001                           ;disp.c: 196: int8_t cnt;
 12002                           ;disp.c: 197: for (cnt = 7; cnt >= 0; cnt--) {
 12003  003926  6E02               	movwf	??_rotate& (0+255),c
 12004  003928  0E07               	movlw	7
 12005  00392A  6E06               	movwf	rotate@cnt,c
 12006  00392C  5002               	movf	??_rotate& (0+255),w,c
 12007  00392E  BE06               	btfsc	rotate@cnt,7,c
 12008  003930  D022               	goto	i2l4673
 12009                           
 12010                           ;disp.c: 198: ret |= ((screen.digits.screen[cnt].bits >> seg) & 1) << cnt;
 12011  003932  C006  F002         	movff	rotate@cnt,??_rotate
 12012  003936  C001  F003         	movff	rotate@seg,??_rotate+1
 12013  00393A  5006               	movf	rotate@cnt,w,c
 12014  00393C  0D01               	mullw	1
 12015  00393E  0101               	movlb	1	; () banked
 12016  003940  0E00               	movlw	low _screen
 12017  003942  24F3               	addwf	prodl,w,c
 12018  003944  6ED9               	movwf	fsr2l,c
 12019  003946  0101               	movlb	1	; () banked
 12020  003948  0E01               	movlw	high _screen
 12021  00394A  20F4               	addwfc	prodh,w,c
 12022  00394C  6EDA               	movwf	fsr2h,c
 12023  00394E  50DF               	movf	indf2,w,c
 12024  003950  6E04               	movwf	(??_rotate+2)& (0+255),c
 12025  003952  2A03               	incf	??_rotate+1,f,c
 12026  003954  D002               	goto	i2u247_44
 12027  003956                     i2u247_45:
 12028  003956  90D8               	bcf	status,0,c
 12029  003958  3204               	rrcf	??_rotate+2,f,c
 12030  00395A                     i2u247_44:
 12031  00395A  2E03               	decfsz	??_rotate+1,f,c
 12032  00395C  D7FC               	goto	i2u247_45
 12033  00395E  0E01               	movlw	1
 12034  003960  1604               	andwf	??_rotate+2,f,c
 12035  003962  2A02               	incf	??_rotate,f,c
 12036  003964  D002               	goto	i2u248_44
 12037  003966                     i2u248_45:
 12038  003966  90D8               	bcf	status,0,c
 12039  003968  3604               	rlcf	??_rotate+2,f,c
 12040  00396A                     i2u248_44:
 12041  00396A  2E02               	decfsz	??_rotate,f,c
 12042  00396C  D7FC               	goto	i2u248_45
 12043  00396E  5004               	movf	??_rotate+2,w,c
 12044  003970  1205               	iorwf	rotate@ret,f,c
 12045                           
 12046                           ; BSR set to: 1
 12047  003972  0606               	decf	rotate@cnt,f,c
 12048  003974  D7DC               	goto	L25
 12049  003976                     i2l4673:
 12050                           
 12051                           ;disp.c: 199: }
 12052                           ;disp.c: 200: return ret;
 12053  003976  5005               	movf	rotate@ret,w,c
 12054  003978  0012               	return	
 12055  00397A                     __end_of_rotate:
 12056                           	opt stack 0
 12057                           tosu	equ	0xFFF
 12058                           tosh	equ	0xFFE
 12059                           tosl	equ	0xFFD
 12060                           pclatu	equ	0xFFB
 12061                           pclath	equ	0xFFA
 12062                           tblptru	equ	0xFF8
 12063                           tblptrh	equ	0xFF7
 12064                           tblptrl	equ	0xFF6
 12065                           tablat	equ	0xFF5
 12066                           prodh	equ	0xFF4
 12067                           prodl	equ	0xFF3
 12068                           intcon	equ	0xFF2
 12069                           intcon2	equ	0xFF1
 12070                           indf0	equ	0xFEF
 12071                           postinc0	equ	0xFEE
 12072                           fsr0h	equ	0xFEA
 12073                           fsr0l	equ	0xFE9
 12074                           wreg	equ	0xFE8
 12075                           postinc1	equ	0xFE6
 12076                           postdec1	equ	0xFE5
 12077                           fsr1h	equ	0xFE2
 12078                           fsr1l	equ	0xFE1
 12079                           indf2	equ	0xFDF
 12080                           postinc2	equ	0xFDE
 12081                           postdec2	equ	0xFDD
 12082                           plusw2	equ	0xFDB
 12083                           fsr2h	equ	0xFDA
 12084                           fsr2l	equ	0xFD9
 12085                           status	equ	0xFD8
 12086                           
 12087 ;; *************** function _log2 *****************
 12088 ;; Defined at:
 12089 ;;		line 48 in file "defs.c"
 12090 ;; Parameters:    Size  Location     Type
 12091 ;;  num             4   11[COMRAM] unsigned long 
 12092 ;; Auto vars:     Size  Location     Type
 12093 ;;  log2Val         4   15[COMRAM] unsigned long 
 12094 ;; Return value:  Size  Location     Type
 12095 ;;                  4   11[COMRAM] unsigned long 
 12096 ;; Registers used:
 12097 ;;		wreg, status,2, status,0
 12098 ;; Tracked objects:
 12099 ;;		On entry : 0/0
 12100 ;;		On exit  : 0/0
 12101 ;;		Unchanged: 0/0
 12102 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12103 ;;      Params:         4       0       0       0       0       0       0       0       0
 12104 ;;      Locals:         4       0       0       0       0       0       0       0       0
 12105 ;;      Temps:          0       0       0       0       0       0       0       0       0
 12106 ;;      Totals:         8       0       0       0       0       0       0       0       0
 12107 ;;Total ram usage:        8 bytes
 12108 ;; Hardware stack levels used:    1
 12109 ;; This function calls:
 12110 ;;		Nothing
 12111 ;; This function is called by:
 12112 ;;		_writeDigit
 12113 ;;		_writeChar
 12114 ;;		_writeString
 12115 ;; This function uses a non-reentrant model
 12116 ;;
 12117                           
 12118                           	psect	text45
 12119  003A1E                     __ptext45:
 12120                           	opt stack 0
 12121  003A1E                     _log2:
 12122                           	opt stack 22
 12123                           
 12124                           ;defs.c: 49: uint32_t log2Val = 0;
 12125                           
 12126                           ;incstack = 0
 12127                           ;incstack = 0
 12128  003A1E  0E00               	movlw	0
 12129  003A20  6E10               	movwf	log2@log2Val,c
 12130  003A22  0E00               	movlw	0
 12131  003A24  6E11               	movwf	log2@log2Val+1,c
 12132  003A26  0E00               	movlw	0
 12133  003A28  6E12               	movwf	log2@log2Val+2,c
 12134  003A2A  0E00               	movlw	0
 12135  003A2C  6E13               	movwf	log2@log2Val+3,c
 12136                           
 12137                           ;defs.c: 50: while (num >>= 1) log2Val++;
 12138  003A2E  D008               	goto	i2l469
 12139  003A30                     i2l5047:
 12140  003A30  0E01               	movlw	1
 12141  003A32  2610               	addwf	log2@log2Val,f,c
 12142  003A34  0E00               	movlw	0
 12143  003A36  2211               	addwfc	log2@log2Val+1,f,c
 12144  003A38  0E00               	movlw	0
 12145  003A3A  2212               	addwfc	log2@log2Val+2,f,c
 12146  003A3C  0E00               	movlw	0
 12147  003A3E  2213               	addwfc	log2@log2Val+3,f,c
 12148  003A40                     i2l469:
 12149  003A40  90D8               	bcf	status,0,c
 12150  003A42  320F               	rrcf	log2@num+3,f,c
 12151  003A44  320E               	rrcf	log2@num+2,f,c
 12152  003A46  320D               	rrcf	log2@num+1,f,c
 12153  003A48  320C               	rrcf	log2@num,f,c
 12154  003A4A  500F               	movf	(log2@num+3)& (0+255),w,c
 12155  003A4C  100C               	iorwf	log2@num& (0+255),w,c
 12156  003A4E  100D               	iorwf	(log2@num+1)& (0+255),w,c
 12157  003A50  100E               	iorwf	(log2@num+2)& (0+255),w,c
 12158  003A52  A4D8               	btfss	status,2,c
 12159  003A54  D7ED               	goto	i2l5047
 12160                           
 12161                           ;defs.c: 51: return log2Val;
 12162  003A56  C010  F00C         	movff	log2@log2Val,?_log2
 12163  003A5A  C011  F00D         	movff	log2@log2Val+1,?_log2+1
 12164  003A5E  C012  F00E         	movff	log2@log2Val+2,?_log2+2
 12165  003A62  C013  F00F         	movff	log2@log2Val+3,?_log2+3
 12166  003A66  0012               	return	
 12167  003A68                     __end_of_log2:
 12168                           	opt stack 0
 12169                           tosu	equ	0xFFF
 12170                           tosh	equ	0xFFE
 12171                           tosl	equ	0xFFD
 12172                           pclatu	equ	0xFFB
 12173                           pclath	equ	0xFFA
 12174                           tblptru	equ	0xFF8
 12175                           tblptrh	equ	0xFF7
 12176                           tblptrl	equ	0xFF6
 12177                           tablat	equ	0xFF5
 12178                           prodh	equ	0xFF4
 12179                           prodl	equ	0xFF3
 12180                           intcon	equ	0xFF2
 12181                           intcon2	equ	0xFF1
 12182                           indf0	equ	0xFEF
 12183                           postinc0	equ	0xFEE
 12184                           fsr0h	equ	0xFEA
 12185                           fsr0l	equ	0xFE9
 12186                           wreg	equ	0xFE8
 12187                           postinc1	equ	0xFE6
 12188                           postdec1	equ	0xFE5
 12189                           fsr1h	equ	0xFE2
 12190                           fsr1l	equ	0xFE1
 12191                           indf2	equ	0xFDF
 12192                           postinc2	equ	0xFDE
 12193                           postdec2	equ	0xFDD
 12194                           plusw2	equ	0xFDB
 12195                           fsr2h	equ	0xFDA
 12196                           fsr2l	equ	0xFD9
 12197                           status	equ	0xFD8
 12198                           
 12199 ;; *************** function _spi *****************
 12200 ;; Defined at:
 12201 ;;		line 84 in file "disp.c"
 12202 ;; Parameters:    Size  Location     Type
 12203 ;;  addr            1    6[COMRAM] unsigned char 
 12204 ;;  data            1    7[COMRAM] unsigned char 
 12205 ;; Auto vars:     Size  Location     Type
 12206 ;;  send            2   11[COMRAM] unsigned int 
 12207 ;;  cnt             1   13[COMRAM] char 
 12208 ;; Return value:  Size  Location     Type
 12209 ;;		None               void
 12210 ;; Registers used:
 12211 ;;		wreg, status,2, status,0, cstack
 12212 ;; Tracked objects:
 12213 ;;		On entry : 0/0
 12214 ;;		On exit  : 0/0
 12215 ;;		Unchanged: 0/0
 12216 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12217 ;;      Params:         2       0       0       0       0       0       0       0       0
 12218 ;;      Locals:         3       0       0       0       0       0       0       0       0
 12219 ;;      Temps:          3       0       0       0       0       0       0       0       0
 12220 ;;      Totals:         8       0       0       0       0       0       0       0       0
 12221 ;;Total ram usage:        8 bytes
 12222 ;; Hardware stack levels used:    1
 12223 ;; Hardware stack levels required when called:    1
 12224 ;; This function calls:
 12225 ;;		_wait
 12226 ;; This function is called by:
 12227 ;;		_update
 12228 ;;		_writeDigit
 12229 ;; This function uses a non-reentrant model
 12230 ;;
 12231                           
 12232                           	psect	text46
 12233  003332                     __ptext46:
 12234                           	opt stack 0
 12235  003332                     _spi:
 12236                           	opt stack 24
 12237                           
 12238                           ;disp.c: 85: uint16_t send = (addr << 8) | data;
 12239                           
 12240                           ;incstack = 0
 12241                           ;incstack = 0
 12242  003332  5008               	movf	spi@data,w,c
 12243  003334  C007  F009         	movff	spi@addr,??_spi
 12244  003338  6A0A               	clrf	(??_spi+1)& (0+255),c
 12245  00333A  C009  F00A         	movff	??_spi,??_spi+1
 12246  00333E  6A09               	clrf	??_spi,c
 12247  003340  1009               	iorwf	??_spi,w,c
 12248  003342  6E0C               	movwf	spi@send,c
 12249  003344  500A               	movf	??_spi+1,w,c
 12250  003346  6E0D               	movwf	spi@send+1,c
 12251                           
 12252                           ;disp.c: 86: LATA4 = 0;
 12253  003348  9889               	bcf	3977,4,c	;volatile
 12254                           
 12255                           ;disp.c: 87: LATA1 = 0;
 12256  00334A  9289               	bcf	3977,1,c	;volatile
 12257                           
 12258                           ;disp.c: 88: LATA3 = 0;
 12259  00334C  9689               	bcf	3977,3,c	;volatile
 12260                           
 12261                           ;disp.c: 89: int8_t cnt;
 12262                           ;disp.c: 90: for (cnt = 15; cnt >= 0; cnt--) {
 12263  00334E  6E09               	movwf	??_spi& (0+255),c
 12264  003350  0E0F               	movlw	15
 12265  003352  6E0E               	movwf	spi@cnt,c
 12266  003354  5009               	movf	??_spi& (0+255),w,c
 12267  003356  BE0E               	btfsc	spi@cnt,7,c
 12268  003358  D02D               	goto	i2l163
 12269                           
 12270                           ;disp.c: 91: LATA1 = 0x1 & (send >> cnt);
 12271  00335A  C00E  F009         	movff	spi@cnt,??_spi
 12272  00335E  C00C  F00A         	movff	spi@send,??_spi+1
 12273  003362  C00D  F00B         	movff	spi@send+1,??_spi+2
 12274  003366  2A09               	incf	??_spi,f,c
 12275  003368  D003               	goto	i2u303_44
 12276  00336A                     i2u303_45:
 12277  00336A  90D8               	bcf	status,0,c
 12278  00336C  320B               	rrcf	??_spi+2,f,c
 12279  00336E  320A               	rrcf	??_spi+1,f,c
 12280  003370                     i2u303_44:
 12281  003370  2E09               	decfsz	??_spi,f,c
 12282  003372  D7FB               	goto	i2u303_45
 12283  003374  300A               	rrcf	??_spi+1,w,c
 12284  003376  A0D8               	btfss	status,0,c
 12285  003378  D001               	bra	i2u304_45
 12286  00337A  8289               	bsf	3977,1,c	;volatile
 12287  00337C                     i2u304_45:
 12288  00337C  B0D8               	btfsc	status,0,c
 12289  00337E  D001               	bra	i2u304_46
 12290  003380  9289               	bcf	3977,1,c	;volatile
 12291  003382                     i2u304_46:
 12292                           
 12293                           ;disp.c: 92: wait(0);
 12294  003382  0E00               	movlw	0
 12295  003384  6E01               	movwf	?_wait,c
 12296  003386  0E00               	movlw	0
 12297  003388  6E02               	movwf	?_wait+1,c
 12298  00338A  0E00               	movlw	0
 12299  00338C  6E03               	movwf	?_wait+2,c
 12300  00338E  0E00               	movlw	0
 12301  003390  6E04               	movwf	?_wait+3,c
 12302  003392  ECC1  F01E         	call	_wait	;wreg free
 12303                           
 12304                           ;disp.c: 93: LATA3 = 1;
 12305  003396  8689               	bsf	3977,3,c	;volatile
 12306                           
 12307                           ;disp.c: 94: wait(0);
 12308  003398  0E00               	movlw	0
 12309  00339A  6E01               	movwf	?_wait,c
 12310  00339C  0E00               	movlw	0
 12311  00339E  6E02               	movwf	?_wait+1,c
 12312  0033A0  0E00               	movlw	0
 12313  0033A2  6E03               	movwf	?_wait+2,c
 12314  0033A4  0E00               	movlw	0
 12315  0033A6  6E04               	movwf	?_wait+3,c
 12316  0033A8  ECC1  F01E         	call	_wait	;wreg free
 12317                           
 12318                           ;disp.c: 95: LATA3 = 0;
 12319  0033AC  9689               	bcf	3977,3,c	;volatile
 12320                           
 12321                           ;disp.c: 96: LATA1 = 0;
 12322  0033AE  9289               	bcf	3977,1,c	;volatile
 12323  0033B0  060E               	decf	spi@cnt,f,c
 12324  0033B2  D7D1               	goto	L26
 12325  0033B4                     i2l163:
 12326                           
 12327                           ;disp.c: 97: }
 12328                           ;disp.c: 98: LATA4 = 1;
 12329  0033B4  8889               	bsf	3977,4,c	;volatile
 12330                           
 12331                           ;disp.c: 99: LATA3 = 0;
 12332  0033B6  9689               	bcf	3977,3,c	;volatile
 12333                           
 12334                           ;disp.c: 100: LATA1 = 0;
 12335  0033B8  9289               	bcf	3977,1,c	;volatile
 12336                           
 12337                           ;disp.c: 101: wait(0);
 12338  0033BA  0E00               	movlw	0
 12339  0033BC  6E01               	movwf	?_wait,c
 12340  0033BE  0E00               	movlw	0
 12341  0033C0  6E02               	movwf	?_wait+1,c
 12342  0033C2  0E00               	movlw	0
 12343  0033C4  6E03               	movwf	?_wait+2,c
 12344  0033C6  0E00               	movlw	0
 12345  0033C8  6E04               	movwf	?_wait+3,c
 12346  0033CA  ECC1  F01E         	call	_wait	;wreg free
 12347  0033CE  0012               	return	
 12348  0033D0                     __end_of_spi:
 12349                           	opt stack 0
 12350                           tosu	equ	0xFFF
 12351                           tosh	equ	0xFFE
 12352                           tosl	equ	0xFFD
 12353                           pclatu	equ	0xFFB
 12354                           pclath	equ	0xFFA
 12355                           tblptru	equ	0xFF8
 12356                           tblptrh	equ	0xFF7
 12357                           tblptrl	equ	0xFF6
 12358                           tablat	equ	0xFF5
 12359                           prodh	equ	0xFF4
 12360                           prodl	equ	0xFF3
 12361                           intcon	equ	0xFF2
 12362                           intcon2	equ	0xFF1
 12363                           indf0	equ	0xFEF
 12364                           postinc0	equ	0xFEE
 12365                           fsr0h	equ	0xFEA
 12366                           fsr0l	equ	0xFE9
 12367                           wreg	equ	0xFE8
 12368                           postinc1	equ	0xFE6
 12369                           postdec1	equ	0xFE5
 12370                           fsr1h	equ	0xFE2
 12371                           fsr1l	equ	0xFE1
 12372                           indf2	equ	0xFDF
 12373                           postinc2	equ	0xFDE
 12374                           postdec2	equ	0xFDD
 12375                           plusw2	equ	0xFDB
 12376                           fsr2h	equ	0xFDA
 12377                           fsr2l	equ	0xFD9
 12378                           status	equ	0xFD8
 12379                           
 12380 ;; *************** function _wait *****************
 12381 ;; Defined at:
 12382 ;;		line 4 in file "defs.c"
 12383 ;; Parameters:    Size  Location     Type
 12384 ;;  count           4    0[COMRAM] unsigned long 
 12385 ;; Auto vars:     Size  Location     Type
 12386 ;;		None
 12387 ;; Return value:  Size  Location     Type
 12388 ;;		None               void
 12389 ;; Registers used:
 12390 ;;		wreg, status,2, status,0
 12391 ;; Tracked objects:
 12392 ;;		On entry : 0/0
 12393 ;;		On exit  : 0/0
 12394 ;;		Unchanged: 0/0
 12395 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12396 ;;      Params:         4       0       0       0       0       0       0       0       0
 12397 ;;      Locals:         0       0       0       0       0       0       0       0       0
 12398 ;;      Temps:          0       0       0       0       0       0       0       0       0
 12399 ;;      Totals:         4       0       0       0       0       0       0       0       0
 12400 ;;Total ram usage:        4 bytes
 12401 ;; Hardware stack levels used:    1
 12402 ;; This function calls:
 12403 ;;		Nothing
 12404 ;; This function is called by:
 12405 ;;		_spi
 12406 ;; This function uses a non-reentrant model
 12407 ;;
 12408                           
 12409                           	psect	text47
 12410  003D82                     __ptext47:
 12411                           	opt stack 0
 12412  003D82                     _wait:
 12413                           	opt stack 24
 12414  003D82                     i2l4659:
 12415  003D82  0601               	decf	wait@count,f,c
 12416  003D84  0E00               	movlw	0
 12417  003D86  5A02               	subwfb	wait@count+1,f,c
 12418  003D88  5A03               	subwfb	wait@count+2,f,c
 12419  003D8A  5A04               	subwfb	wait@count+3,f,c
 12420  003D8C  2801               	incf	wait@count& (0+255),w,c
 12421  003D8E  B4D8               	btfsc	status,2,c
 12422  003D90  2802               	incf	(wait@count+1)& (0+255),w,c
 12423  003D92  B4D8               	btfsc	status,2,c
 12424  003D94  2803               	incf	(wait@count+2)& (0+255),w,c
 12425  003D96  B4D8               	btfsc	status,2,c
 12426  003D98  2804               	incf	(wait@count+3)& (0+255),w,c
 12427  003D9A  B4D8               	btfsc	status,2,c
 12428  003D9C  0012               	return	
 12429  003D9E  D7F1               	goto	i2l4659
 12430  003DA0                     __end_of_wait:
 12431                           	opt stack 0
 12432                           tosu	equ	0xFFF
 12433                           tosh	equ	0xFFE
 12434                           tosl	equ	0xFFD
 12435                           pclatu	equ	0xFFB
 12436                           pclath	equ	0xFFA
 12437                           tblptru	equ	0xFF8
 12438                           tblptrh	equ	0xFF7
 12439                           tblptrl	equ	0xFF6
 12440                           tablat	equ	0xFF5
 12441                           prodh	equ	0xFF4
 12442                           prodl	equ	0xFF3
 12443                           intcon	equ	0xFF2
 12444                           intcon2	equ	0xFF1
 12445                           indf0	equ	0xFEF
 12446                           postinc0	equ	0xFEE
 12447                           fsr0h	equ	0xFEA
 12448                           fsr0l	equ	0xFE9
 12449                           wreg	equ	0xFE8
 12450                           postinc1	equ	0xFE6
 12451                           postdec1	equ	0xFE5
 12452                           fsr1h	equ	0xFE2
 12453                           fsr1l	equ	0xFE1
 12454                           indf2	equ	0xFDF
 12455                           postinc2	equ	0xFDE
 12456                           postdec2	equ	0xFDD
 12457                           plusw2	equ	0xFDB
 12458                           fsr2h	equ	0xFDA
 12459                           fsr2l	equ	0xFD9
 12460                           status	equ	0xFD8
 12461                           
 12462 ;; *************** function ___lwmod *****************
 12463 ;; Defined at:
 12464 ;;		line 10 in file "/usr/opt/microchip/xc8/v1.20/sources/common/lwmod.c"
 12465 ;; Parameters:    Size  Location     Type
 12466 ;;  dividend        2    0[COMRAM] unsigned int 
 12467 ;;  divisor         2    2[COMRAM] unsigned int 
 12468 ;; Auto vars:     Size  Location     Type
 12469 ;;  counter         1    6[COMRAM] unsigned char 
 12470 ;; Return value:  Size  Location     Type
 12471 ;;                  2    0[COMRAM] unsigned int 
 12472 ;; Registers used:
 12473 ;;		wreg, status,2, status,0
 12474 ;; Tracked objects:
 12475 ;;		On entry : 0/0
 12476 ;;		On exit  : 0/0
 12477 ;;		Unchanged: 0/0
 12478 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12479 ;;      Params:         4       0       0       0       0       0       0       0       0
 12480 ;;      Locals:         2       0       0       0       0       0       0       0       0
 12481 ;;      Temps:          1       0       0       0       0       0       0       0       0
 12482 ;;      Totals:         7       0       0       0       0       0       0       0       0
 12483 ;;Total ram usage:        7 bytes
 12484 ;; Hardware stack levels used:    1
 12485 ;; This function calls:
 12486 ;;		Nothing
 12487 ;; This function is called by:
 12488 ;;		_daysOfMonth
 12489 ;;		_printRTC
 12490 ;;		_sprintf
 12491 ;; This function uses a non-reentrant model
 12492 ;;
 12493                           
 12494                           	psect	text48
 12495  003A68                     __ptext48:
 12496                           	opt stack 0
 12497  003A68                     ___lwmod:
 12498                           	opt stack 23
 12499                           
 12500                           ;incstack = 0
 12501                           ;incstack = 0
 12502  003A68  5004               	movf	___lwmod@divisor+1,w,c
 12503  003A6A  1003               	iorwf	___lwmod@divisor,w,c
 12504  003A6C  B4D8               	btfsc	status,2,c
 12505  003A6E  D01A               	goto	i2l1187
 12506  003A70  6E05               	movwf	??___lwmod& (0+255),c
 12507  003A72  0E01               	movlw	1
 12508  003A74  6E07               	movwf	___lwmod@counter,c
 12509  003A76  5005               	movf	??___lwmod& (0+255),w,c
 12510  003A78  D004               	goto	i2l4967
 12511  003A7A                     i2l4965:
 12512  003A7A  90D8               	bcf	status,0,c
 12513  003A7C  3603               	rlcf	___lwmod@divisor,f,c
 12514  003A7E  3604               	rlcf	___lwmod@divisor+1,f,c
 12515  003A80  2A07               	incf	___lwmod@counter,f,c
 12516  003A82                     i2l4967:
 12517  003A82  AE04               	btfss	___lwmod@divisor+1,7,c
 12518  003A84  D7FA               	goto	i2l4965
 12519  003A86                     i2l4969:
 12520  003A86  5003               	movf	___lwmod@divisor,w,c
 12521  003A88  5C01               	subwf	___lwmod@dividend,w,c
 12522  003A8A  5004               	movf	___lwmod@divisor+1,w,c
 12523  003A8C  5802               	subwfb	___lwmod@dividend+1,w,c
 12524  003A8E  A0D8               	btfss	status,0,c
 12525  003A90  D004               	goto	i2l4973
 12526  003A92  5003               	movf	___lwmod@divisor,w,c
 12527  003A94  5E01               	subwf	___lwmod@dividend,f,c
 12528  003A96  5004               	movf	___lwmod@divisor+1,w,c
 12529  003A98  5A02               	subwfb	___lwmod@dividend+1,f,c
 12530  003A9A                     i2l4973:
 12531  003A9A  90D8               	bcf	status,0,c
 12532  003A9C  3204               	rrcf	___lwmod@divisor+1,f,c
 12533  003A9E  3203               	rrcf	___lwmod@divisor,f,c
 12534  003AA0  2E07               	decfsz	___lwmod@counter,f,c
 12535  003AA2  D7F1               	goto	i2l4969
 12536  003AA4                     i2l1187:
 12537  003AA4  C001  F001         	movff	___lwmod@dividend,?___lwmod
 12538  003AA8  C002  F002         	movff	___lwmod@dividend+1,?___lwmod+1
 12539  003AAC  0012               	return	
 12540  003AAE                     __end_of___lwmod:
 12541                           	opt stack 0
 12542                           tosu	equ	0xFFF
 12543                           tosh	equ	0xFFE
 12544                           tosl	equ	0xFFD
 12545                           pclatu	equ	0xFFB
 12546                           pclath	equ	0xFFA
 12547                           tblptru	equ	0xFF8
 12548                           tblptrh	equ	0xFF7
 12549                           tblptrl	equ	0xFF6
 12550                           tablat	equ	0xFF5
 12551                           prodh	equ	0xFF4
 12552                           prodl	equ	0xFF3
 12553                           intcon	equ	0xFF2
 12554                           intcon2	equ	0xFF1
 12555                           indf0	equ	0xFEF
 12556                           postinc0	equ	0xFEE
 12557                           fsr0h	equ	0xFEA
 12558                           fsr0l	equ	0xFE9
 12559                           wreg	equ	0xFE8
 12560                           postinc1	equ	0xFE6
 12561                           postdec1	equ	0xFE5
 12562                           fsr1h	equ	0xFE2
 12563                           fsr1l	equ	0xFE1
 12564                           indf2	equ	0xFDF
 12565                           postinc2	equ	0xFDE
 12566                           postdec2	equ	0xFDD
 12567                           plusw2	equ	0xFDB
 12568                           fsr2h	equ	0xFDA
 12569                           fsr2l	equ	0xFD9
 12570                           status	equ	0xFD8
 12571                           
 12572 ;; *************** function ___llmod *****************
 12573 ;; Defined at:
 12574 ;;		line 10 in file "/usr/opt/microchip/xc8/v1.20/sources/common/llmod.c"
 12575 ;; Parameters:    Size  Location     Type
 12576 ;;  dividend        4   19[COMRAM] unsigned long 
 12577 ;;  divisor         4   23[COMRAM] unsigned long 
 12578 ;; Auto vars:     Size  Location     Type
 12579 ;;  counter         1   29[COMRAM] unsigned char 
 12580 ;; Return value:  Size  Location     Type
 12581 ;;                  4   19[COMRAM] unsigned long 
 12582 ;; Registers used:
 12583 ;;		wreg, status,2, status,0
 12584 ;; Tracked objects:
 12585 ;;		On entry : 0/0
 12586 ;;		On exit  : 0/0
 12587 ;;		Unchanged: 0/0
 12588 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12589 ;;      Params:         8       0       0       0       0       0       0       0       0
 12590 ;;      Locals:         2       0       0       0       0       0       0       0       0
 12591 ;;      Temps:          1       0       0       0       0       0       0       0       0
 12592 ;;      Totals:        11       0       0       0       0       0       0       0       0
 12593 ;;Total ram usage:       11 bytes
 12594 ;; Hardware stack levels used:    1
 12595 ;; This function calls:
 12596 ;;		Nothing
 12597 ;; This function is called by:
 12598 ;;		_dayOfWeek
 12599 ;;		_sprintf
 12600 ;; This function uses a non-reentrant model
 12601 ;;
 12602                           
 12603                           	psect	text49
 12604  0037EC                     __ptext49:
 12605                           	opt stack 0
 12606  0037EC                     ___llmod:
 12607                           	opt stack 23
 12608                           
 12609                           ;incstack = 0
 12610                           ;incstack = 0
 12611  0037EC  501B               	movf	___llmod@divisor+3,w,c
 12612  0037EE  1018               	iorwf	___llmod@divisor,w,c
 12613  0037F0  1019               	iorwf	___llmod@divisor+1,w,c
 12614  0037F2  101A               	iorwf	___llmod@divisor+2,w,c
 12615  0037F4  B4D8               	btfsc	status,2,c
 12616  0037F6  D026               	goto	i2l1118
 12617  0037F8  6E1C               	movwf	??___llmod& (0+255),c
 12618  0037FA  0E01               	movlw	1
 12619  0037FC  6E1E               	movwf	___llmod@counter,c
 12620  0037FE  501C               	movf	??___llmod& (0+255),w,c
 12621  003800  D006               	goto	i2l5175
 12622  003802                     i2l5173:
 12623  003802  90D8               	bcf	status,0,c
 12624  003804  3618               	rlcf	___llmod@divisor,f,c
 12625  003806  3619               	rlcf	___llmod@divisor+1,f,c
 12626  003808  361A               	rlcf	___llmod@divisor+2,f,c
 12627  00380A  361B               	rlcf	___llmod@divisor+3,f,c
 12628  00380C  2A1E               	incf	___llmod@counter,f,c
 12629  00380E                     i2l5175:
 12630  00380E  AE1B               	btfss	___llmod@divisor+3,7,c
 12631  003810  D7F8               	goto	i2l5173
 12632  003812                     i2l5177:
 12633  003812  5018               	movf	___llmod@divisor,w,c
 12634  003814  5C14               	subwf	___llmod@dividend,w,c
 12635  003816  5019               	movf	___llmod@divisor+1,w,c
 12636  003818  5815               	subwfb	___llmod@dividend+1,w,c
 12637  00381A  501A               	movf	___llmod@divisor+2,w,c
 12638  00381C  5816               	subwfb	___llmod@dividend+2,w,c
 12639  00381E  501B               	movf	___llmod@divisor+3,w,c
 12640  003820  5817               	subwfb	___llmod@dividend+3,w,c
 12641  003822  A0D8               	btfss	status,0,c
 12642  003824  D008               	goto	i2l5181
 12643  003826  5018               	movf	___llmod@divisor,w,c
 12644  003828  5E14               	subwf	___llmod@dividend,f,c
 12645  00382A  5019               	movf	___llmod@divisor+1,w,c
 12646  00382C  5A15               	subwfb	___llmod@dividend+1,f,c
 12647  00382E  501A               	movf	___llmod@divisor+2,w,c
 12648  003830  5A16               	subwfb	___llmod@dividend+2,f,c
 12649  003832  501B               	movf	___llmod@divisor+3,w,c
 12650  003834  5A17               	subwfb	___llmod@dividend+3,f,c
 12651  003836                     i2l5181:
 12652  003836  90D8               	bcf	status,0,c
 12653  003838  321B               	rrcf	___llmod@divisor+3,f,c
 12654  00383A  321A               	rrcf	___llmod@divisor+2,f,c
 12655  00383C  3219               	rrcf	___llmod@divisor+1,f,c
 12656  00383E  3218               	rrcf	___llmod@divisor,f,c
 12657  003840  2E1E               	decfsz	___llmod@counter,f,c
 12658  003842  D7E7               	goto	i2l5177
 12659  003844                     i2l1118:
 12660  003844  C014  F014         	movff	___llmod@dividend,?___llmod
 12661  003848  C015  F015         	movff	___llmod@dividend+1,?___llmod+1
 12662  00384C  C016  F016         	movff	___llmod@dividend+2,?___llmod+2
 12663  003850  C017  F017         	movff	___llmod@dividend+3,?___llmod+3
 12664  003854  0012               	return	
 12665  003856                     __end_of___llmod:
 12666                           	opt stack 0
 12667                           tosu	equ	0xFFF
 12668                           tosh	equ	0xFFE
 12669                           tosl	equ	0xFFD
 12670                           pclatu	equ	0xFFB
 12671                           pclath	equ	0xFFA
 12672                           tblptru	equ	0xFF8
 12673                           tblptrh	equ	0xFF7
 12674                           tblptrl	equ	0xFF6
 12675                           tablat	equ	0xFF5
 12676                           prodh	equ	0xFF4
 12677                           prodl	equ	0xFF3
 12678                           intcon	equ	0xFF2
 12679                           intcon2	equ	0xFF1
 12680                           indf0	equ	0xFEF
 12681                           postinc0	equ	0xFEE
 12682                           fsr0h	equ	0xFEA
 12683                           fsr0l	equ	0xFE9
 12684                           wreg	equ	0xFE8
 12685                           postinc1	equ	0xFE6
 12686                           postdec1	equ	0xFE5
 12687                           fsr1h	equ	0xFE2
 12688                           fsr1l	equ	0xFE1
 12689                           indf2	equ	0xFDF
 12690                           postinc2	equ	0xFDE
 12691                           postdec2	equ	0xFDD
 12692                           plusw2	equ	0xFDB
 12693                           fsr2h	equ	0xFDA
 12694                           fsr2l	equ	0xFD9
 12695                           status	equ	0xFD8
 12696                           
 12697 ;; *************** function ___awmod *****************
 12698 ;; Defined at:
 12699 ;;		line 10 in file "/usr/opt/microchip/xc8/v1.20/sources/common/awmod.c"
 12700 ;; Parameters:    Size  Location     Type
 12701 ;;  dividend        2    0[COMRAM] int 
 12702 ;;  divisor         2    2[COMRAM] int 
 12703 ;; Auto vars:     Size  Location     Type
 12704 ;;  sign            1    8[COMRAM] unsigned char 
 12705 ;;  counter         1    7[COMRAM] unsigned char 
 12706 ;; Return value:  Size  Location     Type
 12707 ;;                  2    0[COMRAM] int 
 12708 ;; Registers used:
 12709 ;;		wreg, status,2, status,0
 12710 ;; Tracked objects:
 12711 ;;		On entry : 0/0
 12712 ;;		On exit  : 0/0
 12713 ;;		Unchanged: 0/0
 12714 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12715 ;;      Params:         4       0       0       0       0       0       0       0       0
 12716 ;;      Locals:         4       0       0       0       0       0       0       0       0
 12717 ;;      Temps:          1       0       0       0       0       0       0       0       0
 12718 ;;      Totals:         9       0       0       0       0       0       0       0       0
 12719 ;;Total ram usage:        9 bytes
 12720 ;; Hardware stack levels used:    1
 12721 ;; This function calls:
 12722 ;;		Nothing
 12723 ;; This function is called by:
 12724 ;;		_dayOfWeek
 12725 ;;		_buttons
 12726 ;;		_fround
 12727 ;;		_scale
 12728 ;; This function uses a non-reentrant model
 12729 ;;
 12730                           
 12731                           	psect	text50
 12732  00368E                     __ptext50:
 12733                           	opt stack 0
 12734  00368E                     ___awmod:
 12735                           	opt stack 22
 12736                           
 12737                           ;incstack = 0
 12738                           ;incstack = 0
 12739  00368E  6E05               	movwf	??___awmod& (0+255),c
 12740  003690  0E00               	movlw	0
 12741  003692  6E09               	movwf	___awmod@sign,c
 12742  003694  5005               	movf	??___awmod& (0+255),w,c
 12743  003696  AE02               	btfss	___awmod@dividend+1,7,c
 12744  003698  D008               	goto	i2l4889
 12745  00369A  6C01               	negf	___awmod@dividend,c
 12746  00369C  1E02               	comf	___awmod@dividend+1,f,c
 12747  00369E  B0D8               	btfsc	status,0,c
 12748  0036A0  2A02               	incf	___awmod@dividend+1,f,c
 12749  0036A2  6E05               	movwf	??___awmod& (0+255),c
 12750  0036A4  0E01               	movlw	1
 12751  0036A6  6E09               	movwf	___awmod@sign,c
 12752  0036A8  5005               	movf	??___awmod& (0+255),w,c
 12753  0036AA                     i2l4889:
 12754  0036AA  AE04               	btfss	___awmod@divisor+1,7,c
 12755  0036AC  D004               	goto	i2l4893
 12756  0036AE  6C03               	negf	___awmod@divisor,c
 12757  0036B0  1E04               	comf	___awmod@divisor+1,f,c
 12758  0036B2  B0D8               	btfsc	status,0,c
 12759  0036B4  2A04               	incf	___awmod@divisor+1,f,c
 12760  0036B6                     i2l4893:
 12761  0036B6  5004               	movf	___awmod@divisor+1,w,c
 12762  0036B8  1003               	iorwf	___awmod@divisor,w,c
 12763  0036BA  B4D8               	btfsc	status,2,c
 12764  0036BC  D01A               	goto	i2l4909
 12765  0036BE  6E05               	movwf	??___awmod& (0+255),c
 12766  0036C0  0E01               	movlw	1
 12767  0036C2  6E08               	movwf	___awmod@counter,c
 12768  0036C4  5005               	movf	??___awmod& (0+255),w,c
 12769  0036C6  D004               	goto	i2l4899
 12770  0036C8                     i2l4897:
 12771  0036C8  90D8               	bcf	status,0,c
 12772  0036CA  3603               	rlcf	___awmod@divisor,f,c
 12773  0036CC  3604               	rlcf	___awmod@divisor+1,f,c
 12774  0036CE  2A08               	incf	___awmod@counter,f,c
 12775  0036D0                     i2l4899:
 12776  0036D0  AE04               	btfss	___awmod@divisor+1,7,c
 12777  0036D2  D7FA               	goto	i2l4897
 12778  0036D4                     i2l4901:
 12779  0036D4  5003               	movf	___awmod@divisor,w,c
 12780  0036D6  5C01               	subwf	___awmod@dividend,w,c
 12781  0036D8  5004               	movf	___awmod@divisor+1,w,c
 12782  0036DA  5802               	subwfb	___awmod@dividend+1,w,c
 12783  0036DC  A0D8               	btfss	status,0,c
 12784  0036DE  D004               	goto	i2l4905
 12785  0036E0  5003               	movf	___awmod@divisor,w,c
 12786  0036E2  5E01               	subwf	___awmod@dividend,f,c
 12787  0036E4  5004               	movf	___awmod@divisor+1,w,c
 12788  0036E6  5A02               	subwfb	___awmod@dividend+1,f,c
 12789  0036E8                     i2l4905:
 12790  0036E8  90D8               	bcf	status,0,c
 12791  0036EA  3204               	rrcf	___awmod@divisor+1,f,c
 12792  0036EC  3203               	rrcf	___awmod@divisor,f,c
 12793  0036EE  2E08               	decfsz	___awmod@counter,f,c
 12794  0036F0  D7F1               	goto	i2l4901
 12795  0036F2                     i2l4909:
 12796  0036F2  5009               	movf	___awmod@sign,w,c
 12797  0036F4  B4D8               	btfsc	status,2,c
 12798  0036F6  D004               	goto	i2l4913
 12799  0036F8  6C01               	negf	___awmod@dividend,c
 12800  0036FA  1E02               	comf	___awmod@dividend+1,f,c
 12801  0036FC  B0D8               	btfsc	status,0,c
 12802  0036FE  2A02               	incf	___awmod@dividend+1,f,c
 12803  003700                     i2l4913:
 12804  003700  C001  F001         	movff	___awmod@dividend,?___awmod
 12805  003704  C002  F002         	movff	___awmod@dividend+1,?___awmod+1
 12806  003708  0012               	return	
 12807  00370A                     __end_of___awmod:
 12808                           	opt stack 0
 12809                           tosu	equ	0xFFF
 12810                           tosh	equ	0xFFE
 12811                           tosl	equ	0xFFD
 12812                           pclatu	equ	0xFFB
 12813                           pclath	equ	0xFFA
 12814                           tblptru	equ	0xFF8
 12815                           tblptrh	equ	0xFF7
 12816                           tblptrl	equ	0xFF6
 12817                           tablat	equ	0xFF5
 12818                           prodh	equ	0xFF4
 12819                           prodl	equ	0xFF3
 12820                           intcon	equ	0xFF2
 12821                           intcon2	equ	0xFF1
 12822                           indf0	equ	0xFEF
 12823                           postinc0	equ	0xFEE
 12824                           fsr0h	equ	0xFEA
 12825                           fsr0l	equ	0xFE9
 12826                           wreg	equ	0xFE8
 12827                           postinc1	equ	0xFE6
 12828                           postdec1	equ	0xFE5
 12829                           fsr1h	equ	0xFE2
 12830                           fsr1l	equ	0xFE1
 12831                           indf2	equ	0xFDF
 12832                           postinc2	equ	0xFDE
 12833                           postdec2	equ	0xFDD
 12834                           plusw2	equ	0xFDB
 12835                           fsr2h	equ	0xFDA
 12836                           fsr2l	equ	0xFD9
 12837                           status	equ	0xFD8
 12838                           
 12839 ;; *************** function ___awdiv *****************
 12840 ;; Defined at:
 12841 ;;		line 10 in file "/usr/opt/microchip/xc8/v1.20/sources/common/awdiv.c"
 12842 ;; Parameters:    Size  Location     Type
 12843 ;;  dividend        2    9[COMRAM] int 
 12844 ;;  divisor         2   11[COMRAM] int 
 12845 ;; Auto vars:     Size  Location     Type
 12846 ;;  quotient        2   20[COMRAM] int 
 12847 ;;  sign            1   19[COMRAM] unsigned char 
 12848 ;;  counter         1   18[COMRAM] unsigned char 
 12849 ;; Return value:  Size  Location     Type
 12850 ;;                  2    9[COMRAM] int 
 12851 ;; Registers used:
 12852 ;;		wreg, status,2, status,0
 12853 ;; Tracked objects:
 12854 ;;		On entry : 0/0
 12855 ;;		On exit  : 0/0
 12856 ;;		Unchanged: 0/0
 12857 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12858 ;;      Params:         4       0       0       0       0       0       0       0       0
 12859 ;;      Locals:         8       0       0       0       0       0       0       0       0
 12860 ;;      Temps:          1       0       0       0       0       0       0       0       0
 12861 ;;      Totals:        13       0       0       0       0       0       0       0       0
 12862 ;;Total ram usage:       13 bytes
 12863 ;; Hardware stack levels used:    1
 12864 ;; This function calls:
 12865 ;;		Nothing
 12866 ;; This function is called by:
 12867 ;;		_dayOfWeek
 12868 ;;		_fround
 12869 ;;		_scale
 12870 ;;		_sprintf
 12871 ;; This function uses a non-reentrant model
 12872 ;;
 12873                           
 12874                           	psect	text51
 12875  0034FA                     __ptext51:
 12876                           	opt stack 0
 12877  0034FA                     ___awdiv:
 12878                           	opt stack 23
 12879                           
 12880                           ;incstack = 0
 12881                           ;incstack = 0
 12882  0034FA  6E0E               	movwf	??___awdiv& (0+255),c
 12883  0034FC  0E00               	movlw	0
 12884  0034FE  6E14               	movwf	___awdiv@sign,c
 12885  003500  500E               	movf	??___awdiv& (0+255),w,c
 12886  003502  AE0D               	btfss	___awdiv@divisor+1,7,c
 12887  003504  D008               	goto	i2l5133
 12888  003506  6C0C               	negf	___awdiv@divisor,c
 12889  003508  1E0D               	comf	___awdiv@divisor+1,f,c
 12890  00350A  B0D8               	btfsc	status,0,c
 12891  00350C  2A0D               	incf	___awdiv@divisor+1,f,c
 12892  00350E  6E0E               	movwf	??___awdiv& (0+255),c
 12893  003510  0E01               	movlw	1
 12894  003512  6E14               	movwf	___awdiv@sign,c
 12895  003514  500E               	movf	??___awdiv& (0+255),w,c
 12896  003516                     i2l5133:
 12897  003516  AE0B               	btfss	___awdiv@dividend+1,7,c
 12898  003518  D006               	goto	i2l5139
 12899  00351A  6C0A               	negf	___awdiv@dividend,c
 12900  00351C  1E0B               	comf	___awdiv@dividend+1,f,c
 12901  00351E  B0D8               	btfsc	status,0,c
 12902  003520  2A0B               	incf	___awdiv@dividend+1,f,c
 12903  003522  0E01               	movlw	1
 12904  003524  1A14               	xorwf	___awdiv@sign,f,c
 12905  003526                     i2l5139:
 12906  003526  0E00               	movlw	0
 12907  003528  6E16               	movwf	___awdiv@quotient+1,c
 12908  00352A  0E00               	movlw	0
 12909  00352C  6E15               	movwf	___awdiv@quotient,c
 12910  00352E  500D               	movf	___awdiv@divisor+1,w,c
 12911  003530  100C               	iorwf	___awdiv@divisor,w,c
 12912  003532  B4D8               	btfsc	status,2,c
 12913  003534  D01E               	goto	i2l5161
 12914  003536  6E0E               	movwf	??___awdiv& (0+255),c
 12915  003538  0E01               	movlw	1
 12916  00353A  6E13               	movwf	___awdiv@counter,c
 12917  00353C  500E               	movf	??___awdiv& (0+255),w,c
 12918  00353E  D004               	goto	i2l5147
 12919  003540                     i2l5145:
 12920  003540  90D8               	bcf	status,0,c
 12921  003542  360C               	rlcf	___awdiv@divisor,f,c
 12922  003544  360D               	rlcf	___awdiv@divisor+1,f,c
 12923  003546  2A13               	incf	___awdiv@counter,f,c
 12924  003548                     i2l5147:
 12925  003548  AE0D               	btfss	___awdiv@divisor+1,7,c
 12926  00354A  D7FA               	goto	i2l5145
 12927  00354C                     i2l5149:
 12928  00354C  90D8               	bcf	status,0,c
 12929  00354E  3615               	rlcf	___awdiv@quotient,f,c
 12930  003550  3616               	rlcf	___awdiv@quotient+1,f,c
 12931  003552  500C               	movf	___awdiv@divisor,w,c
 12932  003554  5C0A               	subwf	___awdiv@dividend,w,c
 12933  003556  500D               	movf	___awdiv@divisor+1,w,c
 12934  003558  580B               	subwfb	___awdiv@dividend+1,w,c
 12935  00355A  A0D8               	btfss	status,0,c
 12936  00355C  D005               	goto	i2l5157
 12937  00355E  500C               	movf	___awdiv@divisor,w,c
 12938  003560  5E0A               	subwf	___awdiv@dividend,f,c
 12939  003562  500D               	movf	___awdiv@divisor+1,w,c
 12940  003564  5A0B               	subwfb	___awdiv@dividend+1,f,c
 12941  003566  8015               	bsf	___awdiv@quotient,0,c
 12942  003568                     i2l5157:
 12943  003568  90D8               	bcf	status,0,c
 12944  00356A  320D               	rrcf	___awdiv@divisor+1,f,c
 12945  00356C  320C               	rrcf	___awdiv@divisor,f,c
 12946  00356E  2E13               	decfsz	___awdiv@counter,f,c
 12947  003570  D7ED               	goto	i2l5149
 12948  003572                     i2l5161:
 12949  003572  5014               	movf	___awdiv@sign,w,c
 12950  003574  B4D8               	btfsc	status,2,c
 12951  003576  D004               	goto	i2l5165
 12952  003578  6C15               	negf	___awdiv@quotient,c
 12953  00357A  1E16               	comf	___awdiv@quotient+1,f,c
 12954  00357C  B0D8               	btfsc	status,0,c
 12955  00357E  2A16               	incf	___awdiv@quotient+1,f,c
 12956  003580                     i2l5165:
 12957  003580  C015  F00A         	movff	___awdiv@quotient,?___awdiv
 12958  003584  C016  F00B         	movff	___awdiv@quotient+1,?___awdiv+1
 12959  003588  0012               	return	
 12960  00358A                     __end_of___awdiv:
 12961                           	opt stack 0
 12962                           tosu	equ	0xFFF
 12963                           tosh	equ	0xFFE
 12964                           tosl	equ	0xFFD
 12965                           pclatu	equ	0xFFB
 12966                           pclath	equ	0xFFA
 12967                           tblptru	equ	0xFF8
 12968                           tblptrh	equ	0xFF7
 12969                           tblptrl	equ	0xFF6
 12970                           tablat	equ	0xFF5
 12971                           prodh	equ	0xFF4
 12972                           prodl	equ	0xFF3
 12973                           intcon	equ	0xFF2
 12974                           intcon2	equ	0xFF1
 12975                           indf0	equ	0xFEF
 12976                           postinc0	equ	0xFEE
 12977                           fsr0h	equ	0xFEA
 12978                           fsr0l	equ	0xFE9
 12979                           wreg	equ	0xFE8
 12980                           postinc1	equ	0xFE6
 12981                           postdec1	equ	0xFE5
 12982                           fsr1h	equ	0xFE2
 12983                           fsr1l	equ	0xFE1
 12984                           indf2	equ	0xFDF
 12985                           postinc2	equ	0xFDE
 12986                           postdec2	equ	0xFDD
 12987                           plusw2	equ	0xFDB
 12988                           fsr2h	equ	0xFDA
 12989                           fsr2l	equ	0xFD9
 12990                           status	equ	0xFD8
 12991                           
 12992 ;; *************** function _dayOfWeek *****************
 12993 ;; Defined at:
 12994 ;;		line 107 in file "RTC.c"
 12995 ;; Parameters:    Size  Location     Type
 12996 ;;  year            1   30[COMRAM] unsigned char 
 12997 ;;  month           1   31[COMRAM] unsigned char 
 12998 ;;  day             1   32[COMRAM] unsigned char 
 12999 ;; Auto vars:     Size  Location     Type
 13000 ;;  tmp             4   41[COMRAM] unsigned long 
 13001 ;; Return value:  Size  Location     Type
 13002 ;;                  1    wreg      unsigned char 
 13003 ;; Registers used:
 13004 ;;		wreg, status,2, status,0, prodl, prodh, cstack
 13005 ;; Tracked objects:
 13006 ;;		On entry : 0/0
 13007 ;;		On exit  : 0/0
 13008 ;;		Unchanged: 0/0
 13009 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13010 ;;      Params:         3       0       0       0       0       0       0       0       0
 13011 ;;      Locals:         8       0       0       0       0       0       0       0       0
 13012 ;;      Temps:          4       0       0       0       0       0       0       0       0
 13013 ;;      Totals:        15       0       0       0       0       0       0       0       0
 13014 ;;Total ram usage:       15 bytes
 13015 ;; Hardware stack levels used:    1
 13016 ;; Hardware stack levels required when called:    1
 13017 ;; This function calls:
 13018 ;;		___awdiv
 13019 ;;		___awmod
 13020 ;;		___llmod
 13021 ;;		___wmul
 13022 ;; This function is called by:
 13023 ;;		_checkDST
 13024 ;; This function uses a non-reentrant model
 13025 ;;
 13026                           
 13027                           	psect	text52
 13028  002256                     __ptext52:
 13029                           	opt stack 0
 13030  002256                     _dayOfWeek:
 13031                           	opt stack 23
 13032                           
 13033                           ;RTC.c: 109: uint32_t tmp = (year % 200) * 365;
 13034                           
 13035                           ;incstack = 0
 13036                           ;incstack = 0
 13037  002256  0E00               	movlw	0
 13038  002258  6E04               	movwf	?___awmod+3,c
 13039  00225A  0EC8               	movlw	200
 13040  00225C  6E03               	movwf	?___awmod+2,c
 13041  00225E  C01F  F001         	movff	dayOfWeek@year,?___awmod
 13042  002262  6A02               	clrf	?___awmod+1,c
 13043  002264  EC47  F01B         	call	___awmod	;wreg free
 13044  002268  C001  F017         	movff	?___awmod,?___wmul
 13045  00226C  C002  F018         	movff	?___awmod+1,?___wmul+1
 13046  002270  0E01               	movlw	1
 13047  002272  6E1A               	movwf	?___wmul+3,c
 13048  002274  0E6D               	movlw	109
 13049  002276  6E19               	movwf	?___wmul+2,c
 13050  002278  ECEF  F01D         	call	___wmul	;wreg free
 13051  00227C  C017  F02A         	movff	?___wmul,dayOfWeek@tmp
 13052  002280  C018  F02B         	movff	?___wmul+1,dayOfWeek@tmp+1
 13053  002284  0E00               	movlw	0
 13054  002286  BE2B               	btfsc	dayOfWeek@tmp+1,7,c
 13055  002288  0EFF               	movlw	-1
 13056  00228A  6E2C               	movwf	dayOfWeek@tmp+2,c
 13057  00228C  6E2D               	movwf	dayOfWeek@tmp+3,c
 13058                           
 13059                           ;RTC.c: 110: tmp += (((year % 200) + 3) / 4);
 13060  00228E  0E00               	movlw	0
 13061  002290  6E04               	movwf	?___awmod+3,c
 13062  002292  0EC8               	movlw	200
 13063  002294  6E03               	movwf	?___awmod+2,c
 13064  002296  C01F  F001         	movff	dayOfWeek@year,?___awmod
 13065  00229A  6A02               	clrf	?___awmod+1,c
 13066  00229C  EC47  F01B         	call	___awmod	;wreg free
 13067  0022A0  0E03               	movlw	3
 13068  0022A2  2401               	addwf	?___awmod,w,c
 13069  0022A4  6E0A               	movwf	?___awdiv,c
 13070  0022A6  0E00               	movlw	0
 13071  0022A8  2002               	addwfc	?___awmod+1,w,c
 13072  0022AA  6E0B               	movwf	?___awdiv+1,c
 13073  0022AC  0E00               	movlw	0
 13074  0022AE  6E0D               	movwf	?___awdiv+3,c
 13075  0022B0  0E04               	movlw	4
 13076  0022B2  6E0C               	movwf	?___awdiv+2,c
 13077  0022B4  EC7D  F01A         	call	___awdiv	;wreg free
 13078  0022B8  C00A  F022         	movff	?___awdiv,??_dayOfWeek
 13079  0022BC  C00B  F023         	movff	?___awdiv+1,??_dayOfWeek+1
 13080  0022C0  0E00               	movlw	0
 13081  0022C2  BE23               	btfsc	(??_dayOfWeek+1)& (0+255),7,c
 13082  0022C4  0EFF               	movlw	255
 13083  0022C6  6E24               	movwf	(??_dayOfWeek+2)& (0+255),c
 13084  0022C8  6E25               	movwf	(??_dayOfWeek+3)& (0+255),c
 13085  0022CA  5022               	movf	??_dayOfWeek,w,c
 13086  0022CC  262A               	addwf	dayOfWeek@tmp,f,c
 13087  0022CE  5023               	movf	??_dayOfWeek+1,w,c
 13088  0022D0  222B               	addwfc	dayOfWeek@tmp+1,f,c
 13089  0022D2  5024               	movf	??_dayOfWeek+2,w,c
 13090  0022D4  222C               	addwfc	dayOfWeek@tmp+2,f,c
 13091  0022D6  5025               	movf	??_dayOfWeek+3,w,c
 13092  0022D8  222D               	addwfc	dayOfWeek@tmp+3,f,c
 13093                           
 13094                           ;RTC.c: 112: switch (month) {
 13095  0022DA  D065               	goto	i2l5225
 13096  0022DC                     i2l5219:
 13097                           
 13098                           ;RTC.c: 114: tmp += 30;
 13099  0022DC  0E1E               	movlw	30
 13100  0022DE  262A               	addwf	dayOfWeek@tmp,f,c
 13101  0022E0  0E00               	movlw	0
 13102  0022E2  222B               	addwfc	dayOfWeek@tmp+1,f,c
 13103  0022E4  0E00               	movlw	0
 13104  0022E6  222C               	addwfc	dayOfWeek@tmp+2,f,c
 13105  0022E8  0E00               	movlw	0
 13106  0022EA  222D               	addwfc	dayOfWeek@tmp+3,f,c
 13107  0022EC                     i2l290:
 13108                           
 13109                           ;RTC.c: 117: tmp += 31;
 13110  0022EC  0E1F               	movlw	31
 13111  0022EE  262A               	addwf	dayOfWeek@tmp,f,c
 13112  0022F0  0E00               	movlw	0
 13113  0022F2  222B               	addwfc	dayOfWeek@tmp+1,f,c
 13114  0022F4  0E00               	movlw	0
 13115  0022F6  222C               	addwfc	dayOfWeek@tmp+2,f,c
 13116  0022F8  0E00               	movlw	0
 13117  0022FA  222D               	addwfc	dayOfWeek@tmp+3,f,c
 13118  0022FC                     i2l291:
 13119                           
 13120                           ;RTC.c: 120: tmp += 30;
 13121  0022FC  0E1E               	movlw	30
 13122  0022FE  262A               	addwf	dayOfWeek@tmp,f,c
 13123  002300  0E00               	movlw	0
 13124  002302  222B               	addwfc	dayOfWeek@tmp+1,f,c
 13125  002304  0E00               	movlw	0
 13126  002306  222C               	addwfc	dayOfWeek@tmp+2,f,c
 13127  002308  0E00               	movlw	0
 13128  00230A  222D               	addwfc	dayOfWeek@tmp+3,f,c
 13129  00230C                     i2l292:
 13130                           
 13131                           ;RTC.c: 123: tmp += 31;
 13132  00230C  0E1F               	movlw	31
 13133  00230E  262A               	addwf	dayOfWeek@tmp,f,c
 13134  002310  0E00               	movlw	0
 13135  002312  222B               	addwfc	dayOfWeek@tmp+1,f,c
 13136  002314  0E00               	movlw	0
 13137  002316  222C               	addwfc	dayOfWeek@tmp+2,f,c
 13138  002318  0E00               	movlw	0
 13139  00231A  222D               	addwfc	dayOfWeek@tmp+3,f,c
 13140  00231C                     i2l293:
 13141                           
 13142                           ;RTC.c: 126: tmp += 31;
 13143  00231C  0E1F               	movlw	31
 13144  00231E  262A               	addwf	dayOfWeek@tmp,f,c
 13145  002320  0E00               	movlw	0
 13146  002322  222B               	addwfc	dayOfWeek@tmp+1,f,c
 13147  002324  0E00               	movlw	0
 13148  002326  222C               	addwfc	dayOfWeek@tmp+2,f,c
 13149  002328  0E00               	movlw	0
 13150  00232A  222D               	addwfc	dayOfWeek@tmp+3,f,c
 13151  00232C                     i2l294:
 13152                           
 13153                           ;RTC.c: 129: tmp += 30;
 13154  00232C  0E1E               	movlw	30
 13155  00232E  262A               	addwf	dayOfWeek@tmp,f,c
 13156  002330  0E00               	movlw	0
 13157  002332  222B               	addwfc	dayOfWeek@tmp+1,f,c
 13158  002334  0E00               	movlw	0
 13159  002336  222C               	addwfc	dayOfWeek@tmp+2,f,c
 13160  002338  0E00               	movlw	0
 13161  00233A  222D               	addwfc	dayOfWeek@tmp+3,f,c
 13162  00233C                     i2l295:
 13163                           
 13164                           ;RTC.c: 132: tmp += 31;
 13165  00233C  0E1F               	movlw	31
 13166  00233E  262A               	addwf	dayOfWeek@tmp,f,c
 13167  002340  0E00               	movlw	0
 13168  002342  222B               	addwfc	dayOfWeek@tmp+1,f,c
 13169  002344  0E00               	movlw	0
 13170  002346  222C               	addwfc	dayOfWeek@tmp+2,f,c
 13171  002348  0E00               	movlw	0
 13172  00234A  222D               	addwfc	dayOfWeek@tmp+3,f,c
 13173  00234C                     i2l296:
 13174                           
 13175                           ;RTC.c: 135: tmp += 30;
 13176  00234C  0E1E               	movlw	30
 13177  00234E  262A               	addwf	dayOfWeek@tmp,f,c
 13178  002350  0E00               	movlw	0
 13179  002352  222B               	addwfc	dayOfWeek@tmp+1,f,c
 13180  002354  0E00               	movlw	0
 13181  002356  222C               	addwfc	dayOfWeek@tmp+2,f,c
 13182  002358  0E00               	movlw	0
 13183  00235A  222D               	addwfc	dayOfWeek@tmp+3,f,c
 13184  00235C                     i2l297:
 13185                           
 13186                           ;RTC.c: 138: tmp += 31;
 13187  00235C  0E1F               	movlw	31
 13188  00235E  262A               	addwf	dayOfWeek@tmp,f,c
 13189  002360  0E00               	movlw	0
 13190  002362  222B               	addwfc	dayOfWeek@tmp+1,f,c
 13191  002364  0E00               	movlw	0
 13192  002366  222C               	addwfc	dayOfWeek@tmp+2,f,c
 13193  002368  0E00               	movlw	0
 13194  00236A  222D               	addwfc	dayOfWeek@tmp+3,f,c
 13195  00236C                     i2l298:
 13196                           
 13197                           ;RTC.c: 141: tmp += 28;
 13198  00236C  0E1C               	movlw	28
 13199  00236E  262A               	addwf	dayOfWeek@tmp,f,c
 13200  002370  0E00               	movlw	0
 13201  002372  222B               	addwfc	dayOfWeek@tmp+1,f,c
 13202  002374  0E00               	movlw	0
 13203  002376  222C               	addwfc	dayOfWeek@tmp+2,f,c
 13204  002378  0E00               	movlw	0
 13205  00237A  222D               	addwfc	dayOfWeek@tmp+3,f,c
 13206                           
 13207                           ;RTC.c: 143: if ((year % 4) == 0) {
 13208  00237C  501F               	movf	dayOfWeek@year,w,c
 13209  00237E  0B03               	andlw	3
 13210  002380  A4D8               	btfss	status,2,c
 13211  002382  D008               	goto	i2l300
 13212                           
 13213                           ;RTC.c: 144: tmp++;
 13214  002384  0E01               	movlw	1
 13215  002386  262A               	addwf	dayOfWeek@tmp,f,c
 13216  002388  0E00               	movlw	0
 13217  00238A  222B               	addwfc	dayOfWeek@tmp+1,f,c
 13218  00238C  0E00               	movlw	0
 13219  00238E  222C               	addwfc	dayOfWeek@tmp+2,f,c
 13220  002390  0E00               	movlw	0
 13221  002392  222D               	addwfc	dayOfWeek@tmp+3,f,c
 13222  002394                     i2l300:
 13223                           
 13224                           ;RTC.c: 148: tmp += 31;
 13225  002394  0E1F               	movlw	31
 13226  002396  262A               	addwf	dayOfWeek@tmp,f,c
 13227  002398  0E00               	movlw	0
 13228  00239A  222B               	addwfc	dayOfWeek@tmp+1,f,c
 13229  00239C  0E00               	movlw	0
 13230  00239E  222C               	addwfc	dayOfWeek@tmp+2,f,c
 13231  0023A0  0E00               	movlw	0
 13232  0023A2  222D               	addwfc	dayOfWeek@tmp+3,f,c
 13233  0023A4  D025               	goto	i2l5227
 13234  0023A6                     i2l5225:
 13235  0023A6  5020               	movf	dayOfWeek@month,w,c
 13236                           
 13237                           ; Switch size 1, requested type "space"
 13238                           ; Number of cases is 12, Range of values is 1 to 12
 13239                           ; switch strategies available:
 13240                           ; Name         Instructions Cycles
 13241                           ; simple_byte           37    19 (average)
 13242                           ;	Chosen strategy is simple_byte
 13243  0023A8  0A01               	xorlw	1	; case 1
 13244  0023AA  B4D8               	btfsc	status,2,c
 13245  0023AC  D021               	goto	i2l5227
 13246  0023AE  0A03               	xorlw	3	; case 2
 13247  0023B0  B4D8               	btfsc	status,2,c
 13248  0023B2  D7F0               	goto	i2l300
 13249  0023B4  0A01               	xorlw	1	; case 3
 13250  0023B6  B4D8               	btfsc	status,2,c
 13251  0023B8  D7D9               	goto	i2l298
 13252  0023BA  0A07               	xorlw	7	; case 4
 13253  0023BC  B4D8               	btfsc	status,2,c
 13254  0023BE  D7CE               	goto	i2l297
 13255  0023C0  0A01               	xorlw	1	; case 5
 13256  0023C2  B4D8               	btfsc	status,2,c
 13257  0023C4  D7C3               	goto	i2l296
 13258  0023C6  0A03               	xorlw	3	; case 6
 13259  0023C8  B4D8               	btfsc	status,2,c
 13260  0023CA  D7B8               	goto	i2l295
 13261  0023CC  0A01               	xorlw	1	; case 7
 13262  0023CE  B4D8               	btfsc	status,2,c
 13263  0023D0  D7AD               	goto	i2l294
 13264  0023D2  0A0F               	xorlw	15	; case 8
 13265  0023D4  B4D8               	btfsc	status,2,c
 13266  0023D6  D7A2               	goto	i2l293
 13267  0023D8  0A01               	xorlw	1	; case 9
 13268  0023DA  B4D8               	btfsc	status,2,c
 13269  0023DC  D797               	goto	i2l292
 13270  0023DE  0A03               	xorlw	3	; case 10
 13271  0023E0  B4D8               	btfsc	status,2,c
 13272  0023E2  D78C               	goto	i2l291
 13273  0023E4  0A01               	xorlw	1	; case 11
 13274  0023E6  B4D8               	btfsc	status,2,c
 13275  0023E8  D781               	goto	i2l290
 13276  0023EA  0A07               	xorlw	7	; case 12
 13277  0023EC  B4D8               	btfsc	status,2,c
 13278  0023EE  D776               	goto	i2l5219
 13279  0023F0                     i2l5227:
 13280                           
 13281                           ;RTC.c: 156: tmp += day;
 13282  0023F0  5021               	movf	dayOfWeek@day,w,c
 13283  0023F2  262A               	addwf	dayOfWeek@tmp,f,c
 13284  0023F4  0E00               	movlw	0
 13285  0023F6  222B               	addwfc	dayOfWeek@tmp+1,f,c
 13286  0023F8  222C               	addwfc	dayOfWeek@tmp+2,f,c
 13287  0023FA  222D               	addwfc	dayOfWeek@tmp+3,f,c
 13288                           
 13289                           ;RTC.c: 157: tmp--;
 13290  0023FC  062A               	decf	dayOfWeek@tmp,f,c
 13291  0023FE  0E00               	movlw	0
 13292  002400  5A2B               	subwfb	dayOfWeek@tmp+1,f,c
 13293  002402  5A2C               	subwfb	dayOfWeek@tmp+2,f,c
 13294  002404  5A2D               	subwfb	dayOfWeek@tmp+3,f,c
 13295                           
 13296                           ;RTC.c: 160: return (uint8_t) ((tmp + 6) % 7);
 13297  002406  0E06               	movlw	6
 13298  002408  242A               	addwf	dayOfWeek@tmp,w,c
 13299  00240A  6E14               	movwf	?___llmod,c
 13300  00240C  0E00               	movlw	0
 13301  00240E  202B               	addwfc	dayOfWeek@tmp+1,w,c
 13302  002410  6E15               	movwf	?___llmod+1,c
 13303  002412  0E00               	movlw	0
 13304  002414  202C               	addwfc	dayOfWeek@tmp+2,w,c
 13305  002416  6E16               	movwf	?___llmod+2,c
 13306  002418  0E00               	movlw	0
 13307  00241A  202D               	addwfc	dayOfWeek@tmp+3,w,c
 13308  00241C  6E17               	movwf	?___llmod+3,c
 13309  00241E  0E07               	movlw	7
 13310  002420  6E18               	movwf	?___llmod+4,c
 13311  002422  0E00               	movlw	0
 13312  002424  6E19               	movwf	?___llmod+5,c
 13313  002426  0E00               	movlw	0
 13314  002428  6E1A               	movwf	?___llmod+6,c
 13315  00242A  0E00               	movlw	0
 13316  00242C  6E1B               	movwf	?___llmod+7,c
 13317  00242E  ECF6  F01B         	call	___llmod	;wreg free
 13318  002432  5014               	movf	?___llmod,w,c
 13319  002434  0012               	return	
 13320  002436                     __end_of_dayOfWeek:
 13321                           	opt stack 0
 13322                           tosu	equ	0xFFF
 13323                           tosh	equ	0xFFE
 13324                           tosl	equ	0xFFD
 13325                           pclatu	equ	0xFFB
 13326                           pclath	equ	0xFFA
 13327                           tblptru	equ	0xFF8
 13328                           tblptrh	equ	0xFF7
 13329                           tblptrl	equ	0xFF6
 13330                           tablat	equ	0xFF5
 13331                           prodh	equ	0xFF4
 13332                           prodl	equ	0xFF3
 13333                           intcon	equ	0xFF2
 13334                           intcon2	equ	0xFF1
 13335                           indf0	equ	0xFEF
 13336                           postinc0	equ	0xFEE
 13337                           fsr0h	equ	0xFEA
 13338                           fsr0l	equ	0xFE9
 13339                           wreg	equ	0xFE8
 13340                           postinc1	equ	0xFE6
 13341                           postdec1	equ	0xFE5
 13342                           fsr1h	equ	0xFE2
 13343                           fsr1l	equ	0xFE1
 13344                           indf2	equ	0xFDF
 13345                           postinc2	equ	0xFDE
 13346                           postdec2	equ	0xFDD
 13347                           plusw2	equ	0xFDB
 13348                           fsr2h	equ	0xFDA
 13349                           fsr2l	equ	0xFD9
 13350                           status	equ	0xFD8
 13351                           
 13352 ;; *************** function _checkDST *****************
 13353 ;; Defined at:
 13354 ;;		line 59 in file "RTC.c"
 13355 ;; Parameters:    Size  Location     Type
 13356 ;;		None
 13357 ;; Auto vars:     Size  Location     Type
 13358 ;;		None
 13359 ;; Return value:  Size  Location     Type
 13360 ;;		None               void
 13361 ;; Registers used:
 13362 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
 13363 ;; Tracked objects:
 13364 ;;		On entry : 0/0
 13365 ;;		On exit  : 0/0
 13366 ;;		Unchanged: 0/0
 13367 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13368 ;;      Params:         0       0       0       0       0       0       0       0       0
 13369 ;;      Locals:         2       0       0       0       0       0       0       0       0
 13370 ;;      Temps:          7       0       0       0       0       0       0       0       0
 13371 ;;      Totals:         9       0       0       0       0       0       0       0       0
 13372 ;;Total ram usage:        9 bytes
 13373 ;; Hardware stack levels used:    1
 13374 ;; Hardware stack levels required when called:    2
 13375 ;; This function calls:
 13376 ;;		_tick
 13377 ;;		_dayOfWeek
 13378 ;; This function is called by:
 13379 ;;		_tick
 13380 ;; This function uses a non-reentrant model
 13381 ;;
 13382                           
 13383                           	psect	text53
 13384  00293E                     __ptext53:
 13385                           	opt stack 0
 13386  00293E                     _checkDST:
 13387                           	opt stack 23
 13388                           
 13389                           ;RTC.c: 60: if ((date.dst ^ (1 & ((date.day >= ((((2)*7)-dayOfWeek((date.year),(3),((2)*
      +                          7)))) && date.month >= 3) && (date.day < ((((1)*7)-dayOfWeek((date.year),(11),((1)*7))))
      +                           && date.month < 11)))) && date.hour == 1) {
 13390                           
 13391                           ;incstack = 0
 13392                           ;incstack = 0
 13393  00293E  6E2E               	movwf	??_checkDST& (0+255),c
 13394  002940  0E00               	movlw	0
 13395  002942  6E36               	movwf	_checkDST$400,c
 13396  002944  502E               	movf	??_checkDST& (0+255),w,c
 13397  002946  C113  F01F         	movff	_date+6,?_dayOfWeek
 13398  00294A  6E2E               	movwf	??_checkDST& (0+255),c
 13399  00294C  0E03               	movlw	3
 13400  00294E  6E20               	movwf	?_dayOfWeek+1,c
 13401  002950  502E               	movf	??_checkDST& (0+255),w,c
 13402  002952  6E2F               	movwf	(??_checkDST+1)& (0+255),c
 13403  002954  0E0E               	movlw	14
 13404  002956  6E21               	movwf	?_dayOfWeek+2,c
 13405  002958  502F               	movf	(??_checkDST+1)& (0+255),w,c
 13406  00295A  EC2B  F011         	call	_dayOfWeek	;wreg free
 13407  00295E  6E30               	movwf	(??_checkDST+2)& (0+255),c
 13408  002960  6A31               	clrf	(??_checkDST+3)& (0+255),c
 13409  002962  1E30               	comf	??_checkDST+2,f,c
 13410  002964  1E31               	comf	??_checkDST+3,f,c
 13411  002966  4A30               	infsnz	??_checkDST+2,f,c
 13412  002968  2A31               	incf	??_checkDST+3,f,c
 13413  00296A  0E0E               	movlw	14
 13414  00296C  2630               	addwf	??_checkDST+2,f,c
 13415  00296E  0E00               	movlw	0
 13416  002970  2231               	addwfc	??_checkDST+3,f,c
 13417  002972  0101               	movlb	1	; () banked
 13418  002974  0101               	movlb	1	; () banked
 13419  002976  5110               	movf	(_date+3)& (0+255),w,b
 13420  002978  6E32               	movwf	(??_checkDST+4)& (0+255),c
 13421  00297A  6A33               	clrf	(??_checkDST+5)& (0+255),c
 13422  00297C  5033               	movf	??_checkDST+5,w,c
 13423  00297E  0A80               	xorlw	128
 13424  002980  6E34               	movwf	(??_checkDST+6)& (0+255),c
 13425  002982  5030               	movf	??_checkDST+2,w,c
 13426  002984  5C32               	subwf	??_checkDST+4,w,c
 13427  002986  5031               	movf	??_checkDST+3,w,c
 13428  002988  0A80               	xorlw	128
 13429  00298A  5834               	subwfb	(??_checkDST+6)& (0+255),w,c
 13430  00298C  A0D8               	btfss	status,0,c
 13431  00298E  D034               	goto	i2l5605
 13432                           
 13433                           ; BSR set to: 1
 13434  002990  0101               	movlb	1	; () banked
 13435  002992  EE21  F012         	lfsr	2,_date+5
 13436  002996  0E02               	movlw	2
 13437  002998  64DF               	cpfsgt	indf2,c
 13438  00299A  D02E               	goto	i2l5605
 13439                           
 13440                           ; BSR set to: 1
 13441  00299C  C113  F01F         	movff	_date+6,?_dayOfWeek
 13442  0029A0  6E2E               	movwf	??_checkDST& (0+255),c
 13443  0029A2  0E0B               	movlw	11
 13444  0029A4  6E20               	movwf	?_dayOfWeek+1,c
 13445  0029A6  502E               	movf	??_checkDST& (0+255),w,c
 13446  0029A8  6E2F               	movwf	(??_checkDST+1)& (0+255),c
 13447  0029AA  0E07               	movlw	7
 13448  0029AC  6E21               	movwf	?_dayOfWeek+2,c
 13449  0029AE  502F               	movf	(??_checkDST+1)& (0+255),w,c
 13450  0029B0  EC2B  F011         	call	_dayOfWeek	;wreg free
 13451  0029B4  6E30               	movwf	(??_checkDST+2)& (0+255),c
 13452  0029B6  6A31               	clrf	(??_checkDST+3)& (0+255),c
 13453  0029B8  1E30               	comf	??_checkDST+2,f,c
 13454  0029BA  1E31               	comf	??_checkDST+3,f,c
 13455  0029BC  4A30               	infsnz	??_checkDST+2,f,c
 13456  0029BE  2A31               	incf	??_checkDST+3,f,c
 13457  0029C0  0E07               	movlw	7
 13458  0029C2  2630               	addwf	??_checkDST+2,f,c
 13459  0029C4  0E00               	movlw	0
 13460  0029C6  2231               	addwfc	??_checkDST+3,f,c
 13461  0029C8  0101               	movlb	1	; () banked
 13462  0029CA  0101               	movlb	1	; () banked
 13463  0029CC  5110               	movf	(_date+3)& (0+255),w,b
 13464  0029CE  6E32               	movwf	(??_checkDST+4)& (0+255),c
 13465  0029D0  6A33               	clrf	(??_checkDST+5)& (0+255),c
 13466  0029D2  5033               	movf	??_checkDST+5,w,c
 13467  0029D4  0A80               	xorlw	128
 13468  0029D6  6E34               	movwf	(??_checkDST+6)& (0+255),c
 13469  0029D8  5030               	movf	??_checkDST+2,w,c
 13470  0029DA  5C32               	subwf	??_checkDST+4,w,c
 13471  0029DC  5031               	movf	??_checkDST+3,w,c
 13472  0029DE  0A80               	xorlw	128
 13473  0029E0  5834               	subwfb	(??_checkDST+6)& (0+255),w,c
 13474  0029E2  B0D8               	btfsc	status,0,c
 13475  0029E4  D009               	goto	i2l5605
 13476                           
 13477                           ; BSR set to: 1
 13478  0029E6  0E0B               	movlw	11
 13479  0029E8  0101               	movlb	1	; () banked
 13480  0029EA  0101               	movlb	1	; () banked
 13481  0029EC  6112               	cpfslt	(_date+5)& (0+255),b
 13482  0029EE  D004               	goto	i2l5605
 13483                           
 13484                           ; BSR set to: 1
 13485  0029F0  6E2E               	movwf	??_checkDST& (0+255),c
 13486  0029F2  0E01               	movlw	1
 13487  0029F4  6E36               	movwf	_checkDST$400,c
 13488  0029F6  502E               	movf	??_checkDST& (0+255),w,c
 13489  0029F8                     i2l5605:
 13490                           
 13491                           ; BSR set to: 1
 13492  0029F8  5036               	movf	_checkDST$400,w,c
 13493  0029FA  0B01               	andlw	1
 13494  0029FC  0101               	movlb	1	; () banked
 13495  0029FE  0101               	movlb	1	; () banked
 13496  002A00  1915               	xorwf	(_date+8)& (0+255),w,b
 13497  002A02  0900               	iorlw	0
 13498  002A04  B4D8               	btfsc	status,2,c
 13499  002A06  D02E               	goto	i2l269
 13500                           
 13501                           ; BSR set to: 1
 13502  002A08  0101               	movlb	1	; () banked
 13503  002A0A  0101               	movlb	1	; () banked
 13504  002A0C  050F               	decf	(_date+2)& (0+255),w,b
 13505  002A0E  A4D8               	btfss	status,2,c
 13506  002A10  D029               	goto	i2l269
 13507                           
 13508                           ; BSR set to: 1
 13509                           ;RTC.c: 61: date.dst = !date.dst;
 13510  002A12  0101               	movlb	1	; () banked
 13511  002A14  0101               	movlb	1	; () banked
 13512  002A16  5115               	movf	(_date+8)& (0+255),w,b
 13513  002A18  A4D8               	btfss	status,2,c
 13514  002A1A  D002               	goto	i2u397_40
 13515  002A1C  0E01               	movlw	1
 13516  002A1E  D001               	goto	i2u397_46
 13517  002A20                     i2u397_40:
 13518  002A20  0E00               	movlw	0
 13519  002A22                     i2u397_46:
 13520  002A22  0101               	movlb	1	; () banked
 13521  002A24  0101               	movlb	1	; () banked
 13522  002A26  6F15               	movwf	(_date+8)& (0+255),b
 13523                           
 13524                           ;RTC.c: 62: if (date.dst) {
 13525  002A28  0101               	movlb	1	; () banked
 13526  002A2A  0101               	movlb	1	; () banked
 13527  002A2C  5115               	movf	(_date+8)& (0+255),w,b
 13528  002A2E  B4D8               	btfsc	status,2,c
 13529  002A30  D007               	goto	i2l5613
 13530                           
 13531                           ; BSR set to: 1
 13532                           ;RTC.c: 63: tick(hour);
 13533  002A32  6E2E               	movwf	??_checkDST& (0+255),c
 13534  002A34  0E02               	movlw	2
 13535  002A36  6E0D               	movwf	?_tick,c
 13536  002A38  502E               	movf	??_checkDST& (0+255),w,c
 13537  002A3A  EC2F  F018         	call	_tick	;wreg free
 13538                           
 13539                           ;RTC.c: 64: } else {
 13540  002A3E  D012               	goto	i2l269
 13541  002A40                     i2l5613:
 13542                           
 13543                           ;RTC.c: 65: if (date.hour > 0) {
 13544  002A40  0101               	movlb	1	; () banked
 13545  002A42  0101               	movlb	1	; () banked
 13546  002A44  510F               	movf	(_date+2)& (0+255),w,b
 13547  002A46  B4D8               	btfsc	status,2,c
 13548  002A48  D004               	goto	i2l5617
 13549                           
 13550                           ; BSR set to: 1
 13551                           ;RTC.c: 66: date.hour--;
 13552  002A4A  0101               	movlb	1	; () banked
 13553  002A4C  0101               	movlb	1	; () banked
 13554  002A4E  070F               	decf	(_date+2)& (0+255),f,b
 13555                           
 13556                           ;RTC.c: 67: } else {
 13557  002A50  D009               	goto	i2l269
 13558  002A52                     i2l5617:
 13559                           
 13560                           ; BSR set to: 1
 13561                           ;RTC.c: 68: date.hour = 0;
 13562  002A52  6E2E               	movwf	??_checkDST& (0+255),c
 13563  002A54  0E00               	movlw	0
 13564  002A56  0101               	movlb	1	; () banked
 13565  002A58  0101               	movlb	1	; () banked
 13566  002A5A  6F0F               	movwf	(_date+2)& (0+255),b
 13567  002A5C  502E               	movf	??_checkDST& (0+255),w,c
 13568                           
 13569                           ; BSR set to: 1
 13570                           ;RTC.c: 69: date.day--;
 13571  002A5E  0101               	movlb	1	; () banked
 13572  002A60  0101               	movlb	1	; () banked
 13573  002A62  0710               	decf	(_date+3)& (0+255),f,b
 13574  002A64                     i2l269:
 13575  002A64  0012               	return	
 13576  002A66                     __end_of_checkDST:
 13577                           	opt stack 0
 13578                           tosu	equ	0xFFF
 13579                           tosh	equ	0xFFE
 13580                           tosl	equ	0xFFD
 13581                           pclatu	equ	0xFFB
 13582                           pclath	equ	0xFFA
 13583                           tblptru	equ	0xFF8
 13584                           tblptrh	equ	0xFF7
 13585                           tblptrl	equ	0xFF6
 13586                           tablat	equ	0xFF5
 13587                           prodh	equ	0xFF4
 13588                           prodl	equ	0xFF3
 13589                           intcon	equ	0xFF2
 13590                           intcon2	equ	0xFF1
 13591                           indf0	equ	0xFEF
 13592                           postinc0	equ	0xFEE
 13593                           fsr0h	equ	0xFEA
 13594                           fsr0l	equ	0xFE9
 13595                           wreg	equ	0xFE8
 13596                           postinc1	equ	0xFE6
 13597                           postdec1	equ	0xFE5
 13598                           fsr1h	equ	0xFE2
 13599                           fsr1l	equ	0xFE1
 13600                           indf2	equ	0xFDF
 13601                           postinc2	equ	0xFDE
 13602                           postdec2	equ	0xFDD
 13603                           plusw2	equ	0xFDB
 13604                           fsr2h	equ	0xFDA
 13605                           fsr2l	equ	0xFD9
 13606                           status	equ	0xFD8
 13607                           
 13608 ;; *************** function _tick *****************
 13609 ;; Defined at:
 13610 ;;		line 76 in file "RTC.c"
 13611 ;; Parameters:    Size  Location     Type
 13612 ;;  val             1   12[COMRAM] unsigned char 
 13613 ;; Auto vars:     Size  Location     Type
 13614 ;;		None
 13615 ;; Return value:  Size  Location     Type
 13616 ;;                  1    wreg      unsigned char 
 13617 ;; Registers used:
 13618 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
 13619 ;; Tracked objects:
 13620 ;;		On entry : 0/0
 13621 ;;		On exit  : 0/0
 13622 ;;		Unchanged: 0/0
 13623 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13624 ;;      Params:         1       0       0       0       0       0       0       0       0
 13625 ;;      Locals:         0       0       0       0       0       0       0       0       0
 13626 ;;      Temps:          1       0       0       0       0       0       0       0       0
 13627 ;;      Totals:         2       0       0       0       0       0       0       0       0
 13628 ;;Total ram usage:        2 bytes
 13629 ;; Hardware stack levels used:    1
 13630 ;; Hardware stack levels required when called:    3
 13631 ;; This function calls:
 13632 ;;		_daysOfMonth
 13633 ;;		_checkDST
 13634 ;; This function is called by:
 13635 ;;		_high_isr
 13636 ;;		_checkDST
 13637 ;; This function uses a non-reentrant model
 13638 ;;
 13639                           
 13640                           	psect	text54
 13641  00305E                     __ptext54:
 13642                           	opt stack 0
 13643  00305E                     _tick:
 13644                           	opt stack 23
 13645                           
 13646                           ;RTC.c: 77: switch (val) {
 13647                           
 13648                           ;incstack = 0
 13649                           ;incstack = 0
 13650  00305E  D052               	goto	i2l5337
 13651  003060                     i2l5311:
 13652                           
 13653                           ;RTC.c: 79: if (++date.second >= 60) {
 13654  003060  0101               	movlb	1	; () banked
 13655  003062  0101               	movlb	1	; () banked
 13656  003064  2B0D               	incf	_date& (0+255),f,b
 13657  003066  0E3B               	movlw	59
 13658  003068  0101               	movlb	1	; () banked
 13659  00306A  650D               	cpfsgt	_date& (0+255),b
 13660  00306C  D05E               	goto	i2l285
 13661                           
 13662                           ; BSR set to: 1
 13663                           ;RTC.c: 80: date.second = 0;
 13664  00306E  6E0E               	movwf	??_tick& (0+255),c
 13665  003070  0E00               	movlw	0
 13666  003072  0101               	movlb	1	; () banked
 13667  003074  0101               	movlb	1	; () banked
 13668  003076  6F0D               	movwf	_date& (0+255),b
 13669  003078  500E               	movf	??_tick& (0+255),w,c
 13670  00307A                     i2l5315:
 13671                           
 13672                           ;RTC.c: 82: if (++date.minute >= 60) {
 13673  00307A  0101               	movlb	1	; () banked
 13674  00307C  EE21  F00E         	lfsr	2,_date+1
 13675  003080  2ADF               	incf	indf2,f,c
 13676  003082  0E3B               	movlw	59
 13677  003084  64DF               	cpfsgt	indf2,c
 13678  003086  D051               	goto	i2l285
 13679                           
 13680                           ; BSR set to: 1
 13681                           ;RTC.c: 83: date.minute = 0;
 13682  003088  6E0E               	movwf	??_tick& (0+255),c
 13683  00308A  0E00               	movlw	0
 13684  00308C  0101               	movlb	1	; () banked
 13685  00308E  0101               	movlb	1	; () banked
 13686  003090  6F0E               	movwf	(_date+1)& (0+255),b
 13687  003092  500E               	movf	??_tick& (0+255),w,c
 13688  003094                     i2l5319:
 13689                           
 13690                           ;RTC.c: 85: date.hour++;
 13691  003094  0101               	movlb	1	; () banked
 13692  003096  0101               	movlb	1	; () banked
 13693  003098  2B0F               	incf	(_date+2)& (0+255),f,b
 13694                           
 13695                           ; BSR set to: 1
 13696                           ;RTC.c: 86: checkDST();
 13697  00309A  EC9F  F014         	call	_checkDST	;wreg free
 13698                           
 13699                           ;RTC.c: 87: if (date.hour >= 24) {
 13700  00309E  0101               	movlb	1	; () banked
 13701  0030A0  EE21  F00F         	lfsr	2,_date+2
 13702  0030A4  0E17               	movlw	23
 13703  0030A6  64DF               	cpfsgt	indf2,c
 13704  0030A8  D040               	goto	i2l285
 13705                           
 13706                           ; BSR set to: 1
 13707                           ;RTC.c: 88: date.hour = 0;
 13708  0030AA  6E0E               	movwf	??_tick& (0+255),c
 13709  0030AC  0E00               	movlw	0
 13710  0030AE  0101               	movlb	1	; () banked
 13711  0030B0  0101               	movlb	1	; () banked
 13712  0030B2  6F0F               	movwf	(_date+2)& (0+255),b
 13713  0030B4  500E               	movf	??_tick& (0+255),w,c
 13714  0030B6                     i2l5327:
 13715                           
 13716                           ;RTC.c: 90: if (++date.day >= daysOfMonth(date.month, date.year)) {
 13717  0030B6  C112  F008         	movff	_date+5,?_daysOfMonth
 13718  0030BA  C113  F009         	movff	_date+6,?_daysOfMonth+1
 13719  0030BE  C114  F00A         	movff	_date+7,?_daysOfMonth+2
 13720  0030C2  ECF2  F018         	call	_daysOfMonth	;wreg free
 13721  0030C6  0101               	movlb	1	; () banked
 13722  0030C8  0101               	movlb	1	; () banked
 13723  0030CA  2B10               	incf	(_date+3)& (0+255),f,b
 13724  0030CC  0101               	movlb	1	; () banked
 13725  0030CE  5D10               	subwf	(_date+3)& (0+255),w,b
 13726  0030D0  A0D8               	btfss	status,0,c
 13727  0030D2  D02B               	goto	i2l285
 13728                           
 13729                           ; BSR set to: 1
 13730                           ;RTC.c: 91: date.day = 1;
 13731  0030D4  6E0E               	movwf	??_tick& (0+255),c
 13732  0030D6  0E01               	movlw	1
 13733  0030D8  0101               	movlb	1	; () banked
 13734  0030DA  0101               	movlb	1	; () banked
 13735  0030DC  6F10               	movwf	(_date+3)& (0+255),b
 13736  0030DE  500E               	movf	??_tick& (0+255),w,c
 13737  0030E0                     i2l5331:
 13738                           
 13739                           ;RTC.c: 93: if (++date.month > 12) {
 13740  0030E0  0101               	movlb	1	; () banked
 13741  0030E2  EE21  F012         	lfsr	2,_date+5
 13742  0030E6  2ADF               	incf	indf2,f,c
 13743  0030E8  0E0C               	movlw	12
 13744  0030EA  64DF               	cpfsgt	indf2,c
 13745  0030EC  D01E               	goto	i2l285
 13746                           
 13747                           ; BSR set to: 1
 13748                           ;RTC.c: 94: date.month = 1;
 13749  0030EE  6E0E               	movwf	??_tick& (0+255),c
 13750  0030F0  0E01               	movlw	1
 13751  0030F2  0101               	movlb	1	; () banked
 13752  0030F4  0101               	movlb	1	; () banked
 13753  0030F6  6F12               	movwf	(_date+5)& (0+255),b
 13754  0030F8  500E               	movf	??_tick& (0+255),w,c
 13755  0030FA                     i2l5335:
 13756                           
 13757                           ;RTC.c: 96: ++date.year;
 13758  0030FA  0101               	movlb	1	; () banked
 13759  0030FC  0101               	movlb	1	; () banked
 13760  0030FE  4B13               	infsnz	(_date+6)& (0+255),f,b
 13761  003100  2B14               	incf	(_date+7)& (0+255),f,b
 13762  003102  D013               	goto	i2l285
 13763  003104                     i2l5337:
 13764  003104  500D               	movf	tick@val,w,c
 13765                           
 13766                           ; Switch size 1, requested type "space"
 13767                           ; Number of cases is 6, Range of values is 0 to 5
 13768                           ; switch strategies available:
 13769                           ; Name         Instructions Cycles
 13770                           ; simple_byte           19    10 (average)
 13771                           ;	Chosen strategy is simple_byte
 13772  003106  0A00               	xorlw	0	; case 0
 13773  003108  B4D8               	btfsc	status,2,c
 13774  00310A  D7AA               	goto	i2l5311
 13775  00310C  0A01               	xorlw	1	; case 1
 13776  00310E  B4D8               	btfsc	status,2,c
 13777  003110  D7B4               	goto	i2l5315
 13778  003112  0A03               	xorlw	3	; case 2
 13779  003114  B4D8               	btfsc	status,2,c
 13780  003116  D7BE               	goto	i2l5319
 13781  003118  0A01               	xorlw	1	; case 3
 13782  00311A  B4D8               	btfsc	status,2,c
 13783  00311C  D7CC               	goto	i2l5327
 13784  00311E  0A07               	xorlw	7	; case 4
 13785  003120  B4D8               	btfsc	status,2,c
 13786  003122  D7DE               	goto	i2l5331
 13787  003124  0A01               	xorlw	1	; case 5
 13788  003126  B4D8               	btfsc	status,2,c
 13789  003128  D7E8               	goto	i2l5335
 13790  00312A                     i2l285:
 13791  00312A  0012               	return	
 13792  00312C                     __end_of_tick:
 13793                           	opt stack 0
 13794                           tosu	equ	0xFFF
 13795                           tosh	equ	0xFFE
 13796                           tosl	equ	0xFFD
 13797                           pclatu	equ	0xFFB
 13798                           pclath	equ	0xFFA
 13799                           tblptru	equ	0xFF8
 13800                           tblptrh	equ	0xFF7
 13801                           tblptrl	equ	0xFF6
 13802                           tablat	equ	0xFF5
 13803                           prodh	equ	0xFF4
 13804                           prodl	equ	0xFF3
 13805                           intcon	equ	0xFF2
 13806                           intcon2	equ	0xFF1
 13807                           indf0	equ	0xFEF
 13808                           postinc0	equ	0xFEE
 13809                           fsr0h	equ	0xFEA
 13810                           fsr0l	equ	0xFE9
 13811                           wreg	equ	0xFE8
 13812                           postinc1	equ	0xFE6
 13813                           postdec1	equ	0xFE5
 13814                           fsr1h	equ	0xFE2
 13815                           fsr1l	equ	0xFE1
 13816                           indf2	equ	0xFDF
 13817                           postinc2	equ	0xFDE
 13818                           postdec2	equ	0xFDD
 13819                           plusw2	equ	0xFDB
 13820                           fsr2h	equ	0xFDA
 13821                           fsr2l	equ	0xFD9
 13822                           status	equ	0xFD8
 13823                           
 13824 ;; *************** function _daysOfMonth *****************
 13825 ;; Defined at:
 13826 ;;		line 31 in file "RTC.c"
 13827 ;; Parameters:    Size  Location     Type
 13828 ;;  month           1    7[COMRAM] unsigned char 
 13829 ;;  year            2    8[COMRAM] unsigned int 
 13830 ;; Auto vars:     Size  Location     Type
 13831 ;;		None
 13832 ;; Return value:  Size  Location     Type
 13833 ;;                  1    wreg      unsigned char 
 13834 ;; Registers used:
 13835 ;;		wreg, status,2, status,0, cstack
 13836 ;; Tracked objects:
 13837 ;;		On entry : 0/0
 13838 ;;		On exit  : 0/0
 13839 ;;		Unchanged: 0/0
 13840 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13841 ;;      Params:         3       0       0       0       0       0       0       0       0
 13842 ;;      Locals:         0       0       0       0       0       0       0       0       0
 13843 ;;      Temps:          2       0       0       0       0       0       0       0       0
 13844 ;;      Totals:         5       0       0       0       0       0       0       0       0
 13845 ;;Total ram usage:        5 bytes
 13846 ;; Hardware stack levels used:    1
 13847 ;; Hardware stack levels required when called:    1
 13848 ;; This function calls:
 13849 ;;		___lwmod
 13850 ;; This function is called by:
 13851 ;;		_tick
 13852 ;; This function uses a non-reentrant model
 13853 ;;
 13854                           
 13855                           	psect	text55
 13856  0031E4                     __ptext55:
 13857                           	opt stack 0
 13858  0031E4                     _daysOfMonth:
 13859                           	opt stack 24
 13860                           
 13861                           ;RTC.c: 32: switch (month) {
 13862                           
 13863                           ;incstack = 0
 13864                           ;incstack = 0
 13865  0031E4  D02E               	goto	i2l5075
 13866  0031E6                     i2l5051:
 13867                           
 13868                           ;RTC.c: 34: case 3:
 13869                           ;RTC.c: 35: case 5:
 13870                           ;RTC.c: 36: case 7:
 13871                           ;RTC.c: 37: case 8:
 13872                           ;RTC.c: 38: case 10:
 13873                           ;RTC.c: 39: case 12:
 13874                           ;RTC.c: 40: return 31;
 13875  0031E6  0E1F               	movlw	31
 13876  0031E8  D052               	goto	i2l249
 13877  0031EA                     i2l5055:
 13878                           
 13879                           ;RTC.c: 43: case 6:
 13880                           ;RTC.c: 44: case 9:
 13881                           ;RTC.c: 45: case 11:
 13882                           ;RTC.c: 46: return 30;
 13883  0031EA  0E1E               	movlw	30
 13884  0031EC  D050               	goto	i2l249
 13885  0031EE                     i2l5059:
 13886                           
 13887                           ;RTC.c: 49: if ((((year)%4 == 0) && (((year)%100 != 0) || ((year)%400 == 0))))
 13888  0031EE  0E03               	movlw	3
 13889  0031F0  1409               	andwf	daysOfMonth@year,w,c
 13890  0031F2  6E0B               	movwf	??_daysOfMonth& (0+255),c
 13891  0031F4  0E00               	movlw	0
 13892  0031F6  140A               	andwf	daysOfMonth@year+1,w,c
 13893  0031F8  6E0C               	movwf	(??_daysOfMonth+1)& (0+255),c
 13894  0031FA  500C               	movf	??_daysOfMonth+1,w,c
 13895  0031FC  100B               	iorwf	??_daysOfMonth,w,c
 13896  0031FE  A4D8               	btfss	status,2,c
 13897  003200  D01E               	goto	i2l5071
 13898  003202  C009  F001         	movff	daysOfMonth@year,?___lwmod
 13899  003206  C00A  F002         	movff	daysOfMonth@year+1,?___lwmod+1
 13900  00320A  0E00               	movlw	0
 13901  00320C  6E04               	movwf	?___lwmod+3,c
 13902  00320E  0E64               	movlw	100
 13903  003210  6E03               	movwf	?___lwmod+2,c
 13904  003212  EC34  F01D         	call	___lwmod	;wreg free
 13905  003216  5002               	movf	?___lwmod+1,w,c
 13906  003218  1001               	iorwf	?___lwmod,w,c
 13907  00321A  A4D8               	btfss	status,2,c
 13908  00321C  D00E               	goto	i2l5065
 13909  00321E  C009  F001         	movff	daysOfMonth@year,?___lwmod
 13910  003222  C00A  F002         	movff	daysOfMonth@year+1,?___lwmod+1
 13911  003226  0E01               	movlw	1
 13912  003228  6E04               	movwf	?___lwmod+3,c
 13913  00322A  0E90               	movlw	144
 13914  00322C  6E03               	movwf	?___lwmod+2,c
 13915  00322E  EC34  F01D         	call	___lwmod	;wreg free
 13916  003232  5002               	movf	?___lwmod+1,w,c
 13917  003234  1001               	iorwf	?___lwmod,w,c
 13918  003236  A4D8               	btfss	status,2,c
 13919  003238  D002               	goto	i2l5071
 13920  00323A                     i2l5065:
 13921                           
 13922                           ;RTC.c: 50: return 29;
 13923  00323A  0E1D               	movlw	29
 13924  00323C  D028               	goto	i2l249
 13925  00323E                     i2l5071:
 13926                           
 13927                           ;RTC.c: 51: else
 13928                           ;RTC.c: 52: return 28;
 13929  00323E  0E1C               	movlw	28
 13930  003240  D026               	goto	i2l249
 13931  003242                     i2l5075:
 13932  003242  5008               	movf	daysOfMonth@month,w,c
 13933                           
 13934                           ; Switch size 1, requested type "space"
 13935                           ; Number of cases is 12, Range of values is 1 to 12
 13936                           ; switch strategies available:
 13937                           ; Name         Instructions Cycles
 13938                           ; simple_byte           37    19 (average)
 13939                           ;	Chosen strategy is simple_byte
 13940  003244  0A01               	xorlw	1	; case 1
 13941  003246  B4D8               	btfsc	status,2,c
 13942  003248  D7CE               	goto	i2l5051
 13943  00324A  0A03               	xorlw	3	; case 2
 13944  00324C  B4D8               	btfsc	status,2,c
 13945  00324E  D7CF               	goto	i2l5059
 13946  003250  0A01               	xorlw	1	; case 3
 13947  003252  B4D8               	btfsc	status,2,c
 13948  003254  D7C8               	goto	i2l5051
 13949  003256  0A07               	xorlw	7	; case 4
 13950  003258  B4D8               	btfsc	status,2,c
 13951  00325A  D7C7               	goto	i2l5055
 13952  00325C  0A01               	xorlw	1	; case 5
 13953  00325E  B4D8               	btfsc	status,2,c
 13954  003260  D7C2               	goto	i2l5051
 13955  003262  0A03               	xorlw	3	; case 6
 13956  003264  B4D8               	btfsc	status,2,c
 13957  003266  D7C1               	goto	i2l5055
 13958  003268  0A01               	xorlw	1	; case 7
 13959  00326A  B4D8               	btfsc	status,2,c
 13960  00326C  D7BC               	goto	i2l5051
 13961  00326E  0A0F               	xorlw	15	; case 8
 13962  003270  B4D8               	btfsc	status,2,c
 13963  003272  D7B9               	goto	i2l5051
 13964  003274  0A01               	xorlw	1	; case 9
 13965  003276  B4D8               	btfsc	status,2,c
 13966  003278  D7B8               	goto	i2l5055
 13967  00327A  0A03               	xorlw	3	; case 10
 13968  00327C  B4D8               	btfsc	status,2,c
 13969  00327E  D7B3               	goto	i2l5051
 13970  003280  0A01               	xorlw	1	; case 11
 13971  003282  B4D8               	btfsc	status,2,c
 13972  003284  D7B2               	goto	i2l5055
 13973  003286  0A07               	xorlw	7	; case 12
 13974  003288  B4D8               	btfsc	status,2,c
 13975  00328A  D7AD               	goto	i2l5051
 13976                           
 13977                           ;RTC.c: 55: return 0;
 13978  00328C  0E00               	movlw	0
 13979  00328E                     i2l249:
 13980  00328E  0012               	return	
 13981  003290                     __end_of_daysOfMonth:
 13982                           	opt stack 0
 13983                           tosu	equ	0xFFF
 13984                           tosh	equ	0xFFE
 13985                           tosl	equ	0xFFD
 13986                           pclatu	equ	0xFFB
 13987                           pclath	equ	0xFFA
 13988                           tblptru	equ	0xFF8
 13989                           tblptrh	equ	0xFF7
 13990                           tblptrl	equ	0xFF6
 13991                           tablat	equ	0xFF5
 13992                           prodh	equ	0xFF4
 13993                           prodl	equ	0xFF3
 13994                           intcon	equ	0xFF2
 13995                           intcon2	equ	0xFF1
 13996                           indf0	equ	0xFEF
 13997                           postinc0	equ	0xFEE
 13998                           fsr0h	equ	0xFEA
 13999                           fsr0l	equ	0xFE9
 14000                           wreg	equ	0xFE8
 14001                           postinc1	equ	0xFE6
 14002                           postdec1	equ	0xFE5
 14003                           fsr1h	equ	0xFE2
 14004                           fsr1l	equ	0xFE1
 14005                           indf2	equ	0xFDF
 14006                           postinc2	equ	0xFDE
 14007                           postdec2	equ	0xFDD
 14008                           plusw2	equ	0xFDB
 14009                           fsr2h	equ	0xFDA
 14010                           fsr2l	equ	0xFD9
 14011                           status	equ	0xFD8
 14012                           tosu	equ	0xFFF
 14013                           tosh	equ	0xFFE
 14014                           tosl	equ	0xFFD
 14015                           pclatu	equ	0xFFB
 14016                           pclath	equ	0xFFA
 14017                           tblptru	equ	0xFF8
 14018                           tblptrh	equ	0xFF7
 14019                           tblptrl	equ	0xFF6
 14020                           tablat	equ	0xFF5
 14021                           prodh	equ	0xFF4
 14022                           prodl	equ	0xFF3
 14023                           intcon	equ	0xFF2
 14024                           intcon2	equ	0xFF1
 14025                           indf0	equ	0xFEF
 14026                           postinc0	equ	0xFEE
 14027                           fsr0h	equ	0xFEA
 14028                           fsr0l	equ	0xFE9
 14029                           wreg	equ	0xFE8
 14030                           postinc1	equ	0xFE6
 14031                           postdec1	equ	0xFE5
 14032                           fsr1h	equ	0xFE2
 14033                           fsr1l	equ	0xFE1
 14034                           indf2	equ	0xFDF
 14035                           postinc2	equ	0xFDE
 14036                           postdec2	equ	0xFDD
 14037                           plusw2	equ	0xFDB
 14038                           fsr2h	equ	0xFDA
 14039                           fsr2l	equ	0xFD9
 14040                           status	equ	0xFD8
 14041                           
 14042                           	psect	text56
 14043  000000                     __ptext56:
 14044                           	opt stack 0
 14045                           tosu	equ	0xFFF
 14046                           tosh	equ	0xFFE
 14047                           tosl	equ	0xFFD
 14048                           pclatu	equ	0xFFB
 14049                           pclath	equ	0xFFA
 14050                           tblptru	equ	0xFF8
 14051                           tblptrh	equ	0xFF7
 14052                           tblptrl	equ	0xFF6
 14053                           tablat	equ	0xFF5
 14054                           prodh	equ	0xFF4
 14055                           prodl	equ	0xFF3
 14056                           intcon	equ	0xFF2
 14057                           intcon2	equ	0xFF1
 14058                           indf0	equ	0xFEF
 14059                           postinc0	equ	0xFEE
 14060                           fsr0h	equ	0xFEA
 14061                           fsr0l	equ	0xFE9
 14062                           wreg	equ	0xFE8
 14063                           postinc1	equ	0xFE6
 14064                           postdec1	equ	0xFE5
 14065                           fsr1h	equ	0xFE2
 14066                           fsr1l	equ	0xFE1
 14067                           indf2	equ	0xFDF
 14068                           postinc2	equ	0xFDE
 14069                           postdec2	equ	0xFDD
 14070                           plusw2	equ	0xFDB
 14071                           fsr2h	equ	0xFDA
 14072                           fsr2l	equ	0xFD9
 14073                           status	equ	0xFD8
 14074                           
 14075                           	psect	rparam
 14076  0000                     tosu	equ	0xFFF
 14077                           tosh	equ	0xFFE
 14078                           tosl	equ	0xFFD
 14079                           pclatu	equ	0xFFB
 14080                           pclath	equ	0xFFA
 14081                           tblptru	equ	0xFF8
 14082                           tblptrh	equ	0xFF7
 14083                           tblptrl	equ	0xFF6
 14084                           tablat	equ	0xFF5
 14085                           prodh	equ	0xFF4
 14086                           prodl	equ	0xFF3
 14087                           intcon	equ	0xFF2
 14088                           intcon2	equ	0xFF1
 14089                           indf0	equ	0xFEF
 14090                           postinc0	equ	0xFEE
 14091                           fsr0h	equ	0xFEA
 14092                           fsr0l	equ	0xFE9
 14093                           wreg	equ	0xFE8
 14094                           postinc1	equ	0xFE6
 14095                           postdec1	equ	0xFE5
 14096                           fsr1h	equ	0xFE2
 14097                           fsr1l	equ	0xFE1
 14098                           indf2	equ	0xFDF
 14099                           postinc2	equ	0xFDE
 14100                           postdec2	equ	0xFDD
 14101                           plusw2	equ	0xFDB
 14102                           fsr2h	equ	0xFDA
 14103                           fsr2l	equ	0xFD9
 14104                           status	equ	0xFD8


Data Sizes:
    Strings     106
    Constant    201
    Data        23
    BSS         62
    Persistent  2
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     95      95
    BANK0           160     87     151
    BANK1           256     20      43
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    ?___ftsub	float  size(2) Largest target is 0

    ?___ftpack	float  size(2) Largest target is 4
		 -> STR_37(CODE[4]), STR_36(CODE[4]), STR_35(CODE[4]), STR_34(CODE[4]), 
		 -> STR_33(CODE[4]), STR_32(CODE[4]), STR_31(CODE[4]), STR_29(CODE[4]), 
		 -> STR_28(CODE[4]), STR_27(CODE[4]), STR_26(CODE[4]), STR_25(CODE[4]), 
		 -> STR_24(CODE[4]), STR_23(CODE[4]), STR_16(CODE[4]), STR_15(CODE[4]), 
		 -> STR_14(CODE[4]), STR_13(CODE[4]), STR_12(CODE[4]), STR_11(CODE[4]), 
		 -> STR_10(CODE[4]), STR_7(CODE[4]), STR_6(CODE[4]), STR_5(CODE[4]), 
		 -> STR_4(CODE[4]), STR_3(CODE[4]), STR_2(CODE[4]), STR_1(CODE[4]), 

    ?___lldiv	unsigned long  size(2) Largest target is 0

    ?___asftsub	float  size(2) Largest target is 4
		 -> STR_37(CODE[4]), STR_36(CODE[4]), STR_35(CODE[4]), STR_34(CODE[4]), 
		 -> STR_33(CODE[4]), STR_32(CODE[4]), STR_31(CODE[4]), STR_29(CODE[4]), 
		 -> STR_28(CODE[4]), STR_27(CODE[4]), STR_26(CODE[4]), STR_25(CODE[4]), 
		 -> STR_24(CODE[4]), STR_23(CODE[4]), STR_16(CODE[4]), STR_15(CODE[4]), 
		 -> STR_14(CODE[4]), STR_13(CODE[4]), STR_12(CODE[4]), STR_11(CODE[4]), 
		 -> STR_10(CODE[4]), STR_7(CODE[4]), STR_6(CODE[4]), STR_5(CODE[4]), 
		 -> STR_4(CODE[4]), STR_3(CODE[4]), STR_2(CODE[4]), STR_1(CODE[4]), 

    ?___lltoft	float  size(2) Largest target is 0

    ?__tdiv_to_l_	unsigned long  size(2) Largest target is 0

    ?__div_to_l_	unsigned long  size(2) Largest target is 0

    ?___fttol	long  size(2) Largest target is 4
		 -> STR_37(CODE[4]), STR_36(CODE[4]), STR_35(CODE[4]), STR_34(CODE[4]), 
		 -> STR_33(CODE[4]), STR_32(CODE[4]), STR_31(CODE[4]), STR_29(CODE[4]), 
		 -> STR_28(CODE[4]), STR_27(CODE[4]), STR_26(CODE[4]), STR_25(CODE[4]), 
		 -> STR_24(CODE[4]), STR_23(CODE[4]), STR_16(CODE[4]), STR_15(CODE[4]), 
		 -> STR_14(CODE[4]), STR_13(CODE[4]), STR_12(CODE[4]), STR_11(CODE[4]), 
		 -> STR_10(CODE[4]), STR_7(CODE[4]), STR_6(CODE[4]), STR_5(CODE[4]), 
		 -> STR_4(CODE[4]), STR_3(CODE[4]), STR_2(CODE[4]), STR_1(CODE[4]), 

    ?___asftmul	float  size(2) Largest target is 0

    ?___ftneg	float  size(2) Largest target is 4
		 -> STR_37(CODE[4]), STR_36(CODE[4]), STR_35(CODE[4]), STR_34(CODE[4]), 
		 -> STR_33(CODE[4]), STR_32(CODE[4]), STR_31(CODE[4]), STR_29(CODE[4]), 
		 -> STR_28(CODE[4]), STR_27(CODE[4]), STR_26(CODE[4]), STR_25(CODE[4]), 
		 -> STR_24(CODE[4]), STR_23(CODE[4]), STR_16(CODE[4]), STR_15(CODE[4]), 
		 -> STR_14(CODE[4]), STR_13(CODE[4]), STR_12(CODE[4]), STR_11(CODE[4]), 
		 -> STR_10(CODE[4]), STR_7(CODE[4]), STR_6(CODE[4]), STR_5(CODE[4]), 
		 -> STR_4(CODE[4]), STR_3(CODE[4]), STR_2(CODE[4]), STR_1(CODE[4]), 

    ?_scale	float  size(2) Largest target is 0

    ?_fround	float  size(2) Largest target is 0

    ?_lowbit	unsigned long  size(2) Largest target is 4
		 -> lowbit@log2Val(COMRAM[4]), 

    ?_getTemp	unsigned long  size(2) Largest target is 0

    ?___ftdiv	float  size(2) Largest target is 0

    ?___asftadd	float  size(2) Largest target is 4
		 -> STR_37(CODE[4]), STR_36(CODE[4]), STR_35(CODE[4]), STR_34(CODE[4]), 
		 -> STR_33(CODE[4]), STR_32(CODE[4]), STR_31(CODE[4]), STR_29(CODE[4]), 
		 -> STR_28(CODE[4]), STR_27(CODE[4]), STR_26(CODE[4]), STR_25(CODE[4]), 
		 -> STR_24(CODE[4]), STR_23(CODE[4]), STR_16(CODE[4]), STR_15(CODE[4]), 
		 -> STR_14(CODE[4]), STR_13(CODE[4]), STR_12(CODE[4]), STR_11(CODE[4]), 
		 -> STR_10(CODE[4]), STR_7(CODE[4]), STR_6(CODE[4]), STR_5(CODE[4]), 
		 -> STR_4(CODE[4]), STR_3(CODE[4]), STR_2(CODE[4]), STR_1(CODE[4]), 

    ?___ftadd	float  size(2) Largest target is 4
		 -> STR_37(CODE[4]), STR_36(CODE[4]), STR_35(CODE[4]), STR_34(CODE[4]), 
		 -> STR_33(CODE[4]), STR_32(CODE[4]), STR_31(CODE[4]), STR_29(CODE[4]), 
		 -> STR_28(CODE[4]), STR_27(CODE[4]), STR_26(CODE[4]), STR_25(CODE[4]), 
		 -> STR_24(CODE[4]), STR_23(CODE[4]), STR_16(CODE[4]), STR_15(CODE[4]), 
		 -> STR_14(CODE[4]), STR_13(CODE[4]), STR_12(CODE[4]), STR_11(CODE[4]), 
		 -> STR_10(CODE[4]), STR_7(CODE[4]), STR_6(CODE[4]), STR_5(CODE[4]), 
		 -> STR_4(CODE[4]), STR_3(CODE[4]), STR_2(CODE[4]), STR_1(CODE[4]), 

    ?___ftmul	float  size(2) Largest target is 0

    ?___lwtoft	float  size(2) Largest target is 0

    ?___llmod	unsigned long  size(2) Largest target is 4
		 -> STR_37(CODE[4]), STR_36(CODE[4]), STR_35(CODE[4]), STR_34(CODE[4]), 
		 -> STR_33(CODE[4]), STR_32(CODE[4]), STR_31(CODE[4]), STR_29(CODE[4]), 
		 -> STR_28(CODE[4]), STR_27(CODE[4]), STR_26(CODE[4]), STR_25(CODE[4]), 
		 -> STR_24(CODE[4]), STR_23(CODE[4]), STR_16(CODE[4]), STR_15(CODE[4]), 
		 -> STR_14(CODE[4]), STR_13(CODE[4]), STR_12(CODE[4]), STR_11(CODE[4]), 
		 -> STR_10(CODE[4]), STR_7(CODE[4]), STR_6(CODE[4]), STR_5(CODE[4]), 
		 -> STR_4(CODE[4]), STR_3(CODE[4]), STR_2(CODE[4]), STR_1(CODE[4]), 

    ?___awdiv	int  size(2) Largest target is 0

    ?___awmod	int  size(2) Largest target is 4
		 -> STR_37(CODE[4]), STR_36(CODE[4]), STR_35(CODE[4]), STR_34(CODE[4]), 
		 -> STR_33(CODE[4]), STR_32(CODE[4]), STR_31(CODE[4]), STR_29(CODE[4]), 
		 -> STR_28(CODE[4]), STR_27(CODE[4]), STR_26(CODE[4]), STR_25(CODE[4]), 
		 -> STR_24(CODE[4]), STR_23(CODE[4]), STR_16(CODE[4]), STR_15(CODE[4]), 
		 -> STR_14(CODE[4]), STR_13(CODE[4]), STR_12(CODE[4]), STR_11(CODE[4]), 
		 -> STR_10(CODE[4]), STR_7(CODE[4]), STR_6(CODE[4]), STR_5(CODE[4]), 
		 -> STR_4(CODE[4]), STR_3(CODE[4]), STR_2(CODE[4]), STR_1(CODE[4]), 

    ?___lwmod	unsigned int  size(2) Largest target is 4
		 -> STR_37(CODE[4]), STR_36(CODE[4]), STR_35(CODE[4]), STR_34(CODE[4]), 
		 -> STR_33(CODE[4]), STR_32(CODE[4]), STR_31(CODE[4]), STR_29(CODE[4]), 
		 -> STR_28(CODE[4]), STR_27(CODE[4]), STR_26(CODE[4]), STR_25(CODE[4]), 
		 -> STR_24(CODE[4]), STR_23(CODE[4]), STR_16(CODE[4]), STR_15(CODE[4]), 
		 -> STR_14(CODE[4]), STR_13(CODE[4]), STR_12(CODE[4]), STR_11(CODE[4]), 
		 -> STR_10(CODE[4]), STR_7(CODE[4]), STR_6(CODE[4]), STR_5(CODE[4]), 
		 -> STR_4(CODE[4]), STR_3(CODE[4]), STR_2(CODE[4]), STR_1(CODE[4]), 

    ?_loadTime	struct sDate size(2) Largest target is 0

    ?___wmul	unsigned int  size(2) Largest target is 4
		 -> STR_37(CODE[4]), STR_36(CODE[4]), STR_35(CODE[4]), STR_34(CODE[4]), 
		 -> STR_33(CODE[4]), STR_32(CODE[4]), STR_31(CODE[4]), STR_29(CODE[4]), 
		 -> STR_28(CODE[4]), STR_27(CODE[4]), STR_26(CODE[4]), STR_25(CODE[4]), 
		 -> STR_24(CODE[4]), STR_23(CODE[4]), STR_16(CODE[4]), STR_15(CODE[4]), 
		 -> STR_14(CODE[4]), STR_13(CODE[4]), STR_12(CODE[4]), STR_11(CODE[4]), 
		 -> STR_10(CODE[4]), STR_7(CODE[4]), STR_6(CODE[4]), STR_5(CODE[4]), 
		 -> STR_4(CODE[4]), STR_3(CODE[4]), STR_2(CODE[4]), STR_1(CODE[4]), 

    ?_hibit	unsigned long  size(2) Largest target is 4
		 -> hibit@log2Val(COMRAM[4]), 

    ?_log2	unsigned long  size(2) Largest target is 0

    __asftsub@f1p	PTR float  size(2) Largest target is 3
		 -> sprintf@fval(BANK0[3]), 

    __asftmul@f1p	PTR float  size(2) Largest target is 3
		 -> sprintf@integ(BANK0[3]), 

    __asftadd@f1p	PTR float  size(2) Largest target is 3
		 -> sprintf@fval(BANK0[3]), getTemp@total(BANK0[3]), 

    sprintf@_val._cp	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_38(CODE[7]), sprintf@c(BANK0[1]), STR_37(CODE[4]), STR_36(CODE[4]), 
		 -> STR_35(CODE[4]), STR_34(CODE[4]), STR_33(CODE[4]), STR_32(CODE[4]), 
		 -> STR_31(CODE[4]), STR_29(CODE[4]), STR_28(CODE[4]), STR_27(CODE[4]), 
		 -> STR_26(CODE[4]), STR_25(CODE[4]), STR_24(CODE[4]), STR_23(CODE[4]), 
		 -> STR_16(CODE[4]), STR_15(CODE[4]), STR_14(CODE[4]), STR_13(CODE[4]), 
		 -> STR_12(CODE[4]), STR_11(CODE[4]), STR_10(CODE[4]), STR_7(CODE[4]), 
		 -> STR_6(CODE[4]), STR_5(CODE[4]), STR_4(CODE[4]), STR_3(CODE[4]), 
		 -> STR_2(CODE[4]), STR_1(CODE[4]), 

    sprintf@f	PTR const unsigned char  size(2) Largest target is 15
		 -> STR_22(CODE[15]), STR_21(CODE[13]), STR_20(CODE[15]), STR_19(CODE[15]), 
		 -> STR_18(CODE[15]), STR_17(CODE[10]), STR_9(CODE[5]), STR_8(CODE[5]), 

    sprintf@sp	PTR unsigned char  size(2) Largest target is 9
		 -> printRTC@str(BANK0[9]), writeFloat@str(BANK0[9]), writeLong@str(COMRAM[9]), 

    ?_sprintf	int  size(2) Largest target is 4
		 -> STR_37(CODE[4]), STR_36(CODE[4]), STR_35(CODE[4]), STR_34(CODE[4]), 
		 -> STR_33(CODE[4]), STR_32(CODE[4]), STR_31(CODE[4]), STR_29(CODE[4]), 
		 -> STR_28(CODE[4]), STR_27(CODE[4]), STR_26(CODE[4]), STR_25(CODE[4]), 
		 -> STR_24(CODE[4]), STR_23(CODE[4]), STR_16(CODE[4]), STR_15(CODE[4]), 
		 -> STR_14(CODE[4]), STR_13(CODE[4]), STR_12(CODE[4]), STR_11(CODE[4]), 
		 -> STR_10(CODE[4]), STR_7(CODE[4]), STR_6(CODE[4]), STR_5(CODE[4]), 
		 -> STR_4(CODE[4]), STR_3(CODE[4]), STR_2(CODE[4]), STR_1(CODE[4]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    S624$_cp	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_38(CODE[7]), sprintf@c(BANK0[1]), STR_37(CODE[4]), STR_36(CODE[4]), 
		 -> STR_35(CODE[4]), STR_34(CODE[4]), STR_33(CODE[4]), STR_32(CODE[4]), 
		 -> STR_31(CODE[4]), STR_29(CODE[4]), STR_28(CODE[4]), STR_27(CODE[4]), 
		 -> STR_26(CODE[4]), STR_25(CODE[4]), STR_24(CODE[4]), STR_23(CODE[4]), 
		 -> STR_16(CODE[4]), STR_15(CODE[4]), STR_14(CODE[4]), STR_13(CODE[4]), 
		 -> STR_12(CODE[4]), STR_11(CODE[4]), STR_10(CODE[4]), STR_7(CODE[4]), 
		 -> STR_6(CODE[4]), STR_5(CODE[4]), STR_4(CODE[4]), STR_3(CODE[4]), 
		 -> STR_2(CODE[4]), STR_1(CODE[4]), 

    _val._str._cp	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_38(CODE[7]), sprintf@c(BANK0[1]), STR_37(CODE[4]), STR_36(CODE[4]), 
		 -> STR_35(CODE[4]), STR_34(CODE[4]), STR_33(CODE[4]), STR_32(CODE[4]), 
		 -> STR_31(CODE[4]), STR_29(CODE[4]), STR_28(CODE[4]), STR_27(CODE[4]), 
		 -> STR_26(CODE[4]), STR_25(CODE[4]), STR_24(CODE[4]), STR_23(CODE[4]), 
		 -> STR_16(CODE[4]), STR_15(CODE[4]), STR_14(CODE[4]), STR_13(CODE[4]), 
		 -> STR_12(CODE[4]), STR_11(CODE[4]), STR_10(CODE[4]), STR_7(CODE[4]), 
		 -> STR_6(CODE[4]), STR_5(CODE[4]), STR_4(CODE[4]), STR_3(CODE[4]), 
		 -> STR_2(CODE[4]), STR_1(CODE[4]), 

    writeString@string	PTR unsigned char  size(2) Largest target is 9
		 -> STR_30(CODE[3]), printRTC@str(BANK0[9]), writeFloat@str(BANK0[9]), writeLong@str(COMRAM[9]), 

    printFn	PTR FTN(unsigned char ,)void  size(2) Largest target is 0
		 -> Absolute function(), printRTC(), printTemp(), 

    dow	PTR const unsigned char [7] size(2) Largest target is 4
		 -> STR_37(CODE[4]), STR_36(CODE[4]), STR_35(CODE[4]), STR_34(CODE[4]), 
		 -> STR_33(CODE[4]), STR_32(CODE[4]), STR_31(CODE[4]), STR_29(CODE[4]), 
		 -> STR_28(CODE[4]), STR_27(CODE[4]), STR_26(CODE[4]), STR_25(CODE[4]), 
		 -> STR_24(CODE[4]), STR_23(CODE[4]), STR_16(CODE[4]), STR_15(CODE[4]), 
		 -> STR_14(CODE[4]), STR_13(CODE[4]), STR_12(CODE[4]), STR_11(CODE[4]), 
		 -> STR_10(CODE[4]), STR_7(CODE[4]), STR_6(CODE[4]), STR_5(CODE[4]), 
		 -> STR_4(CODE[4]), STR_3(CODE[4]), STR_2(CODE[4]), STR_1(CODE[4]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _high_isr in COMRAM

    _high_isr->_printTemp
    _getTemp->___asftadd
    ___lwtoft->___ftpack
    ___ftdiv->___ftpack
    _writeFloat->_sprintf
    _printRTC->_sprintf
    _writeString->_writeChar
    _writeChar->___wmul
    _sprintf->___asftsub
    ___lltoft->___ftpack
    ___fttol->___wmul
    ___asftsub->___ftsub
    ___ftsub->___ftadd
    ___asftmul->___ftmul
    ___asftadd->_fround
    ___ftadd->___ftmul
    _scale->___ftmul
    ___wmul->___awdiv
    ___ftmul->___fttol
    _fround->___ftmul
    _buttons->___awmod
    _update->_writeDigit
    _writeDigit->_log2
    _log2->_hibit
    _spi->_rotate
    ___llmod->___lldiv
    ___awdiv->___awmod
    _dayOfWeek->___llmod
    _dayOfWeek->___wmul
    ___llmod->___lldiv
    _checkDST->_dayOfWeek
    _dayOfWeek->___llmod
    _dayOfWeek->___wmul
    _tick->_daysOfMonth
    _checkDST->_dayOfWeek
    _daysOfMonth->___lwmod
    _daysOfMonth->___lwmod
    _tick->_daysOfMonth

Critical Paths under _main in BANK0

    None.

Critical Paths under _high_isr in BANK0

    _high_isr->_printRTC
    _printTemp->_writeFloat
    _writeFloat->_sprintf

Critical Paths under _main in BANK1

    _setup->_initRTC
    _initRTC->_loadTime
    _startDisp->_setBrightness
    _startDisp->_setTest

Critical Paths under _high_isr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _high_isr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _high_isr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _high_isr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _high_isr in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _high_isr in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _high_isr in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 9     4      5      75
                                             11 BANK1      9     4      5
                              _setup
 ---------------------------------------------------------------------------------
 (1) _setup                                                0     0      0      50
                          _startDisp
                            _initRTC
                           _initTemp
                       _setupButtons
 ---------------------------------------------------------------------------------
 (2) _setupButtons                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _initTemp                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _initRTC                                              1     1      0       6
                                             10 BANK1      1     1      0
                           _loadTime
 ---------------------------------------------------------------------------------
 (3) _loadTime                                            10    10      0       6
                                              0 BANK1     10    10      0
 ---------------------------------------------------------------------------------
 (2) _startDisp                                            1     1      0      44
                                              1 BANK1      1     1      0
                      _setBrightness
                            _setTest
 ---------------------------------------------------------------------------------
 (3) _setTest                                              1     0      1      22
                                              0 BANK1      1     0      1
 ---------------------------------------------------------------------------------
 (3) _setBrightness                                        1     0      1      22
                                              0 BANK1      1     0      1
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _high_isr                                            16    16      0   34922
                                             71 BANK0     16    16      0
                               _tick
                             _update
                            _buttons
                           _printRTC
                          _printTemp
                   Absolute function
 ---------------------------------------------------------------------------------
 (5) Absolute function(Fake)                               1     0      1       0
                                              0 COMRAM     1     0      1
 ---------------------------------------------------------------------------------
 (5) _printTemp                                            7     6      1   18746
                                             93 COMRAM     2     1      1
                                             58 BANK0      5     5      0
                        _writeString
                         _writeFloat
                            _getTemp
                             _lowbit
 ---------------------------------------------------------------------------------
 (6) _lowbit                                              11     7      4      69
                                              0 COMRAM    11     7      4
 ---------------------------------------------------------------------------------
 (6) _getTemp                                             20    17      3    3920
                                             82 COMRAM     4     1      3
                                              0 BANK0     16    16      0
                          ___asftadd
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                           ___lwtoft
                             ___wmul
 ---------------------------------------------------------------------------------
 (7) ___lwtoft                                             5     2      3     231
                                              8 COMRAM     5     2      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (7) ___ftdiv                                             17    11      6     489
                                              8 COMRAM    17    11      6
                           ___ftpack
 ---------------------------------------------------------------------------------
 (6) _writeFloat                                          14    10      4   13739
                                             44 BANK0     14    10      4
                          _countBits
                            _sprintf
                        _writeString
                            _getTemp (ARG)
 ---------------------------------------------------------------------------------
 (5) _printRTC                                            16    15      1   14143
                                             93 COMRAM     1     0      1
                                             58 BANK0     13    13      0
                          _countBits
                            _sprintf
                        _writeString
                            ___lwmod
 ---------------------------------------------------------------------------------
 (7) _writeString                                         10     7      3     859
                                             33 COMRAM    10     7      3
                               _log2
                          _writeChar
                          _countBits
                              _hibit
                             ___wmul
 ---------------------------------------------------------------------------------
 (8) _hibit                                               11     7      4      46
                                              0 COMRAM    11     7      4
 ---------------------------------------------------------------------------------
 (8) _countBits                                            5     1      4      90
                                              0 COMRAM     5     1      4
 ---------------------------------------------------------------------------------
 (8) _writeChar                                            3     1      2     201
                                             30 COMRAM     3     1      2
                        _getFontChar
                               _log2
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (9) _getFontChar                                          3     2      1      66
                                              0 COMRAM     3     2      1
 ---------------------------------------------------------------------------------
 (7) _sprintf                                             54    42     12   12619
                                             87 COMRAM     6     6      0
                                              0 BANK0     44    32     12
                             _fround
                              _scale
                            _isdigit
                        __tdiv_to_l_
                         __div_to_l_
                          ___asftadd
                          ___asftmul
                            ___ftmul
                          ___asftsub
                            ___awdiv
                             ___ftge
                            ___ftneg
                            ___fttol
                            ___lldiv
                            ___llmod
                           ___lltoft
                            ___lwmod
                             ___wmul
 ---------------------------------------------------------------------------------
 (8) ___lltoft                                             9     5      4     278
                                              8 COMRAM     9     5      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (8) ___lldiv                                             14     6      8     162
                                              0 COMRAM    19    11      8
 ---------------------------------------------------------------------------------
 (8) ___fttol                                             15    11      4     252
                                             30 COMRAM    15    11      4
                           ___ftpack (ARG)
                            ___awdiv (ARG)
                            ___awmod (ARG)
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (8) ___ftneg                                              3     0      3      45
                                              0 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (8) ___ftge                                               9     3      6     136
                                              0 COMRAM     9     3      6
 ---------------------------------------------------------------------------------
 (8) ___asftsub                                            5     0      5    1160
                                             82 COMRAM     5     0      5
                            ___ftsub
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (9) ___ftsub                                              6     0      6    1094
                                             76 COMRAM     6     0      6
                            ___ftadd
 ---------------------------------------------------------------------------------
 (8) ___asftmul                                            5     0      5     601
                                             62 COMRAM     5     0      5
                            ___ftmul
 ---------------------------------------------------------------------------------
 (7) ___asftadd                                            5     0      5    1115
                                             77 COMRAM     5     0      5
                             _fround (ARG)
                            ___ftadd
 ---------------------------------------------------------------------------------
 (7) ___ftadd                                             14     8      6    1049
                                             62 COMRAM    14     8      6
                           ___ftpack
                            ___ftmul (ARG)
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (8) ___ftpack                                             8     3      5     209
                                              0 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (8) __div_to_l_                                          13     7      6     446
                                              0 COMRAM    13     7      6
 ---------------------------------------------------------------------------------
 (8) __tdiv_to_l_                                         17    11      6     303
                                              0 COMRAM    17    11      6
 ---------------------------------------------------------------------------------
 (8) _isdigit                                              3     2      1      68
                                              0 COMRAM     3     2      1
 ---------------------------------------------------------------------------------
 (8) _scale                                               15    12      3    1779
                                             62 COMRAM    12     9      3
                            ___ftmul
                            ___awdiv
                            ___awmod
                            ___fttol (ARG)
                             ___wmul
 ---------------------------------------------------------------------------------
 (7) ___wmul                                               6     2      4     159
                                             22 COMRAM     8     4      4
                            ___awdiv (ARG)
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (7) ___ftmul                                             17    11      6     535
                                             45 COMRAM    17    11      6
                           ___ftpack
                            ___awdiv (ARG)
                            ___awmod (ARG)
                            ___fttol (ARG)
                           ___lwtoft (ARG)
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (8) _fround                                              18    15      3    1372
                                             62 COMRAM    15    12      3
                            ___ftmul
                            ___awdiv
                            ___awmod
                             ___wmul
 ---------------------------------------------------------------------------------
 (5) _buttons                                              5     5      0     364
                                              9 COMRAM     5     5      0
                            ___awmod
 ---------------------------------------------------------------------------------
 (5) _update                                               6     6      0     787
                                             24 COMRAM     6     6      0
                         _writeDigit
                                _spi
 ---------------------------------------------------------------------------------
 (6) _writeDigit                                           5     3      2     496
                                             19 COMRAM     5     3      2
                                _spi
                               _log2
                             _rotate
 ---------------------------------------------------------------------------------
 (7) _rotate                                               6     5      1     136
                                              0 COMRAM     6     5      1
 ---------------------------------------------------------------------------------
 (9) _log2                                                 8     4      4      46
                                             11 COMRAM     8     4      4
                              _hibit (ARG)
 ---------------------------------------------------------------------------------
 (6) _spi                                                  8     6      2     157
                                              6 COMRAM     8     6      2
                               _wait
                             _rotate (ARG)
 ---------------------------------------------------------------------------------
 (7) _wait                                                 4     0      4      22
                                              0 COMRAM     4     0      4
 ---------------------------------------------------------------------------------
 (8) ___lwmod                                              6     2      4     159
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (8) ___llmod                                             10     2      8     159
                                             19 COMRAM    11     3      8
                            ___lldiv (ARG)
 ---------------------------------------------------------------------------------
 (9) ___awmod                                              7     3      4     296
                                              0 COMRAM     9     5      4
 ---------------------------------------------------------------------------------
 (8) ___awdiv                                              9     5      4     300
                                              9 COMRAM    13     9      4
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (7) _dayOfWeek                                           11     8      3    1976
                                             30 COMRAM    15    12      3
                            ___awdiv
                            ___awmod
                            ___llmod
                             ___wmul
 ---------------------------------------------------------------------------------
 (8) ___llmod                                             10     2      8     159
                                             19 COMRAM    11     3      8
                            ___lldiv (ARG)
 ---------------------------------------------------------------------------------
 (6) _checkDST                                             8     8      0    5740
                                             45 COMRAM     9     9      0
                               _tick
                          _dayOfWeek
 ---------------------------------------------------------------------------------
 (7) _dayOfWeek                                           11     8      3    1976
                                             30 COMRAM    15    12      3
                            ___awdiv
                            ___awmod
                            ___llmod
                             ___wmul
 ---------------------------------------------------------------------------------
 (5) _tick                                                 2     1      1     882
                                             12 COMRAM     2     1      1
                        _daysOfMonth
                           _checkDST
 ---------------------------------------------------------------------------------
 (6) _checkDST                                             8     8      0    5740
                                             45 COMRAM     9     9      0
                               _tick
                          _dayOfWeek
 ---------------------------------------------------------------------------------
 (6) _daysOfMonth                                          5     2      3     406
                                              7 COMRAM     5     2      3
                            ___lwmod
 ---------------------------------------------------------------------------------
 (8) ___lwmod                                              6     2      4     159
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (6) _daysOfMonth                                          5     2      3     406
                                              7 COMRAM     5     2      3
                            ___lwmod
 ---------------------------------------------------------------------------------
 (5) _tick                                                 2     1      1     882
                                             12 COMRAM     2     1      1
                        _daysOfMonth
                           _checkDST
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _setup
     _startDisp
       _setBrightness
       _setTest
     _initRTC
       _loadTime
     _initTemp
     _setupButtons

 _high_isr (ROOT)
   _tick
     _daysOfMonth
       ___lwmod
     _checkDST
       _dayOfWeek
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___llmod
           ___lldiv (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
   _update
     _writeDigit
       _spi
         _wait
         _rotate (ARG)
       _log2
         _hibit (ARG)
       _rotate
     _spi
       _wait
       _rotate (ARG)
   _buttons
     ___awmod
   _printRTC
     _countBits
     _sprintf
       _fround
         ___ftmul
           ___ftpack
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___fttol (ARG)
             ___ftpack (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       _scale
         ___ftmul
           ___ftpack
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___fttol (ARG)
             ___ftpack (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___fttol (ARG)
           ___ftpack (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       _isdigit
       __tdiv_to_l_
       __div_to_l_
       ___asftadd
         _fround (ARG)
           ___ftmul
             ___ftpack
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___fttol (ARG)
               ___ftpack (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftadd (ARG)
           ___ftpack
           ___ftmul (ARG)
             ___ftpack
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___fttol (ARG)
               ___ftpack (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___lwtoft (ARG)
             ___ftpack
       ___asftmul
         ___ftmul
           ___ftpack
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___fttol (ARG)
             ___ftpack (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftmul
         ___ftpack
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___fttol (ARG)
           ___ftpack (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___asftsub
         ___ftsub
           ___ftadd
             ___ftpack
             ___ftmul (ARG)
               ___ftpack
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___fttol (ARG)
                 ___ftpack (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___lwtoft (ARG)
               ___ftpack
         ___lltoft (ARG)
           ___ftpack
       ___awdiv
         ___awmod (ARG)
       ___ftge
       ___ftneg
       ___fttol
         ___ftpack (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___lldiv
       ___llmod
         ___lldiv (ARG)
       ___lltoft
         ___ftpack
       ___lwmod
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     _writeString
       _log2
         _hibit (ARG)
       _writeChar
         _getFontChar
         _log2
           _hibit (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       _countBits
       _hibit
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     ___lwmod
   _printTemp
     _writeString
       _log2
         _hibit (ARG)
       _writeChar
         _getFontChar
         _log2
           _hibit (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       _countBits
       _hibit
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     _writeFloat
       _countBits
       _sprintf
         _fround
           ___ftmul
             ___ftpack
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___fttol (ARG)
               ___ftpack (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         _scale
           ___ftmul
             ___ftpack
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___fttol (ARG)
               ___ftpack (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___fttol (ARG)
             ___ftpack (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         _isdigit
         __tdiv_to_l_
         __div_to_l_
         ___asftadd
           _fround (ARG)
             ___ftmul
               ___ftpack
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___fttol (ARG)
                 ___ftpack (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftadd (ARG)
             ___ftpack
             ___ftmul (ARG)
               ___ftpack
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___fttol (ARG)
                 ___ftpack (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___lwtoft (ARG)
               ___ftpack
         ___asftmul
           ___ftmul
             ___ftpack
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___fttol (ARG)
               ___ftpack (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftmul
           ___ftpack
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___fttol (ARG)
             ___ftpack (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___asftsub
           ___ftsub
             ___ftadd
               ___ftpack
               ___ftmul (ARG)
                 ___ftpack
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___fttol (ARG)
                   ___ftpack (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___lwtoft (ARG)
                 ___ftpack
           ___lltoft (ARG)
             ___ftpack
         ___awdiv
           ___awmod (ARG)
         ___ftge
         ___ftneg
         ___fttol
           ___ftpack (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___lldiv
         ___llmod
           ___lldiv (ARG)
         ___lltoft
           ___ftpack
         ___lwmod
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       _writeString
         _log2
           _hibit (ARG)
         _writeChar
           _getFontChar
           _log2
             _hibit (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         _countBits
         _hibit
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       _getTemp (ARG)
         ___asftadd
           _fround (ARG)
             ___ftmul
               ___ftpack
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___fttol (ARG)
                 ___ftpack (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftadd (ARG)
             ___ftpack
             ___ftmul (ARG)
               ___ftpack
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___fttol (ARG)
                 ___ftpack (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___lwtoft (ARG)
               ___ftpack
         ___ftadd
           ___ftpack
           ___ftmul (ARG)
             ___ftpack
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___fttol (ARG)
               ___ftpack (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___ftdiv
           ___ftpack
         ___ftmul
           ___ftpack
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___fttol (ARG)
             ___ftpack (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___lwtoft
           ___ftpack
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     _getTemp
       ___asftadd
         _fround (ARG)
           ___ftmul
             ___ftpack
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___fttol (ARG)
               ___ftpack (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftadd (ARG)
           ___ftpack
           ___ftmul (ARG)
             ___ftpack
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___fttol (ARG)
               ___ftpack (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___lwtoft (ARG)
             ___ftpack
       ___ftadd
         ___ftpack
         ___ftmul (ARG)
           ___ftpack
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___fttol (ARG)
             ___ftpack (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___lwtoft (ARG)
           ___ftpack
       ___ftdiv
         ___ftpack
       ___ftmul
         ___ftpack
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___fttol (ARG)
           ___ftpack (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___lwtoft
         ___ftpack
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     _lowbit
   Absolute function(Fake)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0       0      21        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100     14      2B       7       16.8%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     57      97       5       94.4%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     5F      5F       1      100.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0      13       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     121      20        0.0%
DATA                 0      0     134       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.20 build 52243 
Symbol Table                                                                                   Thu Nov 14 09:27:34 2013

           ___asftadd@f2 0050            ___asftadd@f1p 004E                       _GO 007E11  
           ___awdiv@sign 0014      ___wmul@multiplicand 0019             ___asftmul@f2 0041  
           ___asftsub@f2 0055             ___ftadd@exp1 004C             ___ftadd@exp2 004B  
           ___ftadd@sign 004A                      _GIE 007F97                      _dow 00DE  
                    _spi 3332             ___awmod@sign 0009                      prod 000FF3  
                    tosl 000FFD                      wreg 000FE8             __CFG_FOSC$HS 000000  
          ___asftmul@f1p 003F              _sprintf$639 006F            ___asftsub@f1p 0053  
           ___ftdiv@cntr 0014             ___ftdiv@sign 0019                     l4545 3728  
                   l4549 3762                     ?_spi 0007                     STR_1 7FF4  
                   STR_2 7FF0                     STR_3 7FE0                     STR_4 7FF8  
                   STR_5 7FEC                     STR_6 7FE4                     STR_7 7FE8  
                   STR_8 7FDB                     STR_9 7FD6                     _LATB 000F8A  
                   u2445 3D74                     u2446 3D7A                     _PEIE 007F96  
                   i2l80 221C                     i2l81 2218                     i2l82 221C  
                   i2l75 219A                     i2l76 2196                     i2l77 213A  
                   i2l78 2190                     i2l79 218E                     _TMR0 000FD6  
                   _TMR1 000FCE    __end_of_setBrightness 3D64                     _date 010D  
                   _log2 3A1E                     _main 370A             ___ftpack@arg 0001  
                   _menu 00DD             ___ftpack@exp 0004                     _tick 305E  
                   _wait 3D82                     fsr0h 000FEA                     fsr1h 000FE2  
                   indf0 000FEF                     fsr0l 000FE9                     fsr2h 000FDA  
                   fsr1l 000FE1                     indf2 000FDF                     fsr2l 000FD9  
                   pclat 000FFA                     prodh 000FF4                     prodl 000FF3  
                   start 0018             _sprintf$1281 006C             ___ftmul@cntr 003D  
         writeString@cnt 002B             ___ftmul@sign 003E             ___fttol@exp1 002D  
           ___fttol@lval 0029                    ??_spi 0009            __CFG_PLLDIV$4 000000  
                  ?_log2 000C                    ?_main 0122          __end_of___awdiv 358A  
                  _ADRES 000FC3          __end_of___ftadd 2602                    STR_20 7FB3  
                  STR_21 7FC2                    STR_30 7FFC                    STR_22 7F95  
                  STR_31 7FF4                    STR_32 7FF0                    ?_tick 000D  
                  STR_17 7FA9                    STR_33 7FE0                    STR_18 7FB3  
                  STR_34 7FF8                    STR_19 7FA4                    STR_35 7FEC  
                  STR_36 7FE4          __end_of___awmod 370A                    STR_37 7FE8  
                  STR_38 7FCF                    ?_wait 0001          __end_of___ftdiv 2D96  
        __end_of___ftneg 3D20          __end_of___lldiv 3610          __end_of___ftmul 2C98  
                  _T0CON 000FD5          ___awdiv@divisor 000C                    _T1CON 000FCD  
        __end_of___llmod 3856          __end_of___ftsub 3C4E          __end_of___fttol 305E  
                  _LATA1 007C49                    _LATA3 007C4B                    _LATA4 007C4C  
                  _LATA5 007C4D          __end_of___lwmod 3AAE                    i2l300 2394  
                  i2l125 2058                    i2l311 1BCA                    i2l163 33B4  
                  i2l139 1434                    i2l430 2EC8                    i2l191 27A6  
                  i2l432 2EFA                    i2l249 328E                    i2l169 3A1C  
                  i2l290 22EC                    i2l426 2E96                    i2l291 22FC  
                  i2l292 230C                    i2l428 2EB0                    i2l285 312A  
                  i2l269 2A64                    i2l293 231C                    i2l453 3878  
                  i2l365 2818                    i2l294 232C                    i2l295 233C  
                  i2l447 3CC4                    i2l296 234C                    i2l297 235C  
                  i2l298 236C                    i2l554 0BC4                    i2l538 02A8  
                  i2l469 3A40                    i2l902 2E88                    i2l911 2E78  
                  i2l904 2DF4                    i2l593 0A2C                    i2l499 1884  
                  i2l943 31E2                    i2l980 249E          ___awdiv@counter 0013  
                  i2l981 2600                    i2l984 24C8                    i2l995 256C  
          __CFG_USBDIV$2 000000                    _TRISB 000F93            __CFG_PWRT$OFF 000000  
            _writeString 2602             ___lltoft@exp 0011          __end_of_getTemp 293E  
                  _nRBPU 007F8F          __end_of_initRTC 39D0                    _hibit 3856  
        __end_of_dpowers 7F1F                    _pow10 7F1F                    _scale 1436  
        __end_of_isdigit 3D44          __end_of_buttons 2F7E            ___ftpack@sign 0005  
                  _setup 3CD4          __end_of_setTest 3D82                    pclath 000FFA  
                  tablat 000FF5                    plusw2 000FDB                    status 000FD8  
        __end_of_sprintf 0FAE          __initialization 3AAE          writeString@bits 0029  
           __end_of_log2 3A68             __end_of_main 377E             __end_of_tick 312C  
           __end_of_wait 3DA0     __size_of_daysOfMonth 00AC           printTemp@units 009E  
                 ??_log2 0010                   ??_main 0127            ___fttol@sign1 0028  
                 ??_tick 000E                   ??_wait 0005            __activetblptr 000002  
   __size_of_getFontChar 020E     __size_of__tdiv_to_l_ 0122                   ?_hibit 0001  
                 _ADCON0 000FC2                   _ADCON1 000FC1                   _ADCON2 000FC0  
       ___llmod@dividend 0014                   ?_scale 003F         ___awdiv@dividend 000A  
                 ?_setup 0001         __end_of___ftpack 31E4         __end_of___lltoft 391E  
                 i2l1020 2B86                   i2l1004 2588                   i2l1012 2D94  
                 i2l1014 2D3E                   i2l1023 2B24                   i2l1015 2D64  
                 i2l1044 2C96                   i2l1108 35FE                   i2l1029 2B76  
                 i2l1118 3844                   i2l1038 34F8                   i2l1054 3D12  
                 i2l1064 305C                   i2l1187 3AA4                   i2l5003 2F1E  
                 i2l5005 2F74                   i2l6001 0CFE                   i2l5051 31E6  
                 i2l6011 0D6C                   i2l5133 3516                   i2l6005 0D3A  
                 i2l6101 1A92                   i2l5071 323E                   i2l5055 31EA  
                 i2l5311 3060                   i2l5047 3A30                   i2l6023 0E02  
                 i2l6103 1AF8                   i2l6111 1B70                   i2l5065 323A  
                 i2l5225 23A6                   i2l5145 3540                   i2l5161 3572  
                 i2l6033 0E48                   i2l6041 0E74                   i2l6025 0E10  
                 i2l6017 0DB2                   i2l5059 31EE                   i2l5075 3242  
                 i2l5331 30E0                   i2l5315 307A                   i2l5227 23F0  
                 i2l5219 22DC                   i2l5147 3548                   i2l5139 3526  
                 i2l5251 1E00                   i2l5243 1D28                   i2l6043 0E80  
                 i2l6019 0DC0                   i2l6115 1B86                   i2l6131 2088  
                 i2l5165 3580                   i2l5157 3568                   i2l5149 354C  
                 i2l5181 3836                   i2l5173 3802                   i2l5261 2BB4  
                 i2l5413 1580                   i2l6061 0F66                   i2l4621 1E74  
                 i2l4613 1E52                   i2l5093 2CFC                   i2l6109 1B5E  
                 i2l6141 20C0                   i2l6133 2090                   i2l5335 30FA  
                 i2l5327 30B6                   i2l5319 3094                   i2l5175 380E  
                 i2l5351 0FFE                   i2l5431 178E                   i2l5423 164A  
                 i2l6055 0ED2                   i2l6063 0F7C                   i2l5087 2CC4  
                 i2l4711 37A2                   i2l6151 2162                   i2l6143 20D6  
                 i2l6135 2098                   i2l5337 3104                   i2l5177 3812  
                 i2l6321 13DA                   i2l5353 1016                   i2l5281 2C22  
                 i2l5521 2FAA                   i2l6049 0EA8                   i2l6065 0FA0  
                 i2l4641 1E88                   i2l4633 1E80                   i2l4625 1E78  
                 i2l4617 1E70                   i2l4609 1E4E                   i2l6161 21AA  
                 i2l6153 2190                   i2l6145 20E6                   i2l6137 209C  
                 i2l6323 13E4                   i2l5355 102E                   i2l5363 107C  
                 i2l5291 2C4E                   i2l5267 2BEC                   i2l5419 163C  
                 i2l4731 3D3C                   i2l4803 2DAE                   i2l5507 25DC  
                 i2l5187 38C4                   i2l6091 19FE                   i2l6083 18DC  
                 i2l6171 21FC                   i2l6163 21AE                   i2l6147 210E  
                 i2l6155 2196                   i2l6139 20A4                   i2l5613 2A40  
                 i2l5605 29F8                   i2l4901 36D4                   i2l6325 13EE  
                 i2l6317 10CC                   i2l5357 1046                   i2l5365 1400  
                 i2l5349 0FC8                   i2l5285 2C32                   i2l5437 1856  
                 i2l4741 2A92                   i2l5189 38D0                   i2l4637 1E84  
                 i2l4629 1E7C                   i2l6085 18E8                   i2l6173 2218  
                 i2l6165 21B6                   i2l6149 213A                   i2l6157 219A  
                 i2l6327 13F8                   i2l6319 13D0                   i2l5359 105E  
                 i2l5295 2C5E                   i2l4823 2E24                   i2l5471 2508  
                 i2l5455 24D6                   i2l5551 3032                   i2l5543 300E  
                 i2l4647 1E8C                   i2l6087 18FE                   i2l6079 189A  
                 i2l6167 21F0                   i2l6159 21A2                   i2l5617 2A52  
                 i2l4913 3700                   i2l4905 36E8                   i2l4673 3976  
                 i2l4761 2AFC                   i2l4833 2E40                   i2l5481 2538  
                 i2l5449 24AC                   i2l4921 349A                   i2l5553 3036  
                 i2l5705 0170                   i2l6089 194E                   i2l6097 1A64  
                 i2l6169 21F4                   i2l4659 3D82                   i2l4747 2ABE  
                 i2l4843 2E68                   i2l4851 313C                   i2l5491 2566  
                 i2l5483 253E                   i2l4931 34F6                   i2l5539 2FFE  
                 i2l5731 0264                   i2l5723 022A                   i2l6099 1A7C  
                 i2l4909 36F2                   i2l4781 2B4E                   i2l4845 2E74  
                 i2l4837 2E50                   i2l5477 2526                   i2l4925 34CA  
                 i2l5557 304C                   i2l5549 3026                   i2l5901 090E  
                 i2l5741 02B8                   i2l5733 026C                   i2l5717 01D6  
                 i2l5725 0246                   i2l4685 3CB4                   i2l4693 3868  
                 i2l5653 2886                   i2l5637 27B6                   i2l4863 3188  
                 i2l4855 314A                   i2l5479 2530                   i2l5831 068C  
                 i2l5823 062C                   i2l5815 05CA                   i2l5751 032E  
                 i2l5743 02C0                   i2l5719 01E6                   i2l5671 0032  
                 i2l5591 27A2                   i2l4777 2B3E                   i2l4865 31A6  
                 i2l4857 3154                   i2l5497 25A4                   i2l5489 255C  
                 i2l4945 35B0                   i2l5761 0386                   i2l5745 02FE  
                 i2l5729 025C                   i2l5585 2742                   i2l5569 264C  
                 i2l4787 2B66                   i2l4867 31B0                   i2l4859 3172  
                 i2l4947 35BC                   i2l5931 0A30                   i2l5843 070A  
                 i2l5827 0654                   i2l5771 03F6                   i2l5763 039E  
                 i2l5755 0362                   i2l5683 0084                   i2l4893 36B6  
                 i2l4973 3A9A                   i2l4965 3A7A                   i2l4789 2B72  
                 i2l4797 2DA2                   i2l4957 35F0                   i2l4949 35C0  
                 i2l5925 09F6                   i2l5909 094A                   i2l5917 09C8  
                 i2l5861 07E0                   i2l5757 0372                   i2l5781 0436  
                 i2l5677 0058                   i2l5589 27A0                   i2l4967 3A82  
                 i2l5943 0ABA                   i2l5919 09D8                   i2l5855 0782  
                 i2l5839 06E4                   i2l5775 0414                   i2l5783 0484  
                 i2l5679 0076                   i2l4897 36C8                   i2l4889 36AA  
                 i2l4969 3A86                   i2l4993 2ECC                   i2l5961 0BB6  
                 i2l5953 0B88                   i2l5769 03DC                   i2l5689 00C2  
                 i2l5697 0130                   i2l4899 36D0                   i2l5955 0B98  
                 i2l5939 0A68                   i2l5883 08B2                   i2l5875 083A  
                 i2l4989 2EA8                   i2l5893 08DA                   i2l5789 04A6  
                 i2l4999 2F0E                   i2l5983 0C78                   i2l5967 0BF0  
                 i2l5895 08F0                   i2l5887 08BC                   i2l5879 088C  
                 i2l5799 0510                   i2l5977 0C54                   i2l5997 0CD2  
       __end_of___lwtoft 3CAC         daysOfMonth@month 0008                   _TMR0IE 007F95  
                 _TMR0IF 007F92                   _TMR1IE 007CE8                   _TMR1IF 007CF0  
                 _TMR0ON 007EAF                   _TMR1ON 007E68         __end_of_checkDST 2A66  
                 _TRISA1 007C91                   _TRISA2 007C92                   _TRISA3 007C93  
                 _TRISA4 007C94                   _TRISA5 007C95             _checkDST$400 0036  
          dayOfWeek@year 001F         __end_of__powers_ 7F95         __end_of_lcd_font 7EF7  
       __end_of_high_isr 2256                   ___ftge 346A                   ___wmul 3BDE  
              ??___awdiv 000E                ??___ftadd 0045                ??___awmod 0005  
              ??___ftdiv 000F                ??___ftneg 0004                ??___lldiv 0009  
              ??___ftmul 0034                ??___llmod 001C                ??___ftsub 0053  
              ??___fttol 0023                ??___lwmod 0005         __end_of_loadTime 3DC8  
       __end_of_initTemp 3DC6                   _fround 1BCC                   clear_0 3AB4  
                 clear_1 3AC0         ___awdiv@quotient 0015          ___awmod@divisor 0003  
                 _screen 0100                   _lowbit 377E          ___awmod@counter 0008  
                 hibit@x 0001                ??_getTemp 0056                   _update 0FAE  
                 _rotate 391E    ___ftmul@f3_as_product 003A                ??_initRTC 0121  
              ??_isdigit 0002                ??_buttons 000A             countBits@ret 0005  
           countBits@num 0001         __end_of_printRTC 1BCC                   spi@cnt 000E  
           __mediumconst 7ECC                ??_setTest 0118                   tblptrh 000FF7  
                 tblptrl 000FF6                   tblptru 000FF8                ??_sprintf 0058  
     __size_of___asftadd 003C       __size_of___asftmul 003C       __size_of___asftsub 003C  
             __accesstop 0060  __end_of__initialization 3AE6          __CFG_PBADEN$OFF 000000  
             ___ftadd@f1 003F               ___ftadd@f2 0042               ___ftge@ff1 0001  
             ___ftge@ff2 0004               ___ftdiv@f1 0009               ___ftdiv@f2 000C  
             ___ftdiv@f3 0015               ___ftneg@f1 0001               ___ftmul@f1 002E  
             ___ftmul@f2 0031               ___ftsub@f1 004D               ___ftsub@f2 0050  
             ___fttol@f1 001F           __pcstackCOMRAM 0001             __pidataBANK0 3DA0  
     __size_of_dayOfWeek 01E0               ___lltoft@c 0009            __end_of_hibit 38BA  
          __end_of_pow10 7F47            __end_of_scale 1886            __end_of_setup 3CFA  
             ___lwtoft@c 0009          printTemp@digits 005E               __div_to_l_ 2D96  
                ??_hibit 0005          __div_to_l_@exp1 000D          __div_to_l_@cntr 000C  
           sprintf@integ 0077                  ??_scale 0042          __div_to_l_@quot 0008  
           sprintf@width 0083                  ??_setup 0122               __pbssBANK0 00B7  
             __pbssBANK1 0100       __size_of_countBits 0028            __div_to_l_@f1 0001  
          __div_to_l_@f2 0004                  ?___ftge 0001                  ?___wmul 0017  
      __end_of___asftadd 3BA4                  ?_fround 003F        __end_of___asftmul 3B68  
      __end_of___asftsub 3B2C                ?___ftpack 0001                  ?_lowbit 0001  
              ?___lltoft 0009                  ?_update 0001                  ?_rotate 0001  
              ?___lwtoft 0009                ?_checkDST 0001             ?_writeString 0022  
     __size_of_printTemp 009A       __size_of_startDisp 00A2        __end_of_dayOfWeek 2436  
              ?_high_isr 0001                ?_loadTime 0001                ?_initTemp 0001  
     __size_of_writeChar 003A        __end_of__npowers_ 7F6E                  __Hparam 0000  
         dayOfWeek@month 0020               _scale$1280 0048                  __Lparam 0000  
              ?_printRTC 005E          __size_of___ftge 0090                  ___awdiv 34FA  
                ___ftadd 2436                  ___awmod 368E                  ___ftdiv 2C98  
                ___ftneg 3CFA                  ___lldiv 358A          __size_of___wmul 003A  
                ___ftmul 2B88                  ___llmod 37EC                  ___ftsub 3C18  
                ___fttol 2F7E                  ___lwmod 3A68        __end_of_countBits 3CD4  
                __pcinit 3AAE               ??___ftpack 0006          __size_of_fround 0280  
                __ramtop 0800               ??___lltoft 000D          __size_of_lowbit 006E  
                _getTemp 27A8                  __ptext0 370A                  __ptext1 3CD4  
                __ptext2 3C4E                  __ptext3 3DB8                  __ptext4 397A  
                __ptext5 3DC6                  __ptext6 3290                  __ptext7 3D64  
                __ptext8 3D44          __size_of_update 0488          __size_of_rotate 005C  
             ??___lwtoft 000C   __size_of_setBrightness 0020              ?__div_to_l_ 0001  
                _initRTC 397A                  _dpowers 7EF7               ??_checkDST 002E  
                _isdigit 3D20                  _buttons 2E8A             __size_of_spi 009E  
       ___awmod@dividend 0001                  _setTest 3D64                  _printFn 00F5  
                log2@num 000C                  main@cnt 0127                  _sprintf 001C  
             ??_high_isr 00A7           __pintcode_body 205A     end_of_initialization 3AE6  
             ??_loadTime 0117            _tmr0BigCounts 00D5               ??_initTemp 0117  
          __Lmediumconst 7ECC                  int_func 205A             writeChar@dig 0021  
                tick@val 000D                  spi@addr 0007                  spi@data 0008  
        ___lldiv@divisor 0005                  lowbit@x 0001                  spi@send 000C  
        ___lldiv@counter 0013        __end_of_printTemp 346A            ??_daysOfMonth 000B  
             ??_printRTC 009A                  postdec1 000FE5                  postdec2 000FDD  
                postinc0 000FEE                  postinc1 000FE6                  postinc2 000FDE  
          ?_setupButtons 0001        __end_of_startDisp 3332           __tdiv_to_l_@f1 0001  
         __tdiv_to_l_@f2 0004            ??_getFontChar 0002            ??__tdiv_to_l_ 0007  
             getTemp@cnt 006F        __end_of_writeChar 3BDE              printRTC@str 009C  
           writeString@i 002A              ___ftdiv@exp 0018            _setBrightness 3D44  
    __size_of__div_to_l_ 00F4              ___ftmul@exp 0039           ??_setupButtons 0117  
      writeString@digits 0022               _writeDigit 39D0               _writeFloat 3610  
         __end_of___ftge 34FA           __end_of___wmul 3C18        writeString@string 0023  
         __end_of_fround 1E4C      __end_of_daysOfMonth 3290           __end_of_lowbit 37EC  
         __end_of_update 1436           __end_of_rotate 397A      start_initialization 3AAE  
          lowbit@log2Val 0008      __end_of_getFontChar 205A      __end_of__tdiv_to_l_ 2B88  
            __end_of_spi 33D0     __size_of_writeString 01A6           ?_setBrightness 0117  
        ___llmod@divisor 0018          ___llmod@counter 001E          daysOfMonth@year 0009  
           dayOfWeek@day 0021             dayOfWeek@tmp 002A                 ??___ftge 0007  
               ??___wmul 001B            sprintf@vd_641 0075              __pdataBANK0 00DE  
             buttons@cnt 000E                 ??_fround 0042                 ??_lowbit 0005  
               ??_update 0019                 ??_rotate 0002               fround@prec 003F  
      __size_of___ftpack 00B8                ___asftadd 3B68                ___asftmul 3B2C  
              ___asftsub 3AF0         writeFloat@digits 008C        __size_of___lltoft 0064  
      __size_of___lwtoft 002C            __pcstackBANK0 0060            __pcstackBANK1 0117  
      __size_of_checkDST 0128      __end_of__stringdata 7FFF        __size_of_high_isr 224E  
            sprintf@_val 0088              sprintf@flag 007E              sprintf@fval 0080  
            sprintf@prec 0085                _dayOfWeek 2256                __pnvBANK0 00F5  
      __size_of_loadTime 0002        __size_of_initTemp 000E                __pintcode 0008  
          __pmediumconst 7ECC              _daysOfMonth 31E4                 ?___awdiv 000A  
               ?___ftadd 003F                 ?___awmod 0001                 ?___ftdiv 0009  
            ?_writeDigit 0014                 ?___ftneg 0001                 ?___lldiv 0001  
               ?___ftmul 002E                 ?___llmod 0014                 ?___ftsub 004D  
              __npowers_ 7F47                 ?___fttol 001F              ?_writeFloat 008C  
               ?___lwmod 0001      getTemp@oldTempsTemp 0060        __size_of_printRTC 0346  
            _getFontChar 1E4C              __tdiv_to_l_ 2A66                 ?_getTemp 0053  
           ??__div_to_l_ 0007                 ?_initRTC 0001               ?___asftadd 004E  
              _countBits 3CAC                 ?_isdigit 0001                 ?_buttons 0001  
             ?___asftmul 003F               ?___asftsub 0053          _rtc_small_ticks 00DB  
               ?_setTest 0117     __end_of_setupButtons 3C80           __size_of_hibit 0064  
               ?_sprintf 0060           __size_of_scale 0450          ??_setBrightness 0118  
         __size_of_setup 0026           ___wmul@product 001D               ?_dayOfWeek 001F  
          getFontChar@ch 0001              writeChar@ch 0020                 i2u300_44 2F2E  
               i2u300_45 2F2A                 i2u310_40 2CB6                 i2u310_45 2CAE  
               i2u303_44 3370                 i2u303_45 336A                 i2u312_40 2CE2  
               i2u304_45 337C                 i2u312_45 2CDA                 i2u304_46 3382  
               i2u313_40 2CEE                 i2u330_40 2BA6                 i2u330_45 2B9E  
               i2u332_40 2BD2                 i2u332_45 2BCA                 i2u333_40 2BDE  
               i2u261_40 2AB0                 i2u413_40 02F8                 i2u253_44 38A2  
               i2u261_45 2AA8                 i2u253_45 389C                 i2u413_47 02F2  
               i2u247_44 395A                 i2u343_44 0FD8                 i2u247_45 3956  
               i2u343_45 0FD4                 i2u423_45 04E8                 i2u344_40 1072  
               i2u248_44 396A                 i2u256_44 37D4                 i2u248_45 3966  
               i2u256_45 37CE                 i2u344_46 1074                 i2u273_40 2E56  
               i2u353_40 2454                 i2u425_40 0560                 i2u345_44 1090  
               i2u345_45 108A                 i2u353_45 244C                 i2u425_45 0556  
     __end_of__div_to_l_ 2E8A                 i2u266_40 2B54                 i2u354_40 247A  
               i2u346_44 1414                 i2u346_45 140E                 i2u354_45 2472  
               i2u259_40 2A84                 i2u419_40 03CA                 i2u259_45 2A7C  
               i2u419_47 03C0                 i2u374_40 2F9C                 i2u390_40 2798  
               i2u382_44 265C                 i2u374_45 2F94                 i2u382_45 2658  
               i2u390_47 2792                 i2u376_40 2FC8                 i2u384_40 26A2  
               i2u480_40 2162                 i2u480_41 2160                 i2u376_45 2FC0  
               i2u480_45 215A                 i2u384_47 269C                 i2u473_41 361A  
               i2u386_40 26E6                 i2u482_40 21A2                 i2u481_48 2172  
               i2u474_41 1890                 i2u482_41 21A0                 i2u481_49 218C  
               i2u386_47 26E0                 i2u379_40 3014                 i2u483_40 21AA  
               i2u475_40 2090                 i2u483_41 21A8                 i2u475_41 208E  
               i2u484_40 21F0                 i2u476_40 2098                 i2u484_41 21EE  
               i2u476_41 2096                 i2u388_44 272A                 i2u388_45 2724  
               i2u397_40 2A20                 i2u477_40 20C0                 i2u477_41 20BE  
               i2u389_44 2752                 i2u389_45 274E                 i2u397_46 2A22  
               i2u478_40 210E                 i2u478_41 210C                 i2u478_45 2106  
               i2u479_48 211E                 i2u479_49 2138          writeDigit@digit 0014  
              _printTemp 33D0                _startDisp 3290              __stringdata 7F95  
      ___wmul@multiplier 0017               ?_countBits 0001             setTest@state 0117  
              _writeChar 3BA4                copy_data0 3ADA      __size_of_writeDigit 004E  
    __size_of_writeFloat 007E           _printTemp$1277 009A          writeFloat@F5025 00CC  
               __Hrparam 0000                 __Lrparam 0000          loadTime@newDate 0117  
             ?_printTemp 005E         __size_of___awdiv 0090         __size_of___ftadd 01CC  
       __size_of___awmod 007C         __size_of___ftdiv 00FE         __size_of___ftneg 0026  
       __size_of___lldiv 0086         __size_of___ftmul 0110         __size_of___llmod 006A  
       __size_of___ftsub 0036         __size_of___fttol 00E0         __size_of___lwmod 0046  
               ___ftpack 312C              _fround$1278 004B              _fround$1279 0048  
               ___lltoft 38BA               ?_startDisp 0001              _isdigit$914 0003  
               ___lwtoft 3C80         __size_of_getTemp 0196              ??___asftadd 0053  
               _checkDST 293E               sprintf@exp 007C              ??___asftmul 0044  
            ??___asftsub 0058            _printRTC$1276 00A5         __size_of_initRTC 0056  
       __size_of_isdigit 0024         __size_of_buttons 00F4           writeChar@digit 001F  
       __size_of_setTest 001E               ?_writeChar 001F                 __ptext10 1886  
               __ptext11 33D0                 __ptext20 3BA4                 __ptext12 377E  
               __ptext21 1E4C                 __ptext13 27A8                 __ptext30 3B2C  
               __ptext22 001C                 __ptext14 3C80                 __ptext31 3B68  
               __ptext23 38BA                 __ptext15 2C98                 __ptext40 1BCC  
               __ptext32 2436                 __ptext24 358A                 __ptext16 3610  
               __ptext41 2E8A                 __ptext33 312C                 __ptext25 2F7E  
               __ptext17 2602                 __ptext50 368E                 __ptext42 0FAE  
               __ptext34 2D96                 __ptext26 3CFA                 __ptext18 3856  
               __ptext51 34FA                 __ptext43 39D0                 __ptext35 2A66  
               __ptext27 346A                 __ptext19 3CAC                 __ptext52 2256  
               __ptext44 391E                 __ptext36 3D20                 __ptext28 3AF0  
               __ptext53 293E                 __ptext45 3A1E                 __ptext37 1436  
               __ptext29 3C18                 __ptext54 305E                 __ptext46 3332  
               __ptext38 3BDE                 __ptext55 31E4                 __ptext47 3D82  
               __ptext39 2B88                 __ptext56 0000                 __ptext48 3A68  
               __ptext49 37EC                 __powers_ 7F6E                 _lcd_font 7ECC  
               _high_isr 0008         __size_of_sprintf 0F92            _rtc_big_ticks 00D9  
               _loadTime 3DC6                 _initTemp 3DB8                wait@count 0001  
          __size_of_log2 004A            __size_of_main 0074              ??_dayOfWeek 0022  
               _oldTemps 00B7            __size_of_tick 00CE            __size_of_wait 001E  
               _printRTC 1886           writeDigit@segs 0015                 main@argc 0122  
               main@argv 0124    __CFG_CPUDIV$OSC3_PLL4 000000                update@cnt 001E  
  __size_of_setupButtons 0032              ??_countBits 0005                rotate@cnt 0006  
          ??_writeString 0025                rotate@seg 0001                rotate@ret 0005  
               isdigit@c 0001                 scale@scl 003F           writeFloat@bits 0099  
               intlevel2 0000                sprintf@ap 007A         __tdiv_to_l_@exp1 0011  
              sprintf@vd 0073         __tdiv_to_l_@cntr 0010                sprintf@sp 0060  
       __tdiv_to_l_@quot 000C         ___lwmod@dividend 0001         ___lldiv@dividend 0001  
          writeDigit@dig 0017            writeDigit@cnt 0018           writeLong@F5021 00EC  
         printRTC@digits 005E             getTemp@total 006C             ?_daysOfMonth 0008  
           ??_writeDigit 0016             ??_writeFloat 005E             _setupButtons 3C4E  
            ??_printTemp 005F            printRTC@F5061 00C3             ?_getFontChar 0001  
    setBrightness@bright 0117             ?__tdiv_to_l_ 0001              ??_startDisp 0118  
          writeFloat@num 008D            writeFloat@str 0090                 sprintf@c 0087  
               sprintf@f 0062         ___lldiv@quotient 000F          ___lwmod@divisor 0003  
        ___lwmod@counter 0007              getTemp@temp 0069              ??_writeChar 0021  
            log2@log2Val 0010      __end_of_writeString 27A8       __end_of_writeDigit 3A1E  
     __end_of_writeFloat 368E             hibit@log2Val 0008  
