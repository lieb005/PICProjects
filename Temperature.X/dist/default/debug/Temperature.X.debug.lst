

Microchip Technology PIC18 LITE Macro Assembler V1.20 build 52243 
                                                                                               Thu Nov 14 05:37:16 2013

Microchip Technology Omniscient Code Generator (Lite mode) build 52243
     1                           	processor	18F2550
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataBANK0,global,class=CODE,delta=1
     6                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1
     7                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    12                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    13                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    14                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    15                           	psect	text0,global,reloc=2,class=CODE,delta=1
    16                           	psect	text1,global,reloc=2,class=CODE,delta=1
    17                           	psect	text2,global,reloc=2,class=CODE,delta=1
    18                           	psect	text3,global,reloc=2,class=CODE,delta=1
    19                           	psect	text4,global,reloc=2,class=CODE,delta=1
    20                           	psect	text5,global,reloc=2,class=CODE,delta=1
    21                           	psect	text6,global,reloc=2,class=CODE,delta=1
    22                           	psect	text7,global,reloc=2,class=CODE,delta=1
    23                           	psect	text8,global,reloc=2,class=CODE,delta=1
    24                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    25                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    26                           	psect	text10,global,reloc=2,class=CODE,delta=1
    27                           	psect	text11,global,reloc=2,class=CODE,delta=1
    28                           	psect	text12,global,reloc=2,class=CODE,delta=1
    29                           	psect	text13,global,reloc=2,class=CODE,delta=1
    30                           	psect	text14,global,reloc=2,class=CODE,delta=1
    31                           	psect	text15,global,reloc=2,class=CODE,delta=1
    32                           	psect	text16,global,reloc=2,class=CODE,delta=1
    33                           	psect	text17,global,reloc=2,class=CODE,delta=1
    34                           	psect	text18,global,reloc=2,class=CODE,delta=1
    35                           	psect	text19,global,reloc=2,class=CODE,delta=1
    36                           	psect	text20,global,reloc=2,class=CODE,delta=1
    37                           	psect	text21,global,reloc=2,class=CODE,delta=1
    38                           	psect	text22,global,reloc=2,class=CODE,delta=1
    39                           	psect	text23,global,reloc=2,class=CODE,delta=1
    40                           	psect	text24,global,reloc=2,class=CODE,delta=1
    41                           	psect	text25,global,reloc=2,class=CODE,delta=1
    42                           	psect	text26,global,reloc=2,class=CODE,delta=1
    43                           	psect	text27,global,reloc=2,class=CODE,delta=1
    44                           	psect	text28,global,reloc=2,class=CODE,delta=1
    45                           	psect	text29,global,reloc=2,class=CODE,delta=1
    46                           	psect	text30,global,reloc=2,class=CODE,delta=1
    47                           	psect	text31,global,reloc=2,class=CODE,delta=1
    48                           	psect	text32,global,reloc=2,class=CODE,delta=1
    49                           	psect	text33,global,reloc=2,class=CODE,delta=1
    50                           	psect	text34,global,reloc=2,class=CODE,delta=1
    51                           	psect	text35,global,reloc=2,class=CODE,delta=1
    52                           	psect	text36,global,reloc=2,class=CODE,delta=1
    53                           	psect	text37,global,reloc=2,class=CODE,delta=1
    54                           	psect	text38,global,reloc=2,class=CODE,delta=1
    55                           	psect	text39,global,reloc=2,class=CODE,delta=1
    56                           	psect	text40,global,reloc=2,class=CODE,delta=1
    57                           	psect	text41,global,reloc=2,class=CODE,delta=1
    58                           	psect	text42,global,reloc=2,class=CODE,delta=1
    59                           	psect	text43,global,reloc=2,class=CODE,delta=1
    60                           	psect	text44,global,reloc=2,class=CODE,delta=1
    61                           	psect	text45,global,reloc=2,class=CODE,delta=1
    62                           	psect	text46,global,reloc=2,class=CODE,delta=1
    63                           	psect	text47,global,reloc=2,class=CODE,delta=1
    64                           	psect	text48,global,reloc=2,class=CODE,delta=1
    65                           	psect	text49,global,reloc=2,class=CODE,delta=1
    66                           	psect	text50,global,reloc=2,class=CODE,delta=1
    67                           	psect	text51,global,reloc=2,class=CODE,delta=1
    68                           	psect	text52,global,reloc=2,class=CODE,delta=1
    69                           	psect	text53,global,reloc=2,class=CODE,delta=1
    70                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    71                           	psect	text54,global,reloc=2,class=CODE,delta=1
    72                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    73  0000                     
    74                           	psect	idataBANK0
    75  0038F0                     __pidataBANK0:
    76                           	opt stack 0
    77                           
    78                           ;initializer for _dow
    79  0038F0  7DB4               	dw	STR_1& (0+65535)
    80  0038F2  7DB0               	dw	STR_2& (0+65535)
    81  0038F4  7DA0               	dw	STR_3& (0+65535)
    82  0038F6  7DB8               	dw	STR_4& (0+65535)
    83  0038F8  7DAC               	dw	STR_5& (0+65535)
    84  0038FA  7DA4               	dw	STR_6& (0+65535)
    85  0038FC  7DA8               	dw	STR_7& (0+65535)
    86                           
    87                           ;initializer for writeLong@F5021
    88  0038FE  30                 	db	48
    89  0038FF  30                 	db	48
    90  003900  30                 	db	48
    91  003901  30                 	db	48
    92  003902  30                 	db	48
    93  003903  30                 	db	48
    94  003904  30                 	db	48
    95  003905  30                 	db	48
    96  003906  00                 	db	0
    97                           
    98                           	psect	mediumconst
    99  007C8C                     __pmediumconst:
   100                           	opt stack 0
   101  007C8C                     _lcd_font:
   102                           	opt stack 0
   103  007C8C  3F                 	db	63
   104  007C8D  06                 	db	6
   105  007C8E  5B                 	db	91
   106  007C8F  4F                 	db	79
   107  007C90  66                 	db	102
   108  007C91  6D                 	db	109
   109  007C92  7C                 	db	124
   110  007C93  07                 	db	7
   111  007C94  7F                 	db	127
   112  007C95  67                 	db	103
   113  007C96  00                 	db	0
   114  007C97  00                 	db	0
   115  007C98  61                 	db	97
   116  007C99  48                 	db	72
   117  007C9A  00                 	db	0
   118  007C9B  53                 	db	83
   119  007C9C  00                 	db	0
   120  007C9D  77                 	db	119
   121  007C9E  7C                 	db	124
   122  007C9F  58                 	db	88
   123  007CA0  5E                 	db	94
   124  007CA1  79                 	db	121
   125  007CA2  71                 	db	113
   126  007CA3  6F                 	db	111
   127  007CA4  74                 	db	116
   128  007CA5  10                 	db	16
   129  007CA6  0F                 	db	15
   130  007CA7  68                 	db	104
   131  007CA8  38                 	db	56
   132  007CA9  37                 	db	55
   133  007CAA  54                 	db	84
   134  007CAB  5C                 	db	92
   135  007CAC  73                 	db	115
   136  007CAD  67                 	db	103
   137  007CAE  50                 	db	80
   138  007CAF  6D                 	db	109
   139  007CB0  78                 	db	120
   140  007CB1  1C                 	db	28
   141  007CB2  1C                 	db	28
   142  007CB3  7E                 	db	126
   143  007CB4  76                 	db	118
   144  007CB5  6E                 	db	110
   145  007CB6  5B                 	db	91
   146  007CB7                     __end_of_lcd_font:
   147                           	opt stack 0
   148  007CB7                     _dpowers:
   149                           	opt stack 0
   150  007CB7  0001               	dw	1
   151  007CB9  0000               	dw	0
   152  007CBB  000A               	dw	10
   153  007CBD  0000               	dw	0
   154  007CBF  0064               	dw	100
   155  007CC1  0000               	dw	0
   156  007CC3  03E8               	dw	1000
   157  007CC5  0000               	dw	0
   158  007CC7  2710               	dw	10000
   159  007CC9  0000               	dw	0
   160  007CCB  86A0               	dw	34464
   161  007CCD  0001               	dw	1
   162  007CCF  4240               	dw	16960
   163  007CD1  000F               	dw	15
   164  007CD3  9680               	dw	38528
   165  007CD5  0098               	dw	152
   166  007CD7  E100               	dw	57600
   167  007CD9  05F5               	dw	1525
   168  007CDB  CA00               	dw	51712
   169  007CDD  3B9A               	dw	15258
   170  007CDF                     __end_of_dpowers:
   171                           	opt stack 0
   172  007CDF                     _pow10:
   173                           	opt stack 0
   174  007CDF  0001               	dw	1
   175  007CE1  0000               	dw	0
   176  007CE3  000A               	dw	10
   177  007CE5  0000               	dw	0
   178  007CE7  0064               	dw	100
   179  007CE9  0000               	dw	0
   180  007CEB  03E8               	dw	1000
   181  007CED  0000               	dw	0
   182  007CEF  2710               	dw	10000
   183  007CF1  0000               	dw	0
   184  007CF3  86A0               	dw	34464
   185  007CF5  0001               	dw	1
   186  007CF7  4240               	dw	16960
   187  007CF9  000F               	dw	15
   188  007CFB  9680               	dw	38528
   189  007CFD  0098               	dw	152
   190  007CFF  E100               	dw	57600
   191  007D01  05F5               	dw	1525
   192  007D03  CA00               	dw	51712
   193  007D05  3B9A               	dw	15258
   194  007D07                     __end_of_pow10:
   195                           	opt stack 0
   196  007D07                     __npowers_:
   197                           	opt stack 0
   198  007D07  00                 	db	0
   199  007D08  80                 	db	128
   200  007D09  3F                 	db	63
   201  007D0A  CD                 	db	205
   202  007D0B  CC                 	db	204
   203  007D0C  3D                 	db	61
   204  007D0D  D7                 	db	215
   205  007D0E  23                 	db	35
   206  007D0F  3C                 	db	60
   207  007D10  12                 	db	18
   208  007D11  83                 	db	131
   209  007D12  3A                 	db	58
   210  007D13  B7                 	db	183
   211  007D14  D1                 	db	209
   212  007D15  38                 	db	56
   213  007D16  C6                 	db	198
   214  007D17  27                 	db	39
   215  007D18  37                 	db	55
   216  007D19  38                 	db	56
   217  007D1A  86                 	db	134
   218  007D1B  35                 	db	53
   219  007D1C  C0                 	db	192
   220  007D1D  D6                 	db	214
   221  007D1E  33                 	db	51
   222  007D1F  CC                 	db	204
   223  007D20  2B                 	db	43
   224  007D21  32                 	db	50
   225  007D22  70                 	db	112
   226  007D23  89                 	db	137
   227  007D24  30                 	db	48
   228  007D25  E7                 	db	231
   229  007D26  DB                 	db	219
   230  007D27  2E                 	db	46
   231  007D28  E5                 	db	229
   232  007D29  3C                 	db	60
   233  007D2A  1E                 	db	30
   234  007D2B  42                 	db	66
   235  007D2C  A2                 	db	162
   236  007D2D  0D                 	db	13
   237  007D2E                     __end_of__npowers_:
   238                           	opt stack 0
   239  007D2E                     __powers_:
   240                           	opt stack 0
   241  007D2E  00                 	db	0
   242  007D2F  80                 	db	128
   243  007D30  3F                 	db	63
   244  007D31  00                 	db	0
   245  007D32  20                 	db	32
   246  007D33  41                 	db	65
   247  007D34  00                 	db	0
   248  007D35  C8                 	db	200
   249  007D36  42                 	db	66
   250  007D37  00                 	db	0
   251  007D38  7A                 	db	122
   252  007D39  44                 	db	68
   253  007D3A  40                 	db	64
   254  007D3B  1C                 	db	28
   255  007D3C  46                 	db	70
   256  007D3D  50                 	db	80
   257  007D3E  C3                 	db	195
   258  007D3F  47                 	db	71
   259  007D40  24                 	db	36
   260  007D41  74                 	db	116
   261  007D42  49                 	db	73
   262  007D43  97                 	db	151
   263  007D44  18                 	db	24
   264  007D45  4B                 	db	75
   265  007D46  BC                 	db	188
   266  007D47  BE                 	db	190
   267  007D48  4C                 	db	76
   268  007D49  6B                 	db	107
   269  007D4A  6E                 	db	110
   270  007D4B  4E                 	db	78
   271  007D4C  03                 	db	3
   272  007D4D  15                 	db	21
   273  007D4E  50                 	db	80
   274  007D4F  79                 	db	121
   275  007D50  AD                 	db	173
   276  007D51  60                 	db	96
   277  007D52  F3                 	db	243
   278  007D53  49                 	db	73
   279  007D54  71                 	db	113
   280  007D55                     __end_of__powers_:
   281                           	opt stack 0
   282  0000                     _ADRES	set	4035
   283  0000                     _TMR0	set	4054
   284  0000                     _TMR1	set	4046
   285  0000                     _ADCON0	set	4034
   286  0000                     _ADCON1	set	4033
   287  0000                     _ADCON2	set	4032
   288  0000                     _LATB	set	3978
   289  0000                     _T0CON	set	4053
   290  0000                     _T1CON	set	4045
   291  0000                     _TRISB	set	3987
   292  0000                     _GIE	set	32663
   293  0000                     _GO	set	32273
   294  0000                     _LATA1	set	31817
   295  0000                     _LATA3	set	31819
   296  0000                     _LATA4	set	31820
   297  0000                     _LATA5	set	31821
   298  0000                     _PEIE	set	32662
   299  0000                     _TMR0IE	set	32661
   300  0000                     _TMR0IF	set	32658
   301  0000                     _TMR0ON	set	32431
   302  0000                     _TMR1IE	set	31976
   303  0000                     _TMR1IF	set	31984
   304  0000                     _TMR1ON	set	32360
   305  0000                     _TRISA1	set	31889
   306  0000                     _TRISA2	set	31890
   307  0000                     _TRISA3	set	31891
   308  0000                     _TRISA4	set	31892
   309  0000                     _TRISA5	set	31893
   310  0000                     _nRBPU	set	32655
   311  007D55                     __stringdata:
   312                           	opt stack 0
   313  007D55                     STR_22:
   314  007D55  25                 	db	37
   315  007D56  30                 	db	48	;'0'
   316  007D57  32                 	db	50	;'2'
   317  007D58  64                 	db	100	;'d'
   318  007D59  20                 	db	32
   319  007D5A  25                 	db	37
   320  007D5B  30                 	db	48	;'0'
   321  007D5C  32                 	db	50	;'2'
   322  007D5D  64                 	db	100	;'d'
   323  007D5E  20                 	db	32
   324  007D5F  25                 	db	37
   325  007D60  30                 	db	48	;'0'
   326  007D61  32                 	db	50	;'2'
   327  007D62  64                 	db	100	;'d'
   328  007D63  00                 	db	0
   329  007D64                     STR_19:
   330  007D64  25                 	db	37
   331  007D65  63                 	db	99	;'c'
   332  007D66  25                 	db	37
   333  007D67  63                 	db	99	;'c'
   334  007D68  20                 	db	32
   335  007D69  25                 	db	37
   336  007D6A  30                 	db	48	;'0'
   337  007D6B  32                 	db	50	;'2'
   338  007D6C  64                 	db	100	;'d'
   339  007D6D  2E                 	db	46
   340  007D6E  25                 	db	37
   341  007D6F  30                 	db	48	;'0'
   342  007D70  32                 	db	50	;'2'
   343  007D71  64                 	db	100	;'d'
   344  007D72  00                 	db	0
   345  007D73                     STR_18:
   346  007D73  25                 	db	37
   347  007D74  30                 	db	48	;'0'
   348  007D75  32                 	db	50	;'2'
   349  007D76  64                 	db	100	;'d'
   350  007D77  2E                 	db	46
   351  007D78  25                 	db	37
   352  007D79  30                 	db	48	;'0'
   353  007D7A  32                 	db	50	;'2'
   354  007D7B  64                 	db	100	;'d'
   355  007D7C  2E                 	db	46
   356  007D7D  25                 	db	37
   357  007D7E  30                 	db	48	;'0'
   358  007D7F  32                 	db	50	;'2'
   359  007D80  64                 	db	100	;'d'
   360  007D81  00                 	db	0
   361  007D82                     STR_21:
   362  007D82  25                 	db	37
   363  007D83  73                 	db	115	;'s'
   364  007D84  20                 	db	32
   365  007D85  25                 	db	37
   366  007D86  30                 	db	48	;'0'
   367  007D87  32                 	db	50	;'2'
   368  007D88  64                 	db	100	;'d'
   369  007D89  2E                 	db	46
   370  007D8A  25                 	db	37
   371  007D8B  30                 	db	48	;'0'
   372  007D8C  32                 	db	50	;'2'
   373  007D8D  64                 	db	100	;'d'
   374  007D8E  00                 	db	0
   375  007D8F                     STR_38:
   376  007D8F  28                 	db	40
   377  007D90  6E                 	db	110	;'n'
   378  007D91  75                 	db	117	;'u'
   379  007D92  6C                 	db	108	;'l'
   380  007D93  6C                 	db	108	;'l'
   381  007D94  29                 	db	41
   382  007D95  00                 	db	0
   383  007D96                     STR_9:
   384  007D96  25                 	db	37
   385  007D97  2E                 	db	46
   386  007D98  2A                 	db	42
   387  007D99  66                 	db	102	;'f'
   388  007D9A  00                 	db	0
   389  007D9B  25                 	db	37
   390  007D9C  2A                 	db	42
   391  007D9D  6C                 	db	108	;'l'
   392  007D9E  69                 	db	105	;'i'
   393  007D9F  00                 	db	0
   394  007DA0                     STR_3:
   395  007DA0  44                 	db	68	;'D'
   396  007DA1  65                 	db	101	;'e'
   397  007DA2  69                 	db	105	;'i'
   398  007DA3  00                 	db	0
   399  007DA4                     STR_6:
   400  007DA4  46                 	db	70	;'F'
   401  007DA5  72                 	db	114	;'r'
   402  007DA6  69                 	db	105	;'i'
   403  007DA7  00                 	db	0
   404  007DA8                     STR_7:
   405  007DA8  53                 	db	83	;'S'
   406  007DA9  61                 	db	97	;'a'
   407  007DAA  6D                 	db	109	;'m'
   408  007DAB  00                 	db	0
   409  007DAC                     STR_5:
   410  007DAC  44                 	db	68	;'D'
   411  007DAD  6F                 	db	111	;'o'
   412  007DAE  6E                 	db	110	;'n'
   413  007DAF  00                 	db	0
   414  007DB0                     STR_2:
   415  007DB0  4D                 	db	77	;'M'
   416  007DB1  6F                 	db	111	;'o'
   417  007DB2  6E                 	db	110	;'n'
   418  007DB3  00                 	db	0
   419  007DB4                     STR_1:
   420  007DB4  53                 	db	83	;'S'
   421  007DB5  6F                 	db	111	;'o'
   422  007DB6  6E                 	db	110	;'n'
   423  007DB7  00                 	db	0
   424  007DB8                     STR_4:
   425  007DB8  4D                 	db	77	;'M'
   426  007DB9  69                 	db	105	;'i'
   427  007DBA  74                 	db	116	;'t'
   428  007DBB  00                 	db	0
   429  007DBC                     STR_30:
   430  007DBC  2A                 	db	42
   431  007DBD  43                 	db	67	;'C'
   432  007DBE  00                 	db	0
   433  007DBF                     __end_of__stringdata:
   434                           	opt stack 0
   435                           
   436                           ; #config settings
   437  007DBF  00                 	db	0	; dummy byte at the end
   438  0000                     
   439                           	psect	nvBANK0
   440  0000EE                     __pnvBANK0:
   441                           	opt stack 0
   442  0000EE                     _printFn:
   443                           	opt stack 0
   444  0000EE                     	ds	2
   445                           
   446                           	psect	cinit
   447  003600                     __pcinit:
   448                           	opt stack 0
   449  003600                     start_initialization:
   450                           	opt stack 0
   451  003600                     __initialization:
   452                           	opt stack 0
   453                           
   454                           ; Clear objects allocated to BANK1 (23 bytes)
   455  003600  EE01  F000         	lfsr	0,__pbssBANK1
   456  003604  0E17               	movlw	23
   457  003606                     clear_0:
   458  003606  6AEE               	clrf	postinc0,c
   459  003608  06E8               	decf	wreg,f,c
   460  00360A  E1FD               	bnz	clear_0
   461                           
   462                           ; Clear objects allocated to BANK0 (39 bytes)
   463  00360C  EE00  F0B0         	lfsr	0,__pbssBANK0
   464  003610  0E27               	movlw	39
   465  003612                     clear_1:
   466  003612  6AEE               	clrf	postinc0,c
   467  003614  06E8               	decf	wreg,f,c
   468  003616  E1FD               	bnz	clear_1
   469                           
   470                           ; Initialize objects allocated to BANK0 (23 bytes)
   471                           ; load TBLPTR registers with __pidataBANK0
   472  003618  0EF0               	movlw	low __pidataBANK0
   473  00361A  6EF6               	movwf	tblptrl,c
   474  00361C  0E38               	movlw	high __pidataBANK0
   475  00361E  6EF7               	movwf	tblptrh,c
   476  003620  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   477  003622  6EF8               	movwf	tblptru,c
   478  003624  EE00  F0D7         	lfsr	0,__pdataBANK0
   479  003628  EE10 F017          	lfsr	1,23
   480  00362C                     copy_data0:
   481  00362C  0009               	tblrd		*+
   482  00362E  CFF5 FFEE          	movff	tablat,postinc0
   483  003632  50E5               	movf	postdec1,w,c
   484  003634  50E1               	movf	fsr1l,w,c
   485  003636  E1FA               	bnz	copy_data0
   486  003638                     end_of_initialization:
   487                           	opt stack 0
   488  003638                     __end_of__initialization:
   489                           	opt stack 0
   490  003638  0E00               	movlw	low (__Lmediumconst shr (0+16))
   491  00363A  6EF8               	movwf	tblptru,c
   492  00363C  0100               	movlb	0
   493  00363E  EFFA  F018         	goto	_main	;jump to C main() function
   494                           tblptru	equ	0xFF8
   495                           tblptrh	equ	0xFF7
   496                           tblptrl	equ	0xFF6
   497                           tablat	equ	0xFF5
   498                           postinc0	equ	0xFEE
   499                           wreg	equ	0xFE8
   500                           postdec1	equ	0xFE5
   501                           fsr1l	equ	0xFE1
   502                           
   503                           	psect	bssBANK0
   504  0000B0                     __pbssBANK0:
   505                           	opt stack 0
   506  0000B0                     _oldTemps:
   507                           	opt stack 0
   508  0000B0                     	ds	12
   509  0000BC                     printRTC@F5050:
   510                           	opt stack 0
   511  0000BC                     	ds	9
   512  0000C5                     writeFloat@F5025:
   513                           	opt stack 0
   514  0000C5                     	ds	9
   515  0000CE                     _tmr0BigCounts:
   516                           	opt stack 0
   517  0000CE                     	ds	4
   518  0000D2                     _rtc_big_ticks:
   519                           	opt stack 0
   520  0000D2                     	ds	2
   521  0000D4                     _rtc_small_ticks:
   522                           	opt stack 0
   523  0000D4                     	ds	2
   524  0000D6                     _menu:
   525                           	opt stack 0
   526  0000D6                     	ds	1
   527                           tblptru	equ	0xFF8
   528                           tblptrh	equ	0xFF7
   529                           tblptrl	equ	0xFF6
   530                           tablat	equ	0xFF5
   531                           postinc0	equ	0xFEE
   532                           wreg	equ	0xFE8
   533                           postdec1	equ	0xFE5
   534                           fsr1l	equ	0xFE1
   535                           
   536                           	psect	dataBANK0
   537  0000D7                     __pdataBANK0:
   538                           	opt stack 0
   539  0000D7                     _dow:
   540                           	opt stack 0
   541  0000D7                     	ds	14
   542  0000E5                     writeLong@F5021:
   543                           	opt stack 0
   544  0000E5                     	ds	9
   545                           tblptru	equ	0xFF8
   546                           tblptrh	equ	0xFF7
   547                           tblptrl	equ	0xFF6
   548                           tablat	equ	0xFF5
   549                           postinc0	equ	0xFEE
   550                           wreg	equ	0xFE8
   551                           postdec1	equ	0xFE5
   552                           fsr1l	equ	0xFE1
   553                           
   554                           	psect	bssBANK1
   555  000100                     __pbssBANK1:
   556                           	opt stack 0
   557  000100                     _screen:
   558                           	opt stack 0
   559  000100                     	ds	13
   560  00010D                     _date:
   561                           	opt stack 0
   562  00010D                     	ds	10
   563                           tblptru	equ	0xFF8
   564                           tblptrh	equ	0xFF7
   565                           tblptrl	equ	0xFF6
   566                           tablat	equ	0xFF5
   567                           postinc0	equ	0xFEE
   568                           wreg	equ	0xFE8
   569                           postdec1	equ	0xFE5
   570                           fsr1l	equ	0xFE1
   571                           
   572                           	psect	cstackBANK1
   573  000117                     __pcstackBANK1:
   574                           	opt stack 0
   575  000117                     ?_setBrightness:
   576                           	opt stack 0
   577  000117                     ?_setTest:
   578                           	opt stack 0
   579  000117                     setBrightness@bright:
   580                           	opt stack 0
   581  000117                     setTest@state:
   582                           	opt stack 0
   583  000117                     loadTime@newDate:
   584                           	opt stack 0
   585                           
   586                           ; 10 bytes @ 0x0
   587  000117                     	ds	1
   588  000118                     ??_startDisp:
   589  000118                     
   590                           ; 0 bytes @ 0x1
   591  000118                     	ds	9
   592  000121                     ??_initRTC:
   593                           
   594                           ; 0 bytes @ 0xA
   595  000121                     	ds	1
   596  000122                     
   597                           ; 2 bytes @ 0xB
   598  000122                     	ds	2
   599  000124                     
   600                           ; 3 bytes @ 0xD
   601  000124                     	ds	3
   602  000127                     main@cnt:
   603                           	opt stack 0
   604                           
   605                           ; 4 bytes @ 0x10
   606  000127                     	ds	4
   607                           tblptru	equ	0xFF8
   608                           tblptrh	equ	0xFF7
   609                           tblptrl	equ	0xFF6
   610                           tablat	equ	0xFF5
   611                           postinc0	equ	0xFEE
   612                           wreg	equ	0xFE8
   613                           postdec1	equ	0xFE5
   614                           fsr1l	equ	0xFE1
   615                           
   616                           	psect	cstackBANK0
   617  000060                     __pcstackBANK0:
   618                           	opt stack 0
   619  000060                     ??_sprintf:
   620                           
   621                           ; 0 bytes @ 0x0
   622  000060                     	ds	6
   623  000066                     _sprintf$1264:
   624                           	opt stack 0
   625                           
   626                           ; 3 bytes @ 0x6
   627  000066                     	ds	3
   628  000069                     _sprintf$619:
   629                           	opt stack 0
   630                           
   631                           ; 4 bytes @ 0x9
   632  000069                     	ds	4
   633  00006D                     sprintf@vd:
   634                           	opt stack 0
   635                           
   636                           ; 2 bytes @ 0xD
   637  00006D                     	ds	2
   638  00006F                     sprintf@vd_621:
   639                           	opt stack 0
   640                           
   641                           ; 2 bytes @ 0xF
   642  00006F                     	ds	2
   643  000071                     sprintf@integ:
   644                           	opt stack 0
   645                           
   646                           ; 3 bytes @ 0x11
   647  000071                     	ds	3
   648  000074                     sprintf@ap:
   649                           	opt stack 0
   650                           
   651                           ; 2 bytes @ 0x14
   652  000074                     	ds	2
   653  000076                     sprintf@exp:
   654                           	opt stack 0
   655                           
   656                           ; 2 bytes @ 0x16
   657  000076                     	ds	2
   658  000078                     sprintf@flag:
   659                           	opt stack 0
   660                           
   661                           ; 2 bytes @ 0x18
   662  000078                     	ds	2
   663  00007A                     sprintf@fval:
   664                           	opt stack 0
   665                           
   666                           ; 3 bytes @ 0x1A
   667  00007A                     	ds	3
   668  00007D                     sprintf@width:
   669                           	opt stack 0
   670                           
   671                           ; 2 bytes @ 0x1D
   672  00007D                     	ds	2
   673  00007F                     sprintf@prec:
   674                           	opt stack 0
   675                           
   676                           ; 2 bytes @ 0x1F
   677  00007F                     	ds	2
   678  000081                     sprintf@c:
   679                           	opt stack 0
   680                           
   681                           ; 1 bytes @ 0x21
   682  000081                     	ds	1
   683  000082                     sprintf@_val:
   684                           	opt stack 0
   685                           
   686                           ; 4 bytes @ 0x22
   687  000082                     	ds	4
   688  000086                     ?_writeFloat:
   689                           	opt stack 0
   690  000086                     writeFloat@digits:
   691                           	opt stack 0
   692                           
   693                           ; 1 bytes @ 0x26
   694  000086                     	ds	1
   695  000087                     writeFloat@num:
   696                           	opt stack 0
   697                           
   698                           ; 3 bytes @ 0x27
   699  000087                     	ds	3
   700  00008A                     writeFloat@str:
   701                           	opt stack 0
   702                           
   703                           ; 9 bytes @ 0x2A
   704  00008A                     	ds	9
   705  000093                     writeFloat@bits:
   706                           	opt stack 0
   707                           
   708                           ; 1 bytes @ 0x33
   709  000093                     	ds	1
   710  000094                     ??_printRTC:
   711  000094                     ??_printTemp:
   712                           
   713                           ; 0 bytes @ 0x34
   714  000094                     	ds	1
   715  000095                     _printTemp$1260:
   716                           	opt stack 0
   717                           
   718                           ; 4 bytes @ 0x35
   719  000095                     	ds	1
   720  000096                     printRTC@str:
   721                           	opt stack 0
   722                           
   723                           ; 9 bytes @ 0x36
   724  000096                     	ds	3
   725  000099                     printTemp@units:
   726                           	opt stack 0
   727                           
   728                           ; 1 bytes @ 0x39
   729  000099                     	ds	6
   730  00009F                     _printRTC$1259:
   731                           	opt stack 0
   732                           
   733                           ; 2 bytes @ 0x3F
   734  00009F                     	ds	2
   735  0000A1                     ??_high_isr:
   736                           
   737                           ; 0 bytes @ 0x41
   738  0000A1                     	ds	15
   739                           tblptru	equ	0xFF8
   740                           tblptrh	equ	0xFF7
   741                           tblptrl	equ	0xFF6
   742                           tablat	equ	0xFF5
   743                           postinc0	equ	0xFEE
   744                           wreg	equ	0xFE8
   745                           postdec1	equ	0xFE5
   746                           fsr1l	equ	0xFE1
   747                           
   748                           	psect	cstackCOMRAM
   749  000001                     __pcstackCOMRAM:
   750                           	opt stack 0
   751  000001                     ?_wait:
   752                           	opt stack 0
   753  000001                     ?_isdigit:
   754                           	opt stack 0
   755  000001                     ?___ftge:
   756                           	opt stack 0
   757  000001                     ?_rotate:
   758                           	opt stack 0
   759  000001                     ?_countBits:
   760                           	opt stack 0
   761  000001                     ?_getFontChar:
   762                           	opt stack 0
   763  000001                     ?___awmod:
   764                           	opt stack 0
   765  000001                     ?___lwmod:
   766                           	opt stack 0
   767  000001                     ?___ftpack:
   768                           	opt stack 0
   769  000001                     ?___ftneg:
   770                           	opt stack 0
   771  000001                     ?_hibit:
   772                           	opt stack 0
   773  000001                     ?_lowbit:
   774                           	opt stack 0
   775  000001                     ?__tdiv_to_l_:
   776                           	opt stack 0
   777  000001                     ?__div_to_l_:
   778                           	opt stack 0
   779  000001                     ?___lldiv:
   780                           	opt stack 0
   781  000001                     getFontChar@ch:
   782                           	opt stack 0
   783  000001                     rotate@seg:
   784                           	opt stack 0
   785  000001                     isdigit@c:
   786                           	opt stack 0
   787  000001                     ___awmod@dividend:
   788                           	opt stack 0
   789  000001                     ___lwmod@dividend:
   790                           	opt stack 0
   791  000001                     __div_to_l_@f1:
   792                           	opt stack 0
   793  000001                     ___ftpack@arg:
   794                           	opt stack 0
   795  000001                     __tdiv_to_l_@f1:
   796                           	opt stack 0
   797  000001                     ___ftge@ff1:
   798                           	opt stack 0
   799  000001                     ___ftneg@f1:
   800                           	opt stack 0
   801  000001                     wait@count:
   802                           	opt stack 0
   803  000001                     countBits@num:
   804                           	opt stack 0
   805  000001                     hibit@x:
   806                           	opt stack 0
   807  000001                     lowbit@x:
   808                           	opt stack 0
   809  000001                     ___lldiv@dividend:
   810                           	opt stack 0
   811                           
   812                           ; 4 bytes @ 0x0
   813  000001                     	ds	1
   814  000002                     ??_rotate:
   815  000002                     ??_isdigit:
   816  000002                     ??_getFontChar:
   817                           
   818                           ; 0 bytes @ 0x1
   819  000002                     	ds	1
   820  000003                     _isdigit$894:
   821                           	opt stack 0
   822  000003                     ___awmod@divisor:
   823                           	opt stack 0
   824  000003                     ___lwmod@divisor:
   825                           	opt stack 0
   826                           
   827                           ; 2 bytes @ 0x2
   828  000003                     	ds	1
   829  000004                     ___ftpack@exp:
   830                           	opt stack 0
   831  000004                     __div_to_l_@f2:
   832                           	opt stack 0
   833  000004                     __tdiv_to_l_@f2:
   834                           	opt stack 0
   835  000004                     ___ftge@ff2:
   836                           	opt stack 0
   837                           
   838                           ; 3 bytes @ 0x3
   839  000004                     	ds	1
   840  000005                     ??_hibit:
   841  000005                     ??_lowbit:
   842  000005                     ??___awmod:
   843  000005                     ??___lwmod:
   844  000005                     rotate@ret:
   845                           	opt stack 0
   846  000005                     countBits@ret:
   847                           	opt stack 0
   848  000005                     ___ftpack@sign:
   849                           	opt stack 0
   850  000005                     ___lldiv@divisor:
   851                           	opt stack 0
   852                           
   853                           ; 4 bytes @ 0x4
   854  000005                     	ds	1
   855  000006                     ??___ftpack:
   856  000006                     rotate@cnt:
   857                           	opt stack 0
   858  000006                     ___awmod@counter:
   859                           	opt stack 0
   860  000006                     ___lwmod@counter:
   861                           	opt stack 0
   862                           
   863                           ; 1 bytes @ 0x5
   864  000006                     	ds	1
   865  000007                     ?_spi:
   866                           	opt stack 0
   867  000007                     ??__tdiv_to_l_:
   868  000007                     ??__div_to_l_:
   869  000007                     ??___ftge:
   870  000007                     ?_daysOfMonth:
   871                           	opt stack 0
   872  000007                     spi@addr:
   873                           	opt stack 0
   874  000007                     daysOfMonth@month:
   875                           	opt stack 0
   876  000007                     ___awmod@sign:
   877                           	opt stack 0
   878                           
   879                           ; 1 bytes @ 0x6
   880  000007                     	ds	1
   881  000008                     ??_buttons:
   882  000008                     ?___awdiv:
   883                           	opt stack 0
   884  000008                     spi@data:
   885                           	opt stack 0
   886  000008                     daysOfMonth@year:
   887                           	opt stack 0
   888  000008                     ___awdiv@dividend:
   889                           	opt stack 0
   890  000008                     hibit@log2Val:
   891                           	opt stack 0
   892  000008                     lowbit@log2Val:
   893                           	opt stack 0
   894  000008                     __div_to_l_@quot:
   895                           	opt stack 0
   896                           
   897                           ; 4 bytes @ 0x7
   898  000008                     	ds	1
   899  000009                     ??_spi:
   900  000009                     ??___lldiv:
   901  000009                     ?___ftdiv:
   902                           	opt stack 0
   903  000009                     ?___lltoft:
   904                           	opt stack 0
   905  000009                     ?___lwtoft:
   906                           	opt stack 0
   907  000009                     ___lwtoft@c:
   908                           	opt stack 0
   909  000009                     ___ftdiv@f1:
   910                           	opt stack 0
   911  000009                     ___lltoft@c:
   912                           	opt stack 0
   913                           
   914                           ; 4 bytes @ 0x8
   915  000009                     	ds	1
   916  00000A                     ??_daysOfMonth:
   917  00000A                     ___lldiv@counter:
   918                           	opt stack 0
   919  00000A                     ___awdiv@divisor:
   920                           	opt stack 0
   921                           
   922                           ; 2 bytes @ 0x9
   923  00000A                     	ds	1
   924  00000B                     ___lldiv@quotient:
   925                           	opt stack 0
   926                           
   927                           ; 4 bytes @ 0xA
   928  00000B                     	ds	1
   929  00000C                     ??___awdiv:
   930  00000C                     ??___lwtoft:
   931  00000C                     ?_tick:
   932                           	opt stack 0
   933  00000C                     ?_log2:
   934                           	opt stack 0
   935  00000C                     tick@val:
   936                           	opt stack 0
   937  00000C                     __div_to_l_@cntr:
   938                           	opt stack 0
   939  00000C                     spi@send:
   940                           	opt stack 0
   941  00000C                     ___ftdiv@f2:
   942                           	opt stack 0
   943  00000C                     log2@num:
   944                           	opt stack 0
   945  00000C                     __tdiv_to_l_@quot:
   946                           	opt stack 0
   947                           
   948                           ; 4 bytes @ 0xB
   949  00000C                     	ds	1
   950  00000D                     ??_tick:
   951  00000D                     ??___lltoft:
   952  00000D                     ___awdiv@counter:
   953                           	opt stack 0
   954  00000D                     __div_to_l_@exp1:
   955                           	opt stack 0
   956                           
   957                           ; 1 bytes @ 0xC
   958  00000D                     	ds	1
   959  00000E                     spi@cnt:
   960                           	opt stack 0
   961  00000E                     ___awdiv@sign:
   962                           	opt stack 0
   963                           
   964                           ; 1 bytes @ 0xD
   965  00000E                     	ds	1
   966  00000F                     ??___ftdiv:
   967  00000F                     ?___llmod:
   968                           	opt stack 0
   969  00000F                     ___awdiv@quotient:
   970                           	opt stack 0
   971  00000F                     ___llmod@dividend:
   972                           	opt stack 0
   973                           
   974                           ; 4 bytes @ 0xE
   975  00000F                     	ds	1
   976  000010                     __tdiv_to_l_@cntr:
   977                           	opt stack 0
   978  000010                     log2@log2Val:
   979                           	opt stack 0
   980                           
   981                           ; 4 bytes @ 0xF
   982  000010                     	ds	1
   983  000011                     ?___wmul:
   984                           	opt stack 0
   985  000011                     buttons@cnt:
   986                           	opt stack 0
   987  000011                     __tdiv_to_l_@exp1:
   988                           	opt stack 0
   989  000011                     ___lltoft@exp:
   990                           	opt stack 0
   991  000011                     ___wmul@multiplier:
   992                           	opt stack 0
   993                           
   994                           ; 2 bytes @ 0x10
   995  000011                     	ds	2
   996  000013                     ___wmul@multiplicand:
   997                           	opt stack 0
   998  000013                     ___llmod@divisor:
   999                           	opt stack 0
  1000                           
  1001                           ; 4 bytes @ 0x12
  1002  000013                     	ds	1
  1003  000014                     ?_writeDigit:
  1004                           	opt stack 0
  1005  000014                     writeDigit@digit:
  1006                           	opt stack 0
  1007  000014                     ___ftdiv@cntr:
  1008                           	opt stack 0
  1009                           
  1010                           ; 1 bytes @ 0x13
  1011  000014                     	ds	1
  1012  000015                     writeDigit@segs:
  1013                           	opt stack 0
  1014  000015                     ___ftdiv@exp:
  1015                           	opt stack 0
  1016  000015                     ___wmul@product:
  1017                           	opt stack 0
  1018                           
  1019                           ; 2 bytes @ 0x14
  1020  000015                     	ds	1
  1021  000016                     ??_writeDigit:
  1022  000016                     ___ftdiv@f3:
  1023                           	opt stack 0
  1024                           
  1025                           ; 3 bytes @ 0x15
  1026  000016                     	ds	1
  1027  000017                     ?_writeChar:
  1028                           	opt stack 0
  1029  000017                     ??___llmod:
  1030  000017                     ?___fttol:
  1031                           	opt stack 0
  1032  000017                     writeDigit@dig:
  1033                           	opt stack 0
  1034  000017                     writeChar@digit:
  1035                           	opt stack 0
  1036  000017                     ___fttol@f1:
  1037                           	opt stack 0
  1038                           
  1039                           ; 3 bytes @ 0x16
  1040  000017                     	ds	1
  1041  000018                     writeDigit@cnt:
  1042                           	opt stack 0
  1043  000018                     writeChar@ch:
  1044                           	opt stack 0
  1045  000018                     ___llmod@counter:
  1046                           	opt stack 0
  1047                           
  1048                           ; 1 bytes @ 0x17
  1049  000018                     	ds	1
  1050  000019                     ??_update:
  1051  000019                     writeChar@dig:
  1052                           	opt stack 0
  1053  000019                     ___ftdiv@sign:
  1054                           	opt stack 0
  1055                           
  1056                           ; 1 bytes @ 0x18
  1057  000019                     	ds	1
  1058  00001A                     ?_writeString:
  1059                           	opt stack 0
  1060  00001A                     writeString@digits:
  1061                           	opt stack 0
  1062                           
  1063                           ; 1 bytes @ 0x19
  1064  00001A                     	ds	1
  1065  00001B                     ??___fttol:
  1066  00001B                     writeString@string:
  1067                           	opt stack 0
  1068                           
  1069                           ; 2 bytes @ 0x1A
  1070  00001B                     	ds	2
  1071  00001D                     ??_writeString:
  1072                           
  1073                           ; 0 bytes @ 0x1C
  1074  00001D                     	ds	1
  1075  00001E                     update@cnt:
  1076                           	opt stack 0
  1077                           
  1078                           ; 1 bytes @ 0x1D
  1079  00001E                     	ds	2
  1080  000020                     ___fttol@sign1:
  1081                           	opt stack 0
  1082                           
  1083                           ; 1 bytes @ 0x1F
  1084  000020                     	ds	1
  1085  000021                     writeString@bits:
  1086                           	opt stack 0
  1087  000021                     ___fttol@lval:
  1088                           	opt stack 0
  1089                           
  1090                           ; 4 bytes @ 0x20
  1091  000021                     	ds	1
  1092  000022                     writeString@i:
  1093                           	opt stack 0
  1094                           
  1095                           ; 1 bytes @ 0x21
  1096  000022                     	ds	1
  1097  000023                     writeString@cnt:
  1098                           	opt stack 0
  1099                           
  1100                           ; 1 bytes @ 0x22
  1101  000023                     	ds	2
  1102  000025                     ___fttol@exp1:
  1103                           	opt stack 0
  1104                           
  1105                           ; 1 bytes @ 0x24
  1106  000025                     	ds	1
  1107  000026                     ?___ftmul:
  1108                           	opt stack 0
  1109  000026                     ___ftmul@f1:
  1110                           	opt stack 0
  1111                           
  1112                           ; 3 bytes @ 0x25
  1113  000026                     	ds	3
  1114  000029                     ___ftmul@f2:
  1115                           	opt stack 0
  1116                           
  1117                           ; 3 bytes @ 0x28
  1118  000029                     	ds	3
  1119  00002C                     ??___ftmul:
  1120                           
  1121                           ; 0 bytes @ 0x2B
  1122  00002C                     	ds	5
  1123  000031                     ___ftmul@exp:
  1124                           	opt stack 0
  1125                           
  1126                           ; 1 bytes @ 0x30
  1127  000031                     	ds	1
  1128  000032                     ___ftmul@f3_as_product:
  1129                           	opt stack 0
  1130                           
  1131                           ; 3 bytes @ 0x31
  1132  000032                     	ds	3
  1133  000035                     ___ftmul@cntr:
  1134                           	opt stack 0
  1135                           
  1136                           ; 1 bytes @ 0x34
  1137  000035                     	ds	1
  1138  000036                     ___ftmul@sign:
  1139                           	opt stack 0
  1140                           
  1141                           ; 1 bytes @ 0x35
  1142  000036                     	ds	1
  1143  000037                     ?___ftadd:
  1144                           	opt stack 0
  1145  000037                     ?_fround:
  1146                           	opt stack 0
  1147  000037                     ?_scale:
  1148                           	opt stack 0
  1149  000037                     ?___asftmul:
  1150                           	opt stack 0
  1151  000037                     fround@prec:
  1152                           	opt stack 0
  1153  000037                     scale@scl:
  1154                           	opt stack 0
  1155  000037                     ___asftmul@f1p:
  1156                           	opt stack 0
  1157  000037                     ___ftadd@f1:
  1158                           	opt stack 0
  1159                           
  1160                           ; 3 bytes @ 0x36
  1161  000037                     	ds	2
  1162  000039                     ___asftmul@f2:
  1163                           	opt stack 0
  1164                           
  1165                           ; 3 bytes @ 0x38
  1166  000039                     	ds	1
  1167  00003A                     ??_fround:
  1168  00003A                     ??_scale:
  1169  00003A                     ___ftadd@f2:
  1170                           	opt stack 0
  1171                           
  1172                           ; 3 bytes @ 0x39
  1173  00003A                     	ds	2
  1174  00003C                     
  1175                           ; 0 bytes @ 0x3B
  1176  00003C                     	ds	1
  1177  00003D                     ??___ftadd:
  1178                           
  1179                           ; 0 bytes @ 0x3C
  1180  00003D                     	ds	3
  1181  000040                     _fround$1262:
  1182                           	opt stack 0
  1183  000040                     _scale$1263:
  1184                           	opt stack 0
  1185                           
  1186                           ; 3 bytes @ 0x3F
  1187  000040                     	ds	2
  1188  000042                     ___ftadd@sign:
  1189                           	opt stack 0
  1190                           
  1191                           ; 1 bytes @ 0x41
  1192  000042                     	ds	1
  1193  000043                     ___ftadd@exp2:
  1194                           	opt stack 0
  1195  000043                     _fround$1261:
  1196                           	opt stack 0
  1197                           
  1198                           ; 3 bytes @ 0x42
  1199  000043                     	ds	1
  1200  000044                     ___ftadd@exp1:
  1201                           	opt stack 0
  1202                           
  1203                           ; 1 bytes @ 0x43
  1204  000044                     	ds	1
  1205  000045                     ?___ftsub:
  1206                           	opt stack 0
  1207  000045                     ___ftsub@f1:
  1208                           	opt stack 0
  1209                           
  1210                           ; 3 bytes @ 0x44
  1211  000045                     	ds	1
  1212  000046                     ?___asftadd:
  1213                           	opt stack 0
  1214  000046                     ___asftadd@f1p:
  1215                           	opt stack 0
  1216                           
  1217                           ; 2 bytes @ 0x45
  1218  000046                     	ds	2
  1219  000048                     ___asftadd@f2:
  1220                           	opt stack 0
  1221  000048                     ___ftsub@f2:
  1222                           	opt stack 0
  1223                           
  1224                           ; 3 bytes @ 0x47
  1225  000048                     	ds	3
  1226  00004B                     ?_getTemp:
  1227                           	opt stack 0
  1228  00004B                     ?___asftsub:
  1229                           	opt stack 0
  1230  00004B                     ___asftsub@f1p:
  1231                           	opt stack 0
  1232                           
  1233                           ; 2 bytes @ 0x4A
  1234  00004B                     	ds	2
  1235  00004D                     ___asftsub@f2:
  1236                           	opt stack 0
  1237                           
  1238                           ; 3 bytes @ 0x4C
  1239  00004D                     	ds	1
  1240  00004E                     ??_getTemp:
  1241                           
  1242                           ; 0 bytes @ 0x4D
  1243  00004E                     	ds	1
  1244  00004F                     getTemp@oldTempsTemp:
  1245                           	opt stack 0
  1246                           
  1247                           ; 9 bytes @ 0x4E
  1248  00004F                     	ds	1
  1249  000050                     ?_sprintf:
  1250                           	opt stack 0
  1251  000050                     sprintf@sp:
  1252                           	opt stack 0
  1253                           
  1254                           ; 2 bytes @ 0x4F
  1255  000050                     	ds	2
  1256  000052                     sprintf@f:
  1257                           	opt stack 0
  1258                           
  1259                           ; 2 bytes @ 0x51
  1260  000052                     	ds	6
  1261  000058                     getTemp@temp:
  1262                           	opt stack 0
  1263                           
  1264                           ; 3 bytes @ 0x57
  1265  000058                     	ds	3
  1266  00005B                     getTemp@total:
  1267                           	opt stack 0
  1268                           
  1269                           ; 3 bytes @ 0x5A
  1270  00005B                     	ds	3
  1271  00005E                     getTemp@cnt:
  1272                           	opt stack 0
  1273                           
  1274                           ; 1 bytes @ 0x5D
  1275  00005E                     	ds	1
  1276  00005F                     ?_printTemp:
  1277                           	opt stack 0
  1278  00005F                     printRTC@digits:
  1279                           	opt stack 0
  1280  00005F                     printTemp@digits:
  1281                           	opt stack 0
  1282                           
  1283                           ; 1 bytes @ 0x5E
  1284  00005F                     	ds	1
  1285                           tblptru	equ	0xFF8
  1286                           tblptrh	equ	0xFF7
  1287                           tblptrl	equ	0xFF6
  1288                           tablat	equ	0xFF5
  1289                           postinc0	equ	0xFEE
  1290                           wreg	equ	0xFE8
  1291                           postdec1	equ	0xFE5
  1292                           fsr1l	equ	0xFE1
  1293                           
  1294 ;;
  1295 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1296 ;;
  1297 ;; *************** function _main *****************
  1298 ;; Defined at:
  1299 ;;		line 35 in file "main.c"
  1300 ;; Parameters:    Size  Location     Type
  1301 ;;  argc            2   11[BANK1 ] int 
  1302 ;;  argv            3   13[BANK1 ] PTR PTR unsigned char 
  1303 ;; Auto vars:     Size  Location     Type
  1304 ;;  cnt             4   16[BANK1 ] unsigned long 
  1305 ;; Return value:  Size  Location     Type
  1306 ;;                  2   11[BANK1 ] int 
  1307 ;; Registers used:
  1308 ;;		wreg, status,2, status,0, cstack
  1309 ;; Tracked objects:
  1310 ;;		On entry : 0/0
  1311 ;;		On exit  : 0/0
  1312 ;;		Unchanged: 0/0
  1313 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1314 ;;      Params:         0       0       5       0       0       0       0       0       0
  1315 ;;      Locals:         0       0       4       0       0       0       0       0       0
  1316 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1317 ;;      Totals:         0       0       9       0       0       0       0       0       0
  1318 ;;Total ram usage:        9 bytes
  1319 ;; Hardware stack levels required when called:   11
  1320 ;; This function calls:
  1321 ;;		_setup
  1322 ;; This function is called by:
  1323 ;;		Startup code after reset
  1324 ;; This function uses a non-reentrant model
  1325 ;;
  1326                           
  1327                           	psect	text0
  1328  0031F4                     __ptext0:
  1329                           	opt stack 0
  1330  0031F4                     _main:
  1331                           	opt stack 19
  1332                           
  1333                           ;main.c: 36: setup();
  1334                           
  1335                           ;incstack = 0
  1336                           ;incstack = 0
  1337  0031F4  ECFD  F01B         	call	_setup	;wreg free
  1338                           
  1339                           ;main.c: 37: uint32_t cnt = 0;
  1340  0031F8  0E00               	movlw	0
  1341  0031FA  0101               	movlb	1	; () banked
  1342  0031FC  0101               	movlb	1	; () banked
  1343  0031FE  6F27               	movwf	main@cnt& (0+255),b
  1344  003200  0E00               	movlw	0
  1345  003202  0101               	movlb	1	; () banked
  1346  003204  6F28               	movwf	(main@cnt+1)& (0+255),b
  1347  003206  0E00               	movlw	0
  1348  003208  0101               	movlb	1	; () banked
  1349  00320A  6F29               	movwf	(main@cnt+2)& (0+255),b
  1350  00320C  0E00               	movlw	0
  1351  00320E  0101               	movlb	1	; () banked
  1352  003210  6F2A               	movwf	(main@cnt+3)& (0+255),b
  1353  003212                     l8482:
  1354                           
  1355                           ; BSR set to: 1
  1356                           ;main.c: 39: if (cnt > 200L) {
  1357  003212  0EC9               	movlw	201
  1358  003214  0101               	movlb	1	; () banked
  1359  003216  0101               	movlb	1	; () banked
  1360  003218  5D27               	subwf	main@cnt& (0+255),w,b
  1361  00321A  0E00               	movlw	0
  1362  00321C  0101               	movlb	1	; () banked
  1363  00321E  5928               	subwfb	(main@cnt+1)& (0+255),w,b
  1364  003220  0E00               	movlw	0
  1365  003222  0101               	movlb	1	; () banked
  1366  003224  5929               	subwfb	(main@cnt+2)& (0+255),w,b
  1367  003226  0E00               	movlw	0
  1368  003228  0101               	movlb	1	; () banked
  1369  00322A  0101               	movlb	1	; () banked
  1370  00322C  592A               	subwfb	(main@cnt+3)& (0+255),w,b
  1371  00322E  A0D8               	btfss	status,0,c
  1372  003230  D00D               	goto	l8486
  1373                           
  1374                           ; BSR set to: 1
  1375                           ;main.c: 40: cnt = 0;
  1376  003232  0E00               	movlw	0
  1377  003234  0101               	movlb	1	; () banked
  1378  003236  0101               	movlb	1	; () banked
  1379  003238  6F27               	movwf	main@cnt& (0+255),b
  1380  00323A  0E00               	movlw	0
  1381  00323C  0101               	movlb	1	; () banked
  1382  00323E  6F28               	movwf	(main@cnt+1)& (0+255),b
  1383  003240  0E00               	movlw	0
  1384  003242  0101               	movlb	1	; () banked
  1385  003244  6F29               	movwf	(main@cnt+2)& (0+255),b
  1386  003246  0E00               	movlw	0
  1387  003248  0101               	movlb	1	; () banked
  1388  00324A  6F2A               	movwf	(main@cnt+3)& (0+255),b
  1389  00324C                     l8486:
  1390                           
  1391                           ; BSR set to: 1
  1392                           ;main.c: 43: }
  1393                           ;main.c: 44: cnt++;
  1394  00324C  0E01               	movlw	1
  1395  00324E  0101               	movlb	1	; () banked
  1396  003250  0101               	movlb	1	; () banked
  1397  003252  2727               	addwf	main@cnt& (0+255),f,b
  1398  003254  0E00               	movlw	0
  1399  003256  0101               	movlb	1	; () banked
  1400  003258  2328               	addwfc	(main@cnt+1)& (0+255),f,b
  1401  00325A  0E00               	movlw	0
  1402  00325C  0101               	movlb	1	; () banked
  1403  00325E  2329               	addwfc	(main@cnt+2)& (0+255),f,b
  1404  003260  0E00               	movlw	0
  1405  003262  0101               	movlb	1	; () banked
  1406  003264  232A               	addwfc	(main@cnt+3)& (0+255),f,b
  1407  003266  D7D5               	goto	l8482
  1408  003268                     __end_of_main:
  1409                           	opt stack 0
  1410                           tblptru	equ	0xFF8
  1411                           tblptrh	equ	0xFF7
  1412                           tblptrl	equ	0xFF6
  1413                           tablat	equ	0xFF5
  1414                           postinc0	equ	0xFEE
  1415                           wreg	equ	0xFE8
  1416                           postdec1	equ	0xFE5
  1417                           fsr1l	equ	0xFE1
  1418                           status	equ	0xFD8
  1419                           
  1420 ;; *************** function _setup *****************
  1421 ;; Defined at:
  1422 ;;		line 51 in file "main.c"
  1423 ;; Parameters:    Size  Location     Type
  1424 ;;		None
  1425 ;; Auto vars:     Size  Location     Type
  1426 ;;		None
  1427 ;; Return value:  Size  Location     Type
  1428 ;;		None               void
  1429 ;; Registers used:
  1430 ;;		wreg, status,2, status,0, cstack
  1431 ;; Tracked objects:
  1432 ;;		On entry : 0/0
  1433 ;;		On exit  : 0/0
  1434 ;;		Unchanged: 0/0
  1435 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1436 ;;      Params:         0       0       0       0       0       0       0       0       0
  1437 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1438 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1439 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1440 ;;Total ram usage:        0 bytes
  1441 ;; Hardware stack levels used:    1
  1442 ;; Hardware stack levels required when called:   10
  1443 ;; This function calls:
  1444 ;;		_startDisp
  1445 ;;		_initRTC
  1446 ;;		_initTemp
  1447 ;;		_setupButtons
  1448 ;; This function is called by:
  1449 ;;		_main
  1450 ;; This function uses a non-reentrant model
  1451 ;;
  1452                           
  1453                           	psect	text1
  1454  0037FA                     __ptext1:
  1455                           	opt stack 0
  1456  0037FA                     _setup:
  1457                           	opt stack 19
  1458                           
  1459                           ;main.c: 53: GIE = 1;
  1460                           
  1461                           ; BSR set to: 1
  1462                           ;incstack = 0
  1463                           ;incstack = 0
  1464  0037FA  8EF2               	bsf	intcon,7,c	;volatile
  1465                           
  1466                           ;main.c: 54: PEIE = 1;
  1467  0037FC  8CF2               	bsf	intcon,6,c	;volatile
  1468                           
  1469                           ;main.c: 56: startDisp();
  1470  0037FE  ECFA  F016         	call	_startDisp	;wreg free
  1471                           
  1472                           ;main.c: 57: initRTC();
  1473  003802  EC68  F01A         	call	_initRTC	;wreg free
  1474                           
  1475                           ;main.c: 58: initTemp();
  1476  003806  EC84  F01C         	call	_initTemp	;wreg free
  1477                           
  1478                           ;main.c: 59: setupButtons();
  1479  00380A  ECD0  F01B         	call	_setupButtons	;wreg free
  1480                           
  1481                           ;main.c: 62: printFn = &printRTC;
  1482  00380E  0E18               	movlw	high _printRTC
  1483  003810  0100               	movlb	0	; () banked
  1484  003812  0100               	movlb	0	; () banked
  1485  003814  6FEF               	movwf	(_printFn+1)& (0+255),b
  1486  003816  0E66               	movlw	low _printRTC
  1487  003818  0100               	movlb	0	; () banked
  1488  00381A  6FEE               	movwf	_printFn& (0+255),b
  1489                           
  1490                           ; BSR set to: 0
  1491                           ;main.c: 65: TRISA5 = 0;
  1492  00381C  9A92               	bcf	3986,5,c	;volatile
  1493                           
  1494                           ; BSR set to: 0
  1495                           ;main.c: 66: LATA5 = 1;
  1496  00381E  8A89               	bsf	3977,5,c	;volatile
  1497                           
  1498                           ; BSR set to: 0
  1499  003820  0012               	return	
  1500  003822                     __end_of_setup:
  1501                           	opt stack 0
  1502                           tblptru	equ	0xFF8
  1503                           tblptrh	equ	0xFF7
  1504                           tblptrl	equ	0xFF6
  1505                           tablat	equ	0xFF5
  1506                           intcon	equ	0xFF2
  1507                           postinc0	equ	0xFEE
  1508                           wreg	equ	0xFE8
  1509                           postdec1	equ	0xFE5
  1510                           fsr1l	equ	0xFE1
  1511                           status	equ	0xFD8
  1512                           
  1513 ;; *************** function _setupButtons *****************
  1514 ;; Defined at:
  1515 ;;		line 9 in file "buttons.c"
  1516 ;; Parameters:    Size  Location     Type
  1517 ;;		None
  1518 ;; Auto vars:     Size  Location     Type
  1519 ;;		None
  1520 ;; Return value:  Size  Location     Type
  1521 ;;		None               void
  1522 ;; Registers used:
  1523 ;;		wreg, status,2
  1524 ;; Tracked objects:
  1525 ;;		On entry : 0/0
  1526 ;;		On exit  : 0/0
  1527 ;;		Unchanged: 0/0
  1528 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1529 ;;      Params:         0       0       0       0       0       0       0       0       0
  1530 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1531 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1532 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1533 ;;Total ram usage:        0 bytes
  1534 ;; Hardware stack levels used:    1
  1535 ;; Hardware stack levels required when called:    8
  1536 ;; This function calls:
  1537 ;;		Nothing
  1538 ;; This function is called by:
  1539 ;;		_setup
  1540 ;; This function uses a non-reentrant model
  1541 ;;
  1542                           
  1543                           	psect	text2
  1544  0037A0                     __ptext2:
  1545                           	opt stack 0
  1546  0037A0                     _setupButtons:
  1547                           	opt stack 20
  1548                           
  1549                           ;buttons.c: 11: TRISB = 0xFF;
  1550                           
  1551                           ; BSR set to: 0
  1552                           ;incstack = 0
  1553                           ;incstack = 0
  1554  0037A0  6893               	setf	3987,c	;volatile
  1555                           
  1556                           ;buttons.c: 12: nRBPU = !1;
  1557  0037A2  9EF1               	bcf	intcon2,7,c	;volatile
  1558                           
  1559                           ;buttons.c: 21: tmr0BigCounts = 0;
  1560  0037A4  0E00               	movlw	0
  1561  0037A6  0100               	movlb	0	; () banked
  1562  0037A8  0100               	movlb	0	; () banked
  1563  0037AA  6FCE               	movwf	_tmr0BigCounts& (0+255),b
  1564  0037AC  0E00               	movlw	0
  1565  0037AE  0100               	movlb	0	; () banked
  1566  0037B0  6FCF               	movwf	(_tmr0BigCounts+1)& (0+255),b
  1567  0037B2  0E00               	movlw	0
  1568  0037B4  0100               	movlb	0	; () banked
  1569  0037B6  6FD0               	movwf	(_tmr0BigCounts+2)& (0+255),b
  1570  0037B8  0E00               	movlw	0
  1571  0037BA  0100               	movlb	0	; () banked
  1572  0037BC  6FD1               	movwf	(_tmr0BigCounts+3)& (0+255),b
  1573                           
  1574                           ;buttons.c: 22: T0CON = 0b00000111;
  1575  0037BE  0E07               	movlw	7
  1576  0037C0  6ED5               	movwf	4053,c	;volatile
  1577                           
  1578                           ;buttons.c: 23: TMR0 = (65536-50356);
  1579  0037C2  0E3B               	movlw	59
  1580  0037C4  6ED7               	movwf	4055,c	;volatile
  1581  0037C6  0E4C               	movlw	76
  1582  0037C8  6ED6               	movwf	4054,c	;volatile
  1583                           
  1584                           ; BSR set to: 0
  1585                           ;buttons.c: 24: TMR0ON = 1;
  1586  0037CA  8ED5               	bsf	4053,7,c	;volatile
  1587                           
  1588                           ; BSR set to: 0
  1589  0037CC  0012               	return	
  1590  0037CE                     __end_of_setupButtons:
  1591                           	opt stack 0
  1592                           tblptru	equ	0xFF8
  1593                           tblptrh	equ	0xFF7
  1594                           tblptrl	equ	0xFF6
  1595                           tablat	equ	0xFF5
  1596                           intcon	equ	0xFF2
  1597                           intcon2	equ	0xFF1
  1598                           postinc0	equ	0xFEE
  1599                           wreg	equ	0xFE8
  1600                           postdec1	equ	0xFE5
  1601                           fsr1l	equ	0xFE1
  1602                           status	equ	0xFD8
  1603                           
  1604 ;; *************** function _initTemp *****************
  1605 ;; Defined at:
  1606 ;;		line 7 in file "temp.c"
  1607 ;; Parameters:    Size  Location     Type
  1608 ;;		None
  1609 ;; Auto vars:     Size  Location     Type
  1610 ;;		None
  1611 ;; Return value:  Size  Location     Type
  1612 ;;		None               void
  1613 ;; Registers used:
  1614 ;;		wreg, status,2
  1615 ;; Tracked objects:
  1616 ;;		On entry : 0/0
  1617 ;;		On exit  : 0/0
  1618 ;;		Unchanged: 0/0
  1619 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1620 ;;      Params:         0       0       0       0       0       0       0       0       0
  1621 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1622 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1623 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1624 ;;Total ram usage:        0 bytes
  1625 ;; Hardware stack levels used:    1
  1626 ;; Hardware stack levels required when called:    8
  1627 ;; This function calls:
  1628 ;;		Nothing
  1629 ;; This function is called by:
  1630 ;;		_setup
  1631 ;; This function uses a non-reentrant model
  1632 ;;
  1633                           
  1634                           	psect	text3
  1635  003908                     __ptext3:
  1636                           	opt stack 0
  1637  003908                     _initTemp:
  1638                           	opt stack 20
  1639                           
  1640                           ;temp.c: 15: ADCON0 = 0b00000001;
  1641                           
  1642                           ; BSR set to: 0
  1643                           ;incstack = 0
  1644                           ;incstack = 0
  1645  003908  0E01               	movlw	1
  1646  00390A  6EC2               	movwf	4034,c	;volatile
  1647                           
  1648                           ;temp.c: 22: ADCON1 = 0b00001110;
  1649  00390C  0E0E               	movlw	14
  1650  00390E  6EC1               	movwf	4033,c	;volatile
  1651                           
  1652                           ;temp.c: 31: ADCON2 = 0b10001101;
  1653  003910  0E8D               	movlw	141
  1654  003912  6EC0               	movwf	4032,c	;volatile
  1655  003914  0012               	return	
  1656  003916                     __end_of_initTemp:
  1657                           	opt stack 0
  1658                           tblptru	equ	0xFF8
  1659                           tblptrh	equ	0xFF7
  1660                           tblptrl	equ	0xFF6
  1661                           tablat	equ	0xFF5
  1662                           intcon	equ	0xFF2
  1663                           intcon2	equ	0xFF1
  1664                           postinc0	equ	0xFEE
  1665                           wreg	equ	0xFE8
  1666                           postdec1	equ	0xFE5
  1667                           fsr1l	equ	0xFE1
  1668                           status	equ	0xFD8
  1669                           
  1670 ;; *************** function _initRTC *****************
  1671 ;; Defined at:
  1672 ;;		line 7 in file "RTC.c"
  1673 ;; Parameters:    Size  Location     Type
  1674 ;;		None
  1675 ;; Auto vars:     Size  Location     Type
  1676 ;;		None
  1677 ;; Return value:  Size  Location     Type
  1678 ;;		None               void
  1679 ;; Registers used:
  1680 ;;		wreg, status,2, cstack
  1681 ;; Tracked objects:
  1682 ;;		On entry : 0/0
  1683 ;;		On exit  : 0/0
  1684 ;;		Unchanged: 0/0
  1685 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1686 ;;      Params:         0       0       0       0       0       0       0       0       0
  1687 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1688 ;;      Temps:          0       0       1       0       0       0       0       0       0
  1689 ;;      Totals:         0       0       1       0       0       0       0       0       0
  1690 ;;Total ram usage:        1 bytes
  1691 ;; Hardware stack levels used:    1
  1692 ;; Hardware stack levels required when called:    9
  1693 ;; This function calls:
  1694 ;;		_loadTime
  1695 ;; This function is called by:
  1696 ;;		_setup
  1697 ;; This function uses a non-reentrant model
  1698 ;;
  1699                           
  1700                           	psect	text4
  1701  0034D0                     __ptext4:
  1702                           	opt stack 0
  1703  0034D0                     _initRTC:
  1704                           	opt stack 19
  1705                           
  1706                           ;RTC.c: 8: date.view = 21;
  1707                           
  1708                           ;incstack = 0
  1709                           ;incstack = 0
  1710  0034D0  0101               	movlb	1	; () banked
  1711  0034D2  6F21               	movwf	??_initRTC& (0+255),b
  1712  0034D4  0E15               	movlw	21
  1713  0034D6  0101               	movlb	1	; () banked
  1714  0034D8  0101               	movlb	1	; () banked
  1715  0034DA  6F16               	movwf	(_date+9)& (0+255),b
  1716  0034DC  0101               	movlb	1	; () banked
  1717  0034DE  5121               	movf	??_initRTC& (0+255),w,b
  1718                           
  1719                           ;RTC.c: 9: date.month = 1;
  1720  0034E0  0101               	movlb	1	; () banked
  1721  0034E2  6F21               	movwf	??_initRTC& (0+255),b
  1722  0034E4  0E01               	movlw	1
  1723  0034E6  0101               	movlb	1	; () banked
  1724  0034E8  0101               	movlb	1	; () banked
  1725  0034EA  6F12               	movwf	(_date+5)& (0+255),b
  1726  0034EC  0101               	movlb	1	; () banked
  1727  0034EE  5121               	movf	??_initRTC& (0+255),w,b
  1728                           
  1729                           ;RTC.c: 10: date.day = 1;
  1730  0034F0  0101               	movlb	1	; () banked
  1731  0034F2  6F21               	movwf	??_initRTC& (0+255),b
  1732  0034F4  0E01               	movlw	1
  1733  0034F6  0101               	movlb	1	; () banked
  1734  0034F8  0101               	movlb	1	; () banked
  1735  0034FA  6F10               	movwf	(_date+3)& (0+255),b
  1736  0034FC  0101               	movlb	1	; () banked
  1737  0034FE  5121               	movf	??_initRTC& (0+255),w,b
  1738                           
  1739                           ; BSR set to: 1
  1740                           ;RTC.c: 11: date.year = 2013;
  1741  003500  0E07               	movlw	7
  1742  003502  0101               	movlb	1	; () banked
  1743  003504  0101               	movlb	1	; () banked
  1744  003506  6F14               	movwf	(_date+7)& (0+255),b
  1745  003508  0EDD               	movlw	221
  1746  00350A  0101               	movlb	1	; () banked
  1747  00350C  6F13               	movwf	(_date+6)& (0+255),b
  1748                           
  1749                           ; BSR set to: 1
  1750                           ;RTC.c: 13: loadTime();
  1751  00350E  EC8B  F01C         	call	_loadTime	;wreg free
  1752                           
  1753                           ;RTC.c: 16: T1CON = 0b10000000;
  1754  003512  0E80               	movlw	128
  1755  003514  6ECD               	movwf	4045,c	;volatile
  1756                           
  1757                           ;RTC.c: 17: TMR1 = (65536-1);
  1758  003516  68CE               	setf	4046,c	;volatile
  1759  003518  68CF               	setf	4047,c	;volatile
  1760                           
  1761                           ;RTC.c: 18: TMR1IE = 1;
  1762  00351A  809D               	bsf	3997,0,c	;volatile
  1763                           
  1764                           ;RTC.c: 19: TMR1IF = CLEAR;
  1765  00351C  909E               	bcf	3998,0,c	;volatile
  1766                           
  1767                           ;RTC.c: 20: TMR1ON = 1;
  1768  00351E  80CD               	bsf	4045,0,c	;volatile
  1769  003520  0012               	return	
  1770  003522                     __end_of_initRTC:
  1771                           	opt stack 0
  1772                           tblptru	equ	0xFF8
  1773                           tblptrh	equ	0xFF7
  1774                           tblptrl	equ	0xFF6
  1775                           tablat	equ	0xFF5
  1776                           intcon	equ	0xFF2
  1777                           intcon2	equ	0xFF1
  1778                           postinc0	equ	0xFEE
  1779                           wreg	equ	0xFE8
  1780                           postdec1	equ	0xFE5
  1781                           fsr1l	equ	0xFE1
  1782                           status	equ	0xFD8
  1783                           
  1784 ;; *************** function _loadTime *****************
  1785 ;; Defined at:
  1786 ;;		line 25 in file "RTC.c"
  1787 ;; Parameters:    Size  Location     Type
  1788 ;;		None
  1789 ;; Auto vars:     Size  Location     Type
  1790 ;;  newDate        10    0[BANK1 ] struct sDate
  1791 ;; Return value:  Size  Location     Type
  1792 ;;                  10  195[COMRAM] struct sDate
  1793 ;; Registers used:
  1794 ;;		None
  1795 ;; Tracked objects:
  1796 ;;		On entry : 0/0
  1797 ;;		On exit  : 0/0
  1798 ;;		Unchanged: 0/0
  1799 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1800 ;;      Params:         0       0       0       0       0       0       0       0       0
  1801 ;;      Locals:         0       0      10       0       0       0       0       0       0
  1802 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1803 ;;      Totals:         0       0      10       0       0       0       0       0       0
  1804 ;;Total ram usage:       10 bytes
  1805 ;; Hardware stack levels used:    1
  1806 ;; Hardware stack levels required when called:    8
  1807 ;; This function calls:
  1808 ;;		Nothing
  1809 ;; This function is called by:
  1810 ;;		_initRTC
  1811 ;; This function uses a non-reentrant model
  1812 ;;
  1813                           
  1814                           	psect	text5
  1815  003916                     __ptext5:
  1816                           	opt stack 0
  1817  003916                     _loadTime:
  1818                           	opt stack 19
  1819                           
  1820                           ;RTC.c: 26: struct sDate newDate;
  1821                           ;RTC.c: 27: return newDate;
  1822                           ;	Return value of _loadTime is never used
  1823                           
  1824                           ;incstack = 0
  1825                           ;incstack = 0
  1826  003916  0012               	return	
  1827  003918                     __end_of_loadTime:
  1828                           	opt stack 0
  1829                           tblptru	equ	0xFF8
  1830                           tblptrh	equ	0xFF7
  1831                           tblptrl	equ	0xFF6
  1832                           tablat	equ	0xFF5
  1833                           intcon	equ	0xFF2
  1834                           intcon2	equ	0xFF1
  1835                           postinc0	equ	0xFEE
  1836                           wreg	equ	0xFE8
  1837                           postdec1	equ	0xFE5
  1838                           fsr1l	equ	0xFE1
  1839                           status	equ	0xFD8
  1840                           
  1841 ;; *************** function _startDisp *****************
  1842 ;; Defined at:
  1843 ;;		line 59 in file "disp.c"
  1844 ;; Parameters:    Size  Location     Type
  1845 ;;		None
  1846 ;; Auto vars:     Size  Location     Type
  1847 ;;		None
  1848 ;; Return value:  Size  Location     Type
  1849 ;;		None               void
  1850 ;; Registers used:
  1851 ;;		wreg, status,2, status,0, cstack
  1852 ;; Tracked objects:
  1853 ;;		On entry : 0/0
  1854 ;;		On exit  : 0/0
  1855 ;;		Unchanged: 0/0
  1856 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1857 ;;      Params:         0       0       0       0       0       0       0       0       0
  1858 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1859 ;;      Temps:          0       0       1       0       0       0       0       0       0
  1860 ;;      Totals:         0       0       1       0       0       0       0       0       0
  1861 ;;Total ram usage:        1 bytes
  1862 ;; Hardware stack levels used:    1
  1863 ;; Hardware stack levels required when called:    9
  1864 ;; This function calls:
  1865 ;;		_setBrightness
  1866 ;;		_setTest
  1867 ;; This function is called by:
  1868 ;;		_setup
  1869 ;; This function uses a non-reentrant model
  1870 ;;
  1871                           
  1872                           	psect	text6
  1873  002DF4                     __ptext6:
  1874                           	opt stack 0
  1875  002DF4                     _startDisp:
  1876                           	opt stack 19
  1877                           
  1878                           ;disp.c: 61: TRISA1 = 0;
  1879                           
  1880                           ;incstack = 0
  1881                           ;incstack = 0
  1882  002DF4  9292               	bcf	3986,1,c	;volatile
  1883                           
  1884                           ;disp.c: 62: TRISA3 = 0;
  1885  002DF6  9692               	bcf	3986,3,c	;volatile
  1886                           
  1887                           ;disp.c: 63: TRISA4 = 0;
  1888  002DF8  9892               	bcf	3986,4,c	;volatile
  1889                           
  1890                           ;disp.c: 64: TRISA2 = 1;
  1891  002DFA  8492               	bsf	3986,2,c	;volatile
  1892                           
  1893                           ;disp.c: 67: screen.digits.bits[0] = 0;
  1894  002DFC  0E00               	movlw	0
  1895  002DFE  0101               	movlb	1	; () banked
  1896  002E00  0101               	movlb	1	; () banked
  1897  002E02  6F00               	movwf	_screen& (0+255),b
  1898  002E04  0E00               	movlw	0
  1899  002E06  0101               	movlb	1	; () banked
  1900  002E08  6F01               	movwf	(_screen+1)& (0+255),b
  1901  002E0A  0E00               	movlw	0
  1902  002E0C  0101               	movlb	1	; () banked
  1903  002E0E  6F02               	movwf	(_screen+2)& (0+255),b
  1904  002E10  0E00               	movlw	0
  1905  002E12  0101               	movlb	1	; () banked
  1906  002E14  6F03               	movwf	(_screen+3)& (0+255),b
  1907                           
  1908                           ;disp.c: 68: screen.digits.bits[1] = 0;
  1909  002E16  0E00               	movlw	0
  1910  002E18  0101               	movlb	1	; () banked
  1911  002E1A  0101               	movlb	1	; () banked
  1912  002E1C  6F04               	movwf	(_screen+4)& (0+255),b
  1913  002E1E  0E00               	movlw	0
  1914  002E20  0101               	movlb	1	; () banked
  1915  002E22  6F05               	movwf	(_screen+5)& (0+255),b
  1916  002E24  0E00               	movlw	0
  1917  002E26  0101               	movlb	1	; () banked
  1918  002E28  6F06               	movwf	(_screen+6)& (0+255),b
  1919  002E2A  0E00               	movlw	0
  1920  002E2C  0101               	movlb	1	; () banked
  1921  002E2E  6F07               	movwf	(_screen+7)& (0+255),b
  1922                           
  1923                           ; BSR set to: 1
  1924                           ;disp.c: 70: setBrightness(0b1111);
  1925  002E30  0101               	movlb	1	; () banked
  1926  002E32  6F18               	movwf	??_startDisp& (0+255),b
  1927  002E34  0E0F               	movlw	15
  1928  002E36  0101               	movlb	1	; () banked
  1929  002E38  0101               	movlb	1	; () banked
  1930  002E3A  6F17               	movwf	?_setBrightness& (0+255),b
  1931  002E3C  0101               	movlb	1	; () banked
  1932  002E3E  5118               	movf	??_startDisp& (0+255),w,b
  1933  002E40  EC4A  F01C         	call	_setBrightness	;wreg free
  1934                           
  1935                           ;disp.c: 72: screen.decode = 0;
  1936  002E44  0101               	movlb	1	; () banked
  1937  002E46  9108               	bcf	(_screen+8)& (0+255),0,b
  1938  002E48  0101               	movlb	1	; () banked
  1939  002E4A  9308               	bcf	(_screen+8)& (0+255),1,b
  1940  002E4C  0101               	movlb	1	; () banked
  1941  002E4E  9508               	bcf	(_screen+8)& (0+255),2,b
  1942  002E50  0101               	movlb	1	; () banked
  1943  002E52  9708               	bcf	(_screen+8)& (0+255),3,b
  1944  002E54  0101               	movlb	1	; () banked
  1945  002E56  9908               	bcf	(_screen+8)& (0+255),4,b
  1946  002E58  0101               	movlb	1	; () banked
  1947  002E5A  9B08               	bcf	(_screen+8)& (0+255),5,b
  1948  002E5C  0101               	movlb	1	; () banked
  1949  002E5E  9D08               	bcf	(_screen+8)& (0+255),6,b
  1950  002E60  0101               	movlb	1	; () banked
  1951  002E62  9F08               	bcf	(_screen+8)& (0+255),7,b
  1952                           
  1953                           ; BSR set to: 1
  1954                           ;disp.c: 74: screen.scan = 0b111;
  1955  002E64  0101               	movlb	1	; () banked
  1956  002E66  8909               	bsf	(_screen+9)& (0+255),4,b
  1957  002E68  0101               	movlb	1	; () banked
  1958  002E6A  8B09               	bsf	(_screen+9)& (0+255),5,b
  1959  002E6C  0101               	movlb	1	; () banked
  1960  002E6E  8D09               	bsf	(_screen+9)& (0+255),6,b
  1961                           
  1962                           ; BSR set to: 1
  1963                           ;disp.c: 76: setTest(0);
  1964  002E70  0101               	movlb	1	; () banked
  1965  002E72  6F18               	movwf	??_startDisp& (0+255),b
  1966  002E74  0E00               	movlw	0
  1967  002E76  0101               	movlb	1	; () banked
  1968  002E78  0101               	movlb	1	; () banked
  1969  002E7A  6F17               	movwf	?_setTest& (0+255),b
  1970  002E7C  0101               	movlb	1	; () banked
  1971  002E7E  5118               	movf	??_startDisp& (0+255),w,b
  1972  002E80  EC5A  F01C         	call	_setTest	;wreg free
  1973                           
  1974                           ;disp.c: 78: screen.shutdown = 0;
  1975  002E84  0101               	movlb	1	; () banked
  1976  002E86  0101               	movlb	1	; () banked
  1977  002E88  910A               	bcf	(_screen+10)& (0+255),0,b
  1978                           
  1979                           ; BSR set to: 1
  1980                           ;disp.c: 80: screen.changed = 0xFFFF;
  1981  002E8A  0101               	movlb	1	; () banked
  1982  002E8C  0101               	movlb	1	; () banked
  1983  002E8E  690B               	setf	(_screen+11)& (0+255),b
  1984  002E90  0101               	movlb	1	; () banked
  1985  002E92  690C               	setf	(_screen+12)& (0+255),b
  1986                           
  1987                           ; BSR set to: 1
  1988  002E94  0012               	return	
  1989  002E96                     __end_of_startDisp:
  1990                           	opt stack 0
  1991                           tblptru	equ	0xFF8
  1992                           tblptrh	equ	0xFF7
  1993                           tblptrl	equ	0xFF6
  1994                           tablat	equ	0xFF5
  1995                           intcon	equ	0xFF2
  1996                           intcon2	equ	0xFF1
  1997                           postinc0	equ	0xFEE
  1998                           wreg	equ	0xFE8
  1999                           postdec1	equ	0xFE5
  2000                           fsr1l	equ	0xFE1
  2001                           status	equ	0xFD8
  2002                           
  2003 ;; *************** function _setTest *****************
  2004 ;; Defined at:
  2005 ;;		line 53 in file "disp.c"
  2006 ;; Parameters:    Size  Location     Type
  2007 ;;  state           1    0[BANK1 ] unsigned char 
  2008 ;; Auto vars:     Size  Location     Type
  2009 ;;		None
  2010 ;; Return value:  Size  Location     Type
  2011 ;;		None               void
  2012 ;; Registers used:
  2013 ;;		status,2, status,0
  2014 ;; Tracked objects:
  2015 ;;		On entry : 0/0
  2016 ;;		On exit  : 0/0
  2017 ;;		Unchanged: 0/0
  2018 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2019 ;;      Params:         0       0       1       0       0       0       0       0       0
  2020 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2021 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2022 ;;      Totals:         0       0       1       0       0       0       0       0       0
  2023 ;;Total ram usage:        1 bytes
  2024 ;; Hardware stack levels used:    1
  2025 ;; Hardware stack levels required when called:    8
  2026 ;; This function calls:
  2027 ;;		Nothing
  2028 ;; This function is called by:
  2029 ;;		_startDisp
  2030 ;; This function uses a non-reentrant model
  2031 ;;
  2032                           
  2033                           	psect	text7
  2034  0038B4                     __ptext7:
  2035                           	opt stack 0
  2036  0038B4                     _setTest:
  2037                           	opt stack 19
  2038                           
  2039                           ;disp.c: 54: screen.test = state;
  2040                           
  2041                           ; BSR set to: 1
  2042                           ;incstack = 0
  2043                           ;incstack = 0
  2044  0038B4  0101               	movlb	1	; () banked
  2045  0038B6  0101               	movlb	1	; () banked
  2046  0038B8  B117               	btfsc	setTest@state& (0+255),0,b
  2047  0038BA  D004               	bra	u4785
  2048  0038BC  0101               	movlb	1	; () banked
  2049  0038BE  0101               	movlb	1	; () banked
  2050  0038C0  9F09               	bcf	(_screen+9)& (0+255),7,b
  2051  0038C2  D003               	bra	u4786
  2052  0038C4                     u4785:
  2053  0038C4  0101               	movlb	1	; () banked
  2054  0038C6  0101               	movlb	1	; () banked
  2055  0038C8  8F09               	bsf	(_screen+9)& (0+255),7,b
  2056  0038CA                     u4786:
  2057                           
  2058                           ; BSR set to: 1
  2059                           ;disp.c: 55: screen.changed |= (1 << 12);
  2060  0038CA  0101               	movlb	1	; () banked
  2061  0038CC  0101               	movlb	1	; () banked
  2062  0038CE  890C               	bsf	(_screen+12)& (0+255),4,b
  2063                           
  2064                           ; BSR set to: 1
  2065  0038D0  0012               	return	
  2066  0038D2                     __end_of_setTest:
  2067                           	opt stack 0
  2068                           tblptru	equ	0xFF8
  2069                           tblptrh	equ	0xFF7
  2070                           tblptrl	equ	0xFF6
  2071                           tablat	equ	0xFF5
  2072                           intcon	equ	0xFF2
  2073                           intcon2	equ	0xFF1
  2074                           postinc0	equ	0xFEE
  2075                           wreg	equ	0xFE8
  2076                           postdec1	equ	0xFE5
  2077                           fsr1l	equ	0xFE1
  2078                           status	equ	0xFD8
  2079                           
  2080 ;; *************** function _setBrightness *****************
  2081 ;; Defined at:
  2082 ;;		line 46 in file "disp.c"
  2083 ;; Parameters:    Size  Location     Type
  2084 ;;  bright          1    0[BANK1 ] unsigned char 
  2085 ;; Auto vars:     Size  Location     Type
  2086 ;;		None
  2087 ;; Return value:  Size  Location     Type
  2088 ;;		None               void
  2089 ;; Registers used:
  2090 ;;		wreg, status,2, status,0
  2091 ;; Tracked objects:
  2092 ;;		On entry : 0/0
  2093 ;;		On exit  : 0/0
  2094 ;;		Unchanged: 0/0
  2095 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2096 ;;      Params:         0       0       1       0       0       0       0       0       0
  2097 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2098 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2099 ;;      Totals:         0       0       1       0       0       0       0       0       0
  2100 ;;Total ram usage:        1 bytes
  2101 ;; Hardware stack levels used:    1
  2102 ;; Hardware stack levels required when called:    8
  2103 ;; This function calls:
  2104 ;;		Nothing
  2105 ;; This function is called by:
  2106 ;;		_startDisp
  2107 ;; This function uses a non-reentrant model
  2108 ;;
  2109                           
  2110                           	psect	text8
  2111  003894                     __ptext8:
  2112                           	opt stack 0
  2113  003894                     _setBrightness:
  2114                           	opt stack 19
  2115                           
  2116                           ;disp.c: 47: screen.brightness = bright;
  2117                           
  2118                           ; BSR set to: 1
  2119                           ;incstack = 0
  2120                           ;incstack = 0
  2121  003894  0101               	movlb	1	; () banked
  2122  003896  0101               	movlb	1	; () banked
  2123  003898  5109               	movf	(_screen+9)& (0+255),w,b
  2124  00389A  0101               	movlb	1	; () banked
  2125  00389C  0101               	movlb	1	; () banked
  2126  00389E  1917               	xorwf	setBrightness@bright& (0+255),w,b
  2127  0038A0  0BF0               	andlw	-16
  2128  0038A2  0101               	movlb	1	; () banked
  2129  0038A4  1917               	xorwf	setBrightness@bright& (0+255),w,b
  2130  0038A6  0101               	movlb	1	; () banked
  2131  0038A8  0101               	movlb	1	; () banked
  2132  0038AA  6F09               	movwf	(_screen+9)& (0+255),b
  2133                           
  2134                           ; BSR set to: 1
  2135                           ;disp.c: 48: screen.changed |= (1 << 10);
  2136  0038AC  0101               	movlb	1	; () banked
  2137  0038AE  0101               	movlb	1	; () banked
  2138  0038B0  850C               	bsf	(_screen+12)& (0+255),2,b
  2139                           
  2140                           ; BSR set to: 1
  2141  0038B2  0012               	return	
  2142  0038B4                     __end_of_setBrightness:
  2143                           	opt stack 0
  2144                           tblptru	equ	0xFF8
  2145                           tblptrh	equ	0xFF7
  2146                           tblptrl	equ	0xFF6
  2147                           tablat	equ	0xFF5
  2148                           intcon	equ	0xFF2
  2149                           intcon2	equ	0xFF1
  2150                           postinc0	equ	0xFEE
  2151                           wreg	equ	0xFE8
  2152                           postdec1	equ	0xFE5
  2153                           fsr1l	equ	0xFE1
  2154                           status	equ	0xFD8
  2155                           
  2156 ;; *************** function _high_isr *****************
  2157 ;; Defined at:
  2158 ;;		line 70 in file "main.c"
  2159 ;; Parameters:    Size  Location     Type
  2160 ;;		None
  2161 ;; Auto vars:     Size  Location     Type
  2162 ;;		None
  2163 ;; Return value:  Size  Location     Type
  2164 ;;		None               void
  2165 ;; Registers used:
  2166 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, tosl, tblptrl, tblptrh, tblptru, prodl, p
      +rodh, cstack
  2167 ;; Tracked objects:
  2168 ;;		On entry : 0/0
  2169 ;;		On exit  : 0/0
  2170 ;;		Unchanged: 0/0
  2171 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2172 ;;      Params:         0       0       0       0       0       0       0       0       0
  2173 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2174 ;;      Temps:          0      15       0       0       0       0       0       0       0
  2175 ;;      Totals:         0      15       0       0       0       0       0       0       0
  2176 ;;Total ram usage:       15 bytes
  2177 ;; Hardware stack levels used:    1
  2178 ;; Hardware stack levels required when called:    7
  2179 ;; This function calls:
  2180 ;;		_tick
  2181 ;;		_update
  2182 ;;		_buttons
  2183 ;;		_printRTC
  2184 ;;		_printTemp
  2185 ;;		Absolute function
  2186 ;; This function is called by:
  2187 ;;		Interrupt level 2
  2188 ;; This function uses a non-reentrant model
  2189 ;;
  2190                           
  2191                           	psect	intcode
  2192  000008                     __pintcode:
  2193                           	opt stack 0
  2194  000008                     _high_isr:
  2195                           	opt stack 19
  2196                           
  2197                           ; BSR set to: 1
  2198                           ;incstack = 0
  2199  000008  CFFA F0A2          	movff	pclath,??_high_isr+1
  2200  00000C  CFFB F0A3          	movff	pclatu,??_high_isr+2
  2201  000010  CFE9 F0A4          	movff	fsr0l,??_high_isr+3
  2202  000014  ED32  F012         	call	int_func,f	;refresh shadow registers
  2203                           pclatu	equ	0xFFB
  2204                           pclath	equ	0xFFA
  2205                           tblptru	equ	0xFF8
  2206                           tblptrh	equ	0xFF7
  2207                           tblptrl	equ	0xFF6
  2208                           tablat	equ	0xFF5
  2209                           intcon	equ	0xFF2
  2210                           intcon2	equ	0xFF1
  2211                           postinc0	equ	0xFEE
  2212                           fsr0l	equ	0xFE9
  2213                           wreg	equ	0xFE8
  2214                           postdec1	equ	0xFE5
  2215                           fsr1l	equ	0xFE1
  2216                           status	equ	0xFD8
  2217                           
  2218                           	psect	intcode_body
  2219  002464                     __pintcode_body:
  2220                           	opt stack 19
  2221  002464                     int_func:
  2222                           	opt stack 19
  2223  002464  0006               	pop		; remove dummy address from shadow register refresh
  2224  002466  CFEA F0A5          	movff	fsr0h,??_high_isr+4
  2225  00246A  CFE1 F0A6          	movff	fsr1l,??_high_isr+5
  2226  00246E  CFE2 F0A7          	movff	fsr1h,??_high_isr+6
  2227  002472  CFD9 F0A8          	movff	fsr2l,??_high_isr+7
  2228  002476  CFDA F0A9          	movff	fsr2h,??_high_isr+8
  2229  00247A  CFF3 F0AA          	movff	prodl,??_high_isr+9
  2230  00247E  CFF4 F0AB          	movff	prodh,??_high_isr+10
  2231  002482  CFF6 F0AC          	movff	tblptrl,??_high_isr+11
  2232  002486  CFF7 F0AD          	movff	tblptrh,??_high_isr+12
  2233  00248A  CFF8 F0AE          	movff	tblptru,??_high_isr+13
  2234  00248E  CFF5 F0AF          	movff	tablat,??_high_isr+14
  2235  002492                     
  2236                           ;main.c: 71: if (TMR1IE && TMR1IF) {
  2237  002492  A09D               	btfss	3997,0,c	;volatile
  2238  002494  D001               	goto	i2u922_41
  2239  002496  D001               	goto	i2u922_40
  2240  002498                     i2u922_41:
  2241  002498  D041               	goto	i2l9958
  2242  00249A                     i2u922_40:
  2243  00249A  A09E               	btfss	3998,0,c	;volatile
  2244  00249C  D001               	goto	i2u923_41
  2245  00249E  D001               	goto	i2u923_40
  2246  0024A0                     i2u923_41:
  2247  0024A0  D03D               	goto	i2l9958
  2248  0024A2                     i2u923_40:
  2249  0024A2                     
  2250                           ;main.c: 72: TMR1ON = 0;
  2251  0024A2  90CD               	bcf	4045,0,c	;volatile
  2252                           
  2253                           ;main.c: 73: TMR1IF = CLEAR;
  2254  0024A4  909E               	bcf	3998,0,c	;volatile
  2255  0024A6                     
  2256                           ;main.c: 74: TMR1 = 0;
  2257  0024A6  0E00               	movlw	0
  2258  0024A8  6ECF               	movwf	4047,c	;volatile
  2259  0024AA  0E00               	movlw	0
  2260  0024AC  6ECE               	movwf	4046,c	;volatile
  2261  0024AE                     
  2262                           ;main.c: 75: if (++rtc_big_ticks > (0)) {
  2263  0024AE  0100               	movlb	0	; () banked
  2264  0024B0  0100               	movlb	0	; () banked
  2265  0024B2  4BD2               	infsnz	_rtc_big_ticks& (0+255),f,b
  2266  0024B4  2BD3               	incf	(_rtc_big_ticks+1)& (0+255),f,b
  2267  0024B6  0100               	movlb	0	; () banked
  2268  0024B8  51D3               	movf	(_rtc_big_ticks+1)& (0+255),w,b
  2269  0024BA  11D2               	iorwf	_rtc_big_ticks& (0+255),w,b
  2270  0024BC  B4D8               	btfsc	status,2,c
  2271  0024BE  D001               	goto	i2u924_41
  2272  0024C0  D001               	goto	i2u924_40
  2273  0024C2                     i2u924_41:
  2274  0024C2  D02A               	goto	i2l9956
  2275  0024C4                     i2u924_40:
  2276  0024C4                     
  2277                           ; BSR set to: 0
  2278                           ;main.c: 76: LATA5 = ~LATA5;
  2279  0024C4  7A89               	btg	3977,5,c	;volatile
  2280  0024C6                     
  2281                           ; BSR set to: 0
  2282                           ;main.c: 77: rtc_big_ticks = 0;
  2283  0024C6  0E00               	movlw	0
  2284  0024C8  0100               	movlb	0	; () banked
  2285  0024CA  0100               	movlb	0	; () banked
  2286  0024CC  6FD3               	movwf	(_rtc_big_ticks+1)& (0+255),b
  2287  0024CE  0E00               	movlw	0
  2288  0024D0  0100               	movlb	0	; () banked
  2289  0024D2  6FD2               	movwf	_rtc_big_ticks& (0+255),b
  2290  0024D4                     
  2291                           ; BSR set to: 0
  2292                           ;main.c: 78: TMR1 = (65536-1);
  2293  0024D4  68CE               	setf	4046,c	;volatile
  2294  0024D6  68CF               	setf	4047,c	;volatile
  2295  0024D8                     
  2296                           ; BSR set to: 0
  2297                           ;main.c: 79: tick(day);
  2298  0024D8  0100               	movlb	0	; () banked
  2299  0024DA  6FA1               	movwf	??_high_isr& (0+255),b
  2300  0024DC  0E03               	movlw	3
  2301  0024DE  6E0C               	movwf	?_tick,c
  2302  0024E0  0100               	movlb	0	; () banked
  2303  0024E2  51A1               	movf	??_high_isr& (0+255),w,b
  2304  0024E4  ECE5  F015         	call	_tick	;wreg free
  2305  0024E8                     
  2306                           ;main.c: 80: printFn(0b11111111);
  2307  0024E8  0100               	movlb	0	; () banked
  2308  0024EA  6FA1               	movwf	??_high_isr& (0+255),b
  2309  0024EC  0EFF               	movlw	255
  2310  0024EE  6E5F               	movwf	?_printTemp,c
  2311  0024F0  0100               	movlb	0	; () banked
  2312  0024F2  51A1               	movf	??_high_isr& (0+255),w,b
  2313  0024F4  D801               	call	i2u925_48
  2314  0024F6  D00D               	goto	i2u925_49
  2315  0024F8                     i2u925_48:
  2316  0024F8  0005               	push	
  2317  0024FA  0100               	movlb	0	; () banked
  2318  0024FC  6EFA               	movwf	pclath,c
  2319  0024FE  0100               	movlb	0	; () banked
  2320  002500  51EE               	movf	_printFn& (0+255),w,b
  2321  002502  6EFD               	movwf	tosl,c
  2322  002504  0100               	movlb	0	; () banked
  2323  002506  51EF               	movf	(_printFn+1)& (0+255),w,b
  2324  002508  6EFE               	movwf	tosh,c
  2325  00250A  50F8               	movf	tblptru,w,c
  2326  00250C  6EFF               	movwf	tosu,c
  2327  00250E  50FA               	movf	pclath,w,c
  2328  002510  0012               	return		;indir
  2329  002512                     i2u925_49:
  2330  002512                     
  2331                           ;main.c: 81: update();
  2332  002512  ECC7  F007         	call	_update	;wreg free
  2333  002516  D000               	goto	i2l9956
  2334  002518                     i2l9956:
  2335                           
  2336                           ;main.c: 82: }
  2337                           ;main.c: 83: TMR1ON = 1;
  2338  002518  80CD               	bsf	4045,0,c	;volatile
  2339  00251A  D000               	goto	i2l9958
  2340  00251C                     i2l9958:
  2341                           
  2342                           ;main.c: 84: }
  2343                           ;main.c: 85: if (TMR0IE && TMR0IF) {
  2344  00251C  AAF2               	btfss	intcon,5,c	;volatile
  2345  00251E  D001               	goto	i2u926_41
  2346  002520  D001               	goto	i2u926_40
  2347  002522                     i2u926_41:
  2348  002522  D030               	goto	i2l79
  2349  002524                     i2u926_40:
  2350  002524  A4F2               	btfss	intcon,2,c	;volatile
  2351  002526  D001               	goto	i2u927_41
  2352  002528  D001               	goto	i2u927_40
  2353  00252A                     i2u927_41:
  2354  00252A  D02C               	goto	i2l79
  2355  00252C                     i2u927_40:
  2356  00252C                     
  2357                           ;main.c: 86: TMR0IF = CLEAR;
  2358  00252C  94F2               	bcf	intcon,2,c	;volatile
  2359                           
  2360                           ;main.c: 87: TMR0ON = 0;
  2361  00252E  9ED5               	bcf	4053,7,c	;volatile
  2362  002530                     
  2363                           ;main.c: 88: TMR0 = 0;
  2364  002530  0E00               	movlw	0
  2365  002532  6ED7               	movwf	4055,c	;volatile
  2366  002534  0E00               	movlw	0
  2367  002536  6ED6               	movwf	4054,c	;volatile
  2368  002538                     
  2369                           ;main.c: 89: if (++tmr0BigCounts > 4) {
  2370  002538  0E01               	movlw	1
  2371  00253A  0100               	movlb	0	; () banked
  2372  00253C  0100               	movlb	0	; () banked
  2373  00253E  27CE               	addwf	_tmr0BigCounts& (0+255),f,b
  2374  002540  0E00               	movlw	0
  2375  002542  0100               	movlb	0	; () banked
  2376  002544  23CF               	addwfc	(_tmr0BigCounts+1)& (0+255),f,b
  2377  002546  0E00               	movlw	0
  2378  002548  0100               	movlb	0	; () banked
  2379  00254A  23D0               	addwfc	(_tmr0BigCounts+2)& (0+255),f,b
  2380  00254C  0E00               	movlw	0
  2381  00254E  0100               	movlb	0	; () banked
  2382  002550  23D1               	addwfc	(_tmr0BigCounts+3)& (0+255),f,b
  2383  002552  0E05               	movlw	5
  2384  002554  0100               	movlb	0	; () banked
  2385  002556  5DCE               	subwf	_tmr0BigCounts& (0+255),w,b
  2386  002558  0E00               	movlw	0
  2387  00255A  0100               	movlb	0	; () banked
  2388  00255C  59CF               	subwfb	(_tmr0BigCounts+1)& (0+255),w,b
  2389  00255E  0E00               	movlw	0
  2390  002560  0100               	movlb	0	; () banked
  2391  002562  59D0               	subwfb	(_tmr0BigCounts+2)& (0+255),w,b
  2392  002564  0E00               	movlw	0
  2393  002566  0100               	movlb	0	; () banked
  2394  002568  59D1               	subwfb	(_tmr0BigCounts+3)& (0+255),w,b
  2395  00256A  A0D8               	btfss	status,0,c
  2396  00256C  D001               	goto	i2u928_41
  2397  00256E  D001               	goto	i2u928_40
  2398  002570                     i2u928_41:
  2399  002570  D007               	goto	i2l9972
  2400  002572                     i2u928_40:
  2401  002572                     
  2402                           ; BSR set to: 0
  2403                           ;main.c: 90: buttons();
  2404  002572  ECF8  F013         	call	_buttons	;wreg free
  2405  002576                     
  2406                           ;main.c: 91: TMR0 = (65536-50356);
  2407  002576  0E3B               	movlw	59
  2408  002578  6ED7               	movwf	4055,c	;volatile
  2409  00257A  0E4C               	movlw	76
  2410  00257C  6ED6               	movwf	4054,c	;volatile
  2411  00257E  D000               	goto	i2l9972
  2412  002580                     i2l9972:
  2413                           
  2414                           ;main.c: 92: }
  2415                           ;main.c: 93: TMR0ON = 1;
  2416  002580  8ED5               	bsf	4053,7,c	;volatile
  2417  002582  D000               	goto	i2l79
  2418  002584                     i2l79:
  2419  002584  C0AF  FFF5         	movff	??_high_isr+14,tablat
  2420  002588  C0AE  FFF8         	movff	??_high_isr+13,tblptru
  2421  00258C  C0AD  FFF7         	movff	??_high_isr+12,tblptrh
  2422  002590  C0AC  FFF6         	movff	??_high_isr+11,tblptrl
  2423  002594  C0AB  FFF4         	movff	??_high_isr+10,prodh
  2424  002598  C0AA  FFF3         	movff	??_high_isr+9,prodl
  2425  00259C  C0A9  FFDA         	movff	??_high_isr+8,fsr2h
  2426  0025A0  C0A8  FFD9         	movff	??_high_isr+7,fsr2l
  2427  0025A4  C0A7  FFE2         	movff	??_high_isr+6,fsr1h
  2428  0025A8  C0A6  FFE1         	movff	??_high_isr+5,fsr1l
  2429  0025AC  C0A5  FFEA         	movff	??_high_isr+4,fsr0h
  2430  0025B0  C0A4  FFE9         	movff	??_high_isr+3,fsr0l
  2431  0025B4  C0A3  FFFB         	movff	??_high_isr+2,pclatu
  2432  0025B8  C0A2  FFFA         	movff	??_high_isr+1,pclath
  2433  0025BC  0011               	retfie		f
  2434  0025BE                     __end_of_high_isr:
  2435                           	opt stack 0
  2436                           tosu	equ	0xFFF
  2437                           tosh	equ	0xFFE
  2438                           tosl	equ	0xFFD
  2439                           pclatu	equ	0xFFB
  2440                           pclath	equ	0xFFA
  2441                           tblptru	equ	0xFF8
  2442                           tblptrh	equ	0xFF7
  2443                           tblptrl	equ	0xFF6
  2444                           tablat	equ	0xFF5
  2445                           prodh	equ	0xFF4
  2446                           prodl	equ	0xFF3
  2447                           intcon	equ	0xFF2
  2448                           intcon2	equ	0xFF1
  2449                           postinc0	equ	0xFEE
  2450                           fsr0h	equ	0xFEA
  2451                           fsr0l	equ	0xFE9
  2452                           wreg	equ	0xFE8
  2453                           postdec1	equ	0xFE5
  2454                           fsr1h	equ	0xFE2
  2455                           fsr1l	equ	0xFE1
  2456                           fsr2h	equ	0xFDA
  2457                           fsr2l	equ	0xFD9
  2458                           status	equ	0xFD8
  2459                           
  2460 ;; *************** function _printRTC *****************
  2461 ;; Defined at:
  2462 ;;		line 162 in file "RTC.c"
  2463 ;; Parameters:    Size  Location     Type
  2464 ;;  digits          1   94[COMRAM] unsigned char 
  2465 ;; Auto vars:     Size  Location     Type
  2466 ;;  str             9   54[BANK0 ] unsigned char [9]
  2467 ;; Return value:  Size  Location     Type
  2468 ;;		None               void
  2469 ;; Registers used:
  2470 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2471 ;; Tracked objects:
  2472 ;;		On entry : 0/0
  2473 ;;		On exit  : 0/0
  2474 ;;		Unchanged: 0/0
  2475 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2476 ;;      Params:         1       0       0       0       0       0       0       0       0
  2477 ;;      Locals:         0      11       0       0       0       0       0       0       0
  2478 ;;      Temps:          0       2       0       0       0       0       0       0       0
  2479 ;;      Totals:         1      13       0       0       0       0       0       0       0
  2480 ;;Total ram usage:       14 bytes
  2481 ;; Hardware stack levels used:    1
  2482 ;; Hardware stack levels required when called:    5
  2483 ;; This function calls:
  2484 ;;		_countBits
  2485 ;;		_sprintf
  2486 ;;		_writeString
  2487 ;;		___lwmod
  2488 ;; This function is called by:
  2489 ;;		_setup
  2490 ;;		_buttons
  2491 ;;		_high_isr
  2492 ;; This function uses a non-reentrant model
  2493 ;;
  2494                           
  2495                           	psect	text10
  2496  001866                     __ptext10:
  2497                           	opt stack 0
  2498  001866                     _printRTC:
  2499                           	opt stack 20
  2500                           
  2501                           ;RTC.c: 163: char str[9] = "";
  2502                           
  2503                           ;incstack = 0
  2504                           ;incstack = 0
  2505  001866  EE20  F0BC         	lfsr	2,printRTC@F5050
  2506  00186A  EE10  F096         	lfsr	1,printRTC@str
  2507  00186E  0E09               	movlw	9
  2508  001870                     i2u921_41:
  2509  001870  CFDE FFE6          	movff	postinc2,postinc1
  2510  001874  2EE8               	decfsz	wreg,f,c
  2511  001876  D7FC               	goto	i2u921_41
  2512                           
  2513                           ;RTC.c: 164: switch (countBits(digits)) {
  2514  001878  D123               	goto	i2l9918
  2515  00187A                     i2l9882:
  2516                           
  2517                           ;RTC.c: 170: sprintf(&str, "%02d.%02d", date.hour, date.minute);
  2518  00187A  0100               	movlb	0	; () banked
  2519  00187C  0E00               	movlw	high printRTC@str
  2520  00187E  6E51               	movwf	?_sprintf+1,c
  2521  001880  0100               	movlb	0	; () banked
  2522  001882  0E96               	movlw	low printRTC@str
  2523  001884  6E50               	movwf	?_sprintf,c
  2524  001886  0E7D               	movlw	high (STR_19+5)
  2525  001888  6E53               	movwf	?_sprintf+3,c
  2526  00188A  0E69               	movlw	low (STR_19+5)
  2527  00188C  6E52               	movwf	?_sprintf+2,c
  2528  00188E  0101               	movlb	1	; () banked
  2529  001890  C10F  F054         	movff	_date+2,?_sprintf+4
  2530  001894  6A55               	clrf	?_sprintf+5,c
  2531  001896  0101               	movlb	1	; () banked
  2532  001898  C10E  F056         	movff	_date+1,?_sprintf+6
  2533  00189C  6A57               	clrf	?_sprintf+7,c
  2534  00189E  EC0E  F000         	call	_sprintf	;wreg free
  2535                           
  2536                           ;RTC.c: 171: break;
  2537  0018A2  D006               	goto	i2l9888
  2538  0018A4                     i2l9886:
  2539  0018A4  0101               	movlb	1	; () banked
  2540  0018A6  0101               	movlb	1	; () banked
  2541  0018A8  5116               	movf	(_date+9)& (0+255),w,b
  2542                           
  2543                           ; Switch size 1, requested type "space"
  2544                           ; Number of cases is 1, Range of values is 0 to 0
  2545                           ; switch strategies available:
  2546                           ; Name         Instructions Cycles
  2547                           ; simple_byte            4     3 (average)
  2548                           ;	Chosen strategy is simple_byte
  2549  0018AA  0A00               	xorlw	0	; case 0
  2550  0018AC  B4D8               	btfsc	status,2,c
  2551  0018AE  D7E5               	goto	i2l9882
  2552  0018B0                     i2l9888:
  2553                           
  2554                           ;RTC.c: 173: writeString(digits, &str);
  2555  0018B0  C05F  F01A         	movff	printRTC@digits,?_writeString
  2556  0018B4  0100               	movlb	0	; () banked
  2557  0018B6  0E00               	movlw	high printRTC@str
  2558  0018B8  6E1C               	movwf	?_writeString+2,c
  2559  0018BA  0100               	movlb	0	; () banked
  2560  0018BC  0E96               	movlw	low printRTC@str
  2561  0018BE  6E1B               	movwf	?_writeString+1,c
  2562  0018C0  ECB0  F010         	call	_writeString	;wreg free
  2563                           
  2564                           ;RTC.c: 174: break;
  2565  0018C4  D11F               	goto	i2l308
  2566  0018C6                     i2l9890:
  2567                           
  2568                           ;RTC.c: 178: sprintf(&str, "%02d.%02d.%02d", date.hour, date.minute, date.second);
  2569  0018C6  0100               	movlb	0	; () banked
  2570  0018C8  0E00               	movlw	high printRTC@str
  2571  0018CA  6E51               	movwf	?_sprintf+1,c
  2572  0018CC  0100               	movlb	0	; () banked
  2573  0018CE  0E96               	movlw	low printRTC@str
  2574  0018D0  6E50               	movwf	?_sprintf,c
  2575  0018D2  0E7D               	movlw	high STR_18
  2576  0018D4  6E53               	movwf	?_sprintf+3,c
  2577  0018D6  0E73               	movlw	low STR_18
  2578  0018D8  6E52               	movwf	?_sprintf+2,c
  2579  0018DA  0101               	movlb	1	; () banked
  2580  0018DC  C10F  F054         	movff	_date+2,?_sprintf+4
  2581  0018E0  6A55               	clrf	?_sprintf+5,c
  2582  0018E2  0101               	movlb	1	; () banked
  2583  0018E4  C10E  F056         	movff	_date+1,?_sprintf+6
  2584  0018E8  6A57               	clrf	?_sprintf+7,c
  2585  0018EA  0101               	movlb	1	; () banked
  2586  0018EC  C10D  F058         	movff	_date,?_sprintf+8
  2587  0018F0  6A59               	clrf	?_sprintf+9,c
  2588  0018F2  EC0E  F000         	call	_sprintf	;wreg free
  2589                           
  2590                           ;RTC.c: 179: break;
  2591  0018F6  D079               	goto	i2l9902
  2592  0018F8                     i2l9892:
  2593                           
  2594                           ;RTC.c: 181: sprintf(&str, "%c%c %02d.%02d", (dow[date.dow])[0], (dow[date.dow])[1], dat
      +                          e.minute, date.second);
  2595  0018F8  0100               	movlb	0	; () banked
  2596  0018FA  0E00               	movlw	high printRTC@str
  2597  0018FC  6E51               	movwf	?_sprintf+1,c
  2598  0018FE  0100               	movlb	0	; () banked
  2599  001900  0E96               	movlw	low printRTC@str
  2600  001902  6E50               	movwf	?_sprintf,c
  2601  001904  0E7D               	movlw	high STR_19
  2602  001906  6E53               	movwf	?_sprintf+3,c
  2603  001908  0E64               	movlw	low STR_19
  2604  00190A  6E52               	movwf	?_sprintf+2,c
  2605  00190C  0101               	movlb	1	; () banked
  2606  00190E  0101               	movlb	1	; () banked
  2607  001910  5111               	movf	(_date+4)& (0+255),w,b
  2608  001912  0D02               	mullw	2
  2609  001914  0100               	movlb	0	; () banked
  2610  001916  0ED7               	movlw	low _dow
  2611  001918  24F3               	addwf	prodl,w,c
  2612  00191A  6ED9               	movwf	fsr2l,c
  2613  00191C  0100               	movlb	0	; () banked
  2614  00191E  0E00               	movlw	high _dow
  2615  001920  20F4               	addwfc	prodh,w,c
  2616  001922  6EDA               	movwf	fsr2h,c
  2617  001924  CFDE FFF6          	movff	postinc2,tblptrl
  2618  001928  CFDD FFF7          	movff	postdec2,tblptrh
  2619  00192C  0008               	tblrd		*
  2620  00192E  50F5               	movf	tablat,w,c
  2621  001930  6E54               	movwf	?_sprintf+4,c
  2622  001932  6A55               	clrf	?_sprintf+5,c
  2623  001934  0101               	movlb	1	; () banked
  2624  001936  0101               	movlb	1	; () banked
  2625  001938  5111               	movf	(_date+4)& (0+255),w,b
  2626  00193A  0D02               	mullw	2
  2627  00193C  0100               	movlb	0	; () banked
  2628  00193E  0ED7               	movlw	low _dow
  2629  001940  24F3               	addwf	prodl,w,c
  2630  001942  6ED9               	movwf	fsr2l,c
  2631  001944  0100               	movlb	0	; () banked
  2632  001946  0E00               	movlw	high _dow
  2633  001948  20F4               	addwfc	prodh,w,c
  2634  00194A  6EDA               	movwf	fsr2h,c
  2635  00194C  CFDE F094          	movff	postinc2,??_printRTC
  2636  001950  CFDD F095          	movff	postdec2,??_printRTC+1
  2637  001954  0E01               	movlw	1
  2638  001956  0100               	movlb	0	; () banked
  2639  001958  2794               	addwf	??_printRTC& (0+255),f,b
  2640  00195A  0E00               	movlw	0
  2641  00195C  2395               	addwfc	(??_printRTC+1)& (0+255),f,b
  2642  00195E  C094  FFF6         	movff	??_printRTC,tblptrl
  2643  001962  C095  FFF7         	movff	??_printRTC+1,tblptrh
  2644  001966  0008               	tblrd		*
  2645  001968  50F5               	movf	tablat,w,c
  2646  00196A  6E56               	movwf	?_sprintf+6,c
  2647  00196C  6A57               	clrf	?_sprintf+7,c
  2648  00196E  0101               	movlb	1	; () banked
  2649  001970  C10E  F058         	movff	_date+1,?_sprintf+8
  2650  001974  6A59               	clrf	?_sprintf+9,c
  2651  001976  0101               	movlb	1	; () banked
  2652  001978  C10D  F05A         	movff	_date,?_sprintf+10
  2653  00197C  6A5B               	clrf	?_sprintf+11,c
  2654  00197E  EC0E  F000         	call	_sprintf	;wreg free
  2655                           
  2656                           ;RTC.c: 182: break;
  2657  001982  D033               	goto	i2l9902
  2658  001984                     i2l9894:
  2659                           
  2660                           ;RTC.c: 184: sprintf(&str, "%02d.%02d.%02d", date.day, date.month, date.year % 100);
  2661  001984  C113  F001         	movff	_date+6,?___lwmod
  2662  001988  C114  F002         	movff	_date+7,?___lwmod+1
  2663  00198C  0E00               	movlw	0
  2664  00198E  6E04               	movwf	?___lwmod+3,c
  2665  001990  0E64               	movlw	100
  2666  001992  6E03               	movwf	?___lwmod+2,c
  2667  001994  ECDD  F01A         	call	___lwmod	;wreg free
  2668  001998  C001  F09F         	movff	?___lwmod,_printRTC$1259
  2669  00199C  C002  F0A0         	movff	?___lwmod+1,_printRTC$1259+1
  2670                           
  2671                           ;RTC.c: 184: sprintf(&str, "%02d.%02d.%02d", date.day, date.month, date.year % 100);
  2672  0019A0  0100               	movlb	0	; () banked
  2673  0019A2  0E00               	movlw	high printRTC@str
  2674  0019A4  6E51               	movwf	?_sprintf+1,c
  2675  0019A6  0100               	movlb	0	; () banked
  2676  0019A8  0E96               	movlw	low printRTC@str
  2677  0019AA  6E50               	movwf	?_sprintf,c
  2678  0019AC  0E7D               	movlw	high STR_18
  2679  0019AE  6E53               	movwf	?_sprintf+3,c
  2680  0019B0  0E73               	movlw	low STR_18
  2681  0019B2  6E52               	movwf	?_sprintf+2,c
  2682  0019B4  0101               	movlb	1	; () banked
  2683  0019B6  C110  F054         	movff	_date+3,?_sprintf+4
  2684  0019BA  6A55               	clrf	?_sprintf+5,c
  2685  0019BC  0101               	movlb	1	; () banked
  2686  0019BE  C112  F056         	movff	_date+5,?_sprintf+6
  2687  0019C2  6A57               	clrf	?_sprintf+7,c
  2688  0019C4  C09F  F058         	movff	_printRTC$1259,?_sprintf+8
  2689  0019C8  C0A0  F059         	movff	_printRTC$1259+1,?_sprintf+9
  2690  0019CC  EC0E  F000         	call	_sprintf	;wreg free
  2691                           
  2692                           ;RTC.c: 185: break;
  2693  0019D0  D00C               	goto	i2l9902
  2694  0019D2                     i2l9900:
  2695  0019D2  0101               	movlb	1	; () banked
  2696  0019D4  0101               	movlb	1	; () banked
  2697  0019D6  5116               	movf	(_date+9)& (0+255),w,b
  2698                           
  2699                           ; Switch size 1, requested type "space"
  2700                           ; Number of cases is 3, Range of values is 1 to 20
  2701                           ; switch strategies available:
  2702                           ; Name         Instructions Cycles
  2703                           ; simple_byte           10     6 (average)
  2704                           ;	Chosen strategy is simple_byte
  2705  0019D8  0A01               	xorlw	1	; case 1
  2706  0019DA  B4D8               	btfsc	status,2,c
  2707  0019DC  D774               	goto	i2l9890
  2708  0019DE  0A02               	xorlw	2	; case 3
  2709  0019E0  B4D8               	btfsc	status,2,c
  2710  0019E2  D78A               	goto	i2l9892
  2711  0019E4  0A17               	xorlw	23	; case 20
  2712  0019E6  B4D8               	btfsc	status,2,c
  2713  0019E8  D7CD               	goto	i2l9894
  2714  0019EA                     i2l9902:
  2715                           
  2716                           ;RTC.c: 188: writeString(digits, &str);
  2717  0019EA  C05F  F01A         	movff	printRTC@digits,?_writeString
  2718  0019EE  0100               	movlb	0	; () banked
  2719  0019F0  0E00               	movlw	high printRTC@str
  2720  0019F2  6E1C               	movwf	?_writeString+2,c
  2721  0019F4  0100               	movlb	0	; () banked
  2722  0019F6  0E96               	movlw	low printRTC@str
  2723  0019F8  6E1B               	movwf	?_writeString+1,c
  2724  0019FA  ECB0  F010         	call	_writeString	;wreg free
  2725                           
  2726                           ;RTC.c: 189: break;
  2727  0019FE  D082               	goto	i2l308
  2728  001A00                     i2l9904:
  2729                           
  2730                           ;RTC.c: 193: sprintf(&str, "%s %02d.%02d", (dow[date.dow]), date.hour, date.minute);
  2731  001A00  0100               	movlb	0	; () banked
  2732  001A02  0E00               	movlw	high printRTC@str
  2733  001A04  6E51               	movwf	?_sprintf+1,c
  2734  001A06  0100               	movlb	0	; () banked
  2735  001A08  0E96               	movlw	low printRTC@str
  2736  001A0A  6E50               	movwf	?_sprintf,c
  2737  001A0C  0E7D               	movlw	high STR_21
  2738  001A0E  6E53               	movwf	?_sprintf+3,c
  2739  001A10  0E82               	movlw	low STR_21
  2740  001A12  6E52               	movwf	?_sprintf+2,c
  2741  001A14  0101               	movlb	1	; () banked
  2742  001A16  0101               	movlb	1	; () banked
  2743  001A18  5111               	movf	(_date+4)& (0+255),w,b
  2744  001A1A  0D02               	mullw	2
  2745  001A1C  0100               	movlb	0	; () banked
  2746  001A1E  0ED7               	movlw	low _dow
  2747  001A20  24F3               	addwf	prodl,w,c
  2748  001A22  6ED9               	movwf	fsr2l,c
  2749  001A24  0100               	movlb	0	; () banked
  2750  001A26  0E00               	movlw	high _dow
  2751  001A28  20F4               	addwfc	prodh,w,c
  2752  001A2A  6EDA               	movwf	fsr2h,c
  2753  001A2C  CFDE F054          	movff	postinc2,?_sprintf+4
  2754  001A30  CFDD F055          	movff	postdec2,?_sprintf+5
  2755  001A34  0101               	movlb	1	; () banked
  2756  001A36  C10F  F056         	movff	_date+2,?_sprintf+6
  2757  001A3A  6A57               	clrf	?_sprintf+7,c
  2758  001A3C  0101               	movlb	1	; () banked
  2759  001A3E  C10E  F058         	movff	_date+1,?_sprintf+8
  2760  001A42  6A59               	clrf	?_sprintf+9,c
  2761  001A44  EC0E  F000         	call	_sprintf	;wreg free
  2762                           
  2763                           ;RTC.c: 194: break;
  2764  001A48  D030               	goto	i2l9914
  2765  001A4A                     i2l9906:
  2766                           
  2767                           ;RTC.c: 196: sprintf(&str, "%02d %02d %02d", date.day, date.month, date.year % 100);
  2768  001A4A  C113  F001         	movff	_date+6,?___lwmod
  2769  001A4E  C114  F002         	movff	_date+7,?___lwmod+1
  2770  001A52  0E00               	movlw	0
  2771  001A54  6E04               	movwf	?___lwmod+3,c
  2772  001A56  0E64               	movlw	100
  2773  001A58  6E03               	movwf	?___lwmod+2,c
  2774  001A5A  ECDD  F01A         	call	___lwmod	;wreg free
  2775  001A5E  C001  F09F         	movff	?___lwmod,_printRTC$1259
  2776  001A62  C002  F0A0         	movff	?___lwmod+1,_printRTC$1259+1
  2777                           
  2778                           ;RTC.c: 196: sprintf(&str, "%02d %02d %02d", date.day, date.month, date.year % 100);
  2779  001A66  0100               	movlb	0	; () banked
  2780  001A68  0E00               	movlw	high printRTC@str
  2781  001A6A  6E51               	movwf	?_sprintf+1,c
  2782  001A6C  0100               	movlb	0	; () banked
  2783  001A6E  0E96               	movlw	low printRTC@str
  2784  001A70  6E50               	movwf	?_sprintf,c
  2785  001A72  0E7D               	movlw	high STR_22
  2786  001A74  6E53               	movwf	?_sprintf+3,c
  2787  001A76  0E55               	movlw	low STR_22
  2788  001A78  6E52               	movwf	?_sprintf+2,c
  2789  001A7A  0101               	movlb	1	; () banked
  2790  001A7C  C110  F054         	movff	_date+3,?_sprintf+4
  2791  001A80  6A55               	clrf	?_sprintf+5,c
  2792  001A82  0101               	movlb	1	; () banked
  2793  001A84  C112  F056         	movff	_date+5,?_sprintf+6
  2794  001A88  6A57               	clrf	?_sprintf+7,c
  2795  001A8A  C09F  F058         	movff	_printRTC$1259,?_sprintf+8
  2796  001A8E  C0A0  F059         	movff	_printRTC$1259+1,?_sprintf+9
  2797  001A92  EC0E  F000         	call	_sprintf	;wreg free
  2798                           
  2799                           ;RTC.c: 197: break;
  2800  001A96  D009               	goto	i2l9914
  2801  001A98                     i2l9912:
  2802  001A98  0101               	movlb	1	; () banked
  2803  001A9A  0101               	movlb	1	; () banked
  2804  001A9C  5116               	movf	(_date+9)& (0+255),w,b
  2805                           
  2806                           ; Switch size 1, requested type "space"
  2807                           ; Number of cases is 2, Range of values is 2 to 21
  2808                           ; switch strategies available:
  2809                           ; Name         Instructions Cycles
  2810                           ; simple_byte            7     4 (average)
  2811                           ;	Chosen strategy is simple_byte
  2812  001A9E  0A02               	xorlw	2	; case 2
  2813  001AA0  B4D8               	btfsc	status,2,c
  2814  001AA2  D7AE               	goto	i2l9904
  2815  001AA4  0A17               	xorlw	23	; case 21
  2816  001AA6  B4D8               	btfsc	status,2,c
  2817  001AA8  D7D0               	goto	i2l9906
  2818  001AAA                     i2l9914:
  2819                           
  2820                           ;RTC.c: 200: writeString(digits, &str);
  2821  001AAA  C05F  F01A         	movff	printRTC@digits,?_writeString
  2822  001AAE  0100               	movlb	0	; () banked
  2823  001AB0  0E00               	movlw	high printRTC@str
  2824  001AB2  6E1C               	movwf	?_writeString+2,c
  2825  001AB4  0100               	movlb	0	; () banked
  2826  001AB6  0E96               	movlw	low printRTC@str
  2827  001AB8  6E1B               	movwf	?_writeString+1,c
  2828  001ABA  ECB0  F010         	call	_writeString	;wreg free
  2829                           
  2830                           ;RTC.c: 201: break;
  2831  001ABE  D022               	goto	i2l308
  2832  001AC0                     i2l9918:
  2833  001AC0  505F               	movf	printRTC@digits,w,c
  2834  001AC2  6E01               	movwf	?_countBits,c
  2835  001AC4  6A02               	clrf	?_countBits+1,c
  2836  001AC6  6A03               	clrf	?_countBits+2,c
  2837  001AC8  6A04               	clrf	?_countBits+3,c
  2838  001ACA  EC11  F01C         	call	_countBits	;wreg free
  2839                           
  2840                           ; Switch size 1, requested type "space"
  2841                           ; Number of cases is 9, Range of values is 0 to 8
  2842                           ; switch strategies available:
  2843                           ; Name         Instructions Cycles
  2844                           ; simple_byte           28    15 (average)
  2845                           ;	Chosen strategy is simple_byte
  2846  001ACE  0A00               	xorlw	0	; case 0
  2847  001AD0  B4D8               	btfsc	status,2,c
  2848  001AD2  D018               	goto	i2l308
  2849  001AD4  0A01               	xorlw	1	; case 1
  2850  001AD6  B4D8               	btfsc	status,2,c
  2851  001AD8  D015               	goto	i2l308
  2852  001ADA  0A03               	xorlw	3	; case 2
  2853  001ADC  B4D8               	btfsc	status,2,c
  2854  001ADE  D012               	goto	i2l308
  2855  001AE0  0A01               	xorlw	1	; case 3
  2856  001AE2  B4D8               	btfsc	status,2,c
  2857  001AE4  D00F               	goto	i2l308
  2858  001AE6  0A07               	xorlw	7	; case 4
  2859  001AE8  B4D8               	btfsc	status,2,c
  2860  001AEA  D6DC               	goto	i2l9886
  2861  001AEC  0A01               	xorlw	1	; case 5
  2862  001AEE  B4D8               	btfsc	status,2,c
  2863  001AF0  D6D9               	goto	i2l9886
  2864  001AF2  0A03               	xorlw	3	; case 6
  2865  001AF4  B4D8               	btfsc	status,2,c
  2866  001AF6  D76D               	goto	i2l9900
  2867  001AF8  0A01               	xorlw	1	; case 7
  2868  001AFA  B4D8               	btfsc	status,2,c
  2869  001AFC  D76A               	goto	i2l9900
  2870  001AFE  0A0F               	xorlw	15	; case 8
  2871  001B00  B4D8               	btfsc	status,2,c
  2872  001B02  D7CA               	goto	i2l9912
  2873  001B04                     i2l308:
  2874  001B04  0012               	return	
  2875  001B06                     __end_of_printRTC:
  2876                           	opt stack 0
  2877                           tosu	equ	0xFFF
  2878                           tosh	equ	0xFFE
  2879                           tosl	equ	0xFFD
  2880                           pclatu	equ	0xFFB
  2881                           pclath	equ	0xFFA
  2882                           tblptru	equ	0xFF8
  2883                           tblptrh	equ	0xFF7
  2884                           tblptrl	equ	0xFF6
  2885                           tablat	equ	0xFF5
  2886                           prodh	equ	0xFF4
  2887                           prodl	equ	0xFF3
  2888                           intcon	equ	0xFF2
  2889                           intcon2	equ	0xFF1
  2890                           postinc0	equ	0xFEE
  2891                           fsr0h	equ	0xFEA
  2892                           fsr0l	equ	0xFE9
  2893                           wreg	equ	0xFE8
  2894                           postinc1	equ	0xFE6
  2895                           postdec1	equ	0xFE5
  2896                           fsr1h	equ	0xFE2
  2897                           fsr1l	equ	0xFE1
  2898                           postinc2	equ	0xFDE
  2899                           postdec2	equ	0xFDD
  2900                           fsr2h	equ	0xFDA
  2901                           fsr2l	equ	0xFD9
  2902                           status	equ	0xFD8
  2903                           
  2904 ;; *************** function _printTemp *****************
  2905 ;; Defined at:
  2906 ;;		line 57 in file "temp.c"
  2907 ;; Parameters:    Size  Location     Type
  2908 ;;  digits          1   94[COMRAM] unsigned char 
  2909 ;; Auto vars:     Size  Location     Type
  2910 ;;  units           1   57[BANK0 ] unsigned char 
  2911 ;; Return value:  Size  Location     Type
  2912 ;;		None               void
  2913 ;; Registers used:
  2914 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2915 ;; Tracked objects:
  2916 ;;		On entry : 0/0
  2917 ;;		On exit  : 0/0
  2918 ;;		Unchanged: 0/0
  2919 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2920 ;;      Params:         1       0       0       0       0       0       0       0       0
  2921 ;;      Locals:         0       5       0       0       0       0       0       0       0
  2922 ;;      Temps:          0       1       0       0       0       0       0       0       0
  2923 ;;      Totals:         1       6       0       0       0       0       0       0       0
  2924 ;;Total ram usage:        7 bytes
  2925 ;; Hardware stack levels used:    1
  2926 ;; Hardware stack levels required when called:    6
  2927 ;; This function calls:
  2928 ;;		_writeString
  2929 ;;		_writeFloat
  2930 ;;		_getTemp
  2931 ;;		_lowbit
  2932 ;; This function is called by:
  2933 ;;		_buttons
  2934 ;;		_high_isr
  2935 ;; This function uses a non-reentrant model
  2936 ;;
  2937                           
  2938                           	psect	text11
  2939  002E96                     __ptext11:
  2940                           	opt stack 0
  2941  002E96                     _printTemp:
  2942                           	opt stack 19
  2943                           
  2944                           ;temp.c: 58: uint8_t units = 0;
  2945                           
  2946                           ;incstack = 0
  2947                           ;incstack = 0
  2948  002E96  0100               	movlb	0	; () banked
  2949  002E98  6F94               	movwf	??_printTemp& (0+255),b
  2950  002E9A  0E00               	movlw	0
  2951  002E9C  0100               	movlb	0	; () banked
  2952  002E9E  0100               	movlb	0	; () banked
  2953  002EA0  6F99               	movwf	printTemp@units& (0+255),b
  2954  002EA2  0100               	movlb	0	; () banked
  2955  002EA4  5194               	movf	??_printTemp& (0+255),w,b
  2956                           
  2957                           ; BSR set to: 0
  2958                           ;temp.c: 59: units |= lowbit(digits);
  2959  002EA6  505F               	movf	printTemp@digits,w,c
  2960  002EA8  6E01               	movwf	?_lowbit,c
  2961  002EAA  6A02               	clrf	?_lowbit+1,c
  2962  002EAC  6A03               	clrf	?_lowbit+2,c
  2963  002EAE  6A04               	clrf	?_lowbit+3,c
  2964  002EB0  EC34  F019         	call	_lowbit	;wreg free
  2965  002EB4  5001               	movf	?_lowbit,w,c
  2966  002EB6  0100               	movlb	0	; () banked
  2967  002EB8  0100               	movlb	0	; () banked
  2968  002EBA  1399               	iorwf	printTemp@units& (0+255),f,b
  2969                           
  2970                           ; BSR set to: 0
  2971                           ;temp.c: 60: units |= lowbit(digits &= (~lowbit(digits)));
  2972  002EBC  505F               	movf	printTemp@digits,w,c
  2973  002EBE  6E01               	movwf	?_lowbit,c
  2974  002EC0  6A02               	clrf	?_lowbit+1,c
  2975  002EC2  6A03               	clrf	?_lowbit+2,c
  2976  002EC4  6A04               	clrf	?_lowbit+3,c
  2977  002EC6  EC34  F019         	call	_lowbit	;wreg free
  2978  002ECA  5001               	movf	?_lowbit,w,c
  2979  002ECC  0AFF               	xorlw	255
  2980  002ECE  165F               	andwf	printTemp@digits,f,c
  2981  002ED0  505F               	movf	printTemp@digits& (0+255),w,c
  2982  002ED2  0100               	movlb	0	; () banked
  2983  002ED4  0100               	movlb	0	; () banked
  2984  002ED6  6F95               	movwf	_printTemp$1260& (0+255),b
  2985  002ED8  0100               	movlb	0	; () banked
  2986  002EDA  6B96               	clrf	(_printTemp$1260+1)& (0+255),b
  2987  002EDC  0100               	movlb	0	; () banked
  2988  002EDE  6B97               	clrf	(_printTemp$1260+2)& (0+255),b
  2989  002EE0  0100               	movlb	0	; () banked
  2990  002EE2  6B98               	clrf	(_printTemp$1260+3)& (0+255),b
  2991                           
  2992                           ; BSR set to: 0
  2993                           ;temp.c: 60: units |= lowbit(digits &= (~lowbit(digits)));
  2994  002EE4  C095  F001         	movff	_printTemp$1260,?_lowbit
  2995  002EE8  C096  F002         	movff	_printTemp$1260+1,?_lowbit+1
  2996  002EEC  C097  F003         	movff	_printTemp$1260+2,?_lowbit+2
  2997  002EF0  C098  F004         	movff	_printTemp$1260+3,?_lowbit+3
  2998  002EF4  EC34  F019         	call	_lowbit	;wreg free
  2999  002EF8  5001               	movf	?_lowbit,w,c
  3000  002EFA  0100               	movlb	0	; () banked
  3001  002EFC  0100               	movlb	0	; () banked
  3002  002EFE  1399               	iorwf	printTemp@units& (0+255),f,b
  3003                           
  3004                           ; BSR set to: 0
  3005                           ;temp.c: 61: digits &= ~units;
  3006  002F00  0100               	movlb	0	; () banked
  3007  002F02  0100               	movlb	0	; () banked
  3008  002F04  5199               	movf	printTemp@units& (0+255),w,b
  3009  002F06  0AFF               	xorlw	255
  3010  002F08  165F               	andwf	printTemp@digits,f,c
  3011                           
  3012                           ; BSR set to: 0
  3013                           ;temp.c: 63: writeString(units, (char*) "*C");
  3014  002F0A  C099  F01A         	movff	printTemp@units,?_writeString
  3015  002F0E  0E7D               	movlw	high STR_30
  3016  002F10  6E1C               	movwf	?_writeString+2,c
  3017  002F12  0EBC               	movlw	low STR_30
  3018  002F14  6E1B               	movwf	?_writeString+1,c
  3019  002F16  ECB0  F010         	call	_writeString	;wreg free
  3020                           
  3021                           ;temp.c: 65: writeFloat(digits, getTemp());
  3022  002F1A  C05F  F086         	movff	printTemp@digits,?_writeFloat
  3023  002F1E  EC83  F011         	call	_getTemp	;wreg free
  3024  002F22  C04D  F089         	movff	?_getTemp+2,?_writeFloat+3
  3025  002F26  C04C  F088         	movff	?_getTemp+1,?_writeFloat+2
  3026  002F2A  C04B  F087         	movff	?_getTemp,?_writeFloat+1
  3027  002F2E  EC6B  F019         	call	_writeFloat	;wreg free
  3028  002F32  0012               	return	
  3029  002F34                     __end_of_printTemp:
  3030                           	opt stack 0
  3031                           tosu	equ	0xFFF
  3032                           tosh	equ	0xFFE
  3033                           tosl	equ	0xFFD
  3034                           pclatu	equ	0xFFB
  3035                           pclath	equ	0xFFA
  3036                           tblptru	equ	0xFF8
  3037                           tblptrh	equ	0xFF7
  3038                           tblptrl	equ	0xFF6
  3039                           tablat	equ	0xFF5
  3040                           prodh	equ	0xFF4
  3041                           prodl	equ	0xFF3
  3042                           intcon	equ	0xFF2
  3043                           intcon2	equ	0xFF1
  3044                           postinc0	equ	0xFEE
  3045                           fsr0h	equ	0xFEA
  3046                           fsr0l	equ	0xFE9
  3047                           wreg	equ	0xFE8
  3048                           postinc1	equ	0xFE6
  3049                           postdec1	equ	0xFE5
  3050                           fsr1h	equ	0xFE2
  3051                           fsr1l	equ	0xFE1
  3052                           postinc2	equ	0xFDE
  3053                           postdec2	equ	0xFDD
  3054                           fsr2h	equ	0xFDA
  3055                           fsr2l	equ	0xFD9
  3056                           status	equ	0xFD8
  3057                           
  3058 ;; *************** function _lowbit *****************
  3059 ;; Defined at:
  3060 ;;		line 26 in file "defs.c"
  3061 ;; Parameters:    Size  Location     Type
  3062 ;;  x               4    0[COMRAM] unsigned long 
  3063 ;; Auto vars:     Size  Location     Type
  3064 ;;  log2Val         4    7[COMRAM] unsigned long 
  3065 ;; Return value:  Size  Location     Type
  3066 ;;                  4    0[COMRAM] unsigned long 
  3067 ;; Registers used:
  3068 ;;		wreg, status,2, status,0
  3069 ;; Tracked objects:
  3070 ;;		On entry : 0/0
  3071 ;;		On exit  : 0/0
  3072 ;;		Unchanged: 0/0
  3073 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3074 ;;      Params:         4       0       0       0       0       0       0       0       0
  3075 ;;      Locals:         4       0       0       0       0       0       0       0       0
  3076 ;;      Temps:          3       0       0       0       0       0       0       0       0
  3077 ;;      Totals:        11       0       0       0       0       0       0       0       0
  3078 ;;Total ram usage:       11 bytes
  3079 ;; Hardware stack levels used:    1
  3080 ;; This function calls:
  3081 ;;		Nothing
  3082 ;; This function is called by:
  3083 ;;		_printTemp
  3084 ;; This function uses a non-reentrant model
  3085 ;;
  3086                           
  3087                           	psect	text12
  3088  003268                     __ptext12:
  3089                           	opt stack 0
  3090  003268                     _lowbit:
  3091                           	opt stack 24
  3092                           
  3093                           ;defs.c: 27: uint32_t log2Val = 0;
  3094                           
  3095                           ;incstack = 0
  3096                           ;incstack = 0
  3097  003268  0E00               	movlw	0
  3098  00326A  6E08               	movwf	lowbit@log2Val,c
  3099  00326C  0E00               	movlw	0
  3100  00326E  6E09               	movwf	lowbit@log2Val+1,c
  3101  003270  0E00               	movlw	0
  3102  003272  6E0A               	movwf	lowbit@log2Val+2,c
  3103  003274  0E00               	movlw	0
  3104  003276  6E0B               	movwf	lowbit@log2Val+3,c
  3105                           
  3106                           ;defs.c: 28: if (x & 1)
  3107  003278  A001               	btfss	lowbit@x,0,c
  3108  00327A  D008               	goto	i2l4724
  3109                           
  3110                           ;defs.c: 29: return 1;
  3111  00327C  0E01               	movlw	1
  3112  00327E  6E01               	movwf	?_lowbit,c
  3113  003280  0E00               	movlw	0
  3114  003282  6E02               	movwf	?_lowbit+1,c
  3115  003284  0E00               	movlw	0
  3116  003286  6E03               	movwf	?_lowbit+2,c
  3117  003288  0E00               	movlw	0
  3118  00328A  D023               	goto	L1
  3119  00328C                     i2l4724:
  3120  00328C  0E01               	movlw	1
  3121  00328E  2608               	addwf	lowbit@log2Val,f,c
  3122  003290  0E00               	movlw	0
  3123  003292  2209               	addwfc	lowbit@log2Val+1,f,c
  3124  003294  0E00               	movlw	0
  3125  003296  220A               	addwfc	lowbit@log2Val+2,f,c
  3126  003298  0E00               	movlw	0
  3127  00329A  220B               	addwfc	lowbit@log2Val+3,f,c
  3128  00329C  90D8               	bcf	status,0,c
  3129  00329E  3204               	rrcf	lowbit@x+3,f,c
  3130  0032A0  3203               	rrcf	lowbit@x+2,f,c
  3131  0032A2  3202               	rrcf	lowbit@x+1,f,c
  3132  0032A4  3201               	rrcf	lowbit@x,f,c
  3133  0032A6  A001               	btfss	lowbit@x& (0+255),0,c
  3134  0032A8  D7F1               	goto	i2l4724
  3135                           
  3136                           ;defs.c: 32: return 1 << log2Val;
  3137  0032AA  C008  F005         	movff	lowbit@log2Val,??_lowbit
  3138  0032AE  0E01               	movlw	1
  3139  0032B0  6E06               	movwf	(??_lowbit+1)& (0+255),c
  3140  0032B2  6A07               	clrf	(??_lowbit+2)& (0+255),c
  3141  0032B4  2A05               	incf	??_lowbit,f,c
  3142  0032B6  D003               	goto	i2u261_44
  3143  0032B8                     i2u261_45:
  3144  0032B8  90D8               	bcf	status,0,c
  3145  0032BA  3606               	rlcf	??_lowbit+1,f,c
  3146  0032BC  3607               	rlcf	??_lowbit+2,f,c
  3147  0032BE                     i2u261_44:
  3148  0032BE  2E05               	decfsz	??_lowbit,f,c
  3149  0032C0  D7FB               	goto	i2u261_45
  3150  0032C2  C006  F001         	movff	??_lowbit+1,?_lowbit
  3151  0032C6  C007  F002         	movff	??_lowbit+2,?_lowbit+1
  3152  0032CA  0E00               	movlw	0
  3153  0032CC  BE02               	btfsc	?_lowbit+1,7,c
  3154  0032CE  0EFF               	movlw	-1
  3155  0032D0  6E03               	movwf	?_lowbit+2,c
  3156  0032D2                     L1:
  3157  0032D2  6E04               	movwf	?_lowbit+3,c
  3158  0032D4  0012               	return	
  3159  0032D6                     __end_of_lowbit:
  3160                           	opt stack 0
  3161                           tosu	equ	0xFFF
  3162                           tosh	equ	0xFFE
  3163                           tosl	equ	0xFFD
  3164                           pclatu	equ	0xFFB
  3165                           pclath	equ	0xFFA
  3166                           tblptru	equ	0xFF8
  3167                           tblptrh	equ	0xFF7
  3168                           tblptrl	equ	0xFF6
  3169                           tablat	equ	0xFF5
  3170                           prodh	equ	0xFF4
  3171                           prodl	equ	0xFF3
  3172                           intcon	equ	0xFF2
  3173                           intcon2	equ	0xFF1
  3174                           postinc0	equ	0xFEE
  3175                           fsr0h	equ	0xFEA
  3176                           fsr0l	equ	0xFE9
  3177                           wreg	equ	0xFE8
  3178                           postinc1	equ	0xFE6
  3179                           postdec1	equ	0xFE5
  3180                           fsr1h	equ	0xFE2
  3181                           fsr1l	equ	0xFE1
  3182                           postinc2	equ	0xFDE
  3183                           postdec2	equ	0xFDD
  3184                           fsr2h	equ	0xFDA
  3185                           fsr2l	equ	0xFD9
  3186                           status	equ	0xFD8
  3187                           
  3188 ;; *************** function _getTemp *****************
  3189 ;; Defined at:
  3190 ;;		line 35 in file "temp.c"
  3191 ;; Parameters:    Size  Location     Type
  3192 ;;		None
  3193 ;; Auto vars:     Size  Location     Type
  3194 ;;  oldTempsTemp    9   78[COMRAM] [3]
  3195 ;;  total           3   90[COMRAM] [3]
  3196 ;;  temp            3   87[COMRAM] [3]
  3197 ;;  cnt             1   93[COMRAM] unsigned char 
  3198 ;; Return value:  Size  Location     Type
  3199 ;;                  3   74[COMRAM] unsigned char 
  3200 ;; Registers used:
  3201 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3202 ;; Tracked objects:
  3203 ;;		On entry : 0/0
  3204 ;;		On exit  : 0/0
  3205 ;;		Unchanged: 0/0
  3206 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3207 ;;      Params:         3       0       0       0       0       0       0       0       0
  3208 ;;      Locals:        16       0       0       0       0       0       0       0       0
  3209 ;;      Temps:          1       0       0       0       0       0       0       0       0
  3210 ;;      Totals:        20       0       0       0       0       0       0       0       0
  3211 ;;Total ram usage:       20 bytes
  3212 ;; Hardware stack levels used:    1
  3213 ;; Hardware stack levels required when called:    3
  3214 ;; This function calls:
  3215 ;;		___asftadd
  3216 ;;		___ftadd
  3217 ;;		___ftdiv
  3218 ;;		___ftmul
  3219 ;;		___lwtoft
  3220 ;;		___wmul
  3221 ;; This function is called by:
  3222 ;;		_printTemp
  3223 ;; This function uses a non-reentrant model
  3224 ;;
  3225                           
  3226                           	psect	text13
  3227  002306                     __ptext13:
  3228                           	opt stack 0
  3229  002306                     _getTemp:
  3230                           	opt stack 21
  3231                           
  3232                           ;temp.c: 36: double oldTempsTemp[3];
  3233                           ;temp.c: 37: uint8_t cnt;
  3234                           ;temp.c: 38: for (cnt = 3;cnt > 0;cnt--)
  3235                           
  3236                           ;incstack = 0
  3237                           ;incstack = 0
  3238  002306  6E4E               	movwf	??_getTemp& (0+255),c
  3239  002308  0E03               	movlw	3
  3240  00230A  6E5E               	movwf	getTemp@cnt,c
  3241  00230C  504E               	movf	??_getTemp& (0+255),w,c
  3242  00230E  D024               	goto	L2
  3243  002310                     i2l9440:
  3244                           
  3245                           ;temp.c: 39: {
  3246                           ;temp.c: 40: oldTempsTemp[cnt-1] = oldTemps[cnt];
  3247  002310  505E               	movf	getTemp@cnt,w,c
  3248  002312  0D03               	mullw	3
  3249  002314  0100               	movlb	0	; () banked
  3250  002316  0EB0               	movlw	low _oldTemps
  3251  002318  24F3               	addwf	prodl,w,c
  3252  00231A  6ED9               	movwf	fsr2l,c
  3253  00231C  0100               	movlb	0	; () banked
  3254  00231E  0E00               	movlw	high _oldTemps
  3255  002320  20F4               	addwfc	prodh,w,c
  3256  002322  6EDA               	movwf	fsr2h,c
  3257  002324  0EFF               	movlw	255
  3258  002326  245E               	addwf	getTemp@cnt,w,c
  3259  002328  6E11               	movwf	?___wmul,c
  3260  00232A  6A12               	clrf	?___wmul+1,c
  3261  00232C  0EFF               	movlw	255
  3262  00232E  2212               	addwfc	?___wmul+1,f,c
  3263  002330  0E00               	movlw	0
  3264  002332  6E14               	movwf	?___wmul+3,c
  3265  002334  0E03               	movlw	3
  3266  002336  6E13               	movwf	?___wmul+2,c
  3267  002338  EC98  F01B         	call	___wmul	;wreg free
  3268  00233C  0E4F               	movlw	low getTemp@oldTempsTemp
  3269  00233E  2411               	addwf	?___wmul,w,c
  3270  002340  6EE1               	movwf	fsr1l,c
  3271  002342  0E00               	movlw	high getTemp@oldTempsTemp
  3272  002344  2012               	addwfc	?___wmul+1,w,c
  3273  002346  6EE2               	movwf	fsr1h,c
  3274  002348  CFDE FFE6          	movff	postinc2,postinc1
  3275  00234C  CFDE FFE6          	movff	postinc2,postinc1
  3276  002350  CFDE FFE5          	movff	postinc2,postdec1
  3277  002354  52E5               	movf	postdec1,f,c
  3278  002356  065E               	decf	getTemp@cnt,f,c
  3279  002358                     L2:
  3280  002358  665E               	tstfsz	getTemp@cnt,c
  3281  00235A  D7DA               	goto	i2l9440
  3282                           
  3283                           ;temp.c: 41: }
  3284                           ;temp.c: 42: GO = 1;
  3285  00235C  82C2               	bsf	4034,1,c	;volatile
  3286  00235E                     i2l362:
  3287  00235E  B2C2               	btfsc	4034,1,c	;volatile
  3288  002360  D7FE               	goto	i2l362
  3289                           
  3290                           ;temp.c: 44: double temp = (((double)ADRES) * ((0.0048828125)/0.0195/(4.0303030303030303
      +                          0303030303)) - (20.5128205128));
  3291  002362  0E7B               	movlw	123
  3292  002364  6E29               	movwf	?___ftmul+3,c
  3293  002366  0E7E               	movlw	126
  3294  002368  6E2A               	movwf	?___ftmul+4,c
  3295  00236A  0E3D               	movlw	61
  3296  00236C  6E2B               	movwf	?___ftmul+5,c
  3297  00236E  CFC3 F009          	movff	4035,?___lwtoft	;volatile
  3298  002372  CFC4 F00A          	movff	4036,?___lwtoft+1	;volatile
  3299  002376  ECE7  F01B         	call	___lwtoft	;wreg free
  3300  00237A  C00B  F028         	movff	?___lwtoft+2,?___ftmul+2
  3301  00237E  C00A  F027         	movff	?___lwtoft+1,?___ftmul+1
  3302  002382  C009  F026         	movff	?___lwtoft,?___ftmul
  3303  002386  EC70  F013         	call	___ftmul	;wreg free
  3304  00238A  C028  F039         	movff	?___ftmul+2,?___ftadd+2
  3305  00238E  C027  F038         	movff	?___ftmul+1,?___ftadd+1
  3306  002392  C026  F037         	movff	?___ftmul,?___ftadd
  3307  002396  0E1A               	movlw	26
  3308  002398  6E3A               	movwf	?___ftadd+3,c
  3309  00239A  0EA4               	movlw	164
  3310  00239C  6E3B               	movwf	?___ftadd+4,c
  3311  00239E  0EC1               	movlw	193
  3312  0023A0  6E3C               	movwf	?___ftadd+5,c
  3313  0023A2  ECCA  F00F         	call	___ftadd	;wreg free
  3314  0023A6  C039  F05A         	movff	?___ftadd+2,getTemp@temp+2
  3315  0023AA  C038  F059         	movff	?___ftadd+1,getTemp@temp+1
  3316  0023AE  C037  F058         	movff	?___ftadd,getTemp@temp
  3317                           
  3318                           ;temp.c: 45: double total = temp;
  3319  0023B2  C058  F05B         	movff	getTemp@temp,getTemp@total
  3320  0023B6  C059  F05C         	movff	getTemp@temp+1,getTemp@total+1
  3321  0023BA  C05A  F05D         	movff	getTemp@temp+2,getTemp@total+2
  3322                           
  3323                           ;temp.c: 46: for (cnt = 0;cnt < 3;cnt++)
  3324  0023BE  6E4E               	movwf	??_getTemp& (0+255),c
  3325  0023C0  0E00               	movlw	0
  3326  0023C2  6E5E               	movwf	getTemp@cnt,c
  3327  0023C4  504E               	movf	??_getTemp& (0+255),w,c
  3328  0023C6  D030               	goto	L3
  3329  0023C8                     i2l9456:
  3330                           
  3331                           ;temp.c: 47: {
  3332                           ;temp.c: 48: oldTemps[cnt] = oldTempsTemp[cnt];
  3333  0023C8  505E               	movf	getTemp@cnt,w,c
  3334  0023CA  0D03               	mullw	3
  3335  0023CC  0E4F               	movlw	low getTemp@oldTempsTemp
  3336  0023CE  24F3               	addwf	prodl,w,c
  3337  0023D0  6ED9               	movwf	fsr2l,c
  3338  0023D2  0E00               	movlw	high getTemp@oldTempsTemp
  3339  0023D4  20F4               	addwfc	prodh,w,c
  3340  0023D6  6EDA               	movwf	fsr2h,c
  3341  0023D8  505E               	movf	getTemp@cnt,w,c
  3342  0023DA  0D03               	mullw	3
  3343  0023DC  0100               	movlb	0	; () banked
  3344  0023DE  0EB0               	movlw	low _oldTemps
  3345  0023E0  24F3               	addwf	prodl,w,c
  3346  0023E2  6EE1               	movwf	fsr1l,c
  3347  0023E4  0100               	movlb	0	; () banked
  3348  0023E6  0E00               	movlw	high _oldTemps
  3349  0023E8  20F4               	addwfc	prodh,w,c
  3350  0023EA  6EE2               	movwf	fsr1h,c
  3351  0023EC  CFDE FFE6          	movff	postinc2,postinc1
  3352  0023F0  CFDE FFE6          	movff	postinc2,postinc1
  3353  0023F4  CFDE FFE5          	movff	postinc2,postdec1
  3354  0023F8  52E5               	movf	postdec1,f,c
  3355                           
  3356                           ; BSR set to: 0
  3357                           ;temp.c: 49: total += oldTemps[cnt];
  3358  0023FA  0E00               	movlw	high getTemp@total
  3359  0023FC  6E47               	movwf	?___asftadd+1,c
  3360  0023FE  0E5B               	movlw	low getTemp@total
  3361  002400  6E46               	movwf	?___asftadd,c
  3362  002402  505E               	movf	getTemp@cnt,w,c
  3363  002404  0D03               	mullw	3
  3364  002406  0100               	movlb	0	; () banked
  3365  002408  0EB0               	movlw	low _oldTemps
  3366  00240A  24F3               	addwf	prodl,w,c
  3367  00240C  6ED9               	movwf	fsr2l,c
  3368  00240E  0100               	movlb	0	; () banked
  3369  002410  0E00               	movlw	high _oldTemps
  3370  002412  20F4               	addwfc	prodh,w,c
  3371  002414  6EDA               	movwf	fsr2h,c
  3372  002416  CFDE F048          	movff	postinc2,?___asftadd+2
  3373  00241A  CFDE F049          	movff	postinc2,?___asftadd+3
  3374  00241E  CFDD F04A          	movff	postdec2,?___asftadd+4
  3375  002422  EC5D  F01B         	call	___asftadd	;wreg free
  3376  002426  2A5E               	incf	getTemp@cnt,f,c
  3377  002428                     L3:
  3378  002428  0E02               	movlw	2
  3379  00242A  645E               	cpfsgt	getTemp@cnt,c
  3380  00242C  D7CD               	goto	i2l9456
  3381                           
  3382                           ;temp.c: 50: }
  3383                           ;temp.c: 51: oldTemps[3] = temp;
  3384  00242E  C058  F0B9         	movff	getTemp@temp,_oldTemps+9
  3385  002432  C059  F0BA         	movff	getTemp@temp+1,_oldTemps+10
  3386  002436  C05A  F0BB         	movff	getTemp@temp+2,_oldTemps+11
  3387                           
  3388                           ;temp.c: 53: return total/4;
  3389  00243A  C05B  F009         	movff	getTemp@total,?___ftdiv
  3390  00243E  C05C  F00A         	movff	getTemp@total+1,?___ftdiv+1
  3391  002442  C05D  F00B         	movff	getTemp@total+2,?___ftdiv+2
  3392  002446  0E00               	movlw	0
  3393  002448  6E0C               	movwf	?___ftdiv+3,c
  3394  00244A  0E80               	movlw	128
  3395  00244C  6E0D               	movwf	?___ftdiv+4,c
  3396  00244E  0E40               	movlw	64
  3397  002450  6E0E               	movwf	?___ftdiv+5,c
  3398  002452  EC7C  F014         	call	___ftdiv	;wreg free
  3399  002456  C00B  F04D         	movff	?___ftdiv+2,?_getTemp+2
  3400  00245A  C00A  F04C         	movff	?___ftdiv+1,?_getTemp+1
  3401  00245E  C009  F04B         	movff	?___ftdiv,?_getTemp
  3402  002462  0012               	return	
  3403  002464                     __end_of_getTemp:
  3404                           	opt stack 0
  3405                           tosu	equ	0xFFF
  3406                           tosh	equ	0xFFE
  3407                           tosl	equ	0xFFD
  3408                           pclatu	equ	0xFFB
  3409                           pclath	equ	0xFFA
  3410                           tblptru	equ	0xFF8
  3411                           tblptrh	equ	0xFF7
  3412                           tblptrl	equ	0xFF6
  3413                           tablat	equ	0xFF5
  3414                           prodh	equ	0xFF4
  3415                           prodl	equ	0xFF3
  3416                           intcon	equ	0xFF2
  3417                           intcon2	equ	0xFF1
  3418                           postinc0	equ	0xFEE
  3419                           fsr0h	equ	0xFEA
  3420                           fsr0l	equ	0xFE9
  3421                           wreg	equ	0xFE8
  3422                           postinc1	equ	0xFE6
  3423                           postdec1	equ	0xFE5
  3424                           fsr1h	equ	0xFE2
  3425                           fsr1l	equ	0xFE1
  3426                           postinc2	equ	0xFDE
  3427                           postdec2	equ	0xFDD
  3428                           fsr2h	equ	0xFDA
  3429                           fsr2l	equ	0xFD9
  3430                           status	equ	0xFD8
  3431                           
  3432 ;; *************** function ___lwtoft *****************
  3433 ;; Defined at:
  3434 ;;		line 29 in file "/usr/opt/microchip/xc8/v1.20/sources/common/lwtoft.c"
  3435 ;; Parameters:    Size  Location     Type
  3436 ;;  c               2    8[COMRAM] unsigned int 
  3437 ;; Auto vars:     Size  Location     Type
  3438 ;;		None
  3439 ;; Return value:  Size  Location     Type
  3440 ;;                  3    8[COMRAM] float 
  3441 ;; Registers used:
  3442 ;;		wreg, status,2, status,0, cstack
  3443 ;; Tracked objects:
  3444 ;;		On entry : 0/0
  3445 ;;		On exit  : 0/0
  3446 ;;		Unchanged: 0/0
  3447 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3448 ;;      Params:         3       0       0       0       0       0       0       0       0
  3449 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3450 ;;      Temps:          2       0       0       0       0       0       0       0       0
  3451 ;;      Totals:         5       0       0       0       0       0       0       0       0
  3452 ;;Total ram usage:        5 bytes
  3453 ;; Hardware stack levels used:    1
  3454 ;; Hardware stack levels required when called:    1
  3455 ;; This function calls:
  3456 ;;		___ftpack
  3457 ;; This function is called by:
  3458 ;;		_getTemp
  3459 ;; This function uses a non-reentrant model
  3460 ;;
  3461                           
  3462                           	psect	text14
  3463  0037CE                     __ptext14:
  3464                           	opt stack 0
  3465  0037CE                     ___lwtoft:
  3466                           	opt stack 22
  3467                           
  3468                           ;incstack = 0
  3469                           ;incstack = 0
  3470  0037CE  C009  F001         	movff	___lwtoft@c,?___ftpack
  3471  0037D2  C00A  F002         	movff	___lwtoft@c+1,?___ftpack+1
  3472  0037D6  6A03               	clrf	?___ftpack+2,c
  3473  0037D8  6E0C               	movwf	??___lwtoft& (0+255),c
  3474  0037DA  0E8E               	movlw	142
  3475  0037DC  6E04               	movwf	?___ftpack+3,c
  3476  0037DE  500C               	movf	??___lwtoft& (0+255),w,c
  3477  0037E0  6E0D               	movwf	(??___lwtoft+1)& (0+255),c
  3478  0037E2  0E00               	movlw	0
  3479  0037E4  6E05               	movwf	?___ftpack+4,c
  3480  0037E6  500D               	movf	(??___lwtoft+1)& (0+255),w,c
  3481  0037E8  EC48  F016         	call	___ftpack	;wreg free
  3482  0037EC  C003  F00B         	movff	?___ftpack+2,?___lwtoft+2
  3483  0037F0  C002  F00A         	movff	?___ftpack+1,?___lwtoft+1
  3484  0037F4  C001  F009         	movff	?___ftpack,?___lwtoft
  3485  0037F8  0012               	return	
  3486  0037FA                     __end_of___lwtoft:
  3487                           	opt stack 0
  3488                           tosu	equ	0xFFF
  3489                           tosh	equ	0xFFE
  3490                           tosl	equ	0xFFD
  3491                           pclatu	equ	0xFFB
  3492                           pclath	equ	0xFFA
  3493                           tblptru	equ	0xFF8
  3494                           tblptrh	equ	0xFF7
  3495                           tblptrl	equ	0xFF6
  3496                           tablat	equ	0xFF5
  3497                           prodh	equ	0xFF4
  3498                           prodl	equ	0xFF3
  3499                           intcon	equ	0xFF2
  3500                           intcon2	equ	0xFF1
  3501                           postinc0	equ	0xFEE
  3502                           fsr0h	equ	0xFEA
  3503                           fsr0l	equ	0xFE9
  3504                           wreg	equ	0xFE8
  3505                           postinc1	equ	0xFE6
  3506                           postdec1	equ	0xFE5
  3507                           fsr1h	equ	0xFE2
  3508                           fsr1l	equ	0xFE1
  3509                           postinc2	equ	0xFDE
  3510                           postdec2	equ	0xFDD
  3511                           fsr2h	equ	0xFDA
  3512                           fsr2l	equ	0xFD9
  3513                           status	equ	0xFD8
  3514                           
  3515 ;; *************** function ___ftdiv *****************
  3516 ;; Defined at:
  3517 ;;		line 50 in file "/usr/opt/microchip/xc8/v1.20/sources/common/ftdiv.c"
  3518 ;; Parameters:    Size  Location     Type
  3519 ;;  f1              3    8[COMRAM] float 
  3520 ;;  f2              3   11[COMRAM] float 
  3521 ;; Auto vars:     Size  Location     Type
  3522 ;;  f3              3   21[COMRAM] float 
  3523 ;;  sign            1   24[COMRAM] unsigned char 
  3524 ;;  exp             1   20[COMRAM] unsigned char 
  3525 ;;  cntr            1   19[COMRAM] unsigned char 
  3526 ;; Return value:  Size  Location     Type
  3527 ;;                  3    8[COMRAM] float 
  3528 ;; Registers used:
  3529 ;;		wreg, status,2, status,0, cstack
  3530 ;; Tracked objects:
  3531 ;;		On entry : 0/0
  3532 ;;		On exit  : 0/0
  3533 ;;		Unchanged: 0/0
  3534 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3535 ;;      Params:         6       0       0       0       0       0       0       0       0
  3536 ;;      Locals:         6       0       0       0       0       0       0       0       0
  3537 ;;      Temps:          5       0       0       0       0       0       0       0       0
  3538 ;;      Totals:        17       0       0       0       0       0       0       0       0
  3539 ;;Total ram usage:       17 bytes
  3540 ;; Hardware stack levels used:    1
  3541 ;; Hardware stack levels required when called:    1
  3542 ;; This function calls:
  3543 ;;		___ftpack
  3544 ;; This function is called by:
  3545 ;;		_getTemp
  3546 ;; This function uses a non-reentrant model
  3547 ;;
  3548                           
  3549                           	psect	text15
  3550  0028F8                     __ptext15:
  3551                           	opt stack 0
  3552  0028F8                     ___ftdiv:
  3553                           	opt stack 22
  3554                           
  3555                           ;incstack = 0
  3556                           ;incstack = 0
  3557  0028F8  0E0F               	movlw	15
  3558  0028FA  6E0F               	movwf	??___ftdiv& (0+255),c
  3559  0028FC  C009  F010         	movff	___ftdiv@f1,??___ftdiv+1
  3560  002900  C00A  F011         	movff	___ftdiv@f1+1,??___ftdiv+2
  3561  002904  C00B  F012         	movff	___ftdiv@f1+2,??___ftdiv+3
  3562  002908  280F               	incf	??___ftdiv,w,c
  3563  00290A  6E13               	movwf	(??___ftdiv+4)& (0+255),c
  3564  00290C  D004               	goto	i2u767_40
  3565  00290E                     i2u767_45:
  3566  00290E  90D8               	bcf	status,0,c
  3567  002910  3212               	rrcf	??___ftdiv+3,f,c
  3568  002912  3211               	rrcf	??___ftdiv+2,f,c
  3569  002914  3210               	rrcf	??___ftdiv+1,f,c
  3570  002916                     i2u767_40:
  3571  002916  2E13               	decfsz	(??___ftdiv+4)& (0+255),f,c
  3572  002918  D7FA               	goto	i2u767_45
  3573  00291A  5010               	movf	??___ftdiv+1,w,c
  3574  00291C  6E15               	movwf	___ftdiv@exp,c
  3575  00291E  6615               	tstfsz	___ftdiv@exp& (0+255),c
  3576  002920  D001               	goto	i2l8940
  3577  002922  D015               	goto	i2u770_40
  3578  002924                     i2l8940:
  3579  002924  0E0F               	movlw	15
  3580  002926  6E0F               	movwf	??___ftdiv& (0+255),c
  3581  002928  C00C  F010         	movff	___ftdiv@f2,??___ftdiv+1
  3582  00292C  C00D  F011         	movff	___ftdiv@f2+1,??___ftdiv+2
  3583  002930  C00E  F012         	movff	___ftdiv@f2+2,??___ftdiv+3
  3584  002934  280F               	incf	??___ftdiv,w,c
  3585  002936  6E13               	movwf	(??___ftdiv+4)& (0+255),c
  3586  002938  D004               	goto	i2u769_40
  3587  00293A                     i2u769_45:
  3588  00293A  90D8               	bcf	status,0,c
  3589  00293C  3212               	rrcf	??___ftdiv+3,f,c
  3590  00293E  3211               	rrcf	??___ftdiv+2,f,c
  3591  002940  3210               	rrcf	??___ftdiv+1,f,c
  3592  002942                     i2u769_40:
  3593  002942  2E13               	decfsz	(??___ftdiv+4)& (0+255),f,c
  3594  002944  D7FA               	goto	i2u769_45
  3595  002946  5010               	movf	??___ftdiv+1,w,c
  3596  002948  6E19               	movwf	___ftdiv@sign,c
  3597  00294A  6619               	tstfsz	___ftdiv@sign& (0+255),c
  3598  00294C  D007               	goto	i2l8946
  3599  00294E                     i2u770_40:
  3600  00294E  0E00               	movlw	0
  3601  002950  6E09               	movwf	?___ftdiv,c
  3602  002952  0E00               	movlw	0
  3603  002954  6E0A               	movwf	?___ftdiv+1,c
  3604  002956  0E00               	movlw	0
  3605  002958  6E0B               	movwf	?___ftdiv+2,c
  3606  00295A  D04C               	goto	i2l1005
  3607  00295C                     i2l8946:
  3608  00295C  0E00               	movlw	0
  3609  00295E  6E16               	movwf	___ftdiv@f3,c
  3610  002960  0E00               	movlw	0
  3611  002962  6E17               	movwf	___ftdiv@f3+1,c
  3612  002964  0E00               	movlw	0
  3613  002966  6E18               	movwf	___ftdiv@f3+2,c
  3614  002968  5019               	movf	___ftdiv@sign,w,c
  3615  00296A  0F89               	addlw	137
  3616  00296C  5E15               	subwf	___ftdiv@exp,f,c
  3617  00296E  C00B  F019         	movff	___ftdiv@f1+2,___ftdiv@sign
  3618  002972  500E               	movf	(___ftdiv@f2+2)& (0+255),w,c
  3619  002974  1A19               	xorwf	___ftdiv@sign,f,c
  3620  002976  0E80               	movlw	128
  3621  002978  1619               	andwf	___ftdiv@sign,f,c
  3622  00297A  8E0A               	bsf	___ftdiv@f1+1,7,c
  3623  00297C  0EFF               	movlw	255
  3624  00297E  1609               	andwf	___ftdiv@f1,f,c
  3625  002980  0EFF               	movlw	255
  3626  002982  160A               	andwf	___ftdiv@f1+1,f,c
  3627  002984  0E00               	movlw	0
  3628  002986  160B               	andwf	___ftdiv@f1+2,f,c
  3629  002988  8E0D               	bsf	___ftdiv@f2+1,7,c
  3630  00298A  0EFF               	movlw	255
  3631  00298C  160C               	andwf	___ftdiv@f2,f,c
  3632  00298E  0EFF               	movlw	255
  3633  002990  160D               	andwf	___ftdiv@f2+1,f,c
  3634  002992  0E00               	movlw	0
  3635  002994  160E               	andwf	___ftdiv@f2+2,f,c
  3636  002996  6E0F               	movwf	??___ftdiv& (0+255),c
  3637  002998  0E18               	movlw	24
  3638  00299A  6E14               	movwf	___ftdiv@cntr,c
  3639  00299C  500F               	movf	??___ftdiv& (0+255),w,c
  3640  00299E                     i2l1007:
  3641  00299E  90D8               	bcf	status,0,c
  3642  0029A0  3616               	rlcf	___ftdiv@f3,f,c
  3643  0029A2  3617               	rlcf	___ftdiv@f3+1,f,c
  3644  0029A4  3618               	rlcf	___ftdiv@f3+2,f,c
  3645  0029A6  500C               	movf	___ftdiv@f2,w,c
  3646  0029A8  5C09               	subwf	___ftdiv@f1,w,c
  3647  0029AA  500D               	movf	___ftdiv@f2+1,w,c
  3648  0029AC  580A               	subwfb	___ftdiv@f1+1,w,c
  3649  0029AE  500E               	movf	___ftdiv@f2+2,w,c
  3650  0029B0  580B               	subwfb	___ftdiv@f1+2,w,c
  3651  0029B2  A0D8               	btfss	status,0,c
  3652  0029B4  D007               	goto	i2l1008
  3653  0029B6  500C               	movf	___ftdiv@f2,w,c
  3654  0029B8  5E09               	subwf	___ftdiv@f1,f,c
  3655  0029BA  500D               	movf	___ftdiv@f2+1,w,c
  3656  0029BC  5A0A               	subwfb	___ftdiv@f1+1,f,c
  3657  0029BE  500E               	movf	___ftdiv@f2+2,w,c
  3658  0029C0  5A0B               	subwfb	___ftdiv@f1+2,f,c
  3659  0029C2  8016               	bsf	___ftdiv@f3,0,c
  3660  0029C4                     i2l1008:
  3661  0029C4  90D8               	bcf	status,0,c
  3662  0029C6  3609               	rlcf	___ftdiv@f1,f,c
  3663  0029C8  360A               	rlcf	___ftdiv@f1+1,f,c
  3664  0029CA  360B               	rlcf	___ftdiv@f1+2,f,c
  3665  0029CC  2E14               	decfsz	___ftdiv@cntr,f,c
  3666  0029CE  D7E7               	goto	i2l1007
  3667  0029D0  C016  F001         	movff	___ftdiv@f3,?___ftpack
  3668  0029D4  C017  F002         	movff	___ftdiv@f3+1,?___ftpack+1
  3669  0029D8  C018  F003         	movff	___ftdiv@f3+2,?___ftpack+2
  3670  0029DC  C015  F004         	movff	___ftdiv@exp,?___ftpack+3
  3671  0029E0  C019  F005         	movff	___ftdiv@sign,?___ftpack+4
  3672  0029E4  EC48  F016         	call	___ftpack	;wreg free
  3673  0029E8  C003  F00B         	movff	?___ftpack+2,?___ftdiv+2
  3674  0029EC  C002  F00A         	movff	?___ftpack+1,?___ftdiv+1
  3675  0029F0  C001  F009         	movff	?___ftpack,?___ftdiv
  3676  0029F4                     i2l1005:
  3677  0029F4  0012               	return	
  3678  0029F6                     __end_of___ftdiv:
  3679                           	opt stack 0
  3680                           tosu	equ	0xFFF
  3681                           tosh	equ	0xFFE
  3682                           tosl	equ	0xFFD
  3683                           pclatu	equ	0xFFB
  3684                           pclath	equ	0xFFA
  3685                           tblptru	equ	0xFF8
  3686                           tblptrh	equ	0xFF7
  3687                           tblptrl	equ	0xFF6
  3688                           tablat	equ	0xFF5
  3689                           prodh	equ	0xFF4
  3690                           prodl	equ	0xFF3
  3691                           intcon	equ	0xFF2
  3692                           intcon2	equ	0xFF1
  3693                           postinc0	equ	0xFEE
  3694                           fsr0h	equ	0xFEA
  3695                           fsr0l	equ	0xFE9
  3696                           wreg	equ	0xFE8
  3697                           postinc1	equ	0xFE6
  3698                           postdec1	equ	0xFE5
  3699                           fsr1h	equ	0xFE2
  3700                           fsr1l	equ	0xFE1
  3701                           postinc2	equ	0xFDE
  3702                           postdec2	equ	0xFDD
  3703                           fsr2h	equ	0xFDA
  3704                           fsr2l	equ	0xFD9
  3705                           status	equ	0xFD8
  3706                           
  3707 ;; *************** function _writeFloat *****************
  3708 ;; Defined at:
  3709 ;;		line 157 in file "disp.c"
  3710 ;; Parameters:    Size  Location     Type
  3711 ;;  digits          1   38[BANK0 ] unsigned char 
  3712 ;;  num             3   39[BANK0 ] unsigned char 
  3713 ;; Auto vars:     Size  Location     Type
  3714 ;;  str             9   42[BANK0 ] unsigned char [9]
  3715 ;;  bits            1   51[BANK0 ] unsigned char 
  3716 ;; Return value:  Size  Location     Type
  3717 ;;		None               void
  3718 ;; Registers used:
  3719 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3720 ;; Tracked objects:
  3721 ;;		On entry : 0/0
  3722 ;;		On exit  : 0/0
  3723 ;;		Unchanged: 0/0
  3724 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3725 ;;      Params:         0       4       0       0       0       0       0       0       0
  3726 ;;      Locals:         0      10       0       0       0       0       0       0       0
  3727 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3728 ;;      Totals:         0      14       0       0       0       0       0       0       0
  3729 ;;Total ram usage:       14 bytes
  3730 ;; Hardware stack levels used:    1
  3731 ;; Hardware stack levels required when called:    5
  3732 ;; This function calls:
  3733 ;;		_countBits
  3734 ;;		_sprintf
  3735 ;;		_writeString
  3736 ;; This function is called by:
  3737 ;;		_printTemp
  3738 ;; This function uses a non-reentrant model
  3739 ;;
  3740                           
  3741                           	psect	text16
  3742  0032D6                     __ptext16:
  3743                           	opt stack 0
  3744  0032D6                     _writeFloat:
  3745                           	opt stack 19
  3746                           
  3747                           ;disp.c: 158: char str[9] = "";
  3748                           
  3749                           ;incstack = 0
  3750                           ;incstack = 0
  3751  0032D6  EE20  F0C5         	lfsr	2,writeFloat@F5025
  3752  0032DA  EE10  F08A         	lfsr	1,writeFloat@str
  3753  0032DE  0E09               	movlw	9
  3754  0032E0                     i2u920_41:
  3755  0032E0  CFDE FFE6          	movff	postinc2,postinc1
  3756  0032E4  2EE8               	decfsz	wreg,f,c
  3757  0032E6  D7FC               	goto	i2u920_41
  3758                           
  3759                           ;disp.c: 159: uint8_t bits = countBits(digits);
  3760  0032E8  0100               	movlb	0	; () banked
  3761  0032EA  0100               	movlb	0	; () banked
  3762  0032EC  5186               	movf	writeFloat@digits& (0+255),w,b
  3763  0032EE  6E01               	movwf	?_countBits,c
  3764  0032F0  6A02               	clrf	?_countBits+1,c
  3765  0032F2  6A03               	clrf	?_countBits+2,c
  3766  0032F4  6A04               	clrf	?_countBits+3,c
  3767  0032F6  EC11  F01C         	call	_countBits	;wreg free
  3768  0032FA  0100               	movlb	0	; () banked
  3769  0032FC  0100               	movlb	0	; () banked
  3770  0032FE  6F93               	movwf	writeFloat@bits& (0+255),b
  3771                           
  3772                           ; BSR set to: 0
  3773                           ;disp.c: 160: sprintf(&str, "%.*f", bits, num);
  3774  003300  0100               	movlb	0	; () banked
  3775  003302  0E00               	movlw	high writeFloat@str
  3776  003304  6E51               	movwf	?_sprintf+1,c
  3777  003306  0100               	movlb	0	; () banked
  3778  003308  0E8A               	movlw	low writeFloat@str
  3779  00330A  6E50               	movwf	?_sprintf,c
  3780  00330C  0E7D               	movlw	high STR_9
  3781  00330E  6E53               	movwf	?_sprintf+3,c
  3782  003310  0E96               	movlw	low STR_9
  3783  003312  6E52               	movwf	?_sprintf+2,c
  3784  003314  0100               	movlb	0	; () banked
  3785  003316  C093  F054         	movff	writeFloat@bits,?_sprintf+4
  3786  00331A  6A55               	clrf	?_sprintf+5,c
  3787  00331C  C087  F056         	movff	writeFloat@num,?_sprintf+6
  3788  003320  C088  F057         	movff	writeFloat@num+1,?_sprintf+7
  3789  003324  C089  F058         	movff	writeFloat@num+2,?_sprintf+8
  3790  003328  EC0E  F000         	call	_sprintf	;wreg free
  3791                           
  3792                           ;disp.c: 162: writeString(digits, str);
  3793  00332C  C086  F01A         	movff	writeFloat@digits,?_writeString
  3794  003330  0100               	movlb	0	; () banked
  3795  003332  0E00               	movlw	high writeFloat@str
  3796  003334  6E1C               	movwf	?_writeString+2,c
  3797  003336  0100               	movlb	0	; () banked
  3798  003338  0E8A               	movlw	low writeFloat@str
  3799  00333A  6E1B               	movwf	?_writeString+1,c
  3800  00333C  ECB0  F010         	call	_writeString	;wreg free
  3801  003340  0012               	return	
  3802  003342                     __end_of_writeFloat:
  3803                           	opt stack 0
  3804                           tosu	equ	0xFFF
  3805                           tosh	equ	0xFFE
  3806                           tosl	equ	0xFFD
  3807                           pclatu	equ	0xFFB
  3808                           pclath	equ	0xFFA
  3809                           tblptru	equ	0xFF8
  3810                           tblptrh	equ	0xFF7
  3811                           tblptrl	equ	0xFF6
  3812                           tablat	equ	0xFF5
  3813                           prodh	equ	0xFF4
  3814                           prodl	equ	0xFF3
  3815                           intcon	equ	0xFF2
  3816                           intcon2	equ	0xFF1
  3817                           postinc0	equ	0xFEE
  3818                           fsr0h	equ	0xFEA
  3819                           fsr0l	equ	0xFE9
  3820                           wreg	equ	0xFE8
  3821                           postinc1	equ	0xFE6
  3822                           postdec1	equ	0xFE5
  3823                           fsr1h	equ	0xFE2
  3824                           fsr1l	equ	0xFE1
  3825                           postinc2	equ	0xFDE
  3826                           postdec2	equ	0xFDD
  3827                           fsr2h	equ	0xFDA
  3828                           fsr2l	equ	0xFD9
  3829                           status	equ	0xFD8
  3830                           
  3831 ;; *************** function _writeString *****************
  3832 ;; Defined at:
  3833 ;;		line 166 in file "disp.c"
  3834 ;; Parameters:    Size  Location     Type
  3835 ;;  digits          1   25[COMRAM] unsigned char 
  3836 ;;  string          2   26[COMRAM] PTR unsigned char 
  3837 ;;		 -> STR_30(3), printRTC@str(9), writeFloat@str(9), writeLong@str(9), 
  3838 ;; Auto vars:     Size  Location     Type
  3839 ;;  cnt             1   34[COMRAM] char 
  3840 ;;  i               1   33[COMRAM] char 
  3841 ;;  bits            1   32[COMRAM] unsigned char 
  3842 ;; Return value:  Size  Location     Type
  3843 ;;		None               void
  3844 ;; Registers used:
  3845 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3846 ;; Tracked objects:
  3847 ;;		On entry : 0/0
  3848 ;;		On exit  : 0/0
  3849 ;;		Unchanged: 0/0
  3850 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3851 ;;      Params:         3       0       0       0       0       0       0       0       0
  3852 ;;      Locals:         3       0       0       0       0       0       0       0       0
  3853 ;;      Temps:          4       0       0       0       0       0       0       0       0
  3854 ;;      Totals:        10       0       0       0       0       0       0       0       0
  3855 ;;Total ram usage:       10 bytes
  3856 ;; Hardware stack levels used:    1
  3857 ;; Hardware stack levels required when called:    2
  3858 ;; This function calls:
  3859 ;;		_log2
  3860 ;;		_writeChar
  3861 ;;		_countBits
  3862 ;;		_hibit
  3863 ;;		___wmul
  3864 ;; This function is called by:
  3865 ;;		_writeFloat
  3866 ;;		_printRTC
  3867 ;;		_printTemp
  3868 ;;		_writeLong
  3869 ;; This function uses a non-reentrant model
  3870 ;;
  3871                           
  3872                           	psect	text17
  3873  002160                     __ptext17:
  3874                           	opt stack 0
  3875  002160                     _writeString:
  3876                           	opt stack 21
  3877                           
  3878                           ;disp.c: 171: int8_t cnt = 0, i = 0;
  3879                           
  3880                           ;incstack = 0
  3881                           ;incstack = 0
  3882  002160  6E1D               	movwf	??_writeString& (0+255),c
  3883  002162  0E00               	movlw	0
  3884  002164  6E23               	movwf	writeString@cnt,c
  3885  002166  501D               	movf	??_writeString& (0+255),w,c
  3886  002168  6E1D               	movwf	??_writeString& (0+255),c
  3887  00216A  0E00               	movlw	0
  3888  00216C  6E22               	movwf	writeString@i,c
  3889  00216E  501D               	movf	??_writeString& (0+255),w,c
  3890                           
  3891                           ;disp.c: 172: uint8_t bits = countBits(digits);
  3892  002170  501A               	movf	writeString@digits,w,c
  3893  002172  6E01               	movwf	?_countBits,c
  3894  002174  6A02               	clrf	?_countBits+1,c
  3895  002176  6A03               	clrf	?_countBits+2,c
  3896  002178  6A04               	clrf	?_countBits+3,c
  3897  00217A  EC11  F01C         	call	_countBits	;wreg free
  3898  00217E  6E21               	movwf	writeString@bits,c
  3899                           
  3900                           ;disp.c: 174: bits += 1;
  3901  002180  2A21               	incf	writeString@bits,f,c
  3902                           
  3903                           ;disp.c: 175: for (cnt = log2(hibit(digits)); --bits; cnt--) {
  3904  002182  501A               	movf	writeString@digits,w,c
  3905  002184  6E01               	movwf	?_hibit,c
  3906  002186  6A02               	clrf	?_hibit+1,c
  3907  002188  6A03               	clrf	?_hibit+2,c
  3908  00218A  6A04               	clrf	?_hibit+3,c
  3909  00218C  ECD6  F019         	call	_hibit	;wreg free
  3910  002190  C004  F00F         	movff	?_hibit+3,?_log2+3
  3911  002194  C003  F00E         	movff	?_hibit+2,?_log2+2
  3912  002198  C002  F00D         	movff	?_hibit+1,?_log2+1
  3913  00219C  C001  F00C         	movff	?_hibit,?_log2
  3914  0021A0  ECB8  F01A         	call	_log2	;wreg free
  3915  0021A4  500C               	movf	?_log2,w,c
  3916  0021A6  6E23               	movwf	writeString@cnt,c
  3917  0021A8  D0AB               	goto	i2l9308
  3918  0021AA                     i2l9286:
  3919                           
  3920                           ;disp.c: 176: if (0x1 & (digits >> cnt)) {
  3921  0021AA  C023  F01D         	movff	writeString@cnt,??_writeString
  3922  0021AE  C01A  F01E         	movff	writeString@digits,??_writeString+1
  3923  0021B2  2A1D               	incf	??_writeString,f,c
  3924  0021B4  D002               	goto	i2u812_44
  3925  0021B6                     i2u812_45:
  3926  0021B6  90D8               	bcf	status,0,c
  3927  0021B8  321E               	rrcf	??_writeString+1,f,c
  3928  0021BA                     i2u812_44:
  3929  0021BA  2E1D               	decfsz	??_writeString,f,c
  3930  0021BC  D7FC               	goto	i2u812_45
  3931  0021BE  A01E               	btfss	??_writeString+1,0,c
  3932  0021C0  D09E               	goto	i2l9306
  3933                           
  3934                           ;disp.c: 177: if (string[i] == '\0') {
  3935  0021C2  5022               	movf	writeString@i,w,c
  3936  0021C4  6E11               	movwf	?___wmul,c
  3937  0021C6  6A12               	clrf	?___wmul+1,c
  3938  0021C8  BE11               	btfsc	?___wmul,7,c
  3939  0021CA  0612               	decf	?___wmul+1,f,c
  3940  0021CC  0E00               	movlw	0
  3941  0021CE  6E14               	movwf	?___wmul+3,c
  3942  0021D0  0E01               	movlw	1
  3943  0021D2  6E13               	movwf	?___wmul+2,c
  3944  0021D4  EC98  F01B         	call	___wmul	;wreg free
  3945  0021D8  5011               	movf	?___wmul,w,c
  3946  0021DA  241B               	addwf	writeString@string,w,c
  3947  0021DC  6E1D               	movwf	??_writeString& (0+255),c
  3948  0021DE  5012               	movf	?___wmul+1,w,c
  3949  0021E0  201C               	addwfc	writeString@string+1,w,c
  3950  0021E2  6E1E               	movwf	(??_writeString+1)& (0+255),c
  3951  0021E4  501D               	movf	??_writeString,w,c
  3952  0021E6  6EF6               	movwf	tblptrl,c
  3953  0021E8  6EE9               	movwf	fsr0l,c
  3954  0021EA  0E07               	movlw	(high __ramtop+-1)
  3955  0021EC  6EEA               	movwf	fsr0h,c
  3956  0021EE  501E               	movf	??_writeString+1,w,c
  3957  0021F0  64EA               	cpfsgt	fsr0h,c
  3958  0021F2  D003               	bra	i2u814_47
  3959  0021F4  6EEA               	movwf	fsr0h,c
  3960  0021F6  50EF               	movf	indf0,w,c
  3961  0021F8  D003               	bra	i2u814_40
  3962  0021FA                     i2u814_47:
  3963  0021FA  6EF7               	movwf	tblptrh,c
  3964  0021FC  0008               	tblrd		*
  3965  0021FE  50F5               	movf	tablat,w,c
  3966  002200                     i2u814_40:
  3967  002200  0900               	iorlw	0
  3968  002202  B4D8               	btfsc	status,2,c
  3969  002204  D07F               	goto	i2l188
  3970                           
  3971                           ;disp.c: 179: }
  3972                           ;disp.c: 180: if (string[i] == '.') {
  3973                           
  3974                           ;disp.c: 178: break;
  3975  002206  5022               	movf	writeString@i,w,c
  3976  002208  6E11               	movwf	?___wmul,c
  3977  00220A  6A12               	clrf	?___wmul+1,c
  3978  00220C  BE11               	btfsc	?___wmul,7,c
  3979  00220E  0612               	decf	?___wmul+1,f,c
  3980  002210  0E00               	movlw	0
  3981  002212  6E14               	movwf	?___wmul+3,c
  3982  002214  0E01               	movlw	1
  3983  002216  6E13               	movwf	?___wmul+2,c
  3984  002218  EC98  F01B         	call	___wmul	;wreg free
  3985  00221C  5011               	movf	?___wmul,w,c
  3986  00221E  241B               	addwf	writeString@string,w,c
  3987  002220  6E1D               	movwf	??_writeString& (0+255),c
  3988  002222  5012               	movf	?___wmul+1,w,c
  3989  002224  201C               	addwfc	writeString@string+1,w,c
  3990  002226  6E1E               	movwf	(??_writeString+1)& (0+255),c
  3991  002228  501D               	movf	??_writeString,w,c
  3992  00222A  6EF6               	movwf	tblptrl,c
  3993  00222C  6EE9               	movwf	fsr0l,c
  3994  00222E  0E07               	movlw	(high __ramtop+-1)
  3995  002230  6EEA               	movwf	fsr0h,c
  3996  002232  501E               	movf	??_writeString+1,w,c
  3997  002234  64EA               	cpfsgt	fsr0h,c
  3998  002236  D003               	bra	i2u816_47
  3999  002238  6EEA               	movwf	fsr0h,c
  4000  00223A  50EF               	movf	indf0,w,c
  4001  00223C  D003               	bra	i2u816_40
  4002  00223E                     i2u816_47:
  4003  00223E  6EF7               	movwf	tblptrh,c
  4004  002240  0008               	tblrd		*
  4005  002242  50F5               	movf	tablat,w,c
  4006  002244                     i2u816_40:
  4007  002244  0A2E               	xorlw	46
  4008  002246  A4D8               	btfss	status,2,c
  4009  002248  D02B               	goto	i2l9302
  4010                           
  4011                           ;disp.c: 181: screen.digits.screen[cnt + 1].bits |= 0b10000000;
  4012  00224A  C023  F01D         	movff	writeString@cnt,??_writeString
  4013  00224E  6A1E               	clrf	(??_writeString+1)& (0+255),c
  4014  002250  BE1D               	btfsc	??_writeString& (0+255),7,c
  4015  002252  061E               	decf	(??_writeString+1)& (0+255),f,c
  4016  002254  0E01               	movlw	1
  4017  002256  261D               	addwf	??_writeString,f,c
  4018  002258  0E00               	movlw	0
  4019  00225A  221E               	addwfc	??_writeString+1,f,c
  4020  00225C  0101               	movlb	1	; () banked
  4021  00225E  0E00               	movlw	low _screen
  4022  002260  241D               	addwf	??_writeString,w,c
  4023  002262  6ED9               	movwf	fsr2l,c
  4024  002264  0101               	movlb	1	; () banked
  4025  002266  0E01               	movlw	high _screen
  4026  002268  201E               	addwfc	??_writeString+1,w,c
  4027  00226A  6EDA               	movwf	fsr2h,c
  4028  00226C  0E00               	movlw	0
  4029  00226E  8EDB               	bsf	plusw2,7,c
  4030                           
  4031                           ; BSR set to: 1
  4032                           ;disp.c: 182: screen.changed |= 1 << (cnt + 1);
  4033  002270  C023  F01D         	movff	writeString@cnt,??_writeString
  4034  002274  0E01               	movlw	1
  4035  002276  261D               	addwf	??_writeString,f,c
  4036  002278  0E01               	movlw	1
  4037  00227A  6E1E               	movwf	(??_writeString+1)& (0+255),c
  4038  00227C  6A1F               	clrf	(??_writeString+2)& (0+255),c
  4039  00227E  2A1D               	incf	??_writeString,f,c
  4040  002280  D003               	goto	i2u818_44
  4041  002282                     i2u818_45:
  4042  002282  90D8               	bcf	status,0,c
  4043  002284  361E               	rlcf	??_writeString+1,f,c
  4044  002286  361F               	rlcf	??_writeString+2,f,c
  4045  002288                     i2u818_44:
  4046  002288  2E1D               	decfsz	??_writeString,f,c
  4047  00228A  D7FB               	goto	i2u818_45
  4048  00228C  501E               	movf	??_writeString+1,w,c
  4049  00228E  0101               	movlb	1	; () banked
  4050  002290  0101               	movlb	1	; () banked
  4051  002292  130B               	iorwf	(_screen+11)& (0+255),f,b
  4052  002294  501F               	movf	??_writeString+2,w,c
  4053  002296  0101               	movlb	1	; () banked
  4054  002298  0101               	movlb	1	; () banked
  4055  00229A  130C               	iorwf	(_screen+12)& (0+255),f,b
  4056                           
  4057                           ; BSR set to: 1
  4058                           ;disp.c: 183: bits++;
  4059  00229C  2A21               	incf	writeString@bits,f,c
  4060                           
  4061                           ; BSR set to: 1
  4062                           ;disp.c: 184: i++;
  4063  00229E  2A22               	incf	writeString@i,f,c
  4064  0022A0                     i2l9302:
  4065                           
  4066                           ;disp.c: 185: }
  4067                           ;disp.c: 186: writeChar(1 << cnt, string[i]);
  4068  0022A0  C023  F01D         	movff	writeString@cnt,??_writeString
  4069  0022A4  0E01               	movlw	1
  4070  0022A6  6E1E               	movwf	(??_writeString+1)& (0+255),c
  4071  0022A8  2A1D               	incf	??_writeString,f,c
  4072  0022AA  D002               	goto	i2u819_44
  4073  0022AC                     i2u819_45:
  4074  0022AC  90D8               	bcf	status,0,c
  4075  0022AE  361E               	rlcf	??_writeString+1,f,c
  4076  0022B0                     i2u819_44:
  4077  0022B0  2E1D               	decfsz	??_writeString,f,c
  4078  0022B2  D7FC               	goto	i2u819_45
  4079  0022B4  501E               	movf	??_writeString+1,w,c
  4080  0022B6  6E17               	movwf	?_writeChar,c
  4081  0022B8  5022               	movf	writeString@i,w,c
  4082  0022BA  6E11               	movwf	?___wmul,c
  4083  0022BC  6A12               	clrf	?___wmul+1,c
  4084  0022BE  BE11               	btfsc	?___wmul,7,c
  4085  0022C0  0612               	decf	?___wmul+1,f,c
  4086  0022C2  0E00               	movlw	0
  4087  0022C4  6E14               	movwf	?___wmul+3,c
  4088  0022C6  0E01               	movlw	1
  4089  0022C8  6E13               	movwf	?___wmul+2,c
  4090  0022CA  EC98  F01B         	call	___wmul	;wreg free
  4091  0022CE  5011               	movf	?___wmul,w,c
  4092  0022D0  241B               	addwf	writeString@string,w,c
  4093  0022D2  6E1F               	movwf	(??_writeString+2)& (0+255),c
  4094  0022D4  5012               	movf	?___wmul+1,w,c
  4095  0022D6  201C               	addwfc	writeString@string+1,w,c
  4096  0022D8  6E20               	movwf	(??_writeString+3)& (0+255),c
  4097  0022DA  501F               	movf	??_writeString+2,w,c
  4098  0022DC  6EF6               	movwf	tblptrl,c
  4099  0022DE  6EE9               	movwf	fsr0l,c
  4100  0022E0  0E07               	movlw	(high __ramtop+-1)
  4101  0022E2  6EEA               	movwf	fsr0h,c
  4102  0022E4  5020               	movf	??_writeString+3,w,c
  4103  0022E6  64EA               	cpfsgt	fsr0h,c
  4104  0022E8  D003               	bra	i2u820_47
  4105  0022EA  6EEA               	movwf	fsr0h,c
  4106  0022EC  50EF               	movf	indf0,w,c
  4107  0022EE  D003               	bra	i2u820_40
  4108  0022F0                     i2u820_47:
  4109  0022F0  6EF7               	movwf	tblptrh,c
  4110  0022F2  0008               	tblrd		*
  4111  0022F4  50F5               	movf	tablat,w,c
  4112  0022F6                     i2u820_40:
  4113  0022F6  6E18               	movwf	?_writeChar+1,c
  4114  0022F8  EC7B  F01B         	call	_writeChar	;wreg free
  4115                           
  4116                           ;disp.c: 187: i++;
  4117  0022FC  2A22               	incf	writeString@i,f,c
  4118  0022FE                     i2l9306:
  4119  0022FE  0623               	decf	writeString@cnt,f,c
  4120  002300                     i2l9308:
  4121  002300  2E21               	decfsz	writeString@bits,f,c
  4122  002302  D753               	goto	i2l9286
  4123  002304                     i2l188:
  4124  002304  0012               	return	
  4125  002306                     __end_of_writeString:
  4126                           	opt stack 0
  4127                           tosu	equ	0xFFF
  4128                           tosh	equ	0xFFE
  4129                           tosl	equ	0xFFD
  4130                           pclatu	equ	0xFFB
  4131                           pclath	equ	0xFFA
  4132                           tblptru	equ	0xFF8
  4133                           tblptrh	equ	0xFF7
  4134                           tblptrl	equ	0xFF6
  4135                           tablat	equ	0xFF5
  4136                           prodh	equ	0xFF4
  4137                           prodl	equ	0xFF3
  4138                           intcon	equ	0xFF2
  4139                           intcon2	equ	0xFF1
  4140                           indf0	equ	0xFEF
  4141                           postinc0	equ	0xFEE
  4142                           fsr0h	equ	0xFEA
  4143                           fsr0l	equ	0xFE9
  4144                           wreg	equ	0xFE8
  4145                           postinc1	equ	0xFE6
  4146                           postdec1	equ	0xFE5
  4147                           fsr1h	equ	0xFE2
  4148                           fsr1l	equ	0xFE1
  4149                           postinc2	equ	0xFDE
  4150                           postdec2	equ	0xFDD
  4151                           plusw2	equ	0xFDB
  4152                           fsr2h	equ	0xFDA
  4153                           fsr2l	equ	0xFD9
  4154                           status	equ	0xFD8
  4155                           
  4156 ;; *************** function _hibit *****************
  4157 ;; Defined at:
  4158 ;;		line 19 in file "defs.c"
  4159 ;; Parameters:    Size  Location     Type
  4160 ;;  x               4    0[COMRAM] unsigned long 
  4161 ;; Auto vars:     Size  Location     Type
  4162 ;;  log2Val         4    7[COMRAM] unsigned long 
  4163 ;; Return value:  Size  Location     Type
  4164 ;;                  4    0[COMRAM] unsigned long 
  4165 ;; Registers used:
  4166 ;;		wreg, status,2, status,0
  4167 ;; Tracked objects:
  4168 ;;		On entry : 0/0
  4169 ;;		On exit  : 0/0
  4170 ;;		Unchanged: 0/0
  4171 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4172 ;;      Params:         4       0       0       0       0       0       0       0       0
  4173 ;;      Locals:         4       0       0       0       0       0       0       0       0
  4174 ;;      Temps:          3       0       0       0       0       0       0       0       0
  4175 ;;      Totals:        11       0       0       0       0       0       0       0       0
  4176 ;;Total ram usage:       11 bytes
  4177 ;; Hardware stack levels used:    1
  4178 ;; This function calls:
  4179 ;;		Nothing
  4180 ;; This function is called by:
  4181 ;;		_writeString
  4182 ;; This function uses a non-reentrant model
  4183 ;;
  4184                           
  4185                           	psect	text18
  4186  0033AC                     __ptext18:
  4187                           	opt stack 0
  4188  0033AC                     _hibit:
  4189                           	opt stack 22
  4190                           
  4191                           ;defs.c: 20: uint32_t log2Val = 0;
  4192                           
  4193                           ;incstack = 0
  4194                           ;incstack = 0
  4195  0033AC  0E00               	movlw	0
  4196  0033AE  6E08               	movwf	hibit@log2Val,c
  4197  0033B0  0E00               	movlw	0
  4198  0033B2  6E09               	movwf	hibit@log2Val+1,c
  4199  0033B4  0E00               	movlw	0
  4200  0033B6  6E0A               	movwf	hibit@log2Val+2,c
  4201  0033B8  0E00               	movlw	0
  4202  0033BA  6E0B               	movwf	hibit@log2Val+3,c
  4203                           
  4204                           ;defs.c: 21: while (x >>= 1) log2Val++;
  4205  0033BC  D008               	goto	i2l446
  4206  0033BE                     i2l8562:
  4207  0033BE  0E01               	movlw	1
  4208  0033C0  2608               	addwf	hibit@log2Val,f,c
  4209  0033C2  0E00               	movlw	0
  4210  0033C4  2209               	addwfc	hibit@log2Val+1,f,c
  4211  0033C6  0E00               	movlw	0
  4212  0033C8  220A               	addwfc	hibit@log2Val+2,f,c
  4213  0033CA  0E00               	movlw	0
  4214  0033CC  220B               	addwfc	hibit@log2Val+3,f,c
  4215  0033CE                     i2l446:
  4216  0033CE  90D8               	bcf	status,0,c
  4217  0033D0  3204               	rrcf	hibit@x+3,f,c
  4218  0033D2  3203               	rrcf	hibit@x+2,f,c
  4219  0033D4  3202               	rrcf	hibit@x+1,f,c
  4220  0033D6  3201               	rrcf	hibit@x,f,c
  4221  0033D8  5004               	movf	(hibit@x+3)& (0+255),w,c
  4222  0033DA  1001               	iorwf	hibit@x& (0+255),w,c
  4223  0033DC  1002               	iorwf	(hibit@x+1)& (0+255),w,c
  4224  0033DE  1003               	iorwf	(hibit@x+2)& (0+255),w,c
  4225  0033E0  A4D8               	btfss	status,2,c
  4226  0033E2  D7ED               	goto	i2l8562
  4227                           
  4228                           ;defs.c: 22: return 1 << log2Val;
  4229  0033E4  C008  F005         	movff	hibit@log2Val,??_hibit
  4230  0033E8  0E01               	movlw	1
  4231  0033EA  6E06               	movwf	(??_hibit+1)& (0+255),c
  4232  0033EC  6A07               	clrf	(??_hibit+2)& (0+255),c
  4233  0033EE  2A05               	incf	??_hibit,f,c
  4234  0033F0  D003               	goto	i2u708_44
  4235  0033F2                     i2u708_45:
  4236  0033F2  90D8               	bcf	status,0,c
  4237  0033F4  3606               	rlcf	??_hibit+1,f,c
  4238  0033F6  3607               	rlcf	??_hibit+2,f,c
  4239  0033F8                     i2u708_44:
  4240  0033F8  2E05               	decfsz	??_hibit,f,c
  4241  0033FA  D7FB               	goto	i2u708_45
  4242  0033FC  C006  F001         	movff	??_hibit+1,?_hibit
  4243  003400  C007  F002         	movff	??_hibit+2,?_hibit+1
  4244  003404  0E00               	movlw	0
  4245  003406  BE02               	btfsc	?_hibit+1,7,c
  4246  003408  0EFF               	movlw	-1
  4247  00340A  6E03               	movwf	?_hibit+2,c
  4248  00340C  6E04               	movwf	?_hibit+3,c
  4249  00340E  0012               	return	
  4250  003410                     __end_of_hibit:
  4251                           	opt stack 0
  4252                           tosu	equ	0xFFF
  4253                           tosh	equ	0xFFE
  4254                           tosl	equ	0xFFD
  4255                           pclatu	equ	0xFFB
  4256                           pclath	equ	0xFFA
  4257                           tblptru	equ	0xFF8
  4258                           tblptrh	equ	0xFF7
  4259                           tblptrl	equ	0xFF6
  4260                           tablat	equ	0xFF5
  4261                           prodh	equ	0xFF4
  4262                           prodl	equ	0xFF3
  4263                           intcon	equ	0xFF2
  4264                           intcon2	equ	0xFF1
  4265                           indf0	equ	0xFEF
  4266                           postinc0	equ	0xFEE
  4267                           fsr0h	equ	0xFEA
  4268                           fsr0l	equ	0xFE9
  4269                           wreg	equ	0xFE8
  4270                           postinc1	equ	0xFE6
  4271                           postdec1	equ	0xFE5
  4272                           fsr1h	equ	0xFE2
  4273                           fsr1l	equ	0xFE1
  4274                           postinc2	equ	0xFDE
  4275                           postdec2	equ	0xFDD
  4276                           plusw2	equ	0xFDB
  4277                           fsr2h	equ	0xFDA
  4278                           fsr2l	equ	0xFD9
  4279                           status	equ	0xFD8
  4280                           
  4281 ;; *************** function _countBits *****************
  4282 ;; Defined at:
  4283 ;;		line 9 in file "defs.c"
  4284 ;; Parameters:    Size  Location     Type
  4285 ;;  num             4    0[COMRAM] unsigned long 
  4286 ;; Auto vars:     Size  Location     Type
  4287 ;;  ret             1    4[COMRAM] unsigned char 
  4288 ;; Return value:  Size  Location     Type
  4289 ;;                  1    wreg      unsigned char 
  4290 ;; Registers used:
  4291 ;;		wreg, status,2, status,0
  4292 ;; Tracked objects:
  4293 ;;		On entry : 0/0
  4294 ;;		On exit  : 0/0
  4295 ;;		Unchanged: 0/0
  4296 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4297 ;;      Params:         4       0       0       0       0       0       0       0       0
  4298 ;;      Locals:         1       0       0       0       0       0       0       0       0
  4299 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4300 ;;      Totals:         5       0       0       0       0       0       0       0       0
  4301 ;;Total ram usage:        5 bytes
  4302 ;; Hardware stack levels used:    1
  4303 ;; This function calls:
  4304 ;;		Nothing
  4305 ;; This function is called by:
  4306 ;;		_writeFloat
  4307 ;;		_writeString
  4308 ;;		_printRTC
  4309 ;;		_writeLong
  4310 ;;		_maxSize
  4311 ;; This function uses a non-reentrant model
  4312 ;;
  4313                           
  4314                           	psect	text19
  4315  003822                     __ptext19:
  4316                           	opt stack 0
  4317  003822                     _countBits:
  4318                           	opt stack 22
  4319                           
  4320                           ;defs.c: 10: uint8_t ret = num & 1;
  4321                           
  4322                           ;incstack = 0
  4323                           ;incstack = 0
  4324  003822  5001               	movf	countBits@num,w,c
  4325  003824  0B01               	andlw	1
  4326  003826  6E05               	movwf	countBits@ret,c
  4327                           
  4328                           ;defs.c: 11: while (num) ret += (0x1 & (num >>= 1));
  4329  003828  D008               	goto	i2l440
  4330  00382A                     i2l8554:
  4331  00382A  90D8               	bcf	status,0,c
  4332  00382C  3204               	rrcf	countBits@num+3,f,c
  4333  00382E  3203               	rrcf	countBits@num+2,f,c
  4334  003830  3202               	rrcf	countBits@num+1,f,c
  4335  003832  3201               	rrcf	countBits@num,f,c
  4336  003834  5001               	movf	countBits@num& (0+255),w,c
  4337  003836  0B01               	andlw	1
  4338  003838  2605               	addwf	countBits@ret,f,c
  4339  00383A                     i2l440:
  4340  00383A  5004               	movf	countBits@num+3,w,c
  4341  00383C  1001               	iorwf	countBits@num,w,c
  4342  00383E  1002               	iorwf	countBits@num+1,w,c
  4343  003840  1003               	iorwf	countBits@num+2,w,c
  4344  003842  A4D8               	btfss	status,2,c
  4345  003844  D7F2               	goto	i2l8554
  4346                           
  4347                           ;defs.c: 12: return ret;
  4348  003846  5005               	movf	countBits@ret,w,c
  4349  003848  0012               	return	
  4350  00384A                     __end_of_countBits:
  4351                           	opt stack 0
  4352                           tosu	equ	0xFFF
  4353                           tosh	equ	0xFFE
  4354                           tosl	equ	0xFFD
  4355                           pclatu	equ	0xFFB
  4356                           pclath	equ	0xFFA
  4357                           tblptru	equ	0xFF8
  4358                           tblptrh	equ	0xFF7
  4359                           tblptrl	equ	0xFF6
  4360                           tablat	equ	0xFF5
  4361                           prodh	equ	0xFF4
  4362                           prodl	equ	0xFF3
  4363                           intcon	equ	0xFF2
  4364                           intcon2	equ	0xFF1
  4365                           indf0	equ	0xFEF
  4366                           postinc0	equ	0xFEE
  4367                           fsr0h	equ	0xFEA
  4368                           fsr0l	equ	0xFE9
  4369                           wreg	equ	0xFE8
  4370                           postinc1	equ	0xFE6
  4371                           postdec1	equ	0xFE5
  4372                           fsr1h	equ	0xFE2
  4373                           fsr1l	equ	0xFE1
  4374                           postinc2	equ	0xFDE
  4375                           postdec2	equ	0xFDD
  4376                           plusw2	equ	0xFDB
  4377                           fsr2h	equ	0xFDA
  4378                           fsr2l	equ	0xFD9
  4379                           status	equ	0xFD8
  4380                           
  4381 ;; *************** function _writeChar *****************
  4382 ;; Defined at:
  4383 ;;		line 118 in file "disp.c"
  4384 ;; Parameters:    Size  Location     Type
  4385 ;;  digit           1   22[COMRAM] unsigned char 
  4386 ;;  ch              1   23[COMRAM] unsigned char 
  4387 ;; Auto vars:     Size  Location     Type
  4388 ;;  dig             1   24[COMRAM] unsigned char 
  4389 ;; Return value:  Size  Location     Type
  4390 ;;		None               void
  4391 ;; Registers used:
  4392 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4393 ;; Tracked objects:
  4394 ;;		On entry : 0/0
  4395 ;;		On exit  : 0/0
  4396 ;;		Unchanged: 0/0
  4397 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4398 ;;      Params:         2       0       0       0       0       0       0       0       0
  4399 ;;      Locals:         1       0       0       0       0       0       0       0       0
  4400 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4401 ;;      Totals:         3       0       0       0       0       0       0       0       0
  4402 ;;Total ram usage:        3 bytes
  4403 ;; Hardware stack levels used:    1
  4404 ;; Hardware stack levels required when called:    1
  4405 ;; This function calls:
  4406 ;;		_getFontChar
  4407 ;;		_log2
  4408 ;; This function is called by:
  4409 ;;		_writeString
  4410 ;; This function uses a non-reentrant model
  4411 ;;
  4412                           
  4413                           	psect	text20
  4414  0036F6                     __ptext20:
  4415                           	opt stack 0
  4416  0036F6                     _writeChar:
  4417                           	opt stack 21
  4418                           
  4419                           ;disp.c: 119: uint8_t dig = (uint8_t) log2(digit);
  4420                           
  4421                           ;incstack = 0
  4422                           ;incstack = 0
  4423  0036F6  5017               	movf	writeChar@digit,w,c
  4424  0036F8  6E0C               	movwf	?_log2,c
  4425  0036FA  6A0D               	clrf	?_log2+1,c
  4426  0036FC  6A0E               	clrf	?_log2+2,c
  4427  0036FE  6A0F               	clrf	?_log2+3,c
  4428  003700  ECB8  F01A         	call	_log2	;wreg free
  4429  003704  500C               	movf	?_log2,w,c
  4430  003706  6E19               	movwf	writeChar@dig,c
  4431                           
  4432                           ;disp.c: 120: screen.digits.screen[dig].bits = getFontChar(ch);
  4433  003708  5019               	movf	writeChar@dig,w,c
  4434  00370A  0D01               	mullw	1
  4435  00370C  0101               	movlb	1	; () banked
  4436  00370E  0E00               	movlw	low _screen
  4437  003710  24F3               	addwf	prodl,w,c
  4438  003712  6ED9               	movwf	fsr2l,c
  4439  003714  0101               	movlb	1	; () banked
  4440  003716  0E01               	movlw	high _screen
  4441  003718  20F4               	addwfc	prodh,w,c
  4442  00371A  6EDA               	movwf	fsr2h,c
  4443  00371C  C018  F001         	movff	writeChar@ch,?_getFontChar
  4444  003720  ECC3  F00E         	call	_getFontChar	;wreg free
  4445  003724  6EDF               	movwf	indf2,c
  4446                           
  4447                           ;disp.c: 121: screen.changed |= digit;
  4448  003726  5017               	movf	writeChar@digit,w,c
  4449  003728  0101               	movlb	1	; () banked
  4450  00372A  0101               	movlb	1	; () banked
  4451  00372C  130B               	iorwf	(_screen+11)& (0+255),f,b
  4452                           
  4453                           ; BSR set to: 1
  4454  00372E  0012               	return	
  4455  003730                     __end_of_writeChar:
  4456                           	opt stack 0
  4457                           tosu	equ	0xFFF
  4458                           tosh	equ	0xFFE
  4459                           tosl	equ	0xFFD
  4460                           pclatu	equ	0xFFB
  4461                           pclath	equ	0xFFA
  4462                           tblptru	equ	0xFF8
  4463                           tblptrh	equ	0xFF7
  4464                           tblptrl	equ	0xFF6
  4465                           tablat	equ	0xFF5
  4466                           prodh	equ	0xFF4
  4467                           prodl	equ	0xFF3
  4468                           intcon	equ	0xFF2
  4469                           intcon2	equ	0xFF1
  4470                           indf0	equ	0xFEF
  4471                           postinc0	equ	0xFEE
  4472                           fsr0h	equ	0xFEA
  4473                           fsr0l	equ	0xFE9
  4474                           wreg	equ	0xFE8
  4475                           postinc1	equ	0xFE6
  4476                           postdec1	equ	0xFE5
  4477                           fsr1h	equ	0xFE2
  4478                           fsr1l	equ	0xFE1
  4479                           indf2	equ	0xFDF
  4480                           postinc2	equ	0xFDE
  4481                           postdec2	equ	0xFDD
  4482                           plusw2	equ	0xFDB
  4483                           fsr2h	equ	0xFDA
  4484                           fsr2l	equ	0xFD9
  4485                           status	equ	0xFD8
  4486                           
  4487 ;; *************** function _getFontChar *****************
  4488 ;; Defined at:
  4489 ;;		line 117 in file "display1.h"
  4490 ;; Parameters:    Size  Location     Type
  4491 ;;  ch              1    0[COMRAM] unsigned char 
  4492 ;; Auto vars:     Size  Location     Type
  4493 ;;		None
  4494 ;; Return value:  Size  Location     Type
  4495 ;;                  1    wreg      unsigned char 
  4496 ;; Registers used:
  4497 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru
  4498 ;; Tracked objects:
  4499 ;;		On entry : 0/0
  4500 ;;		On exit  : 0/0
  4501 ;;		Unchanged: 0/0
  4502 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4503 ;;      Params:         1       0       0       0       0       0       0       0       0
  4504 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4505 ;;      Temps:          2       0       0       0       0       0       0       0       0
  4506 ;;      Totals:         3       0       0       0       0       0       0       0       0
  4507 ;;Total ram usage:        3 bytes
  4508 ;; Hardware stack levels used:    1
  4509 ;; This function calls:
  4510 ;;		Nothing
  4511 ;; This function is called by:
  4512 ;;		_writeChar
  4513 ;; This function uses a non-reentrant model
  4514 ;;
  4515                           
  4516                           	psect	text21
  4517  001D86                     __ptext21:
  4518                           	opt stack 0
  4519  001D86                     _getFontChar:
  4520                           	opt stack 21
  4521                           
  4522                           ;display1.h: 118: switch (ch)
  4523                           
  4524                           ; BSR set to: 1
  4525                           ;incstack = 0
  4526                           ;incstack = 0
  4527  001D86  D01F               	goto	i2l8544
  4528  001D88                     i2l8506:
  4529                           
  4530                           ;display1.h: 121: return lcd_font[ch - '0'];
  4531  001D88  0ED0               	movlw	208
  4532  001D8A  D001               	goto	L4
  4533  001D8C                     i2l8510:
  4534                           
  4535                           ;display1.h: 123: return lcd_font[ch - ('0' + ('a' - 'A'))];
  4536  001D8C  0EB0               	movlw	176
  4537  001D8E                     L4:
  4538  001D8E  2401               	addwf	getFontChar@ch,w,c
  4539  001D90  6E02               	movwf	??_getFontChar& (0+255),c
  4540  001D92  6A03               	clrf	(??_getFontChar+1)& (0+255),c
  4541  001D94  0EFF               	movlw	255
  4542  001D96  2203               	addwfc	(??_getFontChar+1)& (0+255),f,c
  4543  001D98  0E8C               	movlw	low _lcd_font
  4544  001D9A  2402               	addwf	??_getFontChar,w,c
  4545  001D9C  6EF6               	movwf	tblptrl,c
  4546  001D9E  0E7C               	movlw	high _lcd_font
  4547  001DA0  2003               	addwfc	??_getFontChar+1,w,c
  4548  001DA2  6EF7               	movwf	tblptrh,c
  4549  001DA4  0008               	tblrd		*
  4550  001DA6  50F5               	movf	tablat,w,c
  4551  001DA8  D0F4               	goto	i2l122
  4552  001DAA                     i2l8514:
  4553                           
  4554                           ;display1.h: 125: return 0b01000000;
  4555  001DAA  0E40               	movlw	64
  4556  001DAC  D0F2               	goto	i2l122
  4557  001DAE                     i2l8518:
  4558                           
  4559                           ;display1.h: 127: case ',':
  4560                           ;display1.h: 128: return 0b10000000;
  4561  001DAE  0E80               	movlw	128
  4562  001DB0  D0F0               	goto	i2l122
  4563  001DB2                     i2l8522:
  4564                           
  4565                           ;display1.h: 130: return 0b00000001 + 0b00001000 + 0b00010000 + 0b00100000;
  4566  001DB2  0E39               	movlw	57
  4567  001DB4  D0EE               	goto	i2l122
  4568  001DB6                     i2l8526:
  4569                           
  4570                           ;display1.h: 132: return 0b00000001 + 0b00000010 + 0b00000100 + 0b00001000;
  4571  001DB6  0E0F               	movlw	15
  4572  001DB8  D0EC               	goto	i2l122
  4573  001DBA                     i2l8530:
  4574                           
  4575                           ;display1.h: 134: return 0b00001000;
  4576  001DBA  0E08               	movlw	8
  4577  001DBC  D0EA               	goto	i2l122
  4578  001DBE                     i2l8534:
  4579                           
  4580                           ;display1.h: 136: return 0b00000001 + 0b00000010 + 0b00100000 + 0b01000000;
  4581  001DBE  0E63               	movlw	99
  4582  001DC0  D0E8               	goto	i2l122
  4583  001DC2                     i2l8538:
  4584                           
  4585                           ;display1.h: 138: return 0;
  4586  001DC2  0E00               	movlw	0
  4587  001DC4  D0E6               	goto	i2l122
  4588  001DC6                     i2l8544:
  4589  001DC6  5001               	movf	getFontChar@ch,w,c
  4590                           
  4591                           ; Switch size 1, requested type "space"
  4592                           ; Number of cases is 76, Range of values is 42 to 122
  4593                           ; switch strategies available:
  4594                           ; Name         Instructions Cycles
  4595                           ; simple_byte          229   115 (average)
  4596                           ;	Chosen strategy is simple_byte
  4597  001DC8  0A2A               	xorlw	42	; case 42
  4598  001DCA  B4D8               	btfsc	status,2,c
  4599  001DCC  D7F8               	goto	i2l8534
  4600  001DCE  0A06               	xorlw	6	; case 44
  4601  001DD0  B4D8               	btfsc	status,2,c
  4602  001DD2  D7ED               	goto	i2l8518
  4603  001DD4  0A01               	xorlw	1	; case 45
  4604  001DD6  B4D8               	btfsc	status,2,c
  4605  001DD8  D7E8               	goto	i2l8514
  4606  001DDA  0A03               	xorlw	3	; case 46
  4607  001DDC  B4D8               	btfsc	status,2,c
  4608  001DDE  D7E7               	goto	i2l8518
  4609  001DE0  0A1E               	xorlw	30	; case 48
  4610  001DE2  B4D8               	btfsc	status,2,c
  4611  001DE4  D7D1               	goto	i2l8506
  4612  001DE6  0A01               	xorlw	1	; case 49
  4613  001DE8  B4D8               	btfsc	status,2,c
  4614  001DEA  D7CE               	goto	i2l8506
  4615  001DEC  0A03               	xorlw	3	; case 50
  4616  001DEE  B4D8               	btfsc	status,2,c
  4617  001DF0  D7CB               	goto	i2l8506
  4618  001DF2  0A01               	xorlw	1	; case 51
  4619  001DF4  B4D8               	btfsc	status,2,c
  4620  001DF6  D7C8               	goto	i2l8506
  4621  001DF8  0A07               	xorlw	7	; case 52
  4622  001DFA  B4D8               	btfsc	status,2,c
  4623  001DFC  D7C5               	goto	i2l8506
  4624  001DFE  0A01               	xorlw	1	; case 53
  4625  001E00  B4D8               	btfsc	status,2,c
  4626  001E02  D7C2               	goto	i2l8506
  4627  001E04  0A03               	xorlw	3	; case 54
  4628  001E06  B4D8               	btfsc	status,2,c
  4629  001E08  D7BF               	goto	i2l8506
  4630  001E0A  0A01               	xorlw	1	; case 55
  4631  001E0C  B4D8               	btfsc	status,2,c
  4632  001E0E  D7BC               	goto	i2l8506
  4633  001E10  0A0F               	xorlw	15	; case 56
  4634  001E12  B4D8               	btfsc	status,2,c
  4635  001E14  D7B9               	goto	i2l8506
  4636  001E16  0A01               	xorlw	1	; case 57
  4637  001E18  B4D8               	btfsc	status,2,c
  4638  001E1A  D7B6               	goto	i2l8506
  4639  001E1C  0A03               	xorlw	3	; case 58
  4640  001E1E  B4D8               	btfsc	status,2,c
  4641  001E20  D7B3               	goto	i2l8506
  4642  001E22  0A01               	xorlw	1	; case 59
  4643  001E24  B4D8               	btfsc	status,2,c
  4644  001E26  D7B0               	goto	i2l8506
  4645  001E28  0A07               	xorlw	7	; case 60
  4646  001E2A  B4D8               	btfsc	status,2,c
  4647  001E2C  D7AD               	goto	i2l8506
  4648  001E2E  0A01               	xorlw	1	; case 61
  4649  001E30  B4D8               	btfsc	status,2,c
  4650  001E32  D7AA               	goto	i2l8506
  4651  001E34  0A03               	xorlw	3	; case 62
  4652  001E36  B4D8               	btfsc	status,2,c
  4653  001E38  D7A7               	goto	i2l8506
  4654  001E3A  0A01               	xorlw	1	; case 63
  4655  001E3C  B4D8               	btfsc	status,2,c
  4656  001E3E  D7A4               	goto	i2l8506
  4657  001E40  0A7F               	xorlw	127	; case 64
  4658  001E42  B4D8               	btfsc	status,2,c
  4659  001E44  D7A1               	goto	i2l8506
  4660  001E46  0A01               	xorlw	1	; case 65
  4661  001E48  B4D8               	btfsc	status,2,c
  4662  001E4A  D79E               	goto	i2l8506
  4663  001E4C  0A03               	xorlw	3	; case 66
  4664  001E4E  B4D8               	btfsc	status,2,c
  4665  001E50  D79B               	goto	i2l8506
  4666  001E52  0A01               	xorlw	1	; case 67
  4667  001E54  B4D8               	btfsc	status,2,c
  4668  001E56  D798               	goto	i2l8506
  4669  001E58  0A07               	xorlw	7	; case 68
  4670  001E5A  B4D8               	btfsc	status,2,c
  4671  001E5C  D795               	goto	i2l8506
  4672  001E5E  0A01               	xorlw	1	; case 69
  4673  001E60  B4D8               	btfsc	status,2,c
  4674  001E62  D792               	goto	i2l8506
  4675  001E64  0A03               	xorlw	3	; case 70
  4676  001E66  B4D8               	btfsc	status,2,c
  4677  001E68  D78F               	goto	i2l8506
  4678  001E6A  0A01               	xorlw	1	; case 71
  4679  001E6C  B4D8               	btfsc	status,2,c
  4680  001E6E  D78C               	goto	i2l8506
  4681  001E70  0A0F               	xorlw	15	; case 72
  4682  001E72  B4D8               	btfsc	status,2,c
  4683  001E74  D789               	goto	i2l8506
  4684  001E76  0A01               	xorlw	1	; case 73
  4685  001E78  B4D8               	btfsc	status,2,c
  4686  001E7A  D786               	goto	i2l8506
  4687  001E7C  0A03               	xorlw	3	; case 74
  4688  001E7E  B4D8               	btfsc	status,2,c
  4689  001E80  D783               	goto	i2l8506
  4690  001E82  0A01               	xorlw	1	; case 75
  4691  001E84  B4D8               	btfsc	status,2,c
  4692  001E86  D780               	goto	i2l8506
  4693  001E88  0A07               	xorlw	7	; case 76
  4694  001E8A  B4D8               	btfsc	status,2,c
  4695  001E8C  D77D               	goto	i2l8506
  4696  001E8E  0A01               	xorlw	1	; case 77
  4697  001E90  B4D8               	btfsc	status,2,c
  4698  001E92  D77A               	goto	i2l8506
  4699  001E94  0A03               	xorlw	3	; case 78
  4700  001E96  B4D8               	btfsc	status,2,c
  4701  001E98  D777               	goto	i2l8506
  4702  001E9A  0A01               	xorlw	1	; case 79
  4703  001E9C  B4D8               	btfsc	status,2,c
  4704  001E9E  D774               	goto	i2l8506
  4705  001EA0  0A1F               	xorlw	31	; case 80
  4706  001EA2  B4D8               	btfsc	status,2,c
  4707  001EA4  D771               	goto	i2l8506
  4708  001EA6  0A01               	xorlw	1	; case 81
  4709  001EA8  B4D8               	btfsc	status,2,c
  4710  001EAA  D76E               	goto	i2l8506
  4711  001EAC  0A03               	xorlw	3	; case 82
  4712  001EAE  B4D8               	btfsc	status,2,c
  4713  001EB0  D76B               	goto	i2l8506
  4714  001EB2  0A01               	xorlw	1	; case 83
  4715  001EB4  B4D8               	btfsc	status,2,c
  4716  001EB6  D768               	goto	i2l8506
  4717  001EB8  0A07               	xorlw	7	; case 84
  4718  001EBA  B4D8               	btfsc	status,2,c
  4719  001EBC  D765               	goto	i2l8506
  4720  001EBE  0A01               	xorlw	1	; case 85
  4721  001EC0  B4D8               	btfsc	status,2,c
  4722  001EC2  D762               	goto	i2l8506
  4723  001EC4  0A03               	xorlw	3	; case 86
  4724  001EC6  B4D8               	btfsc	status,2,c
  4725  001EC8  D75F               	goto	i2l8506
  4726  001ECA  0A01               	xorlw	1	; case 87
  4727  001ECC  B4D8               	btfsc	status,2,c
  4728  001ECE  D75C               	goto	i2l8506
  4729  001ED0  0A0F               	xorlw	15	; case 88
  4730  001ED2  B4D8               	btfsc	status,2,c
  4731  001ED4  D759               	goto	i2l8506
  4732  001ED6  0A01               	xorlw	1	; case 89
  4733  001ED8  B4D8               	btfsc	status,2,c
  4734  001EDA  D756               	goto	i2l8506
  4735  001EDC  0A03               	xorlw	3	; case 90
  4736  001EDE  B4D8               	btfsc	status,2,c
  4737  001EE0  D753               	goto	i2l8506
  4738  001EE2  0A01               	xorlw	1	; case 91
  4739  001EE4  B4D8               	btfsc	status,2,c
  4740  001EE6  D765               	goto	i2l8522
  4741  001EE8  0A06               	xorlw	6	; case 93
  4742  001EEA  B4D8               	btfsc	status,2,c
  4743  001EEC  D764               	goto	i2l8526
  4744  001EEE  0A02               	xorlw	2	; case 95
  4745  001EF0  B4D8               	btfsc	status,2,c
  4746  001EF2  D763               	goto	i2l8530
  4747  001EF4  0A3E               	xorlw	62	; case 97
  4748  001EF6  B4D8               	btfsc	status,2,c
  4749  001EF8  D749               	goto	i2l8510
  4750  001EFA  0A03               	xorlw	3	; case 98
  4751  001EFC  B4D8               	btfsc	status,2,c
  4752  001EFE  D746               	goto	i2l8510
  4753  001F00  0A01               	xorlw	1	; case 99
  4754  001F02  B4D8               	btfsc	status,2,c
  4755  001F04  D743               	goto	i2l8510
  4756  001F06  0A07               	xorlw	7	; case 100
  4757  001F08  B4D8               	btfsc	status,2,c
  4758  001F0A  D740               	goto	i2l8510
  4759  001F0C  0A01               	xorlw	1	; case 101
  4760  001F0E  B4D8               	btfsc	status,2,c
  4761  001F10  D73D               	goto	i2l8510
  4762  001F12  0A03               	xorlw	3	; case 102
  4763  001F14  B4D8               	btfsc	status,2,c
  4764  001F16  D73A               	goto	i2l8510
  4765  001F18  0A01               	xorlw	1	; case 103
  4766  001F1A  B4D8               	btfsc	status,2,c
  4767  001F1C  D737               	goto	i2l8510
  4768  001F1E  0A0F               	xorlw	15	; case 104
  4769  001F20  B4D8               	btfsc	status,2,c
  4770  001F22  D734               	goto	i2l8510
  4771  001F24  0A01               	xorlw	1	; case 105
  4772  001F26  B4D8               	btfsc	status,2,c
  4773  001F28  D731               	goto	i2l8510
  4774  001F2A  0A03               	xorlw	3	; case 106
  4775  001F2C  B4D8               	btfsc	status,2,c
  4776  001F2E  D72E               	goto	i2l8510
  4777  001F30  0A01               	xorlw	1	; case 107
  4778  001F32  B4D8               	btfsc	status,2,c
  4779  001F34  D72B               	goto	i2l8510
  4780  001F36  0A07               	xorlw	7	; case 108
  4781  001F38  B4D8               	btfsc	status,2,c
  4782  001F3A  D728               	goto	i2l8510
  4783  001F3C  0A01               	xorlw	1	; case 109
  4784  001F3E  B4D8               	btfsc	status,2,c
  4785  001F40  D725               	goto	i2l8510
  4786  001F42  0A03               	xorlw	3	; case 110
  4787  001F44  B4D8               	btfsc	status,2,c
  4788  001F46  D722               	goto	i2l8510
  4789  001F48  0A01               	xorlw	1	; case 111
  4790  001F4A  B4D8               	btfsc	status,2,c
  4791  001F4C  D71F               	goto	i2l8510
  4792  001F4E  0A1F               	xorlw	31	; case 112
  4793  001F50  B4D8               	btfsc	status,2,c
  4794  001F52  D71C               	goto	i2l8510
  4795  001F54  0A01               	xorlw	1	; case 113
  4796  001F56  B4D8               	btfsc	status,2,c
  4797  001F58  D719               	goto	i2l8510
  4798  001F5A  0A03               	xorlw	3	; case 114
  4799  001F5C  B4D8               	btfsc	status,2,c
  4800  001F5E  D716               	goto	i2l8510
  4801  001F60  0A01               	xorlw	1	; case 115
  4802  001F62  B4D8               	btfsc	status,2,c
  4803  001F64  D713               	goto	i2l8510
  4804  001F66  0A07               	xorlw	7	; case 116
  4805  001F68  B4D8               	btfsc	status,2,c
  4806  001F6A  D710               	goto	i2l8510
  4807  001F6C  0A01               	xorlw	1	; case 117
  4808  001F6E  B4D8               	btfsc	status,2,c
  4809  001F70  D70D               	goto	i2l8510
  4810  001F72  0A03               	xorlw	3	; case 118
  4811  001F74  B4D8               	btfsc	status,2,c
  4812  001F76  D70A               	goto	i2l8510
  4813  001F78  0A01               	xorlw	1	; case 119
  4814  001F7A  B4D8               	btfsc	status,2,c
  4815  001F7C  D707               	goto	i2l8510
  4816  001F7E  0A0F               	xorlw	15	; case 120
  4817  001F80  B4D8               	btfsc	status,2,c
  4818  001F82  D704               	goto	i2l8510
  4819  001F84  0A01               	xorlw	1	; case 121
  4820  001F86  B4D8               	btfsc	status,2,c
  4821  001F88  D701               	goto	i2l8510
  4822  001F8A  0A03               	xorlw	3	; case 122
  4823  001F8C  B4D8               	btfsc	status,2,c
  4824  001F8E  D6FE               	goto	i2l8510
  4825  001F90  D718               	goto	i2l8538
  4826  001F92                     i2l122:
  4827  001F92  0012               	return	
  4828  001F94                     __end_of_getFontChar:
  4829                           	opt stack 0
  4830                           tosu	equ	0xFFF
  4831                           tosh	equ	0xFFE
  4832                           tosl	equ	0xFFD
  4833                           pclatu	equ	0xFFB
  4834                           pclath	equ	0xFFA
  4835                           tblptru	equ	0xFF8
  4836                           tblptrh	equ	0xFF7
  4837                           tblptrl	equ	0xFF6
  4838                           tablat	equ	0xFF5
  4839                           prodh	equ	0xFF4
  4840                           prodl	equ	0xFF3
  4841                           intcon	equ	0xFF2
  4842                           intcon2	equ	0xFF1
  4843                           indf0	equ	0xFEF
  4844                           postinc0	equ	0xFEE
  4845                           fsr0h	equ	0xFEA
  4846                           fsr0l	equ	0xFE9
  4847                           wreg	equ	0xFE8
  4848                           postinc1	equ	0xFE6
  4849                           postdec1	equ	0xFE5
  4850                           fsr1h	equ	0xFE2
  4851                           fsr1l	equ	0xFE1
  4852                           indf2	equ	0xFDF
  4853                           postinc2	equ	0xFDE
  4854                           postdec2	equ	0xFDD
  4855                           plusw2	equ	0xFDB
  4856                           fsr2h	equ	0xFDA
  4857                           fsr2l	equ	0xFD9
  4858                           status	equ	0xFD8
  4859                           
  4860 ;; *************** function _sprintf *****************
  4861 ;; Defined at:
  4862 ;;		line 493 in file "/usr/opt/microchip/xc8/v1.20/sources/common/doprnt.c"
  4863 ;; Parameters:    Size  Location     Type
  4864 ;;  sp              2   79[COMRAM] PTR unsigned char 
  4865 ;;		 -> printRTC@str(9), writeFloat@str(9), writeLong@str(9), 
  4866 ;;  f               2   81[COMRAM] PTR const unsigned char 
  4867 ;;		 -> STR_22(15), STR_21(13), STR_20(15), STR_19(15), 
  4868 ;;		 -> STR_18(15), STR_17(10), STR_9(5), STR_8(5), 
  4869 ;; Auto vars:     Size  Location     Type
  4870 ;;  vd              2   13[BANK0 ] unsigned int 
  4871 ;;  vd              2   15[BANK0 ] unsigned int 
  4872 ;;  _val            4   34[BANK0 ] struct .
  4873 ;;  fval            3   26[BANK0 ] struct .
  4874 ;;  integ           3   17[BANK0 ] struct .
  4875 ;;  ival            3    0        struct .
  4876 ;;  prec            2   31[BANK0 ] int 
  4877 ;;  width           2   29[BANK0 ] int 
  4878 ;;  flag            2   24[BANK0 ] unsigned short 
  4879 ;;  exp             2   22[BANK0 ] int 
  4880 ;;  ap              2   20[BANK0 ] PTR void [1]
  4881 ;;		 -> ?_sprintf(2), 
  4882 ;;  c               1   33[BANK0 ] char 
  4883 ;;  d               1    0        unsigned char 
  4884 ;; Return value:  Size  Location     Type
  4885 ;;                  2   79[COMRAM] int 
  4886 ;; Registers used:
  4887 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4888 ;; Tracked objects:
  4889 ;;		On entry : 0/0
  4890 ;;		On exit  : 0/0
  4891 ;;		Unchanged: 0/0
  4892 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4893 ;;      Params:        12       0       0       0       0       0       0       0       0
  4894 ;;      Locals:         0      32       0       0       0       0       0       0       0
  4895 ;;      Temps:          0       6       0       0       0       0       0       0       0
  4896 ;;      Totals:        12      38       0       0       0       0       0       0       0
  4897 ;;Total ram usage:       50 bytes
  4898 ;; Hardware stack levels used:    1
  4899 ;; Hardware stack levels required when called:    4
  4900 ;; This function calls:
  4901 ;;		_fround
  4902 ;;		_scale
  4903 ;;		_isdigit
  4904 ;;		__tdiv_to_l_
  4905 ;;		__div_to_l_
  4906 ;;		___asftadd
  4907 ;;		___asftmul
  4908 ;;		___ftmul
  4909 ;;		___asftsub
  4910 ;;		___awdiv
  4911 ;;		___ftge
  4912 ;;		___ftneg
  4913 ;;		___fttol
  4914 ;;		___lldiv
  4915 ;;		___llmod
  4916 ;;		___lltoft
  4917 ;;		___lwmod
  4918 ;;		___wmul
  4919 ;; This function is called by:
  4920 ;;		_writeFloat
  4921 ;;		_printRTC
  4922 ;;		_writeLong
  4923 ;; This function uses a non-reentrant model
  4924 ;;
  4925                           
  4926                           	psect	text22
  4927  00001C                     __ptext22:
  4928                           	opt stack 0
  4929  00001C                     _sprintf:
  4930                           	opt stack 19
  4931                           
  4932                           ;doprnt.c: 494: va_list ap;
  4933                           ;doprnt.c: 499: signed char c;
  4934                           ;doprnt.c: 501: int width;
  4935                           ;doprnt.c: 504: int prec;
  4936                           ;doprnt.c: 508: unsigned short flag;
  4937                           ;doprnt.c: 515: char d;
  4938                           ;doprnt.c: 516: double fval, integ;
  4939                           ;doprnt.c: 517: int exp;
  4940                           ;doprnt.c: 518: double ival;
  4941                           ;doprnt.c: 519: union {
  4942                           ;doprnt.c: 520: unsigned long _val;
  4943                           ;doprnt.c: 521: struct {
  4944                           ;doprnt.c: 522: const char * _cp;
  4945                           ;doprnt.c: 523: unsigned _len;
  4946                           ;doprnt.c: 524: } _str;
  4947                           ;doprnt.c: 525: } _val;
  4948                           ;doprnt.c: 542: *ap = __va_start();
  4949                           
  4950                           ;incstack = 0
  4951                           ;incstack = 0
  4952  00001C  0E00               	movlw	high (?_sprintf+4)
  4953  00001E  0100               	movlb	0	; () banked
  4954  000020  0100               	movlb	0	; () banked
  4955  000022  6F75               	movwf	(sprintf@ap+1)& (0+255),b
  4956  000024  0E54               	movlw	low (?_sprintf+4)
  4957  000026  0100               	movlb	0	; () banked
  4958  000028  6F74               	movwf	sprintf@ap& (0+255),b
  4959                           
  4960                           ;doprnt.c: 545: while(c = *f++) {
  4961  00002A  EFB2  F007         	goto	i2l9866
  4962  00002E                     i2l9474:
  4963                           
  4964                           ; BSR set to: 0
  4965                           ;doprnt.c: 547: if(c != '%')
  4966  00002E  0100               	movlb	0	; () banked
  4967  000030  0100               	movlb	0	; () banked
  4968  000032  5181               	movf	sprintf@c& (0+255),w,b
  4969  000034  0A25               	xorlw	37
  4970  000036  B4D8               	btfsc	status,2,c
  4971  000038  D00B               	goto	i2l9480
  4972                           
  4973                           ; BSR set to: 0
  4974                           ;doprnt.c: 549: {
  4975                           ;doprnt.c: 550: ((*sp++ = (c)));
  4976  00003A  C050  FFD9         	movff	sprintf@sp,fsr2l
  4977  00003E  C051  FFDA         	movff	sprintf@sp+1,fsr2h
  4978  000042  0100               	movlb	0	; () banked
  4979  000044  C081  FFDF         	movff	sprintf@c,indf2
  4980                           
  4981                           ; BSR set to: 0
  4982  000048  4A50               	infsnz	sprintf@sp,f,c
  4983  00004A  2A51               	incf	sprintf@sp+1,f,c
  4984                           
  4985                           ;doprnt.c: 551: continue;
  4986  00004C  EFB2  F007         	goto	i2l9866
  4987  000050                     i2l9480:
  4988                           
  4989                           ; BSR set to: 0
  4990                           ;doprnt.c: 552: }
  4991                           ;doprnt.c: 555: width = 0;
  4992  000050  0E00               	movlw	0
  4993  000052  0100               	movlb	0	; () banked
  4994  000054  0100               	movlb	0	; () banked
  4995  000056  6F7E               	movwf	(sprintf@width+1)& (0+255),b
  4996  000058  0E00               	movlw	0
  4997  00005A  0100               	movlb	0	; () banked
  4998  00005C  6F7D               	movwf	sprintf@width& (0+255),b
  4999                           
  5000                           ;doprnt.c: 557: flag = 0;
  5001  00005E  0E00               	movlw	0
  5002  000060  0100               	movlb	0	; () banked
  5003  000062  0100               	movlb	0	; () banked
  5004  000064  6F79               	movwf	(sprintf@flag+1)& (0+255),b
  5005  000066  0E00               	movlw	0
  5006  000068  0100               	movlb	0	; () banked
  5007  00006A  6F78               	movwf	sprintf@flag& (0+255),b
  5008  00006C  D005               	goto	i2l9486
  5009  00006E                     i2l9482:
  5010                           
  5011                           ;doprnt.c: 589: flag |= 0x04;
  5012  00006E  0100               	movlb	0	; () banked
  5013  000070  0100               	movlb	0	; () banked
  5014  000072  8578               	bsf	sprintf@flag& (0+255),2,b
  5015                           
  5016                           ;doprnt.c: 590: f++;
  5017  000074  4A52               	infsnz	sprintf@f,f,c
  5018  000076  2A53               	incf	sprintf@f+1,f,c
  5019  000078                     i2l9486:
  5020  000078  C052  FFF6         	movff	sprintf@f,tblptrl
  5021  00007C  C053  FFF7         	movff	sprintf@f+1,tblptrh
  5022  000080  0008               	tblrd		*
  5023  000082  50F5               	movf	tablat,w,c
  5024                           
  5025                           ; Switch size 1, requested type "space"
  5026                           ; Number of cases is 1, Range of values is 48 to 48
  5027                           ; switch strategies available:
  5028                           ; Name         Instructions Cycles
  5029                           ; simple_byte            4     3 (average)
  5030                           ;	Chosen strategy is simple_byte
  5031  000084  0A30               	xorlw	48	; case 48
  5032  000086  B4D8               	btfsc	status,2,c
  5033  000088  D7F2               	goto	i2l9482
  5034                           
  5035                           ;doprnt.c: 606: if(isdigit((unsigned)*f)) {
  5036                           
  5037                           ;doprnt.c: 595: }
  5038                           
  5039                           ;doprnt.c: 594: break;
  5040  00008A  C052  FFF6         	movff	sprintf@f,tblptrl
  5041  00008E  C053  FFF7         	movff	sprintf@f+1,tblptrh
  5042  000092  0008               	tblrd		*
  5043  000094  CFF5 F001          	movff	tablat,?_isdigit
  5044  000098  EC38  F01C         	call	_isdigit	;wreg free
  5045  00009C  A0D8               	btfss	status,0,c
  5046  00009E  D03E               	goto	i2l9500
  5047                           
  5048                           ;doprnt.c: 607: width = 0;
  5049  0000A0  0E00               	movlw	0
  5050  0000A2  0100               	movlb	0	; () banked
  5051  0000A4  0100               	movlb	0	; () banked
  5052  0000A6  6F7E               	movwf	(sprintf@width+1)& (0+255),b
  5053  0000A8  0E00               	movlw	0
  5054  0000AA  0100               	movlb	0	; () banked
  5055  0000AC  6F7D               	movwf	sprintf@width& (0+255),b
  5056  0000AE                     i2l9492:
  5057                           
  5058                           ;doprnt.c: 609: width *= 10;
  5059  0000AE  C07D  F011         	movff	sprintf@width,?___wmul
  5060  0000B2  C07E  F012         	movff	sprintf@width+1,?___wmul+1
  5061  0000B6  0E00               	movlw	0
  5062  0000B8  6E14               	movwf	?___wmul+3,c
  5063  0000BA  0E0A               	movlw	10
  5064  0000BC  6E13               	movwf	?___wmul+2,c
  5065  0000BE  EC98  F01B         	call	___wmul	;wreg free
  5066  0000C2  C011  F07D         	movff	?___wmul,sprintf@width
  5067  0000C6  C012  F07E         	movff	?___wmul+1,sprintf@width+1
  5068                           
  5069                           ;doprnt.c: 610: width += *f++ - '0';
  5070  0000CA  C052  FFF6         	movff	sprintf@f,tblptrl
  5071  0000CE  C053  FFF7         	movff	sprintf@f+1,tblptrh
  5072  0000D2  0008               	tblrd		*
  5073  0000D4  CFF5 F060          	movff	tablat,??_sprintf
  5074  0000D8  0ED0               	movlw	208
  5075  0000DA  0100               	movlb	0	; () banked
  5076  0000DC  2560               	addwf	??_sprintf& (0+255),w,b
  5077  0000DE  0100               	movlb	0	; () banked
  5078  0000E0  6F61               	movwf	(??_sprintf+1)& (0+255),b
  5079  0000E2  0100               	movlb	0	; () banked
  5080  0000E4  0100               	movlb	0	; () banked
  5081  0000E6  6B62               	clrf	(??_sprintf+2)& (0+255),b
  5082  0000E8  0EFF               	movlw	255
  5083  0000EA  2362               	addwfc	(??_sprintf+2)& (0+255),f,b
  5084  0000EC  0100               	movlb	0	; () banked
  5085  0000EE  5161               	movf	(??_sprintf+1)& (0+255),w,b
  5086  0000F0  0100               	movlb	0	; () banked
  5087  0000F2  0100               	movlb	0	; () banked
  5088  0000F4  277D               	addwf	sprintf@width& (0+255),f,b
  5089  0000F6  0100               	movlb	0	; () banked
  5090  0000F8  5162               	movf	(??_sprintf+2)& (0+255),w,b
  5091  0000FA  0100               	movlb	0	; () banked
  5092  0000FC  0100               	movlb	0	; () banked
  5093  0000FE  237E               	addwfc	(sprintf@width+1)& (0+255),f,b
  5094                           
  5095                           ; BSR set to: 0
  5096  000100  4A52               	infsnz	sprintf@f,f,c
  5097  000102  2A53               	incf	sprintf@f+1,f,c
  5098                           
  5099                           ; BSR set to: 0
  5100                           ;doprnt.c: 611: } while(isdigit((unsigned)*f));
  5101  000104  C052  FFF6         	movff	sprintf@f,tblptrl
  5102  000108  C053  FFF7         	movff	sprintf@f+1,tblptrh
  5103  00010C  0008               	tblrd		*
  5104  00010E  CFF5 F001          	movff	tablat,?_isdigit
  5105  000112  EC38  F01C         	call	_isdigit	;wreg free
  5106  000116  A0D8               	btfss	status,0,c
  5107  000118  D01D               	goto	i2l9508
  5108  00011A  D7C9               	goto	i2l9492
  5109  00011C                     i2l9500:
  5110  00011C  C052  FFF6         	movff	sprintf@f,tblptrl
  5111  000120  C053  FFF7         	movff	sprintf@f+1,tblptrh
  5112  000124  0008               	tblrd		*
  5113  000126  50F5               	movf	tablat,w,c
  5114  000128  0A2A               	xorlw	42
  5115  00012A  A4D8               	btfss	status,2,c
  5116  00012C  D013               	goto	i2l9508
  5117                           
  5118                           ;doprnt.c: 614: width = (*(int *)__va_arg((*(int **)ap), (int)0));
  5119  00012E  C074  FFD9         	movff	sprintf@ap,fsr2l
  5120  000132  C075  FFDA         	movff	sprintf@ap+1,fsr2h
  5121  000136  0100               	movlb	0	; () banked
  5122  000138  CFDE F07D          	movff	postinc2,sprintf@width
  5123  00013C  0100               	movlb	0	; () banked
  5124  00013E  CFDD F07E          	movff	postdec2,sprintf@width+1
  5125                           
  5126                           ; BSR set to: 0
  5127  000142  0E02               	movlw	2
  5128  000144  0100               	movlb	0	; () banked
  5129  000146  0100               	movlb	0	; () banked
  5130  000148  2774               	addwf	sprintf@ap& (0+255),f,b
  5131  00014A  0E00               	movlw	0
  5132  00014C  0100               	movlb	0	; () banked
  5133  00014E  2375               	addwfc	(sprintf@ap+1)& (0+255),f,b
  5134                           
  5135                           ; BSR set to: 0
  5136                           ;doprnt.c: 615: f++;
  5137  000150  4A52               	infsnz	sprintf@f,f,c
  5138  000152  2A53               	incf	sprintf@f+1,f,c
  5139  000154                     i2l9508:
  5140                           
  5141                           ;doprnt.c: 617: }
  5142                           ;doprnt.c: 620: if(*f == '.') {
  5143  000154  C052  FFF6         	movff	sprintf@f,tblptrl
  5144  000158  C053  FFF7         	movff	sprintf@f+1,tblptrh
  5145  00015C  0008               	tblrd		*
  5146  00015E  50F5               	movf	tablat,w,c
  5147  000160  0A2E               	xorlw	46
  5148  000162  A4D8               	btfss	status,2,c
  5149  000164  D054               	goto	i2l9528
  5150                           
  5151                           ;doprnt.c: 621: flag |= 0x4000;
  5152  000166  0100               	movlb	0	; () banked
  5153  000168  0100               	movlb	0	; () banked
  5154  00016A  8D79               	bsf	(sprintf@flag+1)& (0+255),6,b
  5155                           
  5156                           ;doprnt.c: 622: f++;
  5157  00016C  4A52               	infsnz	sprintf@f,f,c
  5158  00016E  2A53               	incf	sprintf@f+1,f,c
  5159                           
  5160                           ; BSR set to: 0
  5161                           ;doprnt.c: 624: if(*f == '*') {
  5162  000170  C052  FFF6         	movff	sprintf@f,tblptrl
  5163  000174  C053  FFF7         	movff	sprintf@f+1,tblptrh
  5164  000178  0008               	tblrd		*
  5165  00017A  50F5               	movf	tablat,w,c
  5166  00017C  0A2A               	xorlw	42
  5167  00017E  A4D8               	btfss	status,2,c
  5168  000180  D014               	goto	i2l9520
  5169                           
  5170                           ; BSR set to: 0
  5171                           ;doprnt.c: 625: prec = (*(int *)__va_arg((*(int **)ap), (int)0));
  5172  000182  C074  FFD9         	movff	sprintf@ap,fsr2l
  5173  000186  C075  FFDA         	movff	sprintf@ap+1,fsr2h
  5174  00018A  0100               	movlb	0	; () banked
  5175  00018C  CFDE F07F          	movff	postinc2,sprintf@prec
  5176  000190  0100               	movlb	0	; () banked
  5177  000192  CFDD F080          	movff	postdec2,sprintf@prec+1
  5178                           
  5179                           ; BSR set to: 0
  5180  000196  0E02               	movlw	2
  5181  000198  0100               	movlb	0	; () banked
  5182  00019A  0100               	movlb	0	; () banked
  5183  00019C  2774               	addwf	sprintf@ap& (0+255),f,b
  5184  00019E  0E00               	movlw	0
  5185  0001A0  0100               	movlb	0	; () banked
  5186  0001A2  2375               	addwfc	(sprintf@ap+1)& (0+255),f,b
  5187                           
  5188                           ; BSR set to: 0
  5189                           ;doprnt.c: 626: f++;
  5190  0001A4  4A52               	infsnz	sprintf@f,f,c
  5191  0001A6  2A53               	incf	sprintf@f+1,f,c
  5192                           
  5193                           ;doprnt.c: 627: } else
  5194  0001A8  D12A               	goto	i2l9584
  5195  0001AA                     i2l9520:
  5196                           
  5197                           ; BSR set to: 0
  5198                           ;doprnt.c: 629: {
  5199                           ;doprnt.c: 630: prec = 0;
  5200  0001AA  0E00               	movlw	0
  5201  0001AC  0100               	movlb	0	; () banked
  5202  0001AE  0100               	movlb	0	; () banked
  5203  0001B0  6F80               	movwf	(sprintf@prec+1)& (0+255),b
  5204  0001B2  0E00               	movlw	0
  5205  0001B4  0100               	movlb	0	; () banked
  5206  0001B6  6F7F               	movwf	sprintf@prec& (0+255),b
  5207                           
  5208                           ;doprnt.c: 631: while(isdigit((unsigned)*f))
  5209  0001B8  D01E               	goto	i2l9526
  5210  0001BA                     i2l9522:
  5211                           
  5212                           ;doprnt.c: 632: prec = prec*10 + *f++ - '0';
  5213  0001BA  C07F  F011         	movff	sprintf@prec,?___wmul
  5214  0001BE  C080  F012         	movff	sprintf@prec+1,?___wmul+1
  5215  0001C2  0E00               	movlw	0
  5216  0001C4  6E14               	movwf	?___wmul+3,c
  5217  0001C6  0E0A               	movlw	10
  5218  0001C8  6E13               	movwf	?___wmul+2,c
  5219  0001CA  EC98  F01B         	call	___wmul	;wreg free
  5220  0001CE  C052  FFF6         	movff	sprintf@f,tblptrl
  5221  0001D2  C053  FFF7         	movff	sprintf@f+1,tblptrh
  5222  0001D6  0008               	tblrd		*
  5223  0001D8  50F5               	movf	tablat,w,c
  5224  0001DA  2611               	addwf	?___wmul,f,c
  5225  0001DC  0E00               	movlw	0
  5226  0001DE  2212               	addwfc	?___wmul+1,f,c
  5227  0001E0  0ED0               	movlw	208
  5228  0001E2  2411               	addwf	?___wmul,w,c
  5229  0001E4  0100               	movlb	0	; () banked
  5230  0001E6  0100               	movlb	0	; () banked
  5231  0001E8  6F7F               	movwf	sprintf@prec& (0+255),b
  5232  0001EA  0EFF               	movlw	255
  5233  0001EC  2012               	addwfc	?___wmul+1,w,c
  5234  0001EE  0100               	movlb	0	; () banked
  5235  0001F0  6F80               	movwf	(sprintf@prec+1)& (0+255),b
  5236                           
  5237                           ; BSR set to: 0
  5238  0001F2  4A52               	infsnz	sprintf@f,f,c
  5239  0001F4  2A53               	incf	sprintf@f+1,f,c
  5240  0001F6                     i2l9526:
  5241                           
  5242                           ; BSR set to: 0
  5243  0001F6  C052  FFF6         	movff	sprintf@f,tblptrl
  5244  0001FA  C053  FFF7         	movff	sprintf@f+1,tblptrh
  5245  0001FE  0008               	tblrd		*
  5246  000200  CFF5 F001          	movff	tablat,?_isdigit
  5247  000204  EC38  F01C         	call	_isdigit	;wreg free
  5248  000208  A0D8               	btfss	status,0,c
  5249  00020A  D0F9               	goto	i2l9584
  5250  00020C  D7D6               	goto	i2l9522
  5251  00020E                     i2l9528:
  5252                           
  5253                           ;doprnt.c: 635: prec = 0;
  5254  00020E  0E00               	movlw	0
  5255  000210  0100               	movlb	0	; () banked
  5256  000212  0100               	movlb	0	; () banked
  5257  000214  6F80               	movwf	(sprintf@prec+1)& (0+255),b
  5258  000216  0E00               	movlw	0
  5259  000218  0100               	movlb	0	; () banked
  5260  00021A  6F7F               	movwf	sprintf@prec& (0+255),b
  5261                           
  5262                           ; BSR set to: 0
  5263                           ;doprnt.c: 637: flag |= 0x1000;
  5264  00021C  0100               	movlb	0	; () banked
  5265  00021E  0100               	movlb	0	; () banked
  5266  000220  8979               	bsf	(sprintf@flag+1)& (0+255),4,b
  5267  000222  D0ED               	goto	i2l9584
  5268  000224                     i2l9532:
  5269                           
  5270                           ; BSR set to: 0
  5271                           ;doprnt.c: 652: flag |= 0x10;
  5272  000224  0100               	movlb	0	; () banked
  5273  000226  0100               	movlb	0	; () banked
  5274  000228  8978               	bsf	sprintf@flag& (0+255),4,b
  5275                           
  5276                           ;doprnt.c: 653: goto loop;
  5277  00022A  D0E9               	goto	i2l9584
  5278  00022C                     i2l9534:
  5279                           
  5280                           ; BSR set to: 0
  5281                           ;doprnt.c: 672: flag |= 0x400;
  5282  00022C  0100               	movlb	0	; () banked
  5283  00022E  0100               	movlb	0	; () banked
  5284  000230  8579               	bsf	(sprintf@flag+1)& (0+255),2,b
  5285                           
  5286                           ;doprnt.c: 673: break;
  5287  000232  D108               	goto	i2l9586
  5288  000234                     i2l9536:
  5289                           
  5290                           ; BSR set to: 0
  5291                           ;doprnt.c: 743: _val._str._cp = (*(const char * *)__va_arg((*(const char * **)ap), (cons
      +                          t char *)0));
  5292  000234  C074  FFD9         	movff	sprintf@ap,fsr2l
  5293  000238  C075  FFDA         	movff	sprintf@ap+1,fsr2h
  5294  00023C  0100               	movlb	0	; () banked
  5295  00023E  CFDE F082          	movff	postinc2,sprintf@_val
  5296  000242  0100               	movlb	0	; () banked
  5297  000244  CFDD F083          	movff	postdec2,sprintf@_val+1
  5298                           
  5299                           ; BSR set to: 0
  5300  000248  0E02               	movlw	2
  5301  00024A  0100               	movlb	0	; () banked
  5302  00024C  0100               	movlb	0	; () banked
  5303  00024E  2774               	addwf	sprintf@ap& (0+255),f,b
  5304  000250  0E00               	movlw	0
  5305  000252  0100               	movlb	0	; () banked
  5306  000254  2375               	addwfc	(sprintf@ap+1)& (0+255),f,b
  5307                           
  5308                           ; BSR set to: 0
  5309                           ;doprnt.c: 749: if(!_val._str._cp)
  5310  000256  0100               	movlb	0	; () banked
  5311  000258  0100               	movlb	0	; () banked
  5312  00025A  5183               	movf	(sprintf@_val+1)& (0+255),w,b
  5313  00025C  1182               	iorwf	sprintf@_val& (0+255),w,b
  5314  00025E  A4D8               	btfss	status,2,c
  5315  000260  D007               	goto	i2l531
  5316                           
  5317                           ; BSR set to: 0
  5318                           ;doprnt.c: 750: _val._str._cp = "(null)";
  5319  000262  0E7D               	movlw	high STR_38
  5320  000264  0100               	movlb	0	; () banked
  5321  000266  0100               	movlb	0	; () banked
  5322  000268  6F83               	movwf	(sprintf@_val+1)& (0+255),b
  5323  00026A  0E8F               	movlw	low STR_38
  5324  00026C  0100               	movlb	0	; () banked
  5325  00026E  6F82               	movwf	sprintf@_val& (0+255),b
  5326  000270                     i2l531:
  5327                           
  5328                           ; BSR set to: 0
  5329                           ;doprnt.c: 754: _val._str._len = 0;
  5330  000270  0E00               	movlw	0
  5331  000272  0100               	movlb	0	; () banked
  5332  000274  0100               	movlb	0	; () banked
  5333  000276  6F85               	movwf	(sprintf@_val+3)& (0+255),b
  5334  000278  0E00               	movlw	0
  5335  00027A  0100               	movlb	0	; () banked
  5336  00027C  6F84               	movwf	(sprintf@_val+2)& (0+255),b
  5337                           
  5338                           ;doprnt.c: 755: while(_val._str._cp[_val._str._len])
  5339  00027E  D004               	goto	i2l9546
  5340  000280                     i2l9544:
  5341                           
  5342                           ;doprnt.c: 756: _val._str._len++;
  5343  000280  0100               	movlb	0	; () banked
  5344  000282  0100               	movlb	0	; () banked
  5345  000284  4B84               	infsnz	(sprintf@_val+2)& (0+255),f,b
  5346  000286  2B85               	incf	(sprintf@_val+3)& (0+255),f,b
  5347  000288                     i2l9546:
  5348                           
  5349                           ; BSR set to: 0
  5350  000288  0100               	movlb	0	; () banked
  5351  00028A  C082  F060         	movff	sprintf@_val,??_sprintf
  5352  00028E  0100               	movlb	0	; () banked
  5353  000290  C083  F061         	movff	sprintf@_val+1,??_sprintf+1
  5354  000294  0100               	movlb	0	; () banked
  5355  000296  0100               	movlb	0	; () banked
  5356  000298  5184               	movf	(sprintf@_val+2)& (0+255),w,b
  5357  00029A  0100               	movlb	0	; () banked
  5358  00029C  2760               	addwf	??_sprintf& (0+255),f,b
  5359  00029E  0100               	movlb	0	; () banked
  5360  0002A0  0100               	movlb	0	; () banked
  5361  0002A2  5185               	movf	(sprintf@_val+3)& (0+255),w,b
  5362  0002A4  0100               	movlb	0	; () banked
  5363  0002A6  2361               	addwfc	(??_sprintf+1)& (0+255),f,b
  5364  0002A8  0100               	movlb	0	; () banked
  5365  0002AA  5160               	movf	??_sprintf& (0+255),w,b
  5366  0002AC  6EF6               	movwf	tblptrl,c
  5367  0002AE  6EE9               	movwf	fsr0l,c
  5368  0002B0  0E07               	movlw	(high __ramtop+-1)
  5369  0002B2  6EEA               	movwf	fsr0h,c
  5370  0002B4  0100               	movlb	0	; () banked
  5371  0002B6  5161               	movf	(??_sprintf+1)& (0+255),w,b
  5372  0002B8  64EA               	cpfsgt	fsr0h,c
  5373  0002BA  D003               	bra	i2u860_47
  5374  0002BC  6EEA               	movwf	fsr0h,c
  5375  0002BE  50EF               	movf	indf0,w,c
  5376  0002C0  D003               	bra	i2u860_40
  5377  0002C2                     i2u860_47:
  5378  0002C2  6EF7               	movwf	tblptrh,c
  5379  0002C4  0008               	tblrd		*
  5380  0002C6  50F5               	movf	tablat,w,c
  5381  0002C8                     i2u860_40:
  5382  0002C8  0900               	iorlw	0
  5383  0002CA  A4D8               	btfss	status,2,c
  5384  0002CC  D7D9               	goto	i2l9544
  5385  0002CE                     i2l9548:
  5386                           
  5387                           ;doprnt.c: 762: if(prec && prec < _val._str._len)
  5388  0002CE  0100               	movlb	0	; () banked
  5389  0002D0  0100               	movlb	0	; () banked
  5390  0002D2  5180               	movf	(sprintf@prec+1)& (0+255),w,b
  5391  0002D4  117F               	iorwf	sprintf@prec& (0+255),w,b
  5392  0002D6  B4D8               	btfsc	status,2,c
  5393  0002D8  D012               	goto	i2l9554
  5394                           
  5395                           ; BSR set to: 0
  5396  0002DA  0100               	movlb	0	; () banked
  5397  0002DC  0100               	movlb	0	; () banked
  5398  0002DE  5184               	movf	(sprintf@_val+2)& (0+255),w,b
  5399  0002E0  0100               	movlb	0	; () banked
  5400  0002E2  0100               	movlb	0	; () banked
  5401  0002E4  5D7F               	subwf	sprintf@prec& (0+255),w,b
  5402  0002E6  0100               	movlb	0	; () banked
  5403  0002E8  0100               	movlb	0	; () banked
  5404  0002EA  5185               	movf	(sprintf@_val+3)& (0+255),w,b
  5405  0002EC  0100               	movlb	0	; () banked
  5406  0002EE  0100               	movlb	0	; () banked
  5407  0002F0  5980               	subwfb	(sprintf@prec+1)& (0+255),w,b
  5408  0002F2  B0D8               	btfsc	status,0,c
  5409  0002F4  D004               	goto	i2l9554
  5410                           
  5411                           ; BSR set to: 0
  5412                           ;doprnt.c: 763: _val._str._len = prec;
  5413  0002F6  C07F  F084         	movff	sprintf@prec,sprintf@_val+2
  5414  0002FA  C080  F085         	movff	sprintf@prec+1,sprintf@_val+3
  5415  0002FE                     i2l9554:
  5416                           
  5417                           ; BSR set to: 0
  5418                           ;doprnt.c: 766: if(width > _val._str._len)
  5419  0002FE  0100               	movlb	0	; () banked
  5420  000300  0100               	movlb	0	; () banked
  5421  000302  517D               	movf	sprintf@width& (0+255),w,b
  5422  000304  0100               	movlb	0	; () banked
  5423  000306  0100               	movlb	0	; () banked
  5424  000308  5D84               	subwf	(sprintf@_val+2)& (0+255),w,b
  5425  00030A  0100               	movlb	0	; () banked
  5426  00030C  0100               	movlb	0	; () banked
  5427  00030E  517E               	movf	(sprintf@width+1)& (0+255),w,b
  5428  000310  0100               	movlb	0	; () banked
  5429  000312  0100               	movlb	0	; () banked
  5430  000314  5985               	subwfb	(sprintf@_val+3)& (0+255),w,b
  5431  000316  B0D8               	btfsc	status,0,c
  5432  000318  D00C               	goto	i2l9558
  5433                           
  5434                           ; BSR set to: 0
  5435                           ;doprnt.c: 767: width -= _val._str._len;
  5436  00031A  0100               	movlb	0	; () banked
  5437  00031C  EE20  F084         	lfsr	2,sprintf@_val+2
  5438  000320  50DE               	movf	postinc2,w,c
  5439  000322  0100               	movlb	0	; () banked
  5440  000324  0100               	movlb	0	; () banked
  5441  000326  5F7D               	subwf	sprintf@width& (0+255),f,b
  5442  000328  50DD               	movf	postdec2,w,c
  5443  00032A  0100               	movlb	0	; () banked
  5444  00032C  0100               	movlb	0	; () banked
  5445  00032E  5B7E               	subwfb	(sprintf@width+1)& (0+255),f,b
  5446  000330  D010               	goto	i2l9564
  5447  000332                     i2l9558:
  5448                           
  5449                           ; BSR set to: 0
  5450                           ;doprnt.c: 768: else
  5451                           ;doprnt.c: 769: width = 0;
  5452  000332  0E00               	movlw	0
  5453  000334  0100               	movlb	0	; () banked
  5454  000336  0100               	movlb	0	; () banked
  5455  000338  6F7E               	movwf	(sprintf@width+1)& (0+255),b
  5456  00033A  0E00               	movlw	0
  5457  00033C  0100               	movlb	0	; () banked
  5458  00033E  6F7D               	movwf	sprintf@width& (0+255),b
  5459  000340  D008               	goto	i2l9564
  5460  000342                     i2l9560:
  5461                           
  5462                           ; BSR set to: 0
  5463                           ;doprnt.c: 774: ((*sp++ = (' ')));
  5464  000342  C050  FFD9         	movff	sprintf@sp,fsr2l
  5465  000346  C051  FFDA         	movff	sprintf@sp+1,fsr2h
  5466  00034A  0E20               	movlw	32
  5467  00034C  6EDF               	movwf	indf2,c
  5468                           
  5469                           ; BSR set to: 0
  5470  00034E  4A50               	infsnz	sprintf@sp,f,c
  5471  000350  2A51               	incf	sprintf@sp+1,f,c
  5472  000352                     i2l9564:
  5473                           
  5474                           ; BSR set to: 0
  5475  000352  0100               	movlb	0	; () banked
  5476  000354  0100               	movlb	0	; () banked
  5477  000356  077D               	decf	sprintf@width& (0+255),f,b
  5478  000358  A0D8               	btfss	status,0,c
  5479  00035A  077E               	decf	(sprintf@width+1)& (0+255),f,b
  5480  00035C  0100               	movlb	0	; () banked
  5481  00035E  297D               	incf	sprintf@width& (0+255),w,b
  5482  000360  B4D8               	btfsc	status,2,c
  5483  000362  297E               	incf	(sprintf@width+1)& (0+255),w,b
  5484  000364  B4D8               	btfsc	status,2,c
  5485  000366  D01E               	goto	i2l9572
  5486  000368  D7EC               	goto	i2l9560
  5487  00036A                     i2l9566:
  5488                           
  5489                           ; BSR set to: 0
  5490                           ;doprnt.c: 777: ((*sp++ = (*_val._str._cp++)));
  5491  00036A  0100               	movlb	0	; () banked
  5492  00036C  C082  FFF6         	movff	sprintf@_val,tblptrl
  5493  000370  0100               	movlb	0	; () banked
  5494  000372  C083  FFF7         	movff	sprintf@_val+1,tblptrh
  5495  000376  6AF8               	clrf	tblptru,c
  5496  000378  C050  FFD9         	movff	sprintf@sp,fsr2l
  5497  00037C  C051  FFDA         	movff	sprintf@sp+1,fsr2h
  5498  000380  0E07               	movlw	(high __ramtop+-1)
  5499  000382  64F7               	cpfsgt	tblptrh,c
  5500  000384  D003               	bra	i2u866_47
  5501  000386  0008               	tblrd		*
  5502  000388  50F5               	movf	tablat,w,c
  5503  00038A  D005               	bra	i2u866_40
  5504  00038C                     i2u866_47:
  5505  00038C  CFF6 FFE9          	movff	tblptrl,fsr0l
  5506  000390  CFF7 FFEA          	movff	tblptrh,fsr0h
  5507  000394  50EF               	movf	indf0,w,c
  5508  000396                     i2u866_40:
  5509  000396  6EDF               	movwf	indf2,c
  5510  000398  0100               	movlb	0	; () banked
  5511  00039A  0100               	movlb	0	; () banked
  5512  00039C  4B82               	infsnz	sprintf@_val& (0+255),f,b
  5513  00039E  2B83               	incf	(sprintf@_val+1)& (0+255),f,b
  5514                           
  5515                           ; BSR set to: 0
  5516  0003A0  4A50               	infsnz	sprintf@sp,f,c
  5517  0003A2  2A51               	incf	sprintf@sp+1,f,c
  5518  0003A4                     i2l9572:
  5519                           
  5520                           ; BSR set to: 0
  5521  0003A4  0100               	movlb	0	; () banked
  5522  0003A6  0100               	movlb	0	; () banked
  5523  0003A8  0784               	decf	(sprintf@_val+2)& (0+255),f,b
  5524  0003AA  A0D8               	btfss	status,0,c
  5525  0003AC  0785               	decf	(sprintf@_val+3)& (0+255),f,b
  5526  0003AE  0100               	movlb	0	; () banked
  5527  0003B0  2984               	incf	(sprintf@_val+2)& (0+255),w,b
  5528  0003B2  B4D8               	btfsc	status,2,c
  5529  0003B4  2985               	incf	(sprintf@_val+3)& (0+255),w,b
  5530  0003B6  B4D8               	btfsc	status,2,c
  5531  0003B8  EFB2  F007         	goto	i2l9866
  5532  0003BC  D7D6               	goto	i2l9566
  5533  0003BE                     i2l9574:
  5534                           
  5535                           ; BSR set to: 0
  5536                           ;doprnt.c: 808: c = (*(int *)__va_arg((*(int **)ap), (int)0));
  5537  0003BE  C074  FFD9         	movff	sprintf@ap,fsr2l
  5538  0003C2  C075  FFDA         	movff	sprintf@ap+1,fsr2h
  5539  0003C6  50DF               	movf	indf2,w,c
  5540  0003C8  0100               	movlb	0	; () banked
  5541  0003CA  0100               	movlb	0	; () banked
  5542  0003CC  6F81               	movwf	sprintf@c& (0+255),b
  5543                           
  5544                           ; BSR set to: 0
  5545  0003CE  0E02               	movlw	2
  5546  0003D0  0100               	movlb	0	; () banked
  5547  0003D2  0100               	movlb	0	; () banked
  5548  0003D4  2774               	addwf	sprintf@ap& (0+255),f,b
  5549  0003D6  0E00               	movlw	0
  5550  0003D8  0100               	movlb	0	; () banked
  5551  0003DA  2375               	addwfc	(sprintf@ap+1)& (0+255),f,b
  5552  0003DC                     i2l9578:
  5553                           
  5554                           ; BSR set to: 0
  5555                           ;doprnt.c: 814: _val._str._cp = (char *)&c;
  5556  0003DC  0100               	movlb	0	; () banked
  5557  0003DE  0E00               	movlw	high sprintf@c
  5558  0003E0  0100               	movlb	0	; () banked
  5559  0003E2  0100               	movlb	0	; () banked
  5560  0003E4  6F83               	movwf	(sprintf@_val+1)& (0+255),b
  5561  0003E6  0100               	movlb	0	; () banked
  5562  0003E8  0E81               	movlw	low sprintf@c
  5563  0003EA  0100               	movlb	0	; () banked
  5564  0003EC  6F82               	movwf	sprintf@_val& (0+255),b
  5565                           
  5566                           ; BSR set to: 0
  5567                           ;doprnt.c: 815: _val._str._len = 1;
  5568  0003EE  0E00               	movlw	0
  5569  0003F0  0100               	movlb	0	; () banked
  5570  0003F2  0100               	movlb	0	; () banked
  5571  0003F4  6F85               	movwf	(sprintf@_val+3)& (0+255),b
  5572  0003F6  0E01               	movlw	1
  5573  0003F8  0100               	movlb	0	; () banked
  5574  0003FA  6F84               	movwf	(sprintf@_val+2)& (0+255),b
  5575                           
  5576                           ;doprnt.c: 816: goto dostring;
  5577  0003FC  D768               	goto	i2l9548
  5578  0003FE                     i2l9584:
  5579  0003FE  C052  FFF6         	movff	sprintf@f,tblptrl
  5580  000402  C053  FFF7         	movff	sprintf@f+1,tblptrh
  5581  000406  4A52               	infsnz	sprintf@f,f,c
  5582  000408  2A53               	incf	sprintf@f+1,f,c
  5583  00040A  0008               	tblrd		*
  5584  00040C  0100               	movlb	0	; () banked
  5585  00040E  CFF5 F081          	movff	tablat,sprintf@c
  5586  000412  0100               	movlb	0	; () banked
  5587  000414  5181               	movf	sprintf@c& (0+255),w,b
  5588                           
  5589                           ; Switch size 1, requested type "space"
  5590                           ; Number of cases is 7, Range of values is 0 to 115
  5591                           ; switch strategies available:
  5592                           ; Name         Instructions Cycles
  5593                           ; simple_byte           22    12 (average)
  5594                           ;	Chosen strategy is simple_byte
  5595  000416  0A00               	xorlw	0	; case 0
  5596  000418  B4D8               	btfsc	status,2,c
  5597  00041A  EFC0  F007         	goto	i2l9868
  5598  00041E  0A63               	xorlw	99	; case 99
  5599  000420  B4D8               	btfsc	status,2,c
  5600  000422  D7CD               	goto	i2l9574
  5601  000424  0A07               	xorlw	7	; case 100
  5602  000426  B4D8               	btfsc	status,2,c
  5603  000428  D00D               	goto	i2l9586
  5604  00042A  0A02               	xorlw	2	; case 102
  5605  00042C  B4D8               	btfsc	status,2,c
  5606  00042E  D6FE               	goto	i2l9534
  5607  000430  0A0F               	xorlw	15	; case 105
  5608  000432  B4D8               	btfsc	status,2,c
  5609  000434  D007               	goto	i2l9586
  5610  000436  0A05               	xorlw	5	; case 108
  5611  000438  B4D8               	btfsc	status,2,c
  5612  00043A  D6F4               	goto	i2l9532
  5613  00043C  0A1F               	xorlw	31	; case 115
  5614  00043E  B4D8               	btfsc	status,2,c
  5615  000440  D6F9               	goto	i2l9536
  5616  000442  D7CC               	goto	i2l9578
  5617  000444                     i2l9586:
  5618                           
  5619                           ; BSR set to: 0
  5620                           ;doprnt.c: 834: if(flag & (0x700)) {
  5621  000444  0E07               	movlw	7
  5622  000446  0100               	movlb	0	; () banked
  5623  000448  0100               	movlb	0	; () banked
  5624  00044A  1579               	andwf	(sprintf@flag+1)& (0+255),w,b
  5625  00044C  B4D8               	btfsc	status,2,c
  5626  00044E  D3A2               	goto	i2l547
  5627                           
  5628                           ; BSR set to: 0
  5629                           ;doprnt.c: 836: if(flag & 0x1000)
  5630  000450  0100               	movlb	0	; () banked
  5631  000452  0100               	movlb	0	; () banked
  5632  000454  A979               	btfss	(sprintf@flag+1)& (0+255),4,b
  5633  000456  D007               	goto	i2l9592
  5634                           
  5635                           ; BSR set to: 0
  5636                           ;doprnt.c: 838: prec = 6;
  5637  000458  0E00               	movlw	0
  5638  00045A  0100               	movlb	0	; () banked
  5639  00045C  0100               	movlb	0	; () banked
  5640  00045E  6F80               	movwf	(sprintf@prec+1)& (0+255),b
  5641  000460  0E06               	movlw	6
  5642  000462  0100               	movlb	0	; () banked
  5643  000464  6F7F               	movwf	sprintf@prec& (0+255),b
  5644  000466                     i2l9592:
  5645                           
  5646                           ; BSR set to: 0
  5647                           ;doprnt.c: 839: fval = (*(double *)__va_arg((*(double **)ap), (double)0));
  5648  000466  C074  FFD9         	movff	sprintf@ap,fsr2l
  5649  00046A  C075  FFDA         	movff	sprintf@ap+1,fsr2h
  5650  00046E  0100               	movlb	0	; () banked
  5651  000470  CFDE F07A          	movff	postinc2,sprintf@fval
  5652  000474  0100               	movlb	0	; () banked
  5653  000476  CFDE F07B          	movff	postinc2,sprintf@fval+1
  5654  00047A  0100               	movlb	0	; () banked
  5655  00047C  CFDD F07C          	movff	postdec2,sprintf@fval+2
  5656                           
  5657                           ; BSR set to: 0
  5658  000480  0E03               	movlw	3
  5659  000482  0100               	movlb	0	; () banked
  5660  000484  0100               	movlb	0	; () banked
  5661  000486  2774               	addwf	sprintf@ap& (0+255),f,b
  5662  000488  0E00               	movlw	0
  5663  00048A  0100               	movlb	0	; () banked
  5664  00048C  2375               	addwfc	(sprintf@ap+1)& (0+255),f,b
  5665                           
  5666                           ; BSR set to: 0
  5667                           ;doprnt.c: 840: if(fval < 0.0) {
  5668  00048E  0100               	movlb	0	; () banked
  5669  000490  0100               	movlb	0	; () banked
  5670  000492  517C               	movf	(sprintf@fval+2)& (0+255),w,b
  5671  000494  0A80               	xorlw	128
  5672  000496  0F80               	addlw	128
  5673  000498  E107               	bnz	i2u870_45
  5674  00049A  0E00               	movlw	0
  5675  00049C  0100               	movlb	0	; () banked
  5676  00049E  5D7B               	subwf	(sprintf@fval+1)& (0+255),w,b
  5677  0004A0  E103               	bnz	i2u870_45
  5678  0004A2  0E00               	movlw	0
  5679  0004A4  0100               	movlb	0	; () banked
  5680  0004A6  5D7A               	subwf	sprintf@fval& (0+255),w,b
  5681  0004A8                     i2u870_45:
  5682  0004A8  B0D8               	btfsc	status,0,c
  5683  0004AA  D012               	goto	i2l9602
  5684                           
  5685                           ; BSR set to: 0
  5686                           ;doprnt.c: 841: fval = -fval;
  5687  0004AC  C07A  F001         	movff	sprintf@fval,?___ftneg
  5688  0004B0  C07B  F002         	movff	sprintf@fval+1,?___ftneg+1
  5689  0004B4  C07C  F003         	movff	sprintf@fval+2,?___ftneg+2
  5690  0004B8  EC25  F01C         	call	___ftneg	;wreg free
  5691  0004BC  C003  F07C         	movff	?___ftneg+2,sprintf@fval+2
  5692  0004C0  C002  F07B         	movff	?___ftneg+1,sprintf@fval+1
  5693  0004C4  C001  F07A         	movff	?___ftneg,sprintf@fval
  5694                           
  5695                           ;doprnt.c: 842: flag |= 0x03;
  5696  0004C8  0E03               	movlw	3
  5697  0004CA  0100               	movlb	0	; () banked
  5698  0004CC  0100               	movlb	0	; () banked
  5699  0004CE  1378               	iorwf	sprintf@flag& (0+255),f,b
  5700  0004D0                     i2l9602:
  5701                           
  5702                           ; BSR set to: 0
  5703                           ;doprnt.c: 843: }
  5704                           ;doprnt.c: 844: exp = 0;
  5705  0004D0  0E00               	movlw	0
  5706  0004D2  0100               	movlb	0	; () banked
  5707  0004D4  0100               	movlb	0	; () banked
  5708  0004D6  6F77               	movwf	(sprintf@exp+1)& (0+255),b
  5709  0004D8  0E00               	movlw	0
  5710  0004DA  0100               	movlb	0	; () banked
  5711  0004DC  6F76               	movwf	sprintf@exp& (0+255),b
  5712                           
  5713                           ; BSR set to: 0
  5714                           ;doprnt.c: 845: if( fval!=0) {
  5715  0004DE  0E7F               	movlw	127
  5716  0004E0  0100               	movlb	0	; () banked
  5717  0004E2  0100               	movlb	0	; () banked
  5718  0004E4  157C               	andwf	(sprintf@fval+2)& (0+255),w,b
  5719  0004E6  0100               	movlb	0	; () banked
  5720  0004E8  117B               	iorwf	(sprintf@fval+1)& (0+255),w,b
  5721  0004EA  0100               	movlb	0	; () banked
  5722  0004EC  117A               	iorwf	sprintf@fval& (0+255),w,b
  5723  0004EE  B4D8               	btfsc	status,2,c
  5724  0004F0  D096               	goto	i2l9630
  5725                           
  5726                           ; BSR set to: 0
  5727                           ;doprnt.c: 846: (void)(*(&exp) = ((*(unsigned long *)&fval >> 15) & 255) - 126);
  5728  0004F2  0E82               	movlw	130
  5729  0004F4  0100               	movlb	0	; () banked
  5730  0004F6  6F60               	movwf	??_sprintf& (0+255),b
  5731  0004F8  0EFF               	movlw	255
  5732  0004FA  6F61               	movwf	(??_sprintf+1)& (0+255),b
  5733  0004FC  0100               	movlb	0	; () banked
  5734  0004FE  C07A  F062         	movff	sprintf@fval,??_sprintf+2
  5735  000502  0100               	movlb	0	; () banked
  5736  000504  C07B  F063         	movff	sprintf@fval+1,??_sprintf+3
  5737  000508  0100               	movlb	0	; () banked
  5738  00050A  C07C  F064         	movff	sprintf@fval+2,??_sprintf+4
  5739  00050E  0100               	movlb	0	; () banked
  5740  000510  C07D  F065         	movff	sprintf@fval+3,??_sprintf+5
  5741  000514  0E10               	movlw	16
  5742  000516  D006               	goto	i2u872_40
  5743  000518                     i2u872_45:
  5744  000518  0100               	movlb	0	; () banked
  5745  00051A  90D8               	bcf	status,0,c
  5746  00051C  3365               	rrcf	(??_sprintf+5)& (0+255),f,b
  5747  00051E  3364               	rrcf	(??_sprintf+4)& (0+255),f,b
  5748  000520  3363               	rrcf	(??_sprintf+3)& (0+255),f,b
  5749  000522  3362               	rrcf	(??_sprintf+2)& (0+255),f,b
  5750  000524                     i2u872_40:
  5751  000524  2EE8               	decfsz	wreg,f,c
  5752  000526  D7F8               	goto	i2u872_45
  5753  000528  0100               	movlb	0	; () banked
  5754  00052A  5162               	movf	(??_sprintf+2)& (0+255),w,b
  5755  00052C  0100               	movlb	0	; () banked
  5756  00052E  2560               	addwf	??_sprintf& (0+255),w,b
  5757  000530  0100               	movlb	0	; () banked
  5758  000532  0100               	movlb	0	; () banked
  5759  000534  6F76               	movwf	sprintf@exp& (0+255),b
  5760  000536  0100               	movlb	0	; () banked
  5761  000538  0100               	movlb	0	; () banked
  5762  00053A  0E00               	movlw	0
  5763  00053C  2161               	addwfc	(??_sprintf+1)& (0+255),w,b
  5764  00053E  6F77               	movwf	(sprintf@exp+1)& (0+255),b
  5765                           
  5766                           ; BSR set to: 0
  5767                           ;doprnt.c: 847: exp--;
  5768  000540  0100               	movlb	0	; () banked
  5769  000542  0100               	movlb	0	; () banked
  5770  000544  0776               	decf	sprintf@exp& (0+255),f,b
  5771  000546  A0D8               	btfss	status,0,c
  5772  000548  0777               	decf	(sprintf@exp+1)& (0+255),f,b
  5773                           
  5774                           ; BSR set to: 0
  5775                           ;doprnt.c: 848: exp *= 3;
  5776  00054A  C076  F011         	movff	sprintf@exp,?___wmul
  5777  00054E  C077  F012         	movff	sprintf@exp+1,?___wmul+1
  5778  000552  0E00               	movlw	0
  5779  000554  6E14               	movwf	?___wmul+3,c
  5780  000556  0E03               	movlw	3
  5781  000558  6E13               	movwf	?___wmul+2,c
  5782  00055A  EC98  F01B         	call	___wmul	;wreg free
  5783  00055E  C011  F076         	movff	?___wmul,sprintf@exp
  5784  000562  C012  F077         	movff	?___wmul+1,sprintf@exp+1
  5785                           
  5786                           ;doprnt.c: 849: exp /= 10;
  5787  000566  C076  F008         	movff	sprintf@exp,?___awdiv
  5788  00056A  C077  F009         	movff	sprintf@exp+1,?___awdiv+1
  5789  00056E  0E00               	movlw	0
  5790  000570  6E0B               	movwf	?___awdiv+3,c
  5791  000572  0E0A               	movlw	10
  5792  000574  6E0A               	movwf	?___awdiv+2,c
  5793  000576  EC31  F018         	call	___awdiv	;wreg free
  5794  00057A  C008  F076         	movff	?___awdiv,sprintf@exp
  5795  00057E  C009  F077         	movff	?___awdiv+1,sprintf@exp+1
  5796                           
  5797                           ;doprnt.c: 850: if(exp < 0)
  5798  000582  0100               	movlb	0	; () banked
  5799  000584  0100               	movlb	0	; () banked
  5800  000586  AF77               	btfss	(sprintf@exp+1)& (0+255),7,b
  5801  000588  D005               	goto	i2l9618
  5802                           
  5803                           ; BSR set to: 0
  5804                           ;doprnt.c: 851: exp--;
  5805  00058A  0100               	movlb	0	; () banked
  5806  00058C  0100               	movlb	0	; () banked
  5807  00058E  0776               	decf	sprintf@exp& (0+255),f,b
  5808  000590  A0D8               	btfss	status,0,c
  5809  000592  0777               	decf	(sprintf@exp+1)& (0+255),f,b
  5810  000594                     i2l9618:
  5811                           
  5812                           ; BSR set to: 0
  5813                           ;doprnt.c: 855: integ = scale(-exp);
  5814  000594  0100               	movlb	0	; () banked
  5815  000596  0100               	movlb	0	; () banked
  5816  000598  5176               	movf	sprintf@exp& (0+255),w,b
  5817  00059A  0800               	sublw	0
  5818  00059C  6E37               	movwf	?_scale,c
  5819  00059E  EC0B  F00A         	call	_scale	;wreg free
  5820  0005A2  C039  F073         	movff	?_scale+2,sprintf@integ+2
  5821  0005A6  C038  F072         	movff	?_scale+1,sprintf@integ+1
  5822  0005AA  C037  F071         	movff	?_scale,sprintf@integ
  5823                           
  5824                           ;doprnt.c: 856: integ *= fval;
  5825  0005AE  0100               	movlb	0	; () banked
  5826  0005B0  0E00               	movlw	high sprintf@integ
  5827  0005B2  6E38               	movwf	?___asftmul+1,c
  5828  0005B4  0100               	movlb	0	; () banked
  5829  0005B6  0E71               	movlw	low sprintf@integ
  5830  0005B8  6E37               	movwf	?___asftmul,c
  5831  0005BA  C07A  F039         	movff	sprintf@fval,?___asftmul+2
  5832  0005BE  C07B  F03A         	movff	sprintf@fval+1,?___asftmul+3
  5833  0005C2  C07C  F03B         	movff	sprintf@fval+2,?___asftmul+4
  5834  0005C6  EC3F  F01B         	call	___asftmul	;wreg free
  5835                           
  5836                           ;doprnt.c: 857: if(integ < 1.0)
  5837  0005CA  C071  F001         	movff	sprintf@integ,?___ftge
  5838  0005CE  C072  F002         	movff	sprintf@integ+1,?___ftge+1
  5839  0005D2  C073  F003         	movff	sprintf@integ+2,?___ftge+2
  5840  0005D6  0E00               	movlw	0
  5841  0005D8  6E04               	movwf	?___ftge+3,c
  5842  0005DA  0E80               	movlw	128
  5843  0005DC  6E05               	movwf	?___ftge+4,c
  5844  0005DE  0E3F               	movlw	63
  5845  0005E0  6E06               	movwf	?___ftge+5,c
  5846  0005E2  ECE9  F017         	call	___ftge	;wreg free
  5847  0005E6  B0D8               	btfsc	status,0,c
  5848  0005E8  D006               	goto	i2l9626
  5849                           
  5850                           ;doprnt.c: 858: exp--;
  5851  0005EA  0100               	movlb	0	; () banked
  5852  0005EC  0100               	movlb	0	; () banked
  5853  0005EE  0776               	decf	sprintf@exp& (0+255),f,b
  5854  0005F0  A0D8               	btfss	status,0,c
  5855  0005F2  0777               	decf	(sprintf@exp+1)& (0+255),f,b
  5856  0005F4  D014               	goto	i2l9630
  5857  0005F6                     i2l9626:
  5858                           
  5859                           ;doprnt.c: 859: else if(integ >= 10.0)
  5860  0005F6  C071  F001         	movff	sprintf@integ,?___ftge
  5861  0005FA  C072  F002         	movff	sprintf@integ+1,?___ftge+1
  5862  0005FE  C073  F003         	movff	sprintf@integ+2,?___ftge+2
  5863  000602  0E00               	movlw	0
  5864  000604  6E04               	movwf	?___ftge+3,c
  5865  000606  0E20               	movlw	32
  5866  000608  6E05               	movwf	?___ftge+4,c
  5867  00060A  0E41               	movlw	65
  5868  00060C  6E06               	movwf	?___ftge+5,c
  5869  00060E  ECE9  F017         	call	___ftge	;wreg free
  5870  000612  A0D8               	btfss	status,0,c
  5871  000614  D004               	goto	i2l9630
  5872                           
  5873                           ;doprnt.c: 860: exp++;
  5874  000616  0100               	movlb	0	; () banked
  5875  000618  0100               	movlb	0	; () banked
  5876  00061A  4B76               	infsnz	sprintf@exp& (0+255),f,b
  5877  00061C  2B77               	incf	(sprintf@exp+1)& (0+255),f,b
  5878  00061E                     i2l9630:
  5879                           
  5880                           ;doprnt.c: 861: }
  5881                           ;doprnt.c: 1121: if(prec <= 12)
  5882  00061E  0100               	movlb	0	; () banked
  5883  000620  0100               	movlb	0	; () banked
  5884  000622  5180               	movf	(sprintf@prec+1)& (0+255),w,b
  5885  000624  0A80               	xorlw	128
  5886  000626  0F80               	addlw	-128
  5887  000628  0E0D               	movlw	13
  5888  00062A  B4D8               	btfsc	status,2,c
  5889  00062C  5D7F               	subwf	sprintf@prec& (0+255),w,b
  5890  00062E  B0D8               	btfsc	status,0,c
  5891  000630  D012               	goto	i2l9634
  5892                           
  5893                           ; BSR set to: 0
  5894                           ;doprnt.c: 1122: fval += fround(prec);
  5895  000632  0100               	movlb	0	; () banked
  5896  000634  0E00               	movlw	high sprintf@fval
  5897  000636  6E47               	movwf	?___asftadd+1,c
  5898  000638  0100               	movlb	0	; () banked
  5899  00063A  0E7A               	movlw	low sprintf@fval
  5900  00063C  6E46               	movwf	?___asftadd,c
  5901  00063E  C07F  F037         	movff	sprintf@prec,?_fround
  5902  000642  EC83  F00D         	call	_fround	;wreg free
  5903  000646  C039  F04A         	movff	?_fround+2,?___asftadd+4
  5904  00064A  C038  F049         	movff	?_fround+1,?___asftadd+3
  5905  00064E  C037  F048         	movff	?_fround,?___asftadd+2
  5906  000652  EC5D  F01B         	call	___asftadd	;wreg free
  5907  000656                     i2l9634:
  5908                           
  5909                           ;doprnt.c: 1125: if((exp > 9)||(fval != 0 && (unsigned long)fval == 0 && exp > 1)) {
  5910  000656  0100               	movlb	0	; () banked
  5911  000658  0100               	movlb	0	; () banked
  5912  00065A  5177               	movf	(sprintf@exp+1)& (0+255),w,b
  5913  00065C  0A80               	xorlw	128
  5914  00065E  0F80               	addlw	-128
  5915  000660  0E0A               	movlw	10
  5916  000662  B4D8               	btfsc	status,2,c
  5917  000664  5D76               	subwf	sprintf@exp& (0+255),w,b
  5918  000666  B0D8               	btfsc	status,0,c
  5919  000668  D022               	goto	i2l9642
  5920                           
  5921                           ; BSR set to: 0
  5922  00066A  0E7F               	movlw	127
  5923  00066C  0100               	movlb	0	; () banked
  5924  00066E  0100               	movlb	0	; () banked
  5925  000670  157C               	andwf	(sprintf@fval+2)& (0+255),w,b
  5926  000672  0100               	movlb	0	; () banked
  5927  000674  117B               	iorwf	(sprintf@fval+1)& (0+255),w,b
  5928  000676  0100               	movlb	0	; () banked
  5929  000678  117A               	iorwf	sprintf@fval& (0+255),w,b
  5930  00067A  B4D8               	btfsc	status,2,c
  5931  00067C  D067               	goto	i2l9658
  5932                           
  5933                           ; BSR set to: 0
  5934  00067E  C07A  F017         	movff	sprintf@fval,?___fttol
  5935  000682  C07B  F018         	movff	sprintf@fval+1,?___fttol+1
  5936  000686  C07C  F019         	movff	sprintf@fval+2,?___fttol+2
  5937  00068A  EC75  F015         	call	___fttol	;wreg free
  5938  00068E  501A               	movf	?___fttol+3,w,c
  5939  000690  1017               	iorwf	?___fttol,w,c
  5940  000692  1018               	iorwf	?___fttol+1,w,c
  5941  000694  1019               	iorwf	?___fttol+2,w,c
  5942  000696  A4D8               	btfss	status,2,c
  5943  000698  D059               	goto	i2l9658
  5944  00069A  0100               	movlb	0	; () banked
  5945  00069C  0100               	movlb	0	; () banked
  5946  00069E  5177               	movf	(sprintf@exp+1)& (0+255),w,b
  5947  0006A0  0A80               	xorlw	128
  5948  0006A2  0F80               	addlw	-128
  5949  0006A4  0E02               	movlw	2
  5950  0006A6  B4D8               	btfsc	status,2,c
  5951  0006A8  5D76               	subwf	sprintf@exp& (0+255),w,b
  5952  0006AA  A0D8               	btfss	status,0,c
  5953  0006AC  D04F               	goto	i2l9658
  5954  0006AE                     i2l9642:
  5955                           
  5956                           ; BSR set to: 0
  5957                           ;doprnt.c: 1129: if(integ < 4.294967296){
  5958  0006AE  C071  F001         	movff	sprintf@integ,?___ftge
  5959  0006B2  C072  F002         	movff	sprintf@integ+1,?___ftge+1
  5960  0006B6  C073  F003         	movff	sprintf@integ+2,?___ftge+2
  5961  0006BA  0E70               	movlw	112
  5962  0006BC  6E04               	movwf	?___ftge+3,c
  5963  0006BE  0E89               	movlw	137
  5964  0006C0  6E05               	movwf	?___ftge+4,c
  5965  0006C2  0E40               	movlw	64
  5966  0006C4  6E06               	movwf	?___ftge+5,c
  5967  0006C6  ECE9  F017         	call	___ftge	;wreg free
  5968  0006CA  B0D8               	btfsc	status,0,c
  5969  0006CC  D003               	goto	i2l9646
  5970                           
  5971                           ;doprnt.c: 1130: exp -= (sizeof dpowers/sizeof dpowers[0])-1;
  5972  0006CE  0100               	movlb	0	; () banked
  5973  0006D0  0EF7               	movlw	247
  5974  0006D2  D002               	goto	L5
  5975  0006D4                     i2l9646:
  5976                           
  5977                           ;doprnt.c: 1132: exp -= (sizeof dpowers/sizeof dpowers[0])-2;
  5978  0006D4  0100               	movlb	0	; () banked
  5979  0006D6  0EF8               	movlw	248
  5980  0006D8                     L5:
  5981  0006D8  0100               	movlb	0	; () banked
  5982  0006DA  2776               	addwf	sprintf@exp& (0+255),f,b
  5983  0006DC  0EFF               	movlw	255
  5984  0006DE  0100               	movlb	0	; () banked
  5985  0006E0  2377               	addwfc	(sprintf@exp+1)& (0+255),f,b
  5986                           
  5987                           ; BSR set to: 0
  5988                           ;doprnt.c: 1133: }
  5989                           ;doprnt.c: 1134: integ = scale(exp);
  5990                           
  5991                           ; BSR set to: 0
  5992  0006E2  C076  F037         	movff	sprintf@exp,?_scale
  5993  0006E6  EC0B  F00A         	call	_scale	;wreg free
  5994  0006EA  C039  F073         	movff	?_scale+2,sprintf@integ+2
  5995  0006EE  C038  F072         	movff	?_scale+1,sprintf@integ+1
  5996  0006F2  C037  F071         	movff	?_scale,sprintf@integ
  5997                           
  5998                           ;doprnt.c: 1135: _val._val = ((sizeof(double)== 3) ? _tdiv_to_l_(fval,integ) : _div_to_l
      +                          _(fval,integ));
  5999  0006F6  C07A  F001         	movff	sprintf@fval,?__tdiv_to_l_
  6000  0006FA  C07B  F002         	movff	sprintf@fval+1,?__tdiv_to_l_+1
  6001  0006FE  C07C  F003         	movff	sprintf@fval+2,?__tdiv_to_l_+2
  6002  000702  C071  F004         	movff	sprintf@integ,?__tdiv_to_l_+3
  6003  000706  C072  F005         	movff	sprintf@integ+1,?__tdiv_to_l_+4
  6004  00070A  C073  F006         	movff	sprintf@integ+2,?__tdiv_to_l_+5
  6005  00070E  ECDF  F012         	call	__tdiv_to_l_	;wreg free
  6006  000712  C004  F06C         	movff	?__tdiv_to_l_+3,_sprintf$619+3
  6007  000716  C003  F06B         	movff	?__tdiv_to_l_+2,_sprintf$619+2
  6008  00071A  C002  F06A         	movff	?__tdiv_to_l_+1,_sprintf$619+1
  6009  00071E  C001  F069         	movff	?__tdiv_to_l_,_sprintf$619
  6010  000722  C069  F082         	movff	_sprintf$619,sprintf@_val
  6011  000726  C06A  F083         	movff	_sprintf$619+1,sprintf@_val+1
  6012  00072A  C06B  F084         	movff	_sprintf$619+2,sprintf@_val+2
  6013  00072E  C06C  F085         	movff	_sprintf$619+3,sprintf@_val+3
  6014                           
  6015                           ;doprnt.c: 1138: fval = 0.0;
  6016  000732  0E00               	movlw	0
  6017  000734  0100               	movlb	0	; () banked
  6018  000736  0100               	movlb	0	; () banked
  6019  000738  6F7A               	movwf	sprintf@fval& (0+255),b
  6020  00073A  0E00               	movlw	0
  6021  00073C  0100               	movlb	0	; () banked
  6022  00073E  0100               	movlb	0	; () banked
  6023  000740  6F7B               	movwf	(sprintf@fval+1)& (0+255),b
  6024  000742  0E00               	movlw	0
  6025  000744  0100               	movlb	0	; () banked
  6026  000746  0100               	movlb	0	; () banked
  6027  000748  6F7C               	movwf	(sprintf@fval+2)& (0+255),b
  6028                           
  6029                           ;doprnt.c: 1139: } else {
  6030  00074A  D02F               	goto	i2l9664
  6031  00074C                     i2l9658:
  6032                           
  6033                           ;doprnt.c: 1140: _val._val = (unsigned long)fval;
  6034  00074C  C07A  F017         	movff	sprintf@fval,?___fttol
  6035  000750  C07B  F018         	movff	sprintf@fval+1,?___fttol+1
  6036  000754  C07C  F019         	movff	sprintf@fval+2,?___fttol+2
  6037  000758  EC75  F015         	call	___fttol	;wreg free
  6038  00075C  C01A  F085         	movff	?___fttol+3,sprintf@_val+3
  6039  000760  C019  F084         	movff	?___fttol+2,sprintf@_val+2
  6040  000764  C018  F083         	movff	?___fttol+1,sprintf@_val+1
  6041  000768  C017  F082         	movff	?___fttol,sprintf@_val
  6042                           
  6043                           ;doprnt.c: 1141: fval -= (double)_val._val;
  6044  00076C  0100               	movlb	0	; () banked
  6045  00076E  0E00               	movlw	high sprintf@fval
  6046  000770  6E4C               	movwf	?___asftsub+1,c
  6047  000772  0100               	movlb	0	; () banked
  6048  000774  0E7A               	movlw	low sprintf@fval
  6049  000776  6E4B               	movwf	?___asftsub,c
  6050  000778  C082  F009         	movff	sprintf@_val,?___lltoft
  6051  00077C  C083  F00A         	movff	sprintf@_val+1,?___lltoft+1
  6052  000780  C084  F00B         	movff	sprintf@_val+2,?___lltoft+2
  6053  000784  C085  F00C         	movff	sprintf@_val+3,?___lltoft+3
  6054  000788  EC08  F01A         	call	___lltoft	;wreg free
  6055  00078C  C00B  F04F         	movff	?___lltoft+2,?___asftsub+4
  6056  000790  C00A  F04E         	movff	?___lltoft+1,?___asftsub+3
  6057  000794  C009  F04D         	movff	?___lltoft,?___asftsub+2
  6058  000798  EC21  F01B         	call	___asftsub	;wreg free
  6059                           
  6060                           ;doprnt.c: 1142: exp = 0;
  6061  00079C  0E00               	movlw	0
  6062  00079E  0100               	movlb	0	; () banked
  6063  0007A0  0100               	movlb	0	; () banked
  6064  0007A2  6F77               	movwf	(sprintf@exp+1)& (0+255),b
  6065  0007A4  0E00               	movlw	0
  6066  0007A6  0100               	movlb	0	; () banked
  6067  0007A8  6F76               	movwf	sprintf@exp& (0+255),b
  6068  0007AA                     i2l9664:
  6069                           
  6070                           ; BSR set to: 0
  6071                           ;doprnt.c: 1143: }
  6072                           ;doprnt.c: 1145: for(c = 1 ; c != (sizeof dpowers/sizeof dpowers[0]) ; c++)
  6073  0007AA  0100               	movlb	0	; () banked
  6074  0007AC  6F60               	movwf	??_sprintf& (0+255),b
  6075  0007AE  0E01               	movlw	1
  6076  0007B0  0100               	movlb	0	; () banked
  6077  0007B2  0100               	movlb	0	; () banked
  6078  0007B4  6F81               	movwf	sprintf@c& (0+255),b
  6079  0007B6  0100               	movlb	0	; () banked
  6080  0007B8  5160               	movf	??_sprintf& (0+255),w,b
  6081  0007BA                     
  6082                           ; BSR set to: 0
  6083  0007BA  0100               	movlb	0	; () banked
  6084  0007BC  0100               	movlb	0	; () banked
  6085  0007BE  5181               	movf	sprintf@c& (0+255),w,b
  6086  0007C0  0A0A               	xorlw	10
  6087  0007C2  B4D8               	btfsc	status,2,c
  6088  0007C4  D021               	goto	i2l9678
  6089                           
  6090                           ; BSR set to: 0
  6091                           ;doprnt.c: 1146: if(_val._val < dpowers[c])
  6092                           
  6093                           ; BSR set to: 0
  6094                           
  6095                           ; BSR set to: 0
  6096  0007C6  0100               	movlb	0	; () banked
  6097  0007C8  0100               	movlb	0	; () banked
  6098  0007CA  5181               	movf	sprintf@c& (0+255),w,b
  6099  0007CC  0D04               	mullw	4
  6100  0007CE  0EB7               	movlw	low _dpowers
  6101  0007D0  24F3               	addwf	prodl,w,c
  6102  0007D2  6EF6               	movwf	tblptrl,c
  6103  0007D4  0E7C               	movlw	high _dpowers
  6104  0007D6  20F4               	addwfc	prodh,w,c
  6105  0007D8  6EF7               	movwf	tblptrh,c
  6106  0007DA  0009               	tblrd		*+
  6107  0007DC  50F5               	movf	tablat,w,c
  6108  0007DE  0100               	movlb	0	; () banked
  6109  0007E0  0100               	movlb	0	; () banked
  6110  0007E2  5D82               	subwf	sprintf@_val& (0+255),w,b
  6111  0007E4  0009               	tblrd		*+
  6112  0007E6  50F5               	movf	tablat,w,c
  6113  0007E8  0100               	movlb	0	; () banked
  6114  0007EA  5983               	subwfb	(sprintf@_val+1)& (0+255),w,b
  6115  0007EC  0009               	tblrd		*+
  6116  0007EE  50F5               	movf	tablat,w,c
  6117  0007F0  0100               	movlb	0	; () banked
  6118  0007F2  5984               	subwfb	(sprintf@_val+2)& (0+255),w,b
  6119  0007F4  0009               	tblrd		*+
  6120  0007F6  50F5               	movf	tablat,w,c
  6121  0007F8  0100               	movlb	0	; () banked
  6122  0007FA  5985               	subwfb	(sprintf@_val+3)& (0+255),w,b
  6123  0007FC  A0D8               	btfss	status,0,c
  6124  0007FE  D004               	goto	i2l9678
  6125                           
  6126                           ; BSR set to: 0
  6127                           
  6128                           ; BSR set to: 0
  6129                           
  6130                           ; BSR set to: 0
  6131                           ;doprnt.c: 1147: break;
  6132  000800  0100               	movlb	0	; () banked
  6133  000802  0100               	movlb	0	; () banked
  6134  000804  2B81               	incf	sprintf@c& (0+255),f,b
  6135  000806  D7D9               	goto	L6
  6136  000808                     i2l9678:
  6137                           
  6138                           ; BSR set to: 0
  6139                           ;doprnt.c: 1151: width -= prec + c + exp;
  6140  000808  0100               	movlb	0	; () banked
  6141  00080A  C081  F060         	movff	sprintf@c,??_sprintf
  6142  00080E  0100               	movlb	0	; () banked
  6143  000810  6B61               	clrf	(??_sprintf+1)& (0+255),b
  6144  000812  BF60               	btfsc	??_sprintf& (0+255),7,b
  6145  000814  0761               	decf	(??_sprintf+1)& (0+255),f,b
  6146  000816  0100               	movlb	0	; () banked
  6147  000818  0100               	movlb	0	; () banked
  6148  00081A  517F               	movf	sprintf@prec& (0+255),w,b
  6149  00081C  0100               	movlb	0	; () banked
  6150  00081E  2760               	addwf	??_sprintf& (0+255),f,b
  6151  000820  0100               	movlb	0	; () banked
  6152  000822  0100               	movlb	0	; () banked
  6153  000824  5180               	movf	(sprintf@prec+1)& (0+255),w,b
  6154  000826  0100               	movlb	0	; () banked
  6155  000828  2361               	addwfc	(??_sprintf+1)& (0+255),f,b
  6156  00082A  0100               	movlb	0	; () banked
  6157  00082C  0100               	movlb	0	; () banked
  6158  00082E  5176               	movf	sprintf@exp& (0+255),w,b
  6159  000830  0100               	movlb	0	; () banked
  6160  000832  2760               	addwf	??_sprintf& (0+255),f,b
  6161  000834  0100               	movlb	0	; () banked
  6162  000836  0100               	movlb	0	; () banked
  6163  000838  5177               	movf	(sprintf@exp+1)& (0+255),w,b
  6164  00083A  0100               	movlb	0	; () banked
  6165  00083C  2361               	addwfc	(??_sprintf+1)& (0+255),f,b
  6166  00083E  0100               	movlb	0	; () banked
  6167  000840  5160               	movf	??_sprintf& (0+255),w,b
  6168  000842  0100               	movlb	0	; () banked
  6169  000844  0100               	movlb	0	; () banked
  6170  000846  5F7D               	subwf	sprintf@width& (0+255),f,b
  6171  000848  0100               	movlb	0	; () banked
  6172  00084A  5161               	movf	(??_sprintf+1)& (0+255),w,b
  6173  00084C  0100               	movlb	0	; () banked
  6174  00084E  0100               	movlb	0	; () banked
  6175  000850  5B7E               	subwfb	(sprintf@width+1)& (0+255),f,b
  6176                           
  6177                           ;doprnt.c: 1152: if(
  6178                           ;doprnt.c: 1156: prec)
  6179  000852  0100               	movlb	0	; () banked
  6180  000854  0100               	movlb	0	; () banked
  6181  000856  5180               	movf	(sprintf@prec+1)& (0+255),w,b
  6182  000858  117F               	iorwf	sprintf@prec& (0+255),w,b
  6183  00085A  B4D8               	btfsc	status,2,c
  6184  00085C  D005               	goto	i2l9682
  6185                           
  6186                           ; BSR set to: 0
  6187                           ;doprnt.c: 1157: width--;
  6188  00085E  0100               	movlb	0	; () banked
  6189  000860  0100               	movlb	0	; () banked
  6190  000862  077D               	decf	sprintf@width& (0+255),f,b
  6191  000864  A0D8               	btfss	status,0,c
  6192  000866  077E               	decf	(sprintf@width+1)& (0+255),f,b
  6193  000868                     i2l9682:
  6194                           
  6195                           ; BSR set to: 0
  6196                           ;doprnt.c: 1158: if(flag & 0x03)
  6197  000868  0E03               	movlw	3
  6198  00086A  0100               	movlb	0	; () banked
  6199  00086C  0100               	movlb	0	; () banked
  6200  00086E  1578               	andwf	sprintf@flag& (0+255),w,b
  6201  000870  0100               	movlb	0	; () banked
  6202  000872  6F60               	movwf	??_sprintf& (0+255),b
  6203  000874  0E00               	movlw	0
  6204  000876  0100               	movlb	0	; () banked
  6205  000878  0100               	movlb	0	; () banked
  6206  00087A  1579               	andwf	(sprintf@flag+1)& (0+255),w,b
  6207  00087C  0100               	movlb	0	; () banked
  6208  00087E  6F61               	movwf	(??_sprintf+1)& (0+255),b
  6209  000880  0100               	movlb	0	; () banked
  6210  000882  5161               	movf	(??_sprintf+1)& (0+255),w,b
  6211  000884  1160               	iorwf	??_sprintf& (0+255),w,b
  6212  000886  B4D8               	btfsc	status,2,c
  6213  000888  D005               	goto	i2l9686
  6214                           
  6215                           ; BSR set to: 0
  6216                           ;doprnt.c: 1159: width--;
  6217  00088A  0100               	movlb	0	; () banked
  6218  00088C  0100               	movlb	0	; () banked
  6219  00088E  077D               	decf	sprintf@width& (0+255),f,b
  6220  000890  A0D8               	btfss	status,0,c
  6221  000892  077E               	decf	(sprintf@width+1)& (0+255),f,b
  6222  000894                     i2l9686:
  6223                           
  6224                           ; BSR set to: 0
  6225                           ;doprnt.c: 1162: if(flag & 0x04) {
  6226  000894  0100               	movlb	0	; () banked
  6227  000896  0100               	movlb	0	; () banked
  6228  000898  B578               	btfsc	sprintf@flag& (0+255),2,b
  6229  00089A  D00E               	goto	i2l9696
  6230  00089C  D025               	goto	i2l9704
  6231  00089E                     i2l9690:
  6232                           
  6233                           ; BSR set to: 0
  6234                           ;doprnt.c: 1176: ((*sp++ = ('0')));
  6235  00089E  C050  FFD9         	movff	sprintf@sp,fsr2l
  6236  0008A2  C051  FFDA         	movff	sprintf@sp+1,fsr2h
  6237  0008A6  0E30               	movlw	48
  6238  0008A8  6EDF               	movwf	indf2,c
  6239                           
  6240                           ; BSR set to: 0
  6241  0008AA  4A50               	infsnz	sprintf@sp,f,c
  6242  0008AC  2A51               	incf	sprintf@sp+1,f,c
  6243                           
  6244                           ; BSR set to: 0
  6245                           ;doprnt.c: 1177: width--;
  6246  0008AE  0100               	movlb	0	; () banked
  6247  0008B0  0100               	movlb	0	; () banked
  6248  0008B2  077D               	decf	sprintf@width& (0+255),f,b
  6249  0008B4  A0D8               	btfss	status,0,c
  6250  0008B6  077E               	decf	(sprintf@width+1)& (0+255),f,b
  6251  0008B8                     i2l9696:
  6252                           
  6253                           ; BSR set to: 0
  6254  0008B8  0100               	movlb	0	; () banked
  6255  0008BA  0100               	movlb	0	; () banked
  6256  0008BC  517E               	movf	(sprintf@width+1)& (0+255),w,b
  6257  0008BE  0A80               	xorlw	128
  6258  0008C0  0F80               	addlw	-128
  6259  0008C2  0E01               	movlw	1
  6260  0008C4  B4D8               	btfsc	status,2,c
  6261  0008C6  5D7D               	subwf	sprintf@width& (0+255),w,b
  6262  0008C8  A0D8               	btfss	status,0,c
  6263  0008CA  D06C               	goto	i2l9720
  6264  0008CC  D7E8               	goto	i2l9690
  6265  0008CE                     i2l9698:
  6266                           
  6267                           ; BSR set to: 0
  6268                           ;doprnt.c: 1188: ((*sp++ = (' ')));
  6269  0008CE  C050  FFD9         	movff	sprintf@sp,fsr2l
  6270  0008D2  C051  FFDA         	movff	sprintf@sp+1,fsr2h
  6271  0008D6  0E20               	movlw	32
  6272  0008D8  6EDF               	movwf	indf2,c
  6273                           
  6274                           ; BSR set to: 0
  6275  0008DA  4A50               	infsnz	sprintf@sp,f,c
  6276  0008DC  2A51               	incf	sprintf@sp+1,f,c
  6277                           
  6278                           ; BSR set to: 0
  6279                           ;doprnt.c: 1189: width--;
  6280  0008DE  0100               	movlb	0	; () banked
  6281  0008E0  0100               	movlb	0	; () banked
  6282  0008E2  077D               	decf	sprintf@width& (0+255),f,b
  6283  0008E4  A0D8               	btfss	status,0,c
  6284  0008E6  077E               	decf	(sprintf@width+1)& (0+255),f,b
  6285  0008E8                     i2l9704:
  6286                           
  6287                           ; BSR set to: 0
  6288  0008E8  0100               	movlb	0	; () banked
  6289  0008EA  0100               	movlb	0	; () banked
  6290  0008EC  517E               	movf	(sprintf@width+1)& (0+255),w,b
  6291  0008EE  0A80               	xorlw	128
  6292  0008F0  0F80               	addlw	-128
  6293  0008F2  0E01               	movlw	1
  6294  0008F4  B4D8               	btfsc	status,2,c
  6295  0008F6  5D7D               	subwf	sprintf@width& (0+255),w,b
  6296  0008F8  B0D8               	btfsc	status,0,c
  6297  0008FA  D7E9               	goto	i2l9698
  6298                           
  6299                           ; BSR set to: 0
  6300                           ;doprnt.c: 1190: }
  6301                           ;doprnt.c: 1195: if(flag & 0x03)
  6302                           
  6303                           ; BSR set to: 0
  6304  0008FC  0E03               	movlw	3
  6305  0008FE  0100               	movlb	0	; () banked
  6306  000900  0100               	movlb	0	; () banked
  6307  000902  1578               	andwf	sprintf@flag& (0+255),w,b
  6308  000904  0100               	movlb	0	; () banked
  6309  000906  6F60               	movwf	??_sprintf& (0+255),b
  6310  000908  0E00               	movlw	0
  6311  00090A  0100               	movlb	0	; () banked
  6312  00090C  0100               	movlb	0	; () banked
  6313  00090E  1579               	andwf	(sprintf@flag+1)& (0+255),w,b
  6314  000910  0100               	movlb	0	; () banked
  6315  000912  6F61               	movwf	(??_sprintf+1)& (0+255),b
  6316  000914  0100               	movlb	0	; () banked
  6317  000916  5161               	movf	(??_sprintf+1)& (0+255),w,b
  6318  000918  1160               	iorwf	??_sprintf& (0+255),w,b
  6319  00091A  B4D8               	btfsc	status,2,c
  6320  00091C  D043               	goto	i2l9720
  6321                           
  6322                           ; BSR set to: 0
  6323                           ;doprnt.c: 1197: ((*sp++ = ('-')));
  6324  00091E  C050  FFD9         	movff	sprintf@sp,fsr2l
  6325  000922  C051  FFDA         	movff	sprintf@sp+1,fsr2h
  6326  000926  0E2D               	movlw	45
  6327  000928  D03A               	goto	L7
  6328  00092A                     i2l9712:
  6329                           
  6330                           ; BSR set to: 0
  6331                           ;doprnt.c: 1207: {
  6332                           ;doprnt.c: 1208: unsigned vd = _val._val/dpowers[c];
  6333  00092A  C082  F001         	movff	sprintf@_val,?___lldiv
  6334  00092E  C083  F002         	movff	sprintf@_val+1,?___lldiv+1
  6335  000932  C084  F003         	movff	sprintf@_val+2,?___lldiv+2
  6336  000936  C085  F004         	movff	sprintf@_val+3,?___lldiv+3
  6337  00093A  0100               	movlb	0	; () banked
  6338  00093C  0100               	movlb	0	; () banked
  6339  00093E  5181               	movf	sprintf@c& (0+255),w,b
  6340  000940  0D04               	mullw	4
  6341  000942  0EB7               	movlw	low _dpowers
  6342  000944  24F3               	addwf	prodl,w,c
  6343  000946  6EF6               	movwf	tblptrl,c
  6344  000948  0E7C               	movlw	high _dpowers
  6345  00094A  20F4               	addwfc	prodh,w,c
  6346  00094C  6EF7               	movwf	tblptrh,c
  6347  00094E  0009               	tblrd		*+
  6348  000950  CFF5 F005          	movff	tablat,?___lldiv+4
  6349  000954  0009               	tblrd		*+
  6350  000956  CFF5 F006          	movff	tablat,?___lldiv+5
  6351  00095A  0009               	tblrd		*+
  6352  00095C  CFF5 F007          	movff	tablat,?___lldiv+6
  6353  000960  000A               	tblrd		*-
  6354  000962  CFF5 F008          	movff	tablat,?___lldiv+7
  6355  000966  EC79  F018         	call	___lldiv	;wreg free
  6356  00096A  C001  F06D         	movff	?___lldiv,sprintf@vd
  6357  00096E  C002  F06E         	movff	?___lldiv+1,sprintf@vd+1
  6358                           
  6359                           ;doprnt.c: 1209: vd %= 10;
  6360  000972  C06D  F001         	movff	sprintf@vd,?___lwmod
  6361  000976  C06E  F002         	movff	sprintf@vd+1,?___lwmod+1
  6362  00097A  0E00               	movlw	0
  6363  00097C  6E04               	movwf	?___lwmod+3,c
  6364  00097E  0E0A               	movlw	10
  6365  000980  6E03               	movwf	?___lwmod+2,c
  6366  000982  ECDD  F01A         	call	___lwmod	;wreg free
  6367  000986  C001  F06D         	movff	?___lwmod,sprintf@vd
  6368  00098A  C002  F06E         	movff	?___lwmod+1,sprintf@vd+1
  6369                           
  6370                           ;doprnt.c: 1210: ((*sp++ = ('0' + vd)));
  6371  00098E  0100               	movlb	0	; () banked
  6372  000990  0100               	movlb	0	; () banked
  6373  000992  516D               	movf	sprintf@vd& (0+255),w,b
  6374  000994  0F30               	addlw	48
  6375  000996  C050  FFD9         	movff	sprintf@sp,fsr2l
  6376  00099A  C051  FFDA         	movff	sprintf@sp+1,fsr2h
  6377  00099E                     L7:
  6378  00099E  6EDF               	movwf	indf2,c
  6379                           
  6380                           ; BSR set to: 0
  6381  0009A0  4A50               	infsnz	sprintf@sp,f,c
  6382  0009A2  2A51               	incf	sprintf@sp+1,f,c
  6383  0009A4                     i2l9720:
  6384                           
  6385                           ; BSR set to: 0
  6386  0009A4  0100               	movlb	0	; () banked
  6387  0009A6  0100               	movlb	0	; () banked
  6388  0009A8  0781               	decf	sprintf@c& (0+255),f,b
  6389  0009AA  0100               	movlb	0	; () banked
  6390  0009AC  2981               	incf	sprintf@c& (0+255),w,b
  6391  0009AE  B4D8               	btfsc	status,2,c
  6392  0009B0  D00E               	goto	i2l9728
  6393  0009B2  D7BB               	goto	i2l9712
  6394  0009B4                     i2l9722:
  6395                           
  6396                           ; BSR set to: 0
  6397                           ;doprnt.c: 1215: ((*sp++ = ('0')));
  6398  0009B4  C050  FFD9         	movff	sprintf@sp,fsr2l
  6399  0009B8  C051  FFDA         	movff	sprintf@sp+1,fsr2h
  6400  0009BC  0E30               	movlw	48
  6401  0009BE  6EDF               	movwf	indf2,c
  6402                           
  6403                           ; BSR set to: 0
  6404  0009C0  4A50               	infsnz	sprintf@sp,f,c
  6405  0009C2  2A51               	incf	sprintf@sp+1,f,c
  6406                           
  6407                           ; BSR set to: 0
  6408                           ;doprnt.c: 1216: exp--;
  6409  0009C4  0100               	movlb	0	; () banked
  6410  0009C6  0100               	movlb	0	; () banked
  6411  0009C8  0776               	decf	sprintf@exp& (0+255),f,b
  6412  0009CA  A0D8               	btfss	status,0,c
  6413  0009CC  0777               	decf	(sprintf@exp+1)& (0+255),f,b
  6414  0009CE                     i2l9728:
  6415                           
  6416                           ; BSR set to: 0
  6417  0009CE  0100               	movlb	0	; () banked
  6418  0009D0  0100               	movlb	0	; () banked
  6419  0009D2  5177               	movf	(sprintf@exp+1)& (0+255),w,b
  6420  0009D4  0A80               	xorlw	128
  6421  0009D6  0F80               	addlw	-128
  6422  0009D8  0E01               	movlw	1
  6423  0009DA  B4D8               	btfsc	status,2,c
  6424  0009DC  5D76               	subwf	sprintf@exp& (0+255),w,b
  6425  0009DE  B0D8               	btfsc	status,0,c
  6426  0009E0  D7E9               	goto	i2l9722
  6427                           
  6428                           ; BSR set to: 0
  6429                           ;doprnt.c: 1217: }
  6430                           ;doprnt.c: 1218: if(prec > (int)((sizeof dpowers/sizeof dpowers[0])-2))
  6431                           
  6432                           ; BSR set to: 0
  6433  0009E2  0100               	movlb	0	; () banked
  6434  0009E4  0100               	movlb	0	; () banked
  6435  0009E6  5180               	movf	(sprintf@prec+1)& (0+255),w,b
  6436  0009E8  0A80               	xorlw	128
  6437  0009EA  0F80               	addlw	-128
  6438  0009EC  0E09               	movlw	9
  6439  0009EE  B4D8               	btfsc	status,2,c
  6440  0009F0  5D7F               	subwf	sprintf@prec& (0+255),w,b
  6441  0009F2  A0D8               	btfss	status,0,c
  6442  0009F4  D009               	goto	i2l586
  6443                           
  6444                           ; BSR set to: 0
  6445                           ;doprnt.c: 1219: c = (sizeof dpowers/sizeof dpowers[0])-2;
  6446  0009F6  0100               	movlb	0	; () banked
  6447  0009F8  6F60               	movwf	??_sprintf& (0+255),b
  6448  0009FA  0E08               	movlw	8
  6449  0009FC  0100               	movlb	0	; () banked
  6450  0009FE  0100               	movlb	0	; () banked
  6451  000A00  6F81               	movwf	sprintf@c& (0+255),b
  6452  000A02  0100               	movlb	0	; () banked
  6453  000A04  5160               	movf	??_sprintf& (0+255),w,b
  6454  000A06  D002               	goto	i2l9734
  6455  000A08                     i2l586:
  6456                           
  6457                           ; BSR set to: 0
  6458                           ;doprnt.c: 1220: else
  6459                           ;doprnt.c: 1221: c = prec;
  6460  000A08  C07F  F081         	movff	sprintf@prec,sprintf@c
  6461  000A0C                     i2l9734:
  6462                           
  6463                           ; BSR set to: 0
  6464                           ;doprnt.c: 1222: prec -= c;
  6465  000A0C  0100               	movlb	0	; () banked
  6466  000A0E  0100               	movlb	0	; () banked
  6467  000A10  5181               	movf	sprintf@c& (0+255),w,b
  6468  000A12  0100               	movlb	0	; () banked
  6469  000A14  0100               	movlb	0	; () banked
  6470  000A16  5F7F               	subwf	sprintf@prec& (0+255),f,b
  6471  000A18  0E00               	movlw	0
  6472  000A1A  0100               	movlb	0	; () banked
  6473  000A1C  BF81               	btfsc	sprintf@c& (0+255),7,b
  6474  000A1E  0EFF               	movlw	255
  6475  000A20  0100               	movlb	0	; () banked
  6476  000A22  0100               	movlb	0	; () banked
  6477  000A24  5B80               	subwfb	(sprintf@prec+1)& (0+255),f,b
  6478                           
  6479                           ; BSR set to: 0
  6480                           ;doprnt.c: 1226: if(c)
  6481  000A26  0100               	movlb	0	; () banked
  6482  000A28  0100               	movlb	0	; () banked
  6483  000A2A  5181               	movf	sprintf@c& (0+255),w,b
  6484  000A2C  B4D8               	btfsc	status,2,c
  6485  000A2E  D008               	goto	i2l9742
  6486                           
  6487                           ; BSR set to: 0
  6488                           ;doprnt.c: 1228: ((*sp++ = ('.')));
  6489  000A30  C050  FFD9         	movff	sprintf@sp,fsr2l
  6490  000A34  C051  FFDA         	movff	sprintf@sp+1,fsr2h
  6491  000A38  0E2E               	movlw	46
  6492  000A3A  6EDF               	movwf	indf2,c
  6493                           
  6494                           ; BSR set to: 0
  6495  000A3C  4A50               	infsnz	sprintf@sp,f,c
  6496  000A3E  2A51               	incf	sprintf@sp+1,f,c
  6497  000A40                     i2l9742:
  6498                           
  6499                           ; BSR set to: 0
  6500                           ;doprnt.c: 1234: _val._val = (long)(fval * scale(c));
  6501  000A40  C081  F037         	movff	sprintf@c,?_scale
  6502  000A44  EC0B  F00A         	call	_scale	;wreg free
  6503  000A48  C039  F068         	movff	?_scale+2,_sprintf$1264+2
  6504  000A4C  C038  F067         	movff	?_scale+1,_sprintf$1264+1
  6505  000A50  C037  F066         	movff	?_scale,_sprintf$1264
  6506                           
  6507                           ;doprnt.c: 1234: _val._val = (long)(fval * scale(c));
  6508  000A54  C07A  F029         	movff	sprintf@fval,?___ftmul+3
  6509  000A58  C07B  F02A         	movff	sprintf@fval+1,?___ftmul+4
  6510  000A5C  C07C  F02B         	movff	sprintf@fval+2,?___ftmul+5
  6511  000A60  C066  F026         	movff	_sprintf$1264,?___ftmul
  6512  000A64  C067  F027         	movff	_sprintf$1264+1,?___ftmul+1
  6513  000A68  C068  F028         	movff	_sprintf$1264+2,?___ftmul+2
  6514  000A6C  EC70  F013         	call	___ftmul	;wreg free
  6515  000A70  C028  F019         	movff	?___ftmul+2,?___fttol+2
  6516  000A74  C027  F018         	movff	?___ftmul+1,?___fttol+1
  6517  000A78  C026  F017         	movff	?___ftmul,?___fttol
  6518  000A7C  EC75  F015         	call	___fttol	;wreg free
  6519  000A80  C01A  F085         	movff	?___fttol+3,sprintf@_val+3
  6520  000A84  C019  F084         	movff	?___fttol+2,sprintf@_val+2
  6521  000A88  C018  F083         	movff	?___fttol+1,sprintf@_val+1
  6522  000A8C  C017  F082         	movff	?___fttol,sprintf@_val
  6523                           
  6524                           ;doprnt.c: 1235: while(c--) {
  6525  000A90  D065               	goto	i2l9756
  6526  000A92                     i2l9746:
  6527                           
  6528                           ;doprnt.c: 1236: unsigned vd = _val._val/dpowers[c];
  6529  000A92  C082  F001         	movff	sprintf@_val,?___lldiv
  6530  000A96  C083  F002         	movff	sprintf@_val+1,?___lldiv+1
  6531  000A9A  C084  F003         	movff	sprintf@_val+2,?___lldiv+2
  6532  000A9E  C085  F004         	movff	sprintf@_val+3,?___lldiv+3
  6533  000AA2  0100               	movlb	0	; () banked
  6534  000AA4  0100               	movlb	0	; () banked
  6535  000AA6  5181               	movf	sprintf@c& (0+255),w,b
  6536  000AA8  0D04               	mullw	4
  6537  000AAA  0EB7               	movlw	low _dpowers
  6538  000AAC  24F3               	addwf	prodl,w,c
  6539  000AAE  6EF6               	movwf	tblptrl,c
  6540  000AB0  0E7C               	movlw	high _dpowers
  6541  000AB2  20F4               	addwfc	prodh,w,c
  6542  000AB4  6EF7               	movwf	tblptrh,c
  6543  000AB6  0009               	tblrd		*+
  6544  000AB8  CFF5 F005          	movff	tablat,?___lldiv+4
  6545  000ABC  0009               	tblrd		*+
  6546  000ABE  CFF5 F006          	movff	tablat,?___lldiv+5
  6547  000AC2  0009               	tblrd		*+
  6548  000AC4  CFF5 F007          	movff	tablat,?___lldiv+6
  6549  000AC8  000A               	tblrd		*-
  6550  000ACA  CFF5 F008          	movff	tablat,?___lldiv+7
  6551  000ACE  EC79  F018         	call	___lldiv	;wreg free
  6552  000AD2  C001  F06F         	movff	?___lldiv,sprintf@vd_621
  6553  000AD6  C002  F070         	movff	?___lldiv+1,sprintf@vd_621+1
  6554                           
  6555                           ;doprnt.c: 1237: vd %= 10;
  6556  000ADA  C06F  F001         	movff	sprintf@vd_621,?___lwmod
  6557  000ADE  C070  F002         	movff	sprintf@vd_621+1,?___lwmod+1
  6558  000AE2  0E00               	movlw	0
  6559  000AE4  6E04               	movwf	?___lwmod+3,c
  6560  000AE6  0E0A               	movlw	10
  6561  000AE8  6E03               	movwf	?___lwmod+2,c
  6562  000AEA  ECDD  F01A         	call	___lwmod	;wreg free
  6563  000AEE  C001  F06F         	movff	?___lwmod,sprintf@vd_621
  6564  000AF2  C002  F070         	movff	?___lwmod+1,sprintf@vd_621+1
  6565                           
  6566                           ;doprnt.c: 1238: ((*sp++ = ('0' + vd)));
  6567  000AF6  0100               	movlb	0	; () banked
  6568  000AF8  0100               	movlb	0	; () banked
  6569  000AFA  516F               	movf	sprintf@vd_621& (0+255),w,b
  6570  000AFC  0F30               	addlw	48
  6571  000AFE  C050  FFD9         	movff	sprintf@sp,fsr2l
  6572  000B02  C051  FFDA         	movff	sprintf@sp+1,fsr2h
  6573  000B06  6EDF               	movwf	indf2,c
  6574                           
  6575                           ; BSR set to: 0
  6576  000B08  4A50               	infsnz	sprintf@sp,f,c
  6577  000B0A  2A51               	incf	sprintf@sp+1,f,c
  6578                           
  6579                           ; BSR set to: 0
  6580                           ;doprnt.c: 1239: _val._val %= dpowers[c];
  6581  000B0C  C082  F00F         	movff	sprintf@_val,?___llmod
  6582  000B10  C083  F010         	movff	sprintf@_val+1,?___llmod+1
  6583  000B14  C084  F011         	movff	sprintf@_val+2,?___llmod+2
  6584  000B18  C085  F012         	movff	sprintf@_val+3,?___llmod+3
  6585  000B1C  0100               	movlb	0	; () banked
  6586  000B1E  0100               	movlb	0	; () banked
  6587  000B20  5181               	movf	sprintf@c& (0+255),w,b
  6588  000B22  0D04               	mullw	4
  6589  000B24  0EB7               	movlw	low _dpowers
  6590  000B26  24F3               	addwf	prodl,w,c
  6591  000B28  6EF6               	movwf	tblptrl,c
  6592  000B2A  0E7C               	movlw	high _dpowers
  6593  000B2C  20F4               	addwfc	prodh,w,c
  6594  000B2E  6EF7               	movwf	tblptrh,c
  6595  000B30  0009               	tblrd		*+
  6596  000B32  CFF5 F013          	movff	tablat,?___llmod+4
  6597  000B36  0009               	tblrd		*+
  6598  000B38  CFF5 F014          	movff	tablat,?___llmod+5
  6599  000B3C  0009               	tblrd		*+
  6600  000B3E  CFF5 F015          	movff	tablat,?___llmod+6
  6601  000B42  000A               	tblrd		*-
  6602  000B44  CFF5 F016          	movff	tablat,?___llmod+7
  6603  000B48  ECA1  F019         	call	___llmod	;wreg free
  6604  000B4C  C012  F085         	movff	?___llmod+3,sprintf@_val+3
  6605  000B50  C011  F084         	movff	?___llmod+2,sprintf@_val+2
  6606  000B54  C010  F083         	movff	?___llmod+1,sprintf@_val+1
  6607  000B58  C00F  F082         	movff	?___llmod,sprintf@_val
  6608  000B5C                     i2l9756:
  6609  000B5C  0100               	movlb	0	; () banked
  6610  000B5E  0100               	movlb	0	; () banked
  6611  000B60  0781               	decf	sprintf@c& (0+255),f,b
  6612  000B62  0100               	movlb	0	; () banked
  6613  000B64  2981               	incf	sprintf@c& (0+255),w,b
  6614  000B66  B4D8               	btfsc	status,2,c
  6615  000B68  D00E               	goto	i2l9764
  6616  000B6A  D793               	goto	i2l9746
  6617  000B6C                     i2l9758:
  6618                           
  6619                           ; BSR set to: 0
  6620                           ;doprnt.c: 1243: ((*sp++ = ('0')));
  6621  000B6C  C050  FFD9         	movff	sprintf@sp,fsr2l
  6622  000B70  C051  FFDA         	movff	sprintf@sp+1,fsr2h
  6623  000B74  0E30               	movlw	48
  6624  000B76  6EDF               	movwf	indf2,c
  6625                           
  6626                           ; BSR set to: 0
  6627  000B78  4A50               	infsnz	sprintf@sp,f,c
  6628  000B7A  2A51               	incf	sprintf@sp+1,f,c
  6629                           
  6630                           ; BSR set to: 0
  6631                           ;doprnt.c: 1244: prec--;
  6632  000B7C  0100               	movlb	0	; () banked
  6633  000B7E  0100               	movlb	0	; () banked
  6634  000B80  077F               	decf	sprintf@prec& (0+255),f,b
  6635  000B82  A0D8               	btfss	status,0,c
  6636  000B84  0780               	decf	(sprintf@prec+1)& (0+255),f,b
  6637  000B86                     i2l9764:
  6638                           
  6639                           ; BSR set to: 0
  6640  000B86  0100               	movlb	0	; () banked
  6641  000B88  0100               	movlb	0	; () banked
  6642  000B8A  5180               	movf	(sprintf@prec+1)& (0+255),w,b
  6643  000B8C  117F               	iorwf	sprintf@prec& (0+255),w,b
  6644  000B8E  B4D8               	btfsc	status,2,c
  6645  000B90  D1E9               	goto	i2l9866
  6646  000B92  D7EC               	goto	i2l9758
  6647  000B94                     i2l547:
  6648                           
  6649                           ; BSR set to: 0
  6650                           ;doprnt.c: 1253: }
  6651                           ;doprnt.c: 1260: {
  6652                           ;doprnt.c: 1262: if(flag & 0x10)
  6653  000B94  0100               	movlb	0	; () banked
  6654  000B96  0100               	movlb	0	; () banked
  6655  000B98  A978               	btfss	sprintf@flag& (0+255),4,b
  6656  000B9A  D012               	goto	i2l9770
  6657                           
  6658                           ; BSR set to: 0
  6659                           ;doprnt.c: 1263: _val._val = (*(long *)__va_arg((*(long **)ap), (long)0));
  6660  000B9C  C074  FFD9         	movff	sprintf@ap,fsr2l
  6661  000BA0  C075  FFDA         	movff	sprintf@ap+1,fsr2h
  6662  000BA4  0100               	movlb	0	; () banked
  6663  000BA6  CFDE F082          	movff	postinc2,sprintf@_val
  6664  000BAA  0100               	movlb	0	; () banked
  6665  000BAC  CFDE F083          	movff	postinc2,sprintf@_val+1
  6666  000BB0  0100               	movlb	0	; () banked
  6667  000BB2  CFDE F084          	movff	postinc2,sprintf@_val+2
  6668  000BB6  0100               	movlb	0	; () banked
  6669  000BB8  CFDE F085          	movff	postinc2,sprintf@_val+3
  6670                           
  6671                           ; BSR set to: 0
  6672  000BBC  0E04               	movlw	4
  6673  000BBE  D014               	goto	L8
  6674  000BC0                     i2l9770:
  6675                           
  6676                           ; BSR set to: 0
  6677                           ;doprnt.c: 1264: else
  6678                           ;doprnt.c: 1266: _val._val = (long)(*(int *)__va_arg((*(int **)ap), (int)0));
  6679  000BC0  C074  FFD9         	movff	sprintf@ap,fsr2l
  6680  000BC4  C075  FFDA         	movff	sprintf@ap+1,fsr2h
  6681  000BC8  0100               	movlb	0	; () banked
  6682  000BCA  CFDE F082          	movff	postinc2,sprintf@_val
  6683  000BCE  0100               	movlb	0	; () banked
  6684  000BD0  CFDD F083          	movff	postdec2,sprintf@_val+1
  6685  000BD4  0100               	movlb	0	; () banked
  6686  000BD6  0E00               	movlw	0
  6687  000BD8  0100               	movlb	0	; () banked
  6688  000BDA  BF83               	btfsc	(sprintf@_val+1)& (0+255),7,b
  6689  000BDC  0EFF               	movlw	-1
  6690  000BDE  0100               	movlb	0	; () banked
  6691  000BE0  6F84               	movwf	(sprintf@_val+2)& (0+255),b
  6692  000BE2  0100               	movlb	0	; () banked
  6693  000BE4  6F85               	movwf	(sprintf@_val+3)& (0+255),b
  6694                           
  6695                           ; BSR set to: 0
  6696  000BE6  0E02               	movlw	2
  6697  000BE8                     L8:
  6698  000BE8  0100               	movlb	0	; () banked
  6699  000BEA  0100               	movlb	0	; () banked
  6700  000BEC  2774               	addwf	sprintf@ap& (0+255),f,b
  6701  000BEE  0E00               	movlw	0
  6702  000BF0  0100               	movlb	0	; () banked
  6703  000BF2  2375               	addwfc	(sprintf@ap+1)& (0+255),f,b
  6704                           
  6705                           ; BSR set to: 0
  6706                           ;doprnt.c: 1268: if((long)_val._val < 0) {
  6707                           
  6708                           ; BSR set to: 0
  6709  000BF4  0100               	movlb	0	; () banked
  6710  000BF6  0100               	movlb	0	; () banked
  6711  000BF8  AF85               	btfss	(sprintf@_val+3)& (0+255),7,b
  6712  000BFA  D014               	goto	i2l9780
  6713                           
  6714                           ; BSR set to: 0
  6715                           ;doprnt.c: 1269: flag |= 0x03;
  6716  000BFC  0E03               	movlw	3
  6717  000BFE  0100               	movlb	0	; () banked
  6718  000C00  0100               	movlb	0	; () banked
  6719  000C02  1378               	iorwf	sprintf@flag& (0+255),f,b
  6720                           
  6721                           ; BSR set to: 0
  6722                           ;doprnt.c: 1270: _val._val = -_val._val;
  6723  000C04  0100               	movlb	0	; () banked
  6724  000C06  0100               	movlb	0	; () banked
  6725  000C08  1F85               	comf	(sprintf@_val+3)& (0+255),f,b
  6726  000C0A  0100               	movlb	0	; () banked
  6727  000C0C  1F84               	comf	(sprintf@_val+2)& (0+255),f,b
  6728  000C0E  0100               	movlb	0	; () banked
  6729  000C10  1F83               	comf	(sprintf@_val+1)& (0+255),f,b
  6730  000C12  0100               	movlb	0	; () banked
  6731  000C14  6D82               	negf	sprintf@_val& (0+255),b
  6732  000C16  0E00               	movlw	0
  6733  000C18  0100               	movlb	0	; () banked
  6734  000C1A  2383               	addwfc	(sprintf@_val+1)& (0+255),f,b
  6735  000C1C  0100               	movlb	0	; () banked
  6736  000C1E  2384               	addwfc	(sprintf@_val+2)& (0+255),f,b
  6737  000C20  0100               	movlb	0	; () banked
  6738  000C22  2385               	addwfc	(sprintf@_val+3)& (0+255),f,b
  6739  000C24                     i2l9780:
  6740                           
  6741                           ; BSR set to: 0
  6742                           ;doprnt.c: 1271: }
  6743                           ;doprnt.c: 1273: }
  6744                           ;doprnt.c: 1297: if(prec == 0 && _val._val == 0)
  6745  000C24  0100               	movlb	0	; () banked
  6746  000C26  0100               	movlb	0	; () banked
  6747  000C28  5180               	movf	(sprintf@prec+1)& (0+255),w,b
  6748  000C2A  117F               	iorwf	sprintf@prec& (0+255),w,b
  6749  000C2C  A4D8               	btfss	status,2,c
  6750  000C2E  D00C               	goto	i2l9786
  6751                           
  6752                           ; BSR set to: 0
  6753  000C30  0100               	movlb	0	; () banked
  6754  000C32  0100               	movlb	0	; () banked
  6755  000C34  5185               	movf	(sprintf@_val+3)& (0+255),w,b
  6756  000C36  1182               	iorwf	sprintf@_val& (0+255),w,b
  6757  000C38  1183               	iorwf	(sprintf@_val+1)& (0+255),w,b
  6758  000C3A  1184               	iorwf	(sprintf@_val+2)& (0+255),w,b
  6759  000C3C  A4D8               	btfss	status,2,c
  6760  000C3E  D004               	goto	i2l9786
  6761                           
  6762                           ; BSR set to: 0
  6763                           ;doprnt.c: 1298: prec++;
  6764  000C40  0100               	movlb	0	; () banked
  6765  000C42  0100               	movlb	0	; () banked
  6766  000C44  4B7F               	infsnz	sprintf@prec& (0+255),f,b
  6767  000C46  2B80               	incf	(sprintf@prec+1)& (0+255),f,b
  6768  000C48                     i2l9786:
  6769                           
  6770                           ; BSR set to: 0
  6771                           ;doprnt.c: 1312: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  6772  000C48  0100               	movlb	0	; () banked
  6773  000C4A  6F60               	movwf	??_sprintf& (0+255),b
  6774  000C4C  0E01               	movlw	1
  6775  000C4E  0100               	movlb	0	; () banked
  6776  000C50  0100               	movlb	0	; () banked
  6777  000C52  6F81               	movwf	sprintf@c& (0+255),b
  6778  000C54  0100               	movlb	0	; () banked
  6779  000C56  5160               	movf	??_sprintf& (0+255),w,b
  6780  000C58                     
  6781                           ; BSR set to: 0
  6782  000C58  0100               	movlb	0	; () banked
  6783  000C5A  0100               	movlb	0	; () banked
  6784  000C5C  5181               	movf	sprintf@c& (0+255),w,b
  6785  000C5E  0A0A               	xorlw	10
  6786  000C60  B4D8               	btfsc	status,2,c
  6787  000C62  D021               	goto	i2l9800
  6788                           
  6789                           ; BSR set to: 0
  6790                           ;doprnt.c: 1313: if(_val._val < dpowers[c])
  6791                           
  6792                           ; BSR set to: 0
  6793                           
  6794                           ; BSR set to: 0
  6795  000C64  0100               	movlb	0	; () banked
  6796  000C66  0100               	movlb	0	; () banked
  6797  000C68  5181               	movf	sprintf@c& (0+255),w,b
  6798  000C6A  0D04               	mullw	4
  6799  000C6C  0EB7               	movlw	low _dpowers
  6800  000C6E  24F3               	addwf	prodl,w,c
  6801  000C70  6EF6               	movwf	tblptrl,c
  6802  000C72  0E7C               	movlw	high _dpowers
  6803  000C74  20F4               	addwfc	prodh,w,c
  6804  000C76  6EF7               	movwf	tblptrh,c
  6805  000C78  0009               	tblrd		*+
  6806  000C7A  50F5               	movf	tablat,w,c
  6807  000C7C  0100               	movlb	0	; () banked
  6808  000C7E  0100               	movlb	0	; () banked
  6809  000C80  5D82               	subwf	sprintf@_val& (0+255),w,b
  6810  000C82  0009               	tblrd		*+
  6811  000C84  50F5               	movf	tablat,w,c
  6812  000C86  0100               	movlb	0	; () banked
  6813  000C88  5983               	subwfb	(sprintf@_val+1)& (0+255),w,b
  6814  000C8A  0009               	tblrd		*+
  6815  000C8C  50F5               	movf	tablat,w,c
  6816  000C8E  0100               	movlb	0	; () banked
  6817  000C90  5984               	subwfb	(sprintf@_val+2)& (0+255),w,b
  6818  000C92  0009               	tblrd		*+
  6819  000C94  50F5               	movf	tablat,w,c
  6820  000C96  0100               	movlb	0	; () banked
  6821  000C98  5985               	subwfb	(sprintf@_val+3)& (0+255),w,b
  6822  000C9A  A0D8               	btfss	status,0,c
  6823  000C9C  D004               	goto	i2l9800
  6824                           
  6825                           ; BSR set to: 0
  6826                           
  6827                           ; BSR set to: 0
  6828                           
  6829                           ; BSR set to: 0
  6830                           ;doprnt.c: 1314: break;
  6831  000C9E  0100               	movlb	0	; () banked
  6832  000CA0  0100               	movlb	0	; () banked
  6833  000CA2  2B81               	incf	sprintf@c& (0+255),f,b
  6834  000CA4  D7D9               	goto	L9
  6835  000CA6                     i2l9800:
  6836                           
  6837                           ; BSR set to: 0
  6838                           ;doprnt.c: 1346: if(c < prec)
  6839  000CA6  0E80               	movlw	128
  6840  000CA8  0100               	movlb	0	; () banked
  6841  000CAA  0100               	movlb	0	; () banked
  6842  000CAC  BF81               	btfsc	sprintf@c& (0+255),7,b
  6843  000CAE  0E7F               	movlw	127
  6844  000CB0  6F60               	movwf	??_sprintf& (0+255),b
  6845  000CB2  0100               	movlb	0	; () banked
  6846  000CB4  0100               	movlb	0	; () banked
  6847  000CB6  517F               	movf	sprintf@prec& (0+255),w,b
  6848  000CB8  0100               	movlb	0	; () banked
  6849  000CBA  0100               	movlb	0	; () banked
  6850  000CBC  5D81               	subwf	sprintf@c& (0+255),w,b
  6851  000CBE  0100               	movlb	0	; () banked
  6852  000CC0  0100               	movlb	0	; () banked
  6853  000CC2  5180               	movf	(sprintf@prec+1)& (0+255),w,b
  6854  000CC4  0A80               	xorlw	128
  6855  000CC6  0100               	movlb	0	; () banked
  6856  000CC8  5960               	subwfb	??_sprintf& (0+255),w,b
  6857  000CCA  B0D8               	btfsc	status,0,c
  6858  000CCC  D003               	goto	i2l9804
  6859                           
  6860                           ; BSR set to: 0
  6861                           ;doprnt.c: 1347: c = prec;
  6862  000CCE  C07F  F081         	movff	sprintf@prec,sprintf@c
  6863  000CD2  D020               	goto	i2l9808
  6864  000CD4                     i2l9804:
  6865                           
  6866                           ; BSR set to: 0
  6867                           ;doprnt.c: 1348: else if(prec < c)
  6868  000CD4  0100               	movlb	0	; () banked
  6869  000CD6  0100               	movlb	0	; () banked
  6870  000CD8  5180               	movf	(sprintf@prec+1)& (0+255),w,b
  6871  000CDA  0A80               	xorlw	128
  6872  000CDC  0100               	movlb	0	; () banked
  6873  000CDE  6F60               	movwf	??_sprintf& (0+255),b
  6874  000CE0  0100               	movlb	0	; () banked
  6875  000CE2  0100               	movlb	0	; () banked
  6876  000CE4  5181               	movf	sprintf@c& (0+255),w,b
  6877  000CE6  0100               	movlb	0	; () banked
  6878  000CE8  0100               	movlb	0	; () banked
  6879  000CEA  5D7F               	subwf	sprintf@prec& (0+255),w,b
  6880  000CEC  0E80               	movlw	128
  6881  000CEE  0100               	movlb	0	; () banked
  6882  000CF0  0100               	movlb	0	; () banked
  6883  000CF2  BF81               	btfsc	sprintf@c& (0+255),7,b
  6884  000CF4  0E7F               	movlw	127
  6885  000CF6  0100               	movlb	0	; () banked
  6886  000CF8  5960               	subwfb	??_sprintf& (0+255),w,b
  6887  000CFA  B0D8               	btfsc	status,0,c
  6888  000CFC  D00B               	goto	i2l9808
  6889                           
  6890                           ; BSR set to: 0
  6891                           ;doprnt.c: 1349: prec = c;
  6892  000CFE  0100               	movlb	0	; () banked
  6893  000D00  0100               	movlb	0	; () banked
  6894  000D02  5181               	movf	sprintf@c& (0+255),w,b
  6895  000D04  0100               	movlb	0	; () banked
  6896  000D06  0100               	movlb	0	; () banked
  6897  000D08  6F7F               	movwf	sprintf@prec& (0+255),b
  6898  000D0A  0100               	movlb	0	; () banked
  6899  000D0C  6B80               	clrf	(sprintf@prec+1)& (0+255),b
  6900  000D0E  0100               	movlb	0	; () banked
  6901  000D10  BF7F               	btfsc	sprintf@prec& (0+255),7,b
  6902  000D12  0780               	decf	(sprintf@prec+1)& (0+255),f,b
  6903  000D14                     i2l9808:
  6904                           
  6905                           ; BSR set to: 0
  6906                           ;doprnt.c: 1352: if(width && flag & 0x03)
  6907  000D14  0100               	movlb	0	; () banked
  6908  000D16  0100               	movlb	0	; () banked
  6909  000D18  517E               	movf	(sprintf@width+1)& (0+255),w,b
  6910  000D1A  117D               	iorwf	sprintf@width& (0+255),w,b
  6911  000D1C  B4D8               	btfsc	status,2,c
  6912  000D1E  D016               	goto	i2l9814
  6913                           
  6914                           ; BSR set to: 0
  6915  000D20  0E03               	movlw	3
  6916  000D22  0100               	movlb	0	; () banked
  6917  000D24  0100               	movlb	0	; () banked
  6918  000D26  1578               	andwf	sprintf@flag& (0+255),w,b
  6919  000D28  0100               	movlb	0	; () banked
  6920  000D2A  6F60               	movwf	??_sprintf& (0+255),b
  6921  000D2C  0E00               	movlw	0
  6922  000D2E  0100               	movlb	0	; () banked
  6923  000D30  0100               	movlb	0	; () banked
  6924  000D32  1579               	andwf	(sprintf@flag+1)& (0+255),w,b
  6925  000D34  0100               	movlb	0	; () banked
  6926  000D36  6F61               	movwf	(??_sprintf+1)& (0+255),b
  6927  000D38  0100               	movlb	0	; () banked
  6928  000D3A  5161               	movf	(??_sprintf+1)& (0+255),w,b
  6929  000D3C  1160               	iorwf	??_sprintf& (0+255),w,b
  6930  000D3E  B4D8               	btfsc	status,2,c
  6931  000D40  D005               	goto	i2l9814
  6932                           
  6933                           ; BSR set to: 0
  6934                           ;doprnt.c: 1353: width--;
  6935  000D42  0100               	movlb	0	; () banked
  6936  000D44  0100               	movlb	0	; () banked
  6937  000D46  077D               	decf	sprintf@width& (0+255),f,b
  6938  000D48  A0D8               	btfss	status,0,c
  6939  000D4A  077E               	decf	(sprintf@width+1)& (0+255),f,b
  6940  000D4C                     i2l9814:
  6941                           
  6942                           ; BSR set to: 0
  6943                           ;doprnt.c: 1355: if(flag & 0x4000) {
  6944  000D4C  0100               	movlb	0	; () banked
  6945  000D4E  0100               	movlb	0	; () banked
  6946  000D50  AD79               	btfss	(sprintf@flag+1)& (0+255),6,b
  6947  000D52  D028               	goto	i2l9822
  6948                           
  6949                           ; BSR set to: 0
  6950                           ;doprnt.c: 1356: if(width > prec)
  6951  000D54  0100               	movlb	0	; () banked
  6952  000D56  0100               	movlb	0	; () banked
  6953  000D58  5180               	movf	(sprintf@prec+1)& (0+255),w,b
  6954  000D5A  0A80               	xorlw	128
  6955  000D5C  0100               	movlb	0	; () banked
  6956  000D5E  6F60               	movwf	??_sprintf& (0+255),b
  6957  000D60  0100               	movlb	0	; () banked
  6958  000D62  0100               	movlb	0	; () banked
  6959  000D64  517D               	movf	sprintf@width& (0+255),w,b
  6960  000D66  0100               	movlb	0	; () banked
  6961  000D68  0100               	movlb	0	; () banked
  6962  000D6A  5D7F               	subwf	sprintf@prec& (0+255),w,b
  6963  000D6C  0100               	movlb	0	; () banked
  6964  000D6E  0100               	movlb	0	; () banked
  6965  000D70  517E               	movf	(sprintf@width+1)& (0+255),w,b
  6966  000D72  0A80               	xorlw	128
  6967  000D74  0100               	movlb	0	; () banked
  6968  000D76  5960               	subwfb	??_sprintf& (0+255),w,b
  6969  000D78  B0D8               	btfsc	status,0,c
  6970  000D7A  D00D               	goto	i2l9820
  6971                           
  6972                           ; BSR set to: 0
  6973                           ;doprnt.c: 1357: width -= prec;
  6974  000D7C  0100               	movlb	0	; () banked
  6975  000D7E  0100               	movlb	0	; () banked
  6976  000D80  517F               	movf	sprintf@prec& (0+255),w,b
  6977  000D82  0100               	movlb	0	; () banked
  6978  000D84  0100               	movlb	0	; () banked
  6979  000D86  5F7D               	subwf	sprintf@width& (0+255),f,b
  6980  000D88  0100               	movlb	0	; () banked
  6981  000D8A  0100               	movlb	0	; () banked
  6982  000D8C  5180               	movf	(sprintf@prec+1)& (0+255),w,b
  6983  000D8E  0100               	movlb	0	; () banked
  6984  000D90  0100               	movlb	0	; () banked
  6985  000D92  5B7E               	subwfb	(sprintf@width+1)& (0+255),f,b
  6986  000D94  D007               	goto	i2l9822
  6987  000D96                     i2l9820:
  6988                           
  6989                           ; BSR set to: 0
  6990                           ;doprnt.c: 1358: else
  6991                           ;doprnt.c: 1359: width = 0;
  6992  000D96  0E00               	movlw	0
  6993  000D98  0100               	movlb	0	; () banked
  6994  000D9A  0100               	movlb	0	; () banked
  6995  000D9C  6F7E               	movwf	(sprintf@width+1)& (0+255),b
  6996  000D9E  0E00               	movlw	0
  6997  000DA0  0100               	movlb	0	; () banked
  6998  000DA2  6F7D               	movwf	sprintf@width& (0+255),b
  6999  000DA4                     i2l9822:
  7000                           
  7001                           ; BSR set to: 0
  7002                           ;doprnt.c: 1360: }
  7003                           ;doprnt.c: 1388: if(width > c)
  7004  000DA4  0E80               	movlw	128
  7005  000DA6  0100               	movlb	0	; () banked
  7006  000DA8  0100               	movlb	0	; () banked
  7007  000DAA  BF81               	btfsc	sprintf@c& (0+255),7,b
  7008  000DAC  0E7F               	movlw	127
  7009  000DAE  6F60               	movwf	??_sprintf& (0+255),b
  7010  000DB0  0100               	movlb	0	; () banked
  7011  000DB2  0100               	movlb	0	; () banked
  7012  000DB4  517D               	movf	sprintf@width& (0+255),w,b
  7013  000DB6  0100               	movlb	0	; () banked
  7014  000DB8  0100               	movlb	0	; () banked
  7015  000DBA  5D81               	subwf	sprintf@c& (0+255),w,b
  7016  000DBC  0100               	movlb	0	; () banked
  7017  000DBE  0100               	movlb	0	; () banked
  7018  000DC0  517E               	movf	(sprintf@width+1)& (0+255),w,b
  7019  000DC2  0A80               	xorlw	128
  7020  000DC4  0100               	movlb	0	; () banked
  7021  000DC6  5960               	subwfb	??_sprintf& (0+255),w,b
  7022  000DC8  B0D8               	btfsc	status,0,c
  7023  000DCA  D00E               	goto	i2l9826
  7024                           
  7025                           ; BSR set to: 0
  7026                           ;doprnt.c: 1389: width -= c;
  7027  000DCC  0100               	movlb	0	; () banked
  7028  000DCE  0100               	movlb	0	; () banked
  7029  000DD0  5181               	movf	sprintf@c& (0+255),w,b
  7030  000DD2  0100               	movlb	0	; () banked
  7031  000DD4  0100               	movlb	0	; () banked
  7032  000DD6  5F7D               	subwf	sprintf@width& (0+255),f,b
  7033  000DD8  0E00               	movlw	0
  7034  000DDA  0100               	movlb	0	; () banked
  7035  000DDC  BF81               	btfsc	sprintf@c& (0+255),7,b
  7036  000DDE  0EFF               	movlw	255
  7037  000DE0  0100               	movlb	0	; () banked
  7038  000DE2  0100               	movlb	0	; () banked
  7039  000DE4  5B7E               	subwfb	(sprintf@width+1)& (0+255),f,b
  7040  000DE6  D007               	goto	i2l9828
  7041  000DE8                     i2l9826:
  7042                           
  7043                           ; BSR set to: 0
  7044                           ;doprnt.c: 1390: else
  7045                           ;doprnt.c: 1391: width = 0;
  7046  000DE8  0E00               	movlw	0
  7047  000DEA  0100               	movlb	0	; () banked
  7048  000DEC  0100               	movlb	0	; () banked
  7049  000DEE  6F7E               	movwf	(sprintf@width+1)& (0+255),b
  7050  000DF0  0E00               	movlw	0
  7051  000DF2  0100               	movlb	0	; () banked
  7052  000DF4  6F7D               	movwf	sprintf@width& (0+255),b
  7053  000DF6                     i2l9828:
  7054                           
  7055                           ; BSR set to: 0
  7056                           ;doprnt.c: 1394: if(flag & 0x04) {
  7057  000DF6  0100               	movlb	0	; () banked
  7058  000DF8  0100               	movlb	0	; () banked
  7059  000DFA  A578               	btfss	sprintf@flag& (0+255),2,b
  7060  000DFC  D02D               	goto	i2l9844
  7061                           
  7062                           ; BSR set to: 0
  7063                           ;doprnt.c: 1399: if(flag & 0x03)
  7064  000DFE  0E03               	movlw	3
  7065  000E00  0100               	movlb	0	; () banked
  7066  000E02  0100               	movlb	0	; () banked
  7067  000E04  1578               	andwf	sprintf@flag& (0+255),w,b
  7068  000E06  0100               	movlb	0	; () banked
  7069  000E08  6F60               	movwf	??_sprintf& (0+255),b
  7070  000E0A  0E00               	movlw	0
  7071  000E0C  0100               	movlb	0	; () banked
  7072  000E0E  0100               	movlb	0	; () banked
  7073  000E10  1579               	andwf	(sprintf@flag+1)& (0+255),w,b
  7074  000E12  0100               	movlb	0	; () banked
  7075  000E14  6F61               	movwf	(??_sprintf+1)& (0+255),b
  7076  000E16  0100               	movlb	0	; () banked
  7077  000E18  5161               	movf	(??_sprintf+1)& (0+255),w,b
  7078  000E1A  1160               	iorwf	??_sprintf& (0+255),w,b
  7079  000E1C  B4D8               	btfsc	status,2,c
  7080  000E1E  D008               	goto	i2l9836
  7081                           
  7082                           ; BSR set to: 0
  7083                           ;doprnt.c: 1400: ((*sp++ = ('-')));
  7084  000E20  C050  FFD9         	movff	sprintf@sp,fsr2l
  7085  000E24  C051  FFDA         	movff	sprintf@sp+1,fsr2h
  7086  000E28  0E2D               	movlw	45
  7087  000E2A  6EDF               	movwf	indf2,c
  7088                           
  7089                           ; BSR set to: 0
  7090  000E2C  4A50               	infsnz	sprintf@sp,f,c
  7091  000E2E  2A51               	incf	sprintf@sp+1,f,c
  7092  000E30                     i2l9836:
  7093                           
  7094                           ; BSR set to: 0
  7095                           ;doprnt.c: 1422: if(width)
  7096  000E30  0100               	movlb	0	; () banked
  7097  000E32  0100               	movlb	0	; () banked
  7098  000E34  517E               	movf	(sprintf@width+1)& (0+255),w,b
  7099  000E36  117D               	iorwf	sprintf@width& (0+255),w,b
  7100  000E38  B4D8               	btfsc	status,2,c
  7101  000E3A  D089               	goto	i2l9864
  7102                           
  7103                           ; BSR set to: 0
  7104                           ;doprnt.c: 1424: ((*sp++ = ('0')));
  7105                           
  7106                           ; BSR set to: 0
  7107                           
  7108                           ;doprnt.c: 1423: do
  7109  000E3C  C050  FFD9         	movff	sprintf@sp,fsr2l
  7110  000E40  C051  FFDA         	movff	sprintf@sp+1,fsr2h
  7111  000E44  0E30               	movlw	48
  7112  000E46  6EDF               	movwf	indf2,c
  7113                           
  7114                           ; BSR set to: 0
  7115  000E48  4A50               	infsnz	sprintf@sp,f,c
  7116  000E4A  2A51               	incf	sprintf@sp+1,f,c
  7117                           
  7118                           ; BSR set to: 0
  7119                           ;doprnt.c: 1425: while(--width);
  7120  000E4C  0100               	movlb	0	; () banked
  7121  000E4E  0100               	movlb	0	; () banked
  7122  000E50  077D               	decf	sprintf@width& (0+255),f,b
  7123  000E52  A0D8               	btfss	status,0,c
  7124  000E54  077E               	decf	(sprintf@width+1)& (0+255),f,b
  7125  000E56  D7ED               	goto	L11
  7126  000E58                     i2l9844:
  7127                           
  7128                           ; BSR set to: 0
  7129                           ;doprnt.c: 1429: {
  7130                           ;doprnt.c: 1431: if(width
  7131                           ;doprnt.c: 1435: )
  7132  000E58  0100               	movlb	0	; () banked
  7133  000E5A  0100               	movlb	0	; () banked
  7134  000E5C  517E               	movf	(sprintf@width+1)& (0+255),w,b
  7135  000E5E  117D               	iorwf	sprintf@width& (0+255),w,b
  7136  000E60  B4D8               	btfsc	status,2,c
  7137  000E62  D012               	goto	i2l9852
  7138  000E64                     i2l9846:
  7139                           
  7140                           ; BSR set to: 0
  7141                           ;doprnt.c: 1437: ((*sp++ = (' ')));
  7142  000E64  C050  FFD9         	movff	sprintf@sp,fsr2l
  7143  000E68  C051  FFDA         	movff	sprintf@sp+1,fsr2h
  7144  000E6C  0E20               	movlw	32
  7145  000E6E  6EDF               	movwf	indf2,c
  7146                           
  7147                           ; BSR set to: 0
  7148  000E70  4A50               	infsnz	sprintf@sp,f,c
  7149  000E72  2A51               	incf	sprintf@sp+1,f,c
  7150                           
  7151                           ; BSR set to: 0
  7152                           ;doprnt.c: 1438: while(--width);
  7153  000E74  0100               	movlb	0	; () banked
  7154  000E76  0100               	movlb	0	; () banked
  7155  000E78  077D               	decf	sprintf@width& (0+255),f,b
  7156  000E7A  A0D8               	btfss	status,0,c
  7157  000E7C  077E               	decf	(sprintf@width+1)& (0+255),f,b
  7158  000E7E  0100               	movlb	0	; () banked
  7159  000E80  517E               	movf	(sprintf@width+1)& (0+255),w,b
  7160  000E82  117D               	iorwf	sprintf@width& (0+255),w,b
  7161  000E84  A4D8               	btfss	status,2,c
  7162  000E86  D7EE               	goto	i2l9846
  7163  000E88                     i2l9852:
  7164                           
  7165                           ; BSR set to: 0
  7166                           ;doprnt.c: 1445: if(flag & 0x03)
  7167  000E88  0E03               	movlw	3
  7168  000E8A  0100               	movlb	0	; () banked
  7169  000E8C  0100               	movlb	0	; () banked
  7170  000E8E  1578               	andwf	sprintf@flag& (0+255),w,b
  7171  000E90  0100               	movlb	0	; () banked
  7172  000E92  6F60               	movwf	??_sprintf& (0+255),b
  7173  000E94  0E00               	movlw	0
  7174  000E96  0100               	movlb	0	; () banked
  7175  000E98  0100               	movlb	0	; () banked
  7176  000E9A  1579               	andwf	(sprintf@flag+1)& (0+255),w,b
  7177  000E9C  0100               	movlb	0	; () banked
  7178  000E9E  6F61               	movwf	(??_sprintf+1)& (0+255),b
  7179  000EA0  0100               	movlb	0	; () banked
  7180  000EA2  5161               	movf	(??_sprintf+1)& (0+255),w,b
  7181  000EA4  1160               	iorwf	??_sprintf& (0+255),w,b
  7182  000EA6  B4D8               	btfsc	status,2,c
  7183  000EA8  D052               	goto	i2l9864
  7184                           
  7185                           ; BSR set to: 0
  7186                           ;doprnt.c: 1446: ((*sp++ = ('-')));
  7187  000EAA  C050  FFD9         	movff	sprintf@sp,fsr2l
  7188  000EAE  C051  FFDA         	movff	sprintf@sp+1,fsr2h
  7189  000EB2  0E2D               	movlw	45
  7190  000EB4  6EDF               	movwf	indf2,c
  7191  000EB6  D049               	goto	L10
  7192  000EB8                     i2l9858:
  7193                           
  7194                           ; BSR set to: 0
  7195                           ;doprnt.c: 1485: {
  7196                           ;doprnt.c: 1496: c = (_val._val / dpowers[prec]) % 10 + '0';
  7197  000EB8  0100               	movlb	0	; () banked
  7198  000EBA  C07F  F060         	movff	sprintf@prec,??_sprintf
  7199  000EBE  0100               	movlb	0	; () banked
  7200  000EC0  C080  F061         	movff	sprintf@prec+1,??_sprintf+1
  7201  000EC4  0100               	movlb	0	; () banked
  7202  000EC6  90D8               	bcf	status,0,c
  7203  000EC8  3760               	rlcf	??_sprintf& (0+255),f,b
  7204  000ECA  3761               	rlcf	(??_sprintf+1)& (0+255),f,b
  7205  000ECC  0100               	movlb	0	; () banked
  7206  000ECE  90D8               	bcf	status,0,c
  7207  000ED0  3760               	rlcf	??_sprintf& (0+255),f,b
  7208  000ED2  3761               	rlcf	(??_sprintf+1)& (0+255),f,b
  7209  000ED4  0EB7               	movlw	low _dpowers
  7210  000ED6  0100               	movlb	0	; () banked
  7211  000ED8  2560               	addwf	??_sprintf& (0+255),w,b
  7212  000EDA  6EF6               	movwf	tblptrl,c
  7213  000EDC  0E7C               	movlw	high _dpowers
  7214  000EDE  2161               	addwfc	(??_sprintf+1)& (0+255),w,b
  7215  000EE0  6EF7               	movwf	tblptrh,c
  7216  000EE2  0009               	tblrd		*+
  7217  000EE4  CFF5 F005          	movff	tablat,?___lldiv+4
  7218  000EE8  0009               	tblrd		*+
  7219  000EEA  CFF5 F006          	movff	tablat,?___lldiv+5
  7220  000EEE  0009               	tblrd		*+
  7221  000EF0  CFF5 F007          	movff	tablat,?___lldiv+6
  7222  000EF4  000A               	tblrd		*-
  7223  000EF6  CFF5 F008          	movff	tablat,?___lldiv+7
  7224  000EFA  C082  F001         	movff	sprintf@_val,?___lldiv
  7225  000EFE  C083  F002         	movff	sprintf@_val+1,?___lldiv+1
  7226  000F02  C084  F003         	movff	sprintf@_val+2,?___lldiv+2
  7227  000F06  C085  F004         	movff	sprintf@_val+3,?___lldiv+3
  7228  000F0A  EC79  F018         	call	___lldiv	;wreg free
  7229  000F0E  C004  F012         	movff	?___lldiv+3,?___llmod+3
  7230  000F12  C003  F011         	movff	?___lldiv+2,?___llmod+2
  7231  000F16  C002  F010         	movff	?___lldiv+1,?___llmod+1
  7232  000F1A  C001  F00F         	movff	?___lldiv,?___llmod
  7233  000F1E  0E0A               	movlw	10
  7234  000F20  6E13               	movwf	?___llmod+4,c
  7235  000F22  0E00               	movlw	0
  7236  000F24  6E14               	movwf	?___llmod+5,c
  7237  000F26  0E00               	movlw	0
  7238  000F28  6E15               	movwf	?___llmod+6,c
  7239  000F2A  0E00               	movlw	0
  7240  000F2C  6E16               	movwf	?___llmod+7,c
  7241  000F2E  ECA1  F019         	call	___llmod	;wreg free
  7242  000F32  500F               	movf	?___llmod,w,c
  7243  000F34  0F30               	addlw	48
  7244  000F36  0100               	movlb	0	; () banked
  7245  000F38  0100               	movlb	0	; () banked
  7246  000F3A  6F81               	movwf	sprintf@c& (0+255),b
  7247                           
  7248                           ; BSR set to: 0
  7249                           ;doprnt.c: 1530: }
  7250                           ;doprnt.c: 1531: ((*sp++ = (c)));
  7251  000F3C  C050  FFD9         	movff	sprintf@sp,fsr2l
  7252  000F40  C051  FFDA         	movff	sprintf@sp+1,fsr2h
  7253  000F44  0100               	movlb	0	; () banked
  7254  000F46  C081  FFDF         	movff	sprintf@c,indf2
  7255  000F4A                     L10:
  7256                           
  7257                           ; BSR set to: 0
  7258  000F4A  4A50               	infsnz	sprintf@sp,f,c
  7259  000F4C  2A51               	incf	sprintf@sp+1,f,c
  7260  000F4E                     i2l9864:
  7261                           
  7262                           ; BSR set to: 0
  7263  000F4E  0100               	movlb	0	; () banked
  7264  000F50  0100               	movlb	0	; () banked
  7265  000F52  077F               	decf	sprintf@prec& (0+255),f,b
  7266  000F54  A0D8               	btfss	status,0,c
  7267  000F56  0780               	decf	(sprintf@prec+1)& (0+255),f,b
  7268  000F58  0100               	movlb	0	; () banked
  7269  000F5A  297F               	incf	sprintf@prec& (0+255),w,b
  7270  000F5C  B4D8               	btfsc	status,2,c
  7271  000F5E  2980               	incf	(sprintf@prec+1)& (0+255),w,b
  7272  000F60  A4D8               	btfss	status,2,c
  7273  000F62  D7AA               	goto	i2l9858
  7274  000F64                     i2l9866:
  7275                           
  7276                           ; BSR set to: 0
  7277  000F64  C052  FFF6         	movff	sprintf@f,tblptrl
  7278  000F68  C053  FFF7         	movff	sprintf@f+1,tblptrh
  7279  000F6C  4A52               	infsnz	sprintf@f,f,c
  7280  000F6E  2A53               	incf	sprintf@f+1,f,c
  7281  000F70  0008               	tblrd		*
  7282  000F72  0100               	movlb	0	; () banked
  7283  000F74  CFF5 F081          	movff	tablat,sprintf@c
  7284  000F78  0100               	movlb	0	; () banked
  7285  000F7A  6781               	tstfsz	sprintf@c& (0+255),b
  7286  000F7C  EF17  F000         	goto	i2l9474
  7287  000F80                     i2l9868:
  7288                           
  7289                           ; BSR set to: 0
  7290                           ;doprnt.c: 1545: *sp = 0;
  7291  000F80  C050  FFD9         	movff	sprintf@sp,fsr2l
  7292  000F84  C051  FFDA         	movff	sprintf@sp+1,fsr2h
  7293  000F88  0E00               	movlw	0
  7294  000F8A  6EDF               	movwf	indf2,c
  7295                           
  7296                           ; BSR set to: 0
  7297                           
  7298                           ; BSR set to: 0
  7299                           ;doprnt.c: 1547: return 0;
  7300                           ;	Return value of _sprintf is never used
  7301  000F8C  0012               	return	
  7302  000F8E                     __end_of_sprintf:
  7303                           	opt stack 0
  7304                           tosu	equ	0xFFF
  7305                           tosh	equ	0xFFE
  7306                           tosl	equ	0xFFD
  7307                           pclatu	equ	0xFFB
  7308                           pclath	equ	0xFFA
  7309                           tblptru	equ	0xFF8
  7310                           tblptrh	equ	0xFF7
  7311                           tblptrl	equ	0xFF6
  7312                           tablat	equ	0xFF5
  7313                           prodh	equ	0xFF4
  7314                           prodl	equ	0xFF3
  7315                           intcon	equ	0xFF2
  7316                           intcon2	equ	0xFF1
  7317                           indf0	equ	0xFEF
  7318                           postinc0	equ	0xFEE
  7319                           fsr0h	equ	0xFEA
  7320                           fsr0l	equ	0xFE9
  7321                           wreg	equ	0xFE8
  7322                           postinc1	equ	0xFE6
  7323                           postdec1	equ	0xFE5
  7324                           fsr1h	equ	0xFE2
  7325                           fsr1l	equ	0xFE1
  7326                           indf2	equ	0xFDF
  7327                           postinc2	equ	0xFDE
  7328                           postdec2	equ	0xFDD
  7329                           plusw2	equ	0xFDB
  7330                           fsr2h	equ	0xFDA
  7331                           fsr2l	equ	0xFD9
  7332                           status	equ	0xFD8
  7333                           
  7334 ;; *************** function ___lltoft *****************
  7335 ;; Defined at:
  7336 ;;		line 36 in file "/usr/opt/microchip/xc8/v1.20/sources/common/lltoft.c"
  7337 ;; Parameters:    Size  Location     Type
  7338 ;;  c               4    8[COMRAM] unsigned long 
  7339 ;; Auto vars:     Size  Location     Type
  7340 ;;  exp             1   16[COMRAM] unsigned char 
  7341 ;; Return value:  Size  Location     Type
  7342 ;;                  3    8[COMRAM] float 
  7343 ;; Registers used:
  7344 ;;		wreg, status,2, status,0, cstack
  7345 ;; Tracked objects:
  7346 ;;		On entry : 0/0
  7347 ;;		On exit  : 0/0
  7348 ;;		Unchanged: 0/0
  7349 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7350 ;;      Params:         4       0       0       0       0       0       0       0       0
  7351 ;;      Locals:         1       0       0       0       0       0       0       0       0
  7352 ;;      Temps:          4       0       0       0       0       0       0       0       0
  7353 ;;      Totals:         9       0       0       0       0       0       0       0       0
  7354 ;;Total ram usage:        9 bytes
  7355 ;; Hardware stack levels used:    1
  7356 ;; Hardware stack levels required when called:    1
  7357 ;; This function calls:
  7358 ;;		___ftpack
  7359 ;; This function is called by:
  7360 ;;		_sprintf
  7361 ;; This function uses a non-reentrant model
  7362 ;;
  7363                           
  7364                           	psect	text23
  7365  003410                     __ptext23:
  7366                           	opt stack 0
  7367  003410                     ___lltoft:
  7368                           	opt stack 21
  7369                           
  7370                           ; BSR set to: 0
  7371                           ;incstack = 0
  7372                           ;incstack = 0
  7373  003410  6E0D               	movwf	??___lltoft& (0+255),c
  7374  003412  0E8E               	movlw	142
  7375  003414  6E11               	movwf	___lltoft@exp,c
  7376  003416  500D               	movf	??___lltoft& (0+255),w,c
  7377  003418  D006               	goto	i2l9042
  7378  00341A                     i2l9040:
  7379  00341A  90D8               	bcf	status,0,c
  7380  00341C  320C               	rrcf	___lltoft@c+3,f,c
  7381  00341E  320B               	rrcf	___lltoft@c+2,f,c
  7382  003420  320A               	rrcf	___lltoft@c+1,f,c
  7383  003422  3209               	rrcf	___lltoft@c,f,c
  7384  003424  2A11               	incf	___lltoft@exp,f,c
  7385  003426                     i2l9042:
  7386  003426  0E00               	movlw	0
  7387  003428  1409               	andwf	___lltoft@c,w,c
  7388  00342A  6E0D               	movwf	??___lltoft& (0+255),c
  7389  00342C  0E00               	movlw	0
  7390  00342E  140A               	andwf	___lltoft@c+1,w,c
  7391  003430  6E0E               	movwf	(??___lltoft+1)& (0+255),c
  7392  003432  0E00               	movlw	0
  7393  003434  140B               	andwf	___lltoft@c+2,w,c
  7394  003436  6E0F               	movwf	(??___lltoft+2)& (0+255),c
  7395  003438  0EFF               	movlw	255
  7396  00343A  140C               	andwf	___lltoft@c+3,w,c
  7397  00343C  6E10               	movwf	(??___lltoft+3)& (0+255),c
  7398  00343E  5010               	movf	??___lltoft+3,w,c
  7399  003440  100D               	iorwf	??___lltoft,w,c
  7400  003442  100E               	iorwf	??___lltoft+1,w,c
  7401  003444  100F               	iorwf	??___lltoft+2,w,c
  7402  003446  A4D8               	btfss	status,2,c
  7403  003448  D7E8               	goto	i2l9040
  7404  00344A  C009  F001         	movff	___lltoft@c,?___ftpack
  7405  00344E  C00A  F002         	movff	___lltoft@c+1,?___ftpack+1
  7406  003452  C00B  F003         	movff	___lltoft@c+2,?___ftpack+2
  7407  003456  C011  F004         	movff	___lltoft@exp,?___ftpack+3
  7408  00345A  6E0D               	movwf	??___lltoft& (0+255),c
  7409  00345C  0E00               	movlw	0
  7410  00345E  6E05               	movwf	?___ftpack+4,c
  7411  003460  500D               	movf	??___lltoft& (0+255),w,c
  7412  003462  EC48  F016         	call	___ftpack	;wreg free
  7413  003466  C003  F00B         	movff	?___ftpack+2,?___lltoft+2
  7414  00346A  C002  F00A         	movff	?___ftpack+1,?___lltoft+1
  7415  00346E  C001  F009         	movff	?___ftpack,?___lltoft
  7416  003472  0012               	return	
  7417  003474                     __end_of___lltoft:
  7418                           	opt stack 0
  7419                           tosu	equ	0xFFF
  7420                           tosh	equ	0xFFE
  7421                           tosl	equ	0xFFD
  7422                           pclatu	equ	0xFFB
  7423                           pclath	equ	0xFFA
  7424                           tblptru	equ	0xFF8
  7425                           tblptrh	equ	0xFF7
  7426                           tblptrl	equ	0xFF6
  7427                           tablat	equ	0xFF5
  7428                           prodh	equ	0xFF4
  7429                           prodl	equ	0xFF3
  7430                           intcon	equ	0xFF2
  7431                           intcon2	equ	0xFF1
  7432                           indf0	equ	0xFEF
  7433                           postinc0	equ	0xFEE
  7434                           fsr0h	equ	0xFEA
  7435                           fsr0l	equ	0xFE9
  7436                           wreg	equ	0xFE8
  7437                           postinc1	equ	0xFE6
  7438                           postdec1	equ	0xFE5
  7439                           fsr1h	equ	0xFE2
  7440                           fsr1l	equ	0xFE1
  7441                           indf2	equ	0xFDF
  7442                           postinc2	equ	0xFDE
  7443                           postdec2	equ	0xFDD
  7444                           plusw2	equ	0xFDB
  7445                           fsr2h	equ	0xFDA
  7446                           fsr2l	equ	0xFD9
  7447                           status	equ	0xFD8
  7448                           
  7449 ;; *************** function ___llmod *****************
  7450 ;; Defined at:
  7451 ;;		line 10 in file "/usr/opt/microchip/xc8/v1.20/sources/common/llmod.c"
  7452 ;; Parameters:    Size  Location     Type
  7453 ;;  dividend        4   14[COMRAM] unsigned long 
  7454 ;;  divisor         4   18[COMRAM] unsigned long 
  7455 ;; Auto vars:     Size  Location     Type
  7456 ;;  counter         1   23[COMRAM] unsigned char 
  7457 ;; Return value:  Size  Location     Type
  7458 ;;                  4   14[COMRAM] unsigned long 
  7459 ;; Registers used:
  7460 ;;		wreg, status,2, status,0
  7461 ;; Tracked objects:
  7462 ;;		On entry : 0/0
  7463 ;;		On exit  : 0/0
  7464 ;;		Unchanged: 0/0
  7465 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7466 ;;      Params:         8       0       0       0       0       0       0       0       0
  7467 ;;      Locals:         1       0       0       0       0       0       0       0       0
  7468 ;;      Temps:          1       0       0       0       0       0       0       0       0
  7469 ;;      Totals:        10       0       0       0       0       0       0       0       0
  7470 ;;Total ram usage:       10 bytes
  7471 ;; Hardware stack levels used:    1
  7472 ;; This function calls:
  7473 ;;		Nothing
  7474 ;; This function is called by:
  7475 ;;		_sprintf
  7476 ;;		_dayOfWeek
  7477 ;; This function uses a non-reentrant model
  7478 ;;
  7479                           
  7480                           	psect	text24
  7481  003342                     __ptext24:
  7482                           	opt stack 0
  7483  003342                     ___llmod:
  7484                           	opt stack 22
  7485                           
  7486                           ;incstack = 0
  7487                           ;incstack = 0
  7488  003342  5016               	movf	___llmod@divisor+3,w,c
  7489  003344  1013               	iorwf	___llmod@divisor,w,c
  7490  003346  1014               	iorwf	___llmod@divisor+1,w,c
  7491  003348  1015               	iorwf	___llmod@divisor+2,w,c
  7492  00334A  B4D8               	btfsc	status,2,c
  7493  00334C  D026               	goto	i2l1111
  7494  00334E  6E17               	movwf	??___llmod& (0+255),c
  7495  003350  0E01               	movlw	1
  7496  003352  6E18               	movwf	___llmod@counter,c
  7497  003354  5017               	movf	??___llmod& (0+255),w,c
  7498  003356  D006               	goto	i2l9028
  7499  003358                     i2l9026:
  7500  003358  90D8               	bcf	status,0,c
  7501  00335A  3613               	rlcf	___llmod@divisor,f,c
  7502  00335C  3614               	rlcf	___llmod@divisor+1,f,c
  7503  00335E  3615               	rlcf	___llmod@divisor+2,f,c
  7504  003360  3616               	rlcf	___llmod@divisor+3,f,c
  7505  003362  2A18               	incf	___llmod@counter,f,c
  7506  003364                     i2l9028:
  7507  003364  AE16               	btfss	___llmod@divisor+3,7,c
  7508  003366  D7F8               	goto	i2l9026
  7509  003368                     i2l9030:
  7510  003368  5013               	movf	___llmod@divisor,w,c
  7511  00336A  5C0F               	subwf	___llmod@dividend,w,c
  7512  00336C  5014               	movf	___llmod@divisor+1,w,c
  7513  00336E  5810               	subwfb	___llmod@dividend+1,w,c
  7514  003370  5015               	movf	___llmod@divisor+2,w,c
  7515  003372  5811               	subwfb	___llmod@dividend+2,w,c
  7516  003374  5016               	movf	___llmod@divisor+3,w,c
  7517  003376  5812               	subwfb	___llmod@dividend+3,w,c
  7518  003378  A0D8               	btfss	status,0,c
  7519  00337A  D008               	goto	i2l9034
  7520  00337C  5013               	movf	___llmod@divisor,w,c
  7521  00337E  5E0F               	subwf	___llmod@dividend,f,c
  7522  003380  5014               	movf	___llmod@divisor+1,w,c
  7523  003382  5A10               	subwfb	___llmod@dividend+1,f,c
  7524  003384  5015               	movf	___llmod@divisor+2,w,c
  7525  003386  5A11               	subwfb	___llmod@dividend+2,f,c
  7526  003388  5016               	movf	___llmod@divisor+3,w,c
  7527  00338A  5A12               	subwfb	___llmod@dividend+3,f,c
  7528  00338C                     i2l9034:
  7529  00338C  90D8               	bcf	status,0,c
  7530  00338E  3216               	rrcf	___llmod@divisor+3,f,c
  7531  003390  3215               	rrcf	___llmod@divisor+2,f,c
  7532  003392  3214               	rrcf	___llmod@divisor+1,f,c
  7533  003394  3213               	rrcf	___llmod@divisor,f,c
  7534  003396  2E18               	decfsz	___llmod@counter,f,c
  7535  003398  D7E7               	goto	i2l9030
  7536  00339A                     i2l1111:
  7537  00339A  C00F  F00F         	movff	___llmod@dividend,?___llmod
  7538  00339E  C010  F010         	movff	___llmod@dividend+1,?___llmod+1
  7539  0033A2  C011  F011         	movff	___llmod@dividend+2,?___llmod+2
  7540  0033A6  C012  F012         	movff	___llmod@dividend+3,?___llmod+3
  7541  0033AA  0012               	return	
  7542  0033AC                     __end_of___llmod:
  7543                           	opt stack 0
  7544                           tosu	equ	0xFFF
  7545                           tosh	equ	0xFFE
  7546                           tosl	equ	0xFFD
  7547                           pclatu	equ	0xFFB
  7548                           pclath	equ	0xFFA
  7549                           tblptru	equ	0xFF8
  7550                           tblptrh	equ	0xFF7
  7551                           tblptrl	equ	0xFF6
  7552                           tablat	equ	0xFF5
  7553                           prodh	equ	0xFF4
  7554                           prodl	equ	0xFF3
  7555                           intcon	equ	0xFF2
  7556                           intcon2	equ	0xFF1
  7557                           indf0	equ	0xFEF
  7558                           postinc0	equ	0xFEE
  7559                           fsr0h	equ	0xFEA
  7560                           fsr0l	equ	0xFE9
  7561                           wreg	equ	0xFE8
  7562                           postinc1	equ	0xFE6
  7563                           postdec1	equ	0xFE5
  7564                           fsr1h	equ	0xFE2
  7565                           fsr1l	equ	0xFE1
  7566                           indf2	equ	0xFDF
  7567                           postinc2	equ	0xFDE
  7568                           postdec2	equ	0xFDD
  7569                           plusw2	equ	0xFDB
  7570                           fsr2h	equ	0xFDA
  7571                           fsr2l	equ	0xFD9
  7572                           status	equ	0xFD8
  7573                           
  7574 ;; *************** function ___lldiv *****************
  7575 ;; Defined at:
  7576 ;;		line 10 in file "/usr/opt/microchip/xc8/v1.20/sources/common/lldiv.c"
  7577 ;; Parameters:    Size  Location     Type
  7578 ;;  dividend        4    0[COMRAM] unsigned long 
  7579 ;;  divisor         4    4[COMRAM] unsigned long 
  7580 ;; Auto vars:     Size  Location     Type
  7581 ;;  quotient        4   10[COMRAM] unsigned long 
  7582 ;;  counter         1    9[COMRAM] unsigned char 
  7583 ;; Return value:  Size  Location     Type
  7584 ;;                  4    0[COMRAM] unsigned long 
  7585 ;; Registers used:
  7586 ;;		wreg, status,2, status,0
  7587 ;; Tracked objects:
  7588 ;;		On entry : 0/0
  7589 ;;		On exit  : 0/0
  7590 ;;		Unchanged: 0/0
  7591 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7592 ;;      Params:         8       0       0       0       0       0       0       0       0
  7593 ;;      Locals:         5       0       0       0       0       0       0       0       0
  7594 ;;      Temps:          1       0       0       0       0       0       0       0       0
  7595 ;;      Totals:        14       0       0       0       0       0       0       0       0
  7596 ;;Total ram usage:       14 bytes
  7597 ;; Hardware stack levels used:    1
  7598 ;; This function calls:
  7599 ;;		Nothing
  7600 ;; This function is called by:
  7601 ;;		_sprintf
  7602 ;; This function uses a non-reentrant model
  7603 ;;
  7604                           
  7605                           	psect	text25
  7606  0030F2                     __ptext25:
  7607                           	opt stack 0
  7608  0030F2                     ___lldiv:
  7609                           	opt stack 22
  7610                           
  7611                           ;incstack = 0
  7612                           ;incstack = 0
  7613  0030F2  0E00               	movlw	0
  7614  0030F4  6E0B               	movwf	___lldiv@quotient,c
  7615  0030F6  0E00               	movlw	0
  7616  0030F8  6E0C               	movwf	___lldiv@quotient+1,c
  7617  0030FA  0E00               	movlw	0
  7618  0030FC  6E0D               	movwf	___lldiv@quotient+2,c
  7619  0030FE  0E00               	movlw	0
  7620  003100  6E0E               	movwf	___lldiv@quotient+3,c
  7621  003102  5008               	movf	___lldiv@divisor+3,w,c
  7622  003104  1005               	iorwf	___lldiv@divisor,w,c
  7623  003106  1006               	iorwf	___lldiv@divisor+1,w,c
  7624  003108  1007               	iorwf	___lldiv@divisor+2,w,c
  7625  00310A  B4D8               	btfsc	status,2,c
  7626  00310C  D02C               	goto	i2l1101
  7627  00310E  6E09               	movwf	??___lldiv& (0+255),c
  7628  003110  0E01               	movlw	1
  7629  003112  6E0A               	movwf	___lldiv@counter,c
  7630  003114  5009               	movf	??___lldiv& (0+255),w,c
  7631  003116  D006               	goto	i2l8840
  7632  003118                     i2l8838:
  7633  003118  90D8               	bcf	status,0,c
  7634  00311A  3605               	rlcf	___lldiv@divisor,f,c
  7635  00311C  3606               	rlcf	___lldiv@divisor+1,f,c
  7636  00311E  3607               	rlcf	___lldiv@divisor+2,f,c
  7637  003120  3608               	rlcf	___lldiv@divisor+3,f,c
  7638  003122  2A0A               	incf	___lldiv@counter,f,c
  7639  003124                     i2l8840:
  7640  003124  AE08               	btfss	___lldiv@divisor+3,7,c
  7641  003126  D7F8               	goto	i2l8838
  7642  003128                     i2l8842:
  7643  003128  90D8               	bcf	status,0,c
  7644  00312A  360B               	rlcf	___lldiv@quotient,f,c
  7645  00312C  360C               	rlcf	___lldiv@quotient+1,f,c
  7646  00312E  360D               	rlcf	___lldiv@quotient+2,f,c
  7647  003130  360E               	rlcf	___lldiv@quotient+3,f,c
  7648  003132  5005               	movf	___lldiv@divisor,w,c
  7649  003134  5C01               	subwf	___lldiv@dividend,w,c
  7650  003136  5006               	movf	___lldiv@divisor+1,w,c
  7651  003138  5802               	subwfb	___lldiv@dividend+1,w,c
  7652  00313A  5007               	movf	___lldiv@divisor+2,w,c
  7653  00313C  5803               	subwfb	___lldiv@dividend+2,w,c
  7654  00313E  5008               	movf	___lldiv@divisor+3,w,c
  7655  003140  5804               	subwfb	___lldiv@dividend+3,w,c
  7656  003142  A0D8               	btfss	status,0,c
  7657  003144  D009               	goto	i2l8850
  7658  003146  5005               	movf	___lldiv@divisor,w,c
  7659  003148  5E01               	subwf	___lldiv@dividend,f,c
  7660  00314A  5006               	movf	___lldiv@divisor+1,w,c
  7661  00314C  5A02               	subwfb	___lldiv@dividend+1,f,c
  7662  00314E  5007               	movf	___lldiv@divisor+2,w,c
  7663  003150  5A03               	subwfb	___lldiv@dividend+2,f,c
  7664  003152  5008               	movf	___lldiv@divisor+3,w,c
  7665  003154  5A04               	subwfb	___lldiv@dividend+3,f,c
  7666  003156  800B               	bsf	___lldiv@quotient,0,c
  7667  003158                     i2l8850:
  7668  003158  90D8               	bcf	status,0,c
  7669  00315A  3208               	rrcf	___lldiv@divisor+3,f,c
  7670  00315C  3207               	rrcf	___lldiv@divisor+2,f,c
  7671  00315E  3206               	rrcf	___lldiv@divisor+1,f,c
  7672  003160  3205               	rrcf	___lldiv@divisor,f,c
  7673  003162  2E0A               	decfsz	___lldiv@counter,f,c
  7674  003164  D7E1               	goto	i2l8842
  7675  003166                     i2l1101:
  7676  003166  C00B  F001         	movff	___lldiv@quotient,?___lldiv
  7677  00316A  C00C  F002         	movff	___lldiv@quotient+1,?___lldiv+1
  7678  00316E  C00D  F003         	movff	___lldiv@quotient+2,?___lldiv+2
  7679  003172  C00E  F004         	movff	___lldiv@quotient+3,?___lldiv+3
  7680  003176  0012               	return	
  7681  003178                     __end_of___lldiv:
  7682                           	opt stack 0
  7683                           tosu	equ	0xFFF
  7684                           tosh	equ	0xFFE
  7685                           tosl	equ	0xFFD
  7686                           pclatu	equ	0xFFB
  7687                           pclath	equ	0xFFA
  7688                           tblptru	equ	0xFF8
  7689                           tblptrh	equ	0xFF7
  7690                           tblptrl	equ	0xFF6
  7691                           tablat	equ	0xFF5
  7692                           prodh	equ	0xFF4
  7693                           prodl	equ	0xFF3
  7694                           intcon	equ	0xFF2
  7695                           intcon2	equ	0xFF1
  7696                           indf0	equ	0xFEF
  7697                           postinc0	equ	0xFEE
  7698                           fsr0h	equ	0xFEA
  7699                           fsr0l	equ	0xFE9
  7700                           wreg	equ	0xFE8
  7701                           postinc1	equ	0xFE6
  7702                           postdec1	equ	0xFE5
  7703                           fsr1h	equ	0xFE2
  7704                           fsr1l	equ	0xFE1
  7705                           indf2	equ	0xFDF
  7706                           postinc2	equ	0xFDE
  7707                           postdec2	equ	0xFDD
  7708                           plusw2	equ	0xFDB
  7709                           fsr2h	equ	0xFDA
  7710                           fsr2l	equ	0xFD9
  7711                           status	equ	0xFD8
  7712                           
  7713 ;; *************** function ___fttol *****************
  7714 ;; Defined at:
  7715 ;;		line 45 in file "/usr/opt/microchip/xc8/v1.20/sources/common/fttol.c"
  7716 ;; Parameters:    Size  Location     Type
  7717 ;;  f1              3   22[COMRAM] float 
  7718 ;; Auto vars:     Size  Location     Type
  7719 ;;  lval            4   32[COMRAM] unsigned long 
  7720 ;;  exp1            1   36[COMRAM] unsigned char 
  7721 ;;  sign1           1   31[COMRAM] unsigned char 
  7722 ;; Return value:  Size  Location     Type
  7723 ;;                  4   22[COMRAM] long 
  7724 ;; Registers used:
  7725 ;;		wreg, status,2, status,0
  7726 ;; Tracked objects:
  7727 ;;		On entry : 0/0
  7728 ;;		On exit  : 0/0
  7729 ;;		Unchanged: 0/0
  7730 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7731 ;;      Params:         4       0       0       0       0       0       0       0       0
  7732 ;;      Locals:         6       0       0       0       0       0       0       0       0
  7733 ;;      Temps:          5       0       0       0       0       0       0       0       0
  7734 ;;      Totals:        15       0       0       0       0       0       0       0       0
  7735 ;;Total ram usage:       15 bytes
  7736 ;; Hardware stack levels used:    1
  7737 ;; This function calls:
  7738 ;;		Nothing
  7739 ;; This function is called by:
  7740 ;;		_sprintf
  7741 ;; This function uses a non-reentrant model
  7742 ;;
  7743                           
  7744                           	psect	text26
  7745  002AEA                     __ptext26:
  7746                           	opt stack 0
  7747  002AEA                     ___fttol:
  7748                           	opt stack 22
  7749                           
  7750                           ;incstack = 0
  7751                           ;incstack = 0
  7752  002AEA  0E0F               	movlw	15
  7753  002AEC  6E1B               	movwf	??___fttol& (0+255),c
  7754  002AEE  C017  F01C         	movff	___fttol@f1,??___fttol+1
  7755  002AF2  C018  F01D         	movff	___fttol@f1+1,??___fttol+2
  7756  002AF6  C019  F01E         	movff	___fttol@f1+2,??___fttol+3
  7757  002AFA  281B               	incf	??___fttol,w,c
  7758  002AFC  6E1F               	movwf	(??___fttol+4)& (0+255),c
  7759  002AFE  D004               	goto	i2u797_40
  7760  002B00                     i2u797_45:
  7761  002B00  90D8               	bcf	status,0,c
  7762  002B02  321E               	rrcf	??___fttol+3,f,c
  7763  002B04  321D               	rrcf	??___fttol+2,f,c
  7764  002B06  321C               	rrcf	??___fttol+1,f,c
  7765  002B08                     i2u797_40:
  7766  002B08  2E1F               	decfsz	(??___fttol+4)& (0+255),f,c
  7767  002B0A  D7FA               	goto	i2u797_45
  7768  002B0C  501C               	movf	??___fttol+1,w,c
  7769  002B0E  6E25               	movwf	___fttol@exp1,c
  7770  002B10  6625               	tstfsz	___fttol@exp1& (0+255),c
  7771  002B12  D001               	goto	i2l9182
  7772  002B14  D035               	goto	i2u802_40
  7773  002B16                     i2l9182:
  7774  002B16  0E17               	movlw	23
  7775  002B18  6E1B               	movwf	??___fttol& (0+255),c
  7776  002B1A  C017  F01C         	movff	___fttol@f1,??___fttol+1
  7777  002B1E  C018  F01D         	movff	___fttol@f1+1,??___fttol+2
  7778  002B22  C019  F01E         	movff	___fttol@f1+2,??___fttol+3
  7779  002B26  281B               	incf	??___fttol,w,c
  7780  002B28  6E1F               	movwf	(??___fttol+4)& (0+255),c
  7781  002B2A  D004               	goto	i2u799_40
  7782  002B2C                     i2u799_45:
  7783  002B2C  90D8               	bcf	status,0,c
  7784  002B2E  321E               	rrcf	??___fttol+3,f,c
  7785  002B30  321D               	rrcf	??___fttol+2,f,c
  7786  002B32  321C               	rrcf	??___fttol+1,f,c
  7787  002B34                     i2u799_40:
  7788  002B34  2E1F               	decfsz	(??___fttol+4)& (0+255),f,c
  7789  002B36  D7FA               	goto	i2u799_45
  7790  002B38  501C               	movf	??___fttol+1,w,c
  7791  002B3A  6E20               	movwf	___fttol@sign1,c
  7792  002B3C  8E18               	bsf	___fttol@f1+1,7,c
  7793  002B3E  0EFF               	movlw	255
  7794  002B40  1617               	andwf	___fttol@f1,f,c
  7795  002B42  0EFF               	movlw	255
  7796  002B44  1618               	andwf	___fttol@f1+1,f,c
  7797  002B46  0E00               	movlw	0
  7798  002B48  1619               	andwf	___fttol@f1+2,f,c
  7799  002B4A  5017               	movf	___fttol@f1,w,c
  7800  002B4C  6E21               	movwf	___fttol@lval,c
  7801  002B4E  5018               	movf	___fttol@f1+1,w,c
  7802  002B50  6E22               	movwf	___fttol@lval+1,c
  7803  002B52  5019               	movf	___fttol@f1+2,w,c
  7804  002B54  6E23               	movwf	___fttol@lval+2,c
  7805  002B56  6A24               	clrf	___fttol@lval+3,c
  7806  002B58  0E8E               	movlw	142
  7807  002B5A  5E25               	subwf	___fttol@exp1,f,c
  7808  002B5C  AE25               	btfss	___fttol@exp1,7,c
  7809  002B5E  D00D               	goto	i2l9204
  7810  002B60  5025               	movf	___fttol@exp1,w,c
  7811  002B62  0A80               	xorlw	128
  7812  002B64  0F8F               	addlw	143
  7813  002B66  A0D8               	btfss	status,0,c
  7814  002B68  D00B               	goto	i2u802_40
  7815  002B6A                     i2l9200:
  7816  002B6A  90D8               	bcf	status,0,c
  7817  002B6C  3224               	rrcf	___fttol@lval+3,f,c
  7818  002B6E  3223               	rrcf	___fttol@lval+2,f,c
  7819  002B70  3222               	rrcf	___fttol@lval+1,f,c
  7820  002B72  3221               	rrcf	___fttol@lval,f,c
  7821  002B74  3E25               	incfsz	___fttol@exp1,f,c
  7822  002B76  D7F9               	goto	i2l9200
  7823  002B78  D014               	goto	i2l9214
  7824  002B7A                     i2l9204:
  7825  002B7A  0E17               	movlw	23
  7826  002B7C  6425               	cpfsgt	___fttol@exp1,c
  7827  002B7E  D00F               	goto	i2l9212
  7828  002B80                     i2u802_40:
  7829  002B80  0E00               	movlw	0
  7830  002B82  6E17               	movwf	?___fttol,c
  7831  002B84  0E00               	movlw	0
  7832  002B86  6E18               	movwf	?___fttol+1,c
  7833  002B88  0E00               	movlw	0
  7834  002B8A  6E19               	movwf	?___fttol+2,c
  7835  002B8C  0E00               	movlw	0
  7836  002B8E  6E1A               	movwf	?___fttol+3,c
  7837  002B90  D01B               	goto	i2l1057
  7838  002B92                     i2l9210:
  7839  002B92  90D8               	bcf	status,0,c
  7840  002B94  3621               	rlcf	___fttol@lval,f,c
  7841  002B96  3622               	rlcf	___fttol@lval+1,f,c
  7842  002B98  3623               	rlcf	___fttol@lval+2,f,c
  7843  002B9A  3624               	rlcf	___fttol@lval+3,f,c
  7844  002B9C  0625               	decf	___fttol@exp1,f,c
  7845  002B9E                     i2l9212:
  7846  002B9E  6625               	tstfsz	___fttol@exp1,c
  7847  002BA0  D7F8               	goto	i2l9210
  7848  002BA2                     i2l9214:
  7849  002BA2  5020               	movf	___fttol@sign1,w,c
  7850  002BA4  B4D8               	btfsc	status,2,c
  7851  002BA6  D008               	goto	i2l9218
  7852  002BA8  1E24               	comf	___fttol@lval+3,f,c
  7853  002BAA  1E23               	comf	___fttol@lval+2,f,c
  7854  002BAC  1E22               	comf	___fttol@lval+1,f,c
  7855  002BAE  6C21               	negf	___fttol@lval,c
  7856  002BB0  0E00               	movlw	0
  7857  002BB2  2222               	addwfc	___fttol@lval+1,f,c
  7858  002BB4  2223               	addwfc	___fttol@lval+2,f,c
  7859  002BB6  2224               	addwfc	___fttol@lval+3,f,c
  7860  002BB8                     i2l9218:
  7861  002BB8  C021  F017         	movff	___fttol@lval,?___fttol
  7862  002BBC  C022  F018         	movff	___fttol@lval+1,?___fttol+1
  7863  002BC0  C023  F019         	movff	___fttol@lval+2,?___fttol+2
  7864  002BC4  C024  F01A         	movff	___fttol@lval+3,?___fttol+3
  7865  002BC8                     i2l1057:
  7866  002BC8  0012               	return	
  7867  002BCA                     __end_of___fttol:
  7868                           	opt stack 0
  7869                           tosu	equ	0xFFF
  7870                           tosh	equ	0xFFE
  7871                           tosl	equ	0xFFD
  7872                           pclatu	equ	0xFFB
  7873                           pclath	equ	0xFFA
  7874                           tblptru	equ	0xFF8
  7875                           tblptrh	equ	0xFF7
  7876                           tblptrl	equ	0xFF6
  7877                           tablat	equ	0xFF5
  7878                           prodh	equ	0xFF4
  7879                           prodl	equ	0xFF3
  7880                           intcon	equ	0xFF2
  7881                           intcon2	equ	0xFF1
  7882                           indf0	equ	0xFEF
  7883                           postinc0	equ	0xFEE
  7884                           fsr0h	equ	0xFEA
  7885                           fsr0l	equ	0xFE9
  7886                           wreg	equ	0xFE8
  7887                           postinc1	equ	0xFE6
  7888                           postdec1	equ	0xFE5
  7889                           fsr1h	equ	0xFE2
  7890                           fsr1l	equ	0xFE1
  7891                           indf2	equ	0xFDF
  7892                           postinc2	equ	0xFDE
  7893                           postdec2	equ	0xFDD
  7894                           plusw2	equ	0xFDB
  7895                           fsr2h	equ	0xFDA
  7896                           fsr2l	equ	0xFD9
  7897                           status	equ	0xFD8
  7898                           
  7899 ;; *************** function ___ftneg *****************
  7900 ;; Defined at:
  7901 ;;		line 16 in file "/usr/opt/microchip/xc8/v1.20/sources/common/ftneg.c"
  7902 ;; Parameters:    Size  Location     Type
  7903 ;;  f1              3    0[COMRAM] float 
  7904 ;; Auto vars:     Size  Location     Type
  7905 ;;		None
  7906 ;; Return value:  Size  Location     Type
  7907 ;;                  3    0[COMRAM] float 
  7908 ;; Registers used:
  7909 ;;		wreg, status,2, status,0
  7910 ;; Tracked objects:
  7911 ;;		On entry : 0/0
  7912 ;;		On exit  : 0/0
  7913 ;;		Unchanged: 0/0
  7914 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7915 ;;      Params:         3       0       0       0       0       0       0       0       0
  7916 ;;      Locals:         0       0       0       0       0       0       0       0       0
  7917 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7918 ;;      Totals:         3       0       0       0       0       0       0       0       0
  7919 ;;Total ram usage:        3 bytes
  7920 ;; Hardware stack levels used:    1
  7921 ;; This function calls:
  7922 ;;		Nothing
  7923 ;; This function is called by:
  7924 ;;		_sprintf
  7925 ;; This function uses a non-reentrant model
  7926 ;;
  7927                           
  7928                           	psect	text27
  7929  00384A                     __ptext27:
  7930                           	opt stack 0
  7931  00384A                     ___ftneg:
  7932                           	opt stack 22
  7933                           
  7934                           ;incstack = 0
  7935                           ;incstack = 0
  7936  00384A  0E7F               	movlw	127
  7937  00384C  1403               	andwf	___ftneg@f1+2,w,c
  7938  00384E  1002               	iorwf	___ftneg@f1+1,w,c
  7939  003850  1001               	iorwf	___ftneg@f1,w,c
  7940  003852  B4D8               	btfsc	status,2,c
  7941  003854  D006               	goto	i2l1047
  7942  003856  0E00               	movlw	0
  7943  003858  1A01               	xorwf	___ftneg@f1,f,c
  7944  00385A  0E00               	movlw	0
  7945  00385C  1A02               	xorwf	___ftneg@f1+1,f,c
  7946  00385E  0E80               	movlw	128
  7947  003860  1A03               	xorwf	___ftneg@f1+2,f,c
  7948  003862                     i2l1047:
  7949  003862  C001  F001         	movff	___ftneg@f1,?___ftneg
  7950  003866  C002  F002         	movff	___ftneg@f1+1,?___ftneg+1
  7951  00386A  C003  F003         	movff	___ftneg@f1+2,?___ftneg+2
  7952  00386E  0012               	return	
  7953  003870                     __end_of___ftneg:
  7954                           	opt stack 0
  7955                           tosu	equ	0xFFF
  7956                           tosh	equ	0xFFE
  7957                           tosl	equ	0xFFD
  7958                           pclatu	equ	0xFFB
  7959                           pclath	equ	0xFFA
  7960                           tblptru	equ	0xFF8
  7961                           tblptrh	equ	0xFF7
  7962                           tblptrl	equ	0xFF6
  7963                           tablat	equ	0xFF5
  7964                           prodh	equ	0xFF4
  7965                           prodl	equ	0xFF3
  7966                           intcon	equ	0xFF2
  7967                           intcon2	equ	0xFF1
  7968                           indf0	equ	0xFEF
  7969                           postinc0	equ	0xFEE
  7970                           fsr0h	equ	0xFEA
  7971                           fsr0l	equ	0xFE9
  7972                           wreg	equ	0xFE8
  7973                           postinc1	equ	0xFE6
  7974                           postdec1	equ	0xFE5
  7975                           fsr1h	equ	0xFE2
  7976                           fsr1l	equ	0xFE1
  7977                           indf2	equ	0xFDF
  7978                           postinc2	equ	0xFDE
  7979                           postdec2	equ	0xFDD
  7980                           plusw2	equ	0xFDB
  7981                           fsr2h	equ	0xFDA
  7982                           fsr2l	equ	0xFD9
  7983                           status	equ	0xFD8
  7984                           
  7985 ;; *************** function ___ftge *****************
  7986 ;; Defined at:
  7987 ;;		line 5 in file "/usr/opt/microchip/xc8/v1.20/sources/common/ftge.c"
  7988 ;; Parameters:    Size  Location     Type
  7989 ;;  ff1             3    0[COMRAM] float 
  7990 ;;  ff2             3    3[COMRAM] float 
  7991 ;; Auto vars:     Size  Location     Type
  7992 ;;		None
  7993 ;; Return value:  Size  Location     Type
  7994 ;;		None               void
  7995 ;; Registers used:
  7996 ;;		wreg, status,2, status,0
  7997 ;; Tracked objects:
  7998 ;;		On entry : 0/0
  7999 ;;		On exit  : 0/0
  8000 ;;		Unchanged: 0/0
  8001 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8002 ;;      Params:         6       0       0       0       0       0       0       0       0
  8003 ;;      Locals:         0       0       0       0       0       0       0       0       0
  8004 ;;      Temps:          3       0       0       0       0       0       0       0       0
  8005 ;;      Totals:         9       0       0       0       0       0       0       0       0
  8006 ;;Total ram usage:        9 bytes
  8007 ;; Hardware stack levels used:    1
  8008 ;; This function calls:
  8009 ;;		Nothing
  8010 ;; This function is called by:
  8011 ;;		_sprintf
  8012 ;; This function uses a non-reentrant model
  8013 ;;
  8014                           
  8015                           	psect	text28
  8016  002FD2                     __ptext28:
  8017                           	opt stack 0
  8018  002FD2                     ___ftge:
  8019                           	opt stack 22
  8020                           
  8021                           ;incstack = 0
  8022                           ;incstack = 0
  8023  002FD2  AE03               	btfss	___ftge@ff1+2,7,c
  8024  002FD4  D016               	goto	i2l8814
  8025  002FD6  C001  F007         	movff	___ftge@ff1,??___ftge
  8026  002FDA  C002  F008         	movff	___ftge@ff1+1,??___ftge+1
  8027  002FDE  C003  F009         	movff	___ftge@ff1+2,??___ftge+2
  8028  002FE2  1E07               	comf	??___ftge,f,c
  8029  002FE4  1E08               	comf	??___ftge+1,f,c
  8030  002FE6  1E09               	comf	??___ftge+2,f,c
  8031  002FE8  2A07               	incf	??___ftge,f,c
  8032  002FEA  0E00               	movlw	0
  8033  002FEC  2208               	addwfc	??___ftge+1,f,c
  8034  002FEE  2209               	addwfc	??___ftge+2,f,c
  8035  002FF0  0E00               	movlw	0
  8036  002FF2  2407               	addwf	??___ftge,w,c
  8037  002FF4  6E01               	movwf	___ftge@ff1,c
  8038  002FF6  0E00               	movlw	0
  8039  002FF8  2008               	addwfc	??___ftge+1,w,c
  8040  002FFA  6E02               	movwf	___ftge@ff1+1,c
  8041  002FFC  0E80               	movlw	128
  8042  002FFE  2009               	addwfc	??___ftge+2,w,c
  8043  003000  6E03               	movwf	___ftge@ff1+2,c
  8044  003002                     i2l8814:
  8045  003002  AE06               	btfss	___ftge@ff2+2,7,c
  8046  003004  D016               	goto	i2l8818
  8047  003006  C004  F007         	movff	___ftge@ff2,??___ftge
  8048  00300A  C005  F008         	movff	___ftge@ff2+1,??___ftge+1
  8049  00300E  C006  F009         	movff	___ftge@ff2+2,??___ftge+2
  8050  003012  1E07               	comf	??___ftge,f,c
  8051  003014  1E08               	comf	??___ftge+1,f,c
  8052  003016  1E09               	comf	??___ftge+2,f,c
  8053  003018  2A07               	incf	??___ftge,f,c
  8054  00301A  0E00               	movlw	0
  8055  00301C  2208               	addwfc	??___ftge+1,f,c
  8056  00301E  2209               	addwfc	??___ftge+2,f,c
  8057  003020  0E00               	movlw	0
  8058  003022  2407               	addwf	??___ftge,w,c
  8059  003024  6E04               	movwf	___ftge@ff2,c
  8060  003026  0E00               	movlw	0
  8061  003028  2008               	addwfc	??___ftge+1,w,c
  8062  00302A  6E05               	movwf	___ftge@ff2+1,c
  8063  00302C  0E80               	movlw	128
  8064  00302E  2009               	addwfc	??___ftge+2,w,c
  8065  003030  6E06               	movwf	___ftge@ff2+2,c
  8066  003032                     i2l8818:
  8067  003032  0E00               	movlw	0
  8068  003034  1A01               	xorwf	___ftge@ff1,f,c
  8069  003036  0E00               	movlw	0
  8070  003038  1A02               	xorwf	___ftge@ff1+1,f,c
  8071  00303A  0E80               	movlw	128
  8072  00303C  1A03               	xorwf	___ftge@ff1+2,f,c
  8073  00303E  0E00               	movlw	0
  8074  003040  1A04               	xorwf	___ftge@ff2,f,c
  8075  003042  0E00               	movlw	0
  8076  003044  1A05               	xorwf	___ftge@ff2+1,f,c
  8077  003046  0E80               	movlw	128
  8078  003048  1A06               	xorwf	___ftge@ff2+2,f,c
  8079  00304A  5004               	movf	___ftge@ff2,w,c
  8080  00304C  5C01               	subwf	___ftge@ff1,w,c
  8081  00304E  5005               	movf	___ftge@ff2+1,w,c
  8082  003050  5802               	subwfb	___ftge@ff1+1,w,c
  8083  003052  5006               	movf	___ftge@ff2+2,w,c
  8084  003054  5803               	subwfb	___ftge@ff1+2,w,c
  8085  003056  B0D8               	btfsc	status,0,c
  8086  003058  D002               	goto	i2l8824
  8087  00305A  90D8               	bcf	status,0,c
  8088  00305C  D001               	goto	i2l1031
  8089  00305E                     i2l8824:
  8090  00305E  80D8               	bsf	status,0,c
  8091  003060                     i2l1031:
  8092  003060  0012               	return	
  8093  003062                     __end_of___ftge:
  8094                           	opt stack 0
  8095                           tosu	equ	0xFFF
  8096                           tosh	equ	0xFFE
  8097                           tosl	equ	0xFFD
  8098                           pclatu	equ	0xFFB
  8099                           pclath	equ	0xFFA
  8100                           tblptru	equ	0xFF8
  8101                           tblptrh	equ	0xFF7
  8102                           tblptrl	equ	0xFF6
  8103                           tablat	equ	0xFF5
  8104                           prodh	equ	0xFF4
  8105                           prodl	equ	0xFF3
  8106                           intcon	equ	0xFF2
  8107                           intcon2	equ	0xFF1
  8108                           indf0	equ	0xFEF
  8109                           postinc0	equ	0xFEE
  8110                           fsr0h	equ	0xFEA
  8111                           fsr0l	equ	0xFE9
  8112                           wreg	equ	0xFE8
  8113                           postinc1	equ	0xFE6
  8114                           postdec1	equ	0xFE5
  8115                           fsr1h	equ	0xFE2
  8116                           fsr1l	equ	0xFE1
  8117                           indf2	equ	0xFDF
  8118                           postinc2	equ	0xFDE
  8119                           postdec2	equ	0xFDD
  8120                           plusw2	equ	0xFDB
  8121                           fsr2h	equ	0xFDA
  8122                           fsr2l	equ	0xFD9
  8123                           status	equ	0xFD8
  8124                           
  8125 ;; *************** function ___asftsub *****************
  8126 ;; Defined at:
  8127 ;;		line 5 in file "/usr/opt/microchip/xc8/v1.20/sources/pic18/asftsub.c"
  8128 ;; Parameters:    Size  Location     Type
  8129 ;;  f1p             2   74[COMRAM] PTR float 
  8130 ;;		 -> sprintf@fval(3), 
  8131 ;;  f2              3   76[COMRAM] float 
  8132 ;; Auto vars:     Size  Location     Type
  8133 ;;		None
  8134 ;; Return value:  Size  Location     Type
  8135 ;;                  3   74[COMRAM] float 
  8136 ;; Registers used:
  8137 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  8138 ;; Tracked objects:
  8139 ;;		On entry : 0/0
  8140 ;;		On exit  : 0/0
  8141 ;;		Unchanged: 0/0
  8142 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8143 ;;      Params:         5       0       0       0       0       0       0       0       0
  8144 ;;      Locals:         0       0       0       0       0       0       0       0       0
  8145 ;;      Temps:          0       0       0       0       0       0       0       0       0
  8146 ;;      Totals:         5       0       0       0       0       0       0       0       0
  8147 ;;Total ram usage:        5 bytes
  8148 ;; Hardware stack levels used:    1
  8149 ;; Hardware stack levels required when called:    3
  8150 ;; This function calls:
  8151 ;;		___ftsub
  8152 ;; This function is called by:
  8153 ;;		_sprintf
  8154 ;; This function uses a non-reentrant model
  8155 ;;
  8156                           
  8157                           	psect	text29
  8158  003642                     __ptext29:
  8159                           	opt stack 0
  8160  003642                     ___asftsub:
  8161                           	opt stack 19
  8162                           
  8163                           ;	Return value of ___asftsub is never used
  8164                           
  8165                           ;incstack = 0
  8166                           ;incstack = 0
  8167  003642  C04B  FFD9         	movff	___asftsub@f1p,fsr2l
  8168  003646  C04C  FFDA         	movff	___asftsub@f1p+1,fsr2h
  8169  00364A  CFDE F045          	movff	postinc2,?___ftsub
  8170  00364E  CFDE F046          	movff	postinc2,?___ftsub+1
  8171  003652  CFDD F047          	movff	postdec2,?___ftsub+2
  8172  003656  C04D  F048         	movff	___asftsub@f2,?___ftsub+3
  8173  00365A  C04E  F049         	movff	___asftsub@f2+1,?___ftsub+4
  8174  00365E  C04F  F04A         	movff	___asftsub@f2+2,?___ftsub+5
  8175  003662  ECB5  F01B         	call	___ftsub	;wreg free
  8176  003666  C04B  FFD9         	movff	___asftsub@f1p,fsr2l
  8177  00366A  C04C  FFDA         	movff	___asftsub@f1p+1,fsr2h
  8178  00366E  C045  FFDE         	movff	?___ftsub,postinc2
  8179  003672  C046  FFDE         	movff	?___ftsub+1,postinc2
  8180  003676  C047  FFDD         	movff	?___ftsub+2,postdec2
  8181  00367A  52DD               	movf	postdec2,f,c
  8182  00367C  0012               	return	
  8183  00367E                     __end_of___asftsub:
  8184                           	opt stack 0
  8185                           tosu	equ	0xFFF
  8186                           tosh	equ	0xFFE
  8187                           tosl	equ	0xFFD
  8188                           pclatu	equ	0xFFB
  8189                           pclath	equ	0xFFA
  8190                           tblptru	equ	0xFF8
  8191                           tblptrh	equ	0xFF7
  8192                           tblptrl	equ	0xFF6
  8193                           tablat	equ	0xFF5
  8194                           prodh	equ	0xFF4
  8195                           prodl	equ	0xFF3
  8196                           intcon	equ	0xFF2
  8197                           intcon2	equ	0xFF1
  8198                           indf0	equ	0xFEF
  8199                           postinc0	equ	0xFEE
  8200                           fsr0h	equ	0xFEA
  8201                           fsr0l	equ	0xFE9
  8202                           wreg	equ	0xFE8
  8203                           postinc1	equ	0xFE6
  8204                           postdec1	equ	0xFE5
  8205                           fsr1h	equ	0xFE2
  8206                           fsr1l	equ	0xFE1
  8207                           indf2	equ	0xFDF
  8208                           postinc2	equ	0xFDE
  8209                           postdec2	equ	0xFDD
  8210                           plusw2	equ	0xFDB
  8211                           fsr2h	equ	0xFDA
  8212                           fsr2l	equ	0xFD9
  8213                           status	equ	0xFD8
  8214                           
  8215 ;; *************** function ___ftsub *****************
  8216 ;; Defined at:
  8217 ;;		line 22 in file "/usr/opt/microchip/xc8/v1.20/sources/common/ftsub.c"
  8218 ;; Parameters:    Size  Location     Type
  8219 ;;  f1              3   68[COMRAM] float 
  8220 ;;  f2              3   71[COMRAM] float 
  8221 ;; Auto vars:     Size  Location     Type
  8222 ;;		None
  8223 ;; Return value:  Size  Location     Type
  8224 ;;                  3   68[COMRAM] float 
  8225 ;; Registers used:
  8226 ;;		wreg, status,2, status,0, cstack
  8227 ;; Tracked objects:
  8228 ;;		On entry : 0/0
  8229 ;;		On exit  : 0/0
  8230 ;;		Unchanged: 0/0
  8231 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8232 ;;      Params:         6       0       0       0       0       0       0       0       0
  8233 ;;      Locals:         0       0       0       0       0       0       0       0       0
  8234 ;;      Temps:          0       0       0       0       0       0       0       0       0
  8235 ;;      Totals:         6       0       0       0       0       0       0       0       0
  8236 ;;Total ram usage:        6 bytes
  8237 ;; Hardware stack levels used:    1
  8238 ;; Hardware stack levels required when called:    2
  8239 ;; This function calls:
  8240 ;;		___ftadd
  8241 ;; This function is called by:
  8242 ;;		___asftsub
  8243 ;; This function uses a non-reentrant model
  8244 ;;
  8245                           
  8246                           	psect	text30
  8247  00376A                     __ptext30:
  8248                           	opt stack 0
  8249  00376A                     ___ftsub:
  8250                           	opt stack 19
  8251                           
  8252                           ;incstack = 0
  8253                           ;incstack = 0
  8254  00376A  0E00               	movlw	0
  8255  00376C  1A48               	xorwf	___ftsub@f2,f,c
  8256  00376E  0E00               	movlw	0
  8257  003770  1A49               	xorwf	___ftsub@f2+1,f,c
  8258  003772  0E80               	movlw	128
  8259  003774  1A4A               	xorwf	___ftsub@f2+2,f,c
  8260  003776  C045  F037         	movff	___ftsub@f1,?___ftadd
  8261  00377A  C046  F038         	movff	___ftsub@f1+1,?___ftadd+1
  8262  00377E  C047  F039         	movff	___ftsub@f1+2,?___ftadd+2
  8263  003782  C048  F03A         	movff	___ftsub@f2,?___ftadd+3
  8264  003786  C049  F03B         	movff	___ftsub@f2+1,?___ftadd+4
  8265  00378A  C04A  F03C         	movff	___ftsub@f2+2,?___ftadd+5
  8266  00378E  ECCA  F00F         	call	___ftadd	;wreg free
  8267  003792  C039  F047         	movff	?___ftadd+2,?___ftsub+2
  8268  003796  C038  F046         	movff	?___ftadd+1,?___ftsub+1
  8269  00379A  C037  F045         	movff	?___ftadd,?___ftsub
  8270  00379E  0012               	return	
  8271  0037A0                     __end_of___ftsub:
  8272                           	opt stack 0
  8273                           tosu	equ	0xFFF
  8274                           tosh	equ	0xFFE
  8275                           tosl	equ	0xFFD
  8276                           pclatu	equ	0xFFB
  8277                           pclath	equ	0xFFA
  8278                           tblptru	equ	0xFF8
  8279                           tblptrh	equ	0xFF7
  8280                           tblptrl	equ	0xFF6
  8281                           tablat	equ	0xFF5
  8282                           prodh	equ	0xFF4
  8283                           prodl	equ	0xFF3
  8284                           intcon	equ	0xFF2
  8285                           intcon2	equ	0xFF1
  8286                           indf0	equ	0xFEF
  8287                           postinc0	equ	0xFEE
  8288                           fsr0h	equ	0xFEA
  8289                           fsr0l	equ	0xFE9
  8290                           wreg	equ	0xFE8
  8291                           postinc1	equ	0xFE6
  8292                           postdec1	equ	0xFE5
  8293                           fsr1h	equ	0xFE2
  8294                           fsr1l	equ	0xFE1
  8295                           indf2	equ	0xFDF
  8296                           postinc2	equ	0xFDE
  8297                           postdec2	equ	0xFDD
  8298                           plusw2	equ	0xFDB
  8299                           fsr2h	equ	0xFDA
  8300                           fsr2l	equ	0xFD9
  8301                           status	equ	0xFD8
  8302                           
  8303 ;; *************** function ___asftmul *****************
  8304 ;; Defined at:
  8305 ;;		line 5 in file "/usr/opt/microchip/xc8/v1.20/sources/pic18/asftmul.c"
  8306 ;; Parameters:    Size  Location     Type
  8307 ;;  f1p             2   54[COMRAM] PTR float 
  8308 ;;		 -> sprintf@integ(3), 
  8309 ;;  f2              3   56[COMRAM] float 
  8310 ;; Auto vars:     Size  Location     Type
  8311 ;;		None
  8312 ;; Return value:  Size  Location     Type
  8313 ;;                  3   54[COMRAM] float 
  8314 ;; Registers used:
  8315 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  8316 ;; Tracked objects:
  8317 ;;		On entry : 0/0
  8318 ;;		On exit  : 0/0
  8319 ;;		Unchanged: 0/0
  8320 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8321 ;;      Params:         5       0       0       0       0       0       0       0       0
  8322 ;;      Locals:         0       0       0       0       0       0       0       0       0
  8323 ;;      Temps:          0       0       0       0       0       0       0       0       0
  8324 ;;      Totals:         5       0       0       0       0       0       0       0       0
  8325 ;;Total ram usage:        5 bytes
  8326 ;; Hardware stack levels used:    1
  8327 ;; Hardware stack levels required when called:    2
  8328 ;; This function calls:
  8329 ;;		___ftmul
  8330 ;; This function is called by:
  8331 ;;		_sprintf
  8332 ;; This function uses a non-reentrant model
  8333 ;;
  8334                           
  8335                           	psect	text31
  8336  00367E                     __ptext31:
  8337                           	opt stack 0
  8338  00367E                     ___asftmul:
  8339                           	opt stack 20
  8340                           
  8341                           ;	Return value of ___asftmul is never used
  8342                           
  8343                           ;incstack = 0
  8344                           ;incstack = 0
  8345  00367E  C037  FFD9         	movff	___asftmul@f1p,fsr2l
  8346  003682  C038  FFDA         	movff	___asftmul@f1p+1,fsr2h
  8347  003686  CFDE F026          	movff	postinc2,?___ftmul
  8348  00368A  CFDE F027          	movff	postinc2,?___ftmul+1
  8349  00368E  CFDD F028          	movff	postdec2,?___ftmul+2
  8350  003692  C039  F029         	movff	___asftmul@f2,?___ftmul+3
  8351  003696  C03A  F02A         	movff	___asftmul@f2+1,?___ftmul+4
  8352  00369A  C03B  F02B         	movff	___asftmul@f2+2,?___ftmul+5
  8353  00369E  EC70  F013         	call	___ftmul	;wreg free
  8354  0036A2  C037  FFD9         	movff	___asftmul@f1p,fsr2l
  8355  0036A6  C038  FFDA         	movff	___asftmul@f1p+1,fsr2h
  8356  0036AA  C026  FFDE         	movff	?___ftmul,postinc2
  8357  0036AE  C027  FFDE         	movff	?___ftmul+1,postinc2
  8358  0036B2  C028  FFDD         	movff	?___ftmul+2,postdec2
  8359  0036B6  52DD               	movf	postdec2,f,c
  8360  0036B8  0012               	return	
  8361  0036BA                     __end_of___asftmul:
  8362                           	opt stack 0
  8363                           tosu	equ	0xFFF
  8364                           tosh	equ	0xFFE
  8365                           tosl	equ	0xFFD
  8366                           pclatu	equ	0xFFB
  8367                           pclath	equ	0xFFA
  8368                           tblptru	equ	0xFF8
  8369                           tblptrh	equ	0xFF7
  8370                           tblptrl	equ	0xFF6
  8371                           tablat	equ	0xFF5
  8372                           prodh	equ	0xFF4
  8373                           prodl	equ	0xFF3
  8374                           intcon	equ	0xFF2
  8375                           intcon2	equ	0xFF1
  8376                           indf0	equ	0xFEF
  8377                           postinc0	equ	0xFEE
  8378                           fsr0h	equ	0xFEA
  8379                           fsr0l	equ	0xFE9
  8380                           wreg	equ	0xFE8
  8381                           postinc1	equ	0xFE6
  8382                           postdec1	equ	0xFE5
  8383                           fsr1h	equ	0xFE2
  8384                           fsr1l	equ	0xFE1
  8385                           indf2	equ	0xFDF
  8386                           postinc2	equ	0xFDE
  8387                           postdec2	equ	0xFDD
  8388                           plusw2	equ	0xFDB
  8389                           fsr2h	equ	0xFDA
  8390                           fsr2l	equ	0xFD9
  8391                           status	equ	0xFD8
  8392                           
  8393 ;; *************** function ___asftadd *****************
  8394 ;; Defined at:
  8395 ;;		line 5 in file "/usr/opt/microchip/xc8/v1.20/sources/pic18/asftadd.c"
  8396 ;; Parameters:    Size  Location     Type
  8397 ;;  f1p             2   69[COMRAM] PTR float 
  8398 ;;		 -> sprintf@fval(3), getTemp@total(3), 
  8399 ;;  f2              3   71[COMRAM] float 
  8400 ;; Auto vars:     Size  Location     Type
  8401 ;;		None
  8402 ;; Return value:  Size  Location     Type
  8403 ;;                  3   69[COMRAM] float 
  8404 ;; Registers used:
  8405 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  8406 ;; Tracked objects:
  8407 ;;		On entry : 0/0
  8408 ;;		On exit  : 0/0
  8409 ;;		Unchanged: 0/0
  8410 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8411 ;;      Params:         5       0       0       0       0       0       0       0       0
  8412 ;;      Locals:         0       0       0       0       0       0       0       0       0
  8413 ;;      Temps:          0       0       0       0       0       0       0       0       0
  8414 ;;      Totals:         5       0       0       0       0       0       0       0       0
  8415 ;;Total ram usage:        5 bytes
  8416 ;; Hardware stack levels used:    1
  8417 ;; Hardware stack levels required when called:    2
  8418 ;; This function calls:
  8419 ;;		___ftadd
  8420 ;; This function is called by:
  8421 ;;		_getTemp
  8422 ;;		_sprintf
  8423 ;; This function uses a non-reentrant model
  8424 ;;
  8425                           
  8426                           	psect	text32
  8427  0036BA                     __ptext32:
  8428                           	opt stack 0
  8429  0036BA                     ___asftadd:
  8430                           	opt stack 21
  8431                           
  8432                           ;	Return value of ___asftadd is never used
  8433                           
  8434                           ;incstack = 0
  8435                           ;incstack = 0
  8436  0036BA  C046  FFD9         	movff	___asftadd@f1p,fsr2l
  8437  0036BE  C047  FFDA         	movff	___asftadd@f1p+1,fsr2h
  8438  0036C2  CFDE F037          	movff	postinc2,?___ftadd
  8439  0036C6  CFDE F038          	movff	postinc2,?___ftadd+1
  8440  0036CA  CFDD F039          	movff	postdec2,?___ftadd+2
  8441  0036CE  C048  F03A         	movff	___asftadd@f2,?___ftadd+3
  8442  0036D2  C049  F03B         	movff	___asftadd@f2+1,?___ftadd+4
  8443  0036D6  C04A  F03C         	movff	___asftadd@f2+2,?___ftadd+5
  8444  0036DA  ECCA  F00F         	call	___ftadd	;wreg free
  8445  0036DE  C046  FFD9         	movff	___asftadd@f1p,fsr2l
  8446  0036E2  C047  FFDA         	movff	___asftadd@f1p+1,fsr2h
  8447  0036E6  C037  FFDE         	movff	?___ftadd,postinc2
  8448  0036EA  C038  FFDE         	movff	?___ftadd+1,postinc2
  8449  0036EE  C039  FFDD         	movff	?___ftadd+2,postdec2
  8450  0036F2  52DD               	movf	postdec2,f,c
  8451  0036F4  0012               	return	
  8452  0036F6                     __end_of___asftadd:
  8453                           	opt stack 0
  8454                           tosu	equ	0xFFF
  8455                           tosh	equ	0xFFE
  8456                           tosl	equ	0xFFD
  8457                           pclatu	equ	0xFFB
  8458                           pclath	equ	0xFFA
  8459                           tblptru	equ	0xFF8
  8460                           tblptrh	equ	0xFF7
  8461                           tblptrl	equ	0xFF6
  8462                           tablat	equ	0xFF5
  8463                           prodh	equ	0xFF4
  8464                           prodl	equ	0xFF3
  8465                           intcon	equ	0xFF2
  8466                           intcon2	equ	0xFF1
  8467                           indf0	equ	0xFEF
  8468                           postinc0	equ	0xFEE
  8469                           fsr0h	equ	0xFEA
  8470                           fsr0l	equ	0xFE9
  8471                           wreg	equ	0xFE8
  8472                           postinc1	equ	0xFE6
  8473                           postdec1	equ	0xFE5
  8474                           fsr1h	equ	0xFE2
  8475                           fsr1l	equ	0xFE1
  8476                           indf2	equ	0xFDF
  8477                           postinc2	equ	0xFDE
  8478                           postdec2	equ	0xFDD
  8479                           plusw2	equ	0xFDB
  8480                           fsr2h	equ	0xFDA
  8481                           fsr2l	equ	0xFD9
  8482                           status	equ	0xFD8
  8483                           
  8484 ;; *************** function ___ftadd *****************
  8485 ;; Defined at:
  8486 ;;		line 87 in file "/usr/opt/microchip/xc8/v1.20/sources/common/ftadd.c"
  8487 ;; Parameters:    Size  Location     Type
  8488 ;;  f1              3   54[COMRAM] float 
  8489 ;;  f2              3   57[COMRAM] float 
  8490 ;; Auto vars:     Size  Location     Type
  8491 ;;  exp1            1   67[COMRAM] unsigned char 
  8492 ;;  exp2            1   66[COMRAM] unsigned char 
  8493 ;;  sign            1   65[COMRAM] unsigned char 
  8494 ;; Return value:  Size  Location     Type
  8495 ;;                  3   54[COMRAM] float 
  8496 ;; Registers used:
  8497 ;;		wreg, status,2, status,0, cstack
  8498 ;; Tracked objects:
  8499 ;;		On entry : 0/0
  8500 ;;		On exit  : 0/0
  8501 ;;		Unchanged: 0/0
  8502 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8503 ;;      Params:         6       0       0       0       0       0       0       0       0
  8504 ;;      Locals:         3       0       0       0       0       0       0       0       0
  8505 ;;      Temps:          5       0       0       0       0       0       0       0       0
  8506 ;;      Totals:        14       0       0       0       0       0       0       0       0
  8507 ;;Total ram usage:       14 bytes
  8508 ;; Hardware stack levels used:    1
  8509 ;; Hardware stack levels required when called:    1
  8510 ;; This function calls:
  8511 ;;		___ftpack
  8512 ;; This function is called by:
  8513 ;;		_getTemp
  8514 ;;		___asftadd
  8515 ;;		___ftsub
  8516 ;; This function uses a non-reentrant model
  8517 ;;
  8518                           
  8519                           	psect	text33
  8520  001F94                     __ptext33:
  8521                           	opt stack 0
  8522  001F94                     ___ftadd:
  8523                           	opt stack 22
  8524                           
  8525                           ;incstack = 0
  8526                           ;incstack = 0
  8527  001F94  0E0F               	movlw	15
  8528  001F96  6E3D               	movwf	??___ftadd& (0+255),c
  8529  001F98  C037  F03E         	movff	___ftadd@f1,??___ftadd+1
  8530  001F9C  C038  F03F         	movff	___ftadd@f1+1,??___ftadd+2
  8531  001FA0  C039  F040         	movff	___ftadd@f1+2,??___ftadd+3
  8532  001FA4  283D               	incf	??___ftadd,w,c
  8533  001FA6  6E41               	movwf	(??___ftadd+4)& (0+255),c
  8534  001FA8  D004               	goto	i2u826_40
  8535  001FAA                     i2u826_45:
  8536  001FAA  90D8               	bcf	status,0,c
  8537  001FAC  3240               	rrcf	??___ftadd+3,f,c
  8538  001FAE  323F               	rrcf	??___ftadd+2,f,c
  8539  001FB0  323E               	rrcf	??___ftadd+1,f,c
  8540  001FB2                     i2u826_40:
  8541  001FB2  2E41               	decfsz	(??___ftadd+4)& (0+255),f,c
  8542  001FB4  D7FA               	goto	i2u826_45
  8543  001FB6  503E               	movf	??___ftadd+1,w,c
  8544  001FB8  6E44               	movwf	___ftadd@exp1,c
  8545  001FBA  0E0F               	movlw	15
  8546  001FBC  6E3D               	movwf	??___ftadd& (0+255),c
  8547  001FBE  C03A  F03E         	movff	___ftadd@f2,??___ftadd+1
  8548  001FC2  C03B  F03F         	movff	___ftadd@f2+1,??___ftadd+2
  8549  001FC6  C03C  F040         	movff	___ftadd@f2+2,??___ftadd+3
  8550  001FCA  283D               	incf	??___ftadd,w,c
  8551  001FCC  6E41               	movwf	(??___ftadd+4)& (0+255),c
  8552  001FCE  D004               	goto	i2u827_40
  8553  001FD0                     i2u827_45:
  8554  001FD0  90D8               	bcf	status,0,c
  8555  001FD2  3240               	rrcf	??___ftadd+3,f,c
  8556  001FD4  323F               	rrcf	??___ftadd+2,f,c
  8557  001FD6  323E               	rrcf	??___ftadd+1,f,c
  8558  001FD8                     i2u827_40:
  8559  001FD8  2E41               	decfsz	(??___ftadd+4)& (0+255),f,c
  8560  001FDA  D7FA               	goto	i2u827_45
  8561  001FDC  503E               	movf	??___ftadd+1,w,c
  8562  001FDE  6E43               	movwf	___ftadd@exp2,c
  8563  001FE0  5044               	movf	___ftadd@exp1,w,c
  8564  001FE2  B4D8               	btfsc	status,2,c
  8565  001FE4  D00B               	goto	i2l973
  8566  001FE6  5043               	movf	___ftadd@exp2,w,c
  8567  001FE8  6044               	cpfslt	___ftadd@exp1,c
  8568  001FEA  D00F               	goto	i2l9358
  8569  001FEC  5044               	movf	___ftadd@exp1,w,c
  8570  001FEE  0800               	sublw	0
  8571  001FF0  2443               	addwf	___ftadd@exp2,w,c
  8572  001FF2  6E3D               	movwf	??___ftadd& (0+255),c
  8573  001FF4  0E19               	movlw	25
  8574  001FF6  5C3D               	subwf	??___ftadd,w,c
  8575  001FF8  A0D8               	btfss	status,0,c
  8576  001FFA  D007               	goto	i2l9358
  8577  001FFC                     i2l973:
  8578  001FFC  C03A  F037         	movff	___ftadd@f2,?___ftadd
  8579  002000  C03B  F038         	movff	___ftadd@f2+1,?___ftadd+1
  8580  002004  C03C  F039         	movff	___ftadd@f2+2,?___ftadd+2
  8581  002008  D0AA               	goto	i2l974
  8582  00200A                     i2l9358:
  8583  00200A  5043               	movf	___ftadd@exp2,w,c
  8584  00200C  B4D8               	btfsc	status,2,c
  8585  00200E  D00B               	goto	i2l977
  8586  002010  5044               	movf	___ftadd@exp1,w,c
  8587  002012  6043               	cpfslt	___ftadd@exp2,c
  8588  002014  D00F               	goto	i2l9364
  8589  002016  5043               	movf	___ftadd@exp2,w,c
  8590  002018  0800               	sublw	0
  8591  00201A  2444               	addwf	___ftadd@exp1,w,c
  8592  00201C  6E3D               	movwf	??___ftadd& (0+255),c
  8593  00201E  0E19               	movlw	25
  8594  002020  5C3D               	subwf	??___ftadd,w,c
  8595  002022  A0D8               	btfss	status,0,c
  8596  002024  D007               	goto	i2l9364
  8597  002026                     i2l977:
  8598  002026  C037  F037         	movff	___ftadd@f1,?___ftadd
  8599  00202A  C038  F038         	movff	___ftadd@f1+1,?___ftadd+1
  8600  00202E  C039  F039         	movff	___ftadd@f1+2,?___ftadd+2
  8601  002032  D095               	goto	i2l974
  8602  002034                     i2l9364:
  8603  002034  6E3D               	movwf	??___ftadd& (0+255),c
  8604  002036  0E06               	movlw	6
  8605  002038  6E42               	movwf	___ftadd@sign,c
  8606  00203A  503D               	movf	??___ftadd& (0+255),w,c
  8607  00203C  BE39               	btfsc	___ftadd@f1+2,7,c
  8608  00203E  8E42               	bsf	___ftadd@sign,7,c
  8609  002040  BE3C               	btfsc	___ftadd@f2+2,7,c
  8610  002042  8C42               	bsf	___ftadd@sign,6,c
  8611  002044  8E38               	bsf	___ftadd@f1+1,7,c
  8612  002046  0EFF               	movlw	255
  8613  002048  1637               	andwf	___ftadd@f1,f,c
  8614  00204A  0EFF               	movlw	255
  8615  00204C  1638               	andwf	___ftadd@f1+1,f,c
  8616  00204E  0E00               	movlw	0
  8617  002050  1639               	andwf	___ftadd@f1+2,f,c
  8618  002052  8E3B               	bsf	___ftadd@f2+1,7,c
  8619  002054  0EFF               	movlw	255
  8620  002056  163A               	andwf	___ftadd@f2,f,c
  8621  002058  0EFF               	movlw	255
  8622  00205A  163B               	andwf	___ftadd@f2+1,f,c
  8623  00205C  0E00               	movlw	0
  8624  00205E  163C               	andwf	___ftadd@f2+2,f,c
  8625  002060  5043               	movf	___ftadd@exp2,w,c
  8626  002062  6044               	cpfslt	___ftadd@exp1,c
  8627  002064  D018               	goto	i2l9390
  8628  002066                     i2l9380:
  8629  002066  90D8               	bcf	status,0,c
  8630  002068  363A               	rlcf	___ftadd@f2,f,c
  8631  00206A  363B               	rlcf	___ftadd@f2+1,f,c
  8632  00206C  363C               	rlcf	___ftadd@f2+2,f,c
  8633  00206E  0643               	decf	___ftadd@exp2,f,c
  8634  002070  5043               	movf	___ftadd@exp2,w,c
  8635  002072  1844               	xorwf	___ftadd@exp1,w,c
  8636  002074  B4D8               	btfsc	status,2,c
  8637  002076  D00B               	goto	i2l9388
  8638  002078  0642               	decf	___ftadd@sign,f,c
  8639  00207A  5042               	movf	___ftadd@sign& (0+255),w,c
  8640  00207C  0B07               	andlw	7
  8641  00207E  B4D8               	btfsc	status,2,c
  8642  002080  D006               	goto	i2l9388
  8643  002082  D7F1               	goto	i2l9380
  8644  002084                     i2l9386:
  8645  002084  90D8               	bcf	status,0,c
  8646  002086  3239               	rrcf	___ftadd@f1+2,f,c
  8647  002088  3238               	rrcf	___ftadd@f1+1,f,c
  8648  00208A  3237               	rrcf	___ftadd@f1,f,c
  8649  00208C  2A44               	incf	___ftadd@exp1,f,c
  8650  00208E                     i2l9388:
  8651  00208E  5043               	movf	___ftadd@exp2,w,c
  8652  002090  6244               	cpfseq	___ftadd@exp1,c
  8653  002092  D7F8               	goto	i2l9386
  8654  002094  D01A               	goto	i2l988
  8655  002096                     i2l9390:
  8656  002096  5044               	movf	___ftadd@exp1,w,c
  8657  002098  6043               	cpfslt	___ftadd@exp2,c
  8658  00209A  D017               	goto	i2l988
  8659  00209C                     i2l9392:
  8660  00209C  90D8               	bcf	status,0,c
  8661  00209E  3637               	rlcf	___ftadd@f1,f,c
  8662  0020A0  3638               	rlcf	___ftadd@f1+1,f,c
  8663  0020A2  3639               	rlcf	___ftadd@f1+2,f,c
  8664  0020A4  0644               	decf	___ftadd@exp1,f,c
  8665  0020A6  5043               	movf	___ftadd@exp2,w,c
  8666  0020A8  1844               	xorwf	___ftadd@exp1,w,c
  8667  0020AA  B4D8               	btfsc	status,2,c
  8668  0020AC  D00B               	goto	i2l9400
  8669  0020AE  0642               	decf	___ftadd@sign,f,c
  8670  0020B0  5042               	movf	___ftadd@sign& (0+255),w,c
  8671  0020B2  0B07               	andlw	7
  8672  0020B4  B4D8               	btfsc	status,2,c
  8673  0020B6  D006               	goto	i2l9400
  8674  0020B8  D7F1               	goto	i2l9392
  8675  0020BA                     i2l9398:
  8676  0020BA  90D8               	bcf	status,0,c
  8677  0020BC  323C               	rrcf	___ftadd@f2+2,f,c
  8678  0020BE  323B               	rrcf	___ftadd@f2+1,f,c
  8679  0020C0  323A               	rrcf	___ftadd@f2,f,c
  8680  0020C2  2A43               	incf	___ftadd@exp2,f,c
  8681  0020C4                     i2l9400:
  8682  0020C4  5043               	movf	___ftadd@exp2,w,c
  8683  0020C6  6244               	cpfseq	___ftadd@exp1,c
  8684  0020C8  D7F8               	goto	i2l9398
  8685  0020CA                     i2l988:
  8686  0020CA  AE42               	btfss	___ftadd@sign,7,c
  8687  0020CC  D00C               	goto	i2l997
  8688  0020CE  0EFF               	movlw	255
  8689  0020D0  1A37               	xorwf	___ftadd@f1,f,c
  8690  0020D2  0EFF               	movlw	255
  8691  0020D4  1A38               	xorwf	___ftadd@f1+1,f,c
  8692  0020D6  0EFF               	movlw	255
  8693  0020D8  1A39               	xorwf	___ftadd@f1+2,f,c
  8694  0020DA  0E01               	movlw	1
  8695  0020DC  2637               	addwf	___ftadd@f1,f,c
  8696  0020DE  0E00               	movlw	0
  8697  0020E0  2238               	addwfc	___ftadd@f1+1,f,c
  8698  0020E2  0E00               	movlw	0
  8699  0020E4  2239               	addwfc	___ftadd@f1+2,f,c
  8700  0020E6                     i2l997:
  8701  0020E6  AC42               	btfss	___ftadd@sign,6,c
  8702  0020E8  D00C               	goto	i2l9406
  8703  0020EA  0EFF               	movlw	255
  8704  0020EC  1A3A               	xorwf	___ftadd@f2,f,c
  8705  0020EE  0EFF               	movlw	255
  8706  0020F0  1A3B               	xorwf	___ftadd@f2+1,f,c
  8707  0020F2  0EFF               	movlw	255
  8708  0020F4  1A3C               	xorwf	___ftadd@f2+2,f,c
  8709  0020F6  0E01               	movlw	1
  8710  0020F8  263A               	addwf	___ftadd@f2,f,c
  8711  0020FA  0E00               	movlw	0
  8712  0020FC  223B               	addwfc	___ftadd@f2+1,f,c
  8713  0020FE  0E00               	movlw	0
  8714  002100  223C               	addwfc	___ftadd@f2+2,f,c
  8715  002102                     i2l9406:
  8716  002102  6E3D               	movwf	??___ftadd& (0+255),c
  8717  002104  0E00               	movlw	0
  8718  002106  6E42               	movwf	___ftadd@sign,c
  8719  002108  503D               	movf	??___ftadd& (0+255),w,c
  8720  00210A  5037               	movf	___ftadd@f1,w,c
  8721  00210C  263A               	addwf	___ftadd@f2,f,c
  8722  00210E  5038               	movf	___ftadd@f1+1,w,c
  8723  002110  223B               	addwfc	___ftadd@f2+1,f,c
  8724  002112  5039               	movf	___ftadd@f1+2,w,c
  8725  002114  223C               	addwfc	___ftadd@f2+2,f,c
  8726  002116  AE3C               	btfss	___ftadd@f2+2,7,c
  8727  002118  D010               	goto	i2l9416
  8728  00211A  0EFF               	movlw	255
  8729  00211C  1A3A               	xorwf	___ftadd@f2,f,c
  8730  00211E  0EFF               	movlw	255
  8731  002120  1A3B               	xorwf	___ftadd@f2+1,f,c
  8732  002122  0EFF               	movlw	255
  8733  002124  1A3C               	xorwf	___ftadd@f2+2,f,c
  8734  002126  0E01               	movlw	1
  8735  002128  263A               	addwf	___ftadd@f2,f,c
  8736  00212A  0E00               	movlw	0
  8737  00212C  223B               	addwfc	___ftadd@f2+1,f,c
  8738  00212E  0E00               	movlw	0
  8739  002130  223C               	addwfc	___ftadd@f2+2,f,c
  8740  002132  6E3D               	movwf	??___ftadd& (0+255),c
  8741  002134  0E01               	movlw	1
  8742  002136  6E42               	movwf	___ftadd@sign,c
  8743  002138  503D               	movf	??___ftadd& (0+255),w,c
  8744  00213A                     i2l9416:
  8745  00213A  C03A  F001         	movff	___ftadd@f2,?___ftpack
  8746  00213E  C03B  F002         	movff	___ftadd@f2+1,?___ftpack+1
  8747  002142  C03C  F003         	movff	___ftadd@f2+2,?___ftpack+2
  8748  002146  C044  F004         	movff	___ftadd@exp1,?___ftpack+3
  8749  00214A  C042  F005         	movff	___ftadd@sign,?___ftpack+4
  8750  00214E  EC48  F016         	call	___ftpack	;wreg free
  8751  002152  C003  F039         	movff	?___ftpack+2,?___ftadd+2
  8752  002156  C002  F038         	movff	?___ftpack+1,?___ftadd+1
  8753  00215A  C001  F037         	movff	?___ftpack,?___ftadd
  8754  00215E                     i2l974:
  8755  00215E  0012               	return	
  8756  002160                     __end_of___ftadd:
  8757                           	opt stack 0
  8758                           tosu	equ	0xFFF
  8759                           tosh	equ	0xFFE
  8760                           tosl	equ	0xFFD
  8761                           pclatu	equ	0xFFB
  8762                           pclath	equ	0xFFA
  8763                           tblptru	equ	0xFF8
  8764                           tblptrh	equ	0xFF7
  8765                           tblptrl	equ	0xFF6
  8766                           tablat	equ	0xFF5
  8767                           prodh	equ	0xFF4
  8768                           prodl	equ	0xFF3
  8769                           intcon	equ	0xFF2
  8770                           intcon2	equ	0xFF1
  8771                           indf0	equ	0xFEF
  8772                           postinc0	equ	0xFEE
  8773                           fsr0h	equ	0xFEA
  8774                           fsr0l	equ	0xFE9
  8775                           wreg	equ	0xFE8
  8776                           postinc1	equ	0xFE6
  8777                           postdec1	equ	0xFE5
  8778                           fsr1h	equ	0xFE2
  8779                           fsr1l	equ	0xFE1
  8780                           indf2	equ	0xFDF
  8781                           postinc2	equ	0xFDE
  8782                           postdec2	equ	0xFDD
  8783                           plusw2	equ	0xFDB
  8784                           fsr2h	equ	0xFDA
  8785                           fsr2l	equ	0xFD9
  8786                           status	equ	0xFD8
  8787                           
  8788 ;; *************** function ___ftpack *****************
  8789 ;; Defined at:
  8790 ;;		line 63 in file "/usr/opt/microchip/xc8/v1.20/sources/common/float.c"
  8791 ;; Parameters:    Size  Location     Type
  8792 ;;  arg             3    0[COMRAM] unsigned um
  8793 ;;  exp             1    3[COMRAM] unsigned char 
  8794 ;;  sign            1    4[COMRAM] unsigned char 
  8795 ;; Auto vars:     Size  Location     Type
  8796 ;;		None
  8797 ;; Return value:  Size  Location     Type
  8798 ;;                  3    0[COMRAM] float 
  8799 ;; Registers used:
  8800 ;;		wreg, status,2, status,0
  8801 ;; Tracked objects:
  8802 ;;		On entry : 0/0
  8803 ;;		On exit  : 0/0
  8804 ;;		Unchanged: 0/0
  8805 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8806 ;;      Params:         5       0       0       0       0       0       0       0       0
  8807 ;;      Locals:         0       0       0       0       0       0       0       0       0
  8808 ;;      Temps:          3       0       0       0       0       0       0       0       0
  8809 ;;      Totals:         8       0       0       0       0       0       0       0       0
  8810 ;;Total ram usage:        8 bytes
  8811 ;; Hardware stack levels used:    1
  8812 ;; This function calls:
  8813 ;;		Nothing
  8814 ;; This function is called by:
  8815 ;;		___ftadd
  8816 ;;		___ftdiv
  8817 ;;		___ftmul
  8818 ;;		___lltoft
  8819 ;;		___lwtoft
  8820 ;; This function uses a non-reentrant model
  8821 ;;
  8822                           
  8823                           	psect	text34
  8824  002C90                     __ptext34:
  8825                           	opt stack 0
  8826  002C90                     ___ftpack:
  8827                           	opt stack 22
  8828                           
  8829                           ;incstack = 0
  8830                           ;incstack = 0
  8831  002C90  5004               	movf	___ftpack@exp,w,c
  8832  002C92  B4D8               	btfsc	status,2,c
  8833  002C94  D005               	goto	i2l8744
  8834  002C96  5001               	movf	___ftpack@arg,w,c
  8835  002C98  1002               	iorwf	___ftpack@arg+1,w,c
  8836  002C9A  1003               	iorwf	___ftpack@arg+2,w,c
  8837  002C9C  A4D8               	btfss	status,2,c
  8838  002C9E  D00C               	goto	i2l8750
  8839  002CA0                     i2l8744:
  8840  002CA0  0E00               	movlw	0
  8841  002CA2  6E01               	movwf	?___ftpack,c
  8842  002CA4  0E00               	movlw	0
  8843  002CA6  6E02               	movwf	?___ftpack+1,c
  8844  002CA8  0E00               	movlw	0
  8845  002CAA  6E03               	movwf	?___ftpack+2,c
  8846  002CAC  D04C               	goto	i2l936
  8847  002CAE                     i2l8748:
  8848  002CAE  2A04               	incf	___ftpack@exp,f,c
  8849  002CB0  90D8               	bcf	status,0,c
  8850  002CB2  3203               	rrcf	___ftpack@arg+2,f,c
  8851  002CB4  3202               	rrcf	___ftpack@arg+1,f,c
  8852  002CB6  3201               	rrcf	___ftpack@arg,f,c
  8853  002CB8                     i2l8750:
  8854  002CB8  0E00               	movlw	0
  8855  002CBA  1401               	andwf	___ftpack@arg,w,c
  8856  002CBC  6E06               	movwf	??___ftpack& (0+255),c
  8857  002CBE  0E00               	movlw	0
  8858  002CC0  1402               	andwf	___ftpack@arg+1,w,c
  8859  002CC2  6E07               	movwf	(??___ftpack+1)& (0+255),c
  8860  002CC4  0EFE               	movlw	254
  8861  002CC6  1403               	andwf	___ftpack@arg+2,w,c
  8862  002CC8  6E08               	movwf	(??___ftpack+2)& (0+255),c
  8863  002CCA  5006               	movf	??___ftpack,w,c
  8864  002CCC  1007               	iorwf	??___ftpack+1,w,c
  8865  002CCE  1008               	iorwf	??___ftpack+2,w,c
  8866  002CD0  B4D8               	btfsc	status,2,c
  8867  002CD2  D00C               	goto	i2l8756
  8868  002CD4  D7EC               	goto	i2l8748
  8869  002CD6                     i2l8752:
  8870  002CD6  2A04               	incf	___ftpack@exp,f,c
  8871  002CD8  0E01               	movlw	1
  8872  002CDA  2601               	addwf	___ftpack@arg,f,c
  8873  002CDC  0E00               	movlw	0
  8874  002CDE  2202               	addwfc	___ftpack@arg+1,f,c
  8875  002CE0  0E00               	movlw	0
  8876  002CE2  2203               	addwfc	___ftpack@arg+2,f,c
  8877  002CE4  90D8               	bcf	status,0,c
  8878  002CE6  3203               	rrcf	___ftpack@arg+2,f,c
  8879  002CE8  3202               	rrcf	___ftpack@arg+1,f,c
  8880  002CEA  3201               	rrcf	___ftpack@arg,f,c
  8881  002CEC                     i2l8756:
  8882  002CEC  0E00               	movlw	0
  8883  002CEE  1401               	andwf	___ftpack@arg,w,c
  8884  002CF0  6E06               	movwf	??___ftpack& (0+255),c
  8885  002CF2  0E00               	movlw	0
  8886  002CF4  1402               	andwf	___ftpack@arg+1,w,c
  8887  002CF6  6E07               	movwf	(??___ftpack+1)& (0+255),c
  8888  002CF8  0EFF               	movlw	255
  8889  002CFA  1403               	andwf	___ftpack@arg+2,w,c
  8890  002CFC  6E08               	movwf	(??___ftpack+2)& (0+255),c
  8891  002CFE  5006               	movf	??___ftpack,w,c
  8892  002D00  1007               	iorwf	??___ftpack+1,w,c
  8893  002D02  1008               	iorwf	??___ftpack+2,w,c
  8894  002D04  B4D8               	btfsc	status,2,c
  8895  002D06  D006               	goto	i2l8760
  8896  002D08  D7E6               	goto	i2l8752
  8897  002D0A                     i2l8758:
  8898  002D0A  0604               	decf	___ftpack@exp,f,c
  8899  002D0C  90D8               	bcf	status,0,c
  8900  002D0E  3601               	rlcf	___ftpack@arg,f,c
  8901  002D10  3602               	rlcf	___ftpack@arg+1,f,c
  8902  002D12  3603               	rlcf	___ftpack@arg+2,f,c
  8903  002D14                     i2l8760:
  8904  002D14  AE02               	btfss	___ftpack@arg+1,7,c
  8905  002D16  D7F9               	goto	i2l8758
  8906  002D18  A004               	btfss	___ftpack@exp,0,c
  8907  002D1A  9E02               	bcf	___ftpack@arg+1,7,c
  8908  002D1C  90D8               	bcf	status,0,c
  8909  002D1E  3204               	rrcf	___ftpack@exp,f,c
  8910  002D20  5004               	movf	___ftpack@exp,w,c
  8911  002D22  6E08               	movwf	(??___ftpack+2)& (0+255),c
  8912  002D24  6A07               	clrf	(??___ftpack+1)& (0+255),c
  8913  002D26  6A06               	clrf	??___ftpack& (0+255),c
  8914  002D28  5006               	movf	??___ftpack,w,c
  8915  002D2A  1201               	iorwf	___ftpack@arg,f,c
  8916  002D2C  5007               	movf	??___ftpack+1,w,c
  8917  002D2E  1202               	iorwf	___ftpack@arg+1,f,c
  8918  002D30  5008               	movf	??___ftpack+2,w,c
  8919  002D32  1203               	iorwf	___ftpack@arg+2,f,c
  8920  002D34  5005               	movf	___ftpack@sign,w,c
  8921  002D36  A4D8               	btfss	status,2,c
  8922  002D38  8E03               	bsf	___ftpack@arg+2,7,c
  8923  002D3A  C001  F001         	movff	___ftpack@arg,?___ftpack
  8924  002D3E  C002  F002         	movff	___ftpack@arg+1,?___ftpack+1
  8925  002D42  C003  F003         	movff	___ftpack@arg+2,?___ftpack+2
  8926  002D46                     i2l936:
  8927  002D46  0012               	return	
  8928  002D48                     __end_of___ftpack:
  8929                           	opt stack 0
  8930                           tosu	equ	0xFFF
  8931                           tosh	equ	0xFFE
  8932                           tosl	equ	0xFFD
  8933                           pclatu	equ	0xFFB
  8934                           pclath	equ	0xFFA
  8935                           tblptru	equ	0xFF8
  8936                           tblptrh	equ	0xFF7
  8937                           tblptrl	equ	0xFF6
  8938                           tablat	equ	0xFF5
  8939                           prodh	equ	0xFF4
  8940                           prodl	equ	0xFF3
  8941                           intcon	equ	0xFF2
  8942                           intcon2	equ	0xFF1
  8943                           indf0	equ	0xFEF
  8944                           postinc0	equ	0xFEE
  8945                           fsr0h	equ	0xFEA
  8946                           fsr0l	equ	0xFE9
  8947                           wreg	equ	0xFE8
  8948                           postinc1	equ	0xFE6
  8949                           postdec1	equ	0xFE5
  8950                           fsr1h	equ	0xFE2
  8951                           fsr1l	equ	0xFE1
  8952                           indf2	equ	0xFDF
  8953                           postinc2	equ	0xFDE
  8954                           postdec2	equ	0xFDD
  8955                           plusw2	equ	0xFDB
  8956                           fsr2h	equ	0xFDA
  8957                           fsr2l	equ	0xFD9
  8958                           status	equ	0xFD8
  8959                           
  8960 ;; *************** function __div_to_l_ *****************
  8961 ;; Defined at:
  8962 ;;		line 61 in file "/usr/opt/microchip/xc8/v1.20/sources/common/fldivl.c"
  8963 ;; Parameters:    Size  Location     Type
  8964 ;;  f1              3    0[COMRAM] float 
  8965 ;;  f2              3    3[COMRAM] float 
  8966 ;; Auto vars:     Size  Location     Type
  8967 ;;  quot            4    7[COMRAM] unsigned long 
  8968 ;;  exp1            1   12[COMRAM] unsigned char 
  8969 ;;  cntr            1   11[COMRAM] unsigned char 
  8970 ;; Return value:  Size  Location     Type
  8971 ;;                  4    0[COMRAM] unsigned long 
  8972 ;; Registers used:
  8973 ;;		wreg, status,2, status,0
  8974 ;; Tracked objects:
  8975 ;;		On entry : 0/0
  8976 ;;		On exit  : 0/0
  8977 ;;		Unchanged: 0/0
  8978 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8979 ;;      Params:         6       0       0       0       0       0       0       0       0
  8980 ;;      Locals:         6       0       0       0       0       0       0       0       0
  8981 ;;      Temps:          1       0       0       0       0       0       0       0       0
  8982 ;;      Totals:        13       0       0       0       0       0       0       0       0
  8983 ;;Total ram usage:       13 bytes
  8984 ;; Hardware stack levels used:    1
  8985 ;; This function calls:
  8986 ;;		Nothing
  8987 ;; This function is called by:
  8988 ;;		_sprintf
  8989 ;; This function uses a non-reentrant model
  8990 ;;
  8991                           
  8992                           	psect	text35
  8993  0029F6                     __ptext35:
  8994                           	opt stack 0
  8995  0029F6                     __div_to_l_:
  8996                           	opt stack 22
  8997                           
  8998                           ;incstack = 0
  8999                           ;incstack = 0
  9000  0029F6  3403               	rlcf	(__div_to_l_@f1+2)& (0+255),w,c
  9001  0029F8  3404               	rlcf	(__div_to_l_@f1+3)& (0+255),w,c
  9002  0029FA  6E0D               	movwf	__div_to_l_@exp1,c
  9003  0029FC  660D               	tstfsz	__div_to_l_@exp1& (0+255),c
  9004  0029FE  D001               	goto	i2l8690
  9005  002A00  D05A               	goto	i2u734_40
  9006  002A02                     i2l8690:
  9007  002A02  3406               	rlcf	(__div_to_l_@f2+2)& (0+255),w,c
  9008  002A04  3407               	rlcf	(__div_to_l_@f2+3)& (0+255),w,c
  9009  002A06  6E0C               	movwf	__div_to_l_@cntr,c
  9010  002A08  660C               	tstfsz	__div_to_l_@cntr& (0+255),c
  9011  002A0A  D001               	goto	i2l8696
  9012  002A0C  D054               	goto	i2u734_40
  9013  002A0E                     i2l8696:
  9014  002A0E  8E03               	bsf	__div_to_l_@f1+2,7,c
  9015  002A10  0EFF               	movlw	255
  9016  002A12  1601               	andwf	__div_to_l_@f1,f,c
  9017  002A14  0EFF               	movlw	255
  9018  002A16  1602               	andwf	__div_to_l_@f1+1,f,c
  9019  002A18  0EFF               	movlw	255
  9020  002A1A  1603               	andwf	__div_to_l_@f1+2,f,c
  9021  002A1C  0E00               	movlw	0
  9022  002A1E  1604               	andwf	__div_to_l_@f1+3,f,c
  9023  002A20  8E06               	bsf	__div_to_l_@f2+2,7,c
  9024  002A22  0EFF               	movlw	255
  9025  002A24  1604               	andwf	__div_to_l_@f2,f,c
  9026  002A26  0EFF               	movlw	255
  9027  002A28  1605               	andwf	__div_to_l_@f2+1,f,c
  9028  002A2A  0EFF               	movlw	255
  9029  002A2C  1606               	andwf	__div_to_l_@f2+2,f,c
  9030  002A2E  0E00               	movlw	0
  9031  002A30  1607               	andwf	__div_to_l_@f2+3,f,c
  9032  002A32  0E00               	movlw	0
  9033  002A34  6E08               	movwf	__div_to_l_@quot,c
  9034  002A36  0E00               	movlw	0
  9035  002A38  6E09               	movwf	__div_to_l_@quot+1,c
  9036  002A3A  0E00               	movlw	0
  9037  002A3C  6E0A               	movwf	__div_to_l_@quot+2,c
  9038  002A3E  0E00               	movlw	0
  9039  002A40  6E0B               	movwf	__div_to_l_@quot+3,c
  9040  002A42  0E7F               	movlw	127
  9041  002A44  5E0D               	subwf	__div_to_l_@exp1,f,c
  9042  002A46  500C               	movf	__div_to_l_@cntr,w,c
  9043  002A48  0FA0               	addlw	160
  9044  002A4A  5E0D               	subwf	__div_to_l_@exp1,f,c
  9045  002A4C  6E07               	movwf	??__div_to_l_& (0+255),c
  9046  002A4E  0E20               	movlw	32
  9047  002A50  6E0C               	movwf	__div_to_l_@cntr,c
  9048  002A52  5007               	movf	??__div_to_l_& (0+255),w,c
  9049  002A54                     i2l897:
  9050  002A54  90D8               	bcf	status,0,c
  9051  002A56  3608               	rlcf	__div_to_l_@quot,f,c
  9052  002A58  3609               	rlcf	__div_to_l_@quot+1,f,c
  9053  002A5A  360A               	rlcf	__div_to_l_@quot+2,f,c
  9054  002A5C  360B               	rlcf	__div_to_l_@quot+3,f,c
  9055  002A5E  5004               	movf	__div_to_l_@f2,w,c
  9056  002A60  5C01               	subwf	__div_to_l_@f1,w,c
  9057  002A62  5005               	movf	__div_to_l_@f2+1,w,c
  9058  002A64  5802               	subwfb	__div_to_l_@f1+1,w,c
  9059  002A66  5006               	movf	__div_to_l_@f2+2,w,c
  9060  002A68  5803               	subwfb	__div_to_l_@f1+2,w,c
  9061  002A6A  5007               	movf	__div_to_l_@f2+3,w,c
  9062  002A6C  5804               	subwfb	__div_to_l_@f1+3,w,c
  9063  002A6E  A0D8               	btfss	status,0,c
  9064  002A70  D009               	goto	i2l8716
  9065  002A72  5004               	movf	__div_to_l_@f2,w,c
  9066  002A74  5E01               	subwf	__div_to_l_@f1,f,c
  9067  002A76  5005               	movf	__div_to_l_@f2+1,w,c
  9068  002A78  5A02               	subwfb	__div_to_l_@f1+1,f,c
  9069  002A7A  5006               	movf	__div_to_l_@f2+2,w,c
  9070  002A7C  5A03               	subwfb	__div_to_l_@f1+2,f,c
  9071  002A7E  5007               	movf	__div_to_l_@f2+3,w,c
  9072  002A80  5A04               	subwfb	__div_to_l_@f1+3,f,c
  9073  002A82  8008               	bsf	__div_to_l_@quot,0,c
  9074  002A84                     i2l8716:
  9075  002A84  90D8               	bcf	status,0,c
  9076  002A86  3601               	rlcf	__div_to_l_@f1,f,c
  9077  002A88  3602               	rlcf	__div_to_l_@f1+1,f,c
  9078  002A8A  3603               	rlcf	__div_to_l_@f1+2,f,c
  9079  002A8C  3604               	rlcf	__div_to_l_@f1+3,f,c
  9080  002A8E  2E0C               	decfsz	__div_to_l_@cntr,f,c
  9081  002A90  D7E1               	goto	i2l897
  9082  002A92  AE0D               	btfss	__div_to_l_@exp1,7,c
  9083  002A94  D00D               	goto	i2l8730
  9084  002A96  500D               	movf	__div_to_l_@exp1,w,c
  9085  002A98  0A80               	xorlw	128
  9086  002A9A  0F9F               	addlw	159
  9087  002A9C  A0D8               	btfss	status,0,c
  9088  002A9E  D00B               	goto	i2u734_40
  9089  002AA0                     i2l8726:
  9090  002AA0  90D8               	bcf	status,0,c
  9091  002AA2  320B               	rrcf	__div_to_l_@quot+3,f,c
  9092  002AA4  320A               	rrcf	__div_to_l_@quot+2,f,c
  9093  002AA6  3209               	rrcf	__div_to_l_@quot+1,f,c
  9094  002AA8  3208               	rrcf	__div_to_l_@quot,f,c
  9095  002AAA  3E0D               	incfsz	__div_to_l_@exp1,f,c
  9096  002AAC  D7F9               	goto	i2l8726
  9097  002AAE  D014               	goto	i2l904
  9098  002AB0                     i2l8730:
  9099  002AB0  0E1F               	movlw	31
  9100  002AB2  640D               	cpfsgt	__div_to_l_@exp1,c
  9101  002AB4  D00F               	goto	i2l8738
  9102  002AB6                     i2u734_40:
  9103  002AB6  0E00               	movlw	0
  9104  002AB8  6E01               	movwf	?__div_to_l_,c
  9105  002ABA  0E00               	movlw	0
  9106  002ABC  6E02               	movwf	?__div_to_l_+1,c
  9107  002ABE  0E00               	movlw	0
  9108  002AC0  6E03               	movwf	?__div_to_l_+2,c
  9109  002AC2  0E00               	movlw	0
  9110  002AC4  6E04               	movwf	?__div_to_l_+3,c
  9111  002AC6  D010               	goto	i2l895
  9112  002AC8                     i2l8736:
  9113  002AC8  90D8               	bcf	status,0,c
  9114  002ACA  3608               	rlcf	__div_to_l_@quot,f,c
  9115  002ACC  3609               	rlcf	__div_to_l_@quot+1,f,c
  9116  002ACE  360A               	rlcf	__div_to_l_@quot+2,f,c
  9117  002AD0  360B               	rlcf	__div_to_l_@quot+3,f,c
  9118  002AD2  060D               	decf	__div_to_l_@exp1,f,c
  9119  002AD4                     i2l8738:
  9120  002AD4  660D               	tstfsz	__div_to_l_@exp1,c
  9121  002AD6  D7F8               	goto	i2l8736
  9122  002AD8                     i2l904:
  9123  002AD8  C008  F001         	movff	__div_to_l_@quot,?__div_to_l_
  9124  002ADC  C009  F002         	movff	__div_to_l_@quot+1,?__div_to_l_+1
  9125  002AE0  C00A  F003         	movff	__div_to_l_@quot+2,?__div_to_l_+2
  9126  002AE4  C00B  F004         	movff	__div_to_l_@quot+3,?__div_to_l_+3
  9127  002AE8                     i2l895:
  9128  002AE8  0012               	return	
  9129  002AEA                     __end_of__div_to_l_:
  9130                           	opt stack 0
  9131                           tosu	equ	0xFFF
  9132                           tosh	equ	0xFFE
  9133                           tosl	equ	0xFFD
  9134                           pclatu	equ	0xFFB
  9135                           pclath	equ	0xFFA
  9136                           tblptru	equ	0xFF8
  9137                           tblptrh	equ	0xFF7
  9138                           tblptrl	equ	0xFF6
  9139                           tablat	equ	0xFF5
  9140                           prodh	equ	0xFF4
  9141                           prodl	equ	0xFF3
  9142                           intcon	equ	0xFF2
  9143                           intcon2	equ	0xFF1
  9144                           indf0	equ	0xFEF
  9145                           postinc0	equ	0xFEE
  9146                           fsr0h	equ	0xFEA
  9147                           fsr0l	equ	0xFE9
  9148                           wreg	equ	0xFE8
  9149                           postinc1	equ	0xFE6
  9150                           postdec1	equ	0xFE5
  9151                           fsr1h	equ	0xFE2
  9152                           fsr1l	equ	0xFE1
  9153                           indf2	equ	0xFDF
  9154                           postinc2	equ	0xFDE
  9155                           postdec2	equ	0xFDD
  9156                           plusw2	equ	0xFDB
  9157                           fsr2h	equ	0xFDA
  9158                           fsr2l	equ	0xFD9
  9159                           status	equ	0xFD8
  9160                           
  9161 ;; *************** function __tdiv_to_l_ *****************
  9162 ;; Defined at:
  9163 ;;		line 61 in file "/usr/opt/microchip/xc8/v1.20/sources/common/ftdivl.c"
  9164 ;; Parameters:    Size  Location     Type
  9165 ;;  f1              3    0[COMRAM] float 
  9166 ;;  f2              3    3[COMRAM] float 
  9167 ;; Auto vars:     Size  Location     Type
  9168 ;;  quot            4   11[COMRAM] unsigned long 
  9169 ;;  exp1            1   16[COMRAM] unsigned char 
  9170 ;;  cntr            1   15[COMRAM] unsigned char 
  9171 ;; Return value:  Size  Location     Type
  9172 ;;                  4    0[COMRAM] unsigned long 
  9173 ;; Registers used:
  9174 ;;		wreg, status,2, status,0
  9175 ;; Tracked objects:
  9176 ;;		On entry : 0/0
  9177 ;;		On exit  : 0/0
  9178 ;;		Unchanged: 0/0
  9179 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9180 ;;      Params:         6       0       0       0       0       0       0       0       0
  9181 ;;      Locals:         6       0       0       0       0       0       0       0       0
  9182 ;;      Temps:          5       0       0       0       0       0       0       0       0
  9183 ;;      Totals:        17       0       0       0       0       0       0       0       0
  9184 ;;Total ram usage:       17 bytes
  9185 ;; Hardware stack levels used:    1
  9186 ;; This function calls:
  9187 ;;		Nothing
  9188 ;; This function is called by:
  9189 ;;		_sprintf
  9190 ;; This function uses a non-reentrant model
  9191 ;;
  9192                           
  9193                           	psect	text36
  9194  0025BE                     __ptext36:
  9195                           	opt stack 0
  9196  0025BE                     __tdiv_to_l_:
  9197                           	opt stack 22
  9198                           
  9199                           ;incstack = 0
  9200                           ;incstack = 0
  9201  0025BE  0E0F               	movlw	15
  9202  0025C0  6E07               	movwf	??__tdiv_to_l_& (0+255),c
  9203  0025C2  C001  F008         	movff	__tdiv_to_l_@f1,??__tdiv_to_l_+1
  9204  0025C6  C002  F009         	movff	__tdiv_to_l_@f1+1,??__tdiv_to_l_+2
  9205  0025CA  C003  F00A         	movff	__tdiv_to_l_@f1+2,??__tdiv_to_l_+3
  9206  0025CE  2807               	incf	??__tdiv_to_l_,w,c
  9207  0025D0  6E0B               	movwf	(??__tdiv_to_l_+4)& (0+255),c
  9208  0025D2  D004               	goto	i2u720_40
  9209  0025D4                     i2u720_45:
  9210  0025D4  90D8               	bcf	status,0,c
  9211  0025D6  320A               	rrcf	??__tdiv_to_l_+3,f,c
  9212  0025D8  3209               	rrcf	??__tdiv_to_l_+2,f,c
  9213  0025DA  3208               	rrcf	??__tdiv_to_l_+1,f,c
  9214  0025DC                     i2u720_40:
  9215  0025DC  2E0B               	decfsz	(??__tdiv_to_l_+4)& (0+255),f,c
  9216  0025DE  D7FA               	goto	i2u720_45
  9217  0025E0  5008               	movf	??__tdiv_to_l_+1,w,c
  9218  0025E2  6E11               	movwf	__tdiv_to_l_@exp1,c
  9219  0025E4  6611               	tstfsz	__tdiv_to_l_@exp1& (0+255),c
  9220  0025E6  D001               	goto	i2l8634
  9221  0025E8  D061               	goto	i2u727_40
  9222  0025EA                     i2l8634:
  9223  0025EA  0E0F               	movlw	15
  9224  0025EC  6E07               	movwf	??__tdiv_to_l_& (0+255),c
  9225  0025EE  C004  F008         	movff	__tdiv_to_l_@f2,??__tdiv_to_l_+1
  9226  0025F2  C005  F009         	movff	__tdiv_to_l_@f2+1,??__tdiv_to_l_+2
  9227  0025F6  C006  F00A         	movff	__tdiv_to_l_@f2+2,??__tdiv_to_l_+3
  9228  0025FA  2807               	incf	??__tdiv_to_l_,w,c
  9229  0025FC  6E0B               	movwf	(??__tdiv_to_l_+4)& (0+255),c
  9230  0025FE  D004               	goto	i2u722_40
  9231  002600                     i2u722_45:
  9232  002600  90D8               	bcf	status,0,c
  9233  002602  320A               	rrcf	??__tdiv_to_l_+3,f,c
  9234  002604  3209               	rrcf	??__tdiv_to_l_+2,f,c
  9235  002606  3208               	rrcf	??__tdiv_to_l_+1,f,c
  9236  002608                     i2u722_40:
  9237  002608  2E0B               	decfsz	(??__tdiv_to_l_+4)& (0+255),f,c
  9238  00260A  D7FA               	goto	i2u722_45
  9239  00260C  5008               	movf	??__tdiv_to_l_+1,w,c
  9240  00260E  6E10               	movwf	__tdiv_to_l_@cntr,c
  9241  002610  6610               	tstfsz	__tdiv_to_l_@cntr& (0+255),c
  9242  002612  D001               	goto	i2l8640
  9243  002614  D04B               	goto	i2u727_40
  9244  002616                     i2l8640:
  9245  002616  8E02               	bsf	__tdiv_to_l_@f1+1,7,c
  9246  002618  0EFF               	movlw	255
  9247  00261A  1601               	andwf	__tdiv_to_l_@f1,f,c
  9248  00261C  0EFF               	movlw	255
  9249  00261E  1602               	andwf	__tdiv_to_l_@f1+1,f,c
  9250  002620  0E00               	movlw	0
  9251  002622  1603               	andwf	__tdiv_to_l_@f1+2,f,c
  9252  002624  8E05               	bsf	__tdiv_to_l_@f2+1,7,c
  9253  002626  0EFF               	movlw	255
  9254  002628  1604               	andwf	__tdiv_to_l_@f2,f,c
  9255  00262A  0EFF               	movlw	255
  9256  00262C  1605               	andwf	__tdiv_to_l_@f2+1,f,c
  9257  00262E  0E00               	movlw	0
  9258  002630  1606               	andwf	__tdiv_to_l_@f2+2,f,c
  9259  002632  0E00               	movlw	0
  9260  002634  6E0C               	movwf	__tdiv_to_l_@quot,c
  9261  002636  0E00               	movlw	0
  9262  002638  6E0D               	movwf	__tdiv_to_l_@quot+1,c
  9263  00263A  0E00               	movlw	0
  9264  00263C  6E0E               	movwf	__tdiv_to_l_@quot+2,c
  9265  00263E  0E00               	movlw	0
  9266  002640  6E0F               	movwf	__tdiv_to_l_@quot+3,c
  9267  002642  0E7F               	movlw	127
  9268  002644  5E11               	subwf	__tdiv_to_l_@exp1,f,c
  9269  002646  5010               	movf	__tdiv_to_l_@cntr,w,c
  9270  002648  0F98               	addlw	152
  9271  00264A  5E11               	subwf	__tdiv_to_l_@exp1,f,c
  9272  00264C  6E07               	movwf	??__tdiv_to_l_& (0+255),c
  9273  00264E  0E18               	movlw	24
  9274  002650  6E10               	movwf	__tdiv_to_l_@cntr,c
  9275  002652  5007               	movf	??__tdiv_to_l_& (0+255),w,c
  9276  002654                     i2l8654:
  9277  002654  90D8               	bcf	status,0,c
  9278  002656  360C               	rlcf	__tdiv_to_l_@quot,f,c
  9279  002658  360D               	rlcf	__tdiv_to_l_@quot+1,f,c
  9280  00265A  360E               	rlcf	__tdiv_to_l_@quot+2,f,c
  9281  00265C  360F               	rlcf	__tdiv_to_l_@quot+3,f,c
  9282  00265E  5004               	movf	__tdiv_to_l_@f2,w,c
  9283  002660  5C01               	subwf	__tdiv_to_l_@f1,w,c
  9284  002662  5005               	movf	__tdiv_to_l_@f2+1,w,c
  9285  002664  5802               	subwfb	__tdiv_to_l_@f1+1,w,c
  9286  002666  5006               	movf	__tdiv_to_l_@f2+2,w,c
  9287  002668  5803               	subwfb	__tdiv_to_l_@f1+2,w,c
  9288  00266A  A0D8               	btfss	status,0,c
  9289  00266C  D007               	goto	i2l1016
  9290  00266E  5004               	movf	__tdiv_to_l_@f2,w,c
  9291  002670  5E01               	subwf	__tdiv_to_l_@f1,f,c
  9292  002672  5005               	movf	__tdiv_to_l_@f2+1,w,c
  9293  002674  5A02               	subwfb	__tdiv_to_l_@f1+1,f,c
  9294  002676  5006               	movf	__tdiv_to_l_@f2+2,w,c
  9295  002678  5A03               	subwfb	__tdiv_to_l_@f1+2,f,c
  9296  00267A  800C               	bsf	__tdiv_to_l_@quot,0,c
  9297  00267C                     i2l1016:
  9298  00267C  90D8               	bcf	status,0,c
  9299  00267E  3601               	rlcf	__tdiv_to_l_@f1,f,c
  9300  002680  3602               	rlcf	__tdiv_to_l_@f1+1,f,c
  9301  002682  3603               	rlcf	__tdiv_to_l_@f1+2,f,c
  9302  002684  2E10               	decfsz	__tdiv_to_l_@cntr,f,c
  9303  002686  D7E6               	goto	i2l8654
  9304  002688  AE11               	btfss	__tdiv_to_l_@exp1,7,c
  9305  00268A  D00D               	goto	i2l8674
  9306  00268C  5011               	movf	__tdiv_to_l_@exp1,w,c
  9307  00268E  0A80               	xorlw	128
  9308  002690  0F97               	addlw	151
  9309  002692  A0D8               	btfss	status,0,c
  9310  002694  D00B               	goto	i2u727_40
  9311  002696                     i2l8670:
  9312  002696  90D8               	bcf	status,0,c
  9313  002698  320F               	rrcf	__tdiv_to_l_@quot+3,f,c
  9314  00269A  320E               	rrcf	__tdiv_to_l_@quot+2,f,c
  9315  00269C  320D               	rrcf	__tdiv_to_l_@quot+1,f,c
  9316  00269E  320C               	rrcf	__tdiv_to_l_@quot,f,c
  9317  0026A0  3E11               	incfsz	__tdiv_to_l_@exp1,f,c
  9318  0026A2  D7F9               	goto	i2l8670
  9319  0026A4  D014               	goto	i2l1022
  9320  0026A6                     i2l8674:
  9321  0026A6  0E17               	movlw	23
  9322  0026A8  6411               	cpfsgt	__tdiv_to_l_@exp1,c
  9323  0026AA  D00F               	goto	i2l8682
  9324  0026AC                     i2u727_40:
  9325  0026AC  0E00               	movlw	0
  9326  0026AE  6E01               	movwf	?__tdiv_to_l_,c
  9327  0026B0  0E00               	movlw	0
  9328  0026B2  6E02               	movwf	?__tdiv_to_l_+1,c
  9329  0026B4  0E00               	movlw	0
  9330  0026B6  6E03               	movwf	?__tdiv_to_l_+2,c
  9331  0026B8  0E00               	movlw	0
  9332  0026BA  6E04               	movwf	?__tdiv_to_l_+3,c
  9333  0026BC  D010               	goto	i2l1013
  9334  0026BE                     i2l8680:
  9335  0026BE  90D8               	bcf	status,0,c
  9336  0026C0  360C               	rlcf	__tdiv_to_l_@quot,f,c
  9337  0026C2  360D               	rlcf	__tdiv_to_l_@quot+1,f,c
  9338  0026C4  360E               	rlcf	__tdiv_to_l_@quot+2,f,c
  9339  0026C6  360F               	rlcf	__tdiv_to_l_@quot+3,f,c
  9340  0026C8  0611               	decf	__tdiv_to_l_@exp1,f,c
  9341  0026CA                     i2l8682:
  9342  0026CA  6611               	tstfsz	__tdiv_to_l_@exp1,c
  9343  0026CC  D7F8               	goto	i2l8680
  9344  0026CE                     i2l1022:
  9345  0026CE  C00C  F001         	movff	__tdiv_to_l_@quot,?__tdiv_to_l_
  9346  0026D2  C00D  F002         	movff	__tdiv_to_l_@quot+1,?__tdiv_to_l_+1
  9347  0026D6  C00E  F003         	movff	__tdiv_to_l_@quot+2,?__tdiv_to_l_+2
  9348  0026DA  C00F  F004         	movff	__tdiv_to_l_@quot+3,?__tdiv_to_l_+3
  9349  0026DE                     i2l1013:
  9350  0026DE  0012               	return	
  9351  0026E0                     __end_of__tdiv_to_l_:
  9352                           	opt stack 0
  9353                           tosu	equ	0xFFF
  9354                           tosh	equ	0xFFE
  9355                           tosl	equ	0xFFD
  9356                           pclatu	equ	0xFFB
  9357                           pclath	equ	0xFFA
  9358                           tblptru	equ	0xFF8
  9359                           tblptrh	equ	0xFF7
  9360                           tblptrl	equ	0xFF6
  9361                           tablat	equ	0xFF5
  9362                           prodh	equ	0xFF4
  9363                           prodl	equ	0xFF3
  9364                           intcon	equ	0xFF2
  9365                           intcon2	equ	0xFF1
  9366                           indf0	equ	0xFEF
  9367                           postinc0	equ	0xFEE
  9368                           fsr0h	equ	0xFEA
  9369                           fsr0l	equ	0xFE9
  9370                           wreg	equ	0xFE8
  9371                           postinc1	equ	0xFE6
  9372                           postdec1	equ	0xFE5
  9373                           fsr1h	equ	0xFE2
  9374                           fsr1l	equ	0xFE1
  9375                           indf2	equ	0xFDF
  9376                           postinc2	equ	0xFDE
  9377                           postdec2	equ	0xFDD
  9378                           plusw2	equ	0xFDB
  9379                           fsr2h	equ	0xFDA
  9380                           fsr2l	equ	0xFD9
  9381                           status	equ	0xFD8
  9382                           
  9383 ;; *************** function _isdigit *****************
  9384 ;; Defined at:
  9385 ;;		line 13 in file "/usr/opt/microchip/xc8/v1.20/sources/common/isdigit.c"
  9386 ;; Parameters:    Size  Location     Type
  9387 ;;  c               1    0[COMRAM] unsigned char 
  9388 ;; Auto vars:     Size  Location     Type
  9389 ;;		None
  9390 ;; Return value:  Size  Location     Type
  9391 ;;		None               void
  9392 ;; Registers used:
  9393 ;;		wreg, status,2, status,0
  9394 ;; Tracked objects:
  9395 ;;		On entry : 0/0
  9396 ;;		On exit  : 0/0
  9397 ;;		Unchanged: 0/0
  9398 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9399 ;;      Params:         1       0       0       0       0       0       0       0       0
  9400 ;;      Locals:         1       0       0       0       0       0       0       0       0
  9401 ;;      Temps:          1       0       0       0       0       0       0       0       0
  9402 ;;      Totals:         3       0       0       0       0       0       0       0       0
  9403 ;;Total ram usage:        3 bytes
  9404 ;; Hardware stack levels used:    1
  9405 ;; This function calls:
  9406 ;;		Nothing
  9407 ;; This function is called by:
  9408 ;;		_sprintf
  9409 ;; This function uses a non-reentrant model
  9410 ;;
  9411                           
  9412                           	psect	text37
  9413  003870                     __ptext37:
  9414                           	opt stack 0
  9415  003870                     _isdigit:
  9416                           	opt stack 22
  9417                           
  9418                           ;incstack = 0
  9419                           ;incstack = 0
  9420  003870  6E02               	movwf	??_isdigit& (0+255),c
  9421  003872  0E00               	movlw	0
  9422  003874  6E03               	movwf	_isdigit$894,c
  9423  003876  5002               	movf	??_isdigit& (0+255),w,c
  9424  003878  0E3A               	movlw	58
  9425  00387A  6001               	cpfslt	isdigit@c,c
  9426  00387C  D007               	goto	i2l8624
  9427  00387E  0E2F               	movlw	47
  9428  003880  6401               	cpfsgt	isdigit@c,c
  9429  003882  D004               	goto	i2l8624
  9430  003884  6E02               	movwf	??_isdigit& (0+255),c
  9431  003886  0E01               	movlw	1
  9432  003888  6E03               	movwf	_isdigit$894,c
  9433  00388A  5002               	movf	??_isdigit& (0+255),w,c
  9434  00388C                     i2l8624:
  9435  00388C  C003  F002         	movff	_isdigit$894,??_isdigit
  9436  003890  3002               	rrcf	??_isdigit,w,c
  9437  003892  0012               	return	
  9438  003894                     __end_of_isdigit:
  9439                           	opt stack 0
  9440                           tosu	equ	0xFFF
  9441                           tosh	equ	0xFFE
  9442                           tosl	equ	0xFFD
  9443                           pclatu	equ	0xFFB
  9444                           pclath	equ	0xFFA
  9445                           tblptru	equ	0xFF8
  9446                           tblptrh	equ	0xFF7
  9447                           tblptrl	equ	0xFF6
  9448                           tablat	equ	0xFF5
  9449                           prodh	equ	0xFF4
  9450                           prodl	equ	0xFF3
  9451                           intcon	equ	0xFF2
  9452                           intcon2	equ	0xFF1
  9453                           indf0	equ	0xFEF
  9454                           postinc0	equ	0xFEE
  9455                           fsr0h	equ	0xFEA
  9456                           fsr0l	equ	0xFE9
  9457                           wreg	equ	0xFE8
  9458                           postinc1	equ	0xFE6
  9459                           postdec1	equ	0xFE5
  9460                           fsr1h	equ	0xFE2
  9461                           fsr1l	equ	0xFE1
  9462                           indf2	equ	0xFDF
  9463                           postinc2	equ	0xFDE
  9464                           postdec2	equ	0xFDD
  9465                           plusw2	equ	0xFDB
  9466                           fsr2h	equ	0xFDA
  9467                           fsr2l	equ	0xFD9
  9468                           status	equ	0xFD8
  9469                           
  9470 ;; *************** function _scale *****************
  9471 ;; Defined at:
  9472 ;;		line 426 in file "/usr/opt/microchip/xc8/v1.20/sources/common/doprnt.c"
  9473 ;; Parameters:    Size  Location     Type
  9474 ;;  scl             1   54[COMRAM] char 
  9475 ;; Auto vars:     Size  Location     Type
  9476 ;;		None
  9477 ;; Return value:  Size  Location     Type
  9478 ;;                  3   54[COMRAM] char 
  9479 ;; Registers used:
  9480 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9481 ;; Tracked objects:
  9482 ;;		On entry : 0/0
  9483 ;;		On exit  : 0/0
  9484 ;;		Unchanged: 0/0
  9485 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9486 ;;      Params:         3       0       0       0       0       0       0       0       0
  9487 ;;      Locals:         3       0       0       0       0       0       0       0       0
  9488 ;;      Temps:          6       0       0       0       0       0       0       0       0
  9489 ;;      Totals:        12       0       0       0       0       0       0       0       0
  9490 ;;Total ram usage:       12 bytes
  9491 ;; Hardware stack levels used:    1
  9492 ;; Hardware stack levels required when called:    2
  9493 ;; This function calls:
  9494 ;;		___ftmul
  9495 ;;		___awdiv
  9496 ;;		___awmod
  9497 ;;		___wmul
  9498 ;; This function is called by:
  9499 ;;		_sprintf
  9500 ;; This function uses a non-reentrant model
  9501 ;;
  9502                           
  9503                           	psect	text38
  9504  001416                     __ptext38:
  9505                           	opt stack 0
  9506  001416                     _scale:
  9507                           	opt stack 20
  9508                           
  9509                           ;doprnt.c: 428: if(scl < 0) {
  9510                           
  9511                           ;incstack = 0
  9512                           ;incstack = 0
  9513  001416  AE37               	btfss	scale@scl,7,c
  9514  001418  D108               	goto	i2l9332
  9515                           
  9516                           ;doprnt.c: 429: scl = -scl;
  9517  00141A  6C37               	negf	scale@scl,c
  9518                           
  9519                           ;doprnt.c: 430: if(scl>=110)
  9520  00141C  5037               	movf	scale@scl,w,c
  9521  00141E  0A80               	xorlw	128
  9522  001420  0F12               	addlw	-238
  9523  001422  A0D8               	btfss	status,0,c
  9524  001424  D09D               	goto	i2l9322
  9525                           
  9526                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  9527  001426  0E00               	movlw	0
  9528  001428  6E14               	movwf	?___wmul+3,c
  9529  00142A  0E03               	movlw	3
  9530  00142C  6E13               	movwf	?___wmul+2,c
  9531  00142E  0E00               	movlw	0
  9532  001430  6E0B               	movwf	?___awdiv+3,c
  9533  001432  0E0A               	movlw	10
  9534  001434  6E0A               	movwf	?___awdiv+2,c
  9535  001436  0E00               	movlw	0
  9536  001438  6E04               	movwf	?___awmod+3,c
  9537  00143A  0E64               	movlw	100
  9538  00143C  6E03               	movwf	?___awmod+2,c
  9539  00143E  5037               	movf	scale@scl,w,c
  9540  001440  6E01               	movwf	?___awmod,c
  9541  001442  6A02               	clrf	?___awmod+1,c
  9542  001444  BE01               	btfsc	?___awmod,7,c
  9543  001446  0602               	decf	?___awmod+1,f,c
  9544  001448  ECBC  F018         	call	___awmod	;wreg free
  9545  00144C  C001  F008         	movff	?___awmod,?___awdiv
  9546  001450  C002  F009         	movff	?___awmod+1,?___awdiv+1
  9547  001454  EC31  F018         	call	___awdiv	;wreg free
  9548  001458  0E09               	movlw	9
  9549  00145A  2408               	addwf	?___awdiv,w,c
  9550  00145C  6E11               	movwf	?___wmul,c
  9551  00145E  0E00               	movlw	0
  9552  001460  2009               	addwfc	?___awdiv+1,w,c
  9553  001462  6E12               	movwf	?___wmul+1,c
  9554  001464  EC98  F01B         	call	___wmul	;wreg free
  9555  001468  0E07               	movlw	low __npowers_
  9556  00146A  2411               	addwf	?___wmul,w,c
  9557  00146C  6EF6               	movwf	tblptrl,c
  9558  00146E  0E7D               	movlw	high __npowers_
  9559  001470  2012               	addwfc	?___wmul+1,w,c
  9560  001472  6EF7               	movwf	tblptrh,c
  9561  001474  0009               	tblrd		*+
  9562  001476  CFF5 F03A          	movff	tablat,??_scale
  9563  00147A  0009               	tblrd		*+
  9564  00147C  CFF5 F03B          	movff	tablat,??_scale+1
  9565  001480  0009               	tblrd		*+
  9566  001482  CFF5 F03C          	movff	tablat,??_scale+2
  9567  001486  C03C  F02B         	movff	??_scale+2,?___ftmul+5
  9568  00148A  C03B  F02A         	movff	??_scale+1,?___ftmul+4
  9569  00148E  C03A  F029         	movff	??_scale,?___ftmul+3
  9570  001492  0E00               	movlw	0
  9571  001494  6E14               	movwf	?___wmul+3,c
  9572  001496  0E03               	movlw	3
  9573  001498  6E13               	movwf	?___wmul+2,c
  9574  00149A  0E00               	movlw	0
  9575  00149C  6E0B               	movwf	?___awdiv+3,c
  9576  00149E  0E64               	movlw	100
  9577  0014A0  6E0A               	movwf	?___awdiv+2,c
  9578  0014A2  5037               	movf	scale@scl,w,c
  9579  0014A4  6E08               	movwf	?___awdiv,c
  9580  0014A6  6A09               	clrf	?___awdiv+1,c
  9581  0014A8  BE08               	btfsc	?___awdiv,7,c
  9582  0014AA  0609               	decf	?___awdiv+1,f,c
  9583  0014AC  EC31  F018         	call	___awdiv	;wreg free
  9584  0014B0  0E12               	movlw	18
  9585  0014B2  2408               	addwf	?___awdiv,w,c
  9586  0014B4  6E11               	movwf	?___wmul,c
  9587  0014B6  0E00               	movlw	0
  9588  0014B8  2009               	addwfc	?___awdiv+1,w,c
  9589  0014BA  6E12               	movwf	?___wmul+1,c
  9590  0014BC  EC98  F01B         	call	___wmul	;wreg free
  9591  0014C0  0E07               	movlw	low __npowers_
  9592  0014C2  2411               	addwf	?___wmul,w,c
  9593  0014C4  6EF6               	movwf	tblptrl,c
  9594  0014C6  0E7D               	movlw	high __npowers_
  9595  0014C8  2012               	addwfc	?___wmul+1,w,c
  9596  0014CA  6EF7               	movwf	tblptrh,c
  9597  0014CC  0009               	tblrd		*+
  9598  0014CE  CFF5 F03D          	movff	tablat,??_scale+3
  9599  0014D2  0009               	tblrd		*+
  9600  0014D4  CFF5 F03E          	movff	tablat,??_scale+4
  9601  0014D8  0009               	tblrd		*+
  9602  0014DA  CFF5 F03F          	movff	tablat,??_scale+5
  9603  0014DE  C03F  F028         	movff	??_scale+5,?___ftmul+2
  9604  0014E2  C03E  F027         	movff	??_scale+4,?___ftmul+1
  9605  0014E6  C03D  F026         	movff	??_scale+3,?___ftmul
  9606  0014EA  EC70  F013         	call	___ftmul	;wreg free
  9607  0014EE  C028  F042         	movff	?___ftmul+2,_scale$1263+2
  9608  0014F2  C027  F041         	movff	?___ftmul+1,_scale$1263+1
  9609  0014F6  C026  F040         	movff	?___ftmul,_scale$1263
  9610                           
  9611                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  9612  0014FA  C040  F026         	movff	_scale$1263,?___ftmul
  9613  0014FE  C041  F027         	movff	_scale$1263+1,?___ftmul+1
  9614  001502  C042  F028         	movff	_scale$1263+2,?___ftmul+2
  9615  001506  0E00               	movlw	0
  9616  001508  6E14               	movwf	?___wmul+3,c
  9617  00150A  0E03               	movlw	3
  9618  00150C  6E13               	movwf	?___wmul+2,c
  9619  00150E  0E00               	movlw	0
  9620  001510  6E04               	movwf	?___awmod+3,c
  9621  001512  0E0A               	movlw	10
  9622  001514  6E03               	movwf	?___awmod+2,c
  9623  001516  5037               	movf	scale@scl,w,c
  9624  001518  6E01               	movwf	?___awmod,c
  9625  00151A  6A02               	clrf	?___awmod+1,c
  9626  00151C  BE01               	btfsc	?___awmod,7,c
  9627  00151E  0602               	decf	?___awmod+1,f,c
  9628  001520  ECBC  F018         	call	___awmod	;wreg free
  9629  001524  C001  F011         	movff	?___awmod,?___wmul
  9630  001528  C002  F012         	movff	?___awmod+1,?___wmul+1
  9631  00152C  EC98  F01B         	call	___wmul	;wreg free
  9632  001530  0E07               	movlw	low __npowers_
  9633  001532  2411               	addwf	?___wmul,w,c
  9634  001534  6EF6               	movwf	tblptrl,c
  9635  001536  0E7D               	movlw	high __npowers_
  9636  001538  2012               	addwfc	?___wmul+1,w,c
  9637  00153A  6EF7               	movwf	tblptrh,c
  9638  00153C  0009               	tblrd		*+
  9639  00153E  CFF5 F03A          	movff	tablat,??_scale
  9640  001542  0009               	tblrd		*+
  9641  001544  CFF5 F03B          	movff	tablat,??_scale+1
  9642  001548  0009               	tblrd		*+
  9643  00154A  CFF5 F03C          	movff	tablat,??_scale+2
  9644  00154E  C03C  F02B         	movff	??_scale+2,?___ftmul+5
  9645  001552  C03B  F02A         	movff	??_scale+1,?___ftmul+4
  9646  001556  C03A  F029         	movff	??_scale,?___ftmul+3
  9647  00155A  EC70  F013         	call	___ftmul	;wreg free
  9648  00155E  D164               	goto	L16
  9649  001560                     i2l9322:
  9650                           
  9651                           ;doprnt.c: 432: else if(scl > 10)
  9652  001560  5037               	movf	scale@scl,w,c
  9653  001562  0A80               	xorlw	128
  9654  001564  0F75               	addlw	-139
  9655  001566  A0D8               	btfss	status,0,c
  9656  001568  D059               	goto	i2l9328
  9657                           
  9658                           ;doprnt.c: 433: return _npowers_[scl/10+9] * _npowers_[scl%10];
  9659  00156A  0E00               	movlw	0
  9660  00156C  6E14               	movwf	?___wmul+3,c
  9661  00156E  0E03               	movlw	3
  9662  001570  6E13               	movwf	?___wmul+2,c
  9663  001572  0E00               	movlw	0
  9664  001574  6E0B               	movwf	?___awdiv+3,c
  9665  001576  0E0A               	movlw	10
  9666  001578  6E0A               	movwf	?___awdiv+2,c
  9667  00157A  5037               	movf	scale@scl,w,c
  9668  00157C  6E08               	movwf	?___awdiv,c
  9669  00157E  6A09               	clrf	?___awdiv+1,c
  9670  001580  BE08               	btfsc	?___awdiv,7,c
  9671  001582  0609               	decf	?___awdiv+1,f,c
  9672  001584  EC31  F018         	call	___awdiv	;wreg free
  9673  001588  0E09               	movlw	9
  9674  00158A  2408               	addwf	?___awdiv,w,c
  9675  00158C  6E11               	movwf	?___wmul,c
  9676  00158E  0E00               	movlw	0
  9677  001590  2009               	addwfc	?___awdiv+1,w,c
  9678  001592  6E12               	movwf	?___wmul+1,c
  9679  001594  EC98  F01B         	call	___wmul	;wreg free
  9680  001598  0E07               	movlw	low __npowers_
  9681  00159A  2411               	addwf	?___wmul,w,c
  9682  00159C  6EF6               	movwf	tblptrl,c
  9683  00159E  0E7D               	movlw	high __npowers_
  9684  0015A0  2012               	addwfc	?___wmul+1,w,c
  9685  0015A2  6EF7               	movwf	tblptrh,c
  9686  0015A4  0009               	tblrd		*+
  9687  0015A6  CFF5 F03A          	movff	tablat,??_scale
  9688  0015AA  0009               	tblrd		*+
  9689  0015AC  CFF5 F03B          	movff	tablat,??_scale+1
  9690  0015B0  0009               	tblrd		*+
  9691  0015B2  CFF5 F03C          	movff	tablat,??_scale+2
  9692  0015B6  C03C  F028         	movff	??_scale+2,?___ftmul+2
  9693  0015BA  C03B  F027         	movff	??_scale+1,?___ftmul+1
  9694  0015BE  C03A  F026         	movff	??_scale,?___ftmul
  9695  0015C2  0E00               	movlw	0
  9696  0015C4  6E14               	movwf	?___wmul+3,c
  9697  0015C6  0E03               	movlw	3
  9698  0015C8  6E13               	movwf	?___wmul+2,c
  9699  0015CA  0E00               	movlw	0
  9700  0015CC  6E04               	movwf	?___awmod+3,c
  9701  0015CE  0E0A               	movlw	10
  9702  0015D0  6E03               	movwf	?___awmod+2,c
  9703  0015D2  5037               	movf	scale@scl,w,c
  9704  0015D4  6E01               	movwf	?___awmod,c
  9705  0015D6  6A02               	clrf	?___awmod+1,c
  9706  0015D8  BE01               	btfsc	?___awmod,7,c
  9707  0015DA  0602               	decf	?___awmod+1,f,c
  9708  0015DC  ECBC  F018         	call	___awmod	;wreg free
  9709  0015E0  C001  F011         	movff	?___awmod,?___wmul
  9710  0015E4  C002  F012         	movff	?___awmod+1,?___wmul+1
  9711  0015E8  EC98  F01B         	call	___wmul	;wreg free
  9712  0015EC  0E07               	movlw	low __npowers_
  9713  0015EE  2411               	addwf	?___wmul,w,c
  9714  0015F0  6EF6               	movwf	tblptrl,c
  9715  0015F2  0E7D               	movlw	high __npowers_
  9716  0015F4  2012               	addwfc	?___wmul+1,w,c
  9717  0015F6  6EF7               	movwf	tblptrh,c
  9718  0015F8  0009               	tblrd		*+
  9719  0015FA  CFF5 F03D          	movff	tablat,??_scale+3
  9720  0015FE  0009               	tblrd		*+
  9721  001600  CFF5 F03E          	movff	tablat,??_scale+4
  9722  001604  0009               	tblrd		*+
  9723  001606  CFF5 F03F          	movff	tablat,??_scale+5
  9724  00160A  C03F  F02B         	movff	??_scale+5,?___ftmul+5
  9725  00160E  C03E  F02A         	movff	??_scale+4,?___ftmul+4
  9726  001612  C03D  F029         	movff	??_scale+3,?___ftmul+3
  9727  001616  EC70  F013         	call	___ftmul	;wreg free
  9728  00161A  D106               	goto	L16
  9729  00161C                     i2l9328:
  9730                           
  9731                           ;doprnt.c: 434: return _npowers_[scl];
  9732  00161C  5037               	movf	scale@scl,w,c
  9733  00161E  0D03               	mullw	3
  9734  001620  0E07               	movlw	low __npowers_
  9735  001622  24F3               	addwf	prodl,w,c
  9736  001624  6EF6               	movwf	tblptrl,c
  9737  001626  0E7D               	movlw	high __npowers_
  9738  001628  D10C               	goto	L15
  9739  00162A                     i2l9332:
  9740                           
  9741                           ;doprnt.c: 435: }
  9742                           ;doprnt.c: 436: if(scl>=110)
  9743  00162A  5037               	movf	scale@scl,w,c
  9744  00162C  0A80               	xorlw	128
  9745  00162E  0F12               	addlw	-238
  9746  001630  A0D8               	btfss	status,0,c
  9747  001632  D09D               	goto	i2l9340
  9748                           
  9749                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  9750  001634  0E00               	movlw	0
  9751  001636  6E14               	movwf	?___wmul+3,c
  9752  001638  0E03               	movlw	3
  9753  00163A  6E13               	movwf	?___wmul+2,c
  9754  00163C  0E00               	movlw	0
  9755  00163E  6E0B               	movwf	?___awdiv+3,c
  9756  001640  0E0A               	movlw	10
  9757  001642  6E0A               	movwf	?___awdiv+2,c
  9758  001644  0E00               	movlw	0
  9759  001646  6E04               	movwf	?___awmod+3,c
  9760  001648  0E64               	movlw	100
  9761  00164A  6E03               	movwf	?___awmod+2,c
  9762  00164C  5037               	movf	scale@scl,w,c
  9763  00164E  6E01               	movwf	?___awmod,c
  9764  001650  6A02               	clrf	?___awmod+1,c
  9765  001652  BE01               	btfsc	?___awmod,7,c
  9766  001654  0602               	decf	?___awmod+1,f,c
  9767  001656  ECBC  F018         	call	___awmod	;wreg free
  9768  00165A  C001  F008         	movff	?___awmod,?___awdiv
  9769  00165E  C002  F009         	movff	?___awmod+1,?___awdiv+1
  9770  001662  EC31  F018         	call	___awdiv	;wreg free
  9771  001666  0E09               	movlw	9
  9772  001668  2408               	addwf	?___awdiv,w,c
  9773  00166A  6E11               	movwf	?___wmul,c
  9774  00166C  0E00               	movlw	0
  9775  00166E  2009               	addwfc	?___awdiv+1,w,c
  9776  001670  6E12               	movwf	?___wmul+1,c
  9777  001672  EC98  F01B         	call	___wmul	;wreg free
  9778  001676  0E2E               	movlw	low __powers_
  9779  001678  2411               	addwf	?___wmul,w,c
  9780  00167A  6EF6               	movwf	tblptrl,c
  9781  00167C  0E7D               	movlw	high __powers_
  9782  00167E  2012               	addwfc	?___wmul+1,w,c
  9783  001680  6EF7               	movwf	tblptrh,c
  9784  001682  0009               	tblrd		*+
  9785  001684  CFF5 F03A          	movff	tablat,??_scale
  9786  001688  0009               	tblrd		*+
  9787  00168A  CFF5 F03B          	movff	tablat,??_scale+1
  9788  00168E  0009               	tblrd		*+
  9789  001690  CFF5 F03C          	movff	tablat,??_scale+2
  9790  001694  C03C  F02B         	movff	??_scale+2,?___ftmul+5
  9791  001698  C03B  F02A         	movff	??_scale+1,?___ftmul+4
  9792  00169C  C03A  F029         	movff	??_scale,?___ftmul+3
  9793  0016A0  0E00               	movlw	0
  9794  0016A2  6E14               	movwf	?___wmul+3,c
  9795  0016A4  0E03               	movlw	3
  9796  0016A6  6E13               	movwf	?___wmul+2,c
  9797  0016A8  0E00               	movlw	0
  9798  0016AA  6E0B               	movwf	?___awdiv+3,c
  9799  0016AC  0E64               	movlw	100
  9800  0016AE  6E0A               	movwf	?___awdiv+2,c
  9801  0016B0  5037               	movf	scale@scl,w,c
  9802  0016B2  6E08               	movwf	?___awdiv,c
  9803  0016B4  6A09               	clrf	?___awdiv+1,c
  9804  0016B6  BE08               	btfsc	?___awdiv,7,c
  9805  0016B8  0609               	decf	?___awdiv+1,f,c
  9806  0016BA  EC31  F018         	call	___awdiv	;wreg free
  9807  0016BE  0E12               	movlw	18
  9808  0016C0  2408               	addwf	?___awdiv,w,c
  9809  0016C2  6E11               	movwf	?___wmul,c
  9810  0016C4  0E00               	movlw	0
  9811  0016C6  2009               	addwfc	?___awdiv+1,w,c
  9812  0016C8  6E12               	movwf	?___wmul+1,c
  9813  0016CA  EC98  F01B         	call	___wmul	;wreg free
  9814  0016CE  0E2E               	movlw	low __powers_
  9815  0016D0  2411               	addwf	?___wmul,w,c
  9816  0016D2  6EF6               	movwf	tblptrl,c
  9817  0016D4  0E7D               	movlw	high __powers_
  9818  0016D6  2012               	addwfc	?___wmul+1,w,c
  9819  0016D8  6EF7               	movwf	tblptrh,c
  9820  0016DA  0009               	tblrd		*+
  9821  0016DC  CFF5 F03D          	movff	tablat,??_scale+3
  9822  0016E0  0009               	tblrd		*+
  9823  0016E2  CFF5 F03E          	movff	tablat,??_scale+4
  9824  0016E6  0009               	tblrd		*+
  9825  0016E8  CFF5 F03F          	movff	tablat,??_scale+5
  9826  0016EC  C03F  F028         	movff	??_scale+5,?___ftmul+2
  9827  0016F0  C03E  F027         	movff	??_scale+4,?___ftmul+1
  9828  0016F4  C03D  F026         	movff	??_scale+3,?___ftmul
  9829  0016F8  EC70  F013         	call	___ftmul	;wreg free
  9830  0016FC  C028  F042         	movff	?___ftmul+2,_scale$1263+2
  9831  001700  C027  F041         	movff	?___ftmul+1,_scale$1263+1
  9832  001704  C026  F040         	movff	?___ftmul,_scale$1263
  9833                           
  9834                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  9835  001708  C040  F026         	movff	_scale$1263,?___ftmul
  9836  00170C  C041  F027         	movff	_scale$1263+1,?___ftmul+1
  9837  001710  C042  F028         	movff	_scale$1263+2,?___ftmul+2
  9838  001714  0E00               	movlw	0
  9839  001716  6E14               	movwf	?___wmul+3,c
  9840  001718  0E03               	movlw	3
  9841  00171A  6E13               	movwf	?___wmul+2,c
  9842  00171C  0E00               	movlw	0
  9843  00171E  6E04               	movwf	?___awmod+3,c
  9844  001720  0E0A               	movlw	10
  9845  001722  6E03               	movwf	?___awmod+2,c
  9846  001724  5037               	movf	scale@scl,w,c
  9847  001726  6E01               	movwf	?___awmod,c
  9848  001728  6A02               	clrf	?___awmod+1,c
  9849  00172A  BE01               	btfsc	?___awmod,7,c
  9850  00172C  0602               	decf	?___awmod+1,f,c
  9851  00172E  ECBC  F018         	call	___awmod	;wreg free
  9852  001732  C001  F011         	movff	?___awmod,?___wmul
  9853  001736  C002  F012         	movff	?___awmod+1,?___wmul+1
  9854  00173A  EC98  F01B         	call	___wmul	;wreg free
  9855  00173E  0E2E               	movlw	low __powers_
  9856  001740  2411               	addwf	?___wmul,w,c
  9857  001742  6EF6               	movwf	tblptrl,c
  9858  001744  0E7D               	movlw	high __powers_
  9859  001746  2012               	addwfc	?___wmul+1,w,c
  9860  001748  6EF7               	movwf	tblptrh,c
  9861  00174A  0009               	tblrd		*+
  9862  00174C  CFF5 F03A          	movff	tablat,??_scale
  9863  001750  0009               	tblrd		*+
  9864  001752  CFF5 F03B          	movff	tablat,??_scale+1
  9865  001756  0009               	tblrd		*+
  9866  001758  CFF5 F03C          	movff	tablat,??_scale+2
  9867  00175C  C03C  F02B         	movff	??_scale+2,?___ftmul+5
  9868  001760  C03B  F02A         	movff	??_scale+1,?___ftmul+4
  9869  001764  C03A  F029         	movff	??_scale,?___ftmul+3
  9870  001768  EC70  F013         	call	___ftmul	;wreg free
  9871  00176C  D05D               	goto	L16
  9872  00176E                     i2l9340:
  9873                           
  9874                           ;doprnt.c: 438: else if(scl > 10)
  9875  00176E  5037               	movf	scale@scl,w,c
  9876  001770  0A80               	xorlw	128
  9877  001772  0F75               	addlw	-139
  9878  001774  A0D8               	btfss	status,0,c
  9879  001776  D05F               	goto	i2l9346
  9880                           
  9881                           ;doprnt.c: 439: return _powers_[scl/10+9] * _powers_[scl%10];
  9882  001778  0E00               	movlw	0
  9883  00177A  6E14               	movwf	?___wmul+3,c
  9884  00177C  0E03               	movlw	3
  9885  00177E  6E13               	movwf	?___wmul+2,c
  9886  001780  0E00               	movlw	0
  9887  001782  6E0B               	movwf	?___awdiv+3,c
  9888  001784  0E0A               	movlw	10
  9889  001786  6E0A               	movwf	?___awdiv+2,c
  9890  001788  5037               	movf	scale@scl,w,c
  9891  00178A  6E08               	movwf	?___awdiv,c
  9892  00178C  6A09               	clrf	?___awdiv+1,c
  9893  00178E  BE08               	btfsc	?___awdiv,7,c
  9894  001790  0609               	decf	?___awdiv+1,f,c
  9895  001792  EC31  F018         	call	___awdiv	;wreg free
  9896  001796  0E09               	movlw	9
  9897  001798  2408               	addwf	?___awdiv,w,c
  9898  00179A  6E11               	movwf	?___wmul,c
  9899  00179C  0E00               	movlw	0
  9900  00179E  2009               	addwfc	?___awdiv+1,w,c
  9901  0017A0  6E12               	movwf	?___wmul+1,c
  9902  0017A2  EC98  F01B         	call	___wmul	;wreg free
  9903  0017A6  0E2E               	movlw	low __powers_
  9904  0017A8  2411               	addwf	?___wmul,w,c
  9905  0017AA  6EF6               	movwf	tblptrl,c
  9906  0017AC  0E7D               	movlw	high __powers_
  9907  0017AE  2012               	addwfc	?___wmul+1,w,c
  9908  0017B0  6EF7               	movwf	tblptrh,c
  9909  0017B2  0009               	tblrd		*+
  9910  0017B4  CFF5 F03A          	movff	tablat,??_scale
  9911  0017B8  0009               	tblrd		*+
  9912  0017BA  CFF5 F03B          	movff	tablat,??_scale+1
  9913  0017BE  0009               	tblrd		*+
  9914  0017C0  CFF5 F03C          	movff	tablat,??_scale+2
  9915  0017C4  C03C  F028         	movff	??_scale+2,?___ftmul+2
  9916  0017C8  C03B  F027         	movff	??_scale+1,?___ftmul+1
  9917  0017CC  C03A  F026         	movff	??_scale,?___ftmul
  9918  0017D0  0E00               	movlw	0
  9919  0017D2  6E14               	movwf	?___wmul+3,c
  9920  0017D4  0E03               	movlw	3
  9921  0017D6  6E13               	movwf	?___wmul+2,c
  9922  0017D8  0E00               	movlw	0
  9923  0017DA  6E04               	movwf	?___awmod+3,c
  9924  0017DC  0E0A               	movlw	10
  9925  0017DE  6E03               	movwf	?___awmod+2,c
  9926  0017E0  5037               	movf	scale@scl,w,c
  9927  0017E2  6E01               	movwf	?___awmod,c
  9928  0017E4  6A02               	clrf	?___awmod+1,c
  9929  0017E6  BE01               	btfsc	?___awmod,7,c
  9930  0017E8  0602               	decf	?___awmod+1,f,c
  9931  0017EA  ECBC  F018         	call	___awmod	;wreg free
  9932  0017EE  C001  F011         	movff	?___awmod,?___wmul
  9933  0017F2  C002  F012         	movff	?___awmod+1,?___wmul+1
  9934  0017F6  EC98  F01B         	call	___wmul	;wreg free
  9935  0017FA  0E2E               	movlw	low __powers_
  9936  0017FC  2411               	addwf	?___wmul,w,c
  9937  0017FE  6EF6               	movwf	tblptrl,c
  9938  001800  0E7D               	movlw	high __powers_
  9939  001802  2012               	addwfc	?___wmul+1,w,c
  9940  001804  6EF7               	movwf	tblptrh,c
  9941  001806  0009               	tblrd		*+
  9942  001808  CFF5 F03D          	movff	tablat,??_scale+3
  9943  00180C  0009               	tblrd		*+
  9944  00180E  CFF5 F03E          	movff	tablat,??_scale+4
  9945  001812  0009               	tblrd		*+
  9946  001814  CFF5 F03F          	movff	tablat,??_scale+5
  9947  001818  C03F  F02B         	movff	??_scale+5,?___ftmul+5
  9948  00181C  C03E  F02A         	movff	??_scale+4,?___ftmul+4
  9949  001820  C03D  F029         	movff	??_scale+3,?___ftmul+3
  9950  001824  EC70  F013         	call	___ftmul	;wreg free
  9951  001828                     L16:
  9952  001828  C028  F039         	movff	?___ftmul+2,?_scale+2
  9953  00182C  C027  F038         	movff	?___ftmul+1,?_scale+1
  9954  001830  C026  F037         	movff	?___ftmul,?_scale
  9955  001834  D017               	goto	i2l492
  9956  001836                     i2l9346:
  9957                           
  9958                           ;doprnt.c: 440: return _powers_[scl];
  9959  001836  5037               	movf	scale@scl,w,c
  9960  001838  0D03               	mullw	3
  9961  00183A  0E2E               	movlw	low __powers_
  9962  00183C  24F3               	addwf	prodl,w,c
  9963  00183E  6EF6               	movwf	tblptrl,c
  9964  001840  0E7D               	movlw	high __powers_
  9965  001842                     L15:
  9966  001842  20F4               	addwfc	prodh,w,c
  9967  001844  6EF7               	movwf	tblptrh,c
  9968  001846  0009               	tblrd		*+
  9969  001848  CFF5 F03A          	movff	tablat,??_scale
  9970  00184C  0009               	tblrd		*+
  9971  00184E  CFF5 F03B          	movff	tablat,??_scale+1
  9972  001852  0009               	tblrd		*+
  9973  001854  CFF5 F03C          	movff	tablat,??_scale+2
  9974  001858  C03C  F039         	movff	??_scale+2,?_scale+2
  9975  00185C  C03B  F038         	movff	??_scale+1,?_scale+1
  9976  001860  C03A  F037         	movff	??_scale,?_scale
  9977  001864                     i2l492:
  9978  001864  0012               	return	
  9979  001866                     __end_of_scale:
  9980                           	opt stack 0
  9981                           tosu	equ	0xFFF
  9982                           tosh	equ	0xFFE
  9983                           tosl	equ	0xFFD
  9984                           pclatu	equ	0xFFB
  9985                           pclath	equ	0xFFA
  9986                           tblptru	equ	0xFF8
  9987                           tblptrh	equ	0xFF7
  9988                           tblptrl	equ	0xFF6
  9989                           tablat	equ	0xFF5
  9990                           prodh	equ	0xFF4
  9991                           prodl	equ	0xFF3
  9992                           intcon	equ	0xFF2
  9993                           intcon2	equ	0xFF1
  9994                           indf0	equ	0xFEF
  9995                           postinc0	equ	0xFEE
  9996                           fsr0h	equ	0xFEA
  9997                           fsr0l	equ	0xFE9
  9998                           wreg	equ	0xFE8
  9999                           postinc1	equ	0xFE6
 10000                           postdec1	equ	0xFE5
 10001                           fsr1h	equ	0xFE2
 10002                           fsr1l	equ	0xFE1
 10003                           indf2	equ	0xFDF
 10004                           postinc2	equ	0xFDE
 10005                           postdec2	equ	0xFDD
 10006                           plusw2	equ	0xFDB
 10007                           fsr2h	equ	0xFDA
 10008                           fsr2l	equ	0xFD9
 10009                           status	equ	0xFD8
 10010                           
 10011 ;; *************** function ___awdiv *****************
 10012 ;; Defined at:
 10013 ;;		line 10 in file "/usr/opt/microchip/xc8/v1.20/sources/common/awdiv.c"
 10014 ;; Parameters:    Size  Location     Type
 10015 ;;  dividend        2    7[COMRAM] int 
 10016 ;;  divisor         2    9[COMRAM] int 
 10017 ;; Auto vars:     Size  Location     Type
 10018 ;;  quotient        2   14[COMRAM] int 
 10019 ;;  sign            1   13[COMRAM] unsigned char 
 10020 ;;  counter         1   12[COMRAM] unsigned char 
 10021 ;; Return value:  Size  Location     Type
 10022 ;;                  2    7[COMRAM] int 
 10023 ;; Registers used:
 10024 ;;		wreg, status,2, status,0
 10025 ;; Tracked objects:
 10026 ;;		On entry : 0/0
 10027 ;;		On exit  : 0/0
 10028 ;;		Unchanged: 0/0
 10029 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10030 ;;      Params:         4       0       0       0       0       0       0       0       0
 10031 ;;      Locals:         4       0       0       0       0       0       0       0       0
 10032 ;;      Temps:          1       0       0       0       0       0       0       0       0
 10033 ;;      Totals:         9       0       0       0       0       0       0       0       0
 10034 ;;Total ram usage:        9 bytes
 10035 ;; Hardware stack levels used:    1
 10036 ;; This function calls:
 10037 ;;		Nothing
 10038 ;; This function is called by:
 10039 ;;		_fround
 10040 ;;		_scale
 10041 ;;		_sprintf
 10042 ;;		_dayOfWeek
 10043 ;; This function uses a non-reentrant model
 10044 ;;
 10045                           
 10046                           	psect	text39
 10047  003062                     __ptext39:
 10048                           	opt stack 0
 10049  003062                     ___awdiv:
 10050                           	opt stack 22
 10051                           
 10052                           ;incstack = 0
 10053                           ;incstack = 0
 10054  003062  6E0C               	movwf	??___awdiv& (0+255),c
 10055  003064  0E00               	movlw	0
 10056  003066  6E0E               	movwf	___awdiv@sign,c
 10057  003068  500C               	movf	??___awdiv& (0+255),w,c
 10058  00306A  AE0B               	btfss	___awdiv@divisor+1,7,c
 10059  00306C  D008               	goto	i2l8986
 10060  00306E  6C0A               	negf	___awdiv@divisor,c
 10061  003070  1E0B               	comf	___awdiv@divisor+1,f,c
 10062  003072  B0D8               	btfsc	status,0,c
 10063  003074  2A0B               	incf	___awdiv@divisor+1,f,c
 10064  003076  6E0C               	movwf	??___awdiv& (0+255),c
 10065  003078  0E01               	movlw	1
 10066  00307A  6E0E               	movwf	___awdiv@sign,c
 10067  00307C  500C               	movf	??___awdiv& (0+255),w,c
 10068  00307E                     i2l8986:
 10069  00307E  AE09               	btfss	___awdiv@dividend+1,7,c
 10070  003080  D006               	goto	i2l8992
 10071  003082  6C08               	negf	___awdiv@dividend,c
 10072  003084  1E09               	comf	___awdiv@dividend+1,f,c
 10073  003086  B0D8               	btfsc	status,0,c
 10074  003088  2A09               	incf	___awdiv@dividend+1,f,c
 10075  00308A  0E01               	movlw	1
 10076  00308C  1A0E               	xorwf	___awdiv@sign,f,c
 10077  00308E                     i2l8992:
 10078  00308E  0E00               	movlw	0
 10079  003090  6E10               	movwf	___awdiv@quotient+1,c
 10080  003092  0E00               	movlw	0
 10081  003094  6E0F               	movwf	___awdiv@quotient,c
 10082  003096  500B               	movf	___awdiv@divisor+1,w,c
 10083  003098  100A               	iorwf	___awdiv@divisor,w,c
 10084  00309A  B4D8               	btfsc	status,2,c
 10085  00309C  D01E               	goto	i2l9014
 10086  00309E  6E0C               	movwf	??___awdiv& (0+255),c
 10087  0030A0  0E01               	movlw	1
 10088  0030A2  6E0D               	movwf	___awdiv@counter,c
 10089  0030A4  500C               	movf	??___awdiv& (0+255),w,c
 10090  0030A6  D004               	goto	i2l9000
 10091  0030A8                     i2l8998:
 10092  0030A8  90D8               	bcf	status,0,c
 10093  0030AA  360A               	rlcf	___awdiv@divisor,f,c
 10094  0030AC  360B               	rlcf	___awdiv@divisor+1,f,c
 10095  0030AE  2A0D               	incf	___awdiv@counter,f,c
 10096  0030B0                     i2l9000:
 10097  0030B0  AE0B               	btfss	___awdiv@divisor+1,7,c
 10098  0030B2  D7FA               	goto	i2l8998
 10099  0030B4                     i2l9002:
 10100  0030B4  90D8               	bcf	status,0,c
 10101  0030B6  360F               	rlcf	___awdiv@quotient,f,c
 10102  0030B8  3610               	rlcf	___awdiv@quotient+1,f,c
 10103  0030BA  500A               	movf	___awdiv@divisor,w,c
 10104  0030BC  5C08               	subwf	___awdiv@dividend,w,c
 10105  0030BE  500B               	movf	___awdiv@divisor+1,w,c
 10106  0030C0  5809               	subwfb	___awdiv@dividend+1,w,c
 10107  0030C2  A0D8               	btfss	status,0,c
 10108  0030C4  D005               	goto	i2l9010
 10109  0030C6  500A               	movf	___awdiv@divisor,w,c
 10110  0030C8  5E08               	subwf	___awdiv@dividend,f,c
 10111  0030CA  500B               	movf	___awdiv@divisor+1,w,c
 10112  0030CC  5A09               	subwfb	___awdiv@dividend+1,f,c
 10113  0030CE  800F               	bsf	___awdiv@quotient,0,c
 10114  0030D0                     i2l9010:
 10115  0030D0  90D8               	bcf	status,0,c
 10116  0030D2  320B               	rrcf	___awdiv@divisor+1,f,c
 10117  0030D4  320A               	rrcf	___awdiv@divisor,f,c
 10118  0030D6  2E0D               	decfsz	___awdiv@counter,f,c
 10119  0030D8  D7ED               	goto	i2l9002
 10120  0030DA                     i2l9014:
 10121  0030DA  500E               	movf	___awdiv@sign,w,c
 10122  0030DC  B4D8               	btfsc	status,2,c
 10123  0030DE  D004               	goto	i2l9018
 10124  0030E0  6C0F               	negf	___awdiv@quotient,c
 10125  0030E2  1E10               	comf	___awdiv@quotient+1,f,c
 10126  0030E4  B0D8               	btfsc	status,0,c
 10127  0030E6  2A10               	incf	___awdiv@quotient+1,f,c
 10128  0030E8                     i2l9018:
 10129  0030E8  C00F  F008         	movff	___awdiv@quotient,?___awdiv
 10130  0030EC  C010  F009         	movff	___awdiv@quotient+1,?___awdiv+1
 10131  0030F0  0012               	return	
 10132  0030F2                     __end_of___awdiv:
 10133                           	opt stack 0
 10134                           tosu	equ	0xFFF
 10135                           tosh	equ	0xFFE
 10136                           tosl	equ	0xFFD
 10137                           pclatu	equ	0xFFB
 10138                           pclath	equ	0xFFA
 10139                           tblptru	equ	0xFF8
 10140                           tblptrh	equ	0xFF7
 10141                           tblptrl	equ	0xFF6
 10142                           tablat	equ	0xFF5
 10143                           prodh	equ	0xFF4
 10144                           prodl	equ	0xFF3
 10145                           intcon	equ	0xFF2
 10146                           intcon2	equ	0xFF1
 10147                           indf0	equ	0xFEF
 10148                           postinc0	equ	0xFEE
 10149                           fsr0h	equ	0xFEA
 10150                           fsr0l	equ	0xFE9
 10151                           wreg	equ	0xFE8
 10152                           postinc1	equ	0xFE6
 10153                           postdec1	equ	0xFE5
 10154                           fsr1h	equ	0xFE2
 10155                           fsr1l	equ	0xFE1
 10156                           indf2	equ	0xFDF
 10157                           postinc2	equ	0xFDE
 10158                           postdec2	equ	0xFDD
 10159                           plusw2	equ	0xFDB
 10160                           fsr2h	equ	0xFDA
 10161                           fsr2l	equ	0xFD9
 10162                           status	equ	0xFD8
 10163                           
 10164 ;; *************** function ___ftmul *****************
 10165 ;; Defined at:
 10166 ;;		line 52 in file "/usr/opt/microchip/xc8/v1.20/sources/common/ftmul.c"
 10167 ;; Parameters:    Size  Location     Type
 10168 ;;  f1              3   37[COMRAM] float 
 10169 ;;  f2              3   40[COMRAM] float 
 10170 ;; Auto vars:     Size  Location     Type
 10171 ;;  f3_as_produc    3   49[COMRAM] unsigned um
 10172 ;;  sign            1   53[COMRAM] unsigned char 
 10173 ;;  cntr            1   52[COMRAM] unsigned char 
 10174 ;;  exp             1   48[COMRAM] unsigned char 
 10175 ;; Return value:  Size  Location     Type
 10176 ;;                  3   37[COMRAM] float 
 10177 ;; Registers used:
 10178 ;;		wreg, status,2, status,0, cstack
 10179 ;; Tracked objects:
 10180 ;;		On entry : 0/0
 10181 ;;		On exit  : 0/0
 10182 ;;		Unchanged: 0/0
 10183 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10184 ;;      Params:         6       0       0       0       0       0       0       0       0
 10185 ;;      Locals:         6       0       0       0       0       0       0       0       0
 10186 ;;      Temps:          5       0       0       0       0       0       0       0       0
 10187 ;;      Totals:        17       0       0       0       0       0       0       0       0
 10188 ;;Total ram usage:       17 bytes
 10189 ;; Hardware stack levels used:    1
 10190 ;; Hardware stack levels required when called:    1
 10191 ;; This function calls:
 10192 ;;		___ftpack
 10193 ;; This function is called by:
 10194 ;;		_getTemp
 10195 ;;		_fround
 10196 ;;		_scale
 10197 ;;		_sprintf
 10198 ;;		___asftmul
 10199 ;; This function uses a non-reentrant model
 10200 ;;
 10201                           
 10202                           	psect	text40
 10203  0026E0                     __ptext40:
 10204                           	opt stack 0
 10205  0026E0                     ___ftmul:
 10206                           	opt stack 22
 10207                           
 10208                           ;incstack = 0
 10209                           ;incstack = 0
 10210  0026E0  0E0F               	movlw	15
 10211  0026E2  6E2C               	movwf	??___ftmul& (0+255),c
 10212  0026E4  C026  F02D         	movff	___ftmul@f1,??___ftmul+1
 10213  0026E8  C027  F02E         	movff	___ftmul@f1+1,??___ftmul+2
 10214  0026EC  C028  F02F         	movff	___ftmul@f1+2,??___ftmul+3
 10215  0026F0  282C               	incf	??___ftmul,w,c
 10216  0026F2  6E30               	movwf	(??___ftmul+4)& (0+255),c
 10217  0026F4  D004               	goto	i2u791_40
 10218  0026F6                     i2u791_45:
 10219  0026F6  90D8               	bcf	status,0,c
 10220  0026F8  322F               	rrcf	??___ftmul+3,f,c
 10221  0026FA  322E               	rrcf	??___ftmul+2,f,c
 10222  0026FC  322D               	rrcf	??___ftmul+1,f,c
 10223  0026FE                     i2u791_40:
 10224  0026FE  2E30               	decfsz	(??___ftmul+4)& (0+255),f,c
 10225  002700  D7FA               	goto	i2u791_45
 10226  002702  502D               	movf	??___ftmul+1,w,c
 10227  002704  6E31               	movwf	___ftmul@exp,c
 10228  002706  6631               	tstfsz	___ftmul@exp& (0+255),c
 10229  002708  D001               	goto	i2l9134
 10230  00270A  D015               	goto	i2u794_40
 10231  00270C                     i2l9134:
 10232  00270C  0E0F               	movlw	15
 10233  00270E  6E2C               	movwf	??___ftmul& (0+255),c
 10234  002710  C029  F02D         	movff	___ftmul@f2,??___ftmul+1
 10235  002714  C02A  F02E         	movff	___ftmul@f2+1,??___ftmul+2
 10236  002718  C02B  F02F         	movff	___ftmul@f2+2,??___ftmul+3
 10237  00271C  282C               	incf	??___ftmul,w,c
 10238  00271E  6E30               	movwf	(??___ftmul+4)& (0+255),c
 10239  002720  D004               	goto	i2u793_40
 10240  002722                     i2u793_45:
 10241  002722  90D8               	bcf	status,0,c
 10242  002724  322F               	rrcf	??___ftmul+3,f,c
 10243  002726  322E               	rrcf	??___ftmul+2,f,c
 10244  002728  322D               	rrcf	??___ftmul+1,f,c
 10245  00272A                     i2u793_40:
 10246  00272A  2E30               	decfsz	(??___ftmul+4)& (0+255),f,c
 10247  00272C  D7FA               	goto	i2u793_45
 10248  00272E  502D               	movf	??___ftmul+1,w,c
 10249  002730  6E36               	movwf	___ftmul@sign,c
 10250  002732  6636               	tstfsz	___ftmul@sign& (0+255),c
 10251  002734  D007               	goto	i2l9140
 10252  002736                     i2u794_40:
 10253  002736  0E00               	movlw	0
 10254  002738  6E26               	movwf	?___ftmul,c
 10255  00273A  0E00               	movlw	0
 10256  00273C  6E27               	movwf	?___ftmul+1,c
 10257  00273E  0E00               	movlw	0
 10258  002740  6E28               	movwf	?___ftmul+2,c
 10259  002742  D055               	goto	i2l1037
 10260  002744                     i2l9140:
 10261  002744  5036               	movf	___ftmul@sign,w,c
 10262  002746  0F7B               	addlw	123
 10263  002748  2631               	addwf	___ftmul@exp,f,c
 10264  00274A  C028  F036         	movff	___ftmul@f1+2,___ftmul@sign
 10265  00274E  502B               	movf	(___ftmul@f2+2)& (0+255),w,c
 10266  002750  1A36               	xorwf	___ftmul@sign,f,c
 10267  002752  0E80               	movlw	128
 10268  002754  1636               	andwf	___ftmul@sign,f,c
 10269  002756  8E27               	bsf	___ftmul@f1+1,7,c
 10270  002758  8E2A               	bsf	___ftmul@f2+1,7,c
 10271  00275A  0EFF               	movlw	255
 10272  00275C  1629               	andwf	___ftmul@f2,f,c
 10273  00275E  0EFF               	movlw	255
 10274  002760  162A               	andwf	___ftmul@f2+1,f,c
 10275  002762  0E00               	movlw	0
 10276  002764  162B               	andwf	___ftmul@f2+2,f,c
 10277  002766  0E00               	movlw	0
 10278  002768  6E32               	movwf	___ftmul@f3_as_product,c
 10279  00276A  0E00               	movlw	0
 10280  00276C  6E33               	movwf	___ftmul@f3_as_product+1,c
 10281  00276E  0E00               	movlw	0
 10282  002770  6E34               	movwf	___ftmul@f3_as_product+2,c
 10283  002772  6E2C               	movwf	??___ftmul& (0+255),c
 10284  002774  0E07               	movlw	7
 10285  002776  6E35               	movwf	___ftmul@cntr,c
 10286  002778  502C               	movf	??___ftmul& (0+255),w,c
 10287  00277A                     i2l9154:
 10288  00277A  A026               	btfss	___ftmul@f1,0,c
 10289  00277C  D006               	goto	i2l9158
 10290  00277E  5029               	movf	___ftmul@f2,w,c
 10291  002780  2632               	addwf	___ftmul@f3_as_product,f,c
 10292  002782  502A               	movf	___ftmul@f2+1,w,c
 10293  002784  2233               	addwfc	___ftmul@f3_as_product+1,f,c
 10294  002786  502B               	movf	___ftmul@f2+2,w,c
 10295  002788  2234               	addwfc	___ftmul@f3_as_product+2,f,c
 10296  00278A                     i2l9158:
 10297  00278A  90D8               	bcf	status,0,c
 10298  00278C  3228               	rrcf	___ftmul@f1+2,f,c
 10299  00278E  3227               	rrcf	___ftmul@f1+1,f,c
 10300  002790  3226               	rrcf	___ftmul@f1,f,c
 10301  002792  90D8               	bcf	status,0,c
 10302  002794  3629               	rlcf	___ftmul@f2,f,c
 10303  002796  362A               	rlcf	___ftmul@f2+1,f,c
 10304  002798  362B               	rlcf	___ftmul@f2+2,f,c
 10305  00279A  2E35               	decfsz	___ftmul@cntr,f,c
 10306  00279C  D7EE               	goto	i2l9154
 10307  00279E  6E2C               	movwf	??___ftmul& (0+255),c
 10308  0027A0  0E09               	movlw	9
 10309  0027A2  6E35               	movwf	___ftmul@cntr,c
 10310  0027A4  502C               	movf	??___ftmul& (0+255),w,c
 10311  0027A6                     i2l9164:
 10312  0027A6  A026               	btfss	___ftmul@f1,0,c
 10313  0027A8  D006               	goto	i2l9168
 10314  0027AA  5029               	movf	___ftmul@f2,w,c
 10315  0027AC  2632               	addwf	___ftmul@f3_as_product,f,c
 10316  0027AE  502A               	movf	___ftmul@f2+1,w,c
 10317  0027B0  2233               	addwfc	___ftmul@f3_as_product+1,f,c
 10318  0027B2  502B               	movf	___ftmul@f2+2,w,c
 10319  0027B4  2234               	addwfc	___ftmul@f3_as_product+2,f,c
 10320  0027B6                     i2l9168:
 10321  0027B6  90D8               	bcf	status,0,c
 10322  0027B8  3228               	rrcf	___ftmul@f1+2,f,c
 10323  0027BA  3227               	rrcf	___ftmul@f1+1,f,c
 10324  0027BC  3226               	rrcf	___ftmul@f1,f,c
 10325  0027BE  90D8               	bcf	status,0,c
 10326  0027C0  3234               	rrcf	___ftmul@f3_as_product+2,f,c
 10327  0027C2  3233               	rrcf	___ftmul@f3_as_product+1,f,c
 10328  0027C4  3232               	rrcf	___ftmul@f3_as_product,f,c
 10329  0027C6  2E35               	decfsz	___ftmul@cntr,f,c
 10330  0027C8  D7EE               	goto	i2l9164
 10331  0027CA  C032  F001         	movff	___ftmul@f3_as_product,?___ftpack
 10332  0027CE  C033  F002         	movff	___ftmul@f3_as_product+1,?___ftpack+1
 10333  0027D2  C034  F003         	movff	___ftmul@f3_as_product+2,?___ftpack+2
 10334  0027D6  C031  F004         	movff	___ftmul@exp,?___ftpack+3
 10335  0027DA  C036  F005         	movff	___ftmul@sign,?___ftpack+4
 10336  0027DE  EC48  F016         	call	___ftpack	;wreg free
 10337  0027E2  C003  F028         	movff	?___ftpack+2,?___ftmul+2
 10338  0027E6  C002  F027         	movff	?___ftpack+1,?___ftmul+1
 10339  0027EA  C001  F026         	movff	?___ftpack,?___ftmul
 10340  0027EE                     i2l1037:
 10341  0027EE  0012               	return	
 10342  0027F0                     __end_of___ftmul:
 10343                           	opt stack 0
 10344                           tosu	equ	0xFFF
 10345                           tosh	equ	0xFFE
 10346                           tosl	equ	0xFFD
 10347                           pclatu	equ	0xFFB
 10348                           pclath	equ	0xFFA
 10349                           tblptru	equ	0xFF8
 10350                           tblptrh	equ	0xFF7
 10351                           tblptrl	equ	0xFF6
 10352                           tablat	equ	0xFF5
 10353                           prodh	equ	0xFF4
 10354                           prodl	equ	0xFF3
 10355                           intcon	equ	0xFF2
 10356                           intcon2	equ	0xFF1
 10357                           indf0	equ	0xFEF
 10358                           postinc0	equ	0xFEE
 10359                           fsr0h	equ	0xFEA
 10360                           fsr0l	equ	0xFE9
 10361                           wreg	equ	0xFE8
 10362                           postinc1	equ	0xFE6
 10363                           postdec1	equ	0xFE5
 10364                           fsr1h	equ	0xFE2
 10365                           fsr1l	equ	0xFE1
 10366                           indf2	equ	0xFDF
 10367                           postinc2	equ	0xFDE
 10368                           postdec2	equ	0xFDD
 10369                           plusw2	equ	0xFDB
 10370                           fsr2h	equ	0xFDA
 10371                           fsr2l	equ	0xFD9
 10372                           status	equ	0xFD8
 10373                           
 10374 ;; *************** function _fround *****************
 10375 ;; Defined at:
 10376 ;;		line 410 in file "/usr/opt/microchip/xc8/v1.20/sources/common/doprnt.c"
 10377 ;; Parameters:    Size  Location     Type
 10378 ;;  prec            1   54[COMRAM] unsigned char 
 10379 ;; Auto vars:     Size  Location     Type
 10380 ;;		None
 10381 ;; Return value:  Size  Location     Type
 10382 ;;                  3   54[COMRAM] unsigned char 
 10383 ;; Registers used:
 10384 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10385 ;; Tracked objects:
 10386 ;;		On entry : 0/0
 10387 ;;		On exit  : 0/0
 10388 ;;		Unchanged: 0/0
 10389 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10390 ;;      Params:         3       0       0       0       0       0       0       0       0
 10391 ;;      Locals:         6       0       0       0       0       0       0       0       0
 10392 ;;      Temps:          6       0       0       0       0       0       0       0       0
 10393 ;;      Totals:        15       0       0       0       0       0       0       0       0
 10394 ;;Total ram usage:       15 bytes
 10395 ;; Hardware stack levels used:    1
 10396 ;; Hardware stack levels required when called:    2
 10397 ;; This function calls:
 10398 ;;		___ftmul
 10399 ;;		___awdiv
 10400 ;;		___awmod
 10401 ;;		___wmul
 10402 ;; This function is called by:
 10403 ;;		_sprintf
 10404 ;; This function uses a non-reentrant model
 10405 ;;
 10406                           
 10407                           	psect	text41
 10408  001B06                     __ptext41:
 10409                           	opt stack 0
 10410  001B06                     _fround:
 10411                           	opt stack 20
 10412                           
 10413                           ;doprnt.c: 413: if(prec>=110)
 10414                           
 10415                           ;incstack = 0
 10416                           ;incstack = 0
 10417  001B06  0E6D               	movlw	109
 10418  001B08  6437               	cpfsgt	fround@prec,c
 10419  001B0A  D0AB               	goto	i2l9116
 10420                           
 10421                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
 10422  001B0C  0E00               	movlw	0
 10423  001B0E  6E14               	movwf	?___wmul+3,c
 10424  001B10  0E03               	movlw	3
 10425  001B12  6E13               	movwf	?___wmul+2,c
 10426  001B14  0E00               	movlw	0
 10427  001B16  6E0B               	movwf	?___awdiv+3,c
 10428  001B18  0E0A               	movlw	10
 10429  001B1A  6E0A               	movwf	?___awdiv+2,c
 10430  001B1C  0E00               	movlw	0
 10431  001B1E  6E04               	movwf	?___awmod+3,c
 10432  001B20  0E64               	movlw	100
 10433  001B22  6E03               	movwf	?___awmod+2,c
 10434  001B24  C037  F001         	movff	fround@prec,?___awmod
 10435  001B28  6A02               	clrf	?___awmod+1,c
 10436  001B2A  ECBC  F018         	call	___awmod	;wreg free
 10437  001B2E  C001  F008         	movff	?___awmod,?___awdiv
 10438  001B32  C002  F009         	movff	?___awmod+1,?___awdiv+1
 10439  001B36  EC31  F018         	call	___awdiv	;wreg free
 10440  001B3A  0E09               	movlw	9
 10441  001B3C  2408               	addwf	?___awdiv,w,c
 10442  001B3E  6E11               	movwf	?___wmul,c
 10443  001B40  0E00               	movlw	0
 10444  001B42  2009               	addwfc	?___awdiv+1,w,c
 10445  001B44  6E12               	movwf	?___wmul+1,c
 10446  001B46  EC98  F01B         	call	___wmul	;wreg free
 10447  001B4A  0E07               	movlw	low __npowers_
 10448  001B4C  2411               	addwf	?___wmul,w,c
 10449  001B4E  6EF6               	movwf	tblptrl,c
 10450  001B50  0E7D               	movlw	high __npowers_
 10451  001B52  2012               	addwfc	?___wmul+1,w,c
 10452  001B54  6EF7               	movwf	tblptrh,c
 10453  001B56  0009               	tblrd		*+
 10454  001B58  CFF5 F03A          	movff	tablat,??_fround
 10455  001B5C  0009               	tblrd		*+
 10456  001B5E  CFF5 F03B          	movff	tablat,??_fround+1
 10457  001B62  0009               	tblrd		*+
 10458  001B64  CFF5 F03C          	movff	tablat,??_fround+2
 10459  001B68  C03C  F02B         	movff	??_fround+2,?___ftmul+5
 10460  001B6C  C03B  F02A         	movff	??_fround+1,?___ftmul+4
 10461  001B70  C03A  F029         	movff	??_fround,?___ftmul+3
 10462  001B74  0E00               	movlw	0
 10463  001B76  6E14               	movwf	?___wmul+3,c
 10464  001B78  0E03               	movlw	3
 10465  001B7A  6E13               	movwf	?___wmul+2,c
 10466  001B7C  0E00               	movlw	0
 10467  001B7E  6E0B               	movwf	?___awdiv+3,c
 10468  001B80  0E64               	movlw	100
 10469  001B82  6E0A               	movwf	?___awdiv+2,c
 10470  001B84  C037  F008         	movff	fround@prec,?___awdiv
 10471  001B88  6A09               	clrf	?___awdiv+1,c
 10472  001B8A  EC31  F018         	call	___awdiv	;wreg free
 10473  001B8E  0E12               	movlw	18
 10474  001B90  2408               	addwf	?___awdiv,w,c
 10475  001B92  6E11               	movwf	?___wmul,c
 10476  001B94  0E00               	movlw	0
 10477  001B96  2009               	addwfc	?___awdiv+1,w,c
 10478  001B98  6E12               	movwf	?___wmul+1,c
 10479  001B9A  EC98  F01B         	call	___wmul	;wreg free
 10480  001B9E  0E07               	movlw	low __npowers_
 10481  001BA0  2411               	addwf	?___wmul,w,c
 10482  001BA2  6EF6               	movwf	tblptrl,c
 10483  001BA4  0E7D               	movlw	high __npowers_
 10484  001BA6  2012               	addwfc	?___wmul+1,w,c
 10485  001BA8  6EF7               	movwf	tblptrh,c
 10486  001BAA  0009               	tblrd		*+
 10487  001BAC  CFF5 F03D          	movff	tablat,??_fround+3
 10488  001BB0  0009               	tblrd		*+
 10489  001BB2  CFF5 F03E          	movff	tablat,??_fround+4
 10490  001BB6  0009               	tblrd		*+
 10491  001BB8  CFF5 F03F          	movff	tablat,??_fround+5
 10492  001BBC  C03F  F028         	movff	??_fround+5,?___ftmul+2
 10493  001BC0  C03E  F027         	movff	??_fround+4,?___ftmul+1
 10494  001BC4  C03D  F026         	movff	??_fround+3,?___ftmul
 10495  001BC8  EC70  F013         	call	___ftmul	;wreg free
 10496  001BCC  C028  F045         	movff	?___ftmul+2,_fround$1261+2
 10497  001BD0  C027  F044         	movff	?___ftmul+1,_fround$1261+1
 10498  001BD4  C026  F043         	movff	?___ftmul,_fround$1261
 10499                           
 10500                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
 10501  001BD8  0E00               	movlw	0
 10502  001BDA  6E14               	movwf	?___wmul+3,c
 10503  001BDC  0E03               	movlw	3
 10504  001BDE  6E13               	movwf	?___wmul+2,c
 10505  001BE0  0E00               	movlw	0
 10506  001BE2  6E04               	movwf	?___awmod+3,c
 10507  001BE4  0E0A               	movlw	10
 10508  001BE6  6E03               	movwf	?___awmod+2,c
 10509  001BE8  C037  F001         	movff	fround@prec,?___awmod
 10510  001BEC  6A02               	clrf	?___awmod+1,c
 10511  001BEE  ECBC  F018         	call	___awmod	;wreg free
 10512  001BF2  C001  F011         	movff	?___awmod,?___wmul
 10513  001BF6  C002  F012         	movff	?___awmod+1,?___wmul+1
 10514  001BFA  EC98  F01B         	call	___wmul	;wreg free
 10515  001BFE  0E07               	movlw	low __npowers_
 10516  001C00  2411               	addwf	?___wmul,w,c
 10517  001C02  6EF6               	movwf	tblptrl,c
 10518  001C04  0E7D               	movlw	high __npowers_
 10519  001C06  2012               	addwfc	?___wmul+1,w,c
 10520  001C08  6EF7               	movwf	tblptrh,c
 10521  001C0A  0009               	tblrd		*+
 10522  001C0C  CFF5 F03A          	movff	tablat,??_fround
 10523  001C10  0009               	tblrd		*+
 10524  001C12  CFF5 F03B          	movff	tablat,??_fround+1
 10525  001C16  0009               	tblrd		*+
 10526  001C18  CFF5 F03C          	movff	tablat,??_fround+2
 10527  001C1C  C03C  F02B         	movff	??_fround+2,?___ftmul+5
 10528  001C20  C03B  F02A         	movff	??_fround+1,?___ftmul+4
 10529  001C24  C03A  F029         	movff	??_fround,?___ftmul+3
 10530  001C28  C043  F026         	movff	_fround$1261,?___ftmul
 10531  001C2C  C044  F027         	movff	_fround$1261+1,?___ftmul+1
 10532  001C30  C045  F028         	movff	_fround$1261+2,?___ftmul+2
 10533  001C34  EC70  F013         	call	___ftmul	;wreg free
 10534  001C38  C028  F042         	movff	?___ftmul+2,_fround$1262+2
 10535  001C3C  C027  F041         	movff	?___ftmul+1,_fround$1262+1
 10536  001C40  C026  F040         	movff	?___ftmul,_fround$1262
 10537                           
 10538                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
 10539  001C44  C040  F026         	movff	_fround$1262,?___ftmul
 10540  001C48  C041  F027         	movff	_fround$1262+1,?___ftmul+1
 10541  001C4C  C042  F028         	movff	_fround$1262+2,?___ftmul+2
 10542  001C50  0E00               	movlw	0
 10543  001C52  6E29               	movwf	?___ftmul+3,c
 10544  001C54  0E00               	movlw	0
 10545  001C56  6E2A               	movwf	?___ftmul+4,c
 10546  001C58  0E3F               	movlw	63
 10547  001C5A  6E2B               	movwf	?___ftmul+5,c
 10548  001C5C  EC70  F013         	call	___ftmul	;wreg free
 10549  001C60  D08B               	goto	L18
 10550  001C62                     i2l9116:
 10551                           
 10552                           ;doprnt.c: 415: else if(prec > 10)
 10553  001C62  0E0A               	movlw	10
 10554  001C64  6437               	cpfsgt	fround@prec,c
 10555  001C66  D069               	goto	i2l9124
 10556                           
 10557                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
 10558  001C68  0E00               	movlw	0
 10559  001C6A  6E14               	movwf	?___wmul+3,c
 10560  001C6C  0E03               	movlw	3
 10561  001C6E  6E13               	movwf	?___wmul+2,c
 10562  001C70  0E00               	movlw	0
 10563  001C72  6E04               	movwf	?___awmod+3,c
 10564  001C74  0E0A               	movlw	10
 10565  001C76  6E03               	movwf	?___awmod+2,c
 10566  001C78  C037  F001         	movff	fround@prec,?___awmod
 10567  001C7C  6A02               	clrf	?___awmod+1,c
 10568  001C7E  ECBC  F018         	call	___awmod	;wreg free
 10569  001C82  C001  F011         	movff	?___awmod,?___wmul
 10570  001C86  C002  F012         	movff	?___awmod+1,?___wmul+1
 10571  001C8A  EC98  F01B         	call	___wmul	;wreg free
 10572  001C8E  0E07               	movlw	low __npowers_
 10573  001C90  2411               	addwf	?___wmul,w,c
 10574  001C92  6EF6               	movwf	tblptrl,c
 10575  001C94  0E7D               	movlw	high __npowers_
 10576  001C96  2012               	addwfc	?___wmul+1,w,c
 10577  001C98  6EF7               	movwf	tblptrh,c
 10578  001C9A  0009               	tblrd		*+
 10579  001C9C  CFF5 F03A          	movff	tablat,??_fround
 10580  001CA0  0009               	tblrd		*+
 10581  001CA2  CFF5 F03B          	movff	tablat,??_fround+1
 10582  001CA6  0009               	tblrd		*+
 10583  001CA8  CFF5 F03C          	movff	tablat,??_fround+2
 10584  001CAC  C03C  F02B         	movff	??_fround+2,?___ftmul+5
 10585  001CB0  C03B  F02A         	movff	??_fround+1,?___ftmul+4
 10586  001CB4  C03A  F029         	movff	??_fround,?___ftmul+3
 10587  001CB8  0E00               	movlw	0
 10588  001CBA  6E14               	movwf	?___wmul+3,c
 10589  001CBC  0E03               	movlw	3
 10590  001CBE  6E13               	movwf	?___wmul+2,c
 10591  001CC0  0E00               	movlw	0
 10592  001CC2  6E0B               	movwf	?___awdiv+3,c
 10593  001CC4  0E0A               	movlw	10
 10594  001CC6  6E0A               	movwf	?___awdiv+2,c
 10595  001CC8  C037  F008         	movff	fround@prec,?___awdiv
 10596  001CCC  6A09               	clrf	?___awdiv+1,c
 10597  001CCE  EC31  F018         	call	___awdiv	;wreg free
 10598  001CD2  0E09               	movlw	9
 10599  001CD4  2408               	addwf	?___awdiv,w,c
 10600  001CD6  6E11               	movwf	?___wmul,c
 10601  001CD8  0E00               	movlw	0
 10602  001CDA  2009               	addwfc	?___awdiv+1,w,c
 10603  001CDC  6E12               	movwf	?___wmul+1,c
 10604  001CDE  EC98  F01B         	call	___wmul	;wreg free
 10605  001CE2  0E07               	movlw	low __npowers_
 10606  001CE4  2411               	addwf	?___wmul,w,c
 10607  001CE6  6EF6               	movwf	tblptrl,c
 10608  001CE8  0E7D               	movlw	high __npowers_
 10609  001CEA  2012               	addwfc	?___wmul+1,w,c
 10610  001CEC  6EF7               	movwf	tblptrh,c
 10611  001CEE  0009               	tblrd		*+
 10612  001CF0  CFF5 F03D          	movff	tablat,??_fround+3
 10613  001CF4  0009               	tblrd		*+
 10614  001CF6  CFF5 F03E          	movff	tablat,??_fround+4
 10615  001CFA  0009               	tblrd		*+
 10616  001CFC  CFF5 F03F          	movff	tablat,??_fround+5
 10617  001D00  C03F  F028         	movff	??_fround+5,?___ftmul+2
 10618  001D04  C03E  F027         	movff	??_fround+4,?___ftmul+1
 10619  001D08  C03D  F026         	movff	??_fround+3,?___ftmul
 10620  001D0C  EC70  F013         	call	___ftmul	;wreg free
 10621  001D10  C028  F045         	movff	?___ftmul+2,_fround$1261+2
 10622  001D14  C027  F044         	movff	?___ftmul+1,_fround$1261+1
 10623  001D18  C026  F043         	movff	?___ftmul,_fround$1261
 10624                           
 10625                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
 10626  001D1C  C043  F026         	movff	_fround$1261,?___ftmul
 10627  001D20  C044  F027         	movff	_fround$1261+1,?___ftmul+1
 10628  001D24  C045  F028         	movff	_fround$1261+2,?___ftmul+2
 10629  001D28  0E00               	movlw	0
 10630  001D2A  6E29               	movwf	?___ftmul+3,c
 10631  001D2C  0E00               	movlw	0
 10632  001D2E  6E2A               	movwf	?___ftmul+4,c
 10633  001D30  0E3F               	movlw	63
 10634  001D32  6E2B               	movwf	?___ftmul+5,c
 10635  001D34  EC70  F013         	call	___ftmul	;wreg free
 10636  001D38  D01F               	goto	L18
 10637  001D3A                     i2l9124:
 10638                           
 10639                           ;doprnt.c: 417: return 0.5 * _npowers_[prec];
 10640  001D3A  5037               	movf	fround@prec,w,c
 10641  001D3C  0D03               	mullw	3
 10642  001D3E  0E07               	movlw	low __npowers_
 10643  001D40  24F3               	addwf	prodl,w,c
 10644  001D42  6EF6               	movwf	tblptrl,c
 10645  001D44  0E7D               	movlw	high __npowers_
 10646  001D46  20F4               	addwfc	prodh,w,c
 10647  001D48  6EF7               	movwf	tblptrh,c
 10648  001D4A  0009               	tblrd		*+
 10649  001D4C  CFF5 F03A          	movff	tablat,??_fround
 10650  001D50  0009               	tblrd		*+
 10651  001D52  CFF5 F03B          	movff	tablat,??_fround+1
 10652  001D56  0009               	tblrd		*+
 10653  001D58  CFF5 F03C          	movff	tablat,??_fround+2
 10654  001D5C  C03C  F028         	movff	??_fround+2,?___ftmul+2
 10655  001D60  C03B  F027         	movff	??_fround+1,?___ftmul+1
 10656  001D64  C03A  F026         	movff	??_fround,?___ftmul
 10657  001D68  0E00               	movlw	0
 10658  001D6A  6E29               	movwf	?___ftmul+3,c
 10659  001D6C  0E00               	movlw	0
 10660  001D6E  6E2A               	movwf	?___ftmul+4,c
 10661  001D70  0E3F               	movlw	63
 10662  001D72  6E2B               	movwf	?___ftmul+5,c
 10663  001D74  EC70  F013         	call	___ftmul	;wreg free
 10664  001D78                     L18:
 10665  001D78  C028  F039         	movff	?___ftmul+2,?_fround+2
 10666  001D7C  C027  F038         	movff	?___ftmul+1,?_fround+1
 10667  001D80  C026  F037         	movff	?___ftmul,?_fround
 10668  001D84  0012               	return	
 10669  001D86                     __end_of_fround:
 10670                           	opt stack 0
 10671                           tosu	equ	0xFFF
 10672                           tosh	equ	0xFFE
 10673                           tosl	equ	0xFFD
 10674                           pclatu	equ	0xFFB
 10675                           pclath	equ	0xFFA
 10676                           tblptru	equ	0xFF8
 10677                           tblptrh	equ	0xFF7
 10678                           tblptrl	equ	0xFF6
 10679                           tablat	equ	0xFF5
 10680                           prodh	equ	0xFF4
 10681                           prodl	equ	0xFF3
 10682                           intcon	equ	0xFF2
 10683                           intcon2	equ	0xFF1
 10684                           indf0	equ	0xFEF
 10685                           postinc0	equ	0xFEE
 10686                           fsr0h	equ	0xFEA
 10687                           fsr0l	equ	0xFE9
 10688                           wreg	equ	0xFE8
 10689                           postinc1	equ	0xFE6
 10690                           postdec1	equ	0xFE5
 10691                           fsr1h	equ	0xFE2
 10692                           fsr1l	equ	0xFE1
 10693                           indf2	equ	0xFDF
 10694                           postinc2	equ	0xFDE
 10695                           postdec2	equ	0xFDD
 10696                           plusw2	equ	0xFDB
 10697                           fsr2h	equ	0xFDA
 10698                           fsr2l	equ	0xFD9
 10699                           status	equ	0xFD8
 10700                           
 10701 ;; *************** function _buttons *****************
 10702 ;; Defined at:
 10703 ;;		line 28 in file "buttons.c"
 10704 ;; Parameters:    Size  Location     Type
 10705 ;;		None
 10706 ;; Auto vars:     Size  Location     Type
 10707 ;;  cnt             1   16[COMRAM] unsigned char 
 10708 ;; Return value:  Size  Location     Type
 10709 ;;		None               void
 10710 ;; Registers used:
 10711 ;;		wreg, status,2, status,0, cstack
 10712 ;; Tracked objects:
 10713 ;;		On entry : 0/0
 10714 ;;		On exit  : 0/0
 10715 ;;		Unchanged: 0/0
 10716 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10717 ;;      Params:         0       0       0       0       0       0       0       0       0
 10718 ;;      Locals:         1       0       0       0       0       0       0       0       0
 10719 ;;      Temps:          9       0       0       0       0       0       0       0       0
 10720 ;;      Totals:        10       0       0       0       0       0       0       0       0
 10721 ;;Total ram usage:       10 bytes
 10722 ;; Hardware stack levels used:    1
 10723 ;; Hardware stack levels required when called:    1
 10724 ;; This function calls:
 10725 ;;		___awmod
 10726 ;; This function is called by:
 10727 ;;		_high_isr
 10728 ;; This function uses a non-reentrant model
 10729 ;;
 10730                           
 10731                           	psect	text42
 10732  0027F0                     __ptext42:
 10733                           	opt stack 0
 10734  0027F0                     _buttons:
 10735                           	opt stack 24
 10736                           
 10737                           ;buttons.c: 29: uint8_t cnt;
 10738                           ;buttons.c: 30: for (cnt = 0; cnt < 8; cnt++) {
 10739                           
 10740                           ;incstack = 0
 10741                           ;incstack = 0
 10742  0027F0  6E08               	movwf	??_buttons& (0+255),c
 10743  0027F2  0E00               	movlw	0
 10744  0027F4  6E11               	movwf	buttons@cnt,c
 10745  0027F6  5008               	movf	??_buttons& (0+255),w,c
 10746  0027F8  D07B               	goto	L21
 10747  0027FA                     i2l417:
 10748                           
 10749                           ;buttons.c: 33: menu.state = 0;
 10750  0027FA  0100               	movlb	0	; () banked
 10751  0027FC  0100               	movlb	0	; () banked
 10752  0027FE  91D6               	bcf	_menu& (0+255),0,b
 10753                           
 10754                           ;buttons.c: 34: break;
 10755  002800  D076               	goto	i2l8890
 10756  002802                     i2l419:
 10757                           
 10758                           ;buttons.c: 36: screen.brightness = 0xF;
 10759  002802  0101               	movlb	1	; () banked
 10760  002804  8109               	bsf	(_screen+9)& (0+255),0,b
 10761  002806  0101               	movlb	1	; () banked
 10762  002808  8309               	bsf	(_screen+9)& (0+255),1,b
 10763  00280A  0101               	movlb	1	; () banked
 10764  00280C  8509               	bsf	(_screen+9)& (0+255),2,b
 10765  00280E  0101               	movlb	1	; () banked
 10766  002810  8709               	bsf	(_screen+9)& (0+255),3,b
 10767  002812  D00C               	goto	L19
 10768  002814                     i2l420:
 10769                           
 10770                           ;buttons.c: 40: menu.state = 1;
 10771  002814  0100               	movlb	0	; () banked
 10772  002816  0100               	movlb	0	; () banked
 10773  002818  81D6               	bsf	_menu& (0+255),0,b
 10774                           
 10775                           ;buttons.c: 41: break;
 10776  00281A  D069               	goto	i2l8890
 10777  00281C                     i2l421:
 10778                           
 10779                           ;buttons.c: 43: screen.brightness = 0;
 10780  00281C  0101               	movlb	1	; () banked
 10781  00281E  9109               	bcf	(_screen+9)& (0+255),0,b
 10782  002820  0101               	movlb	1	; () banked
 10783  002822  9309               	bcf	(_screen+9)& (0+255),1,b
 10784  002824  0101               	movlb	1	; () banked
 10785  002826  9509               	bcf	(_screen+9)& (0+255),2,b
 10786  002828  0101               	movlb	1	; () banked
 10787  00282A  9709               	bcf	(_screen+9)& (0+255),3,b
 10788  00282C                     L19:
 10789                           
 10790                           ; BSR set to: 1
 10791                           ;buttons.c: 44: screen.changed |= (1 << 10);
 10792  00282C  0101               	movlb	1	; () banked
 10793  00282E  0101               	movlb	1	; () banked
 10794  002830  850C               	bsf	(_screen+12)& (0+255),2,b
 10795                           
 10796                           ;buttons.c: 45: break;
 10797  002832  D05D               	goto	i2l8890
 10798  002834                     i2l422:
 10799                           
 10800                           ;buttons.c: 47: LATA5 = ~LATA5;
 10801  002834  7A89               	btg	3977,5,c	;volatile
 10802                           
 10803                           ;buttons.c: 48: break;
 10804  002836  D05B               	goto	i2l8890
 10805  002838                     i2l8880:
 10806                           
 10807                           ;buttons.c: 52: date.view = 10 % (date.view + 1);
 10808  002838  0E00               	movlw	0
 10809  00283A  6E02               	movwf	?___awmod+1,c
 10810  00283C  0E0A               	movlw	10
 10811  00283E  6E01               	movwf	?___awmod,c
 10812  002840  0E01               	movlw	1
 10813  002842  0101               	movlb	1	; () banked
 10814  002844  0101               	movlb	1	; () banked
 10815  002846  2516               	addwf	(_date+9)& (0+255),w,b
 10816  002848  6E03               	movwf	?___awmod+2,c
 10817  00284A  6A04               	clrf	?___awmod+3,c
 10818  00284C  0E00               	movlw	0
 10819  00284E  2204               	addwfc	?___awmod+3,f,c
 10820  002850  ECBC  F018         	call	___awmod	;wreg free
 10821  002854  5001               	movf	?___awmod,w,c
 10822  002856  0101               	movlb	1	; () banked
 10823  002858  0101               	movlb	1	; () banked
 10824  00285A  6F16               	movwf	(_date+9)& (0+255),b
 10825                           
 10826                           ;buttons.c: 53: break;
 10827  00285C  D048               	goto	i2l8890
 10828  00285E                     i2l425:
 10829                           
 10830                           ;buttons.c: 55: if (menu.state) {
 10831  00285E  0100               	movlb	0	; () banked
 10832  002860  0100               	movlb	0	; () banked
 10833  002862  A1D6               	btfss	_menu& (0+255),0,b
 10834  002864  D006               	goto	i2l8884
 10835                           
 10836                           ; BSR set to: 0
 10837                           ;buttons.c: 56: printFn = &printTemp;
 10838  002866  0E2E               	movlw	high _printTemp
 10839  002868  0100               	movlb	0	; () banked
 10840  00286A  0100               	movlb	0	; () banked
 10841  00286C  6FEF               	movwf	(_printFn+1)& (0+255),b
 10842  00286E  0E96               	movlw	low _printTemp
 10843  002870  D005               	goto	L20
 10844  002872                     i2l8884:
 10845                           
 10846                           ; BSR set to: 0
 10847                           ;buttons.c: 58: else
 10848                           ;buttons.c: 59: {
 10849                           ;buttons.c: 60: printFn = &printRTC;
 10850  002872  0E18               	movlw	high _printRTC
 10851  002874  0100               	movlb	0	; () banked
 10852  002876  0100               	movlb	0	; () banked
 10853  002878  6FEF               	movwf	(_printFn+1)& (0+255),b
 10854  00287A  0E66               	movlw	low _printRTC
 10855  00287C                     L20:
 10856  00287C  0100               	movlb	0	; () banked
 10857  00287E  6FEE               	movwf	_printFn& (0+255),b
 10858  002880  D036               	goto	i2l8890
 10859  002882                     i2l8888:
 10860  002882  508A               	movf	3978,w,c	;volatile
 10861  002884  6E08               	movwf	??_buttons& (0+255),c
 10862  002886  6A09               	clrf	(??_buttons+1)& (0+255),c
 10863  002888  1C08               	comf	??_buttons,w,c
 10864  00288A  6E0A               	movwf	(??_buttons+2)& (0+255),c
 10865  00288C  1C09               	comf	??_buttons+1,w,c
 10866  00288E  6E0B               	movwf	(??_buttons+3)& (0+255),c
 10867  002890  C011  F00C         	movff	buttons@cnt,??_buttons+4
 10868  002894  0E01               	movlw	1
 10869  002896  6E0D               	movwf	(??_buttons+5)& (0+255),c
 10870  002898  6A0E               	clrf	(??_buttons+6)& (0+255),c
 10871  00289A  2A0C               	incf	??_buttons+4,f,c
 10872  00289C  D003               	goto	i2u761_44
 10873  00289E                     i2u761_45:
 10874  00289E  90D8               	bcf	status,0,c
 10875  0028A0  360D               	rlcf	??_buttons+5,f,c
 10876  0028A2  360E               	rlcf	??_buttons+6,f,c
 10877  0028A4                     i2u761_44:
 10878  0028A4  2E0C               	decfsz	??_buttons+4,f,c
 10879  0028A6  D7FB               	goto	i2u761_45
 10880  0028A8  500A               	movf	??_buttons+2,w,c
 10881  0028AA  140D               	andwf	??_buttons+5,w,c
 10882  0028AC  6E0F               	movwf	(??_buttons+7)& (0+255),c
 10883  0028AE  500B               	movf	??_buttons+3,w,c
 10884  0028B0  140E               	andwf	??_buttons+6,w,c
 10885  0028B2  6E10               	movwf	(??_buttons+8)& (0+255),c
 10886                           
 10887                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 10888                           ; Switch size 1, requested type "space"
 10889                           ; Number of cases is 1, Range of values is 0 to 0
 10890                           ; switch strategies available:
 10891                           ; Name         Instructions Cycles
 10892                           ; simple_byte            4     3 (average)
 10893                           ;	Chosen strategy is simple_byte
 10894  0028B4  5010               	movf	??_buttons+8,w,c
 10895  0028B6  0A00               	xorlw	0	; case 0
 10896  0028B8  A4D8               	btfss	status,2,c
 10897  0028BA  D019               	goto	i2l8890
 10898                           
 10899                           ; Switch size 1, requested type "space"
 10900                           ; Number of cases is 8, Range of values is 1 to 128
 10901                           ; switch strategies available:
 10902                           ; Name         Instructions Cycles
 10903                           ; simple_byte           25    13 (average)
 10904                           ;	Chosen strategy is simple_byte
 10905  0028BC  500F               	movf	??_buttons+7,w,c
 10906  0028BE  0A01               	xorlw	1	; case 1
 10907  0028C0  B4D8               	btfsc	status,2,c
 10908  0028C2  D79B               	goto	i2l417
 10909  0028C4  0A03               	xorlw	3	; case 2
 10910  0028C6  B4D8               	btfsc	status,2,c
 10911  0028C8  D79C               	goto	i2l419
 10912  0028CA  0A06               	xorlw	6	; case 4
 10913  0028CC  B4D8               	btfsc	status,2,c
 10914  0028CE  D7A2               	goto	i2l420
 10915  0028D0  0A0C               	xorlw	12	; case 8
 10916  0028D2  B4D8               	btfsc	status,2,c
 10917  0028D4  D7A3               	goto	i2l421
 10918  0028D6  0A18               	xorlw	24	; case 16
 10919  0028D8  B4D8               	btfsc	status,2,c
 10920  0028DA  D7AC               	goto	i2l422
 10921  0028DC  0A30               	xorlw	48	; case 32
 10922  0028DE  B4D8               	btfsc	status,2,c
 10923  0028E0  D006               	goto	i2l8890
 10924  0028E2  0A60               	xorlw	96	; case 64
 10925  0028E4  B4D8               	btfsc	status,2,c
 10926  0028E6  D7A8               	goto	i2l8880
 10927  0028E8  0AC0               	xorlw	192	; case 128
 10928  0028EA  B4D8               	btfsc	status,2,c
 10929  0028EC  D7B8               	goto	i2l425
 10930  0028EE                     i2l8890:
 10931  0028EE  2A11               	incf	buttons@cnt,f,c
 10932  0028F0                     L21:
 10933  0028F0  0E07               	movlw	7
 10934  0028F2  6411               	cpfsgt	buttons@cnt,c
 10935  0028F4  D7C6               	goto	i2l8888
 10936  0028F6  0012               	return	
 10937  0028F8                     __end_of_buttons:
 10938                           	opt stack 0
 10939                           tosu	equ	0xFFF
 10940                           tosh	equ	0xFFE
 10941                           tosl	equ	0xFFD
 10942                           pclatu	equ	0xFFB
 10943                           pclath	equ	0xFFA
 10944                           tblptru	equ	0xFF8
 10945                           tblptrh	equ	0xFF7
 10946                           tblptrl	equ	0xFF6
 10947                           tablat	equ	0xFF5
 10948                           prodh	equ	0xFF4
 10949                           prodl	equ	0xFF3
 10950                           intcon	equ	0xFF2
 10951                           intcon2	equ	0xFF1
 10952                           indf0	equ	0xFEF
 10953                           postinc0	equ	0xFEE
 10954                           fsr0h	equ	0xFEA
 10955                           fsr0l	equ	0xFE9
 10956                           wreg	equ	0xFE8
 10957                           postinc1	equ	0xFE6
 10958                           postdec1	equ	0xFE5
 10959                           fsr1h	equ	0xFE2
 10960                           fsr1l	equ	0xFE1
 10961                           indf2	equ	0xFDF
 10962                           postinc2	equ	0xFDE
 10963                           postdec2	equ	0xFDD
 10964                           plusw2	equ	0xFDB
 10965                           fsr2h	equ	0xFDA
 10966                           fsr2l	equ	0xFD9
 10967                           status	equ	0xFD8
 10968                           
 10969 ;; *************** function _update *****************
 10970 ;; Defined at:
 10971 ;;		line 13 in file "disp.c"
 10972 ;; Parameters:    Size  Location     Type
 10973 ;;		None
 10974 ;; Auto vars:     Size  Location     Type
 10975 ;;  cnt             1   29[COMRAM] char 
 10976 ;; Return value:  Size  Location     Type
 10977 ;;		None               void
 10978 ;; Registers used:
 10979 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 10980 ;; Tracked objects:
 10981 ;;		On entry : 0/0
 10982 ;;		On exit  : 0/0
 10983 ;;		Unchanged: 0/0
 10984 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10985 ;;      Params:         0       0       0       0       0       0       0       0       0
 10986 ;;      Locals:         1       0       0       0       0       0       0       0       0
 10987 ;;      Temps:          5       0       0       0       0       0       0       0       0
 10988 ;;      Totals:         6       0       0       0       0       0       0       0       0
 10989 ;;Total ram usage:        6 bytes
 10990 ;; Hardware stack levels used:    1
 10991 ;; Hardware stack levels required when called:    3
 10992 ;; This function calls:
 10993 ;;		_writeDigit
 10994 ;;		_spi
 10995 ;; This function is called by:
 10996 ;;		_high_isr
 10997 ;; This function uses a non-reentrant model
 10998 ;;
 10999                           
 11000                           	psect	text43
 11001  000F8E                     __ptext43:
 11002                           	opt stack 0
 11003  000F8E                     _update:
 11004                           	opt stack 22
 11005                           
 11006                           ;disp.c: 14: if (screen.changed == 0) {
 11007                           
 11008                           ;incstack = 0
 11009                           ;incstack = 0
 11010  000F8E  0101               	movlb	1	; () banked
 11011  000F90  0101               	movlb	1	; () banked
 11012  000F92  510C               	movf	(_screen+12)& (0+255),w,b
 11013  000F94  110B               	iorwf	(_screen+11)& (0+255),w,b
 11014  000F96  B4D8               	btfsc	status,2,c
 11015  000F98  D23D               	goto	i2l136
 11016                           
 11017                           ; BSR set to: 1
 11018                           ;disp.c: 16: }
 11019                           ;disp.c: 17: int8_t cnt;
 11020                           ;disp.c: 18: for (cnt = 15; cnt >= 0; cnt--) {
 11021                           
 11022                           ; BSR set to: 1
 11023                           
 11024                           ; BSR set to: 1
 11025                           ;disp.c: 15: return;
 11026  000F9A  6E19               	movwf	??_update& (0+255),c
 11027  000F9C  0E0F               	movlw	15
 11028  000F9E  6E1E               	movwf	update@cnt,c
 11029  000FA0  5019               	movf	??_update& (0+255),w,c
 11030  000FA2                     
 11031                           ; BSR set to: 1
 11032  000FA2  BE1E               	btfsc	update@cnt,7,c
 11033  000FA4  D237               	goto	i2l136
 11034  000FA6  D05A               	goto	i2l9246
 11035  000FA8                     i2l9232:
 11036                           
 11037                           ; BSR set to: 1
 11038                           ;disp.c: 21: writeDigit(1 << cnt, screen.digits.screen[cnt].bits);
 11039  000FA8  C01E  F019         	movff	update@cnt,??_update
 11040  000FAC  0E01               	movlw	1
 11041  000FAE  6E1A               	movwf	(??_update+1)& (0+255),c
 11042  000FB0  2A19               	incf	??_update,f,c
 11043  000FB2  D002               	goto	i2u807_44
 11044  000FB4                     i2u807_45:
 11045  000FB4  90D8               	bcf	status,0,c
 11046  000FB6  361A               	rlcf	??_update+1,f,c
 11047  000FB8                     i2u807_44:
 11048  000FB8  2E19               	decfsz	??_update,f,c
 11049  000FBA  D7FC               	goto	i2u807_45
 11050  000FBC  501A               	movf	??_update+1,w,c
 11051  000FBE  6E14               	movwf	?_writeDigit,c
 11052  000FC0  501E               	movf	update@cnt,w,c
 11053  000FC2  0D01               	mullw	1
 11054  000FC4  0101               	movlb	1	; () banked
 11055  000FC6  0E00               	movlw	low _screen
 11056  000FC8  24F3               	addwf	prodl,w,c
 11057  000FCA  6ED9               	movwf	fsr2l,c
 11058  000FCC  0101               	movlb	1	; () banked
 11059  000FCE  0E01               	movlw	high _screen
 11060  000FD0  20F4               	addwfc	prodh,w,c
 11061  000FD2  6EDA               	movwf	fsr2h,c
 11062  000FD4  50DF               	movf	indf2,w,c
 11063  000FD6  6E15               	movwf	?_writeDigit+1,c
 11064  000FD8  EC91  F01A         	call	_writeDigit	;wreg free
 11065                           
 11066                           ;disp.c: 22: break;
 11067  000FDC  D201               	goto	i2l9248
 11068  000FDE                     i2l9234:
 11069                           
 11070                           ;disp.c: 24: spi(0b1001, screen.decode);
 11071  000FDE  6E19               	movwf	??_update& (0+255),c
 11072  000FE0  0E09               	movlw	9
 11073  000FE2  6E07               	movwf	?_spi,c
 11074  000FE4  5019               	movf	??_update& (0+255),w,c
 11075  000FE6  0101               	movlb	1	; () banked
 11076  000FE8  0101               	movlb	1	; () banked
 11077  000FEA  5108               	movf	(_screen+8)& (0+255),w,b
 11078  000FEC  0BFF               	andlw	255
 11079  000FEE  6E08               	movwf	?_spi+1,c
 11080  000FF0  EC9A  F017         	call	_spi	;wreg free
 11081                           
 11082                           ;disp.c: 25: break;
 11083  000FF4  D1F5               	goto	i2l9248
 11084  000FF6                     i2l9236:
 11085                           
 11086                           ;disp.c: 27: spi(0b1010, screen.brightness);
 11087  000FF6  6E19               	movwf	??_update& (0+255),c
 11088  000FF8  0E0A               	movlw	10
 11089  000FFA  6E07               	movwf	?_spi,c
 11090  000FFC  5019               	movf	??_update& (0+255),w,c
 11091  000FFE  0101               	movlb	1	; () banked
 11092  001000  0101               	movlb	1	; () banked
 11093  001002  5109               	movf	(_screen+9)& (0+255),w,b
 11094  001004  0B0F               	andlw	15
 11095  001006  6E08               	movwf	?_spi+1,c
 11096  001008  EC9A  F017         	call	_spi	;wreg free
 11097                           
 11098                           ;disp.c: 28: break;
 11099  00100C  D1E9               	goto	i2l9248
 11100  00100E                     i2l9238:
 11101                           
 11102                           ;disp.c: 30: spi(0b1011, screen.scan);
 11103  00100E  6E19               	movwf	??_update& (0+255),c
 11104  001010  0E0B               	movlw	11
 11105  001012  6E07               	movwf	?_spi,c
 11106  001014  5019               	movf	??_update& (0+255),w,c
 11107  001016  0101               	movlb	1	; () banked
 11108  001018  0101               	movlb	1	; () banked
 11109  00101A  3909               	swapf	(_screen+9)& (0+255),w,b
 11110  00101C  0B07               	andlw	7
 11111  00101E  6E08               	movwf	?_spi+1,c
 11112  001020  EC9A  F017         	call	_spi	;wreg free
 11113                           
 11114                           ;disp.c: 31: break;
 11115  001024  D1DD               	goto	i2l9248
 11116  001026                     i2l9240:
 11117                           
 11118                           ;disp.c: 33: spi(0b1111, screen.test);
 11119  001026  6E19               	movwf	??_update& (0+255),c
 11120  001028  0E0F               	movlw	15
 11121  00102A  6E07               	movwf	?_spi,c
 11122  00102C  5019               	movf	??_update& (0+255),w,c
 11123  00102E  0E00               	movlw	0
 11124  001030  0101               	movlb	1	; () banked
 11125  001032  BF09               	btfsc	(_screen+9)& (0+255),7,b
 11126  001034  0E01               	movlw	1
 11127  001036  6E08               	movwf	?_spi+1,c
 11128  001038  EC9A  F017         	call	_spi	;wreg free
 11129                           
 11130                           ;disp.c: 34: break;
 11131  00103C  D1D1               	goto	i2l9248
 11132  00103E                     i2l9242:
 11133                           
 11134                           ;disp.c: 36: spi(0b1100, !screen.shutdown);
 11135  00103E  6E19               	movwf	??_update& (0+255),c
 11136  001040  0E0C               	movlw	12
 11137  001042  6E07               	movwf	?_spi,c
 11138  001044  5019               	movf	??_update& (0+255),w,c
 11139  001046  0101               	movlb	1	; () banked
 11140  001048  0101               	movlb	1	; () banked
 11141  00104A  B10A               	btfsc	(_screen+10)& (0+255),0,b
 11142  00104C  D002               	goto	i2u808_40
 11143  00104E  0E01               	movlw	1
 11144  001050  D001               	goto	i2u808_46
 11145  001052                     i2u808_40:
 11146  001052  0E00               	movlw	0
 11147  001054                     i2u808_46:
 11148  001054  6E08               	movwf	?_spi+1,c
 11149  001056  EC9A  F017         	call	_spi	;wreg free
 11150                           
 11151                           ;disp.c: 37: break;
 11152  00105A  D1C2               	goto	i2l9248
 11153  00105C                     i2l9246:
 11154  00105C  C01E  F019         	movff	update@cnt,??_update
 11155  001060  0E01               	movlw	1
 11156  001062  6E1A               	movwf	(??_update+1)& (0+255),c
 11157  001064  6A1B               	clrf	(??_update+2)& (0+255),c
 11158  001066  2A19               	incf	??_update,f,c
 11159  001068  D003               	goto	i2u809_44
 11160  00106A                     i2u809_45:
 11161  00106A  90D8               	bcf	status,0,c
 11162  00106C  361A               	rlcf	??_update+1,f,c
 11163  00106E  361B               	rlcf	??_update+2,f,c
 11164  001070                     i2u809_44:
 11165  001070  2E19               	decfsz	??_update,f,c
 11166  001072  D7FB               	goto	i2u809_45
 11167  001074  0101               	movlb	1	; () banked
 11168  001076  0101               	movlb	1	; () banked
 11169  001078  510B               	movf	(_screen+11)& (0+255),w,b
 11170  00107A  161A               	andwf	??_update+1,f,c
 11171  00107C  0101               	movlb	1	; () banked
 11172  00107E  0101               	movlb	1	; () banked
 11173  001080  510C               	movf	(_screen+12)& (0+255),w,b
 11174  001082  161B               	andwf	??_update+2,f,c
 11175                           
 11176                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 6 sub-sw
      +                          itches
 11177                           ; Switch size 1, requested type "space"
 11178                           ; Number of cases is 6, Range of values is 0 to 32
 11179                           ; switch strategies available:
 11180                           ; Name         Instructions Cycles
 11181                           ; simple_byte           19    10 (average)
 11182                           ;	Chosen strategy is simple_byte
 11183  001084  501B               	movf	??_update+2,w,c
 11184  001086  0A00               	xorlw	0	; case 0
 11185  001088  B4D8               	btfsc	status,2,c
 11186  00108A  D010               	goto	i2l10116
 11187  00108C  0A02               	xorlw	2	; case 2
 11188  00108E  B4D8               	btfsc	status,2,c
 11189  001090  D18F               	goto	i2l10118
 11190  001092  0A06               	xorlw	6	; case 4
 11191  001094  B4D8               	btfsc	status,2,c
 11192  001096  D191               	goto	i2l10120
 11193  001098  0A0C               	xorlw	12	; case 8
 11194  00109A  B4D8               	btfsc	status,2,c
 11195  00109C  D193               	goto	i2l10122
 11196  00109E  0A18               	xorlw	24	; case 16
 11197  0010A0  B4D8               	btfsc	status,2,c
 11198  0010A2  D195               	goto	i2l10124
 11199  0010A4  0A30               	xorlw	48	; case 32
 11200  0010A6  B4D8               	btfsc	status,2,c
 11201  0010A8  D197               	goto	i2l10126
 11202  0010AA  D19A               	goto	i2l9248
 11203  0010AC                     i2l10116:
 11204                           
 11205                           ; BSR set to: 1
 11206                           ; Switch size 1, requested type "space"
 11207                           ; Number of cases is 128, Range of values is 1 to 128
 11208                           ; switch strategies available:
 11209                           ; Name         Instructions Cycles
 11210                           ; simple_byte          385   193 (average)
 11211                           ;	Chosen strategy is simple_byte
 11212  0010AC  501A               	movf	??_update+1,w,c
 11213  0010AE  0A01               	xorlw	1	; case 1
 11214  0010B0  B4D8               	btfsc	status,2,c
 11215  0010B2  D77A               	goto	i2l9232
 11216  0010B4  0A03               	xorlw	3	; case 2
 11217  0010B6  B4D8               	btfsc	status,2,c
 11218  0010B8  D777               	goto	i2l9232
 11219  0010BA  0A01               	xorlw	1	; case 3
 11220  0010BC  B4D8               	btfsc	status,2,c
 11221  0010BE  D774               	goto	i2l9232
 11222  0010C0  0A07               	xorlw	7	; case 4
 11223  0010C2  B4D8               	btfsc	status,2,c
 11224  0010C4  D771               	goto	i2l9232
 11225  0010C6  0A01               	xorlw	1	; case 5
 11226  0010C8  B4D8               	btfsc	status,2,c
 11227  0010CA  D76E               	goto	i2l9232
 11228  0010CC  0A03               	xorlw	3	; case 6
 11229  0010CE  B4D8               	btfsc	status,2,c
 11230  0010D0  D76B               	goto	i2l9232
 11231  0010D2  0A01               	xorlw	1	; case 7
 11232  0010D4  B4D8               	btfsc	status,2,c
 11233  0010D6  D768               	goto	i2l9232
 11234  0010D8  0A0F               	xorlw	15	; case 8
 11235  0010DA  B4D8               	btfsc	status,2,c
 11236  0010DC  D765               	goto	i2l9232
 11237  0010DE  0A01               	xorlw	1	; case 9
 11238  0010E0  B4D8               	btfsc	status,2,c
 11239  0010E2  D762               	goto	i2l9232
 11240  0010E4  0A03               	xorlw	3	; case 10
 11241  0010E6  B4D8               	btfsc	status,2,c
 11242  0010E8  D75F               	goto	i2l9232
 11243  0010EA  0A01               	xorlw	1	; case 11
 11244  0010EC  B4D8               	btfsc	status,2,c
 11245  0010EE  D75C               	goto	i2l9232
 11246  0010F0  0A07               	xorlw	7	; case 12
 11247  0010F2  B4D8               	btfsc	status,2,c
 11248  0010F4  D759               	goto	i2l9232
 11249  0010F6  0A01               	xorlw	1	; case 13
 11250  0010F8  B4D8               	btfsc	status,2,c
 11251  0010FA  D756               	goto	i2l9232
 11252  0010FC  0A03               	xorlw	3	; case 14
 11253  0010FE  B4D8               	btfsc	status,2,c
 11254  001100  D753               	goto	i2l9232
 11255  001102  0A01               	xorlw	1	; case 15
 11256  001104  B4D8               	btfsc	status,2,c
 11257  001106  D750               	goto	i2l9232
 11258  001108  0A1F               	xorlw	31	; case 16
 11259  00110A  B4D8               	btfsc	status,2,c
 11260  00110C  D74D               	goto	i2l9232
 11261  00110E  0A01               	xorlw	1	; case 17
 11262  001110  B4D8               	btfsc	status,2,c
 11263  001112  D74A               	goto	i2l9232
 11264  001114  0A03               	xorlw	3	; case 18
 11265  001116  B4D8               	btfsc	status,2,c
 11266  001118  D747               	goto	i2l9232
 11267  00111A  0A01               	xorlw	1	; case 19
 11268  00111C  B4D8               	btfsc	status,2,c
 11269  00111E  D744               	goto	i2l9232
 11270  001120  0A07               	xorlw	7	; case 20
 11271  001122  B4D8               	btfsc	status,2,c
 11272  001124  D741               	goto	i2l9232
 11273  001126  0A01               	xorlw	1	; case 21
 11274  001128  B4D8               	btfsc	status,2,c
 11275  00112A  D73E               	goto	i2l9232
 11276  00112C  0A03               	xorlw	3	; case 22
 11277  00112E  B4D8               	btfsc	status,2,c
 11278  001130  D73B               	goto	i2l9232
 11279  001132  0A01               	xorlw	1	; case 23
 11280  001134  B4D8               	btfsc	status,2,c
 11281  001136  D738               	goto	i2l9232
 11282  001138  0A0F               	xorlw	15	; case 24
 11283  00113A  B4D8               	btfsc	status,2,c
 11284  00113C  D735               	goto	i2l9232
 11285  00113E  0A01               	xorlw	1	; case 25
 11286  001140  B4D8               	btfsc	status,2,c
 11287  001142  D732               	goto	i2l9232
 11288  001144  0A03               	xorlw	3	; case 26
 11289  001146  B4D8               	btfsc	status,2,c
 11290  001148  D72F               	goto	i2l9232
 11291  00114A  0A01               	xorlw	1	; case 27
 11292  00114C  B4D8               	btfsc	status,2,c
 11293  00114E  D72C               	goto	i2l9232
 11294  001150  0A07               	xorlw	7	; case 28
 11295  001152  B4D8               	btfsc	status,2,c
 11296  001154  D729               	goto	i2l9232
 11297  001156  0A01               	xorlw	1	; case 29
 11298  001158  B4D8               	btfsc	status,2,c
 11299  00115A  D726               	goto	i2l9232
 11300  00115C  0A03               	xorlw	3	; case 30
 11301  00115E  B4D8               	btfsc	status,2,c
 11302  001160  D723               	goto	i2l9232
 11303  001162  0A01               	xorlw	1	; case 31
 11304  001164  B4D8               	btfsc	status,2,c
 11305  001166  D720               	goto	i2l9232
 11306  001168  0A3F               	xorlw	63	; case 32
 11307  00116A  B4D8               	btfsc	status,2,c
 11308  00116C  D71D               	goto	i2l9232
 11309  00116E  0A01               	xorlw	1	; case 33
 11310  001170  B4D8               	btfsc	status,2,c
 11311  001172  D71A               	goto	i2l9232
 11312  001174  0A03               	xorlw	3	; case 34
 11313  001176  B4D8               	btfsc	status,2,c
 11314  001178  D717               	goto	i2l9232
 11315  00117A  0A01               	xorlw	1	; case 35
 11316  00117C  B4D8               	btfsc	status,2,c
 11317  00117E  D714               	goto	i2l9232
 11318  001180  0A07               	xorlw	7	; case 36
 11319  001182  B4D8               	btfsc	status,2,c
 11320  001184  D711               	goto	i2l9232
 11321  001186  0A01               	xorlw	1	; case 37
 11322  001188  B4D8               	btfsc	status,2,c
 11323  00118A  D70E               	goto	i2l9232
 11324  00118C  0A03               	xorlw	3	; case 38
 11325  00118E  B4D8               	btfsc	status,2,c
 11326  001190  D70B               	goto	i2l9232
 11327  001192  0A01               	xorlw	1	; case 39
 11328  001194  B4D8               	btfsc	status,2,c
 11329  001196  D708               	goto	i2l9232
 11330  001198  0A0F               	xorlw	15	; case 40
 11331  00119A  B4D8               	btfsc	status,2,c
 11332  00119C  D705               	goto	i2l9232
 11333  00119E  0A01               	xorlw	1	; case 41
 11334  0011A0  B4D8               	btfsc	status,2,c
 11335  0011A2  D702               	goto	i2l9232
 11336  0011A4  0A03               	xorlw	3	; case 42
 11337  0011A6  B4D8               	btfsc	status,2,c
 11338  0011A8  D6FF               	goto	i2l9232
 11339  0011AA  0A01               	xorlw	1	; case 43
 11340  0011AC  B4D8               	btfsc	status,2,c
 11341  0011AE  D6FC               	goto	i2l9232
 11342  0011B0  0A07               	xorlw	7	; case 44
 11343  0011B2  B4D8               	btfsc	status,2,c
 11344  0011B4  D6F9               	goto	i2l9232
 11345  0011B6  0A01               	xorlw	1	; case 45
 11346  0011B8  B4D8               	btfsc	status,2,c
 11347  0011BA  D6F6               	goto	i2l9232
 11348  0011BC  0A03               	xorlw	3	; case 46
 11349  0011BE  B4D8               	btfsc	status,2,c
 11350  0011C0  D6F3               	goto	i2l9232
 11351  0011C2  0A01               	xorlw	1	; case 47
 11352  0011C4  B4D8               	btfsc	status,2,c
 11353  0011C6  D6F0               	goto	i2l9232
 11354  0011C8  0A1F               	xorlw	31	; case 48
 11355  0011CA  B4D8               	btfsc	status,2,c
 11356  0011CC  D6ED               	goto	i2l9232
 11357  0011CE  0A01               	xorlw	1	; case 49
 11358  0011D0  B4D8               	btfsc	status,2,c
 11359  0011D2  D6EA               	goto	i2l9232
 11360  0011D4  0A03               	xorlw	3	; case 50
 11361  0011D6  B4D8               	btfsc	status,2,c
 11362  0011D8  D6E7               	goto	i2l9232
 11363  0011DA  0A01               	xorlw	1	; case 51
 11364  0011DC  B4D8               	btfsc	status,2,c
 11365  0011DE  D6E4               	goto	i2l9232
 11366  0011E0  0A07               	xorlw	7	; case 52
 11367  0011E2  B4D8               	btfsc	status,2,c
 11368  0011E4  D6E1               	goto	i2l9232
 11369  0011E6  0A01               	xorlw	1	; case 53
 11370  0011E8  B4D8               	btfsc	status,2,c
 11371  0011EA  D6DE               	goto	i2l9232
 11372  0011EC  0A03               	xorlw	3	; case 54
 11373  0011EE  B4D8               	btfsc	status,2,c
 11374  0011F0  D6DB               	goto	i2l9232
 11375  0011F2  0A01               	xorlw	1	; case 55
 11376  0011F4  B4D8               	btfsc	status,2,c
 11377  0011F6  D6D8               	goto	i2l9232
 11378  0011F8  0A0F               	xorlw	15	; case 56
 11379  0011FA  B4D8               	btfsc	status,2,c
 11380  0011FC  D6D5               	goto	i2l9232
 11381  0011FE  0A01               	xorlw	1	; case 57
 11382  001200  B4D8               	btfsc	status,2,c
 11383  001202  D6D2               	goto	i2l9232
 11384  001204  0A03               	xorlw	3	; case 58
 11385  001206  B4D8               	btfsc	status,2,c
 11386  001208  D6CF               	goto	i2l9232
 11387  00120A  0A01               	xorlw	1	; case 59
 11388  00120C  B4D8               	btfsc	status,2,c
 11389  00120E  D6CC               	goto	i2l9232
 11390  001210  0A07               	xorlw	7	; case 60
 11391  001212  B4D8               	btfsc	status,2,c
 11392  001214  D6C9               	goto	i2l9232
 11393  001216  0A01               	xorlw	1	; case 61
 11394  001218  B4D8               	btfsc	status,2,c
 11395  00121A  D6C6               	goto	i2l9232
 11396  00121C  0A03               	xorlw	3	; case 62
 11397  00121E  B4D8               	btfsc	status,2,c
 11398  001220  D6C3               	goto	i2l9232
 11399  001222  0A01               	xorlw	1	; case 63
 11400  001224  B4D8               	btfsc	status,2,c
 11401  001226  D6C0               	goto	i2l9232
 11402  001228  0A7F               	xorlw	127	; case 64
 11403  00122A  B4D8               	btfsc	status,2,c
 11404  00122C  D6BD               	goto	i2l9232
 11405  00122E  0A01               	xorlw	1	; case 65
 11406  001230  B4D8               	btfsc	status,2,c
 11407  001232  D6BA               	goto	i2l9232
 11408  001234  0A03               	xorlw	3	; case 66
 11409  001236  B4D8               	btfsc	status,2,c
 11410  001238  D6B7               	goto	i2l9232
 11411  00123A  0A01               	xorlw	1	; case 67
 11412  00123C  B4D8               	btfsc	status,2,c
 11413  00123E  D6B4               	goto	i2l9232
 11414  001240  0A07               	xorlw	7	; case 68
 11415  001242  B4D8               	btfsc	status,2,c
 11416  001244  D6B1               	goto	i2l9232
 11417  001246  0A01               	xorlw	1	; case 69
 11418  001248  B4D8               	btfsc	status,2,c
 11419  00124A  D6AE               	goto	i2l9232
 11420  00124C  0A03               	xorlw	3	; case 70
 11421  00124E  B4D8               	btfsc	status,2,c
 11422  001250  D6AB               	goto	i2l9232
 11423  001252  0A01               	xorlw	1	; case 71
 11424  001254  B4D8               	btfsc	status,2,c
 11425  001256  D6A8               	goto	i2l9232
 11426  001258  0A0F               	xorlw	15	; case 72
 11427  00125A  B4D8               	btfsc	status,2,c
 11428  00125C  D6A5               	goto	i2l9232
 11429  00125E  0A01               	xorlw	1	; case 73
 11430  001260  B4D8               	btfsc	status,2,c
 11431  001262  D6A2               	goto	i2l9232
 11432  001264  0A03               	xorlw	3	; case 74
 11433  001266  B4D8               	btfsc	status,2,c
 11434  001268  D69F               	goto	i2l9232
 11435  00126A  0A01               	xorlw	1	; case 75
 11436  00126C  B4D8               	btfsc	status,2,c
 11437  00126E  D69C               	goto	i2l9232
 11438  001270  0A07               	xorlw	7	; case 76
 11439  001272  B4D8               	btfsc	status,2,c
 11440  001274  D699               	goto	i2l9232
 11441  001276  0A01               	xorlw	1	; case 77
 11442  001278  B4D8               	btfsc	status,2,c
 11443  00127A  D696               	goto	i2l9232
 11444  00127C  0A03               	xorlw	3	; case 78
 11445  00127E  B4D8               	btfsc	status,2,c
 11446  001280  D693               	goto	i2l9232
 11447  001282  0A01               	xorlw	1	; case 79
 11448  001284  B4D8               	btfsc	status,2,c
 11449  001286  D690               	goto	i2l9232
 11450  001288  0A1F               	xorlw	31	; case 80
 11451  00128A  B4D8               	btfsc	status,2,c
 11452  00128C  D68D               	goto	i2l9232
 11453  00128E  0A01               	xorlw	1	; case 81
 11454  001290  B4D8               	btfsc	status,2,c
 11455  001292  D68A               	goto	i2l9232
 11456  001294  0A03               	xorlw	3	; case 82
 11457  001296  B4D8               	btfsc	status,2,c
 11458  001298  D687               	goto	i2l9232
 11459  00129A  0A01               	xorlw	1	; case 83
 11460  00129C  B4D8               	btfsc	status,2,c
 11461  00129E  D684               	goto	i2l9232
 11462  0012A0  0A07               	xorlw	7	; case 84
 11463  0012A2  B4D8               	btfsc	status,2,c
 11464  0012A4  D681               	goto	i2l9232
 11465  0012A6  0A01               	xorlw	1	; case 85
 11466  0012A8  B4D8               	btfsc	status,2,c
 11467  0012AA  D67E               	goto	i2l9232
 11468  0012AC  0A03               	xorlw	3	; case 86
 11469  0012AE  B4D8               	btfsc	status,2,c
 11470  0012B0  D67B               	goto	i2l9232
 11471  0012B2  0A01               	xorlw	1	; case 87
 11472  0012B4  B4D8               	btfsc	status,2,c
 11473  0012B6  D678               	goto	i2l9232
 11474  0012B8  0A0F               	xorlw	15	; case 88
 11475  0012BA  B4D8               	btfsc	status,2,c
 11476  0012BC  D675               	goto	i2l9232
 11477  0012BE  0A01               	xorlw	1	; case 89
 11478  0012C0  B4D8               	btfsc	status,2,c
 11479  0012C2  D672               	goto	i2l9232
 11480  0012C4  0A03               	xorlw	3	; case 90
 11481  0012C6  B4D8               	btfsc	status,2,c
 11482  0012C8  D66F               	goto	i2l9232
 11483  0012CA  0A01               	xorlw	1	; case 91
 11484  0012CC  B4D8               	btfsc	status,2,c
 11485  0012CE  D66C               	goto	i2l9232
 11486  0012D0  0A07               	xorlw	7	; case 92
 11487  0012D2  B4D8               	btfsc	status,2,c
 11488  0012D4  D669               	goto	i2l9232
 11489  0012D6  0A01               	xorlw	1	; case 93
 11490  0012D8  B4D8               	btfsc	status,2,c
 11491  0012DA  D666               	goto	i2l9232
 11492  0012DC  0A03               	xorlw	3	; case 94
 11493  0012DE  B4D8               	btfsc	status,2,c
 11494  0012E0  D663               	goto	i2l9232
 11495  0012E2  0A01               	xorlw	1	; case 95
 11496  0012E4  B4D8               	btfsc	status,2,c
 11497  0012E6  D660               	goto	i2l9232
 11498  0012E8  0A3F               	xorlw	63	; case 96
 11499  0012EA  B4D8               	btfsc	status,2,c
 11500  0012EC  D65D               	goto	i2l9232
 11501  0012EE  0A01               	xorlw	1	; case 97
 11502  0012F0  B4D8               	btfsc	status,2,c
 11503  0012F2  D65A               	goto	i2l9232
 11504  0012F4  0A03               	xorlw	3	; case 98
 11505  0012F6  B4D8               	btfsc	status,2,c
 11506  0012F8  D657               	goto	i2l9232
 11507  0012FA  0A01               	xorlw	1	; case 99
 11508  0012FC  B4D8               	btfsc	status,2,c
 11509  0012FE  D654               	goto	i2l9232
 11510  001300  0A07               	xorlw	7	; case 100
 11511  001302  B4D8               	btfsc	status,2,c
 11512  001304  D651               	goto	i2l9232
 11513  001306  0A01               	xorlw	1	; case 101
 11514  001308  B4D8               	btfsc	status,2,c
 11515  00130A  D64E               	goto	i2l9232
 11516  00130C  0A03               	xorlw	3	; case 102
 11517  00130E  B4D8               	btfsc	status,2,c
 11518  001310  D64B               	goto	i2l9232
 11519  001312  0A01               	xorlw	1	; case 103
 11520  001314  B4D8               	btfsc	status,2,c
 11521  001316  D648               	goto	i2l9232
 11522  001318  0A0F               	xorlw	15	; case 104
 11523  00131A  B4D8               	btfsc	status,2,c
 11524  00131C  D645               	goto	i2l9232
 11525  00131E  0A01               	xorlw	1	; case 105
 11526  001320  B4D8               	btfsc	status,2,c
 11527  001322  D642               	goto	i2l9232
 11528  001324  0A03               	xorlw	3	; case 106
 11529  001326  B4D8               	btfsc	status,2,c
 11530  001328  D63F               	goto	i2l9232
 11531  00132A  0A01               	xorlw	1	; case 107
 11532  00132C  B4D8               	btfsc	status,2,c
 11533  00132E  D63C               	goto	i2l9232
 11534  001330  0A07               	xorlw	7	; case 108
 11535  001332  B4D8               	btfsc	status,2,c
 11536  001334  D639               	goto	i2l9232
 11537  001336  0A01               	xorlw	1	; case 109
 11538  001338  B4D8               	btfsc	status,2,c
 11539  00133A  D636               	goto	i2l9232
 11540  00133C  0A03               	xorlw	3	; case 110
 11541  00133E  B4D8               	btfsc	status,2,c
 11542  001340  D633               	goto	i2l9232
 11543  001342  0A01               	xorlw	1	; case 111
 11544  001344  B4D8               	btfsc	status,2,c
 11545  001346  D630               	goto	i2l9232
 11546  001348  0A1F               	xorlw	31	; case 112
 11547  00134A  B4D8               	btfsc	status,2,c
 11548  00134C  D62D               	goto	i2l9232
 11549  00134E  0A01               	xorlw	1	; case 113
 11550  001350  B4D8               	btfsc	status,2,c
 11551  001352  D62A               	goto	i2l9232
 11552  001354  0A03               	xorlw	3	; case 114
 11553  001356  B4D8               	btfsc	status,2,c
 11554  001358  D627               	goto	i2l9232
 11555  00135A  0A01               	xorlw	1	; case 115
 11556  00135C  B4D8               	btfsc	status,2,c
 11557  00135E  D624               	goto	i2l9232
 11558  001360  0A07               	xorlw	7	; case 116
 11559  001362  B4D8               	btfsc	status,2,c
 11560  001364  D621               	goto	i2l9232
 11561  001366  0A01               	xorlw	1	; case 117
 11562  001368  B4D8               	btfsc	status,2,c
 11563  00136A  D61E               	goto	i2l9232
 11564  00136C  0A03               	xorlw	3	; case 118
 11565  00136E  B4D8               	btfsc	status,2,c
 11566  001370  D61B               	goto	i2l9232
 11567  001372  0A01               	xorlw	1	; case 119
 11568  001374  B4D8               	btfsc	status,2,c
 11569  001376  D618               	goto	i2l9232
 11570  001378  0A0F               	xorlw	15	; case 120
 11571  00137A  B4D8               	btfsc	status,2,c
 11572  00137C  D615               	goto	i2l9232
 11573  00137E  0A01               	xorlw	1	; case 121
 11574  001380  B4D8               	btfsc	status,2,c
 11575  001382  D612               	goto	i2l9232
 11576  001384  0A03               	xorlw	3	; case 122
 11577  001386  B4D8               	btfsc	status,2,c
 11578  001388  D60F               	goto	i2l9232
 11579  00138A  0A01               	xorlw	1	; case 123
 11580  00138C  B4D8               	btfsc	status,2,c
 11581  00138E  D60C               	goto	i2l9232
 11582  001390  0A07               	xorlw	7	; case 124
 11583  001392  B4D8               	btfsc	status,2,c
 11584  001394  D609               	goto	i2l9232
 11585  001396  0A01               	xorlw	1	; case 125
 11586  001398  B4D8               	btfsc	status,2,c
 11587  00139A  D606               	goto	i2l9232
 11588  00139C  0A03               	xorlw	3	; case 126
 11589  00139E  B4D8               	btfsc	status,2,c
 11590  0013A0  D603               	goto	i2l9232
 11591  0013A2  0A01               	xorlw	1	; case 127
 11592  0013A4  B4D8               	btfsc	status,2,c
 11593  0013A6  D600               	goto	i2l9232
 11594  0013A8  0AFF               	xorlw	255	; case 128
 11595  0013AA  B4D8               	btfsc	status,2,c
 11596  0013AC  D5FD               	goto	i2l9232
 11597  0013AE  D018               	goto	i2l9248
 11598  0013B0                     i2l10118:
 11599                           
 11600                           ; BSR set to: 1
 11601                           ; Switch size 1, requested type "space"
 11602                           ; Number of cases is 1, Range of values is 0 to 0
 11603                           ; switch strategies available:
 11604                           ; Name         Instructions Cycles
 11605                           ; simple_byte            4     3 (average)
 11606                           ;	Chosen strategy is simple_byte
 11607  0013B0  501A               	movf	??_update+1,w,c
 11608  0013B2  0A00               	xorlw	0	; case 0
 11609  0013B4  B4D8               	btfsc	status,2,c
 11610  0013B6  D613               	goto	i2l9234
 11611  0013B8  D013               	goto	i2l9248
 11612  0013BA                     i2l10120:
 11613                           
 11614                           ; BSR set to: 1
 11615                           ; Switch size 1, requested type "space"
 11616                           ; Number of cases is 1, Range of values is 0 to 0
 11617                           ; switch strategies available:
 11618                           ; Name         Instructions Cycles
 11619                           ; simple_byte            4     3 (average)
 11620                           ;	Chosen strategy is simple_byte
 11621  0013BA  501A               	movf	??_update+1,w,c
 11622  0013BC  0A00               	xorlw	0	; case 0
 11623  0013BE  B4D8               	btfsc	status,2,c
 11624  0013C0  D61A               	goto	i2l9236
 11625  0013C2  D00E               	goto	i2l9248
 11626  0013C4                     i2l10122:
 11627                           
 11628                           ; BSR set to: 1
 11629                           ; Switch size 1, requested type "space"
 11630                           ; Number of cases is 1, Range of values is 0 to 0
 11631                           ; switch strategies available:
 11632                           ; Name         Instructions Cycles
 11633                           ; simple_byte            4     3 (average)
 11634                           ;	Chosen strategy is simple_byte
 11635  0013C4  501A               	movf	??_update+1,w,c
 11636  0013C6  0A00               	xorlw	0	; case 0
 11637  0013C8  B4D8               	btfsc	status,2,c
 11638  0013CA  D621               	goto	i2l9238
 11639  0013CC  D009               	goto	i2l9248
 11640  0013CE                     i2l10124:
 11641                           
 11642                           ; BSR set to: 1
 11643                           ; Switch size 1, requested type "space"
 11644                           ; Number of cases is 1, Range of values is 0 to 0
 11645                           ; switch strategies available:
 11646                           ; Name         Instructions Cycles
 11647                           ; simple_byte            4     3 (average)
 11648                           ;	Chosen strategy is simple_byte
 11649  0013CE  501A               	movf	??_update+1,w,c
 11650  0013D0  0A00               	xorlw	0	; case 0
 11651  0013D2  B4D8               	btfsc	status,2,c
 11652  0013D4  D628               	goto	i2l9240
 11653  0013D6  D004               	goto	i2l9248
 11654  0013D8                     i2l10126:
 11655                           
 11656                           ; BSR set to: 1
 11657                           ; Switch size 1, requested type "space"
 11658                           ; Number of cases is 1, Range of values is 0 to 0
 11659                           ; switch strategies available:
 11660                           ; Name         Instructions Cycles
 11661                           ; simple_byte            4     3 (average)
 11662                           ;	Chosen strategy is simple_byte
 11663  0013D8  501A               	movf	??_update+1,w,c
 11664  0013DA  0A00               	xorlw	0	; case 0
 11665  0013DC  B4D8               	btfsc	status,2,c
 11666  0013DE  D62F               	goto	i2l9242
 11667  0013E0                     i2l9248:
 11668                           
 11669                           ;disp.c: 41: screen.changed &= ~(1 << cnt);
 11670  0013E0  C01E  F019         	movff	update@cnt,??_update
 11671  0013E4  0E01               	movlw	1
 11672  0013E6  6E1A               	movwf	(??_update+1)& (0+255),c
 11673  0013E8  6A1B               	clrf	(??_update+2)& (0+255),c
 11674  0013EA  2A19               	incf	??_update,f,c
 11675  0013EC  D003               	goto	i2u810_44
 11676  0013EE                     i2u810_45:
 11677  0013EE  90D8               	bcf	status,0,c
 11678  0013F0  361A               	rlcf	??_update+1,f,c
 11679  0013F2  361B               	rlcf	??_update+2,f,c
 11680  0013F4                     i2u810_44:
 11681  0013F4  2E19               	decfsz	??_update,f,c
 11682  0013F6  D7FB               	goto	i2u810_45
 11683  0013F8  1C1A               	comf	??_update+1,w,c
 11684  0013FA  6E1C               	movwf	(??_update+3)& (0+255),c
 11685  0013FC  1C1B               	comf	??_update+2,w,c
 11686  0013FE  6E1D               	movwf	(??_update+4)& (0+255),c
 11687  001400  501C               	movf	??_update+3,w,c
 11688  001402  0101               	movlb	1	; () banked
 11689  001404  0101               	movlb	1	; () banked
 11690  001406  170B               	andwf	(_screen+11)& (0+255),f,b
 11691  001408  501D               	movf	??_update+4,w,c
 11692  00140A  0101               	movlb	1	; () banked
 11693  00140C  0101               	movlb	1	; () banked
 11694  00140E  170C               	andwf	(_screen+12)& (0+255),f,b
 11695                           
 11696                           ; BSR set to: 1
 11697  001410  061E               	decf	update@cnt,f,c
 11698  001412  D5C7               	goto	L22
 11699  001414                     i2l136:
 11700                           
 11701                           ; BSR set to: 1
 11702  001414  0012               	return	
 11703  001416                     __end_of_update:
 11704                           	opt stack 0
 11705                           tosu	equ	0xFFF
 11706                           tosh	equ	0xFFE
 11707                           tosl	equ	0xFFD
 11708                           pclatu	equ	0xFFB
 11709                           pclath	equ	0xFFA
 11710                           tblptru	equ	0xFF8
 11711                           tblptrh	equ	0xFF7
 11712                           tblptrl	equ	0xFF6
 11713                           tablat	equ	0xFF5
 11714                           prodh	equ	0xFF4
 11715                           prodl	equ	0xFF3
 11716                           intcon	equ	0xFF2
 11717                           intcon2	equ	0xFF1
 11718                           indf0	equ	0xFEF
 11719                           postinc0	equ	0xFEE
 11720                           fsr0h	equ	0xFEA
 11721                           fsr0l	equ	0xFE9
 11722                           wreg	equ	0xFE8
 11723                           postinc1	equ	0xFE6
 11724                           postdec1	equ	0xFE5
 11725                           fsr1h	equ	0xFE2
 11726                           fsr1l	equ	0xFE1
 11727                           indf2	equ	0xFDF
 11728                           postinc2	equ	0xFDE
 11729                           postdec2	equ	0xFDD
 11730                           plusw2	equ	0xFDB
 11731                           fsr2h	equ	0xFDA
 11732                           fsr2l	equ	0xFD9
 11733                           status	equ	0xFD8
 11734                           
 11735 ;; *************** function _writeDigit *****************
 11736 ;; Defined at:
 11737 ;;		line 105 in file "disp.c"
 11738 ;; Parameters:    Size  Location     Type
 11739 ;;  digit           1   19[COMRAM] unsigned char 
 11740 ;;  segs            1   20[COMRAM] unsigned char 
 11741 ;; Auto vars:     Size  Location     Type
 11742 ;;  cnt             1   23[COMRAM] char 
 11743 ;;  dig             1   22[COMRAM] unsigned char 
 11744 ;; Return value:  Size  Location     Type
 11745 ;;		None               void
 11746 ;; Registers used:
 11747 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 11748 ;; Tracked objects:
 11749 ;;		On entry : 0/0
 11750 ;;		On exit  : 0/0
 11751 ;;		Unchanged: 0/0
 11752 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11753 ;;      Params:         2       0       0       0       0       0       0       0       0
 11754 ;;      Locals:         2       0       0       0       0       0       0       0       0
 11755 ;;      Temps:          1       0       0       0       0       0       0       0       0
 11756 ;;      Totals:         5       0       0       0       0       0       0       0       0
 11757 ;;Total ram usage:        5 bytes
 11758 ;; Hardware stack levels used:    1
 11759 ;; Hardware stack levels required when called:    2
 11760 ;; This function calls:
 11761 ;;		_spi
 11762 ;;		_log2
 11763 ;;		_rotate
 11764 ;; This function is called by:
 11765 ;;		_update
 11766 ;; This function uses a non-reentrant model
 11767 ;;
 11768                           
 11769                           	psect	text44
 11770  003522                     __ptext44:
 11771                           	opt stack 0
 11772  003522                     _writeDigit:
 11773                           	opt stack 22
 11774                           
 11775                           ;disp.c: 106: uint8_t dig = (uint8_t) log2(digit);
 11776                           
 11777                           ; BSR set to: 1
 11778                           ;incstack = 0
 11779                           ;incstack = 0
 11780  003522  5014               	movf	writeDigit@digit,w,c
 11781  003524  6E0C               	movwf	?_log2,c
 11782  003526  6A0D               	clrf	?_log2+1,c
 11783  003528  6A0E               	clrf	?_log2+2,c
 11784  00352A  6A0F               	clrf	?_log2+3,c
 11785  00352C  ECB8  F01A         	call	_log2	;wreg free
 11786  003530  500C               	movf	?_log2,w,c
 11787  003532  6E17               	movwf	writeDigit@dig,c
 11788                           
 11789                           ;disp.c: 107: screen.digits.screen[dig].bits = segs;
 11790  003534  5017               	movf	writeDigit@dig,w,c
 11791  003536  0D01               	mullw	1
 11792  003538  0101               	movlb	1	; () banked
 11793  00353A  0E00               	movlw	low _screen
 11794  00353C  24F3               	addwf	prodl,w,c
 11795  00353E  6ED9               	movwf	fsr2l,c
 11796  003540  0101               	movlb	1	; () banked
 11797  003542  0E01               	movlw	high _screen
 11798  003544  20F4               	addwfc	prodh,w,c
 11799  003546  6EDA               	movwf	fsr2h,c
 11800  003548  C015  FFDF         	movff	writeDigit@segs,indf2
 11801                           
 11802                           ; BSR set to: 1
 11803                           ;disp.c: 110: int8_t cnt;
 11804                           ;disp.c: 111: for (cnt = 7; cnt >= 0; cnt--) {
 11805  00354C  6E16               	movwf	??_writeDigit& (0+255),c
 11806  00354E  0E07               	movlw	7
 11807  003550  6E18               	movwf	writeDigit@cnt,c
 11808  003552  5016               	movf	??_writeDigit& (0+255),w,c
 11809  003554                     
 11810                           ; BSR set to: 1
 11811  003554  BE18               	btfsc	writeDigit@cnt,7,c
 11812  003556  D00B               	goto	i2l166
 11813                           
 11814                           ;disp.c: 113: spi(cnt + 1, rotate(cnt));
 11815                           
 11816                           ; BSR set to: 1
 11817                           
 11818                           ; BSR set to: 1
 11819  003558  2818               	incf	writeDigit@cnt,w,c
 11820  00355A  6E07               	movwf	?_spi,c
 11821  00355C  C018  F001         	movff	writeDigit@cnt,?_rotate
 11822  003560  EC3A  F01A         	call	_rotate	;wreg free
 11823  003564  6E08               	movwf	?_spi+1,c
 11824  003566  EC9A  F017         	call	_spi	;wreg free
 11825  00356A  0618               	decf	writeDigit@cnt,f,c
 11826  00356C  D7F3               	goto	L23
 11827  00356E                     i2l166:
 11828  00356E  0012               	return	
 11829  003570                     __end_of_writeDigit:
 11830                           	opt stack 0
 11831                           tosu	equ	0xFFF
 11832                           tosh	equ	0xFFE
 11833                           tosl	equ	0xFFD
 11834                           pclatu	equ	0xFFB
 11835                           pclath	equ	0xFFA
 11836                           tblptru	equ	0xFF8
 11837                           tblptrh	equ	0xFF7
 11838                           tblptrl	equ	0xFF6
 11839                           tablat	equ	0xFF5
 11840                           prodh	equ	0xFF4
 11841                           prodl	equ	0xFF3
 11842                           intcon	equ	0xFF2
 11843                           intcon2	equ	0xFF1
 11844                           indf0	equ	0xFEF
 11845                           postinc0	equ	0xFEE
 11846                           fsr0h	equ	0xFEA
 11847                           fsr0l	equ	0xFE9
 11848                           wreg	equ	0xFE8
 11849                           postinc1	equ	0xFE6
 11850                           postdec1	equ	0xFE5
 11851                           fsr1h	equ	0xFE2
 11852                           fsr1l	equ	0xFE1
 11853                           indf2	equ	0xFDF
 11854                           postinc2	equ	0xFDE
 11855                           postdec2	equ	0xFDD
 11856                           plusw2	equ	0xFDB
 11857                           fsr2h	equ	0xFDA
 11858                           fsr2l	equ	0xFD9
 11859                           status	equ	0xFD8
 11860                           
 11861 ;; *************** function _rotate *****************
 11862 ;; Defined at:
 11863 ;;		line 194 in file "disp.c"
 11864 ;; Parameters:    Size  Location     Type
 11865 ;;  seg             1    0[COMRAM] unsigned char 
 11866 ;; Auto vars:     Size  Location     Type
 11867 ;;  cnt             1    5[COMRAM] char 
 11868 ;;  ret             1    4[COMRAM] unsigned char 
 11869 ;; Return value:  Size  Location     Type
 11870 ;;                  1    wreg      unsigned char 
 11871 ;; Registers used:
 11872 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 11873 ;; Tracked objects:
 11874 ;;		On entry : 0/0
 11875 ;;		On exit  : 0/0
 11876 ;;		Unchanged: 0/0
 11877 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11878 ;;      Params:         1       0       0       0       0       0       0       0       0
 11879 ;;      Locals:         2       0       0       0       0       0       0       0       0
 11880 ;;      Temps:          3       0       0       0       0       0       0       0       0
 11881 ;;      Totals:         6       0       0       0       0       0       0       0       0
 11882 ;;Total ram usage:        6 bytes
 11883 ;; Hardware stack levels used:    1
 11884 ;; This function calls:
 11885 ;;		Nothing
 11886 ;; This function is called by:
 11887 ;;		_writeDigit
 11888 ;; This function uses a non-reentrant model
 11889 ;;
 11890                           
 11891                           	psect	text45
 11892  003474                     __ptext45:
 11893                           	opt stack 0
 11894  003474                     _rotate:
 11895                           	opt stack 23
 11896                           
 11897                           ;disp.c: 195: uint8_t ret = 0;
 11898                           
 11899                           ;incstack = 0
 11900                           ;incstack = 0
 11901  003474  6E02               	movwf	??_rotate& (0+255),c
 11902  003476  0E00               	movlw	0
 11903  003478  6E05               	movwf	rotate@ret,c
 11904  00347A  5002               	movf	??_rotate& (0+255),w,c
 11905                           
 11906                           ;disp.c: 196: int8_t cnt;
 11907                           ;disp.c: 197: for (cnt = 7; cnt >= 0; cnt--) {
 11908  00347C  6E02               	movwf	??_rotate& (0+255),c
 11909  00347E  0E07               	movlw	7
 11910  003480  6E06               	movwf	rotate@cnt,c
 11911  003482  5002               	movf	??_rotate& (0+255),w,c
 11912  003484  BE06               	btfsc	rotate@cnt,7,c
 11913  003486  D022               	goto	i2l4642
 11914                           
 11915                           ;disp.c: 198: ret |= ((screen.digits.screen[cnt].bits >> seg) & 1) << cnt;
 11916  003488  C006  F002         	movff	rotate@cnt,??_rotate
 11917  00348C  C001  F003         	movff	rotate@seg,??_rotate+1
 11918  003490  5006               	movf	rotate@cnt,w,c
 11919  003492  0D01               	mullw	1
 11920  003494  0101               	movlb	1	; () banked
 11921  003496  0E00               	movlw	low _screen
 11922  003498  24F3               	addwf	prodl,w,c
 11923  00349A  6ED9               	movwf	fsr2l,c
 11924  00349C  0101               	movlb	1	; () banked
 11925  00349E  0E01               	movlw	high _screen
 11926  0034A0  20F4               	addwfc	prodh,w,c
 11927  0034A2  6EDA               	movwf	fsr2h,c
 11928  0034A4  50DF               	movf	indf2,w,c
 11929  0034A6  6E04               	movwf	(??_rotate+2)& (0+255),c
 11930  0034A8  2A03               	incf	??_rotate+1,f,c
 11931  0034AA  D002               	goto	i2u243_44
 11932  0034AC                     i2u243_45:
 11933  0034AC  90D8               	bcf	status,0,c
 11934  0034AE  3204               	rrcf	??_rotate+2,f,c
 11935  0034B0                     i2u243_44:
 11936  0034B0  2E03               	decfsz	??_rotate+1,f,c
 11937  0034B2  D7FC               	goto	i2u243_45
 11938  0034B4  0E01               	movlw	1
 11939  0034B6  1604               	andwf	??_rotate+2,f,c
 11940  0034B8  2A02               	incf	??_rotate,f,c
 11941  0034BA  D002               	goto	i2u244_44
 11942  0034BC                     i2u244_45:
 11943  0034BC  90D8               	bcf	status,0,c
 11944  0034BE  3604               	rlcf	??_rotate+2,f,c
 11945  0034C0                     i2u244_44:
 11946  0034C0  2E02               	decfsz	??_rotate,f,c
 11947  0034C2  D7FC               	goto	i2u244_45
 11948  0034C4  5004               	movf	??_rotate+2,w,c
 11949  0034C6  1205               	iorwf	rotate@ret,f,c
 11950                           
 11951                           ; BSR set to: 1
 11952  0034C8  0606               	decf	rotate@cnt,f,c
 11953  0034CA  D7DC               	goto	L24
 11954  0034CC                     i2l4642:
 11955                           
 11956                           ;disp.c: 199: }
 11957                           ;disp.c: 200: return ret;
 11958  0034CC  5005               	movf	rotate@ret,w,c
 11959  0034CE  0012               	return	
 11960  0034D0                     __end_of_rotate:
 11961                           	opt stack 0
 11962                           tosu	equ	0xFFF
 11963                           tosh	equ	0xFFE
 11964                           tosl	equ	0xFFD
 11965                           pclatu	equ	0xFFB
 11966                           pclath	equ	0xFFA
 11967                           tblptru	equ	0xFF8
 11968                           tblptrh	equ	0xFF7
 11969                           tblptrl	equ	0xFF6
 11970                           tablat	equ	0xFF5
 11971                           prodh	equ	0xFF4
 11972                           prodl	equ	0xFF3
 11973                           intcon	equ	0xFF2
 11974                           intcon2	equ	0xFF1
 11975                           indf0	equ	0xFEF
 11976                           postinc0	equ	0xFEE
 11977                           fsr0h	equ	0xFEA
 11978                           fsr0l	equ	0xFE9
 11979                           wreg	equ	0xFE8
 11980                           postinc1	equ	0xFE6
 11981                           postdec1	equ	0xFE5
 11982                           fsr1h	equ	0xFE2
 11983                           fsr1l	equ	0xFE1
 11984                           indf2	equ	0xFDF
 11985                           postinc2	equ	0xFDE
 11986                           postdec2	equ	0xFDD
 11987                           plusw2	equ	0xFDB
 11988                           fsr2h	equ	0xFDA
 11989                           fsr2l	equ	0xFD9
 11990                           status	equ	0xFD8
 11991                           
 11992 ;; *************** function _log2 *****************
 11993 ;; Defined at:
 11994 ;;		line 48 in file "defs.c"
 11995 ;; Parameters:    Size  Location     Type
 11996 ;;  num             4   11[COMRAM] unsigned long 
 11997 ;; Auto vars:     Size  Location     Type
 11998 ;;  log2Val         4   15[COMRAM] unsigned long 
 11999 ;; Return value:  Size  Location     Type
 12000 ;;                  4   11[COMRAM] unsigned long 
 12001 ;; Registers used:
 12002 ;;		wreg, status,2, status,0
 12003 ;; Tracked objects:
 12004 ;;		On entry : 0/0
 12005 ;;		On exit  : 0/0
 12006 ;;		Unchanged: 0/0
 12007 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12008 ;;      Params:         4       0       0       0       0       0       0       0       0
 12009 ;;      Locals:         4       0       0       0       0       0       0       0       0
 12010 ;;      Temps:          0       0       0       0       0       0       0       0       0
 12011 ;;      Totals:         8       0       0       0       0       0       0       0       0
 12012 ;;Total ram usage:        8 bytes
 12013 ;; Hardware stack levels used:    1
 12014 ;; This function calls:
 12015 ;;		Nothing
 12016 ;; This function is called by:
 12017 ;;		_writeDigit
 12018 ;;		_writeChar
 12019 ;;		_writeString
 12020 ;; This function uses a non-reentrant model
 12021 ;;
 12022                           
 12023                           	psect	text46
 12024  003570                     __ptext46:
 12025                           	opt stack 0
 12026  003570                     _log2:
 12027                           	opt stack 21
 12028                           
 12029                           ;defs.c: 49: uint32_t log2Val = 0;
 12030                           
 12031                           ;incstack = 0
 12032                           ;incstack = 0
 12033  003570  0E00               	movlw	0
 12034  003572  6E10               	movwf	log2@log2Val,c
 12035  003574  0E00               	movlw	0
 12036  003576  6E11               	movwf	log2@log2Val+1,c
 12037  003578  0E00               	movlw	0
 12038  00357A  6E12               	movwf	log2@log2Val+2,c
 12039  00357C  0E00               	movlw	0
 12040  00357E  6E13               	movwf	log2@log2Val+3,c
 12041                           
 12042                           ;defs.c: 50: while (num >>= 1) log2Val++;
 12043  003580  D008               	goto	i2l462
 12044  003582                     i2l8900:
 12045  003582  0E01               	movlw	1
 12046  003584  2610               	addwf	log2@log2Val,f,c
 12047  003586  0E00               	movlw	0
 12048  003588  2211               	addwfc	log2@log2Val+1,f,c
 12049  00358A  0E00               	movlw	0
 12050  00358C  2212               	addwfc	log2@log2Val+2,f,c
 12051  00358E  0E00               	movlw	0
 12052  003590  2213               	addwfc	log2@log2Val+3,f,c
 12053  003592                     i2l462:
 12054  003592  90D8               	bcf	status,0,c
 12055  003594  320F               	rrcf	log2@num+3,f,c
 12056  003596  320E               	rrcf	log2@num+2,f,c
 12057  003598  320D               	rrcf	log2@num+1,f,c
 12058  00359A  320C               	rrcf	log2@num,f,c
 12059  00359C  500F               	movf	(log2@num+3)& (0+255),w,c
 12060  00359E  100C               	iorwf	log2@num& (0+255),w,c
 12061  0035A0  100D               	iorwf	(log2@num+1)& (0+255),w,c
 12062  0035A2  100E               	iorwf	(log2@num+2)& (0+255),w,c
 12063  0035A4  A4D8               	btfss	status,2,c
 12064  0035A6  D7ED               	goto	i2l8900
 12065                           
 12066                           ;defs.c: 51: return log2Val;
 12067  0035A8  C010  F00C         	movff	log2@log2Val,?_log2
 12068  0035AC  C011  F00D         	movff	log2@log2Val+1,?_log2+1
 12069  0035B0  C012  F00E         	movff	log2@log2Val+2,?_log2+2
 12070  0035B4  C013  F00F         	movff	log2@log2Val+3,?_log2+3
 12071  0035B8  0012               	return	
 12072  0035BA                     __end_of_log2:
 12073                           	opt stack 0
 12074                           tosu	equ	0xFFF
 12075                           tosh	equ	0xFFE
 12076                           tosl	equ	0xFFD
 12077                           pclatu	equ	0xFFB
 12078                           pclath	equ	0xFFA
 12079                           tblptru	equ	0xFF8
 12080                           tblptrh	equ	0xFF7
 12081                           tblptrl	equ	0xFF6
 12082                           tablat	equ	0xFF5
 12083                           prodh	equ	0xFF4
 12084                           prodl	equ	0xFF3
 12085                           intcon	equ	0xFF2
 12086                           intcon2	equ	0xFF1
 12087                           indf0	equ	0xFEF
 12088                           postinc0	equ	0xFEE
 12089                           fsr0h	equ	0xFEA
 12090                           fsr0l	equ	0xFE9
 12091                           wreg	equ	0xFE8
 12092                           postinc1	equ	0xFE6
 12093                           postdec1	equ	0xFE5
 12094                           fsr1h	equ	0xFE2
 12095                           fsr1l	equ	0xFE1
 12096                           indf2	equ	0xFDF
 12097                           postinc2	equ	0xFDE
 12098                           postdec2	equ	0xFDD
 12099                           plusw2	equ	0xFDB
 12100                           fsr2h	equ	0xFDA
 12101                           fsr2l	equ	0xFD9
 12102                           status	equ	0xFD8
 12103                           
 12104 ;; *************** function _spi *****************
 12105 ;; Defined at:
 12106 ;;		line 84 in file "disp.c"
 12107 ;; Parameters:    Size  Location     Type
 12108 ;;  addr            1    6[COMRAM] unsigned char 
 12109 ;;  data            1    7[COMRAM] unsigned char 
 12110 ;; Auto vars:     Size  Location     Type
 12111 ;;  send            2   11[COMRAM] unsigned int 
 12112 ;;  cnt             1   13[COMRAM] char 
 12113 ;; Return value:  Size  Location     Type
 12114 ;;		None               void
 12115 ;; Registers used:
 12116 ;;		wreg, status,2, status,0, cstack
 12117 ;; Tracked objects:
 12118 ;;		On entry : 0/0
 12119 ;;		On exit  : 0/0
 12120 ;;		Unchanged: 0/0
 12121 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12122 ;;      Params:         2       0       0       0       0       0       0       0       0
 12123 ;;      Locals:         3       0       0       0       0       0       0       0       0
 12124 ;;      Temps:          3       0       0       0       0       0       0       0       0
 12125 ;;      Totals:         8       0       0       0       0       0       0       0       0
 12126 ;;Total ram usage:        8 bytes
 12127 ;; Hardware stack levels used:    1
 12128 ;; Hardware stack levels required when called:    1
 12129 ;; This function calls:
 12130 ;;		_wait
 12131 ;; This function is called by:
 12132 ;;		_update
 12133 ;;		_writeDigit
 12134 ;; This function uses a non-reentrant model
 12135 ;;
 12136                           
 12137                           	psect	text47
 12138  002F34                     __ptext47:
 12139                           	opt stack 0
 12140  002F34                     _spi:
 12141                           	opt stack 23
 12142                           
 12143                           ;disp.c: 85: uint16_t send = (addr << 8) | data;
 12144                           
 12145                           ;incstack = 0
 12146                           ;incstack = 0
 12147  002F34  5008               	movf	spi@data,w,c
 12148  002F36  C007  F009         	movff	spi@addr,??_spi
 12149  002F3A  6A0A               	clrf	(??_spi+1)& (0+255),c
 12150  002F3C  C009  F00A         	movff	??_spi,??_spi+1
 12151  002F40  6A09               	clrf	??_spi,c
 12152  002F42  1009               	iorwf	??_spi,w,c
 12153  002F44  6E0C               	movwf	spi@send,c
 12154  002F46  500A               	movf	??_spi+1,w,c
 12155  002F48  6E0D               	movwf	spi@send+1,c
 12156                           
 12157                           ;disp.c: 86: LATA4 = 0;
 12158  002F4A  9889               	bcf	3977,4,c	;volatile
 12159                           
 12160                           ;disp.c: 87: LATA1 = 0;
 12161  002F4C  9289               	bcf	3977,1,c	;volatile
 12162                           
 12163                           ;disp.c: 88: LATA3 = 0;
 12164  002F4E  9689               	bcf	3977,3,c	;volatile
 12165                           
 12166                           ;disp.c: 89: int8_t cnt;
 12167                           ;disp.c: 90: for (cnt = 15; cnt >= 0; cnt--) {
 12168  002F50  6E09               	movwf	??_spi& (0+255),c
 12169  002F52  0E0F               	movlw	15
 12170  002F54  6E0E               	movwf	spi@cnt,c
 12171  002F56  5009               	movf	??_spi& (0+255),w,c
 12172  002F58  BE0E               	btfsc	spi@cnt,7,c
 12173  002F5A  D02D               	goto	i2l160
 12174                           
 12175                           ;disp.c: 91: LATA1 = 0x1 & (send >> cnt);
 12176  002F5C  C00E  F009         	movff	spi@cnt,??_spi
 12177  002F60  C00C  F00A         	movff	spi@send,??_spi+1
 12178  002F64  C00D  F00B         	movff	spi@send+1,??_spi+2
 12179  002F68  2A09               	incf	??_spi,f,c
 12180  002F6A  D003               	goto	i2u308_44
 12181  002F6C                     i2u308_45:
 12182  002F6C  90D8               	bcf	status,0,c
 12183  002F6E  320B               	rrcf	??_spi+2,f,c
 12184  002F70  320A               	rrcf	??_spi+1,f,c
 12185  002F72                     i2u308_44:
 12186  002F72  2E09               	decfsz	??_spi,f,c
 12187  002F74  D7FB               	goto	i2u308_45
 12188  002F76  300A               	rrcf	??_spi+1,w,c
 12189  002F78  A0D8               	btfss	status,0,c
 12190  002F7A  D001               	bra	i2u309_45
 12191  002F7C  8289               	bsf	3977,1,c	;volatile
 12192  002F7E                     i2u309_45:
 12193  002F7E  B0D8               	btfsc	status,0,c
 12194  002F80  D001               	bra	i2u309_46
 12195  002F82  9289               	bcf	3977,1,c	;volatile
 12196  002F84                     i2u309_46:
 12197                           
 12198                           ;disp.c: 92: wait(0);
 12199  002F84  0E00               	movlw	0
 12200  002F86  6E01               	movwf	?_wait,c
 12201  002F88  0E00               	movlw	0
 12202  002F8A  6E02               	movwf	?_wait+1,c
 12203  002F8C  0E00               	movlw	0
 12204  002F8E  6E03               	movwf	?_wait+2,c
 12205  002F90  0E00               	movlw	0
 12206  002F92  6E04               	movwf	?_wait+3,c
 12207  002F94  EC69  F01C         	call	_wait	;wreg free
 12208                           
 12209                           ;disp.c: 93: LATA3 = 1;
 12210  002F98  8689               	bsf	3977,3,c	;volatile
 12211                           
 12212                           ;disp.c: 94: wait(0);
 12213  002F9A  0E00               	movlw	0
 12214  002F9C  6E01               	movwf	?_wait,c
 12215  002F9E  0E00               	movlw	0
 12216  002FA0  6E02               	movwf	?_wait+1,c
 12217  002FA2  0E00               	movlw	0
 12218  002FA4  6E03               	movwf	?_wait+2,c
 12219  002FA6  0E00               	movlw	0
 12220  002FA8  6E04               	movwf	?_wait+3,c
 12221  002FAA  EC69  F01C         	call	_wait	;wreg free
 12222                           
 12223                           ;disp.c: 95: LATA3 = 0;
 12224  002FAE  9689               	bcf	3977,3,c	;volatile
 12225                           
 12226                           ;disp.c: 96: LATA1 = 0;
 12227  002FB0  9289               	bcf	3977,1,c	;volatile
 12228  002FB2  060E               	decf	spi@cnt,f,c
 12229  002FB4  D7D1               	goto	L25
 12230  002FB6                     i2l160:
 12231                           
 12232                           ;disp.c: 97: }
 12233                           ;disp.c: 98: LATA4 = 1;
 12234  002FB6  8889               	bsf	3977,4,c	;volatile
 12235                           
 12236                           ;disp.c: 99: LATA3 = 0;
 12237  002FB8  9689               	bcf	3977,3,c	;volatile
 12238                           
 12239                           ;disp.c: 100: LATA1 = 0;
 12240  002FBA  9289               	bcf	3977,1,c	;volatile
 12241                           
 12242                           ;disp.c: 101: wait(0);
 12243  002FBC  0E00               	movlw	0
 12244  002FBE  6E01               	movwf	?_wait,c
 12245  002FC0  0E00               	movlw	0
 12246  002FC2  6E02               	movwf	?_wait+1,c
 12247  002FC4  0E00               	movlw	0
 12248  002FC6  6E03               	movwf	?_wait+2,c
 12249  002FC8  0E00               	movlw	0
 12250  002FCA  6E04               	movwf	?_wait+3,c
 12251  002FCC  EC69  F01C         	call	_wait	;wreg free
 12252  002FD0  0012               	return	
 12253  002FD2                     __end_of_spi:
 12254                           	opt stack 0
 12255                           tosu	equ	0xFFF
 12256                           tosh	equ	0xFFE
 12257                           tosl	equ	0xFFD
 12258                           pclatu	equ	0xFFB
 12259                           pclath	equ	0xFFA
 12260                           tblptru	equ	0xFF8
 12261                           tblptrh	equ	0xFF7
 12262                           tblptrl	equ	0xFF6
 12263                           tablat	equ	0xFF5
 12264                           prodh	equ	0xFF4
 12265                           prodl	equ	0xFF3
 12266                           intcon	equ	0xFF2
 12267                           intcon2	equ	0xFF1
 12268                           indf0	equ	0xFEF
 12269                           postinc0	equ	0xFEE
 12270                           fsr0h	equ	0xFEA
 12271                           fsr0l	equ	0xFE9
 12272                           wreg	equ	0xFE8
 12273                           postinc1	equ	0xFE6
 12274                           postdec1	equ	0xFE5
 12275                           fsr1h	equ	0xFE2
 12276                           fsr1l	equ	0xFE1
 12277                           indf2	equ	0xFDF
 12278                           postinc2	equ	0xFDE
 12279                           postdec2	equ	0xFDD
 12280                           plusw2	equ	0xFDB
 12281                           fsr2h	equ	0xFDA
 12282                           fsr2l	equ	0xFD9
 12283                           status	equ	0xFD8
 12284                           
 12285 ;; *************** function _wait *****************
 12286 ;; Defined at:
 12287 ;;		line 4 in file "defs.c"
 12288 ;; Parameters:    Size  Location     Type
 12289 ;;  count           4    0[COMRAM] unsigned long 
 12290 ;; Auto vars:     Size  Location     Type
 12291 ;;		None
 12292 ;; Return value:  Size  Location     Type
 12293 ;;		None               void
 12294 ;; Registers used:
 12295 ;;		wreg, status,2, status,0
 12296 ;; Tracked objects:
 12297 ;;		On entry : 0/0
 12298 ;;		On exit  : 0/0
 12299 ;;		Unchanged: 0/0
 12300 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12301 ;;      Params:         4       0       0       0       0       0       0       0       0
 12302 ;;      Locals:         0       0       0       0       0       0       0       0       0
 12303 ;;      Temps:          0       0       0       0       0       0       0       0       0
 12304 ;;      Totals:         4       0       0       0       0       0       0       0       0
 12305 ;;Total ram usage:        4 bytes
 12306 ;; Hardware stack levels used:    1
 12307 ;; This function calls:
 12308 ;;		Nothing
 12309 ;; This function is called by:
 12310 ;;		_spi
 12311 ;; This function uses a non-reentrant model
 12312 ;;
 12313                           
 12314                           	psect	text48
 12315  0038D2                     __ptext48:
 12316                           	opt stack 0
 12317  0038D2                     _wait:
 12318                           	opt stack 23
 12319  0038D2                     i2l4628:
 12320  0038D2  0601               	decf	wait@count,f,c
 12321  0038D4  0E00               	movlw	0
 12322  0038D6  5A02               	subwfb	wait@count+1,f,c
 12323  0038D8  5A03               	subwfb	wait@count+2,f,c
 12324  0038DA  5A04               	subwfb	wait@count+3,f,c
 12325  0038DC  2801               	incf	wait@count& (0+255),w,c
 12326  0038DE  B4D8               	btfsc	status,2,c
 12327  0038E0  2802               	incf	(wait@count+1)& (0+255),w,c
 12328  0038E2  B4D8               	btfsc	status,2,c
 12329  0038E4  2803               	incf	(wait@count+2)& (0+255),w,c
 12330  0038E6  B4D8               	btfsc	status,2,c
 12331  0038E8  2804               	incf	(wait@count+3)& (0+255),w,c
 12332  0038EA  B4D8               	btfsc	status,2,c
 12333  0038EC  0012               	return	
 12334  0038EE  D7F1               	goto	i2l4628
 12335  0038F0                     __end_of_wait:
 12336                           	opt stack 0
 12337                           tosu	equ	0xFFF
 12338                           tosh	equ	0xFFE
 12339                           tosl	equ	0xFFD
 12340                           pclatu	equ	0xFFB
 12341                           pclath	equ	0xFFA
 12342                           tblptru	equ	0xFF8
 12343                           tblptrh	equ	0xFF7
 12344                           tblptrl	equ	0xFF6
 12345                           tablat	equ	0xFF5
 12346                           prodh	equ	0xFF4
 12347                           prodl	equ	0xFF3
 12348                           intcon	equ	0xFF2
 12349                           intcon2	equ	0xFF1
 12350                           indf0	equ	0xFEF
 12351                           postinc0	equ	0xFEE
 12352                           fsr0h	equ	0xFEA
 12353                           fsr0l	equ	0xFE9
 12354                           wreg	equ	0xFE8
 12355                           postinc1	equ	0xFE6
 12356                           postdec1	equ	0xFE5
 12357                           fsr1h	equ	0xFE2
 12358                           fsr1l	equ	0xFE1
 12359                           indf2	equ	0xFDF
 12360                           postinc2	equ	0xFDE
 12361                           postdec2	equ	0xFDD
 12362                           plusw2	equ	0xFDB
 12363                           fsr2h	equ	0xFDA
 12364                           fsr2l	equ	0xFD9
 12365                           status	equ	0xFD8
 12366                           
 12367 ;; *************** function _tick *****************
 12368 ;; Defined at:
 12369 ;;		line 76 in file "RTC.c"
 12370 ;; Parameters:    Size  Location     Type
 12371 ;;  val             1   11[COMRAM] unsigned char 
 12372 ;; Auto vars:     Size  Location     Type
 12373 ;;		None
 12374 ;; Return value:  Size  Location     Type
 12375 ;;                  1    wreg      unsigned char 
 12376 ;; Registers used:
 12377 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 12378 ;; Tracked objects:
 12379 ;;		On entry : 0/0
 12380 ;;		On exit  : 0/0
 12381 ;;		Unchanged: 0/0
 12382 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12383 ;;      Params:         1       0       0       0       0       0       0       0       0
 12384 ;;      Locals:         0       0       0       0       0       0       0       0       0
 12385 ;;      Temps:          1       0       0       0       0       0       0       0       0
 12386 ;;      Totals:         2       0       0       0       0       0       0       0       0
 12387 ;;Total ram usage:        2 bytes
 12388 ;; Hardware stack levels used:    1
 12389 ;; Hardware stack levels required when called:    2
 12390 ;; This function calls:
 12391 ;;		_daysOfMonth
 12392 ;; This function is called by:
 12393 ;;		_high_isr
 12394 ;;		_checkDST
 12395 ;; This function uses a non-reentrant model
 12396 ;;
 12397                           
 12398                           	psect	text49
 12399  002BCA                     __ptext49:
 12400                           	opt stack 0
 12401  002BCA                     _tick:
 12402                           	opt stack 23
 12403                           
 12404                           ;RTC.c: 77: switch (val) {
 12405                           
 12406                           ;incstack = 0
 12407                           ;incstack = 0
 12408  002BCA  D04E               	goto	i2l9082
 12409  002BCC                     i2l9060:
 12410                           
 12411                           ;RTC.c: 79: if (++date.second >= 60) {
 12412  002BCC  0101               	movlb	1	; () banked
 12413  002BCE  0101               	movlb	1	; () banked
 12414  002BD0  2B0D               	incf	_date& (0+255),f,b
 12415  002BD2  0E3B               	movlw	59
 12416  002BD4  0101               	movlb	1	; () banked
 12417  002BD6  650D               	cpfsgt	_date& (0+255),b
 12418  002BD8  D05A               	goto	i2l282
 12419                           
 12420                           ; BSR set to: 1
 12421                           ;RTC.c: 80: date.second = 0;
 12422  002BDA  6E0D               	movwf	??_tick& (0+255),c
 12423  002BDC  0E00               	movlw	0
 12424  002BDE  0101               	movlb	1	; () banked
 12425  002BE0  0101               	movlb	1	; () banked
 12426  002BE2  6F0D               	movwf	_date& (0+255),b
 12427  002BE4  500D               	movf	??_tick& (0+255),w,c
 12428  002BE6                     i2l9064:
 12429                           
 12430                           ;RTC.c: 82: if (++date.minute >= 60) {
 12431  002BE6  0101               	movlb	1	; () banked
 12432  002BE8  EE21  F00E         	lfsr	2,_date+1
 12433  002BEC  2ADF               	incf	indf2,f,c
 12434  002BEE  0E3B               	movlw	59
 12435  002BF0  64DF               	cpfsgt	indf2,c
 12436  002BF2  D04D               	goto	i2l282
 12437                           
 12438                           ; BSR set to: 1
 12439                           ;RTC.c: 83: date.minute = 0;
 12440  002BF4  6E0D               	movwf	??_tick& (0+255),c
 12441  002BF6  0E00               	movlw	0
 12442  002BF8  0101               	movlb	1	; () banked
 12443  002BFA  0101               	movlb	1	; () banked
 12444  002BFC  6F0E               	movwf	(_date+1)& (0+255),b
 12445  002BFE  500D               	movf	??_tick& (0+255),w,c
 12446  002C00                     i2l9068:
 12447                           
 12448                           ;RTC.c: 85: if (++date.hour >= 24) {
 12449  002C00  0101               	movlb	1	; () banked
 12450  002C02  EE21  F00F         	lfsr	2,_date+2
 12451  002C06  2ADF               	incf	indf2,f,c
 12452  002C08  0E17               	movlw	23
 12453  002C0A  64DF               	cpfsgt	indf2,c
 12454  002C0C  D040               	goto	i2l282
 12455                           
 12456                           ; BSR set to: 1
 12457                           ;RTC.c: 86: date.hour = 0;
 12458  002C0E  6E0D               	movwf	??_tick& (0+255),c
 12459  002C10  0E00               	movlw	0
 12460  002C12  0101               	movlb	1	; () banked
 12461  002C14  0101               	movlb	1	; () banked
 12462  002C16  6F0F               	movwf	(_date+2)& (0+255),b
 12463  002C18  500D               	movf	??_tick& (0+255),w,c
 12464  002C1A                     i2l9072:
 12465                           
 12466                           ;RTC.c: 88: if (++date.day >= daysOfMonth(date.month, date.year)) {
 12467  002C1A  C112  F007         	movff	_date+5,?_daysOfMonth
 12468  002C1E  C113  F008         	movff	_date+6,?_daysOfMonth+1
 12469  002C22  C114  F009         	movff	_date+7,?_daysOfMonth+2
 12470  002C26  ECA4  F016         	call	_daysOfMonth	;wreg free
 12471  002C2A  0101               	movlb	1	; () banked
 12472  002C2C  0101               	movlb	1	; () banked
 12473  002C2E  2B10               	incf	(_date+3)& (0+255),f,b
 12474  002C30  0101               	movlb	1	; () banked
 12475  002C32  5D10               	subwf	(_date+3)& (0+255),w,b
 12476  002C34  A0D8               	btfss	status,0,c
 12477  002C36  D02B               	goto	i2l282
 12478                           
 12479                           ; BSR set to: 1
 12480                           ;RTC.c: 89: date.day = 1;
 12481  002C38  6E0D               	movwf	??_tick& (0+255),c
 12482  002C3A  0E01               	movlw	1
 12483  002C3C  0101               	movlb	1	; () banked
 12484  002C3E  0101               	movlb	1	; () banked
 12485  002C40  6F10               	movwf	(_date+3)& (0+255),b
 12486  002C42  500D               	movf	??_tick& (0+255),w,c
 12487  002C44                     i2l9076:
 12488                           
 12489                           ;RTC.c: 91: if (++date.month > 12) {
 12490  002C44  0101               	movlb	1	; () banked
 12491  002C46  EE21  F012         	lfsr	2,_date+5
 12492  002C4A  2ADF               	incf	indf2,f,c
 12493  002C4C  0E0C               	movlw	12
 12494  002C4E  64DF               	cpfsgt	indf2,c
 12495  002C50  D01E               	goto	i2l282
 12496                           
 12497                           ; BSR set to: 1
 12498                           ;RTC.c: 92: date.month = 1;
 12499  002C52  6E0D               	movwf	??_tick& (0+255),c
 12500  002C54  0E01               	movlw	1
 12501  002C56  0101               	movlb	1	; () banked
 12502  002C58  0101               	movlb	1	; () banked
 12503  002C5A  6F12               	movwf	(_date+5)& (0+255),b
 12504  002C5C  500D               	movf	??_tick& (0+255),w,c
 12505  002C5E                     i2l9080:
 12506                           
 12507                           ;RTC.c: 94: ++date.year;
 12508  002C5E  0101               	movlb	1	; () banked
 12509  002C60  0101               	movlb	1	; () banked
 12510  002C62  4B13               	infsnz	(_date+6)& (0+255),f,b
 12511  002C64  2B14               	incf	(_date+7)& (0+255),f,b
 12512  002C66  D013               	goto	i2l282
 12513  002C68                     i2l9082:
 12514  002C68  500C               	movf	tick@val,w,c
 12515                           
 12516                           ; Switch size 1, requested type "space"
 12517                           ; Number of cases is 6, Range of values is 0 to 5
 12518                           ; switch strategies available:
 12519                           ; Name         Instructions Cycles
 12520                           ; simple_byte           19    10 (average)
 12521                           ;	Chosen strategy is simple_byte
 12522  002C6A  0A00               	xorlw	0	; case 0
 12523  002C6C  B4D8               	btfsc	status,2,c
 12524  002C6E  D7AE               	goto	i2l9060
 12525  002C70  0A01               	xorlw	1	; case 1
 12526  002C72  B4D8               	btfsc	status,2,c
 12527  002C74  D7B8               	goto	i2l9064
 12528  002C76  0A03               	xorlw	3	; case 2
 12529  002C78  B4D8               	btfsc	status,2,c
 12530  002C7A  D7C2               	goto	i2l9068
 12531  002C7C  0A01               	xorlw	1	; case 3
 12532  002C7E  B4D8               	btfsc	status,2,c
 12533  002C80  D7CC               	goto	i2l9072
 12534  002C82  0A07               	xorlw	7	; case 4
 12535  002C84  B4D8               	btfsc	status,2,c
 12536  002C86  D7DE               	goto	i2l9076
 12537  002C88  0A01               	xorlw	1	; case 5
 12538  002C8A  B4D8               	btfsc	status,2,c
 12539  002C8C  D7E8               	goto	i2l9080
 12540  002C8E                     i2l282:
 12541  002C8E  0012               	return	
 12542  002C90                     __end_of_tick:
 12543                           	opt stack 0
 12544                           tosu	equ	0xFFF
 12545                           tosh	equ	0xFFE
 12546                           tosl	equ	0xFFD
 12547                           pclatu	equ	0xFFB
 12548                           pclath	equ	0xFFA
 12549                           tblptru	equ	0xFF8
 12550                           tblptrh	equ	0xFF7
 12551                           tblptrl	equ	0xFF6
 12552                           tablat	equ	0xFF5
 12553                           prodh	equ	0xFF4
 12554                           prodl	equ	0xFF3
 12555                           intcon	equ	0xFF2
 12556                           intcon2	equ	0xFF1
 12557                           indf0	equ	0xFEF
 12558                           postinc0	equ	0xFEE
 12559                           fsr0h	equ	0xFEA
 12560                           fsr0l	equ	0xFE9
 12561                           wreg	equ	0xFE8
 12562                           postinc1	equ	0xFE6
 12563                           postdec1	equ	0xFE5
 12564                           fsr1h	equ	0xFE2
 12565                           fsr1l	equ	0xFE1
 12566                           indf2	equ	0xFDF
 12567                           postinc2	equ	0xFDE
 12568                           postdec2	equ	0xFDD
 12569                           plusw2	equ	0xFDB
 12570                           fsr2h	equ	0xFDA
 12571                           fsr2l	equ	0xFD9
 12572                           status	equ	0xFD8
 12573                           
 12574 ;; *************** function _daysOfMonth *****************
 12575 ;; Defined at:
 12576 ;;		line 31 in file "RTC.c"
 12577 ;; Parameters:    Size  Location     Type
 12578 ;;  month           1    6[COMRAM] unsigned char 
 12579 ;;  year            2    7[COMRAM] unsigned int 
 12580 ;; Auto vars:     Size  Location     Type
 12581 ;;		None
 12582 ;; Return value:  Size  Location     Type
 12583 ;;                  1    wreg      unsigned char 
 12584 ;; Registers used:
 12585 ;;		wreg, status,2, status,0, cstack
 12586 ;; Tracked objects:
 12587 ;;		On entry : 0/0
 12588 ;;		On exit  : 0/0
 12589 ;;		Unchanged: 0/0
 12590 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12591 ;;      Params:         3       0       0       0       0       0       0       0       0
 12592 ;;      Locals:         0       0       0       0       0       0       0       0       0
 12593 ;;      Temps:          2       0       0       0       0       0       0       0       0
 12594 ;;      Totals:         5       0       0       0       0       0       0       0       0
 12595 ;;Total ram usage:        5 bytes
 12596 ;; Hardware stack levels used:    1
 12597 ;; Hardware stack levels required when called:    1
 12598 ;; This function calls:
 12599 ;;		___lwmod
 12600 ;; This function is called by:
 12601 ;;		_tick
 12602 ;; This function uses a non-reentrant model
 12603 ;;
 12604                           
 12605                           	psect	text50
 12606  002D48                     __ptext50:
 12607                           	opt stack 0
 12608  002D48                     _daysOfMonth:
 12609                           	opt stack 23
 12610                           
 12611                           ;RTC.c: 32: switch (month) {
 12612                           
 12613                           ;incstack = 0
 12614                           ;incstack = 0
 12615  002D48  D02E               	goto	i2l8928
 12616  002D4A                     i2l8904:
 12617                           
 12618                           ;RTC.c: 34: case 3:
 12619                           ;RTC.c: 35: case 5:
 12620                           ;RTC.c: 36: case 7:
 12621                           ;RTC.c: 37: case 8:
 12622                           ;RTC.c: 38: case 10:
 12623                           ;RTC.c: 39: case 12:
 12624                           ;RTC.c: 40: return 31;
 12625  002D4A  0E1F               	movlw	31
 12626  002D4C  D052               	goto	i2l246
 12627  002D4E                     i2l8908:
 12628                           
 12629                           ;RTC.c: 43: case 6:
 12630                           ;RTC.c: 44: case 9:
 12631                           ;RTC.c: 45: case 11:
 12632                           ;RTC.c: 46: return 30;
 12633  002D4E  0E1E               	movlw	30
 12634  002D50  D050               	goto	i2l246
 12635  002D52                     i2l8912:
 12636                           
 12637                           ;RTC.c: 49: if ((((year)%4 == 0) && (((year)%100 != 0) || ((year)%400 == 0))))
 12638  002D52  0E03               	movlw	3
 12639  002D54  1408               	andwf	daysOfMonth@year,w,c
 12640  002D56  6E0A               	movwf	??_daysOfMonth& (0+255),c
 12641  002D58  0E00               	movlw	0
 12642  002D5A  1409               	andwf	daysOfMonth@year+1,w,c
 12643  002D5C  6E0B               	movwf	(??_daysOfMonth+1)& (0+255),c
 12644  002D5E  500B               	movf	??_daysOfMonth+1,w,c
 12645  002D60  100A               	iorwf	??_daysOfMonth,w,c
 12646  002D62  A4D8               	btfss	status,2,c
 12647  002D64  D01E               	goto	i2l8924
 12648  002D66  C008  F001         	movff	daysOfMonth@year,?___lwmod
 12649  002D6A  C009  F002         	movff	daysOfMonth@year+1,?___lwmod+1
 12650  002D6E  0E00               	movlw	0
 12651  002D70  6E04               	movwf	?___lwmod+3,c
 12652  002D72  0E64               	movlw	100
 12653  002D74  6E03               	movwf	?___lwmod+2,c
 12654  002D76  ECDD  F01A         	call	___lwmod	;wreg free
 12655  002D7A  5002               	movf	?___lwmod+1,w,c
 12656  002D7C  1001               	iorwf	?___lwmod,w,c
 12657  002D7E  A4D8               	btfss	status,2,c
 12658  002D80  D00E               	goto	i2l8918
 12659  002D82  C008  F001         	movff	daysOfMonth@year,?___lwmod
 12660  002D86  C009  F002         	movff	daysOfMonth@year+1,?___lwmod+1
 12661  002D8A  0E01               	movlw	1
 12662  002D8C  6E04               	movwf	?___lwmod+3,c
 12663  002D8E  0E90               	movlw	144
 12664  002D90  6E03               	movwf	?___lwmod+2,c
 12665  002D92  ECDD  F01A         	call	___lwmod	;wreg free
 12666  002D96  5002               	movf	?___lwmod+1,w,c
 12667  002D98  1001               	iorwf	?___lwmod,w,c
 12668  002D9A  A4D8               	btfss	status,2,c
 12669  002D9C  D002               	goto	i2l8924
 12670  002D9E                     i2l8918:
 12671                           
 12672                           ;RTC.c: 50: return 29;
 12673  002D9E  0E1D               	movlw	29
 12674  002DA0  D028               	goto	i2l246
 12675  002DA2                     i2l8924:
 12676                           
 12677                           ;RTC.c: 51: else
 12678                           ;RTC.c: 52: return 28;
 12679  002DA2  0E1C               	movlw	28
 12680  002DA4  D026               	goto	i2l246
 12681  002DA6                     i2l8928:
 12682  002DA6  5007               	movf	daysOfMonth@month,w,c
 12683                           
 12684                           ; Switch size 1, requested type "space"
 12685                           ; Number of cases is 12, Range of values is 1 to 12
 12686                           ; switch strategies available:
 12687                           ; Name         Instructions Cycles
 12688                           ; simple_byte           37    19 (average)
 12689                           ;	Chosen strategy is simple_byte
 12690  002DA8  0A01               	xorlw	1	; case 1
 12691  002DAA  B4D8               	btfsc	status,2,c
 12692  002DAC  D7CE               	goto	i2l8904
 12693  002DAE  0A03               	xorlw	3	; case 2
 12694  002DB0  B4D8               	btfsc	status,2,c
 12695  002DB2  D7CF               	goto	i2l8912
 12696  002DB4  0A01               	xorlw	1	; case 3
 12697  002DB6  B4D8               	btfsc	status,2,c
 12698  002DB8  D7C8               	goto	i2l8904
 12699  002DBA  0A07               	xorlw	7	; case 4
 12700  002DBC  B4D8               	btfsc	status,2,c
 12701  002DBE  D7C7               	goto	i2l8908
 12702  002DC0  0A01               	xorlw	1	; case 5
 12703  002DC2  B4D8               	btfsc	status,2,c
 12704  002DC4  D7C2               	goto	i2l8904
 12705  002DC6  0A03               	xorlw	3	; case 6
 12706  002DC8  B4D8               	btfsc	status,2,c
 12707  002DCA  D7C1               	goto	i2l8908
 12708  002DCC  0A01               	xorlw	1	; case 7
 12709  002DCE  B4D8               	btfsc	status,2,c
 12710  002DD0  D7BC               	goto	i2l8904
 12711  002DD2  0A0F               	xorlw	15	; case 8
 12712  002DD4  B4D8               	btfsc	status,2,c
 12713  002DD6  D7B9               	goto	i2l8904
 12714  002DD8  0A01               	xorlw	1	; case 9
 12715  002DDA  B4D8               	btfsc	status,2,c
 12716  002DDC  D7B8               	goto	i2l8908
 12717  002DDE  0A03               	xorlw	3	; case 10
 12718  002DE0  B4D8               	btfsc	status,2,c
 12719  002DE2  D7B3               	goto	i2l8904
 12720  002DE4  0A01               	xorlw	1	; case 11
 12721  002DE6  B4D8               	btfsc	status,2,c
 12722  002DE8  D7B2               	goto	i2l8908
 12723  002DEA  0A07               	xorlw	7	; case 12
 12724  002DEC  B4D8               	btfsc	status,2,c
 12725  002DEE  D7AD               	goto	i2l8904
 12726                           
 12727                           ;RTC.c: 55: return 0;
 12728  002DF0  0E00               	movlw	0
 12729  002DF2                     i2l246:
 12730  002DF2  0012               	return	
 12731  002DF4                     __end_of_daysOfMonth:
 12732                           	opt stack 0
 12733                           tosu	equ	0xFFF
 12734                           tosh	equ	0xFFE
 12735                           tosl	equ	0xFFD
 12736                           pclatu	equ	0xFFB
 12737                           pclath	equ	0xFFA
 12738                           tblptru	equ	0xFF8
 12739                           tblptrh	equ	0xFF7
 12740                           tblptrl	equ	0xFF6
 12741                           tablat	equ	0xFF5
 12742                           prodh	equ	0xFF4
 12743                           prodl	equ	0xFF3
 12744                           intcon	equ	0xFF2
 12745                           intcon2	equ	0xFF1
 12746                           indf0	equ	0xFEF
 12747                           postinc0	equ	0xFEE
 12748                           fsr0h	equ	0xFEA
 12749                           fsr0l	equ	0xFE9
 12750                           wreg	equ	0xFE8
 12751                           postinc1	equ	0xFE6
 12752                           postdec1	equ	0xFE5
 12753                           fsr1h	equ	0xFE2
 12754                           fsr1l	equ	0xFE1
 12755                           indf2	equ	0xFDF
 12756                           postinc2	equ	0xFDE
 12757                           postdec2	equ	0xFDD
 12758                           plusw2	equ	0xFDB
 12759                           fsr2h	equ	0xFDA
 12760                           fsr2l	equ	0xFD9
 12761                           status	equ	0xFD8
 12762                           
 12763 ;; *************** function ___lwmod *****************
 12764 ;; Defined at:
 12765 ;;		line 10 in file "/usr/opt/microchip/xc8/v1.20/sources/common/lwmod.c"
 12766 ;; Parameters:    Size  Location     Type
 12767 ;;  dividend        2    0[COMRAM] unsigned int 
 12768 ;;  divisor         2    2[COMRAM] unsigned int 
 12769 ;; Auto vars:     Size  Location     Type
 12770 ;;  counter         1    5[COMRAM] unsigned char 
 12771 ;; Return value:  Size  Location     Type
 12772 ;;                  2    0[COMRAM] unsigned int 
 12773 ;; Registers used:
 12774 ;;		wreg, status,2, status,0
 12775 ;; Tracked objects:
 12776 ;;		On entry : 0/0
 12777 ;;		On exit  : 0/0
 12778 ;;		Unchanged: 0/0
 12779 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12780 ;;      Params:         4       0       0       0       0       0       0       0       0
 12781 ;;      Locals:         1       0       0       0       0       0       0       0       0
 12782 ;;      Temps:          1       0       0       0       0       0       0       0       0
 12783 ;;      Totals:         6       0       0       0       0       0       0       0       0
 12784 ;;Total ram usage:        6 bytes
 12785 ;; Hardware stack levels used:    1
 12786 ;; This function calls:
 12787 ;;		Nothing
 12788 ;; This function is called by:
 12789 ;;		_daysOfMonth
 12790 ;;		_printRTC
 12791 ;;		_sprintf
 12792 ;; This function uses a non-reentrant model
 12793 ;;
 12794                           
 12795                           	psect	text51
 12796  0035BA                     __ptext51:
 12797                           	opt stack 0
 12798  0035BA                     ___lwmod:
 12799                           	opt stack 22
 12800                           
 12801                           ;incstack = 0
 12802                           ;incstack = 0
 12803  0035BA  5004               	movf	___lwmod@divisor+1,w,c
 12804  0035BC  1003               	iorwf	___lwmod@divisor,w,c
 12805  0035BE  B4D8               	btfsc	status,2,c
 12806  0035C0  D01A               	goto	i2l1180
 12807  0035C2  6E05               	movwf	??___lwmod& (0+255),c
 12808  0035C4  0E01               	movlw	1
 12809  0035C6  6E06               	movwf	___lwmod@counter,c
 12810  0035C8  5005               	movf	??___lwmod& (0+255),w,c
 12811  0035CA  D004               	goto	i2l8860
 12812  0035CC                     i2l8858:
 12813  0035CC  90D8               	bcf	status,0,c
 12814  0035CE  3603               	rlcf	___lwmod@divisor,f,c
 12815  0035D0  3604               	rlcf	___lwmod@divisor+1,f,c
 12816  0035D2  2A06               	incf	___lwmod@counter,f,c
 12817  0035D4                     i2l8860:
 12818  0035D4  AE04               	btfss	___lwmod@divisor+1,7,c
 12819  0035D6  D7FA               	goto	i2l8858
 12820  0035D8                     i2l8862:
 12821  0035D8  5003               	movf	___lwmod@divisor,w,c
 12822  0035DA  5C01               	subwf	___lwmod@dividend,w,c
 12823  0035DC  5004               	movf	___lwmod@divisor+1,w,c
 12824  0035DE  5802               	subwfb	___lwmod@dividend+1,w,c
 12825  0035E0  A0D8               	btfss	status,0,c
 12826  0035E2  D004               	goto	i2l8866
 12827  0035E4  5003               	movf	___lwmod@divisor,w,c
 12828  0035E6  5E01               	subwf	___lwmod@dividend,f,c
 12829  0035E8  5004               	movf	___lwmod@divisor+1,w,c
 12830  0035EA  5A02               	subwfb	___lwmod@dividend+1,f,c
 12831  0035EC                     i2l8866:
 12832  0035EC  90D8               	bcf	status,0,c
 12833  0035EE  3204               	rrcf	___lwmod@divisor+1,f,c
 12834  0035F0  3203               	rrcf	___lwmod@divisor,f,c
 12835  0035F2  2E06               	decfsz	___lwmod@counter,f,c
 12836  0035F4  D7F1               	goto	i2l8862
 12837  0035F6                     i2l1180:
 12838  0035F6  C001  F001         	movff	___lwmod@dividend,?___lwmod
 12839  0035FA  C002  F002         	movff	___lwmod@dividend+1,?___lwmod+1
 12840  0035FE  0012               	return	
 12841  003600                     __end_of___lwmod:
 12842                           	opt stack 0
 12843                           tosu	equ	0xFFF
 12844                           tosh	equ	0xFFE
 12845                           tosl	equ	0xFFD
 12846                           pclatu	equ	0xFFB
 12847                           pclath	equ	0xFFA
 12848                           tblptru	equ	0xFF8
 12849                           tblptrh	equ	0xFF7
 12850                           tblptrl	equ	0xFF6
 12851                           tablat	equ	0xFF5
 12852                           prodh	equ	0xFF4
 12853                           prodl	equ	0xFF3
 12854                           intcon	equ	0xFF2
 12855                           intcon2	equ	0xFF1
 12856                           indf0	equ	0xFEF
 12857                           postinc0	equ	0xFEE
 12858                           fsr0h	equ	0xFEA
 12859                           fsr0l	equ	0xFE9
 12860                           wreg	equ	0xFE8
 12861                           postinc1	equ	0xFE6
 12862                           postdec1	equ	0xFE5
 12863                           fsr1h	equ	0xFE2
 12864                           fsr1l	equ	0xFE1
 12865                           indf2	equ	0xFDF
 12866                           postinc2	equ	0xFDE
 12867                           postdec2	equ	0xFDD
 12868                           plusw2	equ	0xFDB
 12869                           fsr2h	equ	0xFDA
 12870                           fsr2l	equ	0xFD9
 12871                           status	equ	0xFD8
 12872                           
 12873 ;; *************** function ___wmul *****************
 12874 ;; Defined at:
 12875 ;;		line 5 in file "/usr/opt/microchip/xc8/v1.20/sources/common/wmul.c"
 12876 ;; Parameters:    Size  Location     Type
 12877 ;;  multiplier      2   16[COMRAM] unsigned int 
 12878 ;;  multiplicand    2   18[COMRAM] unsigned int 
 12879 ;; Auto vars:     Size  Location     Type
 12880 ;;  product         2   20[COMRAM] unsigned int 
 12881 ;; Return value:  Size  Location     Type
 12882 ;;                  2   16[COMRAM] unsigned int 
 12883 ;; Registers used:
 12884 ;;		wreg, status,2, status,0, prodl, prodh
 12885 ;; Tracked objects:
 12886 ;;		On entry : 0/0
 12887 ;;		On exit  : 0/0
 12888 ;;		Unchanged: 0/0
 12889 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12890 ;;      Params:         4       0       0       0       0       0       0       0       0
 12891 ;;      Locals:         2       0       0       0       0       0       0       0       0
 12892 ;;      Temps:          0       0       0       0       0       0       0       0       0
 12893 ;;      Totals:         6       0       0       0       0       0       0       0       0
 12894 ;;Total ram usage:        6 bytes
 12895 ;; Hardware stack levels used:    1
 12896 ;; This function calls:
 12897 ;;		Nothing
 12898 ;; This function is called by:
 12899 ;;		_writeString
 12900 ;;		_getTemp
 12901 ;;		_fround
 12902 ;;		_scale
 12903 ;;		_sprintf
 12904 ;;		_dayOfWeek
 12905 ;; This function uses a non-reentrant model
 12906 ;;
 12907                           
 12908                           	psect	text52
 12909  003730                     __ptext52:
 12910                           	opt stack 0
 12911  003730                     ___wmul:
 12912                           	opt stack 23
 12913                           
 12914                           ;incstack = 0
 12915                           ;incstack = 0
 12916  003730  5011               	movf	___wmul@multiplier,w,c
 12917  003732  0213               	mulwf	___wmul@multiplicand,c
 12918  003734  CFF3 F015          	movff	prodl,___wmul@product
 12919  003738  CFF4 F016          	movff	prodh,___wmul@product+1
 12920  00373C  5011               	movf	___wmul@multiplier,w,c
 12921  00373E  0214               	mulwf	___wmul@multiplicand+1,c
 12922  003740  CFF3 FFF4          	movff	prodl,prodh
 12923  003744  6AF3               	clrf	prodl,c
 12924  003746  50F3               	movf	prodl,w,c
 12925  003748  2615               	addwf	___wmul@product,f,c
 12926  00374A  50F4               	movf	prodh,w,c
 12927  00374C  2216               	addwfc	___wmul@product+1,f,c
 12928  00374E  5012               	movf	___wmul@multiplier+1,w,c
 12929  003750  0213               	mulwf	___wmul@multiplicand,c
 12930  003752  CFF3 FFF4          	movff	prodl,prodh
 12931  003756  6AF3               	clrf	prodl,c
 12932  003758  50F3               	movf	prodl,w,c
 12933  00375A  2615               	addwf	___wmul@product,f,c
 12934  00375C  50F4               	movf	prodh,w,c
 12935  00375E  2216               	addwfc	___wmul@product+1,f,c
 12936  003760  C015  F011         	movff	___wmul@product,?___wmul
 12937  003764  C016  F012         	movff	___wmul@product+1,?___wmul+1
 12938  003768  0012               	return	
 12939  00376A                     __end_of___wmul:
 12940                           	opt stack 0
 12941                           tosu	equ	0xFFF
 12942                           tosh	equ	0xFFE
 12943                           tosl	equ	0xFFD
 12944                           pclatu	equ	0xFFB
 12945                           pclath	equ	0xFFA
 12946                           tblptru	equ	0xFF8
 12947                           tblptrh	equ	0xFF7
 12948                           tblptrl	equ	0xFF6
 12949                           tablat	equ	0xFF5
 12950                           prodh	equ	0xFF4
 12951                           prodl	equ	0xFF3
 12952                           intcon	equ	0xFF2
 12953                           intcon2	equ	0xFF1
 12954                           indf0	equ	0xFEF
 12955                           postinc0	equ	0xFEE
 12956                           fsr0h	equ	0xFEA
 12957                           fsr0l	equ	0xFE9
 12958                           wreg	equ	0xFE8
 12959                           postinc1	equ	0xFE6
 12960                           postdec1	equ	0xFE5
 12961                           fsr1h	equ	0xFE2
 12962                           fsr1l	equ	0xFE1
 12963                           indf2	equ	0xFDF
 12964                           postinc2	equ	0xFDE
 12965                           postdec2	equ	0xFDD
 12966                           plusw2	equ	0xFDB
 12967                           fsr2h	equ	0xFDA
 12968                           fsr2l	equ	0xFD9
 12969                           status	equ	0xFD8
 12970                           
 12971 ;; *************** function ___awmod *****************
 12972 ;; Defined at:
 12973 ;;		line 10 in file "/usr/opt/microchip/xc8/v1.20/sources/common/awmod.c"
 12974 ;; Parameters:    Size  Location     Type
 12975 ;;  dividend        2    0[COMRAM] int 
 12976 ;;  divisor         2    2[COMRAM] int 
 12977 ;; Auto vars:     Size  Location     Type
 12978 ;;  sign            1    6[COMRAM] unsigned char 
 12979 ;;  counter         1    5[COMRAM] unsigned char 
 12980 ;; Return value:  Size  Location     Type
 12981 ;;                  2    0[COMRAM] int 
 12982 ;; Registers used:
 12983 ;;		wreg, status,2, status,0
 12984 ;; Tracked objects:
 12985 ;;		On entry : 0/0
 12986 ;;		On exit  : 0/0
 12987 ;;		Unchanged: 0/0
 12988 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12989 ;;      Params:         4       0       0       0       0       0       0       0       0
 12990 ;;      Locals:         2       0       0       0       0       0       0       0       0
 12991 ;;      Temps:          1       0       0       0       0       0       0       0       0
 12992 ;;      Totals:         7       0       0       0       0       0       0       0       0
 12993 ;;Total ram usage:        7 bytes
 12994 ;; Hardware stack levels used:    1
 12995 ;; This function calls:
 12996 ;;		Nothing
 12997 ;; This function is called by:
 12998 ;;		_buttons
 12999 ;;		_fround
 13000 ;;		_scale
 13001 ;;		_dayOfWeek
 13002 ;; This function uses a non-reentrant model
 13003 ;;
 13004                           
 13005                           	psect	text53
 13006  003178                     __ptext53:
 13007                           	opt stack 0
 13008  003178                     ___awmod:
 13009                           	opt stack 21
 13010                           
 13011                           ;incstack = 0
 13012                           ;incstack = 0
 13013  003178  6E05               	movwf	??___awmod& (0+255),c
 13014  00317A  0E00               	movlw	0
 13015  00317C  6E07               	movwf	___awmod@sign,c
 13016  00317E  5005               	movf	??___awmod& (0+255),w,c
 13017  003180  AE02               	btfss	___awmod@dividend+1,7,c
 13018  003182  D008               	goto	i2l8782
 13019  003184  6C01               	negf	___awmod@dividend,c
 13020  003186  1E02               	comf	___awmod@dividend+1,f,c
 13021  003188  B0D8               	btfsc	status,0,c
 13022  00318A  2A02               	incf	___awmod@dividend+1,f,c
 13023  00318C  6E05               	movwf	??___awmod& (0+255),c
 13024  00318E  0E01               	movlw	1
 13025  003190  6E07               	movwf	___awmod@sign,c
 13026  003192  5005               	movf	??___awmod& (0+255),w,c
 13027  003194                     i2l8782:
 13028  003194  AE04               	btfss	___awmod@divisor+1,7,c
 13029  003196  D004               	goto	i2l8786
 13030  003198  6C03               	negf	___awmod@divisor,c
 13031  00319A  1E04               	comf	___awmod@divisor+1,f,c
 13032  00319C  B0D8               	btfsc	status,0,c
 13033  00319E  2A04               	incf	___awmod@divisor+1,f,c
 13034  0031A0                     i2l8786:
 13035  0031A0  5004               	movf	___awmod@divisor+1,w,c
 13036  0031A2  1003               	iorwf	___awmod@divisor,w,c
 13037  0031A4  B4D8               	btfsc	status,2,c
 13038  0031A6  D01A               	goto	i2l8802
 13039  0031A8  6E05               	movwf	??___awmod& (0+255),c
 13040  0031AA  0E01               	movlw	1
 13041  0031AC  6E06               	movwf	___awmod@counter,c
 13042  0031AE  5005               	movf	??___awmod& (0+255),w,c
 13043  0031B0  D004               	goto	i2l8792
 13044  0031B2                     i2l8790:
 13045  0031B2  90D8               	bcf	status,0,c
 13046  0031B4  3603               	rlcf	___awmod@divisor,f,c
 13047  0031B6  3604               	rlcf	___awmod@divisor+1,f,c
 13048  0031B8  2A06               	incf	___awmod@counter,f,c
 13049  0031BA                     i2l8792:
 13050  0031BA  AE04               	btfss	___awmod@divisor+1,7,c
 13051  0031BC  D7FA               	goto	i2l8790
 13052  0031BE                     i2l8794:
 13053  0031BE  5003               	movf	___awmod@divisor,w,c
 13054  0031C0  5C01               	subwf	___awmod@dividend,w,c
 13055  0031C2  5004               	movf	___awmod@divisor+1,w,c
 13056  0031C4  5802               	subwfb	___awmod@dividend+1,w,c
 13057  0031C6  A0D8               	btfss	status,0,c
 13058  0031C8  D004               	goto	i2l8798
 13059  0031CA  5003               	movf	___awmod@divisor,w,c
 13060  0031CC  5E01               	subwf	___awmod@dividend,f,c
 13061  0031CE  5004               	movf	___awmod@divisor+1,w,c
 13062  0031D0  5A02               	subwfb	___awmod@dividend+1,f,c
 13063  0031D2                     i2l8798:
 13064  0031D2  90D8               	bcf	status,0,c
 13065  0031D4  3204               	rrcf	___awmod@divisor+1,f,c
 13066  0031D6  3203               	rrcf	___awmod@divisor,f,c
 13067  0031D8  2E06               	decfsz	___awmod@counter,f,c
 13068  0031DA  D7F1               	goto	i2l8794
 13069  0031DC                     i2l8802:
 13070  0031DC  5007               	movf	___awmod@sign,w,c
 13071  0031DE  B4D8               	btfsc	status,2,c
 13072  0031E0  D004               	goto	i2l8806
 13073  0031E2  6C01               	negf	___awmod@dividend,c
 13074  0031E4  1E02               	comf	___awmod@dividend+1,f,c
 13075  0031E6  B0D8               	btfsc	status,0,c
 13076  0031E8  2A02               	incf	___awmod@dividend+1,f,c
 13077  0031EA                     i2l8806:
 13078  0031EA  C001  F001         	movff	___awmod@dividend,?___awmod
 13079  0031EE  C002  F002         	movff	___awmod@dividend+1,?___awmod+1
 13080  0031F2  0012               	return	
 13081  0031F4                     __end_of___awmod:
 13082                           	opt stack 0
 13083                           tosu	equ	0xFFF
 13084                           tosh	equ	0xFFE
 13085                           tosl	equ	0xFFD
 13086                           pclatu	equ	0xFFB
 13087                           pclath	equ	0xFFA
 13088                           tblptru	equ	0xFF8
 13089                           tblptrh	equ	0xFF7
 13090                           tblptrl	equ	0xFF6
 13091                           tablat	equ	0xFF5
 13092                           prodh	equ	0xFF4
 13093                           prodl	equ	0xFF3
 13094                           intcon	equ	0xFF2
 13095                           intcon2	equ	0xFF1
 13096                           indf0	equ	0xFEF
 13097                           postinc0	equ	0xFEE
 13098                           fsr0h	equ	0xFEA
 13099                           fsr0l	equ	0xFE9
 13100                           wreg	equ	0xFE8
 13101                           postinc1	equ	0xFE6
 13102                           postdec1	equ	0xFE5
 13103                           fsr1h	equ	0xFE2
 13104                           fsr1l	equ	0xFE1
 13105                           indf2	equ	0xFDF
 13106                           postinc2	equ	0xFDE
 13107                           postdec2	equ	0xFDD
 13108                           plusw2	equ	0xFDB
 13109                           fsr2h	equ	0xFDA
 13110                           fsr2l	equ	0xFD9
 13111                           status	equ	0xFD8
 13112                           tosu	equ	0xFFF
 13113                           tosh	equ	0xFFE
 13114                           tosl	equ	0xFFD
 13115                           pclatu	equ	0xFFB
 13116                           pclath	equ	0xFFA
 13117                           tblptru	equ	0xFF8
 13118                           tblptrh	equ	0xFF7
 13119                           tblptrl	equ	0xFF6
 13120                           tablat	equ	0xFF5
 13121                           prodh	equ	0xFF4
 13122                           prodl	equ	0xFF3
 13123                           intcon	equ	0xFF2
 13124                           intcon2	equ	0xFF1
 13125                           indf0	equ	0xFEF
 13126                           postinc0	equ	0xFEE
 13127                           fsr0h	equ	0xFEA
 13128                           fsr0l	equ	0xFE9
 13129                           wreg	equ	0xFE8
 13130                           postinc1	equ	0xFE6
 13131                           postdec1	equ	0xFE5
 13132                           fsr1h	equ	0xFE2
 13133                           fsr1l	equ	0xFE1
 13134                           indf2	equ	0xFDF
 13135                           postinc2	equ	0xFDE
 13136                           postdec2	equ	0xFDD
 13137                           plusw2	equ	0xFDB
 13138                           fsr2h	equ	0xFDA
 13139                           fsr2l	equ	0xFD9
 13140                           status	equ	0xFD8
 13141                           
 13142                           	psect	text54
 13143  000000                     __ptext54:
 13144                           	opt stack 0
 13145                           tosu	equ	0xFFF
 13146                           tosh	equ	0xFFE
 13147                           tosl	equ	0xFFD
 13148                           pclatu	equ	0xFFB
 13149                           pclath	equ	0xFFA
 13150                           tblptru	equ	0xFF8
 13151                           tblptrh	equ	0xFF7
 13152                           tblptrl	equ	0xFF6
 13153                           tablat	equ	0xFF5
 13154                           prodh	equ	0xFF4
 13155                           prodl	equ	0xFF3
 13156                           intcon	equ	0xFF2
 13157                           intcon2	equ	0xFF1
 13158                           indf0	equ	0xFEF
 13159                           postinc0	equ	0xFEE
 13160                           fsr0h	equ	0xFEA
 13161                           fsr0l	equ	0xFE9
 13162                           wreg	equ	0xFE8
 13163                           postinc1	equ	0xFE6
 13164                           postdec1	equ	0xFE5
 13165                           fsr1h	equ	0xFE2
 13166                           fsr1l	equ	0xFE1
 13167                           indf2	equ	0xFDF
 13168                           postinc2	equ	0xFDE
 13169                           postdec2	equ	0xFDD
 13170                           plusw2	equ	0xFDB
 13171                           fsr2h	equ	0xFDA
 13172                           fsr2l	equ	0xFD9
 13173                           status	equ	0xFD8
 13174                           
 13175                           	psect	rparam
 13176  0000                     tosu	equ	0xFFF
 13177                           tosh	equ	0xFFE
 13178                           tosl	equ	0xFFD
 13179                           pclatu	equ	0xFFB
 13180                           pclath	equ	0xFFA
 13181                           tblptru	equ	0xFF8
 13182                           tblptrh	equ	0xFF7
 13183                           tblptrl	equ	0xFF6
 13184                           tablat	equ	0xFF5
 13185                           prodh	equ	0xFF4
 13186                           prodl	equ	0xFF3
 13187                           intcon	equ	0xFF2
 13188                           intcon2	equ	0xFF1
 13189                           indf0	equ	0xFEF
 13190                           postinc0	equ	0xFEE
 13191                           fsr0h	equ	0xFEA
 13192                           fsr0l	equ	0xFE9
 13193                           wreg	equ	0xFE8
 13194                           postinc1	equ	0xFE6
 13195                           postdec1	equ	0xFE5
 13196                           fsr1h	equ	0xFE2
 13197                           fsr1l	equ	0xFE1
 13198                           indf2	equ	0xFDF
 13199                           postinc2	equ	0xFDE
 13200                           postdec2	equ	0xFDD
 13201                           plusw2	equ	0xFDB
 13202                           fsr2h	equ	0xFDA
 13203                           fsr2l	equ	0xFD9
 13204                           status	equ	0xFD8


Data Sizes:
    Strings     106
    Constant    201
    Data        23
    BSS         62
    Persistent  2
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     95      95
    BANK0           160     80     144
    BANK1           256     20      43
    BANK2           256      0       0
    BANK3           244      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    ?___ftsub	float  size(2) Largest target is 0

    ?___ftpack	float  size(2) Largest target is 4
		 -> STR_37(CODE[4]), STR_36(CODE[4]), STR_35(CODE[4]), STR_34(CODE[4]), 
		 -> STR_33(CODE[4]), STR_32(CODE[4]), STR_31(CODE[4]), STR_29(CODE[4]), 
		 -> STR_28(CODE[4]), STR_27(CODE[4]), STR_26(CODE[4]), STR_25(CODE[4]), 
		 -> STR_24(CODE[4]), STR_23(CODE[4]), STR_16(CODE[4]), STR_15(CODE[4]), 
		 -> STR_14(CODE[4]), STR_13(CODE[4]), STR_12(CODE[4]), STR_11(CODE[4]), 
		 -> STR_10(CODE[4]), STR_7(CODE[4]), STR_6(CODE[4]), STR_5(CODE[4]), 
		 -> STR_4(CODE[4]), STR_3(CODE[4]), STR_2(CODE[4]), STR_1(CODE[4]), 

    ?___lldiv	unsigned long  size(2) Largest target is 0

    ?___asftsub	float  size(2) Largest target is 4
		 -> STR_37(CODE[4]), STR_36(CODE[4]), STR_35(CODE[4]), STR_34(CODE[4]), 
		 -> STR_33(CODE[4]), STR_32(CODE[4]), STR_31(CODE[4]), STR_29(CODE[4]), 
		 -> STR_28(CODE[4]), STR_27(CODE[4]), STR_26(CODE[4]), STR_25(CODE[4]), 
		 -> STR_24(CODE[4]), STR_23(CODE[4]), STR_16(CODE[4]), STR_15(CODE[4]), 
		 -> STR_14(CODE[4]), STR_13(CODE[4]), STR_12(CODE[4]), STR_11(CODE[4]), 
		 -> STR_10(CODE[4]), STR_7(CODE[4]), STR_6(CODE[4]), STR_5(CODE[4]), 
		 -> STR_4(CODE[4]), STR_3(CODE[4]), STR_2(CODE[4]), STR_1(CODE[4]), 

    ?___lltoft	float  size(2) Largest target is 0

    ?__tdiv_to_l_	unsigned long  size(2) Largest target is 0

    ?__div_to_l_	unsigned long  size(2) Largest target is 0

    ?___fttol	long  size(2) Largest target is 4
		 -> STR_37(CODE[4]), STR_36(CODE[4]), STR_35(CODE[4]), STR_34(CODE[4]), 
		 -> STR_33(CODE[4]), STR_32(CODE[4]), STR_31(CODE[4]), STR_29(CODE[4]), 
		 -> STR_28(CODE[4]), STR_27(CODE[4]), STR_26(CODE[4]), STR_25(CODE[4]), 
		 -> STR_24(CODE[4]), STR_23(CODE[4]), STR_16(CODE[4]), STR_15(CODE[4]), 
		 -> STR_14(CODE[4]), STR_13(CODE[4]), STR_12(CODE[4]), STR_11(CODE[4]), 
		 -> STR_10(CODE[4]), STR_7(CODE[4]), STR_6(CODE[4]), STR_5(CODE[4]), 
		 -> STR_4(CODE[4]), STR_3(CODE[4]), STR_2(CODE[4]), STR_1(CODE[4]), 

    ?___asftmul	float  size(2) Largest target is 0

    ?___ftneg	float  size(2) Largest target is 4
		 -> STR_37(CODE[4]), STR_36(CODE[4]), STR_35(CODE[4]), STR_34(CODE[4]), 
		 -> STR_33(CODE[4]), STR_32(CODE[4]), STR_31(CODE[4]), STR_29(CODE[4]), 
		 -> STR_28(CODE[4]), STR_27(CODE[4]), STR_26(CODE[4]), STR_25(CODE[4]), 
		 -> STR_24(CODE[4]), STR_23(CODE[4]), STR_16(CODE[4]), STR_15(CODE[4]), 
		 -> STR_14(CODE[4]), STR_13(CODE[4]), STR_12(CODE[4]), STR_11(CODE[4]), 
		 -> STR_10(CODE[4]), STR_7(CODE[4]), STR_6(CODE[4]), STR_5(CODE[4]), 
		 -> STR_4(CODE[4]), STR_3(CODE[4]), STR_2(CODE[4]), STR_1(CODE[4]), 

    ?_scale	float  size(2) Largest target is 0

    ?_fround	float  size(2) Largest target is 0

    ?_lowbit	unsigned long  size(2) Largest target is 4
		 -> lowbit@log2Val(COMRAM[4]), 

    ?_getTemp	unsigned long  size(2) Largest target is 0

    ?___ftdiv	float  size(2) Largest target is 0

    ?___asftadd	float  size(2) Largest target is 4
		 -> STR_37(CODE[4]), STR_36(CODE[4]), STR_35(CODE[4]), STR_34(CODE[4]), 
		 -> STR_33(CODE[4]), STR_32(CODE[4]), STR_31(CODE[4]), STR_29(CODE[4]), 
		 -> STR_28(CODE[4]), STR_27(CODE[4]), STR_26(CODE[4]), STR_25(CODE[4]), 
		 -> STR_24(CODE[4]), STR_23(CODE[4]), STR_16(CODE[4]), STR_15(CODE[4]), 
		 -> STR_14(CODE[4]), STR_13(CODE[4]), STR_12(CODE[4]), STR_11(CODE[4]), 
		 -> STR_10(CODE[4]), STR_7(CODE[4]), STR_6(CODE[4]), STR_5(CODE[4]), 
		 -> STR_4(CODE[4]), STR_3(CODE[4]), STR_2(CODE[4]), STR_1(CODE[4]), 

    ?___ftadd	float  size(2) Largest target is 4
		 -> STR_37(CODE[4]), STR_36(CODE[4]), STR_35(CODE[4]), STR_34(CODE[4]), 
		 -> STR_33(CODE[4]), STR_32(CODE[4]), STR_31(CODE[4]), STR_29(CODE[4]), 
		 -> STR_28(CODE[4]), STR_27(CODE[4]), STR_26(CODE[4]), STR_25(CODE[4]), 
		 -> STR_24(CODE[4]), STR_23(CODE[4]), STR_16(CODE[4]), STR_15(CODE[4]), 
		 -> STR_14(CODE[4]), STR_13(CODE[4]), STR_12(CODE[4]), STR_11(CODE[4]), 
		 -> STR_10(CODE[4]), STR_7(CODE[4]), STR_6(CODE[4]), STR_5(CODE[4]), 
		 -> STR_4(CODE[4]), STR_3(CODE[4]), STR_2(CODE[4]), STR_1(CODE[4]), 

    ?___ftmul	float  size(2) Largest target is 0

    ?___lwtoft	float  size(2) Largest target is 0

    ?___llmod	unsigned long  size(2) Largest target is 4
		 -> STR_37(CODE[4]), STR_36(CODE[4]), STR_35(CODE[4]), STR_34(CODE[4]), 
		 -> STR_33(CODE[4]), STR_32(CODE[4]), STR_31(CODE[4]), STR_29(CODE[4]), 
		 -> STR_28(CODE[4]), STR_27(CODE[4]), STR_26(CODE[4]), STR_25(CODE[4]), 
		 -> STR_24(CODE[4]), STR_23(CODE[4]), STR_16(CODE[4]), STR_15(CODE[4]), 
		 -> STR_14(CODE[4]), STR_13(CODE[4]), STR_12(CODE[4]), STR_11(CODE[4]), 
		 -> STR_10(CODE[4]), STR_7(CODE[4]), STR_6(CODE[4]), STR_5(CODE[4]), 
		 -> STR_4(CODE[4]), STR_3(CODE[4]), STR_2(CODE[4]), STR_1(CODE[4]), 

    ?___awdiv	int  size(2) Largest target is 0

    ?___awmod	int  size(2) Largest target is 4
		 -> STR_37(CODE[4]), STR_36(CODE[4]), STR_35(CODE[4]), STR_34(CODE[4]), 
		 -> STR_33(CODE[4]), STR_32(CODE[4]), STR_31(CODE[4]), STR_29(CODE[4]), 
		 -> STR_28(CODE[4]), STR_27(CODE[4]), STR_26(CODE[4]), STR_25(CODE[4]), 
		 -> STR_24(CODE[4]), STR_23(CODE[4]), STR_16(CODE[4]), STR_15(CODE[4]), 
		 -> STR_14(CODE[4]), STR_13(CODE[4]), STR_12(CODE[4]), STR_11(CODE[4]), 
		 -> STR_10(CODE[4]), STR_7(CODE[4]), STR_6(CODE[4]), STR_5(CODE[4]), 
		 -> STR_4(CODE[4]), STR_3(CODE[4]), STR_2(CODE[4]), STR_1(CODE[4]), 

    ?___lwmod	unsigned int  size(2) Largest target is 4
		 -> STR_37(CODE[4]), STR_36(CODE[4]), STR_35(CODE[4]), STR_34(CODE[4]), 
		 -> STR_33(CODE[4]), STR_32(CODE[4]), STR_31(CODE[4]), STR_29(CODE[4]), 
		 -> STR_28(CODE[4]), STR_27(CODE[4]), STR_26(CODE[4]), STR_25(CODE[4]), 
		 -> STR_24(CODE[4]), STR_23(CODE[4]), STR_16(CODE[4]), STR_15(CODE[4]), 
		 -> STR_14(CODE[4]), STR_13(CODE[4]), STR_12(CODE[4]), STR_11(CODE[4]), 
		 -> STR_10(CODE[4]), STR_7(CODE[4]), STR_6(CODE[4]), STR_5(CODE[4]), 
		 -> STR_4(CODE[4]), STR_3(CODE[4]), STR_2(CODE[4]), STR_1(CODE[4]), 

    ?_loadTime	struct sDate size(2) Largest target is 0

    ?___wmul	unsigned int  size(2) Largest target is 4
		 -> STR_37(CODE[4]), STR_36(CODE[4]), STR_35(CODE[4]), STR_34(CODE[4]), 
		 -> STR_33(CODE[4]), STR_32(CODE[4]), STR_31(CODE[4]), STR_29(CODE[4]), 
		 -> STR_28(CODE[4]), STR_27(CODE[4]), STR_26(CODE[4]), STR_25(CODE[4]), 
		 -> STR_24(CODE[4]), STR_23(CODE[4]), STR_16(CODE[4]), STR_15(CODE[4]), 
		 -> STR_14(CODE[4]), STR_13(CODE[4]), STR_12(CODE[4]), STR_11(CODE[4]), 
		 -> STR_10(CODE[4]), STR_7(CODE[4]), STR_6(CODE[4]), STR_5(CODE[4]), 
		 -> STR_4(CODE[4]), STR_3(CODE[4]), STR_2(CODE[4]), STR_1(CODE[4]), 

    ?_hibit	unsigned long  size(2) Largest target is 4
		 -> hibit@log2Val(COMRAM[4]), 

    ?_log2	unsigned long  size(2) Largest target is 0

    __asftsub@f1p	PTR float  size(2) Largest target is 3
		 -> sprintf@fval(BANK0[3]), 

    __asftmul@f1p	PTR float  size(2) Largest target is 3
		 -> sprintf@integ(BANK0[3]), 

    __asftadd@f1p	PTR float  size(2) Largest target is 3
		 -> sprintf@fval(BANK0[3]), getTemp@total(COMRAM[3]), 

    sprintf@_val._cp	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_38(CODE[7]), sprintf@c(BANK0[1]), STR_37(CODE[4]), STR_36(CODE[4]), 
		 -> STR_35(CODE[4]), STR_34(CODE[4]), STR_33(CODE[4]), STR_32(CODE[4]), 
		 -> STR_31(CODE[4]), STR_29(CODE[4]), STR_28(CODE[4]), STR_27(CODE[4]), 
		 -> STR_26(CODE[4]), STR_25(CODE[4]), STR_24(CODE[4]), STR_23(CODE[4]), 
		 -> STR_16(CODE[4]), STR_15(CODE[4]), STR_14(CODE[4]), STR_13(CODE[4]), 
		 -> STR_12(CODE[4]), STR_11(CODE[4]), STR_10(CODE[4]), STR_7(CODE[4]), 
		 -> STR_6(CODE[4]), STR_5(CODE[4]), STR_4(CODE[4]), STR_3(CODE[4]), 
		 -> STR_2(CODE[4]), STR_1(CODE[4]), 

    sprintf@f	PTR const unsigned char  size(2) Largest target is 15
		 -> STR_22(CODE[15]), STR_21(CODE[13]), STR_20(CODE[15]), STR_19(CODE[15]), 
		 -> STR_18(CODE[15]), STR_17(CODE[10]), STR_9(CODE[5]), STR_8(CODE[5]), 

    sprintf@sp	PTR unsigned char  size(2) Largest target is 9
		 -> printRTC@str(BANK0[9]), writeFloat@str(BANK0[9]), writeLong@str(COMRAM[9]), 

    ?_sprintf	int  size(2) Largest target is 4
		 -> STR_37(CODE[4]), STR_36(CODE[4]), STR_35(CODE[4]), STR_34(CODE[4]), 
		 -> STR_33(CODE[4]), STR_32(CODE[4]), STR_31(CODE[4]), STR_29(CODE[4]), 
		 -> STR_28(CODE[4]), STR_27(CODE[4]), STR_26(CODE[4]), STR_25(CODE[4]), 
		 -> STR_24(CODE[4]), STR_23(CODE[4]), STR_16(CODE[4]), STR_15(CODE[4]), 
		 -> STR_14(CODE[4]), STR_13(CODE[4]), STR_12(CODE[4]), STR_11(CODE[4]), 
		 -> STR_10(CODE[4]), STR_7(CODE[4]), STR_6(CODE[4]), STR_5(CODE[4]), 
		 -> STR_4(CODE[4]), STR_3(CODE[4]), STR_2(CODE[4]), STR_1(CODE[4]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(COMRAM[2]), 

    S604$_cp	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_38(CODE[7]), sprintf@c(BANK0[1]), STR_37(CODE[4]), STR_36(CODE[4]), 
		 -> STR_35(CODE[4]), STR_34(CODE[4]), STR_33(CODE[4]), STR_32(CODE[4]), 
		 -> STR_31(CODE[4]), STR_29(CODE[4]), STR_28(CODE[4]), STR_27(CODE[4]), 
		 -> STR_26(CODE[4]), STR_25(CODE[4]), STR_24(CODE[4]), STR_23(CODE[4]), 
		 -> STR_16(CODE[4]), STR_15(CODE[4]), STR_14(CODE[4]), STR_13(CODE[4]), 
		 -> STR_12(CODE[4]), STR_11(CODE[4]), STR_10(CODE[4]), STR_7(CODE[4]), 
		 -> STR_6(CODE[4]), STR_5(CODE[4]), STR_4(CODE[4]), STR_3(CODE[4]), 
		 -> STR_2(CODE[4]), STR_1(CODE[4]), 

    _val._str._cp	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_38(CODE[7]), sprintf@c(BANK0[1]), STR_37(CODE[4]), STR_36(CODE[4]), 
		 -> STR_35(CODE[4]), STR_34(CODE[4]), STR_33(CODE[4]), STR_32(CODE[4]), 
		 -> STR_31(CODE[4]), STR_29(CODE[4]), STR_28(CODE[4]), STR_27(CODE[4]), 
		 -> STR_26(CODE[4]), STR_25(CODE[4]), STR_24(CODE[4]), STR_23(CODE[4]), 
		 -> STR_16(CODE[4]), STR_15(CODE[4]), STR_14(CODE[4]), STR_13(CODE[4]), 
		 -> STR_12(CODE[4]), STR_11(CODE[4]), STR_10(CODE[4]), STR_7(CODE[4]), 
		 -> STR_6(CODE[4]), STR_5(CODE[4]), STR_4(CODE[4]), STR_3(CODE[4]), 
		 -> STR_2(CODE[4]), STR_1(CODE[4]), 

    writeString@string	PTR unsigned char  size(2) Largest target is 9
		 -> STR_30(CODE[3]), printRTC@str(BANK0[9]), writeFloat@str(BANK0[9]), writeLong@str(COMRAM[9]), 

    printFn	PTR FTN(unsigned char ,)void  size(2) Largest target is 0
		 -> Absolute function(), printTemp(), printRTC(), 

    dow	PTR const unsigned char [7] size(2) Largest target is 4
		 -> STR_37(CODE[4]), STR_36(CODE[4]), STR_35(CODE[4]), STR_34(CODE[4]), 
		 -> STR_33(CODE[4]), STR_32(CODE[4]), STR_31(CODE[4]), STR_29(CODE[4]), 
		 -> STR_28(CODE[4]), STR_27(CODE[4]), STR_26(CODE[4]), STR_25(CODE[4]), 
		 -> STR_24(CODE[4]), STR_23(CODE[4]), STR_16(CODE[4]), STR_15(CODE[4]), 
		 -> STR_14(CODE[4]), STR_13(CODE[4]), STR_12(CODE[4]), STR_11(CODE[4]), 
		 -> STR_10(CODE[4]), STR_7(CODE[4]), STR_6(CODE[4]), STR_5(CODE[4]), 
		 -> STR_4(CODE[4]), STR_3(CODE[4]), STR_2(CODE[4]), STR_1(CODE[4]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _high_isr in COMRAM

    _high_isr->_printRTC
    _high_isr->_printTemp
    _printTemp->_getTemp
    _getTemp->___asftadd
    ___lwtoft->___ftpack
    ___ftdiv->___ftpack
    _writeFloat->_getTemp
    _writeString->_writeChar
    _writeChar->___wmul
    _sprintf->___asftsub
    ___lltoft->___ftpack
    ___llmod->___lldiv
    ___fttol->___wmul
    ___asftsub->___ftsub
    ___ftsub->___ftadd
    ___asftmul->___ftmul
    ___asftadd->_fround
    ___ftadd->___ftmul
    _scale->___ftmul
    ___awdiv->___awmod
    ___ftmul->___fttol
    _fround->___ftmul
    _buttons->___awmod
    _update->_writeDigit
    _writeDigit->_log2
    _log2->_hibit
    _spi->_rotate
    _tick->_daysOfMonth
    _daysOfMonth->___lwmod
    ___wmul->___awdiv

Critical Paths under _main in BANK0

    None.

Critical Paths under _high_isr in BANK0

    _high_isr->_printRTC
    _printTemp->_writeFloat
    _writeFloat->_sprintf

Critical Paths under _main in BANK1

    _setup->_initRTC
    _initRTC->_loadTime
    _startDisp->_setBrightness
    _startDisp->_setTest

Critical Paths under _high_isr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _high_isr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _high_isr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _high_isr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _high_isr in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _high_isr in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _high_isr in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 9     4      5     154
                                             11 BANK1      9     4      5
                              _setup
 ---------------------------------------------------------------------------------
 (1) _setup                                                0     0      0      69
                          _startDisp
                            _initRTC
                           _initTemp
                       _setupButtons
 ---------------------------------------------------------------------------------
 (2) _setupButtons                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _initTemp                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _initRTC                                              1     1      0       7
                                             10 BANK1      1     1      0
                           _loadTime
 ---------------------------------------------------------------------------------
 (3) _loadTime                                            10    10      0       7
                                              0 BANK1     10    10      0
 ---------------------------------------------------------------------------------
 (2) _startDisp                                            1     1      0      62
                                              1 BANK1      1     1      0
                      _setBrightness
                            _setTest
 ---------------------------------------------------------------------------------
 (3) _setTest                                              1     0      1      31
                                              0 BANK1      1     0      1
 ---------------------------------------------------------------------------------
 (3) _setBrightness                                        1     0      1      31
                                              0 BANK1      1     0      1
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _high_isr                                            15    15      0   70509
                                             65 BANK0     15    15      0
                               _tick
                             _update
                            _buttons
                           _printRTC
                          _printTemp
                   Absolute function
 ---------------------------------------------------------------------------------
 (5) Absolute function(Fake)                               1     0      1       0
                                              0 COMRAM     1     0      1
 ---------------------------------------------------------------------------------
 (5) _printTemp                                            7     6      1   38781
                                             94 COMRAM     1     0      1
                                             52 BANK0      6     6      0
                        _writeString
                         _writeFloat
                            _getTemp
                             _lowbit
 ---------------------------------------------------------------------------------
 (6) _lowbit                                              11     7      4      69
                                              0 COMRAM    11     7      4
 ---------------------------------------------------------------------------------
 (6) _getTemp                                             20    17      3    8130
                                             74 COMRAM    20    17      3
                          ___asftadd
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                           ___lwtoft
                             ___wmul
 ---------------------------------------------------------------------------------
 (7) ___lwtoft                                             5     2      3     486
                                              8 COMRAM     5     2      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (7) ___ftdiv                                             17    11      6    1044
                                              8 COMRAM    17    11      6
                           ___ftpack
 ---------------------------------------------------------------------------------
 (6) _writeFloat                                          14    10      4   28524
                                             38 BANK0     14    10      4
                          _countBits
                            _sprintf
                        _writeString
                            _getTemp (ARG)
 ---------------------------------------------------------------------------------
 (5) _printRTC                                            16    15      1   29328
                                             94 COMRAM     1     0      1
                                             52 BANK0     13    13      0
                          _countBits
                            _sprintf
                        _writeString
                            ___lwmod
 ---------------------------------------------------------------------------------
 (7) _writeString                                         10     7      3    1734
                                             25 COMRAM    10     7      3
                               _log2
                          _writeChar
                          _countBits
                              _hibit
                             ___wmul
 ---------------------------------------------------------------------------------
 (8) _hibit                                               11     7      4      96
                                              0 COMRAM    11     7      4
 ---------------------------------------------------------------------------------
 (8) _countBits                                            5     1      4     180
                                              0 COMRAM     5     1      4
 ---------------------------------------------------------------------------------
 (8) _writeChar                                            3     1      2     396
                                             22 COMRAM     3     1      2
                        _getFontChar
                               _log2
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (9) _getFontChar                                          3     2      1     126
                                              0 COMRAM     3     2      1
 ---------------------------------------------------------------------------------
 (7) _sprintf                                             54    42     12   26124
                                             79 COMRAM    12     0     12
                                              0 BANK0     38    38      0
                             _fround
                              _scale
                            _isdigit
                        __tdiv_to_l_
                         __div_to_l_
                          ___asftadd
                          ___asftmul
                            ___ftmul
                          ___asftsub
                            ___awdiv
                             ___ftge
                            ___ftneg
                            ___fttol
                            ___lldiv
                            ___llmod
                           ___lltoft
                            ___lwmod
                             ___wmul
 ---------------------------------------------------------------------------------
 (8) ___lltoft                                             9     5      4     588
                                              8 COMRAM     9     5      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (8) ___llmod                                             10     2      8     324
                                             14 COMRAM    10     2      8
                            ___lldiv (ARG)
 ---------------------------------------------------------------------------------
 (8) ___lldiv                                             14     6      8     342
                                              0 COMRAM    14     6      8
 ---------------------------------------------------------------------------------
 (8) ___fttol                                             15    11      4     522
                                             22 COMRAM    15    11      4
                           ___ftpack (ARG)
                            ___awdiv (ARG)
                            ___awmod (ARG)
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (8) ___ftneg                                              3     0      3      90
                                              0 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (8) ___ftge                                               9     3      6     276
                                              0 COMRAM     9     3      6
 ---------------------------------------------------------------------------------
 (8) ___asftsub                                            5     0      5    2370
                                             74 COMRAM     5     0      5
                            ___ftsub
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (9) ___ftsub                                              6     0      6    2244
                                             68 COMRAM     6     0      6
                            ___ftadd
 ---------------------------------------------------------------------------------
 (8) ___asftmul                                            5     0      5    1266
                                             54 COMRAM     5     0      5
                            ___ftmul
 ---------------------------------------------------------------------------------
 (7) ___asftadd                                            5     0      5    2280
                                             69 COMRAM     5     0      5
                             _fround (ARG)
                            ___ftadd
 ---------------------------------------------------------------------------------
 (7) ___ftadd                                             14     8      6    2154
                                             54 COMRAM    14     8      6
                           ___ftpack
                            ___ftmul (ARG)
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (8) ___ftpack                                             8     3      5     444
                                              0 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (8) __div_to_l_                                          13     7      6     966
                                              0 COMRAM    13     7      6
 ---------------------------------------------------------------------------------
 (8) __tdiv_to_l_                                         17    11      6     648
                                              0 COMRAM    17    11      6
 ---------------------------------------------------------------------------------
 (8) _isdigit                                              3     2      1     138
                                              0 COMRAM     3     2      1
 ---------------------------------------------------------------------------------
 (8) _scale                                               15    12      3    3654
                                             54 COMRAM    12     9      3
                            ___ftmul
                            ___awdiv
                            ___awmod
                            ___fttol (ARG)
                             ___wmul
 ---------------------------------------------------------------------------------
 (8) ___awdiv                                              9     5      4     630
                                              7 COMRAM     9     5      4
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (7) ___ftmul                                             17    11      6    1140
                                             37 COMRAM    17    11      6
                           ___ftpack
                            ___awdiv (ARG)
                            ___awmod (ARG)
                            ___fttol (ARG)
                           ___lwtoft (ARG)
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (8) _fround                                              18    15      3    2832
                                             54 COMRAM    15    12      3
                            ___ftmul
                            ___awdiv
                            ___awmod
                             ___wmul
 ---------------------------------------------------------------------------------
 (5) _buttons                                             10    10      0     744
                                              7 COMRAM    10    10      0
                            ___awmod
 ---------------------------------------------------------------------------------
 (5) _update                                               6     6      0    1122
                                             24 COMRAM     6     6      0
                         _writeDigit
                                _spi
 ---------------------------------------------------------------------------------
 (6) _writeDigit                                           5     3      2     701
                                             19 COMRAM     5     3      2
                                _spi
                               _log2
                             _rotate
 ---------------------------------------------------------------------------------
 (7) _rotate                                               6     5      1     136
                                              0 COMRAM     6     5      1
 ---------------------------------------------------------------------------------
 (9) _log2                                                 8     4      4      96
                                             11 COMRAM     8     4      4
                              _hibit (ARG)
 ---------------------------------------------------------------------------------
 (6) _spi                                                  8     6      2     157
                                              6 COMRAM     8     6      2
                               _wait
                             _rotate (ARG)
 ---------------------------------------------------------------------------------
 (7) _wait                                                 4     0      4      22
                                              0 COMRAM     4     0      4
 ---------------------------------------------------------------------------------
 (5) _tick                                                 2     1      1     534
                                             11 COMRAM     2     1      1
                        _daysOfMonth
 ---------------------------------------------------------------------------------
 (6) _daysOfMonth                                          5     2      3     492
                                              6 COMRAM     5     2      3
                            ___lwmod
 ---------------------------------------------------------------------------------
 (8) ___lwmod                                              6     2      4     324
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (7) ___wmul                                               6     2      4     324
                                             16 COMRAM     6     2      4
                            ___awdiv (ARG)
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (9) ___awmod                                              7     3      4     606
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _setup
     _startDisp
       _setBrightness
       _setTest
     _initRTC
       _loadTime
     _initTemp
     _setupButtons

 _high_isr (ROOT)
   _tick
     _daysOfMonth
       ___lwmod
   _update
     _writeDigit
       _spi
         _wait
         _rotate (ARG)
       _log2
         _hibit (ARG)
       _rotate
     _spi
       _wait
       _rotate (ARG)
   _buttons
     ___awmod
   _printRTC
     _countBits
     _sprintf
       _fround
         ___ftmul
           ___ftpack
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___fttol (ARG)
             ___ftpack (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       _scale
         ___ftmul
           ___ftpack
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___fttol (ARG)
             ___ftpack (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___fttol (ARG)
           ___ftpack (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       _isdigit
       __tdiv_to_l_
       __div_to_l_
       ___asftadd
         _fround (ARG)
           ___ftmul
             ___ftpack
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___fttol (ARG)
               ___ftpack (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftadd (ARG)
           ___ftpack
           ___ftmul (ARG)
             ___ftpack
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___fttol (ARG)
               ___ftpack (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___lwtoft (ARG)
             ___ftpack
       ___asftmul
         ___ftmul
           ___ftpack
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___fttol (ARG)
             ___ftpack (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftmul
         ___ftpack
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___fttol (ARG)
           ___ftpack (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___asftsub
         ___ftsub
           ___ftadd
             ___ftpack
             ___ftmul (ARG)
               ___ftpack
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___fttol (ARG)
                 ___ftpack (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___lwtoft (ARG)
               ___ftpack
         ___lltoft (ARG)
           ___ftpack
       ___awdiv
         ___awmod (ARG)
       ___ftge
       ___ftneg
       ___fttol
         ___ftpack (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___lldiv
       ___llmod
         ___lldiv (ARG)
       ___lltoft
         ___ftpack
       ___lwmod
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     _writeString
       _log2
         _hibit (ARG)
       _writeChar
         _getFontChar
         _log2
           _hibit (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       _countBits
       _hibit
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     ___lwmod
   _printTemp
     _writeString
       _log2
         _hibit (ARG)
       _writeChar
         _getFontChar
         _log2
           _hibit (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       _countBits
       _hibit
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     _writeFloat
       _countBits
       _sprintf
         _fround
           ___ftmul
             ___ftpack
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___fttol (ARG)
               ___ftpack (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         _scale
           ___ftmul
             ___ftpack
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___fttol (ARG)
               ___ftpack (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___fttol (ARG)
             ___ftpack (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         _isdigit
         __tdiv_to_l_
         __div_to_l_
         ___asftadd
           _fround (ARG)
             ___ftmul
               ___ftpack
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___fttol (ARG)
                 ___ftpack (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftadd (ARG)
             ___ftpack
             ___ftmul (ARG)
               ___ftpack
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___fttol (ARG)
                 ___ftpack (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___lwtoft (ARG)
               ___ftpack
         ___asftmul
           ___ftmul
             ___ftpack
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___fttol (ARG)
               ___ftpack (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftmul
           ___ftpack
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___fttol (ARG)
             ___ftpack (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___asftsub
           ___ftsub
             ___ftadd
               ___ftpack
               ___ftmul (ARG)
                 ___ftpack
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___fttol (ARG)
                   ___ftpack (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___lwtoft (ARG)
                 ___ftpack
           ___lltoft (ARG)
             ___ftpack
         ___awdiv
           ___awmod (ARG)
         ___ftge
         ___ftneg
         ___fttol
           ___ftpack (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___lldiv
         ___llmod
           ___lldiv (ARG)
         ___lltoft
           ___ftpack
         ___lwmod
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       _writeString
         _log2
           _hibit (ARG)
         _writeChar
           _getFontChar
           _log2
             _hibit (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         _countBits
         _hibit
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       _getTemp (ARG)
         ___asftadd
           _fround (ARG)
             ___ftmul
               ___ftpack
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___fttol (ARG)
                 ___ftpack (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftadd (ARG)
             ___ftpack
             ___ftmul (ARG)
               ___ftpack
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___fttol (ARG)
                 ___ftpack (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___lwtoft (ARG)
               ___ftpack
         ___ftadd
           ___ftpack
           ___ftmul (ARG)
             ___ftpack
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___fttol (ARG)
               ___ftpack (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___ftdiv
           ___ftpack
         ___ftmul
           ___ftpack
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___fttol (ARG)
             ___ftpack (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___lwtoft
           ___ftpack
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     _getTemp
       ___asftadd
         _fround (ARG)
           ___ftmul
             ___ftpack
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___fttol (ARG)
               ___ftpack (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftadd (ARG)
           ___ftpack
           ___ftmul (ARG)
             ___ftpack
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___fttol (ARG)
               ___ftpack (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___lwtoft (ARG)
             ___ftpack
       ___ftadd
         ___ftpack
         ___ftmul (ARG)
           ___ftpack
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___fttol (ARG)
             ___ftpack (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___lwtoft (ARG)
           ___ftpack
       ___ftdiv
         ___ftpack
       ___ftmul
         ___ftpack
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___fttol (ARG)
           ___ftpack (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___lwtoft
         ___ftpack
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     _lowbit
   Absolute function(Fake)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM_1           400      0       0      21        0.0%
BIGRAM             3F3      0       0      22        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK2           100      0       0       9        0.0%
BANK2              100      0       0      10        0.0%
BITBANK1           100      0       0       7        0.0%
BANK1              100     14      2B       8       16.8%
BITBANK3            F4      0       0      11        0.0%
BANK3               F4      0       0      12        0.0%
BITBANK0            A0      0       0       5        0.0%
BANK0               A0     50      90       6       90.0%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     5F      5F       1      100.0%
BITSFR_4             0      0       0      40        0.0%
SFR_4                0      0       0      40        0.0%
BITSFR_3             0      0       0      40        0.0%
SFR_3                0      0       0      40        0.0%
BITSFR_2             0      0       0      40        0.0%
SFR_2                0      0       0      40        0.0%
BITSFR_1             0      0       0      40        0.0%
SFR_1                0      0       0      40        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0      13       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     11A       3        0.0%
DATA                 0      0     12D       4        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.20 build 52243 
Symbol Table                                                                                   Thu Nov 14 05:37:16 2013

           ___asftadd@f2 0048            ___asftadd@f1p 0046                       _GO 007E11  
           ___awdiv@sign 000E      ___wmul@multiplicand 0013             ___asftmul@f2 0039  
           ___asftsub@f2 004D             ___ftadd@exp1 0044             ___ftadd@exp2 0043  
           ___ftadd@sign 0042                      _GIE 007F97                      _dow 00D7  
                    _spi 2F34             ___awmod@sign 0007                      prod 000FF3  
                    tosl 000FFD                      wreg 000FE8             __CFG_FOSC$HS 000000  
          ___asftmul@f1p 0037              _sprintf$619 0069            ___asftsub@f1p 004B  
           ___ftdiv@cntr 0014             ___ftdiv@sign 0019                     l8482 3212  
                   l8486 324C                     ?_spi 0007                     STR_1 7DB4  
                   STR_2 7DB0                     STR_3 7DA0                     STR_4 7DB8  
                   STR_5 7DAC                     STR_6 7DA4                     STR_7 7DA8  
                   STR_8 7D9B                     STR_9 7D96                     _LATB 000F8A  
                   _PEIE 007F96                     u4785 38C4                     u4786 38CA  
                   i2l75 251C                     i2l76 2518                     i2l77 2584  
                   i2l78 2580                     i2l79 2584                     _TMR0 000FD6  
                   _TMR1 000FCE    __end_of_setBrightness 38B4                     _date 010D  
                   _log2 3570                     _main 31F4             ___ftpack@arg 0001  
                   _menu 00D6             ___ftpack@exp 0004                     _tick 2BCA  
                   _wait 38D2                     fsr0h 000FEA                     fsr1h 000FE2  
                   indf0 000FEF                     fsr0l 000FE9                     fsr2h 000FDA  
                   fsr1l 000FE1                     indf2 000FDF                     fsr2l 000FD9  
                   pclat 000FFA                     prodh 000FF4                     prodl 000FF3  
                   start 0018             _sprintf$1264 0066             ___ftmul@cntr 0035  
         writeString@cnt 0023             ___ftmul@sign 0036             ___fttol@exp1 0025  
           ___fttol@lval 0021                    ??_spi 0009            __CFG_PLLDIV$4 000000  
                  ?_log2 000C                    ?_main 0122          __end_of___awdiv 30F2  
                  _ADRES 000FC3          __end_of___ftadd 2160                    STR_20 7D73  
                  STR_21 7D82                    STR_30 7DBC                    STR_22 7D55  
                  STR_31 7DB4                    STR_32 7DB0                    ?_tick 000C  
                  STR_17 7D69                    STR_33 7DA0                    STR_18 7D73  
                  STR_34 7DB8                    STR_19 7D64                    STR_35 7DAC  
                  STR_36 7DA4          __end_of___awmod 31F4                    STR_37 7DA8  
                  STR_38 7D8F                    ?_wait 0001          __end_of___ftdiv 29F6  
        __end_of___ftneg 3870          __end_of___lldiv 3178          __end_of___ftmul 27F0  
                  _T0CON 000FD5          ___awdiv@divisor 000A                    _T1CON 000FCD  
        __end_of___llmod 33AC          __end_of___ftsub 37A0          __end_of___fttol 2BCA  
                  _LATA1 007C49                    _LATA3 007C4B                    _LATA4 007C4C  
                  _LATA5 007C4D          __end_of___lwmod 3600                    i2l122 1F92  
                  i2l160 2FB6                    i2l136 1414                    i2l420 2814  
                  i2l308 1B04                    i2l421 281C                    i2l246 2DF2  
                  i2l166 356E                    i2l422 2834                    i2l440 383A  
                  i2l425 285E                    i2l417 27FA                    i2l282 2C8E  
                  i2l362 235E                    i2l419 2802                    i2l531 0270  
                  i2l188 2304                    i2l462 3592                    i2l446 33CE  
                  i2l547 0B94                    i2l492 1864                    i2l904 2AD8  
                  i2l586 0A08                    i2l936 2D46          ___awdiv@counter 000D  
                  i2l973 1FFC                    i2l974 215E                    i2l895 2AE8  
                  i2l897 2A54                    i2l977 2026                    i2l988 20CA  
                  i2l997 20E6            __CFG_USBDIV$2 000000                    _TRISB 000F93  
          __CFG_PWRT$OFF 000000              _writeString 2160             ___lltoft@exp 0011  
        __end_of_getTemp 2464                    _nRBPU 007F8F          __end_of_initRTC 3522  
                  _hibit 33AC          __end_of_dpowers 7CDF                    _pow10 7CDF  
                  _scale 1416          __end_of_isdigit 3894          __end_of_buttons 28F8  
          ___ftpack@sign 0005                    _setup 37FA          __end_of_setTest 38D2  
                  pclath 000FFA                    tablat 000FF5                    plusw2 000FDB  
                  status 000FD8          __end_of_sprintf 0F8E          __initialization 3600  
        writeString@bits 0021             __end_of_log2 35BA             __end_of_main 3268  
           __end_of_tick 2C90             __end_of_wait 38F0     __size_of_daysOfMonth 00AC  
         printTemp@units 0099                   ??_log2 0010                   ??_main 0127  
          ___fttol@sign1 0020                   ??_tick 000D                   ??_wait 0005  
          __activetblptr 000002     __size_of_getFontChar 020E     __size_of__tdiv_to_l_ 0122  
                 ?_hibit 0001                   _ADCON0 000FC2                   _ADCON1 000FC1  
                 _ADCON2 000FC0         ___llmod@dividend 000F                   ?_scale 0037  
       ___awdiv@dividend 0008                   ?_setup 0001         __end_of___ftpack 2D48  
       __end_of___lltoft 3474                   i2l1013 26DE                   i2l1101 3166  
                 i2l1005 29F4                   i2l1022 26CE                   i2l1031 3060  
                 i2l1111 339A                   i2l1007 299E                   i2l1016 267C  
                 i2l1008 29C4                   i2l1037 27EE                   i2l1047 3862  
                 i2l1057 2BC8                   i2l1180 35F6                   i2l4642 34CC  
                 i2l4628 38D2                   i2l4724 328C                   i2l9000 30B0  
                 i2l9010 30D0                   i2l9002 30B4                   i2l9014 30DA  
                 i2l9030 3368                   i2l9200 2B6A                   i2l9040 341A  
                 i2l9018 30E8                   i2l9210 2B92                   i2l9034 338C  
                 i2l9026 3358                   i2l9042 3426                   i2l9060 2BCC  
                 i2l9124 1D3A                   i2l9116 1C62                   i2l9140 2744  
                 i2l9212 2B9E                   i2l9204 2B7A                   i2l9028 3364  
                 i2l9134 270C                   i2l9214 2BA2                   i2l8510 1D8C  
                 i2l9302 22A0                   i2l9080 2C5E                   i2l9072 2C1A  
                 i2l9064 2BE6                   i2l9240 1026                   i2l9232 0FA8  
                 i2l9400 20C4                   i2l9082 2C68                   i2l9242 103E  
                 i2l9234 0FDE                   i2l9154 277A                   i2l9322 1560  
                 i2l9218 2BB8                   i2l8530 1DBA                   i2l8522 1DB2  
                 i2l8514 1DAA                   i2l8506 1D88                   i2l9306 22FE  
                 i2l9076 2C44                   i2l9068 2C00                   i2l9236 0FF6  
                 i2l9164 27A6                   i2l9340 176E                   i2l9332 162A  
                 i2l9500 011C                   i2l9308 2300                   i2l9238 100E  
                 i2l9246 105C                   i2l9158 278A                   i2l9406 2102  
                 i2l9182 2B16                   i2l8534 1DBE                   i2l8526 1DB6  
                 i2l8518 1DAE                   i2l9248 13E0                   i2l9168 27B6  
                 i2l9328 161C                   i2l8624 388C                   i2l8640 2616  
                 i2l9416 213A                   i2l9520 01AA                   i2l8544 1DC6  
                 i2l9440 2310                   i2l8802 31DC                   i2l9346 1836  
                 i2l8634 25EA                   i2l8730 2AB0                   i2l9602 04D0  
                 i2l9522 01BA                   i2l8538 1DC2                   i2l8554 382A  
                 i2l8562 33BE                   i2l8900 3582                   i2l8716 2A84  
                 i2l9380 2066                   i2l9364 2034                   i2l9532 0224  
                 i2l9508 0154                   i2l8806 31EA                   i2l8670 2696  
                 i2l8654 2654                   i2l8726 2AA0                   i2l8750 2CB8  
                 i2l9390 2096                   i2l9358 200A                   i2l8814 3002  
                 i2l9630 061E                   i2l9534 022C                   i2l9526 01F6  
                 i2l9286 21AA                   i2l8912 2D52                   i2l8904 2D4A  
                 i2l8680 26BE                   i2l8736 2AC8                   i2l8760 2D14  
                 i2l8752 2CD6                   i2l8744 2CA0                   i2l9392 209C  
                 i2l8824 305E                   i2l8840 3124                   i2l9800 0CA6  
                 i2l9712 092A                   i2l9720 09A4                   i2l9704 08E8  
                 i2l9560 0342                   i2l9544 0280                   i2l9536 0234  
                 i2l9528 020E                   i2l9480 0050                   i2l9456 23C8  
                 i2l8682 26CA                   i2l8674 26A6                   i2l8738 2AD4  
                 i2l8690 2A02                   i2l9386 2084                   i2l8818 3032  
                 i2l8850 3158                   i2l8842 3128                   i2l9722 09B4  
                 i2l9642 06AE                   i2l9634 0656                   i2l9626 05F6  
                 i2l9618 0594                   i2l9554 02FE                   i2l9546 0288  
                 i2l9482 006E                   i2l9474 002E                   i2l8860 35D4  
                 i2l8924 2DA2                   i2l8908 2D4E                   i2l8756 2CEC  
                 i2l8748 2CAE                   i2l9388 208E                   i2l9820 0D96  
                 i2l9804 0CD4                   i2l9572 03A4                   i2l9564 0352  
                 i2l9548 02CE                   i2l9492 00AE                   i2l8940 2924  
                 i2l9900 19D2                   i2l8790 31B2                   i2l8782 3194  
                 i2l8862 35D8                   i2l8918 2D9E                   i2l8758 2D0A  
                 i2l9398 20BA                   i2l8838 3118                   i2l9822 0DA4  
                 i2l9814 0D4C                   i2l9742 0A40                   i2l9734 0A0C  
                 i2l9646 06D4                   i2l9574 03BE                   i2l9566 036A  
                 i2l9558 0332                   i2l9486 0078                   i2l9902 19EA  
                 i2l8792 31BA                   i2l8928 2DA6                   i2l8880 2838  
                 i2l8696 2A0E                   i2l9808 0D14                   i2l9728 09CE  
                 i2l9664 07AA                   i2l9592 0466                   i2l9584 03FE  
                 i2l9904 1A00                   i2l9912 1A98                   i2l8794 31BE  
                 i2l8786 31A0                   i2l8866 35EC                   i2l8858 35CC  
                 i2l8890 28EE                   i2l9826 0DE8                   i2l9770 0BC0  
                 i2l9746 0A92                   i2l9690 089E                   i2l9682 0868  
                 i2l9658 074C                   i2l9578 03DC                   i2l9586 0444  
                 i2l8946 295C                   i2l9906 1A4A                   i2l9914 1AAA  
                 i2l8884 2872                   i2l9852 0E88                   i2l9836 0E30  
                 i2l9844 0E58                   i2l9828 0DF6                   i2l9780 0C24  
                 i2l9764 0B86                   i2l9756 0B5C                   i2l9940 24A6  
                 i2l8798 31D2                   i2l9846 0E64                   i2l9758 0B6C  
                 i2l9686 0894                   i2l9678 0808                   i2l9918 1AC0  
                 i2l9950 24D8                   i2l9942 24AE                   i2l9934 2492  
                 i2l8888 2882                   i2l8992 308E                   i2l9864 0F4E  
                 i2l9696 08B8                   i2l9960 2524                   i2l9952 24E8  
                 i2l9944 24C4                   i2l9936 249A                   i2l8986 307E  
                 i2l9858 0EB8                   i2l9786 0C48                   i2l9698 08CE  
                 i2l9866 0F64                   i2l9890 18C6                   i2l9882 187A  
                 i2l9970 2576                   i2l9962 252C                   i2l9954 2512  
                 i2l9946 24C6                   i2l9938 24A2                   i2l9868 0F80  
                 i2l9892 18F8                   i2l9972 2580                   i2l9964 2530  
                 i2l9948 24D4                   i2l9956 2518                   i2l8998 30A8  
                 i2l9894 1984                   i2l9886 18A4                   i2l9966 2538  
                 i2l9958 251C                   i2l9888 18B0                   i2l9968 2572  
       __end_of___lwtoft 37FA         daysOfMonth@month 0007                   _TMR0IE 007F95  
                 _TMR0IF 007F92                   _TMR1IE 007CE8                   _TMR1IF 007CF0  
                 _TMR0ON 007EAF                   _TMR1ON 007E68                   _TRISA1 007C91  
                 _TRISA2 007C92                   _TRISA3 007C93                   _TRISA4 007C94  
                 _TRISA5 007C95         __end_of__powers_ 7D55         __end_of_lcd_font 7CB7  
       __end_of_high_isr 25BE                   ___ftge 2FD2                   ___wmul 3730  
              ??___awdiv 000C                ??___ftadd 003D                ??___awmod 0005  
              ??___ftdiv 000F                ??___ftneg 0004                ??___lldiv 0009  
              ??___ftmul 002C                ??___llmod 0017                ??___ftsub 004B  
              ??___fttol 001B                ??___lwmod 0005         __end_of_loadTime 3918  
       __end_of_initTemp 3916                   _fround 1B06                   clear_0 3606  
                 clear_1 3612         ___awdiv@quotient 000F          ___awmod@divisor 0003  
                 _screen 0100                   _lowbit 3268          ___awmod@counter 0006  
                 hibit@x 0001                ??_getTemp 004E                   _update 0F8E  
                 _rotate 3474    ___ftmul@f3_as_product 0032                ??_initRTC 0121  
              ??_isdigit 0002                ??_buttons 0008             countBits@ret 0005  
           countBits@num 0001         __end_of_printRTC 1B06                   spi@cnt 000E  
           __mediumconst 7C8C                ??_setTest 0118                   tblptrh 000FF7  
                 tblptrl 000FF6                   tblptru 000FF8                ??_sprintf 0060  
     __size_of___asftadd 003C       __size_of___asftmul 003C       __size_of___asftsub 003C  
             __accesstop 0060  __end_of__initialization 3638          __CFG_PBADEN$OFF 000000  
             ___ftadd@f1 0037               ___ftadd@f2 003A               ___ftge@ff1 0001  
             ___ftge@ff2 0004               ___ftdiv@f1 0009               ___ftdiv@f2 000C  
             ___ftdiv@f3 0016               ___ftneg@f1 0001               ___ftmul@f1 0026  
             ___ftmul@f2 0029               ___ftsub@f1 0045               ___ftsub@f2 0048  
             ___fttol@f1 0017           __pcstackCOMRAM 0001             __pidataBANK0 38F0  
             ___lltoft@c 0009            __end_of_hibit 3410            __end_of_pow10 7D07  
          __end_of_scale 1866            __end_of_setup 3822               ___lwtoft@c 0009  
        printTemp@digits 005F               __div_to_l_ 29F6                  ??_hibit 0005  
        __div_to_l_@exp1 000D          __div_to_l_@cntr 000C             sprintf@integ 0071  
                ??_scale 003A          __div_to_l_@quot 0008             sprintf@width 007D  
                ??_setup 0122               __pbssBANK0 00B0               __pbssBANK1 0100  
     __size_of_countBits 0028            __div_to_l_@f1 0001            __div_to_l_@f2 0004  
                ?___ftge 0001                  ?___wmul 0011        __end_of___asftadd 36F6  
                ?_fround 0037        __end_of___asftmul 36BA        __end_of___asftsub 367E  
              ?___ftpack 0001                  ?_lowbit 0001                ?___lltoft 0009  
                ?_update 0001                  ?_rotate 0001                ?___lwtoft 0009  
                i2l10120 13BA                  i2l10122 13C4                  i2l10124 13CE  
                i2l10116 10AC                  i2l10126 13D8                  i2l10118 13B0  
           ?_writeString 001A       __size_of_printTemp 009E       __size_of_startDisp 00A2  
              ?_high_isr 0001                ?_loadTime 0001                ?_initTemp 0001  
     __size_of_writeChar 003A        __end_of__npowers_ 7D2E                  __Hparam 0000  
             _scale$1263 0040                  __Lparam 0000                ?_printRTC 005F  
        __size_of___ftge 0090                  ___awdiv 3062                  ___ftadd 1F94  
                ___awmod 3178                  ___ftdiv 28F8                  ___ftneg 384A  
                ___lldiv 30F2          __size_of___wmul 003A                  ___ftmul 26E0  
                ___llmod 3342                  ___ftsub 376A                  ___fttol 2AEA  
                ___lwmod 35BA        __end_of_countBits 384A                  __pcinit 3600  
             ??___ftpack 0006          __size_of_fround 0280                  __ramtop 0800  
             ??___lltoft 000D          __size_of_lowbit 006E                  _getTemp 2306  
                __ptext0 31F4                  __ptext1 37FA                  __ptext2 37A0  
                __ptext3 3908                  __ptext4 34D0                  __ptext5 3916  
                __ptext6 2DF4                  __ptext7 38B4                  __ptext8 3894  
        __size_of_update 0488          __size_of_rotate 005C               ??___lwtoft 000C  
 __size_of_setBrightness 0020              ?__div_to_l_ 0001                  _initRTC 34D0  
                _dpowers 7CB7                  _isdigit 3870                  _buttons 27F0  
           __size_of_spi 009E         ___awmod@dividend 0001                  _setTest 38B4  
                _printFn 00EE                  log2@num 000C                  main@cnt 0127  
                _sprintf 001C               ??_high_isr 00A1           __pintcode_body 2464  
   end_of_initialization 3638               ??_loadTime 0117            _tmr0BigCounts 00CE  
             ??_initTemp 0117            __Lmediumconst 7C8C                  int_func 2464  
           writeChar@dig 0019                  tick@val 000C                  spi@addr 0007  
                spi@data 0008          ___lldiv@divisor 0005                  lowbit@x 0001  
                spi@send 000C          ___lldiv@counter 000A        __end_of_printTemp 2F34  
          ??_daysOfMonth 000A               ??_printRTC 0094                  postdec1 000FE5  
                postdec2 000FDD                  postinc0 000FEE                  postinc1 000FE6  
                postinc2 000FDE            ?_setupButtons 0001        __end_of_startDisp 2E96  
         __tdiv_to_l_@f1 0001           __tdiv_to_l_@f2 0004            ??_getFontChar 0002  
          ??__tdiv_to_l_ 0007               getTemp@cnt 005E        __end_of_writeChar 3730  
            printRTC@str 0096             writeString@i 0022              ___ftdiv@exp 0015  
          _setBrightness 3894      __size_of__div_to_l_ 00F4              ___ftmul@exp 0031  
         ??_setupButtons 0117        writeString@digits 001A               _writeDigit 3522  
             _writeFloat 32D6           __end_of___ftge 3062           __end_of___wmul 376A  
      writeString@string 001B           __end_of_fround 1D86      __end_of_daysOfMonth 2DF4  
         __end_of_lowbit 32D6           __end_of_update 1416           __end_of_rotate 34D0  
    start_initialization 3600            lowbit@log2Val 0008      __end_of_getFontChar 1F94  
    __end_of__tdiv_to_l_ 26E0              __end_of_spi 2FD2     __size_of_writeString 01A6  
         ?_setBrightness 0117          ___llmod@divisor 0013          ___llmod@counter 0018  
        daysOfMonth@year 0008                 ??___ftge 0007                 ??___wmul 0015  
          sprintf@vd_621 006F              __pdataBANK0 00D7               buttons@cnt 0011  
               ??_fround 003A                 ??_lowbit 0005                 ??_update 0019  
               ??_rotate 0002               fround@prec 0037        __size_of___ftpack 00B8  
              ___asftadd 36BA                ___asftmul 367E                ___asftsub 3642  
       writeFloat@digits 0086        __size_of___lltoft 0064        __size_of___lwtoft 002C  
          __pcstackBANK0 0060            __pcstackBANK1 0117      __end_of__stringdata 7DBF  
      __size_of_high_isr 25B6              sprintf@_val 0082              sprintf@flag 0078  
            sprintf@fval 007A              sprintf@prec 007F                __pnvBANK0 00EE  
      __size_of_loadTime 0002        __size_of_initTemp 000E                __pintcode 0008  
          __pmediumconst 7C8C              _daysOfMonth 2D48                 ?___awdiv 0008  
               ?___ftadd 0037                 ?___awmod 0001                 ?___ftdiv 0009  
            ?_writeDigit 0014                 ?___ftneg 0001                 ?___lldiv 0001  
               ?___ftmul 0026                 ?___llmod 000F                 ?___ftsub 0045  
              __npowers_ 7D07                 ?___fttol 0017              ?_writeFloat 0086  
               ?___lwmod 0001      getTemp@oldTempsTemp 004F        __size_of_printRTC 02A0  
            _getFontChar 1D86              __tdiv_to_l_ 25BE                 ?_getTemp 004B  
           ??__div_to_l_ 0007                 ?_initRTC 0001               ?___asftadd 0046  
              _countBits 3822                 ?_isdigit 0001                 ?_buttons 0001  
             ?___asftmul 0037               ?___asftsub 004B          _rtc_small_ticks 00D4  
               ?_setTest 0117     __end_of_setupButtons 37CE           __size_of_hibit 0064  
               ?_sprintf 0050           __size_of_scale 0450          ??_setBrightness 0118  
         __size_of_setup 0028           ___wmul@product 0015            getFontChar@ch 0001  
            writeChar@ch 0018                 i2u243_44 34B0                 i2u243_45 34AC  
               i2u308_44 2F72                 i2u244_44 34C0                 i2u308_45 2F6C  
               i2u244_45 34BC                 i2u261_44 32BE                 i2u309_45 2F7E  
               i2u261_45 32B8                 i2u309_46 2F84       __end_of__div_to_l_ 2AEA  
               i2u720_40 25DC                 i2u720_45 25D4                 i2u722_40 2608  
               i2u802_40 2B80                 i2u810_44 13F4                 i2u810_45 13EE  
               i2u722_45 2600                 i2u820_40 22F6                 i2u708_44 33F8  
               i2u812_44 21BA                 i2u708_45 33F2                 i2u812_45 21B6  
               i2u820_47 22F0                 i2u734_40 2AB6                 i2u814_40 2200  
               i2u814_47 21FA                 i2u727_40 26AC                 i2u807_44 0FB8  
               i2u807_45 0FB4                 i2u808_40 1052                 i2u816_40 2244  
               i2u920_41 32E0                 i2u808_46 1054                 i2u816_47 223E  
               i2u921_41 1870                 i2u809_44 1070                 i2u761_44 28A4  
               i2u809_45 106A                 i2u761_45 289E                 i2u826_40 1FB2  
               i2u770_40 294E                 i2u922_40 249A                 i2u922_41 2498  
               i2u818_44 2288                 i2u826_45 1FAA                 i2u818_45 2282  
               i2u827_40 1FD8                 i2u923_40 24A2                 i2u923_41 24A0  
               i2u819_44 22B0                 i2u827_45 1FD0                 i2u819_45 22AC  
               i2u860_40 02C8                 i2u924_40 24C4                 i2u924_41 24C2  
               i2u860_47 02C2                 i2u926_40 2524                 i2u925_48 24F8  
               i2u926_41 2522                 i2u925_49 2512                 i2u870_45 04A8  
               i2u791_40 26FE                 i2u767_40 2916                 i2u927_40 252C  
               i2u927_41 252A                 i2u791_45 26F6                 i2u767_45 290E  
               i2u872_40 0524                 i2u928_40 2572                 i2u928_41 2570  
               i2u872_45 0518                 i2u793_40 272A                 i2u769_40 2942  
               i2u793_45 2722                 i2u769_45 293A                 i2u794_40 2736  
               i2u866_40 0396                 i2u866_47 038C                 i2u797_40 2B08  
               i2u797_45 2B00                 i2u799_40 2B34                 i2u799_45 2B2C  
        writeDigit@digit 0014                _printTemp 2E96                _startDisp 2DF4  
            __stringdata 7D55        ___wmul@multiplier 0011               ?_countBits 0001  
           setTest@state 0117                _writeChar 36F6                copy_data0 362C  
    __size_of_writeDigit 004E      __size_of_writeFloat 006C           _printTemp$1260 0095  
        writeFloat@F5025 00C5                 __Hrparam 0000                 __Lrparam 0000  
        loadTime@newDate 0117               ?_printTemp 005F         __size_of___awdiv 0090  
       __size_of___ftadd 01CC         __size_of___awmod 007C         __size_of___ftdiv 00FE  
       __size_of___ftneg 0026         __size_of___lldiv 0086         __size_of___ftmul 0110  
       __size_of___llmod 006A         __size_of___ftsub 0036         __size_of___fttol 00E0  
       __size_of___lwmod 0046                 ___ftpack 2C90              _fround$1261 0043  
            _fround$1262 0040                 ___lltoft 3410               ?_startDisp 0001  
            _isdigit$894 0003                 ___lwtoft 37CE         __size_of_getTemp 015E  
            ??___asftadd 004B               sprintf@exp 0076              ??___asftmul 003C  
            ??___asftsub 0050            _printRTC$1259 009F         __size_of_initRTC 0052  
       __size_of_isdigit 0024         __size_of_buttons 0108           writeChar@digit 0017  
       __size_of_setTest 001E               ?_writeChar 0017                 __ptext10 1866  
               __ptext11 2E96                 __ptext20 36F6                 __ptext12 3268  
               __ptext21 1D86                 __ptext13 2306                 __ptext30 376A  
               __ptext22 001C                 __ptext14 37CE                 __ptext31 367E  
               __ptext23 3410                 __ptext15 28F8                 __ptext40 26E0  
               __ptext32 36BA                 __ptext24 3342                 __ptext16 32D6  
               __ptext41 1B06                 __ptext33 1F94                 __ptext25 30F2  
               __ptext17 2160                 __ptext50 2D48                 __ptext42 27F0  
               __ptext34 2C90                 __ptext26 2AEA                 __ptext18 33AC  
               __ptext51 35BA                 __ptext43 0F8E                 __ptext35 29F6  
               __ptext27 384A                 __ptext19 3822                 __ptext52 3730  
               __ptext44 3522                 __ptext36 25BE                 __ptext28 2FD2  
               __ptext53 3178                 __ptext45 3474                 __ptext37 3870  
               __ptext29 3642                 __ptext54 0000                 __ptext46 3570  
               __ptext38 1416                 __ptext47 2F34                 __ptext39 3062  
               __ptext48 38D2                 __ptext49 2BCA                 __powers_ 7D2E  
               _lcd_font 7C8C                 _high_isr 0008         __size_of_sprintf 0F72  
          _rtc_big_ticks 00D2                 _loadTime 3916                 _initTemp 3908  
              wait@count 0001            __size_of_log2 004A            __size_of_main 0074  
               _oldTemps 00B0            __size_of_tick 00C6            __size_of_wait 001E  
               _printRTC 1866           writeDigit@segs 0015                 main@argc 0122  
               main@argv 0124    __CFG_CPUDIV$OSC3_PLL4 000000                update@cnt 001E  
  __size_of_setupButtons 002E              ??_countBits 0005                rotate@cnt 0006  
          ??_writeString 001D                rotate@seg 0001                rotate@ret 0005  
               isdigit@c 0001                 scale@scl 0037           writeFloat@bits 0093  
               intlevel2 0000                sprintf@ap 0074         __tdiv_to_l_@exp1 0011  
              sprintf@vd 006D                sprintf@sp 0050         __tdiv_to_l_@cntr 0010  
       __tdiv_to_l_@quot 000C         ___lwmod@dividend 0001         ___lldiv@dividend 0001  
          writeDigit@dig 0017            writeDigit@cnt 0018           writeLong@F5021 00E5  
         printRTC@digits 005F             getTemp@total 005B             ?_daysOfMonth 0007  
           ??_writeDigit 0016             ??_writeFloat 005F             _setupButtons 37A0  
            ??_printTemp 0094            printRTC@F5050 00BC             ?_getFontChar 0001  
    setBrightness@bright 0117             ?__tdiv_to_l_ 0001              ??_startDisp 0118  
          writeFloat@num 0087            writeFloat@str 008A                 sprintf@c 0081  
               sprintf@f 0052         ___lldiv@quotient 000B          ___lwmod@divisor 0003  
        ___lwmod@counter 0006              getTemp@temp 0058              ??_writeChar 0019  
            log2@log2Val 0010      __end_of_writeString 2306       __end_of_writeDigit 3570  
     __end_of_writeFloat 3342             hibit@log2Val 0008  
