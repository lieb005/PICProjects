

Microchip Technology PIC18 LITE Macro Assembler V1.32 build 58300 
                                                                                               Sun Aug 17 17:20:01 2014

Microchip Technology Omniscient Code Generator (Lite mode) build 58300
     1                           	processor	18F2550
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataBANK1,global,class=CODE,delta=1
     6                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1
     7                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     9                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
    10                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    12                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    13                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    14                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    15                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    16                           	psect	text0,global,reloc=2,class=CODE,delta=1
    17                           	psect	text1,global,reloc=2,class=CODE,delta=1
    18                           	psect	text2,global,reloc=2,class=CODE,delta=1
    19                           	psect	text3,global,reloc=2,class=CODE,delta=1
    20                           	psect	text4,global,reloc=2,class=CODE,delta=1
    21                           	psect	text5,global,reloc=2,class=CODE,delta=1
    22                           	psect	text6,global,reloc=2,class=CODE,delta=1
    23                           	psect	text7,global,reloc=2,class=CODE,delta=1
    24                           	psect	text8,global,reloc=2,class=CODE,delta=1
    25                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    26                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    27                           	psect	text10,global,reloc=2,class=CODE,delta=1
    28                           	psect	text11,global,reloc=2,class=CODE,delta=1
    29                           	psect	text12,global,reloc=2,class=CODE,delta=1
    30                           	psect	text13,global,reloc=2,class=CODE,delta=1
    31                           	psect	text14,global,reloc=2,class=CODE,delta=1
    32                           	psect	text15,global,reloc=2,class=CODE,delta=1
    33                           	psect	text16,global,reloc=2,class=CODE,delta=1
    34                           	psect	text17,global,reloc=2,class=CODE,delta=1
    35                           	psect	text18,global,reloc=2,class=CODE,delta=1
    36                           	psect	text19,global,reloc=2,class=CODE,delta=1
    37                           	psect	text20,global,reloc=2,class=CODE,delta=1
    38                           	psect	text21,global,reloc=2,class=CODE,delta=1
    39                           	psect	text22,global,reloc=2,class=CODE,delta=1
    40                           	psect	text23,global,reloc=2,class=CODE,delta=1
    41                           	psect	text24,global,reloc=2,class=CODE,delta=1
    42                           	psect	text25,global,reloc=2,class=CODE,delta=1
    43                           	psect	text26,global,reloc=2,class=CODE,delta=1
    44                           	psect	text27,global,reloc=2,class=CODE,delta=1
    45                           	psect	text28,global,reloc=2,class=CODE,delta=1
    46                           	psect	text29,global,reloc=2,class=CODE,delta=1
    47                           	psect	text30,global,reloc=2,class=CODE,delta=1
    48                           	psect	text31,global,reloc=2,class=CODE,delta=1
    49                           	psect	text32,global,reloc=2,class=CODE,delta=1
    50                           	psect	text33,global,reloc=2,class=CODE,delta=1
    51                           	psect	text34,global,reloc=2,class=CODE,delta=1
    52                           	psect	text35,global,reloc=2,class=CODE,delta=1
    53                           	psect	text36,global,reloc=2,class=CODE,delta=1
    54                           	psect	text37,global,reloc=2,class=CODE,delta=1
    55                           	psect	text38,global,reloc=2,class=CODE,delta=1
    56                           	psect	text39,global,reloc=2,class=CODE,delta=1
    57                           	psect	text40,global,reloc=2,class=CODE,delta=1
    58                           	psect	text41,global,reloc=2,class=CODE,delta=1
    59                           	psect	text42,global,reloc=2,class=CODE,delta=1
    60                           	psect	text43,global,reloc=2,class=CODE,delta=1
    61                           	psect	text44,global,reloc=2,class=CODE,delta=1
    62                           	psect	text45,global,reloc=2,class=CODE,delta=1
    63                           	psect	text46,global,reloc=2,class=CODE,delta=1
    64                           	psect	text47,global,reloc=2,class=CODE,delta=1
    65                           	psect	text48,global,reloc=2,class=CODE,delta=1
    66                           	psect	text49,global,reloc=2,class=CODE,delta=1
    67                           	psect	text50,global,reloc=2,class=CODE,delta=1
    68                           	psect	text51,global,reloc=2,class=CODE,delta=1
    69                           	psect	text52,global,reloc=2,class=CODE,delta=1
    70                           	psect	text53,global,reloc=2,class=CODE,delta=1
    71                           	psect	text54,global,reloc=2,class=CODE,delta=1
    72                           	psect	text55,global,reloc=2,class=CODE,delta=1
    73                           	psect	text56,global,reloc=2,class=CODE,delta=1
    74                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    75                           	psect	text57,global,reloc=2,class=CODE,delta=1
    76                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    77  0000                     
    78                           	psect	idataBANK1
    79  004644                     __pidataBANK1:
    80                           	opt stack 0
    81                           
    82                           ;initializer for writeLong@F5131
    83  004644  30                 	db	48
    84  004645  30                 	db	48
    85  004646  30                 	db	48
    86  004647  30                 	db	48
    87  004648  30                 	db	48
    88  004649  30                 	db	48
    89  00464A  30                 	db	48
    90  00464B  30                 	db	48
    91  00464C  00                 	db	0
    92  00464D  00                 	db	0
    93  00464E  00                 	db	0
    94  00464F  00                 	db	0
    95  004650  00                 	db	0
    96  004651  00                 	db	0
    97  004652  00                 	db	0
    98                           
    99                           ;initializer for _oldTemps
   100  004653  00                 	db	0
   101  004654  C8                 	db	200
   102  004655  41                 	db	65
   103  004656  00                 	db	0
   104  004657  C8                 	db	200
   105  004658  41                 	db	65
   106  004659  00                 	db	0
   107  00465A  C8                 	db	200
   108  00465B  41                 	db	65
   109  00465C  00                 	db	0
   110  00465D  C8                 	db	200
   111  00465E  41                 	db	65
   112                           
   113                           	psect	mediumconst
   114  007C74                     __pmediumconst:
   115                           	opt stack 0
   116  007C74  00                 	db	0
   117  007C75                     _lcd_font:
   118                           	opt stack 0
   119  007C75  3F                 	db	63
   120  007C76  06                 	db	6
   121  007C77  5B                 	db	91
   122  007C78  4F                 	db	79
   123  007C79  66                 	db	102
   124  007C7A  6D                 	db	109
   125  007C7B  7C                 	db	124
   126  007C7C  27                 	db	39
   127  007C7D  7F                 	db	127
   128  007C7E  67                 	db	103
   129  007C7F  00                 	db	0
   130  007C80  00                 	db	0
   131  007C81  31                 	db	49
   132  007C82  48                 	db	72
   133  007C83  0E                 	db	14
   134  007C84  53                 	db	83
   135  007C85  00                 	db	0
   136  007C86  77                 	db	119
   137  007C87  7C                 	db	124
   138  007C88  58                 	db	88
   139  007C89  5E                 	db	94
   140  007C8A  79                 	db	121
   141  007C8B  71                 	db	113
   142  007C8C  3D                 	db	61
   143  007C8D  74                 	db	116
   144  007C8E  10                 	db	16
   145  007C8F  1E                 	db	30
   146  007C90  68                 	db	104
   147  007C91  38                 	db	56
   148  007C92  37                 	db	55
   149  007C93  54                 	db	84
   150  007C94  5C                 	db	92
   151  007C95  73                 	db	115
   152  007C96  67                 	db	103
   153  007C97  50                 	db	80
   154  007C98  2D                 	db	45
   155  007C99  78                 	db	120
   156  007C9A  1C                 	db	28
   157  007C9B  3C                 	db	60
   158  007C9C  7E                 	db	126
   159  007C9D  76                 	db	118
   160  007C9E  6E                 	db	110
   161  007C9F  1B                 	db	27
   162  007CA0                     __end_of_lcd_font:
   163                           	opt stack 0
   164  007CA0                     _dpowers:
   165                           	opt stack 0
   166  007CA0  0001               	dw	1
   167  007CA2  0000               	dw	0
   168  007CA4  000A               	dw	10
   169  007CA6  0000               	dw	0
   170  007CA8  0064               	dw	100
   171  007CAA  0000               	dw	0
   172  007CAC  03E8               	dw	1000
   173  007CAE  0000               	dw	0
   174  007CB0  2710               	dw	10000
   175  007CB2  0000               	dw	0
   176  007CB4  86A0               	dw	34464
   177  007CB6  0001               	dw	1
   178  007CB8  4240               	dw	16960
   179  007CBA  000F               	dw	15
   180  007CBC  9680               	dw	38528
   181  007CBE  0098               	dw	152
   182  007CC0  E100               	dw	57600
   183  007CC2  05F5               	dw	1525
   184  007CC4  CA00               	dw	51712
   185  007CC6  3B9A               	dw	15258
   186  007CC8                     __end_of_dpowers:
   187                           	opt stack 0
   188  007CC8                     _pow10:
   189                           	opt stack 0
   190  007CC8  0001               	dw	1
   191  007CCA  0000               	dw	0
   192  007CCC  000A               	dw	10
   193  007CCE  0000               	dw	0
   194  007CD0  0064               	dw	100
   195  007CD2  0000               	dw	0
   196  007CD4  03E8               	dw	1000
   197  007CD6  0000               	dw	0
   198  007CD8  2710               	dw	10000
   199  007CDA  0000               	dw	0
   200  007CDC  86A0               	dw	34464
   201  007CDE  0001               	dw	1
   202  007CE0  4240               	dw	16960
   203  007CE2  000F               	dw	15
   204  007CE4  9680               	dw	38528
   205  007CE6  0098               	dw	152
   206  007CE8  E100               	dw	57600
   207  007CEA  05F5               	dw	1525
   208  007CEC  CA00               	dw	51712
   209  007CEE  3B9A               	dw	15258
   210  007CF0                     __end_of_pow10:
   211                           	opt stack 0
   212  007CF0                     __npowers_:
   213                           	opt stack 0
   214  007CF0  00                 	db	0
   215  007CF1  80                 	db	128
   216  007CF2  3F                 	db	63
   217  007CF3  CD                 	db	205
   218  007CF4  CC                 	db	204
   219  007CF5  3D                 	db	61
   220  007CF6  D7                 	db	215
   221  007CF7  23                 	db	35
   222  007CF8  3C                 	db	60
   223  007CF9  12                 	db	18
   224  007CFA  83                 	db	131
   225  007CFB  3A                 	db	58
   226  007CFC  B7                 	db	183
   227  007CFD  D1                 	db	209
   228  007CFE  38                 	db	56
   229  007CFF  C6                 	db	198
   230  007D00  27                 	db	39
   231  007D01  37                 	db	55
   232  007D02  38                 	db	56
   233  007D03  86                 	db	134
   234  007D04  35                 	db	53
   235  007D05  C0                 	db	192
   236  007D06  D6                 	db	214
   237  007D07  33                 	db	51
   238  007D08  CC                 	db	204
   239  007D09  2B                 	db	43
   240  007D0A  32                 	db	50
   241  007D0B  70                 	db	112
   242  007D0C  89                 	db	137
   243  007D0D  30                 	db	48
   244  007D0E  E7                 	db	231
   245  007D0F  DB                 	db	219
   246  007D10  2E                 	db	46
   247  007D11  E5                 	db	229
   248  007D12  3C                 	db	60
   249  007D13  1E                 	db	30
   250  007D14  42                 	db	66
   251  007D15  A2                 	db	162
   252  007D16  0D                 	db	13
   253  007D17                     __end_of__npowers_:
   254                           	opt stack 0
   255  007D17                     __powers_:
   256                           	opt stack 0
   257  007D17  00                 	db	0
   258  007D18  80                 	db	128
   259  007D19  3F                 	db	63
   260  007D1A  00                 	db	0
   261  007D1B  20                 	db	32
   262  007D1C  41                 	db	65
   263  007D1D  00                 	db	0
   264  007D1E  C8                 	db	200
   265  007D1F  42                 	db	66
   266  007D20  00                 	db	0
   267  007D21  7A                 	db	122
   268  007D22  44                 	db	68
   269  007D23  40                 	db	64
   270  007D24  1C                 	db	28
   271  007D25  46                 	db	70
   272  007D26  50                 	db	80
   273  007D27  C3                 	db	195
   274  007D28  47                 	db	71
   275  007D29  24                 	db	36
   276  007D2A  74                 	db	116
   277  007D2B  49                 	db	73
   278  007D2C  97                 	db	151
   279  007D2D  18                 	db	24
   280  007D2E  4B                 	db	75
   281  007D2F  BC                 	db	188
   282  007D30  BE                 	db	190
   283  007D31  4C                 	db	76
   284  007D32  6B                 	db	107
   285  007D33  6E                 	db	110
   286  007D34  4E                 	db	78
   287  007D35  03                 	db	3
   288  007D36  15                 	db	21
   289  007D37  50                 	db	80
   290  007D38  79                 	db	121
   291  007D39  AD                 	db	173
   292  007D3A  60                 	db	96
   293  007D3B  F3                 	db	243
   294  007D3C  49                 	db	73
   295  007D3D  71                 	db	113
   296  007D3E                     __end_of__powers_:
   297                           	opt stack 0
   298  007D3E                     _dow:
   299                           	opt stack 0
   300  007D3E  53                 	db	83
   301  007D3F  6F                 	db	111
   302  007D40  6E                 	db	110
   303  007D41  00                 	db	0
   304  007D42  4D                 	db	77
   305  007D43  6F                 	db	111
   306  007D44  6E                 	db	110
   307  007D45  00                 	db	0
   308  007D46  44                 	db	68
   309  007D47  65                 	db	101
   310  007D48  69                 	db	105
   311  007D49  00                 	db	0
   312  007D4A  4D                 	db	77
   313  007D4B  69                 	db	105
   314  007D4C  74                 	db	116
   315  007D4D  00                 	db	0
   316  007D4E  44                 	db	68
   317  007D4F  6F                 	db	111
   318  007D50  6E                 	db	110
   319  007D51  00                 	db	0
   320  007D52  46                 	db	70
   321  007D53  72                 	db	114
   322  007D54  69                 	db	105
   323  007D55  00                 	db	0
   324  007D56  53                 	db	83
   325  007D57  61                 	db	97
   326  007D58  6D                 	db	109
   327  007D59  00                 	db	0
   328  007D5A                     __end_of_dow:
   329                           	opt stack 0
   330  0000                     _ADRES	set	4035
   331  0000                     _TMR0	set	4054
   332  0000                     _TMR1	set	4046
   333  0000                     _ADCON0	set	4034
   334  0000                     _ADCON1	set	4033
   335  0000                     _ADCON2	set	4032
   336  0000                     _EEADR	set	4009
   337  0000                     _EECON1	set	4006
   338  0000                     _EECON2	set	4007
   339  0000                     _EEDATA	set	4008
   340  0000                     _LATA	set	3977
   341  0000                     _LATB	set	3978
   342  0000                     _LATC	set	3979
   343  0000                     _PORTB	set	3969
   344  0000                     _T0CON	set	4053
   345  0000                     _T1CON	set	4045
   346  0000                     _T2CON	set	4042
   347  0000                     _TMR2	set	4044
   348  0000                     _TRISA	set	3986
   349  0000                     _TRISB	set	3987
   350  0000                     _TRISC	set	3988
   351  0000                     _GIE	set	32663
   352  0000                     _GO	set	32273
   353  0000                     _IPEN	set	32391
   354  0000                     _LATA1	set	31817
   355  0000                     _LATA3	set	31819
   356  0000                     _LATA4	set	31820
   357  0000                     _LATA5	set	31821
   358  0000                     _LATC0	set	31832
   359  0000                     _LATC6	set	31838
   360  0000                     _LATC7	set	31839
   361  0000                     _PEIE	set	32662
   362  0000                     _RD	set	32048
   363  0000                     _TMR0IE	set	32661
   364  0000                     _TMR0IF	set	32658
   365  0000                     _TMR0ON	set	32431
   366  0000                     _TMR1IE	set	31976
   367  0000                     _TMR1IF	set	31984
   368  0000                     _TMR1ON	set	32360
   369  0000                     _TMR2IE	set	31977
   370  0000                     _TMR2IF	set	31985
   371  0000                     _TMR2ON	set	32338
   372  0000                     _TRISA0	set	31888
   373  0000                     _TRISA1	set	31889
   374  0000                     _TRISA2	set	31890
   375  0000                     _TRISA3	set	31891
   376  0000                     _TRISA4	set	31892
   377  0000                     _WR	set	32049
   378  0000                     _WREN	set	32050
   379  0000                     _nRBPU	set	32655
   380  007D5A                     __stringdata:
   381                           	opt stack 0
   382  007D5A                     STR_6:
   383  007D5A  20                 	db	32
   384  007D5B  20                 	db	32
   385  007D5C  25                 	db	37
   386  007D5D  30                 	db	48	;'0'
   387  007D5E  32                 	db	50	;'2'
   388  007D5F  64                 	db	100	;'d'
   389  007D60  2E                 	db	46
   390  007D61  25                 	db	37
   391  007D62  30                 	db	48	;'0'
   392  007D63  32                 	db	50	;'2'
   393  007D64  64                 	db	100	;'d'
   394  007D65  2E                 	db	46
   395  007D66  25                 	db	37
   396  007D67  30                 	db	48	;'0'
   397  007D68  32                 	db	50	;'2'
   398  007D69  64                 	db	100	;'d'
   399  007D6A  00                 	db	0
   400  007D6B                     STR_5:
   401  007D6B  25                 	db	37
   402  007D6C  30                 	db	48	;'0'
   403  007D6D  32                 	db	50	;'2'
   404  007D6E  64                 	db	100	;'d'
   405  007D6F  2D                 	db	45
   406  007D70  25                 	db	37
   407  007D71  30                 	db	48	;'0'
   408  007D72  32                 	db	50	;'2'
   409  007D73  64                 	db	100	;'d'
   410  007D74  2D                 	db	45
   411  007D75  25                 	db	37
   412  007D76  30                 	db	48	;'0'
   413  007D77  32                 	db	50	;'2'
   414  007D78  64                 	db	100	;'d'
   415  007D79  00                 	db	0
   416  007D7A                     STR_8:
   417  007D7A  25                 	db	37
   418  007D7B  63                 	db	99	;'c'
   419  007D7C  25                 	db	37
   420  007D7D  63                 	db	99	;'c'
   421  007D7E  20                 	db	32
   422  007D7F  25                 	db	37
   423  007D80  30                 	db	48	;'0'
   424  007D81  32                 	db	50	;'2'
   425  007D82  64                 	db	100	;'d'
   426  007D83  2E                 	db	46
   427  007D84  25                 	db	37
   428  007D85  30                 	db	48	;'0'
   429  007D86  32                 	db	50	;'2'
   430  007D87  64                 	db	100	;'d'
   431  007D88  00                 	db	0
   432  007D89                     STR_4:
   433  007D89  25                 	db	37
   434  007D8A  73                 	db	115	;'s'
   435  007D8B  20                 	db	32
   436  007D8C  25                 	db	37
   437  007D8D  30                 	db	48	;'0'
   438  007D8E  32                 	db	50	;'2'
   439  007D8F  64                 	db	100	;'d'
   440  007D90  2E                 	db	46
   441  007D91  25                 	db	37
   442  007D92  30                 	db	48	;'0'
   443  007D93  32                 	db	50	;'2'
   444  007D94  64                 	db	100	;'d'
   445  007D95  00                 	db	0
   446  007D96                     STR_19:
   447  007D96  28                 	db	40
   448  007D97  6E                 	db	110	;'n'
   449  007D98  75                 	db	117	;'u'
   450  007D99  6C                 	db	108	;'l'
   451  007D9A  6C                 	db	108	;'l'
   452  007D9B  29                 	db	41
   453  007D9C  00                 	db	0
   454  007D9D                     STR_14:
   455  007D9D  20                 	db	32
   456  007D9E  20                 	db	32
   457  007D9F  20                 	db	32
   458  007DA0  20                 	db	32
   459  007DA1  00                 	db	0
   460  007DA2                     STR_13:
   461  007DA2  25                 	db	37
   462  007DA3  63                 	db	99	;'c'
   463  007DA4  25                 	db	37
   464  007DA5  63                 	db	99	;'c'
   465  007DA6  00                 	db	0
   466  007DA7  25                 	db	37
   467  007DA8  2E                 	db	46
   468  007DA9  2A                 	db	42
   469  007DAA  66                 	db	102	;'f'
   470  007DAB  00                 	db	0
   471  007DAC  25                 	db	37
   472  007DAD  2A                 	db	42
   473  007DAE  6C                 	db	108	;'l'
   474  007DAF  69                 	db	105	;'i'
   475  007DB0  00                 	db	0
   476  007DB1                     STR_18:
   477  007DB1  25                 	db	37
   478  007DB2  2A                 	db	42
   479  007DB3  66                 	db	102	;'f'
   480  007DB4  00                 	db	0
   481  007DB5                     STR_15:
   482  007DB5  45                 	db	69	;'E'
   483  007DB6  52                 	db	82	;'R'
   484  007DB7  52                 	db	82	;'R'
   485  007DB8  00                 	db	0
   486  007DB9                     STR_16:
   487  007DB9  2A                 	db	42
   488  007DBA  43                 	db	67	;'C'
   489  007DBB  00                 	db	0
   490  007DBC                     STR_17:
   491  007DBC  2A                 	db	42
   492  007DBD  46                 	db	70	;'F'
   493  007DBE  00                 	db	0
   494  007DBF                     __end_of__stringdata:
   495                           	opt stack 0
   496                           
   497                           ; #config settings
   498  007DBF  00                 	db	0	; dummy byte at the end
   499  0000                     
   500                           	psect	nvBANK0
   501  0000E5                     __pnvBANK0:
   502                           	opt stack 0
   503  0000E5                     _rtcMenu:
   504                           	opt stack 0
   505  0000E5                     	ds	5
   506                           
   507                           	psect	cinit
   508  004468                     __pcinit:
   509                           	opt stack 0
   510  004468                     start_initialization:
   511                           	opt stack 0
   512  004468                     __initialization:
   513                           	opt stack 0
   514                           
   515                           ; Clear objects allocated to BANK1 (47 bytes)
   516  004468  EE01  F000         	lfsr	0,__pbssBANK1
   517  00446C  0E2F               	movlw	47
   518  00446E                     clear_0:
   519  00446E  6AEE               	clrf	postinc0,c
   520  004470  06E8               	decf	wreg,f,c
   521  004472  E1FD               	bnz	clear_0
   522                           
   523                           ; Clear objects allocated to BANK0 (61 bytes)
   524  004474  EE00  F0A8         	lfsr	0,__pbssBANK0
   525  004478  0E3D               	movlw	61
   526  00447A                     clear_1:
   527  00447A  6AEE               	clrf	postinc0,c
   528  00447C  06E8               	decf	wreg,f,c
   529  00447E  E1FD               	bnz	clear_1
   530                           
   531                           ; Clear objects allocated to COMRAM (1 bytes)
   532  004480  6A5F               	clrf	__pbssCOMRAM& (0+255),c
   533                           
   534                           ; Initialize objects allocated to BANK1 (27 bytes)
   535                           ; load TBLPTR registers with __pidataBANK1
   536  004482  0E44               	movlw	low __pidataBANK1
   537  004484  6EF6               	movwf	tblptrl,c
   538  004486  0E46               	movlw	high __pidataBANK1
   539  004488  6EF7               	movwf	tblptrh,c
   540  00448A  0E00               	movlw	low (__pidataBANK1 shr (0+16))
   541  00448C  6EF8               	movwf	tblptru,c
   542  00448E  EE01  F02F         	lfsr	0,__pdataBANK1
   543  004492  EE10 F01B          	lfsr	1,27
   544  004496                     copy_data0:
   545  004496  0009               	tblrd		*+
   546  004498  CFF5 FFEE          	movff	tablat,postinc0
   547  00449C  50E5               	movf	postdec1,w,c
   548  00449E  50E1               	movf	fsr1l,w,c
   549  0044A0  E1FA               	bnz	copy_data0
   550  0044A2                     end_of_initialization:
   551                           	opt stack 0
   552  0044A2                     __end_of__initialization:
   553                           	opt stack 0
   554  0044A2  0E00               	movlw	low (__Lmediumconst shr (0+16))
   555  0044A4  6EF8               	movwf	tblptru,c
   556  0044A6  0100               	movlb	0
   557  0044A8  EFC6  F021         	goto	_main	;jump to C main() function
   558                           tblptru	equ	0xFF8
   559                           tblptrh	equ	0xFF7
   560                           tblptrl	equ	0xFF6
   561                           tablat	equ	0xFF5
   562                           postinc0	equ	0xFEE
   563                           wreg	equ	0xFE8
   564                           postdec1	equ	0xFE5
   565                           fsr1l	equ	0xFE1
   566                           
   567                           	psect	bssCOMRAM
   568  00005F                     __pbssCOMRAM:
   569                           	opt stack 0
   570  00005F                     _oldLATB:
   571                           	opt stack 0
   572  00005F                     	ds	1
   573                           tblptru	equ	0xFF8
   574                           tblptrh	equ	0xFF7
   575                           tblptrl	equ	0xFF6
   576                           tablat	equ	0xFF5
   577                           postinc0	equ	0xFEE
   578                           wreg	equ	0xFE8
   579                           postdec1	equ	0xFE5
   580                           fsr1l	equ	0xFE1
   581                           
   582                           	psect	bssBANK0
   583  0000A8                     __pbssBANK0:
   584                           	opt stack 0
   585  0000A8                     _date:
   586                           	opt stack 0
   587  0000A8                     	ds	9
   588  0000B1                     _tmr0BigCounts:
   589                           	opt stack 0
   590  0000B1                     	ds	4
   591  0000B5                     _waitcnt:
   592                           	opt stack 0
   593  0000B5                     	ds	4
   594  0000B9                     _temp:
   595                           	opt stack 0
   596  0000B9                     	ds	3
   597  0000BC                     _menu:
   598                           	opt stack 0
   599  0000BC                     	ds	2
   600  0000BE                     _rtc_big_ticks:
   601                           	opt stack 0
   602  0000BE                     	ds	2
   603  0000C0                     _rtc_small_ticks:
   604                           	opt stack 0
   605  0000C0                     	ds	2
   606  0000C2                     _tmr2_count:
   607                           	opt stack 0
   608  0000C2                     	ds	2
   609  0000C4                     printRTC@str:
   610                           	opt stack 0
   611  0000C4                     	ds	15
   612  0000D3                     _screen:
   613                           	opt stack 0
   614  0000D3                     	ds	13
   615  0000E0                     _tempMenu:
   616                           	opt stack 0
   617  0000E0                     	ds	5
   618                           tblptru	equ	0xFF8
   619                           tblptrh	equ	0xFF7
   620                           tblptrl	equ	0xFF6
   621                           tablat	equ	0xFF5
   622                           postinc0	equ	0xFEE
   623                           wreg	equ	0xFE8
   624                           postdec1	equ	0xFE5
   625                           fsr1l	equ	0xFE1
   626                           
   627                           	psect	bssBANK1
   628  000100                     __pbssBANK1:
   629                           	opt stack 0
   630  000100                     _waitCnt:
   631                           	opt stack 0
   632  000100                     	ds	32
   633  000120                     writeFloat@F5135:
   634                           	opt stack 0
   635  000120                     	ds	15
   636                           tblptru	equ	0xFF8
   637                           tblptrh	equ	0xFF7
   638                           tblptrl	equ	0xFF6
   639                           tablat	equ	0xFF5
   640                           postinc0	equ	0xFEE
   641                           wreg	equ	0xFE8
   642                           postdec1	equ	0xFE5
   643                           fsr1l	equ	0xFE1
   644                           
   645                           	psect	dataBANK1
   646  00012F                     __pdataBANK1:
   647                           	opt stack 0
   648  00012F                     writeLong@F5131:
   649                           	opt stack 0
   650  00012F                     	ds	15
   651  00013E                     _oldTemps:
   652                           	opt stack 0
   653  00013E                     	ds	12
   654                           tblptru	equ	0xFF8
   655                           tblptrh	equ	0xFF7
   656                           tblptrl	equ	0xFF6
   657                           tablat	equ	0xFF5
   658                           postinc0	equ	0xFEE
   659                           wreg	equ	0xFE8
   660                           postdec1	equ	0xFE5
   661                           fsr1l	equ	0xFE1
   662                           
   663                           	psect	cstackBANK1
   664  00014A                     __pcstackBANK1:
   665                           	opt stack 0
   666  00014A                     ??_loadTime:
   667  00014A                     setBrightness@bright:
   668                           	opt stack 0
   669  00014A                     setTest@state:
   670                           	opt stack 0
   671                           
   672                           ; 1 bytes @ 0x0
   673  00014A                     	ds	1
   674  00014B                     
   675                           ; 0 bytes @ 0x1
   676  00014B                     	ds	1
   677  00014C                     loadTime@cnt:
   678                           	opt stack 0
   679                           
   680                           ; 1 bytes @ 0x2
   681  00014C                     	ds	1
   682  00014D                     loadTime@newDate:
   683                           	opt stack 0
   684                           
   685                           ; 9 bytes @ 0x3
   686  00014D                     	ds	9
   687  000156                     loadTime@data:
   688                           	opt stack 0
   689                           
   690                           ; 1 bytes @ 0xC
   691  000156                     	ds	1
   692  000157                     
   693                           ; 2 bytes @ 0xD
   694  000157                     	ds	2
   695  000159                     
   696                           ; 3 bytes @ 0xF
   697  000159                     	ds	3
   698  00015C                     main@cnt:
   699                           	opt stack 0
   700                           
   701                           ; 4 bytes @ 0x12
   702  00015C                     	ds	4
   703                           tblptru	equ	0xFF8
   704                           tblptrh	equ	0xFF7
   705                           tblptrl	equ	0xFF6
   706                           tablat	equ	0xFF5
   707                           postinc0	equ	0xFEE
   708                           wreg	equ	0xFE8
   709                           postdec1	equ	0xFE5
   710                           fsr1l	equ	0xFE1
   711                           
   712                           	psect	cstackBANK0
   713  000060                     __pcstackBANK0:
   714                           	opt stack 0
   715  000060                     _sprintf$1314:
   716                           	opt stack 0
   717                           
   718                           ; 3 bytes @ 0x0
   719  000060                     	ds	3
   720  000063                     _sprintf$749:
   721                           	opt stack 0
   722                           
   723                           ; 4 bytes @ 0x3
   724  000063                     	ds	4
   725  000067                     sprintf@vd:
   726                           	opt stack 0
   727                           
   728                           ; 4 bytes @ 0x7
   729  000067                     	ds	4
   730  00006B                     sprintf@vd_751:
   731                           	opt stack 0
   732                           
   733                           ; 4 bytes @ 0xB
   734  00006B                     	ds	4
   735  00006F                     sprintf@integ:
   736                           	opt stack 0
   737                           
   738                           ; 3 bytes @ 0xF
   739  00006F                     	ds	3
   740  000072                     sprintf@ap:
   741                           	opt stack 0
   742                           
   743                           ; 2 bytes @ 0x12
   744  000072                     	ds	2
   745  000074                     sprintf@exp:
   746                           	opt stack 0
   747                           
   748                           ; 2 bytes @ 0x14
   749  000074                     	ds	2
   750  000076                     sprintf@flag:
   751                           	opt stack 0
   752                           
   753                           ; 2 bytes @ 0x16
   754  000076                     	ds	2
   755  000078                     sprintf@fval:
   756                           	opt stack 0
   757                           
   758                           ; 3 bytes @ 0x18
   759  000078                     	ds	3
   760  00007B                     sprintf@width:
   761                           	opt stack 0
   762                           
   763                           ; 2 bytes @ 0x1B
   764  00007B                     	ds	2
   765  00007D                     sprintf@prec:
   766                           	opt stack 0
   767                           
   768                           ; 2 bytes @ 0x1D
   769  00007D                     	ds	2
   770  00007F                     sprintf@c:
   771                           	opt stack 0
   772                           
   773                           ; 1 bytes @ 0x1F
   774  00007F                     	ds	1
   775  000080                     sprintf@_val:
   776                           	opt stack 0
   777                           
   778                           ; 4 bytes @ 0x20
   779  000080                     	ds	4
   780  000084                     printTemp@str:
   781                           	opt stack 0
   782                           
   783                           ; 15 bytes @ 0x24
   784  000084                     	ds	15
   785  000093                     _printTemp$1310:
   786                           	opt stack 0
   787                           
   788                           ; 4 bytes @ 0x33
   789  000093                     	ds	4
   790  000097                     printTemp@bits:
   791                           	opt stack 0
   792                           
   793                           ; 1 bytes @ 0x37
   794  000097                     	ds	1
   795  000098                     printTemp@units:
   796                           	opt stack 0
   797                           
   798                           ; 1 bytes @ 0x38
   799  000098                     	ds	1
   800  000099                     printTemp@digits:
   801                           	opt stack 0
   802                           
   803                           ; 1 bytes @ 0x39
   804  000099                     	ds	1
   805  00009A                     ??_isr:
   806                           
   807                           ; 0 bytes @ 0x3A
   808  00009A                     	ds	14
   809                           tblptru	equ	0xFF8
   810                           tblptrh	equ	0xFF7
   811                           tblptrl	equ	0xFF6
   812                           tablat	equ	0xFF5
   813                           postinc0	equ	0xFEE
   814                           wreg	equ	0xFE8
   815                           postdec1	equ	0xFE5
   816                           fsr1l	equ	0xFE1
   817                           
   818                           	psect	cstackCOMRAM
   819  000001                     __pcstackCOMRAM:
   820                           	opt stack 0
   821  000001                     ??_rotate:
   822  000001                     ??_isdigit:
   823  000001                     ??_getFontChar:
   824  000001                     ?___awmod:
   825                           	opt stack 0
   826  000001                     ?___lwmod:
   827                           	opt stack 0
   828  000001                     ?___ftpack:
   829                           	opt stack 0
   830  000001                     ?___ftneg:
   831                           	opt stack 0
   832  000001                     ?_hibit:
   833                           	opt stack 0
   834  000001                     ?_lowbit:
   835                           	opt stack 0
   836  000001                     ?__tdiv_to_l_:
   837                           	opt stack 0
   838  000001                     ?__div_to_l_:
   839                           	opt stack 0
   840  000001                     ?___lldiv:
   841                           	opt stack 0
   842  000001                     ___awmod@dividend:
   843                           	opt stack 0
   844  000001                     ___lwmod@dividend:
   845                           	opt stack 0
   846  000001                     __div_to_l_@f1:
   847                           	opt stack 0
   848  000001                     ___ftpack@arg:
   849                           	opt stack 0
   850  000001                     __tdiv_to_l_@f1:
   851                           	opt stack 0
   852  000001                     ___ftge@ff1:
   853                           	opt stack 0
   854  000001                     ___ftneg@f1:
   855                           	opt stack 0
   856  000001                     wait@count:
   857                           	opt stack 0
   858  000001                     countBits@num:
   859                           	opt stack 0
   860  000001                     hibit@x:
   861                           	opt stack 0
   862  000001                     lowbit@x:
   863                           	opt stack 0
   864  000001                     ___lldiv@dividend:
   865                           	opt stack 0
   866  000001                     saveTime@date:
   867                           	opt stack 0
   868                           
   869                           ; 9 bytes @ 0x0
   870  000001                     	ds	1
   871  000002                     _isdigit$1032:
   872                           	opt stack 0
   873                           
   874                           ; 1 bytes @ 0x1
   875  000002                     	ds	1
   876  000003                     isdigit@c:
   877                           	opt stack 0
   878  000003                     ___awmod@divisor:
   879                           	opt stack 0
   880  000003                     ___lwmod@divisor:
   881                           	opt stack 0
   882                           
   883                           ; 2 bytes @ 0x2
   884  000003                     	ds	1
   885  000004                     rotate@seg:
   886                           	opt stack 0
   887  000004                     ___ftpack@exp:
   888                           	opt stack 0
   889  000004                     __div_to_l_@f2:
   890                           	opt stack 0
   891  000004                     __tdiv_to_l_@f2:
   892                           	opt stack 0
   893  000004                     ___ftge@ff2:
   894                           	opt stack 0
   895                           
   896                           ; 3 bytes @ 0x3
   897  000004                     	ds	1
   898  000005                     ??_hibit:
   899  000005                     ??_lowbit:
   900  000005                     getFontChar@ch:
   901                           	opt stack 0
   902  000005                     rotate@ret:
   903                           	opt stack 0
   904  000005                     countBits@ret:
   905                           	opt stack 0
   906  000005                     ___awmod@counter:
   907                           	opt stack 0
   908  000005                     ___ftpack@sign:
   909                           	opt stack 0
   910  000005                     ___lwmod@counter:
   911                           	opt stack 0
   912  000005                     ___lldiv@divisor:
   913                           	opt stack 0
   914                           
   915                           ; 4 bytes @ 0x4
   916  000005                     	ds	1
   917  000006                     ??___ftpack:
   918  000006                     rotate@cnt:
   919                           	opt stack 0
   920  000006                     ___awmod@sign:
   921                           	opt stack 0
   922  000006                     daysOfMonth@year:
   923                           	opt stack 0
   924                           
   925                           ; 2 bytes @ 0x5
   926  000006                     	ds	1
   927  000007                     ??_advState:
   928  000007                     ??__tdiv_to_l_:
   929  000007                     ??__div_to_l_:
   930  000007                     ??___ftge:
   931  000007                     ?___awdiv:
   932                           	opt stack 0
   933  000007                     spi@data:
   934                           	opt stack 0
   935  000007                     ___awdiv@dividend:
   936                           	opt stack 0
   937                           
   938                           ; 2 bytes @ 0x6
   939  000007                     	ds	1
   940  000008                     ??_spi:
   941  000008                     ??_daysOfMonth:
   942  000008                     hibit@log2Val:
   943                           	opt stack 0
   944  000008                     lowbit@log2Val:
   945                           	opt stack 0
   946                           
   947                           ; 4 bytes @ 0x7
   948  000008                     	ds	1
   949  000009                     ?___lltoft:
   950                           	opt stack 0
   951  000009                     ?___lwtoft:
   952                           	opt stack 0
   953  000009                     ___awdiv@divisor:
   954                           	opt stack 0
   955  000009                     ___lwtoft@c:
   956                           	opt stack 0
   957  000009                     ___lldiv@quotient:
   958                           	opt stack 0
   959  000009                     ___lltoft@c:
   960                           	opt stack 0
   961                           
   962                           ; 4 bytes @ 0x8
   963  000009                     	ds	1
   964  00000A                     __tdiv_to_l_@quot:
   965                           	opt stack 0
   966                           
   967                           ; 4 bytes @ 0x9
   968  00000A                     	ds	1
   969  00000B                     saveTime@cnt:
   970                           	opt stack 0
   971  00000B                     daysOfMonth@month:
   972                           	opt stack 0
   973  00000B                     ___awdiv@counter:
   974                           	opt stack 0
   975  00000B                     spi@send:
   976                           	opt stack 0
   977  00000B                     __div_to_l_@quot:
   978                           	opt stack 0
   979                           
   980                           ; 4 bytes @ 0xA
   981  00000B                     	ds	1
   982  00000C                     ?_log2:
   983                           	opt stack 0
   984  00000C                     tick@val:
   985                           	opt stack 0
   986  00000C                     ___awdiv@sign:
   987                           	opt stack 0
   988  00000C                     log2@num:
   989                           	opt stack 0
   990                           
   991                           ; 4 bytes @ 0xB
   992  00000C                     	ds	1
   993  00000D                     ??___lltoft:
   994  00000D                     spi@addr:
   995                           	opt stack 0
   996  00000D                     tick@save_t:
   997                           	opt stack 0
   998  00000D                     ___lldiv@counter:
   999                           	opt stack 0
  1000  00000D                     ___awdiv@quotient:
  1001                           	opt stack 0
  1002                           
  1003                           ; 2 bytes @ 0xC
  1004  00000D                     	ds	1
  1005  00000E                     ?___llmod:
  1006                           	opt stack 0
  1007  00000E                     spi@cnt:
  1008                           	opt stack 0
  1009  00000E                     tick@ret:
  1010                           	opt stack 0
  1011  00000E                     __tdiv_to_l_@cntr:
  1012                           	opt stack 0
  1013  00000E                     ___llmod@dividend:
  1014                           	opt stack 0
  1015                           
  1016                           ; 4 bytes @ 0xD
  1017  00000E                     	ds	1
  1018  00000F                     ?___wmul:
  1019                           	opt stack 0
  1020  00000F                     __div_to_l_@cntr:
  1021                           	opt stack 0
  1022  00000F                     __tdiv_to_l_@exp1:
  1023                           	opt stack 0
  1024  00000F                     ___wmul@multiplier:
  1025                           	opt stack 0
  1026                           
  1027                           ; 2 bytes @ 0xE
  1028  00000F                     	ds	1
  1029  000010                     __div_to_l_@exp1:
  1030                           	opt stack 0
  1031  000010                     log2@log2Val:
  1032                           	opt stack 0
  1033                           
  1034                           ; 4 bytes @ 0xF
  1035  000010                     	ds	1
  1036  000011                     ___lltoft@exp:
  1037                           	opt stack 0
  1038  000011                     ___wmul@multiplicand:
  1039                           	opt stack 0
  1040                           
  1041                           ; 2 bytes @ 0x10
  1042  000011                     	ds	1
  1043  000012                     ___llmod@divisor:
  1044                           	opt stack 0
  1045                           
  1046                           ; 4 bytes @ 0x11
  1047  000012                     	ds	1
  1048  000013                     ___wmul@product:
  1049                           	opt stack 0
  1050                           
  1051                           ; 2 bytes @ 0x12
  1052  000013                     	ds	1
  1053  000014                     writeDigit@segs:
  1054                           	opt stack 0
  1055                           
  1056                           ; 1 bytes @ 0x13
  1057  000014                     	ds	1
  1058  000015                     ??_writeDigit:
  1059  000015                     ?___ftmul:
  1060                           	opt stack 0
  1061  000015                     writeChar@ch:
  1062                           	opt stack 0
  1063  000015                     ___ftmul@f1:
  1064                           	opt stack 0
  1065                           
  1066                           ; 3 bytes @ 0x14
  1067  000015                     	ds	1
  1068  000016                     ??_writeChar:
  1069  000016                     ___llmod@counter:
  1070                           	opt stack 0
  1071                           
  1072                           ; 1 bytes @ 0x15
  1073  000016                     	ds	1
  1074  000017                     dayOfWeek@month:
  1075                           	opt stack 0
  1076                           
  1077                           ; 1 bytes @ 0x16
  1078  000017                     	ds	1
  1079  000018                     dayOfWeek@day:
  1080                           	opt stack 0
  1081  000018                     ___ftmul@f2:
  1082                           	opt stack 0
  1083                           
  1084                           ; 3 bytes @ 0x17
  1085  000018                     	ds	1
  1086  000019                     ??_dayOfWeek:
  1087  000019                     writeDigit@digit:
  1088                           	opt stack 0
  1089                           
  1090                           ; 1 bytes @ 0x18
  1091  000019                     	ds	1
  1092  00001A                     writeDigit@dig:
  1093                           	opt stack 0
  1094  00001A                     writeChar@dig:
  1095                           	opt stack 0
  1096                           
  1097                           ; 1 bytes @ 0x19
  1098  00001A                     	ds	1
  1099  00001B                     ??___ftmul:
  1100  00001B                     writeDigit@cnt:
  1101                           	opt stack 0
  1102  00001B                     writeChar@digit:
  1103                           	opt stack 0
  1104                           
  1105                           ; 1 bytes @ 0x1A
  1106  00001B                     	ds	1
  1107  00001C                     ??_update:
  1108  00001C                     writeString@string:
  1109                           	opt stack 0
  1110                           
  1111                           ; 2 bytes @ 0x1B
  1112  00001C                     	ds	1
  1113  00001D                     dayOfWeek@year:
  1114                           	opt stack 0
  1115                           
  1116                           ; 1 bytes @ 0x1C
  1117  00001D                     	ds	1
  1118  00001E                     ??_writeString:
  1119  00001E                     ___ftmul@exp:
  1120                           	opt stack 0
  1121  00001E                     dayOfWeek@tmp:
  1122                           	opt stack 0
  1123                           
  1124                           ; 4 bytes @ 0x1D
  1125  00001E                     	ds	1
  1126  00001F                     ___ftmul@f3_as_product:
  1127                           	opt stack 0
  1128                           
  1129                           ; 3 bytes @ 0x1E
  1130  00001F                     	ds	2
  1131  000021                     update@cnt:
  1132                           	opt stack 0
  1133                           
  1134                           ; 1 bytes @ 0x20
  1135  000021                     	ds	1
  1136  000022                     ??_checkDST:
  1137  000022                     writeString@bits:
  1138                           	opt stack 0
  1139  000022                     ___ftmul@cntr:
  1140                           	opt stack 0
  1141                           
  1142                           ; 1 bytes @ 0x21
  1143  000022                     	ds	1
  1144  000023                     writeString@digits:
  1145                           	opt stack 0
  1146  000023                     ___ftmul@sign:
  1147                           	opt stack 0
  1148                           
  1149                           ; 1 bytes @ 0x22
  1150  000023                     	ds	1
  1151  000024                     ?___ftdiv:
  1152                           	opt stack 0
  1153  000024                     ?_fround:
  1154                           	opt stack 0
  1155  000024                     ?_scale:
  1156                           	opt stack 0
  1157  000024                     ?___fttol:
  1158                           	opt stack 0
  1159  000024                     writeString@i:
  1160                           	opt stack 0
  1161  000024                     ___ftdiv@f1:
  1162                           	opt stack 0
  1163  000024                     ___fttol@f1:
  1164                           	opt stack 0
  1165                           
  1166                           ; 3 bytes @ 0x23
  1167  000024                     	ds	1
  1168  000025                     writeString@cnt:
  1169                           	opt stack 0
  1170                           
  1171                           ; 1 bytes @ 0x24
  1172  000025                     	ds	1
  1173  000026                     ??_advMenu:
  1174  000026                     
  1175                           ; 0 bytes @ 0x25
  1176  000026                     	ds	1
  1177  000027                     ___ftdiv@f2:
  1178                           	opt stack 0
  1179  000027                     _fround$1312:
  1180                           	opt stack 0
  1181  000027                     _scale$1313:
  1182                           	opt stack 0
  1183                           
  1184                           ; 3 bytes @ 0x26
  1185  000027                     	ds	1
  1186  000028                     ??_buttons:
  1187  000028                     ??___fttol:
  1188  000028                     _checkDST$309:
  1189                           	opt stack 0
  1190                           
  1191                           ; 1 bytes @ 0x27
  1192  000028                     	ds	2
  1193  00002A                     ??___ftdiv:
  1194  00002A                     scale@scl:
  1195                           	opt stack 0
  1196  00002A                     _fround$1311:
  1197                           	opt stack 0
  1198                           
  1199                           ; 3 bytes @ 0x29
  1200  00002A                     	ds	3
  1201  00002D                     fround@prec:
  1202                           	opt stack 0
  1203  00002D                     ___ftdiv@cntr:
  1204                           	opt stack 0
  1205  00002D                     ___fttol@sign1:
  1206                           	opt stack 0
  1207                           
  1208                           ; 1 bytes @ 0x2C
  1209  00002D                     	ds	1
  1210  00002E                     ___ftdiv@f3:
  1211                           	opt stack 0
  1212  00002E                     ___fttol@lval:
  1213                           	opt stack 0
  1214                           
  1215                           ; 4 bytes @ 0x2D
  1216  00002E                     	ds	3
  1217  000031                     ___ftdiv@exp:
  1218                           	opt stack 0
  1219                           
  1220                           ; 1 bytes @ 0x30
  1221  000031                     	ds	1
  1222  000032                     ___ftdiv@sign:
  1223                           	opt stack 0
  1224  000032                     ___fttol@exp1:
  1225                           	opt stack 0
  1226                           
  1227                           ; 1 bytes @ 0x31
  1228  000032                     	ds	1
  1229  000033                     ?___ftadd:
  1230                           	opt stack 0
  1231  000033                     ?___altoft:
  1232                           	opt stack 0
  1233  000033                     ___ftadd@f1:
  1234                           	opt stack 0
  1235  000033                     ___altoft@c:
  1236                           	opt stack 0
  1237                           
  1238                           ; 4 bytes @ 0x32
  1239  000033                     	ds	3
  1240  000036                     ___ftadd@f2:
  1241                           	opt stack 0
  1242                           
  1243                           ; 3 bytes @ 0x35
  1244  000036                     	ds	1
  1245  000037                     ??___altoft:
  1246                           
  1247                           ; 0 bytes @ 0x36
  1248  000037                     	ds	2
  1249  000039                     ??___ftadd:
  1250                           
  1251                           ; 0 bytes @ 0x38
  1252  000039                     	ds	2
  1253  00003B                     ___altoft@exp:
  1254                           	opt stack 0
  1255                           
  1256                           ; 1 bytes @ 0x3A
  1257  00003B                     	ds	1
  1258  00003C                     ___altoft@sign:
  1259                           	opt stack 0
  1260  00003C                     ___ftadd@sign:
  1261                           	opt stack 0
  1262                           
  1263                           ; 1 bytes @ 0x3B
  1264  00003C                     	ds	1
  1265  00003D                     ___ftadd@exp2:
  1266                           	opt stack 0
  1267                           
  1268                           ; 1 bytes @ 0x3C
  1269  00003D                     	ds	1
  1270  00003E                     ___ftadd@exp1:
  1271                           	opt stack 0
  1272                           
  1273                           ; 1 bytes @ 0x3D
  1274  00003E                     	ds	1
  1275  00003F                     ?___ftsub:
  1276                           	opt stack 0
  1277  00003F                     ___ftsub@f1:
  1278                           	opt stack 0
  1279  00003F                     getTemp@oldTempsTemp:
  1280                           	opt stack 0
  1281                           
  1282                           ; 9 bytes @ 0x3E
  1283  00003F                     	ds	3
  1284  000042                     ___ftsub@f2:
  1285                           	opt stack 0
  1286                           
  1287                           ; 3 bytes @ 0x41
  1288  000042                     	ds	3
  1289  000045                     ?_sprintf:
  1290                           	opt stack 0
  1291  000045                     sprintf@sp:
  1292                           	opt stack 0
  1293                           
  1294                           ; 2 bytes @ 0x44
  1295  000045                     	ds	2
  1296  000047                     sprintf@f:
  1297                           	opt stack 0
  1298                           
  1299                           ; 2 bytes @ 0x46
  1300  000047                     	ds	1
  1301  000048                     _getTemp$1309:
  1302                           	opt stack 0
  1303                           
  1304                           ; 3 bytes @ 0x47
  1305  000048                     	ds	3
  1306  00004B                     getTemp@total:
  1307                           	opt stack 0
  1308                           
  1309                           ; 3 bytes @ 0x4A
  1310  00004B                     	ds	3
  1311  00004E                     _getTemp$1307:
  1312                           	opt stack 0
  1313                           
  1314                           ; 3 bytes @ 0x4D
  1315  00004E                     	ds	3
  1316  000051                     ??_sprintf:
  1317  000051                     _getTemp$1308:
  1318                           	opt stack 0
  1319                           
  1320                           ; 3 bytes @ 0x50
  1321  000051                     	ds	3
  1322  000054                     getTemp@tmp:
  1323                           	opt stack 0
  1324                           
  1325                           ; 3 bytes @ 0x53
  1326  000054                     	ds	3
  1327  000057                     ??_printRTC:
  1328  000057                     ??_printTemp:
  1329  000057                     getTemp@cnt:
  1330                           	opt stack 0
  1331                           
  1332                           ; 1 bytes @ 0x56
  1333  000057                     	ds	4
  1334  00005B                     printRTC@bits:
  1335                           	opt stack 0
  1336                           
  1337                           ; 1 bytes @ 0x5A
  1338  00005B                     	ds	1
  1339  00005C                     printRTC@cnt:
  1340                           	opt stack 0
  1341                           
  1342                           ; 1 bytes @ 0x5B
  1343  00005C                     	ds	1
  1344  00005D                     printRTC@digits:
  1345                           	opt stack 0
  1346                           
  1347                           ; 1 bytes @ 0x5C
  1348  00005D                     	ds	1
  1349  00005E                     printRTC@i:
  1350                           	opt stack 0
  1351                           
  1352                           ; 1 bytes @ 0x5D
  1353  00005E                     	ds	1
  1354                           tblptru	equ	0xFF8
  1355                           tblptrh	equ	0xFF7
  1356                           tblptrl	equ	0xFF6
  1357                           tablat	equ	0xFF5
  1358                           postinc0	equ	0xFEE
  1359                           wreg	equ	0xFE8
  1360                           postdec1	equ	0xFE5
  1361                           fsr1l	equ	0xFE1
  1362                           
  1363 ;;
  1364 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1365 ;;
  1366 ;; *************** function _main *****************
  1367 ;; Defined at:
  1368 ;;		line 51 in file "temp-clock_main.c"
  1369 ;; Parameters:    Size  Location     Type
  1370 ;;  argc            2   13[BANK1 ] int 
  1371 ;;  argv            3   15[BANK1 ] PTR PTR unsigned char 
  1372 ;; Auto vars:     Size  Location     Type
  1373 ;;  cnt             4   18[BANK1 ] unsigned long 
  1374 ;; Return value:  Size  Location     Type
  1375 ;;                  2   13[BANK1 ] int 
  1376 ;; Registers used:
  1377 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  1378 ;; Tracked objects:
  1379 ;;		On entry : 0/0
  1380 ;;		On exit  : 0/0
  1381 ;;		Unchanged: 0/0
  1382 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1383 ;;      Params:         0       0       5       0       0       0       0       0       0
  1384 ;;      Locals:         0       0       4       0       0       0       0       0       0
  1385 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1386 ;;      Totals:         0       0       9       0       0       0       0       0       0
  1387 ;;Total ram usage:        9 bytes
  1388 ;; Hardware stack levels required when called:   10
  1389 ;; This function calls:
  1390 ;;		_setup
  1391 ;; This function is called by:
  1392 ;;		Startup code after reset
  1393 ;; This function uses a non-reentrant model
  1394 ;;
  1395                           
  1396                           	psect	text0
  1397  00438C                     __ptext0:
  1398                           	opt stack 0
  1399  00438C                     _main:
  1400                           	opt stack 20
  1401                           
  1402                           ;temp-clock_main.c: 53: setup();
  1403                           
  1404                           ;incstack = 0
  1405  00438C  EC3C  F01F         	call	_setup	;wreg free
  1406  004390                     
  1407                           ;temp-clock_main.c: 54: uint32_t cnt = 0;
  1408  004390  0E00               	movlw	0
  1409  004392  0101               	movlb	1	; () banked
  1410  004394  6F5C               	movwf	main@cnt& (0+255),b
  1411  004396  0E00               	movlw	0
  1412  004398  0101               	movlb	1	; () banked
  1413  00439A  6F5D               	movwf	(main@cnt+1)& (0+255),b
  1414  00439C  0E00               	movlw	0
  1415  00439E  0101               	movlb	1	; () banked
  1416  0043A0  6F5E               	movwf	(main@cnt+2)& (0+255),b
  1417  0043A2  0E00               	movlw	0
  1418  0043A4  0101               	movlb	1	; () banked
  1419  0043A6  6F5F               	movwf	(main@cnt+3)& (0+255),b
  1420  0043A8                     l5766:
  1421                           
  1422                           ; BSR set to: 1
  1423                           ;temp-clock_main.c: 56: {
  1424                           ;temp-clock_main.c: 57: if (cnt++ > 20L)
  1425  0043A8  0E01               	movlw	1
  1426  0043AA  0101               	movlb	1	; () banked
  1427  0043AC  275C               	addwf	main@cnt& (0+255),f,b
  1428  0043AE  0E00               	movlw	0
  1429  0043B0  0101               	movlb	1	; () banked
  1430  0043B2  235D               	addwfc	(main@cnt+1)& (0+255),f,b
  1431  0043B4  0101               	movlb	1	; () banked
  1432  0043B6  235E               	addwfc	(main@cnt+2)& (0+255),f,b
  1433  0043B8  0101               	movlb	1	; () banked
  1434  0043BA  235F               	addwfc	(main@cnt+3)& (0+255),f,b
  1435  0043BC  0E16               	movlw	22
  1436  0043BE  0101               	movlb	1	; () banked
  1437  0043C0  5D5C               	subwf	main@cnt& (0+255),w,b
  1438  0043C2  0E00               	movlw	0
  1439  0043C4  0101               	movlb	1	; () banked
  1440  0043C6  595D               	subwfb	(main@cnt+1)& (0+255),w,b
  1441  0043C8  0E00               	movlw	0
  1442  0043CA  0101               	movlb	1	; () banked
  1443  0043CC  595E               	subwfb	(main@cnt+2)& (0+255),w,b
  1444  0043CE  0E00               	movlw	0
  1445  0043D0  0101               	movlb	1	; () banked
  1446  0043D2  595F               	subwfb	(main@cnt+3)& (0+255),w,b
  1447  0043D4  A0D8               	btfss	status,0,c
  1448  0043D6  D7E8               	goto	l5766
  1449  0043D8  D7DB               	goto	L1
  1450  0043DA                     __end_of_main:
  1451                           	opt stack 0
  1452                           tblptru	equ	0xFF8
  1453                           tblptrh	equ	0xFF7
  1454                           tblptrl	equ	0xFF6
  1455                           tablat	equ	0xFF5
  1456                           postinc0	equ	0xFEE
  1457                           wreg	equ	0xFE8
  1458                           postdec1	equ	0xFE5
  1459                           fsr1l	equ	0xFE1
  1460                           status	equ	0xFD8
  1461                           
  1462 ;; *************** function _setup *****************
  1463 ;; Defined at:
  1464 ;;		line 71 in file "temp-clock_main.c"
  1465 ;; Parameters:    Size  Location     Type
  1466 ;;		None
  1467 ;; Auto vars:     Size  Location     Type
  1468 ;;		None
  1469 ;; Return value:  Size  Location     Type
  1470 ;;		None               void
  1471 ;; Registers used:
  1472 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  1473 ;; Tracked objects:
  1474 ;;		On entry : 0/0
  1475 ;;		On exit  : 0/0
  1476 ;;		Unchanged: 0/0
  1477 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1478 ;;      Params:         0       0       0       0       0       0       0       0       0
  1479 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1480 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1481 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1482 ;;Total ram usage:        0 bytes
  1483 ;; Hardware stack levels used:    1
  1484 ;; Hardware stack levels required when called:    9
  1485 ;; This function calls:
  1486 ;;		_initRTC
  1487 ;;		_initTemp
  1488 ;;		_setupButtons
  1489 ;;		_startDisp
  1490 ;; This function is called by:
  1491 ;;		_main
  1492 ;; This function uses a non-reentrant model
  1493 ;;
  1494                           
  1495                           	psect	text1
  1496  003E78                     __ptext1:
  1497                           	opt stack 0
  1498  003E78                     _setup:
  1499                           	opt stack 20
  1500                           
  1501                           ;temp-clock_main.c: 74: TRISA = 0;
  1502                           
  1503                           ; BSR set to: 1
  1504                           ;incstack = 0
  1505  003E78  0E00               	movlw	0
  1506  003E7A  6E92               	movwf	3986,c	;volatile
  1507                           
  1508                           ;temp-clock_main.c: 75: TRISB = 0;
  1509  003E7C  0E00               	movlw	0
  1510  003E7E  6E93               	movwf	3987,c	;volatile
  1511                           
  1512                           ;temp-clock_main.c: 76: TRISC = 0;
  1513  003E80  0E00               	movlw	0
  1514  003E82  6E94               	movwf	3988,c	;volatile
  1515                           
  1516                           ;temp-clock_main.c: 77: LATA = 0;
  1517  003E84  0E00               	movlw	0
  1518  003E86  6E89               	movwf	3977,c	;volatile
  1519                           
  1520                           ;temp-clock_main.c: 78: LATB = 0;
  1521  003E88  0E00               	movlw	0
  1522  003E8A  6E8A               	movwf	3978,c	;volatile
  1523                           
  1524                           ;temp-clock_main.c: 83: LATA5 = 1;
  1525  003E8C  8A89               	bsf	3977,5,c	;volatile
  1526                           
  1527                           ;temp-clock_main.c: 88: GIE = 1;
  1528  003E8E  8EF2               	bsf	intcon,7,c	;volatile
  1529                           
  1530                           ;temp-clock_main.c: 89: PEIE = 1;
  1531  003E90  8CF2               	bsf	intcon,6,c	;volatile
  1532                           
  1533                           ;temp-clock_main.c: 90: IPEN = 0;
  1534  003E92  9ED0               	bcf	4048,7,c	;volatile
  1535                           
  1536                           ;temp-clock_main.c: 92: startDisp();
  1537  003E94  EC08  F020         	call	_startDisp	;wreg free
  1538                           
  1539                           ;temp-clock_main.c: 93: LATC0 = 1;
  1540  003E98  808B               	bsf	3979,0,c	;volatile
  1541                           
  1542                           ;temp-clock_main.c: 95: initRTC();
  1543  003E9A  EC9C  F021         	call	_initRTC	;wreg free
  1544                           
  1545                           ;temp-clock_main.c: 97: LATC0 = 0;
  1546  003E9E  908B               	bcf	3979,0,c	;volatile
  1547                           
  1548                           ;temp-clock_main.c: 99: initTemp();
  1549  003EA0  EC92  F022         	call	_initTemp	;wreg free
  1550                           
  1551                           ;temp-clock_main.c: 101: setupButtons();
  1552  003EA4  EC45  F023         	call	_setupButtons	;wreg free
  1553                           
  1554                           ;temp-clock_main.c: 106: menu = &rtcMenu;
  1555  003EA8  0100               	movlb	0	; () banked
  1556  003EAA  0E00               	movlw	high _rtcMenu
  1557  003EAC  0100               	movlb	0	; () banked
  1558  003EAE  6FBD               	movwf	(_menu+1)& (0+255),b
  1559  003EB0  0100               	movlb	0	; () banked
  1560  003EB2  0EE5               	movlw	low _rtcMenu
  1561  003EB4  0100               	movlb	0	; () banked
  1562  003EB6  6FBC               	movwf	_menu& (0+255),b
  1563                           
  1564                           ; BSR set to: 0
  1565                           ;temp-clock_main.c: 110: LATA5 = 0;
  1566  003EB8  9A89               	bcf	3977,5,c	;volatile
  1567                           
  1568                           ; BSR set to: 0
  1569                           ;temp-clock_main.c: 113: tmr0BigCounts = 0;
  1570  003EBA  0E00               	movlw	0
  1571  003EBC  0100               	movlb	0	; () banked
  1572  003EBE  6FB1               	movwf	_tmr0BigCounts& (0+255),b
  1573  003EC0  0E00               	movlw	0
  1574  003EC2  0100               	movlb	0	; () banked
  1575  003EC4  6FB2               	movwf	(_tmr0BigCounts+1)& (0+255),b
  1576  003EC6  0E00               	movlw	0
  1577  003EC8  0100               	movlb	0	; () banked
  1578  003ECA  6FB3               	movwf	(_tmr0BigCounts+2)& (0+255),b
  1579  003ECC  0E00               	movlw	0
  1580  003ECE  0100               	movlb	0	; () banked
  1581  003ED0  6FB4               	movwf	(_tmr0BigCounts+3)& (0+255),b
  1582                           
  1583                           ; BSR set to: 0
  1584                           ;temp-clock_main.c: 114: T0CON = (0b00001000);
  1585  003ED2  0E08               	movlw	8
  1586  003ED4  6ED5               	movwf	4053,c	;volatile
  1587                           
  1588                           ; BSR set to: 0
  1589                           ;temp-clock_main.c: 115: TMR0 = (65536-32767);
  1590  003ED6  0E80               	movlw	128
  1591  003ED8  6ED7               	movwf	4055,c	;volatile
  1592  003EDA  0E01               	movlw	1
  1593  003EDC  6ED6               	movwf	4054,c	;volatile
  1594                           
  1595                           ; BSR set to: 0
  1596                           ;temp-clock_main.c: 116: TMR0IF = CLEAR;
  1597  003EDE  94F2               	bcf	intcon,2,c	;volatile
  1598                           
  1599                           ; BSR set to: 0
  1600                           ;temp-clock_main.c: 117: TMR0IE = 1;
  1601  003EE0  8AF2               	bsf	intcon,5,c	;volatile
  1602                           
  1603                           ; BSR set to: 0
  1604                           ;temp-clock_main.c: 118: TMR0ON = 1;
  1605  003EE2  8ED5               	bsf	4053,7,c	;volatile
  1606                           
  1607                           ; BSR set to: 0
  1608                           ;temp-clock_main.c: 121: T1CON = 0b10110000;
  1609  003EE4  0EB0               	movlw	176
  1610  003EE6  6ECD               	movwf	4045,c	;volatile
  1611                           
  1612                           ; BSR set to: 0
  1613                           ;temp-clock_main.c: 122: TMR1 = (65536-16960);
  1614  003EE8  0EBD               	movlw	189
  1615  003EEA  6ECF               	movwf	4047,c	;volatile
  1616  003EEC  0EC0               	movlw	192
  1617  003EEE  6ECE               	movwf	4046,c	;volatile
  1618                           
  1619                           ; BSR set to: 0
  1620                           ;temp-clock_main.c: 123: TMR1IF = CLEAR;
  1621  003EF0  909E               	bcf	3998,0,c	;volatile
  1622                           
  1623                           ; BSR set to: 0
  1624                           ;temp-clock_main.c: 124: TMR1IE = 1;
  1625  003EF2  809D               	bsf	3997,0,c	;volatile
  1626                           
  1627                           ; BSR set to: 0
  1628                           ;temp-clock_main.c: 125: TMR1ON = 1;
  1629  003EF4  80CD               	bsf	4045,0,c	;volatile
  1630                           
  1631                           ; BSR set to: 0
  1632                           ;temp-clock_main.c: 128: T2CON = 0b00000011;
  1633  003EF6  0E03               	movlw	3
  1634  003EF8  6ECA               	movwf	4042,c	;volatile
  1635                           
  1636                           ; BSR set to: 0
  1637                           ;temp-clock_main.c: 129: TMR2 = 0;
  1638  003EFA  0E00               	movlw	0
  1639  003EFC  6ECC               	movwf	4044,c	;volatile
  1640                           
  1641                           ; BSR set to: 0
  1642                           ;temp-clock_main.c: 130: TMR2IF = CLEAR;
  1643  003EFE  929E               	bcf	3998,1,c	;volatile
  1644                           
  1645                           ; BSR set to: 0
  1646                           ;temp-clock_main.c: 131: TMR2IE = 1;
  1647  003F00  829D               	bsf	3997,1,c	;volatile
  1648                           
  1649                           ; BSR set to: 0
  1650                           ;temp-clock_main.c: 132: TMR2ON = 1;
  1651  003F02  84CA               	bsf	4042,2,c	;volatile
  1652                           
  1653                           ; BSR set to: 0
  1654  003F04  0012               	return	
  1655  003F06                     __end_of_setup:
  1656                           	opt stack 0
  1657                           tblptru	equ	0xFF8
  1658                           tblptrh	equ	0xFF7
  1659                           tblptrl	equ	0xFF6
  1660                           tablat	equ	0xFF5
  1661                           intcon	equ	0xFF2
  1662                           postinc0	equ	0xFEE
  1663                           wreg	equ	0xFE8
  1664                           postdec1	equ	0xFE5
  1665                           fsr1l	equ	0xFE1
  1666                           status	equ	0xFD8
  1667                           
  1668 ;; *************** function _startDisp *****************
  1669 ;; Defined at:
  1670 ;;		line 61 in file "disp.c"
  1671 ;; Parameters:    Size  Location     Type
  1672 ;;		None
  1673 ;; Auto vars:     Size  Location     Type
  1674 ;;		None
  1675 ;; Return value:  Size  Location     Type
  1676 ;;		None               void
  1677 ;; Registers used:
  1678 ;;		wreg, status,2, status,0, cstack
  1679 ;; Tracked objects:
  1680 ;;		On entry : 0/0
  1681 ;;		On exit  : 0/0
  1682 ;;		Unchanged: 0/0
  1683 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1684 ;;      Params:         0       0       0       0       0       0       0       0       0
  1685 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1686 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1687 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1688 ;;Total ram usage:        0 bytes
  1689 ;; Hardware stack levels used:    1
  1690 ;; Hardware stack levels required when called:    8
  1691 ;; This function calls:
  1692 ;;		_setBrightness
  1693 ;;		_setTest
  1694 ;; This function is called by:
  1695 ;;		_setup
  1696 ;; This function uses a non-reentrant model
  1697 ;;
  1698                           
  1699                           	psect	text2
  1700  004010                     __ptext2:
  1701                           	opt stack 0
  1702  004010                     _startDisp:
  1703                           	opt stack 20
  1704                           
  1705                           ;disp.c: 64: TRISA1 = 0;
  1706                           
  1707                           ; BSR set to: 0
  1708                           ;incstack = 0
  1709  004010  9292               	bcf	3986,1,c	;volatile
  1710                           
  1711                           ;disp.c: 65: TRISA3 = 0;
  1712  004012  9692               	bcf	3986,3,c	;volatile
  1713                           
  1714                           ;disp.c: 66: TRISA4 = 0;
  1715  004014  9892               	bcf	3986,4,c	;volatile
  1716                           
  1717                           ;disp.c: 67: TRISA2 = 1;
  1718  004016  8492               	bsf	3986,2,c	;volatile
  1719                           
  1720                           ;disp.c: 70: screen.digits.bits[0] = 0;
  1721  004018  0E00               	movlw	0
  1722  00401A  0100               	movlb	0	; () banked
  1723  00401C  6FD3               	movwf	_screen& (0+255),b
  1724  00401E  0E00               	movlw	0
  1725  004020  0100               	movlb	0	; () banked
  1726  004022  6FD4               	movwf	(_screen+1)& (0+255),b
  1727  004024  0E00               	movlw	0
  1728  004026  0100               	movlb	0	; () banked
  1729  004028  6FD5               	movwf	(_screen+2)& (0+255),b
  1730  00402A  0E00               	movlw	0
  1731  00402C  0100               	movlb	0	; () banked
  1732  00402E  6FD6               	movwf	(_screen+3)& (0+255),b
  1733                           
  1734                           ;disp.c: 71: screen.digits.bits[1] = 0;
  1735  004030  0E00               	movlw	0
  1736  004032  0100               	movlb	0	; () banked
  1737  004034  6FD7               	movwf	(_screen+4)& (0+255),b
  1738  004036  0E00               	movlw	0
  1739  004038  0100               	movlb	0	; () banked
  1740  00403A  6FD8               	movwf	(_screen+5)& (0+255),b
  1741  00403C  0E00               	movlw	0
  1742  00403E  0100               	movlb	0	; () banked
  1743  004040  6FD9               	movwf	(_screen+6)& (0+255),b
  1744  004042  0E00               	movlw	0
  1745  004044  0100               	movlb	0	; () banked
  1746  004046  6FDA               	movwf	(_screen+7)& (0+255),b
  1747                           
  1748                           ; BSR set to: 0
  1749                           ;disp.c: 73: setBrightness(0b0111);
  1750  004048  0E07               	movlw	7
  1751  00404A  EC14  F023         	call	_setBrightness
  1752                           
  1753                           ;disp.c: 75: screen.decode = 0;
  1754  00404E  0100               	movlb	0	; () banked
  1755  004050  91DB               	bcf	(_screen+8)& (0+255),0,b
  1756  004052  0100               	movlb	0	; () banked
  1757  004054  93DB               	bcf	(_screen+8)& (0+255),1,b
  1758  004056  0100               	movlb	0	; () banked
  1759  004058  95DB               	bcf	(_screen+8)& (0+255),2,b
  1760  00405A  0100               	movlb	0	; () banked
  1761  00405C  97DB               	bcf	(_screen+8)& (0+255),3,b
  1762  00405E  0100               	movlb	0	; () banked
  1763  004060  99DB               	bcf	(_screen+8)& (0+255),4,b
  1764  004062  0100               	movlb	0	; () banked
  1765  004064  9BDB               	bcf	(_screen+8)& (0+255),5,b
  1766  004066  0100               	movlb	0	; () banked
  1767  004068  9DDB               	bcf	(_screen+8)& (0+255),6,b
  1768  00406A  0100               	movlb	0	; () banked
  1769  00406C  9FDB               	bcf	(_screen+8)& (0+255),7,b
  1770                           
  1771                           ; BSR set to: 0
  1772                           ;disp.c: 77: screen.scan = 0b111;
  1773  00406E  0100               	movlb	0	; () banked
  1774  004070  89DC               	bsf	(_screen+9)& (0+255),4,b
  1775  004072  0100               	movlb	0	; () banked
  1776  004074  8BDC               	bsf	(_screen+9)& (0+255),5,b
  1777  004076  0100               	movlb	0	; () banked
  1778  004078  8DDC               	bsf	(_screen+9)& (0+255),6,b
  1779                           
  1780                           ; BSR set to: 0
  1781                           ;disp.c: 79: setTest(0);
  1782  00407A  0E00               	movlw	0
  1783  00407C  EC30  F023         	call	_setTest
  1784                           
  1785                           ;disp.c: 81: screen.shutdown = 0;
  1786  004080  0100               	movlb	0	; () banked
  1787  004082  91DD               	bcf	(_screen+10)& (0+255),0,b
  1788                           
  1789                           ; BSR set to: 0
  1790                           ;disp.c: 83: screen.changed = 0xFFFF;
  1791  004084  0100               	movlb	0	; () banked
  1792  004086  69DE               	setf	(_screen+11)& (0+255),b
  1793  004088  0100               	movlb	0	; () banked
  1794  00408A  69DF               	setf	(_screen+12)& (0+255),b
  1795                           
  1796                           ; BSR set to: 0
  1797  00408C  0012               	return	
  1798  00408E                     __end_of_startDisp:
  1799                           	opt stack 0
  1800                           tblptru	equ	0xFF8
  1801                           tblptrh	equ	0xFF7
  1802                           tblptrl	equ	0xFF6
  1803                           tablat	equ	0xFF5
  1804                           intcon	equ	0xFF2
  1805                           postinc0	equ	0xFEE
  1806                           wreg	equ	0xFE8
  1807                           postdec1	equ	0xFE5
  1808                           fsr1l	equ	0xFE1
  1809                           status	equ	0xFD8
  1810                           
  1811 ;; *************** function _setTest *****************
  1812 ;; Defined at:
  1813 ;;		line 55 in file "disp.c"
  1814 ;; Parameters:    Size  Location     Type
  1815 ;;  state           1    wreg     unsigned char 
  1816 ;; Auto vars:     Size  Location     Type
  1817 ;;  state           1    0[BANK1 ] unsigned char 
  1818 ;; Return value:  Size  Location     Type
  1819 ;;		None               void
  1820 ;; Registers used:
  1821 ;;		wreg, status,2, status,0
  1822 ;; Tracked objects:
  1823 ;;		On entry : 0/0
  1824 ;;		On exit  : 0/0
  1825 ;;		Unchanged: 0/0
  1826 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1827 ;;      Params:         0       0       0       0       0       0       0       0       0
  1828 ;;      Locals:         0       0       1       0       0       0       0       0       0
  1829 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1830 ;;      Totals:         0       0       1       0       0       0       0       0       0
  1831 ;;Total ram usage:        1 bytes
  1832 ;; Hardware stack levels used:    1
  1833 ;; Hardware stack levels required when called:    7
  1834 ;; This function calls:
  1835 ;;		Nothing
  1836 ;; This function is called by:
  1837 ;;		_startDisp
  1838 ;; This function uses a non-reentrant model
  1839 ;;
  1840                           
  1841                           	psect	text3
  1842  004660                     __ptext3:
  1843                           	opt stack 0
  1844  004660                     _setTest:
  1845                           	opt stack 20
  1846                           
  1847                           ; BSR set to: 0
  1848                           ;incstack = 0
  1849                           ;setTest@state stored from wreg
  1850  004660  0101               	movlb	1	; () banked
  1851  004662  6F4A               	movwf	setTest@state& (0+255),b
  1852                           
  1853                           ; BSR set to: 1
  1854                           ;disp.c: 57: screen.test = state;
  1855  004664  0101               	movlb	1	; () banked
  1856  004666  B14A               	btfsc	setTest@state& (0+255),0,b
  1857  004668  D003               	bra	u5835
  1858  00466A  0100               	movlb	0	; () banked
  1859  00466C  9FDC               	bcf	(_screen+9)& (0+255),7,b
  1860  00466E  D002               	bra	u5836
  1861  004670                     u5835:
  1862  004670  0100               	movlb	0	; () banked
  1863  004672  8FDC               	bsf	(_screen+9)& (0+255),7,b
  1864  004674                     u5836:
  1865                           
  1866                           ; BSR set to: 0
  1867                           ;disp.c: 58: screen.changed |= (1 << 12);
  1868  004674  0100               	movlb	0	; () banked
  1869  004676  89DF               	bsf	(_screen+12)& (0+255),4,b
  1870                           
  1871                           ; BSR set to: 0
  1872  004678  0012               	return	
  1873  00467A                     __end_of_setTest:
  1874                           	opt stack 0
  1875                           tblptru	equ	0xFF8
  1876                           tblptrh	equ	0xFF7
  1877                           tblptrl	equ	0xFF6
  1878                           tablat	equ	0xFF5
  1879                           intcon	equ	0xFF2
  1880                           postinc0	equ	0xFEE
  1881                           wreg	equ	0xFE8
  1882                           postdec1	equ	0xFE5
  1883                           fsr1l	equ	0xFE1
  1884                           status	equ	0xFD8
  1885                           
  1886 ;; *************** function _setBrightness *****************
  1887 ;; Defined at:
  1888 ;;		line 48 in file "disp.c"
  1889 ;; Parameters:    Size  Location     Type
  1890 ;;  bright          1    wreg     unsigned char 
  1891 ;; Auto vars:     Size  Location     Type
  1892 ;;  bright          1    0[BANK1 ] unsigned char 
  1893 ;; Return value:  Size  Location     Type
  1894 ;;		None               void
  1895 ;; Registers used:
  1896 ;;		wreg, status,2, status,0
  1897 ;; Tracked objects:
  1898 ;;		On entry : 0/0
  1899 ;;		On exit  : 0/0
  1900 ;;		Unchanged: 0/0
  1901 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1902 ;;      Params:         0       0       0       0       0       0       0       0       0
  1903 ;;      Locals:         0       0       1       0       0       0       0       0       0
  1904 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1905 ;;      Totals:         0       0       1       0       0       0       0       0       0
  1906 ;;Total ram usage:        1 bytes
  1907 ;; Hardware stack levels used:    1
  1908 ;; Hardware stack levels required when called:    7
  1909 ;; This function calls:
  1910 ;;		Nothing
  1911 ;; This function is called by:
  1912 ;;		_startDisp
  1913 ;; This function uses a non-reentrant model
  1914 ;;
  1915                           
  1916                           	psect	text4
  1917  004628                     __ptext4:
  1918                           	opt stack 0
  1919  004628                     _setBrightness:
  1920                           	opt stack 20
  1921                           
  1922                           ; BSR set to: 0
  1923                           ;incstack = 0
  1924                           ;setBrightness@bright stored from wreg
  1925  004628  0101               	movlb	1	; () banked
  1926  00462A  6F4A               	movwf	setBrightness@bright& (0+255),b
  1927                           
  1928                           ; BSR set to: 1
  1929                           ;disp.c: 50: screen.brightness = bright;
  1930  00462C  0100               	movlb	0	; () banked
  1931  00462E  51DC               	movf	(_screen+9)& (0+255),w,b
  1932  004630  0101               	movlb	1	; () banked
  1933  004632  194A               	xorwf	setBrightness@bright& (0+255),w,b
  1934  004634  0BF0               	andlw	-16
  1935  004636  0101               	movlb	1	; () banked
  1936  004638  194A               	xorwf	setBrightness@bright& (0+255),w,b
  1937  00463A  0100               	movlb	0	; () banked
  1938  00463C  6FDC               	movwf	(_screen+9)& (0+255),b
  1939                           
  1940                           ; BSR set to: 0
  1941                           ;disp.c: 51: screen.changed |= (1 << 10);
  1942  00463E  0100               	movlb	0	; () banked
  1943  004640  85DF               	bsf	(_screen+12)& (0+255),2,b
  1944                           
  1945                           ; BSR set to: 0
  1946  004642  0012               	return	
  1947  004644                     __end_of_setBrightness:
  1948                           	opt stack 0
  1949                           tblptru	equ	0xFF8
  1950                           tblptrh	equ	0xFF7
  1951                           tblptrl	equ	0xFF6
  1952                           tablat	equ	0xFF5
  1953                           intcon	equ	0xFF2
  1954                           postinc0	equ	0xFEE
  1955                           wreg	equ	0xFE8
  1956                           postdec1	equ	0xFE5
  1957                           fsr1l	equ	0xFE1
  1958                           status	equ	0xFD8
  1959                           
  1960 ;; *************** function _setupButtons *****************
  1961 ;; Defined at:
  1962 ;;		line 12 in file "buttons.c"
  1963 ;; Parameters:    Size  Location     Type
  1964 ;;		None
  1965 ;; Auto vars:     Size  Location     Type
  1966 ;;		None
  1967 ;; Return value:  Size  Location     Type
  1968 ;;		None               void
  1969 ;; Registers used:
  1970 ;;		wreg, status,2
  1971 ;; Tracked objects:
  1972 ;;		On entry : 0/0
  1973 ;;		On exit  : 0/0
  1974 ;;		Unchanged: 0/0
  1975 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1976 ;;      Params:         0       0       0       0       0       0       0       0       0
  1977 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1978 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1979 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1980 ;;Total ram usage:        0 bytes
  1981 ;; Hardware stack levels used:    1
  1982 ;; Hardware stack levels required when called:    7
  1983 ;; This function calls:
  1984 ;;		Nothing
  1985 ;; This function is called by:
  1986 ;;		_setup
  1987 ;; This function uses a non-reentrant model
  1988 ;;
  1989                           
  1990                           	psect	text5
  1991  00468A                     __ptext5:
  1992                           	opt stack 0
  1993  00468A                     _setupButtons:
  1994                           	opt stack 21
  1995                           
  1996                           ;buttons.c: 15: LATB = 0;
  1997                           
  1998                           ; BSR set to: 0
  1999                           ;incstack = 0
  2000  00468A  0E00               	movlw	0
  2001  00468C  6E8A               	movwf	3978,c	;volatile
  2002                           
  2003                           ;buttons.c: 18: TRISB = 0b11111111;
  2004  00468E  6893               	setf	3987,c	;volatile
  2005                           
  2006                           ;buttons.c: 20: nRBPU = !0;
  2007  004690  8EF1               	bsf	intcon2,7,c	;volatile
  2008  004692  0012               	return	
  2009  004694                     __end_of_setupButtons:
  2010                           	opt stack 0
  2011                           tblptru	equ	0xFF8
  2012                           tblptrh	equ	0xFF7
  2013                           tblptrl	equ	0xFF6
  2014                           tablat	equ	0xFF5
  2015                           intcon	equ	0xFF2
  2016                           intcon2	equ	0xFF1
  2017                           postinc0	equ	0xFEE
  2018                           wreg	equ	0xFE8
  2019                           postdec1	equ	0xFE5
  2020                           fsr1l	equ	0xFE1
  2021                           status	equ	0xFD8
  2022                           
  2023 ;; *************** function _initTemp *****************
  2024 ;; Defined at:
  2025 ;;		line 10 in file "temp.c"
  2026 ;; Parameters:    Size  Location     Type
  2027 ;;		None
  2028 ;; Auto vars:     Size  Location     Type
  2029 ;;		None
  2030 ;; Return value:  Size  Location     Type
  2031 ;;		None               void
  2032 ;; Registers used:
  2033 ;;		wreg, status,2, status,0
  2034 ;; Tracked objects:
  2035 ;;		On entry : 0/0
  2036 ;;		On exit  : 0/0
  2037 ;;		Unchanged: 0/0
  2038 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2039 ;;      Params:         0       0       0       0       0       0       0       0       0
  2040 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2041 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2042 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2043 ;;Total ram usage:        0 bytes
  2044 ;; Hardware stack levels used:    1
  2045 ;; Hardware stack levels required when called:    7
  2046 ;; This function calls:
  2047 ;;		Nothing
  2048 ;; This function is called by:
  2049 ;;		_setup
  2050 ;; This function uses a non-reentrant model
  2051 ;;
  2052                           
  2053                           	psect	text6
  2054  004524                     __ptext6:
  2055                           	opt stack 0
  2056  004524                     _initTemp:
  2057                           	opt stack 21
  2058                           
  2059                           ;temp.c: 19: ADCON0 = 0b00000001;
  2060                           
  2061                           ;incstack = 0
  2062  004524  0E01               	movlw	1
  2063  004526  6EC2               	movwf	4034,c	;volatile
  2064                           
  2065                           ;temp.c: 26: ADCON1 = 0b00001110;
  2066  004528  0E0E               	movlw	14
  2067  00452A  6EC1               	movwf	4033,c	;volatile
  2068                           
  2069                           ;temp.c: 36: ADCON2 = 0b10110101;
  2070  00452C  0EB5               	movlw	181
  2071  00452E  6EC0               	movwf	4032,c	;volatile
  2072                           
  2073                           ;temp.c: 37: TRISA0 = 1;
  2074  004530  8092               	bsf	3986,0,c	;volatile
  2075                           
  2076                           ;temp.c: 39: tempMenu.digits = 0b00011111;
  2077  004532  0E1F               	movlw	31
  2078  004534  0100               	movlb	0	; () banked
  2079  004536  6FE1               	movwf	(_tempMenu+1)& (0+255),b
  2080                           
  2081                           ;temp.c: 40: tempMenu.state = 0;
  2082  004538  0E00               	movlw	0
  2083  00453A  0100               	movlb	0	; () banked
  2084  00453C  6FE0               	movwf	_tempMenu& (0+255),b
  2085                           
  2086                           ;temp.c: 41: tempMenu.num_states = 2;
  2087  00453E  0E02               	movlw	2
  2088  004540  0100               	movlb	0	; () banked
  2089  004542  6FE2               	movwf	(_tempMenu+2)& (0+255),b
  2090                           
  2091                           ; BSR set to: 0
  2092                           ;temp.c: 42: tempMenu.printFn = &printTemp;
  2093  004544  0E28               	movlw	high _printTemp
  2094  004546  0100               	movlb	0	; () banked
  2095  004548  6FE4               	movwf	(_tempMenu+4)& (0+255),b
  2096  00454A  0E6C               	movlw	low _printTemp
  2097  00454C  0100               	movlb	0	; () banked
  2098  00454E  6FE3               	movwf	(_tempMenu+3)& (0+255),b
  2099                           
  2100                           ; BSR set to: 0
  2101  004550  0012               	return	
  2102  004552                     __end_of_initTemp:
  2103                           	opt stack 0
  2104                           tblptru	equ	0xFF8
  2105                           tblptrh	equ	0xFF7
  2106                           tblptrl	equ	0xFF6
  2107                           tablat	equ	0xFF5
  2108                           intcon	equ	0xFF2
  2109                           intcon2	equ	0xFF1
  2110                           postinc0	equ	0xFEE
  2111                           wreg	equ	0xFE8
  2112                           postdec1	equ	0xFE5
  2113                           fsr1l	equ	0xFE1
  2114                           status	equ	0xFD8
  2115                           
  2116 ;; *************** function _initRTC *****************
  2117 ;; Defined at:
  2118 ;;		line 8 in file "RTC.c"
  2119 ;; Parameters:    Size  Location     Type
  2120 ;;		None
  2121 ;; Auto vars:     Size  Location     Type
  2122 ;;		None
  2123 ;; Return value:  Size  Location     Type
  2124 ;;		None               void
  2125 ;; Registers used:
  2126 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  2127 ;; Tracked objects:
  2128 ;;		On entry : 0/0
  2129 ;;		On exit  : 0/0
  2130 ;;		Unchanged: 0/0
  2131 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2132 ;;      Params:         0       0       0       0       0       0       0       0       0
  2133 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2134 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2135 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2136 ;;Total ram usage:        0 bytes
  2137 ;; Hardware stack levels used:    1
  2138 ;; Hardware stack levels required when called:    8
  2139 ;; This function calls:
  2140 ;;		_loadTime
  2141 ;; This function is called by:
  2142 ;;		_setup
  2143 ;; This function uses a non-reentrant model
  2144 ;;
  2145                           
  2146                           	psect	text7
  2147  004338                     __ptext7:
  2148                           	opt stack 0
  2149  004338                     _initRTC:
  2150                           	opt stack 20
  2151                           
  2152                           ;RTC.c: 10: rtcMenu.digits = 0b11111111;
  2153                           
  2154                           ; BSR set to: 0
  2155                           ;incstack = 0
  2156  004338  0100               	movlb	0	; () banked
  2157  00433A  69E6               	setf	(_rtcMenu+1)& (0+255),b
  2158                           
  2159                           ; BSR set to: 0
  2160                           ;RTC.c: 11: rtcMenu.state = ddd_hhmm;
  2161  00433C  0E02               	movlw	2
  2162  00433E  0100               	movlb	0	; () banked
  2163  004340  6FE5               	movwf	_rtcMenu& (0+255),b
  2164                           
  2165                           ;RTC.c: 12: rtcMenu.num_states = 10;
  2166  004342  0E0A               	movlw	10
  2167  004344  0100               	movlb	0	; () banked
  2168  004346  6FE7               	movwf	(_rtcMenu+2)& (0+255),b
  2169                           
  2170                           ; BSR set to: 0
  2171                           ;RTC.c: 13: rtcMenu.printFn = &printRTC;
  2172  004348  0E18               	movlw	high _printRTC
  2173  00434A  0100               	movlb	0	; () banked
  2174  00434C  6FE9               	movwf	(_rtcMenu+4)& (0+255),b
  2175  00434E  0E3A               	movlw	low _printRTC
  2176  004350  0100               	movlb	0	; () banked
  2177  004352  6FE8               	movwf	(_rtcMenu+3)& (0+255),b
  2178                           
  2179                           ; BSR set to: 0
  2180                           ;RTC.c: 15: date.month = 1;
  2181  004354  0E01               	movlw	1
  2182  004356  0100               	movlb	0	; () banked
  2183  004358  6FAD               	movwf	(_date+5)& (0+255),b
  2184                           
  2185                           ; BSR set to: 0
  2186                           ;RTC.c: 16: date.day = 1;
  2187  00435A  0E01               	movlw	1
  2188  00435C  0100               	movlb	0	; () banked
  2189  00435E  6FAB               	movwf	(_date+3)& (0+255),b
  2190                           
  2191                           ; BSR set to: 0
  2192                           ;RTC.c: 17: date.year = 2013;
  2193  004360  0E07               	movlw	7
  2194  004362  0100               	movlb	0	; () banked
  2195  004364  6FAF               	movwf	(_date+7)& (0+255),b
  2196  004366  0EDD               	movlw	221
  2197  004368  0100               	movlb	0	; () banked
  2198  00436A  6FAE               	movwf	(_date+6)& (0+255),b
  2199                           
  2200                           ; BSR set to: 0
  2201                           ;RTC.c: 18: date.hour = 0;
  2202  00436C  0E00               	movlw	0
  2203  00436E  0100               	movlb	0	; () banked
  2204  004370  6FAA               	movwf	(_date+2)& (0+255),b
  2205                           
  2206                           ; BSR set to: 0
  2207                           ;RTC.c: 19: date.minute = 0;
  2208  004372  0E00               	movlw	0
  2209  004374  0100               	movlb	0	; () banked
  2210  004376  6FA9               	movwf	(_date+1)& (0+255),b
  2211                           
  2212                           ; BSR set to: 0
  2213                           ;RTC.c: 20: date.second = 0;
  2214  004378  0E00               	movlw	0
  2215  00437A  0100               	movlb	0	; () banked
  2216  00437C  6FA8               	movwf	_date& (0+255),b
  2217                           
  2218                           ; BSR set to: 0
  2219                           ;RTC.c: 22: EECON1 = 0b0000000;
  2220  00437E  0E00               	movlw	0
  2221  004380  6EA6               	movwf	4006,c	;volatile
  2222                           
  2223                           ; BSR set to: 0
  2224                           ;RTC.c: 23: LATC6 = 1;
  2225  004382  8C8B               	bsf	3979,6,c	;volatile
  2226                           
  2227                           ; BSR set to: 0
  2228                           ;RTC.c: 24: loadTime();
  2229  004384  ECFA  F019         	call	_loadTime	;wreg free
  2230                           
  2231                           ;RTC.c: 25: LATC6 = 0;
  2232  004388  9C8B               	bcf	3979,6,c	;volatile
  2233  00438A  0012               	return	
  2234  00438C                     __end_of_initRTC:
  2235                           	opt stack 0
  2236                           tblptru	equ	0xFF8
  2237                           tblptrh	equ	0xFF7
  2238                           tblptrl	equ	0xFF6
  2239                           tablat	equ	0xFF5
  2240                           intcon	equ	0xFF2
  2241                           intcon2	equ	0xFF1
  2242                           postinc0	equ	0xFEE
  2243                           wreg	equ	0xFE8
  2244                           postdec1	equ	0xFE5
  2245                           fsr1l	equ	0xFE1
  2246                           status	equ	0xFD8
  2247                           
  2248 ;; *************** function _loadTime *****************
  2249 ;; Defined at:
  2250 ;;		line 28 in file "RTC.c"
  2251 ;; Parameters:    Size  Location     Type
  2252 ;;		None
  2253 ;; Auto vars:     Size  Location     Type
  2254 ;;  data            1   12[BANK1 ] unsigned char 
  2255 ;;  newDate         9    3[BANK1 ] struct sDate
  2256 ;;  cnt             1    2[BANK1 ] unsigned char 
  2257 ;; Return value:  Size  Location     Type
  2258 ;;                  9  132[COMRAM] struct sDate
  2259 ;; Registers used:
  2260 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
  2261 ;; Tracked objects:
  2262 ;;		On entry : 0/0
  2263 ;;		On exit  : 0/0
  2264 ;;		Unchanged: 0/0
  2265 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2266 ;;      Params:         0       0       0       0       0       0       0       0       0
  2267 ;;      Locals:         0       0      11       0       0       0       0       0       0
  2268 ;;      Temps:          0       0       2       0       0       0       0       0       0
  2269 ;;      Totals:         0       0      13       0       0       0       0       0       0
  2270 ;;Total ram usage:       13 bytes
  2271 ;; Hardware stack levels used:    1
  2272 ;; Hardware stack levels required when called:    7
  2273 ;; This function calls:
  2274 ;;		Nothing
  2275 ;; This function is called by:
  2276 ;;		_initRTC
  2277 ;; This function uses a non-reentrant model
  2278 ;;
  2279                           
  2280                           	psect	text8
  2281  0033F4                     __ptext8:
  2282                           	opt stack 0
  2283  0033F4                     _loadTime:
  2284                           	opt stack 20
  2285                           
  2286                           ;RTC.c: 30: struct sDate newDate;
  2287                           ;RTC.c: 31: uint8_t cnt;
  2288                           ;RTC.c: 33: for (cnt = 1; cnt < 7; cnt++)
  2289                           
  2290                           ;incstack = 0
  2291  0033F4  0E01               	movlw	1
  2292  0033F6  0101               	movlb	1	; () banked
  2293  0033F8  6F4C               	movwf	loadTime@cnt& (0+255),b
  2294  0033FA  D067               	goto	L2
  2295  0033FC                     l178:
  2296                           
  2297                           ; BSR set to: 1
  2298                           ;RTC.c: 34: {
  2299                           ;RTC.c: 35: EEADR = 0 + cnt;
  2300  0033FC  C14C  FFA9         	movff	loadTime@cnt,4009	;volatile
  2301                           
  2302                           ;RTC.c: 36: RD = 1;
  2303  003400  80A6               	bsf	4006,0,c	;volatile
  2304                           
  2305                           ;RTC.c: 37: uint8_t data = EEDATA;
  2306  003402  CFA8 F156          	movff	4008,loadTime@data	;volatile
  2307                           
  2308                           ;RTC.c: 38: switch (cnt)
  2309  003406  D04A               	goto	l5640
  2310  003408                     l5602:
  2311                           
  2312                           ; BSR set to: 1
  2313                           ;RTC.c: 41: if (data >= 60)
  2314  003408  0E3B               	movlw	59
  2315  00340A  0101               	movlb	1	; () banked
  2316  00340C  6556               	cpfsgt	loadTime@data& (0+255),b
  2317  00340E  D003               	goto	l5606
  2318                           
  2319                           ; BSR set to: 1
  2320                           ;RTC.c: 42: data = 0;
  2321  003410  0E00               	movlw	0
  2322  003412  0101               	movlb	1	; () banked
  2323  003414  6F56               	movwf	loadTime@data& (0+255),b
  2324  003416                     l5606:
  2325                           
  2326                           ; BSR set to: 1
  2327                           ;RTC.c: 43: newDate.minute = data;
  2328  003416  C156  F14E         	movff	loadTime@data,loadTime@newDate+1
  2329                           
  2330                           ;RTC.c: 44: break;
  2331  00341A  D054               	goto	l183
  2332  00341C                     l5608:
  2333                           
  2334                           ; BSR set to: 1
  2335                           ;RTC.c: 46: if (data >= 24)
  2336  00341C  0E17               	movlw	23
  2337  00341E  0101               	movlb	1	; () banked
  2338  003420  6556               	cpfsgt	loadTime@data& (0+255),b
  2339  003422  D003               	goto	l5612
  2340                           
  2341                           ; BSR set to: 1
  2342                           ;RTC.c: 47: data = 0;
  2343  003424  0E00               	movlw	0
  2344  003426  0101               	movlb	1	; () banked
  2345  003428  6F56               	movwf	loadTime@data& (0+255),b
  2346  00342A                     l5612:
  2347                           
  2348                           ; BSR set to: 1
  2349                           ;RTC.c: 48: newDate.hour = data;
  2350  00342A  C156  F14F         	movff	loadTime@data,loadTime@newDate+2
  2351                           
  2352                           ;RTC.c: 49: break;
  2353  00342E  D04A               	goto	l183
  2354  003430                     l5614:
  2355                           
  2356                           ; BSR set to: 1
  2357                           ;RTC.c: 51: if (data >= 31)
  2358  003430  0E1E               	movlw	30
  2359  003432  0101               	movlb	1	; () banked
  2360  003434  6556               	cpfsgt	loadTime@data& (0+255),b
  2361  003436  D003               	goto	l5618
  2362                           
  2363                           ; BSR set to: 1
  2364                           ;RTC.c: 52: data = 1;
  2365  003438  0E01               	movlw	1
  2366  00343A  0101               	movlb	1	; () banked
  2367  00343C  6F56               	movwf	loadTime@data& (0+255),b
  2368  00343E                     l5618:
  2369                           
  2370                           ; BSR set to: 1
  2371                           ;RTC.c: 53: newDate.day = data;
  2372  00343E  C156  F150         	movff	loadTime@data,loadTime@newDate+3
  2373                           
  2374                           ;RTC.c: 54: break;
  2375  003442  D040               	goto	l183
  2376  003444                     l5620:
  2377                           
  2378                           ; BSR set to: 1
  2379                           ;RTC.c: 56: if (data >= 12)
  2380  003444  0E0B               	movlw	11
  2381  003446  0101               	movlb	1	; () banked
  2382  003448  6556               	cpfsgt	loadTime@data& (0+255),b
  2383  00344A  D003               	goto	l5624
  2384                           
  2385                           ; BSR set to: 1
  2386                           ;RTC.c: 57: data = 1;
  2387  00344C  0E01               	movlw	1
  2388  00344E  0101               	movlb	1	; () banked
  2389  003450  6F56               	movwf	loadTime@data& (0+255),b
  2390  003452                     l5624:
  2391                           
  2392                           ; BSR set to: 1
  2393                           ;RTC.c: 58: newDate.month = data;
  2394  003452  C156  F152         	movff	loadTime@data,loadTime@newDate+5
  2395                           
  2396                           ;RTC.c: 59: break;
  2397  003456  D036               	goto	l183
  2398  003458                     l5626:
  2399                           
  2400                           ; BSR set to: 1
  2401                           ;RTC.c: 61: if (data >= 21)
  2402  003458  0E14               	movlw	20
  2403  00345A  0101               	movlb	1	; () banked
  2404  00345C  6556               	cpfsgt	loadTime@data& (0+255),b
  2405  00345E  D003               	goto	l5630
  2406                           
  2407                           ; BSR set to: 1
  2408                           ;RTC.c: 62: data = 20;
  2409  003460  0E14               	movlw	20
  2410  003462  0101               	movlb	1	; () banked
  2411  003464  6F56               	movwf	loadTime@data& (0+255),b
  2412  003466                     l5630:
  2413                           
  2414                           ; BSR set to: 1
  2415                           ;RTC.c: 63: newDate.year = data;
  2416  003466  0101               	movlb	1	; () banked
  2417  003468  C156  F153         	movff	loadTime@data,loadTime@newDate+6
  2418  00346C  0101               	movlb	1	; () banked
  2419  00346E  6B54               	clrf	(loadTime@newDate+7)& (0+255),b
  2420                           
  2421                           ;RTC.c: 64: break;
  2422  003470  D029               	goto	l183
  2423  003472                     l5632:
  2424                           
  2425                           ; BSR set to: 1
  2426                           ;RTC.c: 66: if (data >= 100)
  2427  003472  0E63               	movlw	99
  2428  003474  0101               	movlb	1	; () banked
  2429  003476  6556               	cpfsgt	loadTime@data& (0+255),b
  2430  003478  D003               	goto	l5636
  2431                           
  2432                           ; BSR set to: 1
  2433                           ;RTC.c: 67: data = 0;
  2434  00347A  0E00               	movlw	0
  2435  00347C  0101               	movlb	1	; () banked
  2436  00347E  6F56               	movwf	loadTime@data& (0+255),b
  2437  003480                     l5636:
  2438                           
  2439                           ; BSR set to: 1
  2440                           ;RTC.c: 68: newDate.year |= data << 8;
  2441  003480  0101               	movlb	1	; () banked
  2442  003482  5156               	movf	loadTime@data& (0+255),w,b
  2443  003484  0101               	movlb	1	; () banked
  2444  003486  6F4B               	movwf	(??_loadTime+1)& (0+255),b
  2445  003488  6B4A               	clrf	??_loadTime& (0+255),b
  2446  00348A  0101               	movlb	1	; () banked
  2447  00348C  514A               	movf	??_loadTime& (0+255),w,b
  2448  00348E  0101               	movlb	1	; () banked
  2449  003490  1353               	iorwf	(loadTime@newDate+6)& (0+255),f,b
  2450  003492  0101               	movlb	1	; () banked
  2451  003494  514B               	movf	(??_loadTime+1)& (0+255),w,b
  2452  003496  0101               	movlb	1	; () banked
  2453  003498  1354               	iorwf	(loadTime@newDate+7)& (0+255),f,b
  2454                           
  2455                           ;RTC.c: 69: break;
  2456  00349A  D014               	goto	l183
  2457  00349C                     l5640:
  2458                           
  2459                           ; BSR set to: 1
  2460  00349C  0101               	movlb	1	; () banked
  2461  00349E  514C               	movf	loadTime@cnt& (0+255),w,b
  2462                           
  2463                           ; Switch size 1, requested type "space"
  2464                           ; Number of cases is 6, Range of values is 1 to 6
  2465                           ; switch strategies available:
  2466                           ; Name         Instructions Cycles
  2467                           ; simple_byte           19    10 (average)
  2468                           ;	Chosen strategy is simple_byte
  2469  0034A0  0A01               	xorlw	1	; case 1
  2470  0034A2  B4D8               	btfsc	status,2,c
  2471  0034A4  D7B1               	goto	l5602
  2472  0034A6  0A03               	xorlw	3	; case 2
  2473  0034A8  B4D8               	btfsc	status,2,c
  2474  0034AA  D7B8               	goto	l5608
  2475  0034AC  0A01               	xorlw	1	; case 3
  2476  0034AE  B4D8               	btfsc	status,2,c
  2477  0034B0  D7BF               	goto	l5614
  2478  0034B2  0A07               	xorlw	7	; case 4
  2479  0034B4  B4D8               	btfsc	status,2,c
  2480  0034B6  D7C6               	goto	l5620
  2481  0034B8  0A01               	xorlw	1	; case 5
  2482  0034BA  B4D8               	btfsc	status,2,c
  2483  0034BC  D7CD               	goto	l5626
  2484  0034BE  0A03               	xorlw	3	; case 6
  2485  0034C0  B4D8               	btfsc	status,2,c
  2486  0034C2  D7D7               	goto	l5632
  2487  0034C4                     l183:
  2488                           
  2489                           ; BSR set to: 1
  2490  0034C4  F000               	nop		;# 
  2491  0034C6  0101               	movlb	1	; () banked
  2492  0034C8  2B4C               	incf	loadTime@cnt& (0+255),f,b
  2493  0034CA                     L2:
  2494                           
  2495                           ; BSR set to: 1
  2496  0034CA  0E06               	movlw	6
  2497  0034CC  0101               	movlb	1	; () banked
  2498  0034CE  654C               	cpfsgt	loadTime@cnt& (0+255),b
  2499  0034D0  D795               	goto	l178
  2500                           
  2501                           ; BSR set to: 1
  2502                           ;RTC.c: 72: }
  2503                           ;RTC.c: 73: date = newDate;
  2504                           
  2505                           ; BSR set to: 1
  2506  0034D2  EE21  F04D         	lfsr	2,loadTime@newDate
  2507  0034D6  EE10  F0A8         	lfsr	1,_date
  2508  0034DA  0E09               	movlw	9
  2509  0034DC                     u5921:
  2510  0034DC  CFDE FFE6          	movff	postinc2,postinc1
  2511  0034E0  2EE8               	decfsz	wreg,f,c
  2512  0034E2  D7FC               	goto	u5921
  2513                           
  2514                           ; BSR set to: 1
  2515                           
  2516                           ; BSR set to: 1
  2517                           ;RTC.c: 74: return newDate;
  2518                           ;	Return value of _loadTime is never used
  2519  0034E4  0012               	return	
  2520  0034E6                     __end_of_loadTime:
  2521                           	opt stack 0
  2522                           tblptru	equ	0xFF8
  2523                           tblptrh	equ	0xFF7
  2524                           tblptrl	equ	0xFF6
  2525                           tablat	equ	0xFF5
  2526                           intcon	equ	0xFF2
  2527                           intcon2	equ	0xFF1
  2528                           postinc0	equ	0xFEE
  2529                           wreg	equ	0xFE8
  2530                           postinc1	equ	0xFE6
  2531                           postdec1	equ	0xFE5
  2532                           fsr1l	equ	0xFE1
  2533                           postinc2	equ	0xFDE
  2534                           status	equ	0xFD8
  2535                           
  2536 ;; *************** function _isr *****************
  2537 ;; Defined at:
  2538 ;;		line 135 in file "temp-clock_main.c"
  2539 ;; Parameters:    Size  Location     Type
  2540 ;;		None
  2541 ;; Auto vars:     Size  Location     Type
  2542 ;;		None
  2543 ;; Return value:  Size  Location     Type
  2544 ;;		None               void
  2545 ;; Registers used:
  2546 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, btemp+8, btemp+9, btemp+10, btemp+11, tosl, structret, tblptrl, tblptrh, tblp
      +tru, prodl, prodh, bsr, cstack
  2547 ;; Tracked objects:
  2548 ;;		On entry : 0/0
  2549 ;;		On exit  : 0/0
  2550 ;;		Unchanged: 0/0
  2551 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2552 ;;      Params:         0       0       0       0       0       0       0       0       0
  2553 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2554 ;;      Temps:          0      14       0       0       0       0       0       0       0
  2555 ;;      Totals:         0      14       0       0       0       0       0       0       0
  2556 ;;Total ram usage:       14 bytes
  2557 ;; Hardware stack levels used:    1
  2558 ;; Hardware stack levels required when called:    6
  2559 ;; This function calls:
  2560 ;;		_buttons
  2561 ;;		_getTemp
  2562 ;;		_printRTC
  2563 ;;		_printTemp
  2564 ;;		_tick
  2565 ;;		_update
  2566 ;; This function is called by:
  2567 ;;		Interrupt level 2
  2568 ;; This function uses a non-reentrant model
  2569 ;;
  2570                           
  2571                           	psect	intcode
  2572  000008                     __pintcode:
  2573                           	opt stack 0
  2574  000008                     _isr:
  2575                           	opt stack 20
  2576                           
  2577                           ; BSR set to: 1
  2578                           ;incstack = 0
  2579  000008  CFFA F09A          	movff	pclath,??_isr
  2580  00000C  CFFB F09B          	movff	pclatu,??_isr+1
  2581  000010  CFE9 F09C          	movff	fsr0l,??_isr+2
  2582  000014  ED1A  F018         	call	int_func,f	;refresh shadow registers
  2583                           pclatu	equ	0xFFB
  2584                           pclath	equ	0xFFA
  2585                           tblptru	equ	0xFF8
  2586                           tblptrh	equ	0xFF7
  2587                           tblptrl	equ	0xFF6
  2588                           tablat	equ	0xFF5
  2589                           intcon	equ	0xFF2
  2590                           intcon2	equ	0xFF1
  2591                           postinc0	equ	0xFEE
  2592                           fsr0l	equ	0xFE9
  2593                           wreg	equ	0xFE8
  2594                           postinc1	equ	0xFE6
  2595                           postdec1	equ	0xFE5
  2596                           fsr1l	equ	0xFE1
  2597                           postinc2	equ	0xFDE
  2598                           status	equ	0xFD8
  2599                           
  2600                           	psect	intcode_body
  2601  003034                     __pintcode_body:
  2602                           	opt stack 20
  2603  003034                     int_func:
  2604                           	opt stack 20
  2605  003034  0006               	pop		; remove dummy address from shadow register refresh
  2606  003036  CFEA F09D          	movff	fsr0h,??_isr+3
  2607  00303A  CFE1 F09E          	movff	fsr1l,??_isr+4
  2608  00303E  CFE2 F09F          	movff	fsr1h,??_isr+5
  2609  003042  CFD9 F0A0          	movff	fsr2l,??_isr+6
  2610  003046  CFDA F0A1          	movff	fsr2h,??_isr+7
  2611  00304A  CFF3 F0A2          	movff	prodl,??_isr+8
  2612  00304E  CFF4 F0A3          	movff	prodh,??_isr+9
  2613  003052  CFF6 F0A4          	movff	tblptrl,??_isr+10
  2614  003056  CFF7 F0A5          	movff	tblptrh,??_isr+11
  2615  00305A  CFF8 F0A6          	movff	tblptru,??_isr+12
  2616  00305E  CFF5 F0A7          	movff	tablat,??_isr+13
  2617                           
  2618                           ;temp-clock_main.c: 137: if (TMR1IE && TMR1IF)
  2619  003062  B09D               	btfsc	3997,0,c	;volatile
  2620  003064  A09E               	btfss	3998,0,c	;volatile
  2621  003066  D042               	goto	i2l5434
  2622                           
  2623                           ;temp-clock_main.c: 138: {
  2624                           ;temp-clock_main.c: 139: TMR1IF = CLEAR;
  2625  003068  909E               	bcf	3998,0,c	;volatile
  2626                           
  2627                           ;temp-clock_main.c: 140: TMR1ON = 0;
  2628  00306A  90CD               	bcf	4045,0,c	;volatile
  2629                           
  2630                           ;temp-clock_main.c: 141: TMR1 = 0;
  2631  00306C  0E00               	movlw	0
  2632  00306E  6ECF               	movwf	4047,c	;volatile
  2633  003070  0E00               	movlw	0
  2634  003072  6ECE               	movwf	4046,c	;volatile
  2635                           
  2636                           ;temp-clock_main.c: 142: if (++rtc_big_ticks > (15+1))
  2637  003074  0100               	movlb	0	; () banked
  2638  003076  4BBE               	infsnz	_rtc_big_ticks& (0+255),f,b
  2639  003078  2BBF               	incf	(_rtc_big_ticks+1)& (0+255),f,b
  2640  00307A  0E11               	movlw	17
  2641  00307C  0100               	movlb	0	; () banked
  2642  00307E  5DBE               	subwf	_rtc_big_ticks& (0+255),w,b
  2643  003080  0E00               	movlw	0
  2644  003082  0100               	movlb	0	; () banked
  2645  003084  59BF               	subwfb	(_rtc_big_ticks+1)& (0+255),w,b
  2646  003086  A0D8               	btfss	status,0,c
  2647  003088  D030               	goto	i2l5432
  2648                           
  2649                           ; BSR set to: 0
  2650                           ;temp-clock_main.c: 143: {
  2651                           ;temp-clock_main.c: 144: rtc_big_ticks = 0;
  2652  00308A  0E00               	movlw	0
  2653  00308C  0100               	movlb	0	; () banked
  2654  00308E  6FBF               	movwf	(_rtc_big_ticks+1)& (0+255),b
  2655  003090  0E00               	movlw	0
  2656  003092  0100               	movlb	0	; () banked
  2657  003094  6FBE               	movwf	_rtc_big_ticks& (0+255),b
  2658                           
  2659                           ;temp-clock_main.c: 145: TMR1 = (65536-16960);
  2660  003096  0EBD               	movlw	189
  2661  003098  6ECF               	movwf	4047,c	;volatile
  2662  00309A  0EC0               	movlw	192
  2663  00309C  6ECE               	movwf	4046,c	;volatile
  2664                           
  2665                           ; BSR set to: 0
  2666                           ;temp-clock_main.c: 146: TMR1ON = 1;
  2667  00309E  80CD               	bsf	4045,0,c	;volatile
  2668                           
  2669                           ; BSR set to: 0
  2670                           ;temp-clock_main.c: 148: tick(second);
  2671  0030A0  0E00               	movlw	0
  2672  0030A2  ECEB  F01A         	call	_tick
  2673                           
  2674                           ;temp-clock_main.c: 151: getTemp();
  2675  0030A6  EC12  F010         	call	_getTemp	;wreg free
  2676                           
  2677                           ;temp-clock_main.c: 153: menu->printFn(menu->digits);
  2678  0030AA  0100               	movlb	0	; () banked
  2679  0030AC  EE20 F003          	lfsr	2,3
  2680  0030B0  0100               	movlb	0	; () banked
  2681  0030B2  51BC               	movf	_menu& (0+255),w,b
  2682  0030B4  26D9               	addwf	fsr2l,f,c
  2683  0030B6  0100               	movlb	0	; () banked
  2684  0030B8  51BD               	movf	(_menu+1)& (0+255),w,b
  2685  0030BA  22DA               	addwfc	fsr2h,f,c
  2686  0030BC  D801               	call	i2u576_48
  2687  0030BE  D014               	goto	i2u576_49
  2688  0030C0                     i2u576_48:
  2689  0030C0  0005               	push	
  2690  0030C2  6EFA               	movwf	pclath,c
  2691  0030C4  50DE               	movf	postinc2,w,c
  2692  0030C6  6EFD               	movwf	tosl,c
  2693  0030C8  50DE               	movf	postinc2,w,c
  2694  0030CA  6EFE               	movwf	tosh,c
  2695  0030CC  50F8               	movf	tblptru,w,c
  2696  0030CE  6EFF               	movwf	tosu,c
  2697  0030D0  50FA               	movf	pclath,w,c
  2698  0030D2  0100               	movlb	0	; () banked
  2699  0030D4  EE20 F001          	lfsr	2,1
  2700  0030D8  0100               	movlb	0	; () banked
  2701  0030DA  51BC               	movf	_menu& (0+255),w,b
  2702  0030DC  26D9               	addwf	fsr2l,f,c
  2703  0030DE  0100               	movlb	0	; () banked
  2704  0030E0  51BD               	movf	(_menu+1)& (0+255),w,b
  2705  0030E2  22DA               	addwfc	fsr2h,f,c
  2706  0030E4  50DF               	movf	indf2,w,c
  2707  0030E6  0012               	return		;indir
  2708  0030E8                     i2u576_49:
  2709                           
  2710                           ;temp-clock_main.c: 155: LATC7 = ~LATC7;
  2711  0030E8  7E8B               	btg	3979,7,c	;volatile
  2712  0030EA                     i2l5432:
  2713                           
  2714                           ;temp-clock_main.c: 157: }
  2715                           ;temp-clock_main.c: 159: TMR1ON = 1;
  2716  0030EA  80CD               	bsf	4045,0,c	;volatile
  2717  0030EC                     i2l5434:
  2718                           
  2719                           ;temp-clock_main.c: 160: }
  2720                           ;temp-clock_main.c: 162: if (TMR2IE && TMR2IF)
  2721  0030EC  B29D               	btfsc	3997,1,c	;volatile
  2722  0030EE  A29E               	btfss	3998,1,c	;volatile
  2723  0030F0  D01A               	goto	i2l5448
  2724                           
  2725                           ;temp-clock_main.c: 163: {
  2726                           ;temp-clock_main.c: 164: TMR2IF = CLEAR;
  2727  0030F2  929E               	bcf	3998,1,c	;volatile
  2728                           
  2729                           ;temp-clock_main.c: 165: TMR2 = 0;
  2730  0030F4  0E00               	movlw	0
  2731  0030F6  6ECC               	movwf	4044,c	;volatile
  2732                           
  2733                           ;temp-clock_main.c: 166: if (tmr2_count++ > 100)
  2734  0030F8  0100               	movlb	0	; () banked
  2735  0030FA  EE20  F0C2         	lfsr	2,_tmr2_count
  2736  0030FE  2ADE               	incf	postinc2,f,c
  2737  003100  0E00               	movlw	0
  2738  003102  22DD               	addwfc	postdec2,f,c
  2739  003104  52DE               	movf	postinc2,f,c
  2740  003106  50DD               	movf	postdec2,w,c
  2741  003108  0A80               	xorlw	128
  2742  00310A  0F80               	addlw	128
  2743  00310C  0E66               	movlw	102
  2744  00310E  B4D8               	btfsc	status,2,c
  2745  003110  5CDF               	subwf	indf2,w,c
  2746  003112  A0D8               	btfss	status,0,c
  2747  003114  D008               	goto	i2l5448
  2748                           
  2749                           ; BSR set to: 0
  2750                           ;temp-clock_main.c: 167: {
  2751                           ;temp-clock_main.c: 168: tmr2_count = 0;
  2752  003116  0E00               	movlw	0
  2753  003118  0100               	movlb	0	; () banked
  2754  00311A  6FC3               	movwf	(_tmr2_count+1)& (0+255),b
  2755  00311C  0E00               	movlw	0
  2756  00311E  0100               	movlb	0	; () banked
  2757  003120  6FC2               	movwf	_tmr2_count& (0+255),b
  2758                           
  2759                           ; BSR set to: 0
  2760                           ;temp-clock_main.c: 169: update();
  2761  003122  ECF4  F009         	call	_update
  2762  003126                     i2l5448:
  2763                           
  2764                           ;temp-clock_main.c: 171: }
  2765                           ;temp-clock_main.c: 172: }
  2766                           ;temp-clock_main.c: 174: if (TMR0IE && TMR0IF)
  2767  003126  BAF2               	btfsc	intcon,5,c	;volatile
  2768  003128  A4F2               	btfss	intcon,2,c	;volatile
  2769  00312A  D02B               	goto	i2l5466
  2770                           
  2771                           ;temp-clock_main.c: 175: {
  2772                           ;temp-clock_main.c: 176: TMR0IF = CLEAR;
  2773  00312C  94F2               	bcf	intcon,2,c	;volatile
  2774                           
  2775                           ;temp-clock_main.c: 177: TMR0ON = 0;
  2776  00312E  9ED5               	bcf	4053,7,c	;volatile
  2777                           
  2778                           ;temp-clock_main.c: 178: TMR0 = 0;
  2779  003130  0E00               	movlw	0
  2780  003132  6ED7               	movwf	4055,c	;volatile
  2781  003134  0E00               	movlw	0
  2782  003136  6ED6               	movwf	4054,c	;volatile
  2783                           
  2784                           ;temp-clock_main.c: 179: if (++tmr0BigCounts > (0))
  2785  003138  0E01               	movlw	1
  2786  00313A  0100               	movlb	0	; () banked
  2787  00313C  27B1               	addwf	_tmr0BigCounts& (0+255),f,b
  2788  00313E  0E00               	movlw	0
  2789  003140  0100               	movlb	0	; () banked
  2790  003142  23B2               	addwfc	(_tmr0BigCounts+1)& (0+255),f,b
  2791  003144  0100               	movlb	0	; () banked
  2792  003146  23B3               	addwfc	(_tmr0BigCounts+2)& (0+255),f,b
  2793  003148  0100               	movlb	0	; () banked
  2794  00314A  23B4               	addwfc	(_tmr0BigCounts+3)& (0+255),f,b
  2795  00314C  0100               	movlb	0	; () banked
  2796  00314E  51B4               	movf	(_tmr0BigCounts+3)& (0+255),w,b
  2797  003150  11B1               	iorwf	_tmr0BigCounts& (0+255),w,b
  2798  003152  11B2               	iorwf	(_tmr0BigCounts+1)& (0+255),w,b
  2799  003154  11B3               	iorwf	(_tmr0BigCounts+2)& (0+255),w,b
  2800  003156  B4D8               	btfsc	status,2,c
  2801  003158  D013               	goto	i2l5464
  2802                           
  2803                           ; BSR set to: 0
  2804                           ;temp-clock_main.c: 180: {
  2805                           ;temp-clock_main.c: 181: tmr0BigCounts = 0;
  2806  00315A  0E00               	movlw	0
  2807  00315C  0100               	movlb	0	; () banked
  2808  00315E  6FB1               	movwf	_tmr0BigCounts& (0+255),b
  2809  003160  0E00               	movlw	0
  2810  003162  0100               	movlb	0	; () banked
  2811  003164  6FB2               	movwf	(_tmr0BigCounts+1)& (0+255),b
  2812  003166  0E00               	movlw	0
  2813  003168  0100               	movlb	0	; () banked
  2814  00316A  6FB3               	movwf	(_tmr0BigCounts+2)& (0+255),b
  2815  00316C  0E00               	movlw	0
  2816  00316E  0100               	movlb	0	; () banked
  2817  003170  6FB4               	movwf	(_tmr0BigCounts+3)& (0+255),b
  2818                           
  2819                           ;temp-clock_main.c: 182: TMR0 = (65536-32767);
  2820  003172  0E80               	movlw	128
  2821  003174  6ED7               	movwf	4055,c	;volatile
  2822  003176  0E01               	movlw	1
  2823  003178  6ED6               	movwf	4054,c	;volatile
  2824                           
  2825                           ; BSR set to: 0
  2826                           ;temp-clock_main.c: 183: TMR0ON = 1;
  2827  00317A  8ED5               	bsf	4053,7,c	;volatile
  2828                           
  2829                           ; BSR set to: 0
  2830                           ;temp-clock_main.c: 185: buttons();
  2831  00317C  EC64  F007         	call	_buttons	;wreg free
  2832  003180                     i2l5464:
  2833                           
  2834                           ;temp-clock_main.c: 187: }
  2835                           ;temp-clock_main.c: 188: TMR0ON = 1;
  2836  003180  8ED5               	bsf	4053,7,c	;volatile
  2837  003182                     i2l5466:
  2838                           
  2839                           ;temp-clock_main.c: 189: }
  2840                           ;temp-clock_main.c: 190: GIE = 1;
  2841  003182  8EF2               	bsf	intcon,7,c	;volatile
  2842  003184  C0A7  FFF5         	movff	??_isr+13,tablat
  2843  003188  C0A6  FFF8         	movff	??_isr+12,tblptru
  2844  00318C  C0A5  FFF7         	movff	??_isr+11,tblptrh
  2845  003190  C0A4  FFF6         	movff	??_isr+10,tblptrl
  2846  003194  C0A3  FFF4         	movff	??_isr+9,prodh
  2847  003198  C0A2  FFF3         	movff	??_isr+8,prodl
  2848  00319C  C0A1  FFDA         	movff	??_isr+7,fsr2h
  2849  0031A0  C0A0  FFD9         	movff	??_isr+6,fsr2l
  2850  0031A4  C09F  FFE2         	movff	??_isr+5,fsr1h
  2851  0031A8  C09E  FFE1         	movff	??_isr+4,fsr1l
  2852  0031AC  C09D  FFEA         	movff	??_isr+3,fsr0h
  2853  0031B0  C09C  FFE9         	movff	??_isr+2,fsr0l
  2854  0031B4  C09B  FFFB         	movff	??_isr+1,pclatu
  2855  0031B8  C09A  FFFA         	movff	??_isr,pclath
  2856  0031BC  0011               	retfie		f
  2857  0031BE                     __end_of_isr:
  2858                           	opt stack 0
  2859                           tosu	equ	0xFFF
  2860                           tosh	equ	0xFFE
  2861                           tosl	equ	0xFFD
  2862                           pclatu	equ	0xFFB
  2863                           pclath	equ	0xFFA
  2864                           tblptru	equ	0xFF8
  2865                           tblptrh	equ	0xFF7
  2866                           tblptrl	equ	0xFF6
  2867                           tablat	equ	0xFF5
  2868                           prodh	equ	0xFF4
  2869                           prodl	equ	0xFF3
  2870                           intcon	equ	0xFF2
  2871                           intcon2	equ	0xFF1
  2872                           postinc0	equ	0xFEE
  2873                           fsr0h	equ	0xFEA
  2874                           fsr0l	equ	0xFE9
  2875                           wreg	equ	0xFE8
  2876                           postinc1	equ	0xFE6
  2877                           postdec1	equ	0xFE5
  2878                           fsr1h	equ	0xFE2
  2879                           fsr1l	equ	0xFE1
  2880                           indf2	equ	0xFDF
  2881                           postinc2	equ	0xFDE
  2882                           postdec2	equ	0xFDD
  2883                           fsr2h	equ	0xFDA
  2884                           fsr2l	equ	0xFD9
  2885                           status	equ	0xFD8
  2886                           
  2887 ;; *************** function _update *****************
  2888 ;; Defined at:
  2889 ;;		line 12 in file "disp.c"
  2890 ;; Parameters:    Size  Location     Type
  2891 ;;		None
  2892 ;; Auto vars:     Size  Location     Type
  2893 ;;  cnt             1   32[COMRAM] char 
  2894 ;; Return value:  Size  Location     Type
  2895 ;;		None               void
  2896 ;; Registers used:
  2897 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2898 ;; Tracked objects:
  2899 ;;		On entry : 0/0
  2900 ;;		On exit  : 0/0
  2901 ;;		Unchanged: 0/0
  2902 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2903 ;;      Params:         0       0       0       0       0       0       0       0       0
  2904 ;;      Locals:         1       0       0       0       0       0       0       0       0
  2905 ;;      Temps:          5       0       0       0       0       0       0       0       0
  2906 ;;      Totals:         6       0       0       0       0       0       0       0       0
  2907 ;;Total ram usage:        6 bytes
  2908 ;; Hardware stack levels used:    1
  2909 ;; Hardware stack levels required when called:    3
  2910 ;; This function calls:
  2911 ;;		_spi
  2912 ;;		_writeDigit
  2913 ;; This function is called by:
  2914 ;;		_isr
  2915 ;; This function uses a non-reentrant model
  2916 ;;
  2917                           
  2918                           	psect	text10
  2919  0013E8                     __ptext10:
  2920                           	opt stack 0
  2921  0013E8                     _update:
  2922                           	opt stack 22
  2923                           
  2924                           ;disp.c: 14: if (!screen.changed)
  2925                           
  2926                           ;incstack = 0
  2927  0013E8  0100               	movlb	0	; () banked
  2928  0013EA  51DF               	movf	(_screen+12)& (0+255),w,b
  2929  0013EC  11DE               	iorwf	(_screen+11)& (0+255),w,b
  2930  0013EE  B4D8               	btfsc	status,2,c
  2931  0013F0  D223               	goto	i2l58
  2932                           
  2933                           ; BSR set to: 0
  2934                           ;disp.c: 17: }
  2935                           ;disp.c: 18: int8_t cnt;
  2936                           ;disp.c: 19: for (cnt = 15; cnt >= 0; cnt--)
  2937                           
  2938                           ; BSR set to: 0
  2939                           
  2940                           ; BSR set to: 0
  2941                           ;disp.c: 15: {
  2942                           ;disp.c: 16: return;
  2943  0013F2  0E0F               	movlw	15
  2944  0013F4  6E21               	movwf	update@cnt,c
  2945  0013F6                     
  2946                           ; BSR set to: 0
  2947  0013F6  BE21               	btfsc	update@cnt,7,c
  2948  0013F8  D21F               	goto	i2l58
  2949  0013FA  D046               	goto	i2l5074
  2950  0013FC                     i2l5060:
  2951                           
  2952                           ; BSR set to: 0
  2953                           ;disp.c: 24: writeDigit(1 << cnt, screen.digits.screen[cnt].bits);
  2954  0013FC  5021               	movf	update@cnt,w,c
  2955  0013FE  0D01               	mullw	1
  2956  001400  0100               	movlb	0	; () banked
  2957  001402  0ED3               	movlw	low _screen
  2958  001404  24F3               	addwf	prodl,w,c
  2959  001406  6ED9               	movwf	fsr2l,c
  2960  001408  0100               	movlb	0	; () banked
  2961  00140A  0E00               	movlw	high _screen
  2962  00140C  20F4               	addwfc	prodh,w,c
  2963  00140E  6EDA               	movwf	fsr2h,c
  2964  001410  50DF               	movf	indf2,w,c
  2965  001412  6E14               	movwf	writeDigit@segs,c
  2966  001414  C021  F01C         	movff	update@cnt,??_update
  2967  001418  0E01               	movlw	1
  2968  00141A  6E1D               	movwf	(??_update+1)& (0+255),c
  2969  00141C  2A1C               	incf	??_update,f,c
  2970  00141E  D002               	goto	i2u538_44
  2971  001420                     i2u538_45:
  2972  001420  90D8               	bcf	status,0,c
  2973  001422  361D               	rlcf	??_update+1,f,c
  2974  001424                     i2u538_44:
  2975  001424  2E1C               	decfsz	??_update,f,c
  2976  001426  D7FC               	goto	i2u538_45
  2977  001428  501D               	movf	??_update+1,w,c
  2978  00142A  EC45  F021         	call	_writeDigit
  2979                           
  2980                           ;disp.c: 25: break;
  2981  00142E  D1EC               	goto	i2l5076
  2982  001430                     i2l5062:
  2983                           
  2984                           ;disp.c: 27: spi(0b1001, screen.decode);
  2985  001430  0100               	movlb	0	; () banked
  2986  001432  51DB               	movf	(_screen+8)& (0+255),w,b
  2987  001434  0BFF               	andlw	255
  2988  001436  6E07               	movwf	spi@data,c
  2989  001438  0E09               	movlw	9
  2990  00143A  EC16  F01E         	call	_spi
  2991                           
  2992                           ;disp.c: 28: break;
  2993  00143E  D1E4               	goto	i2l5076
  2994  001440                     i2l5064:
  2995                           
  2996                           ;disp.c: 30: spi(0b1010, screen.brightness);
  2997  001440  0100               	movlb	0	; () banked
  2998  001442  51DC               	movf	(_screen+9)& (0+255),w,b
  2999  001444  0B0F               	andlw	15
  3000  001446  6E07               	movwf	spi@data,c
  3001  001448  0E0A               	movlw	10
  3002  00144A  EC16  F01E         	call	_spi
  3003                           
  3004                           ;disp.c: 31: break;
  3005  00144E  D1DC               	goto	i2l5076
  3006  001450                     i2l5066:
  3007                           
  3008                           ;disp.c: 33: spi(0b1011, screen.scan);
  3009  001450  0100               	movlb	0	; () banked
  3010  001452  39DC               	swapf	(_screen+9)& (0+255),w,b
  3011  001454  0B07               	andlw	7
  3012  001456  6E07               	movwf	spi@data,c
  3013  001458  0E0B               	movlw	11
  3014  00145A  EC16  F01E         	call	_spi
  3015                           
  3016                           ;disp.c: 34: break;
  3017  00145E  D1D4               	goto	i2l5076
  3018  001460                     i2l5068:
  3019                           
  3020                           ;disp.c: 36: spi(0b1111, screen.test);
  3021  001460  0E00               	movlw	0
  3022  001462  0100               	movlb	0	; () banked
  3023  001464  BFDC               	btfsc	(_screen+9)& (0+255),7,b
  3024  001466  0E01               	movlw	1
  3025  001468  6E07               	movwf	spi@data,c
  3026  00146A  0E0F               	movlw	15
  3027  00146C  EC16  F01E         	call	_spi
  3028                           
  3029                           ;disp.c: 37: break;
  3030  001470  D1CB               	goto	i2l5076
  3031  001472                     i2l5070:
  3032                           
  3033                           ;disp.c: 39: spi(0b1100, !screen.shutdown);
  3034  001472  0100               	movlb	0	; () banked
  3035  001474  B1DD               	btfsc	(_screen+10)& (0+255),0,b
  3036  001476  D002               	goto	i2u539_40
  3037  001478  0E01               	movlw	1
  3038  00147A  D001               	goto	i2u539_46
  3039  00147C                     i2u539_40:
  3040  00147C  0E00               	movlw	0
  3041  00147E                     i2u539_46:
  3042  00147E  6E07               	movwf	spi@data,c
  3043  001480  0E0C               	movlw	12
  3044  001482  EC16  F01E         	call	_spi
  3045                           
  3046                           ;disp.c: 40: break;
  3047  001486  D1C0               	goto	i2l5076
  3048  001488                     i2l5074:
  3049  001488  C021  F01C         	movff	update@cnt,??_update
  3050  00148C  0E01               	movlw	1
  3051  00148E  6E1D               	movwf	(??_update+1)& (0+255),c
  3052  001490  6A1E               	clrf	(??_update+2)& (0+255),c
  3053  001492  2A1C               	incf	??_update,f,c
  3054  001494  D003               	goto	i2u540_44
  3055  001496                     i2u540_45:
  3056  001496  90D8               	bcf	status,0,c
  3057  001498  361D               	rlcf	??_update+1,f,c
  3058  00149A  361E               	rlcf	??_update+2,f,c
  3059  00149C                     i2u540_44:
  3060  00149C  2E1C               	decfsz	??_update,f,c
  3061  00149E  D7FB               	goto	i2u540_45
  3062  0014A0  0100               	movlb	0	; () banked
  3063  0014A2  51DE               	movf	(_screen+11)& (0+255),w,b
  3064  0014A4  161D               	andwf	??_update+1,f,c
  3065  0014A6  0100               	movlb	0	; () banked
  3066  0014A8  51DF               	movf	(_screen+12)& (0+255),w,b
  3067  0014AA  161E               	andwf	??_update+2,f,c
  3068                           
  3069                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 6 sub-sw
      +                          itches
  3070                           ; Switch size 1, requested type "space"
  3071                           ; Number of cases is 6, Range of values is 0 to 32
  3072                           ; switch strategies available:
  3073                           ; Name         Instructions Cycles
  3074                           ; simple_byte           19    10 (average)
  3075                           ;	Chosen strategy is simple_byte
  3076  0014AC  501E               	movf	??_update+2,w,c
  3077  0014AE  0A00               	xorlw	0	; case 0
  3078  0014B0  B4D8               	btfsc	status,2,c
  3079  0014B2  D010               	goto	i2l5890
  3080  0014B4  0A02               	xorlw	2	; case 2
  3081  0014B6  B4D8               	btfsc	status,2,c
  3082  0014B8  D18F               	goto	i2l5892
  3083  0014BA  0A06               	xorlw	6	; case 4
  3084  0014BC  B4D8               	btfsc	status,2,c
  3085  0014BE  D191               	goto	i2l5894
  3086  0014C0  0A0C               	xorlw	12	; case 8
  3087  0014C2  B4D8               	btfsc	status,2,c
  3088  0014C4  D193               	goto	i2l5896
  3089  0014C6  0A18               	xorlw	24	; case 16
  3090  0014C8  B4D8               	btfsc	status,2,c
  3091  0014CA  D195               	goto	i2l5898
  3092  0014CC  0A30               	xorlw	48	; case 32
  3093  0014CE  B4D8               	btfsc	status,2,c
  3094  0014D0  D197               	goto	i2l5900
  3095  0014D2  D19A               	goto	i2l5076
  3096  0014D4                     i2l5890:
  3097                           
  3098                           ; BSR set to: 0
  3099                           ; Switch size 1, requested type "space"
  3100                           ; Number of cases is 128, Range of values is 1 to 128
  3101                           ; switch strategies available:
  3102                           ; Name         Instructions Cycles
  3103                           ; simple_byte          385   193 (average)
  3104                           ;	Chosen strategy is simple_byte
  3105  0014D4  501D               	movf	??_update+1,w,c
  3106  0014D6  0A01               	xorlw	1	; case 1
  3107  0014D8  B4D8               	btfsc	status,2,c
  3108  0014DA  D790               	goto	i2l5060
  3109  0014DC  0A03               	xorlw	3	; case 2
  3110  0014DE  B4D8               	btfsc	status,2,c
  3111  0014E0  D78D               	goto	i2l5060
  3112  0014E2  0A01               	xorlw	1	; case 3
  3113  0014E4  B4D8               	btfsc	status,2,c
  3114  0014E6  D78A               	goto	i2l5060
  3115  0014E8  0A07               	xorlw	7	; case 4
  3116  0014EA  B4D8               	btfsc	status,2,c
  3117  0014EC  D787               	goto	i2l5060
  3118  0014EE  0A01               	xorlw	1	; case 5
  3119  0014F0  B4D8               	btfsc	status,2,c
  3120  0014F2  D784               	goto	i2l5060
  3121  0014F4  0A03               	xorlw	3	; case 6
  3122  0014F6  B4D8               	btfsc	status,2,c
  3123  0014F8  D781               	goto	i2l5060
  3124  0014FA  0A01               	xorlw	1	; case 7
  3125  0014FC  B4D8               	btfsc	status,2,c
  3126  0014FE  D77E               	goto	i2l5060
  3127  001500  0A0F               	xorlw	15	; case 8
  3128  001502  B4D8               	btfsc	status,2,c
  3129  001504  D77B               	goto	i2l5060
  3130  001506  0A01               	xorlw	1	; case 9
  3131  001508  B4D8               	btfsc	status,2,c
  3132  00150A  D778               	goto	i2l5060
  3133  00150C  0A03               	xorlw	3	; case 10
  3134  00150E  B4D8               	btfsc	status,2,c
  3135  001510  D775               	goto	i2l5060
  3136  001512  0A01               	xorlw	1	; case 11
  3137  001514  B4D8               	btfsc	status,2,c
  3138  001516  D772               	goto	i2l5060
  3139  001518  0A07               	xorlw	7	; case 12
  3140  00151A  B4D8               	btfsc	status,2,c
  3141  00151C  D76F               	goto	i2l5060
  3142  00151E  0A01               	xorlw	1	; case 13
  3143  001520  B4D8               	btfsc	status,2,c
  3144  001522  D76C               	goto	i2l5060
  3145  001524  0A03               	xorlw	3	; case 14
  3146  001526  B4D8               	btfsc	status,2,c
  3147  001528  D769               	goto	i2l5060
  3148  00152A  0A01               	xorlw	1	; case 15
  3149  00152C  B4D8               	btfsc	status,2,c
  3150  00152E  D766               	goto	i2l5060
  3151  001530  0A1F               	xorlw	31	; case 16
  3152  001532  B4D8               	btfsc	status,2,c
  3153  001534  D763               	goto	i2l5060
  3154  001536  0A01               	xorlw	1	; case 17
  3155  001538  B4D8               	btfsc	status,2,c
  3156  00153A  D760               	goto	i2l5060
  3157  00153C  0A03               	xorlw	3	; case 18
  3158  00153E  B4D8               	btfsc	status,2,c
  3159  001540  D75D               	goto	i2l5060
  3160  001542  0A01               	xorlw	1	; case 19
  3161  001544  B4D8               	btfsc	status,2,c
  3162  001546  D75A               	goto	i2l5060
  3163  001548  0A07               	xorlw	7	; case 20
  3164  00154A  B4D8               	btfsc	status,2,c
  3165  00154C  D757               	goto	i2l5060
  3166  00154E  0A01               	xorlw	1	; case 21
  3167  001550  B4D8               	btfsc	status,2,c
  3168  001552  D754               	goto	i2l5060
  3169  001554  0A03               	xorlw	3	; case 22
  3170  001556  B4D8               	btfsc	status,2,c
  3171  001558  D751               	goto	i2l5060
  3172  00155A  0A01               	xorlw	1	; case 23
  3173  00155C  B4D8               	btfsc	status,2,c
  3174  00155E  D74E               	goto	i2l5060
  3175  001560  0A0F               	xorlw	15	; case 24
  3176  001562  B4D8               	btfsc	status,2,c
  3177  001564  D74B               	goto	i2l5060
  3178  001566  0A01               	xorlw	1	; case 25
  3179  001568  B4D8               	btfsc	status,2,c
  3180  00156A  D748               	goto	i2l5060
  3181  00156C  0A03               	xorlw	3	; case 26
  3182  00156E  B4D8               	btfsc	status,2,c
  3183  001570  D745               	goto	i2l5060
  3184  001572  0A01               	xorlw	1	; case 27
  3185  001574  B4D8               	btfsc	status,2,c
  3186  001576  D742               	goto	i2l5060
  3187  001578  0A07               	xorlw	7	; case 28
  3188  00157A  B4D8               	btfsc	status,2,c
  3189  00157C  D73F               	goto	i2l5060
  3190  00157E  0A01               	xorlw	1	; case 29
  3191  001580  B4D8               	btfsc	status,2,c
  3192  001582  D73C               	goto	i2l5060
  3193  001584  0A03               	xorlw	3	; case 30
  3194  001586  B4D8               	btfsc	status,2,c
  3195  001588  D739               	goto	i2l5060
  3196  00158A  0A01               	xorlw	1	; case 31
  3197  00158C  B4D8               	btfsc	status,2,c
  3198  00158E  D736               	goto	i2l5060
  3199  001590  0A3F               	xorlw	63	; case 32
  3200  001592  B4D8               	btfsc	status,2,c
  3201  001594  D733               	goto	i2l5060
  3202  001596  0A01               	xorlw	1	; case 33
  3203  001598  B4D8               	btfsc	status,2,c
  3204  00159A  D730               	goto	i2l5060
  3205  00159C  0A03               	xorlw	3	; case 34
  3206  00159E  B4D8               	btfsc	status,2,c
  3207  0015A0  D72D               	goto	i2l5060
  3208  0015A2  0A01               	xorlw	1	; case 35
  3209  0015A4  B4D8               	btfsc	status,2,c
  3210  0015A6  D72A               	goto	i2l5060
  3211  0015A8  0A07               	xorlw	7	; case 36
  3212  0015AA  B4D8               	btfsc	status,2,c
  3213  0015AC  D727               	goto	i2l5060
  3214  0015AE  0A01               	xorlw	1	; case 37
  3215  0015B0  B4D8               	btfsc	status,2,c
  3216  0015B2  D724               	goto	i2l5060
  3217  0015B4  0A03               	xorlw	3	; case 38
  3218  0015B6  B4D8               	btfsc	status,2,c
  3219  0015B8  D721               	goto	i2l5060
  3220  0015BA  0A01               	xorlw	1	; case 39
  3221  0015BC  B4D8               	btfsc	status,2,c
  3222  0015BE  D71E               	goto	i2l5060
  3223  0015C0  0A0F               	xorlw	15	; case 40
  3224  0015C2  B4D8               	btfsc	status,2,c
  3225  0015C4  D71B               	goto	i2l5060
  3226  0015C6  0A01               	xorlw	1	; case 41
  3227  0015C8  B4D8               	btfsc	status,2,c
  3228  0015CA  D718               	goto	i2l5060
  3229  0015CC  0A03               	xorlw	3	; case 42
  3230  0015CE  B4D8               	btfsc	status,2,c
  3231  0015D0  D715               	goto	i2l5060
  3232  0015D2  0A01               	xorlw	1	; case 43
  3233  0015D4  B4D8               	btfsc	status,2,c
  3234  0015D6  D712               	goto	i2l5060
  3235  0015D8  0A07               	xorlw	7	; case 44
  3236  0015DA  B4D8               	btfsc	status,2,c
  3237  0015DC  D70F               	goto	i2l5060
  3238  0015DE  0A01               	xorlw	1	; case 45
  3239  0015E0  B4D8               	btfsc	status,2,c
  3240  0015E2  D70C               	goto	i2l5060
  3241  0015E4  0A03               	xorlw	3	; case 46
  3242  0015E6  B4D8               	btfsc	status,2,c
  3243  0015E8  D709               	goto	i2l5060
  3244  0015EA  0A01               	xorlw	1	; case 47
  3245  0015EC  B4D8               	btfsc	status,2,c
  3246  0015EE  D706               	goto	i2l5060
  3247  0015F0  0A1F               	xorlw	31	; case 48
  3248  0015F2  B4D8               	btfsc	status,2,c
  3249  0015F4  D703               	goto	i2l5060
  3250  0015F6  0A01               	xorlw	1	; case 49
  3251  0015F8  B4D8               	btfsc	status,2,c
  3252  0015FA  D700               	goto	i2l5060
  3253  0015FC  0A03               	xorlw	3	; case 50
  3254  0015FE  B4D8               	btfsc	status,2,c
  3255  001600  D6FD               	goto	i2l5060
  3256  001602  0A01               	xorlw	1	; case 51
  3257  001604  B4D8               	btfsc	status,2,c
  3258  001606  D6FA               	goto	i2l5060
  3259  001608  0A07               	xorlw	7	; case 52
  3260  00160A  B4D8               	btfsc	status,2,c
  3261  00160C  D6F7               	goto	i2l5060
  3262  00160E  0A01               	xorlw	1	; case 53
  3263  001610  B4D8               	btfsc	status,2,c
  3264  001612  D6F4               	goto	i2l5060
  3265  001614  0A03               	xorlw	3	; case 54
  3266  001616  B4D8               	btfsc	status,2,c
  3267  001618  D6F1               	goto	i2l5060
  3268  00161A  0A01               	xorlw	1	; case 55
  3269  00161C  B4D8               	btfsc	status,2,c
  3270  00161E  D6EE               	goto	i2l5060
  3271  001620  0A0F               	xorlw	15	; case 56
  3272  001622  B4D8               	btfsc	status,2,c
  3273  001624  D6EB               	goto	i2l5060
  3274  001626  0A01               	xorlw	1	; case 57
  3275  001628  B4D8               	btfsc	status,2,c
  3276  00162A  D6E8               	goto	i2l5060
  3277  00162C  0A03               	xorlw	3	; case 58
  3278  00162E  B4D8               	btfsc	status,2,c
  3279  001630  D6E5               	goto	i2l5060
  3280  001632  0A01               	xorlw	1	; case 59
  3281  001634  B4D8               	btfsc	status,2,c
  3282  001636  D6E2               	goto	i2l5060
  3283  001638  0A07               	xorlw	7	; case 60
  3284  00163A  B4D8               	btfsc	status,2,c
  3285  00163C  D6DF               	goto	i2l5060
  3286  00163E  0A01               	xorlw	1	; case 61
  3287  001640  B4D8               	btfsc	status,2,c
  3288  001642  D6DC               	goto	i2l5060
  3289  001644  0A03               	xorlw	3	; case 62
  3290  001646  B4D8               	btfsc	status,2,c
  3291  001648  D6D9               	goto	i2l5060
  3292  00164A  0A01               	xorlw	1	; case 63
  3293  00164C  B4D8               	btfsc	status,2,c
  3294  00164E  D6D6               	goto	i2l5060
  3295  001650  0A7F               	xorlw	127	; case 64
  3296  001652  B4D8               	btfsc	status,2,c
  3297  001654  D6D3               	goto	i2l5060
  3298  001656  0A01               	xorlw	1	; case 65
  3299  001658  B4D8               	btfsc	status,2,c
  3300  00165A  D6D0               	goto	i2l5060
  3301  00165C  0A03               	xorlw	3	; case 66
  3302  00165E  B4D8               	btfsc	status,2,c
  3303  001660  D6CD               	goto	i2l5060
  3304  001662  0A01               	xorlw	1	; case 67
  3305  001664  B4D8               	btfsc	status,2,c
  3306  001666  D6CA               	goto	i2l5060
  3307  001668  0A07               	xorlw	7	; case 68
  3308  00166A  B4D8               	btfsc	status,2,c
  3309  00166C  D6C7               	goto	i2l5060
  3310  00166E  0A01               	xorlw	1	; case 69
  3311  001670  B4D8               	btfsc	status,2,c
  3312  001672  D6C4               	goto	i2l5060
  3313  001674  0A03               	xorlw	3	; case 70
  3314  001676  B4D8               	btfsc	status,2,c
  3315  001678  D6C1               	goto	i2l5060
  3316  00167A  0A01               	xorlw	1	; case 71
  3317  00167C  B4D8               	btfsc	status,2,c
  3318  00167E  D6BE               	goto	i2l5060
  3319  001680  0A0F               	xorlw	15	; case 72
  3320  001682  B4D8               	btfsc	status,2,c
  3321  001684  D6BB               	goto	i2l5060
  3322  001686  0A01               	xorlw	1	; case 73
  3323  001688  B4D8               	btfsc	status,2,c
  3324  00168A  D6B8               	goto	i2l5060
  3325  00168C  0A03               	xorlw	3	; case 74
  3326  00168E  B4D8               	btfsc	status,2,c
  3327  001690  D6B5               	goto	i2l5060
  3328  001692  0A01               	xorlw	1	; case 75
  3329  001694  B4D8               	btfsc	status,2,c
  3330  001696  D6B2               	goto	i2l5060
  3331  001698  0A07               	xorlw	7	; case 76
  3332  00169A  B4D8               	btfsc	status,2,c
  3333  00169C  D6AF               	goto	i2l5060
  3334  00169E  0A01               	xorlw	1	; case 77
  3335  0016A0  B4D8               	btfsc	status,2,c
  3336  0016A2  D6AC               	goto	i2l5060
  3337  0016A4  0A03               	xorlw	3	; case 78
  3338  0016A6  B4D8               	btfsc	status,2,c
  3339  0016A8  D6A9               	goto	i2l5060
  3340  0016AA  0A01               	xorlw	1	; case 79
  3341  0016AC  B4D8               	btfsc	status,2,c
  3342  0016AE  D6A6               	goto	i2l5060
  3343  0016B0  0A1F               	xorlw	31	; case 80
  3344  0016B2  B4D8               	btfsc	status,2,c
  3345  0016B4  D6A3               	goto	i2l5060
  3346  0016B6  0A01               	xorlw	1	; case 81
  3347  0016B8  B4D8               	btfsc	status,2,c
  3348  0016BA  D6A0               	goto	i2l5060
  3349  0016BC  0A03               	xorlw	3	; case 82
  3350  0016BE  B4D8               	btfsc	status,2,c
  3351  0016C0  D69D               	goto	i2l5060
  3352  0016C2  0A01               	xorlw	1	; case 83
  3353  0016C4  B4D8               	btfsc	status,2,c
  3354  0016C6  D69A               	goto	i2l5060
  3355  0016C8  0A07               	xorlw	7	; case 84
  3356  0016CA  B4D8               	btfsc	status,2,c
  3357  0016CC  D697               	goto	i2l5060
  3358  0016CE  0A01               	xorlw	1	; case 85
  3359  0016D0  B4D8               	btfsc	status,2,c
  3360  0016D2  D694               	goto	i2l5060
  3361  0016D4  0A03               	xorlw	3	; case 86
  3362  0016D6  B4D8               	btfsc	status,2,c
  3363  0016D8  D691               	goto	i2l5060
  3364  0016DA  0A01               	xorlw	1	; case 87
  3365  0016DC  B4D8               	btfsc	status,2,c
  3366  0016DE  D68E               	goto	i2l5060
  3367  0016E0  0A0F               	xorlw	15	; case 88
  3368  0016E2  B4D8               	btfsc	status,2,c
  3369  0016E4  D68B               	goto	i2l5060
  3370  0016E6  0A01               	xorlw	1	; case 89
  3371  0016E8  B4D8               	btfsc	status,2,c
  3372  0016EA  D688               	goto	i2l5060
  3373  0016EC  0A03               	xorlw	3	; case 90
  3374  0016EE  B4D8               	btfsc	status,2,c
  3375  0016F0  D685               	goto	i2l5060
  3376  0016F2  0A01               	xorlw	1	; case 91
  3377  0016F4  B4D8               	btfsc	status,2,c
  3378  0016F6  D682               	goto	i2l5060
  3379  0016F8  0A07               	xorlw	7	; case 92
  3380  0016FA  B4D8               	btfsc	status,2,c
  3381  0016FC  D67F               	goto	i2l5060
  3382  0016FE  0A01               	xorlw	1	; case 93
  3383  001700  B4D8               	btfsc	status,2,c
  3384  001702  D67C               	goto	i2l5060
  3385  001704  0A03               	xorlw	3	; case 94
  3386  001706  B4D8               	btfsc	status,2,c
  3387  001708  D679               	goto	i2l5060
  3388  00170A  0A01               	xorlw	1	; case 95
  3389  00170C  B4D8               	btfsc	status,2,c
  3390  00170E  D676               	goto	i2l5060
  3391  001710  0A3F               	xorlw	63	; case 96
  3392  001712  B4D8               	btfsc	status,2,c
  3393  001714  D673               	goto	i2l5060
  3394  001716  0A01               	xorlw	1	; case 97
  3395  001718  B4D8               	btfsc	status,2,c
  3396  00171A  D670               	goto	i2l5060
  3397  00171C  0A03               	xorlw	3	; case 98
  3398  00171E  B4D8               	btfsc	status,2,c
  3399  001720  D66D               	goto	i2l5060
  3400  001722  0A01               	xorlw	1	; case 99
  3401  001724  B4D8               	btfsc	status,2,c
  3402  001726  D66A               	goto	i2l5060
  3403  001728  0A07               	xorlw	7	; case 100
  3404  00172A  B4D8               	btfsc	status,2,c
  3405  00172C  D667               	goto	i2l5060
  3406  00172E  0A01               	xorlw	1	; case 101
  3407  001730  B4D8               	btfsc	status,2,c
  3408  001732  D664               	goto	i2l5060
  3409  001734  0A03               	xorlw	3	; case 102
  3410  001736  B4D8               	btfsc	status,2,c
  3411  001738  D661               	goto	i2l5060
  3412  00173A  0A01               	xorlw	1	; case 103
  3413  00173C  B4D8               	btfsc	status,2,c
  3414  00173E  D65E               	goto	i2l5060
  3415  001740  0A0F               	xorlw	15	; case 104
  3416  001742  B4D8               	btfsc	status,2,c
  3417  001744  D65B               	goto	i2l5060
  3418  001746  0A01               	xorlw	1	; case 105
  3419  001748  B4D8               	btfsc	status,2,c
  3420  00174A  D658               	goto	i2l5060
  3421  00174C  0A03               	xorlw	3	; case 106
  3422  00174E  B4D8               	btfsc	status,2,c
  3423  001750  D655               	goto	i2l5060
  3424  001752  0A01               	xorlw	1	; case 107
  3425  001754  B4D8               	btfsc	status,2,c
  3426  001756  D652               	goto	i2l5060
  3427  001758  0A07               	xorlw	7	; case 108
  3428  00175A  B4D8               	btfsc	status,2,c
  3429  00175C  D64F               	goto	i2l5060
  3430  00175E  0A01               	xorlw	1	; case 109
  3431  001760  B4D8               	btfsc	status,2,c
  3432  001762  D64C               	goto	i2l5060
  3433  001764  0A03               	xorlw	3	; case 110
  3434  001766  B4D8               	btfsc	status,2,c
  3435  001768  D649               	goto	i2l5060
  3436  00176A  0A01               	xorlw	1	; case 111
  3437  00176C  B4D8               	btfsc	status,2,c
  3438  00176E  D646               	goto	i2l5060
  3439  001770  0A1F               	xorlw	31	; case 112
  3440  001772  B4D8               	btfsc	status,2,c
  3441  001774  D643               	goto	i2l5060
  3442  001776  0A01               	xorlw	1	; case 113
  3443  001778  B4D8               	btfsc	status,2,c
  3444  00177A  D640               	goto	i2l5060
  3445  00177C  0A03               	xorlw	3	; case 114
  3446  00177E  B4D8               	btfsc	status,2,c
  3447  001780  D63D               	goto	i2l5060
  3448  001782  0A01               	xorlw	1	; case 115
  3449  001784  B4D8               	btfsc	status,2,c
  3450  001786  D63A               	goto	i2l5060
  3451  001788  0A07               	xorlw	7	; case 116
  3452  00178A  B4D8               	btfsc	status,2,c
  3453  00178C  D637               	goto	i2l5060
  3454  00178E  0A01               	xorlw	1	; case 117
  3455  001790  B4D8               	btfsc	status,2,c
  3456  001792  D634               	goto	i2l5060
  3457  001794  0A03               	xorlw	3	; case 118
  3458  001796  B4D8               	btfsc	status,2,c
  3459  001798  D631               	goto	i2l5060
  3460  00179A  0A01               	xorlw	1	; case 119
  3461  00179C  B4D8               	btfsc	status,2,c
  3462  00179E  D62E               	goto	i2l5060
  3463  0017A0  0A0F               	xorlw	15	; case 120
  3464  0017A2  B4D8               	btfsc	status,2,c
  3465  0017A4  D62B               	goto	i2l5060
  3466  0017A6  0A01               	xorlw	1	; case 121
  3467  0017A8  B4D8               	btfsc	status,2,c
  3468  0017AA  D628               	goto	i2l5060
  3469  0017AC  0A03               	xorlw	3	; case 122
  3470  0017AE  B4D8               	btfsc	status,2,c
  3471  0017B0  D625               	goto	i2l5060
  3472  0017B2  0A01               	xorlw	1	; case 123
  3473  0017B4  B4D8               	btfsc	status,2,c
  3474  0017B6  D622               	goto	i2l5060
  3475  0017B8  0A07               	xorlw	7	; case 124
  3476  0017BA  B4D8               	btfsc	status,2,c
  3477  0017BC  D61F               	goto	i2l5060
  3478  0017BE  0A01               	xorlw	1	; case 125
  3479  0017C0  B4D8               	btfsc	status,2,c
  3480  0017C2  D61C               	goto	i2l5060
  3481  0017C4  0A03               	xorlw	3	; case 126
  3482  0017C6  B4D8               	btfsc	status,2,c
  3483  0017C8  D619               	goto	i2l5060
  3484  0017CA  0A01               	xorlw	1	; case 127
  3485  0017CC  B4D8               	btfsc	status,2,c
  3486  0017CE  D616               	goto	i2l5060
  3487  0017D0  0AFF               	xorlw	255	; case 128
  3488  0017D2  B4D8               	btfsc	status,2,c
  3489  0017D4  D613               	goto	i2l5060
  3490  0017D6  D018               	goto	i2l5076
  3491  0017D8                     i2l5892:
  3492                           
  3493                           ; BSR set to: 0
  3494                           ; Switch size 1, requested type "space"
  3495                           ; Number of cases is 1, Range of values is 0 to 0
  3496                           ; switch strategies available:
  3497                           ; Name         Instructions Cycles
  3498                           ; simple_byte            4     3 (average)
  3499                           ;	Chosen strategy is simple_byte
  3500  0017D8  501D               	movf	??_update+1,w,c
  3501  0017DA  0A00               	xorlw	0	; case 0
  3502  0017DC  B4D8               	btfsc	status,2,c
  3503  0017DE  D628               	goto	i2l5062
  3504  0017E0  D013               	goto	i2l5076
  3505  0017E2                     i2l5894:
  3506                           
  3507                           ; BSR set to: 0
  3508                           ; Switch size 1, requested type "space"
  3509                           ; Number of cases is 1, Range of values is 0 to 0
  3510                           ; switch strategies available:
  3511                           ; Name         Instructions Cycles
  3512                           ; simple_byte            4     3 (average)
  3513                           ;	Chosen strategy is simple_byte
  3514  0017E2  501D               	movf	??_update+1,w,c
  3515  0017E4  0A00               	xorlw	0	; case 0
  3516  0017E6  B4D8               	btfsc	status,2,c
  3517  0017E8  D62B               	goto	i2l5064
  3518  0017EA  D00E               	goto	i2l5076
  3519  0017EC                     i2l5896:
  3520                           
  3521                           ; BSR set to: 0
  3522                           ; Switch size 1, requested type "space"
  3523                           ; Number of cases is 1, Range of values is 0 to 0
  3524                           ; switch strategies available:
  3525                           ; Name         Instructions Cycles
  3526                           ; simple_byte            4     3 (average)
  3527                           ;	Chosen strategy is simple_byte
  3528  0017EC  501D               	movf	??_update+1,w,c
  3529  0017EE  0A00               	xorlw	0	; case 0
  3530  0017F0  B4D8               	btfsc	status,2,c
  3531  0017F2  D62E               	goto	i2l5066
  3532  0017F4  D009               	goto	i2l5076
  3533  0017F6                     i2l5898:
  3534                           
  3535                           ; BSR set to: 0
  3536                           ; Switch size 1, requested type "space"
  3537                           ; Number of cases is 1, Range of values is 0 to 0
  3538                           ; switch strategies available:
  3539                           ; Name         Instructions Cycles
  3540                           ; simple_byte            4     3 (average)
  3541                           ;	Chosen strategy is simple_byte
  3542  0017F6  501D               	movf	??_update+1,w,c
  3543  0017F8  0A00               	xorlw	0	; case 0
  3544  0017FA  B4D8               	btfsc	status,2,c
  3545  0017FC  D631               	goto	i2l5068
  3546  0017FE  D004               	goto	i2l5076
  3547  001800                     i2l5900:
  3548                           
  3549                           ; BSR set to: 0
  3550                           ; Switch size 1, requested type "space"
  3551                           ; Number of cases is 1, Range of values is 0 to 0
  3552                           ; switch strategies available:
  3553                           ; Name         Instructions Cycles
  3554                           ; simple_byte            4     3 (average)
  3555                           ;	Chosen strategy is simple_byte
  3556  001800  501D               	movf	??_update+1,w,c
  3557  001802  0A00               	xorlw	0	; case 0
  3558  001804  B4D8               	btfsc	status,2,c
  3559  001806  D635               	goto	i2l5070
  3560  001808                     i2l5076:
  3561                           
  3562                           ;disp.c: 44: screen.changed &= ~(1 << cnt);
  3563  001808  C021  F01C         	movff	update@cnt,??_update
  3564  00180C  0E01               	movlw	1
  3565  00180E  6E1D               	movwf	(??_update+1)& (0+255),c
  3566  001810  6A1E               	clrf	(??_update+2)& (0+255),c
  3567  001812  2A1C               	incf	??_update,f,c
  3568  001814  D003               	goto	i2u541_44
  3569  001816                     i2u541_45:
  3570  001816  90D8               	bcf	status,0,c
  3571  001818  361D               	rlcf	??_update+1,f,c
  3572  00181A  361E               	rlcf	??_update+2,f,c
  3573  00181C                     i2u541_44:
  3574  00181C  2E1C               	decfsz	??_update,f,c
  3575  00181E  D7FB               	goto	i2u541_45
  3576  001820  1C1D               	comf	??_update+1,w,c
  3577  001822  6E1F               	movwf	(??_update+3)& (0+255),c
  3578  001824  1C1E               	comf	??_update+2,w,c
  3579  001826  6E20               	movwf	(??_update+4)& (0+255),c
  3580  001828  501F               	movf	??_update+3,w,c
  3581  00182A  0100               	movlb	0	; () banked
  3582  00182C  17DE               	andwf	(_screen+11)& (0+255),f,b
  3583  00182E  5020               	movf	??_update+4,w,c
  3584  001830  0100               	movlb	0	; () banked
  3585  001832  17DF               	andwf	(_screen+12)& (0+255),f,b
  3586                           
  3587                           ; BSR set to: 0
  3588  001834  0621               	decf	update@cnt,f,c
  3589  001836  D5DF               	goto	L3
  3590  001838                     i2l58:
  3591                           
  3592                           ; BSR set to: 0
  3593  001838  0012               	return	
  3594  00183A                     __end_of_update:
  3595                           	opt stack 0
  3596                           tosu	equ	0xFFF
  3597                           tosh	equ	0xFFE
  3598                           tosl	equ	0xFFD
  3599                           pclatu	equ	0xFFB
  3600                           pclath	equ	0xFFA
  3601                           tblptru	equ	0xFF8
  3602                           tblptrh	equ	0xFF7
  3603                           tblptrl	equ	0xFF6
  3604                           tablat	equ	0xFF5
  3605                           prodh	equ	0xFF4
  3606                           prodl	equ	0xFF3
  3607                           intcon	equ	0xFF2
  3608                           intcon2	equ	0xFF1
  3609                           postinc0	equ	0xFEE
  3610                           fsr0h	equ	0xFEA
  3611                           fsr0l	equ	0xFE9
  3612                           wreg	equ	0xFE8
  3613                           postinc1	equ	0xFE6
  3614                           postdec1	equ	0xFE5
  3615                           fsr1h	equ	0xFE2
  3616                           fsr1l	equ	0xFE1
  3617                           indf2	equ	0xFDF
  3618                           postinc2	equ	0xFDE
  3619                           postdec2	equ	0xFDD
  3620                           fsr2h	equ	0xFDA
  3621                           fsr2l	equ	0xFD9
  3622                           status	equ	0xFD8
  3623                           
  3624 ;; *************** function _writeDigit *****************
  3625 ;; Defined at:
  3626 ;;		line 113 in file "disp.c"
  3627 ;; Parameters:    Size  Location     Type
  3628 ;;  digit           1    wreg     unsigned char 
  3629 ;;  segs            1   19[COMRAM] unsigned char 
  3630 ;; Auto vars:     Size  Location     Type
  3631 ;;  digit           1   24[COMRAM] unsigned char 
  3632 ;;  cnt             1   26[COMRAM] char 
  3633 ;;  dig             1   25[COMRAM] unsigned char 
  3634 ;; Return value:  Size  Location     Type
  3635 ;;		None               void
  3636 ;; Registers used:
  3637 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3638 ;; Tracked objects:
  3639 ;;		On entry : 0/0
  3640 ;;		On exit  : 0/0
  3641 ;;		Unchanged: 0/0
  3642 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3643 ;;      Params:         1       0       0       0       0       0       0       0       0
  3644 ;;      Locals:         3       0       0       0       0       0       0       0       0
  3645 ;;      Temps:          4       0       0       0       0       0       0       0       0
  3646 ;;      Totals:         8       0       0       0       0       0       0       0       0
  3647 ;;Total ram usage:        8 bytes
  3648 ;; Hardware stack levels used:    1
  3649 ;; Hardware stack levels required when called:    2
  3650 ;; This function calls:
  3651 ;;		_log2
  3652 ;;		_rotate
  3653 ;;		_spi
  3654 ;; This function is called by:
  3655 ;;		_update
  3656 ;; This function uses a non-reentrant model
  3657 ;;
  3658                           
  3659                           	psect	text11
  3660  00428A                     __ptext11:
  3661                           	opt stack 0
  3662  00428A                     _writeDigit:
  3663                           	opt stack 22
  3664                           
  3665                           ; BSR set to: 0
  3666                           ;incstack = 0
  3667                           ;writeDigit@digit stored from wreg
  3668  00428A  6E19               	movwf	writeDigit@digit,c
  3669                           
  3670                           ;disp.c: 115: uint8_t dig = (uint8_t) log2(digit);
  3671  00428C  5019               	movf	writeDigit@digit,w,c
  3672  00428E  6E0C               	movwf	log2@num,c
  3673  004290  6A0D               	clrf	log2@num+1,c
  3674  004292  6A0E               	clrf	log2@num+2,c
  3675  004294  6A0F               	clrf	log2@num+3,c
  3676  004296  EC11  F022         	call	_log2	;wreg free
  3677  00429A  C00C  F015         	movff	?_log2,??_writeDigit
  3678  00429E  C00D  F016         	movff	?_log2+1,??_writeDigit+1
  3679  0042A2  C00E  F017         	movff	?_log2+2,??_writeDigit+2
  3680  0042A6  C00F  F018         	movff	?_log2+3,??_writeDigit+3
  3681  0042AA  5015               	movf	??_writeDigit,w,c
  3682  0042AC  6E1A               	movwf	writeDigit@dig,c
  3683                           
  3684                           ;disp.c: 116: screen.digits.screen[dig].bits = segs;
  3685  0042AE  501A               	movf	writeDigit@dig,w,c
  3686  0042B0  0D01               	mullw	1
  3687  0042B2  0100               	movlb	0	; () banked
  3688  0042B4  0ED3               	movlw	low _screen
  3689  0042B6  24F3               	addwf	prodl,w,c
  3690  0042B8  6ED9               	movwf	fsr2l,c
  3691  0042BA  0100               	movlb	0	; () banked
  3692  0042BC  0E00               	movlw	high _screen
  3693  0042BE  20F4               	addwfc	prodh,w,c
  3694  0042C0  6EDA               	movwf	fsr2h,c
  3695  0042C2  C014  FFDF         	movff	writeDigit@segs,indf2
  3696                           
  3697                           ; BSR set to: 0
  3698                           ;disp.c: 119: int8_t cnt;
  3699                           ;disp.c: 120: for (cnt = 7; cnt >= 0; cnt--)
  3700  0042C6  0E07               	movlw	7
  3701  0042C8  6E1B               	movwf	writeDigit@cnt,c
  3702  0042CA                     
  3703                           ; BSR set to: 0
  3704  0042CA  BE1B               	btfsc	writeDigit@cnt,7,c
  3705  0042CC  D009               	goto	i2l91
  3706                           
  3707                           ;disp.c: 121: {
  3708                           ;disp.c: 123: spi(cnt + 1, rotate(cnt));
  3709                           
  3710                           ; BSR set to: 0
  3711                           
  3712                           ; BSR set to: 0
  3713  0042CE  501B               	movf	writeDigit@cnt,w,c
  3714  0042D0  EC71  F021         	call	_rotate
  3715  0042D4  6E07               	movwf	spi@data,c
  3716  0042D6  281B               	incf	writeDigit@cnt,w,c
  3717  0042D8  EC16  F01E         	call	_spi
  3718  0042DC  061B               	decf	writeDigit@cnt,f,c
  3719  0042DE  D7F5               	goto	L4
  3720  0042E0                     i2l91:
  3721  0042E0  0012               	return	
  3722  0042E2                     __end_of_writeDigit:
  3723                           	opt stack 0
  3724                           tosu	equ	0xFFF
  3725                           tosh	equ	0xFFE
  3726                           tosl	equ	0xFFD
  3727                           pclatu	equ	0xFFB
  3728                           pclath	equ	0xFFA
  3729                           tblptru	equ	0xFF8
  3730                           tblptrh	equ	0xFF7
  3731                           tblptrl	equ	0xFF6
  3732                           tablat	equ	0xFF5
  3733                           prodh	equ	0xFF4
  3734                           prodl	equ	0xFF3
  3735                           intcon	equ	0xFF2
  3736                           intcon2	equ	0xFF1
  3737                           postinc0	equ	0xFEE
  3738                           fsr0h	equ	0xFEA
  3739                           fsr0l	equ	0xFE9
  3740                           wreg	equ	0xFE8
  3741                           postinc1	equ	0xFE6
  3742                           postdec1	equ	0xFE5
  3743                           fsr1h	equ	0xFE2
  3744                           fsr1l	equ	0xFE1
  3745                           indf2	equ	0xFDF
  3746                           postinc2	equ	0xFDE
  3747                           postdec2	equ	0xFDD
  3748                           fsr2h	equ	0xFDA
  3749                           fsr2l	equ	0xFD9
  3750                           status	equ	0xFD8
  3751                           
  3752 ;; *************** function _spi *****************
  3753 ;; Defined at:
  3754 ;;		line 91 in file "disp.c"
  3755 ;; Parameters:    Size  Location     Type
  3756 ;;  addr            1    wreg     unsigned char 
  3757 ;;  data            1    6[COMRAM] unsigned char 
  3758 ;; Auto vars:     Size  Location     Type
  3759 ;;  addr            1   12[COMRAM] unsigned char 
  3760 ;;  send            2   10[COMRAM] unsigned int 
  3761 ;;  cnt             1   13[COMRAM] char 
  3762 ;; Return value:  Size  Location     Type
  3763 ;;		None               void
  3764 ;; Registers used:
  3765 ;;		wreg, status,2, status,0, cstack
  3766 ;; Tracked objects:
  3767 ;;		On entry : 0/0
  3768 ;;		On exit  : 0/0
  3769 ;;		Unchanged: 0/0
  3770 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3771 ;;      Params:         1       0       0       0       0       0       0       0       0
  3772 ;;      Locals:         4       0       0       0       0       0       0       0       0
  3773 ;;      Temps:          3       0       0       0       0       0       0       0       0
  3774 ;;      Totals:         8       0       0       0       0       0       0       0       0
  3775 ;;Total ram usage:        8 bytes
  3776 ;; Hardware stack levels used:    1
  3777 ;; Hardware stack levels required when called:    1
  3778 ;; This function calls:
  3779 ;;		_wait
  3780 ;; This function is called by:
  3781 ;;		_update
  3782 ;;		_writeDigit
  3783 ;; This function uses a non-reentrant model
  3784 ;;
  3785                           
  3786                           	psect	text12
  3787  003C2C                     __ptext12:
  3788                           	opt stack 0
  3789  003C2C                     _spi:
  3790                           	opt stack 22
  3791                           
  3792                           ;incstack = 0
  3793                           ;spi@addr stored from wreg
  3794  003C2C  6E0D               	movwf	spi@addr,c
  3795                           
  3796                           ;disp.c: 93: uint16_t send = (addr << 8) | data;
  3797  003C2E  5007               	movf	spi@data,w,c
  3798  003C30  C00D  F008         	movff	spi@addr,??_spi
  3799  003C34  6A09               	clrf	(??_spi+1)& (0+255),c
  3800  003C36  C008  F009         	movff	??_spi,??_spi+1
  3801  003C3A  6A08               	clrf	??_spi,c
  3802  003C3C  1008               	iorwf	??_spi,w,c
  3803  003C3E  6E0B               	movwf	spi@send,c
  3804  003C40  5009               	movf	??_spi+1,w,c
  3805  003C42  6E0C               	movwf	spi@send+1,c
  3806                           
  3807                           ;disp.c: 94: LATA4 = 0;
  3808  003C44  9889               	bcf	3977,4,c	;volatile
  3809                           
  3810                           ;disp.c: 95: LATA1 = 0;
  3811  003C46  9289               	bcf	3977,1,c	;volatile
  3812                           
  3813                           ;disp.c: 96: LATA3 = 0;
  3814  003C48  9689               	bcf	3977,3,c	;volatile
  3815                           
  3816                           ;disp.c: 97: int8_t cnt;
  3817                           ;disp.c: 98: for (cnt = 15; cnt >= 0; cnt--)
  3818  003C4A  0E0F               	movlw	15
  3819  003C4C  6E0E               	movwf	spi@cnt,c
  3820  003C4E  BE0E               	btfsc	spi@cnt,7,c
  3821  003C50  D02D               	goto	i2l85
  3822                           
  3823                           ;disp.c: 99: {
  3824                           ;disp.c: 100: LATA1 = 0x1 & (send >> cnt);
  3825  003C52  C00E  F008         	movff	spi@cnt,??_spi
  3826  003C56  C00B  F009         	movff	spi@send,??_spi+1
  3827  003C5A  C00C  F00A         	movff	spi@send+1,??_spi+2
  3828  003C5E  2A08               	incf	??_spi,f,c
  3829  003C60  D003               	goto	i2u373_44
  3830  003C62                     i2u373_45:
  3831  003C62  90D8               	bcf	status,0,c
  3832  003C64  320A               	rrcf	??_spi+2,f,c
  3833  003C66  3209               	rrcf	??_spi+1,f,c
  3834  003C68                     i2u373_44:
  3835  003C68  2E08               	decfsz	??_spi,f,c
  3836  003C6A  D7FB               	goto	i2u373_45
  3837  003C6C  3009               	rrcf	??_spi+1,w,c
  3838  003C6E  A0D8               	btfss	status,0,c
  3839  003C70  D001               	bra	i2u374_45
  3840  003C72  8289               	bsf	3977,1,c	;volatile
  3841  003C74                     i2u374_45:
  3842  003C74  B0D8               	btfsc	status,0,c
  3843  003C76  D001               	bra	i2u374_46
  3844  003C78  9289               	bcf	3977,1,c	;volatile
  3845  003C7A                     i2u374_46:
  3846                           
  3847                           ;disp.c: 101: wait(1);
  3848  003C7A  0E01               	movlw	1
  3849  003C7C  6E01               	movwf	wait@count,c
  3850  003C7E  0E00               	movlw	0
  3851  003C80  6E02               	movwf	wait@count+1,c
  3852  003C82  0E00               	movlw	0
  3853  003C84  6E03               	movwf	wait@count+2,c
  3854  003C86  0E00               	movlw	0
  3855  003C88  6E04               	movwf	wait@count+3,c
  3856  003C8A  EC05  F023         	call	_wait	;wreg free
  3857                           
  3858                           ;disp.c: 102: LATA3 = 1;
  3859  003C8E  8689               	bsf	3977,3,c	;volatile
  3860                           
  3861                           ;disp.c: 103: wait(1);
  3862  003C90  0E01               	movlw	1
  3863  003C92  6E01               	movwf	wait@count,c
  3864  003C94  0E00               	movlw	0
  3865  003C96  6E02               	movwf	wait@count+1,c
  3866  003C98  0E00               	movlw	0
  3867  003C9A  6E03               	movwf	wait@count+2,c
  3868  003C9C  0E00               	movlw	0
  3869  003C9E  6E04               	movwf	wait@count+3,c
  3870  003CA0  EC05  F023         	call	_wait	;wreg free
  3871                           
  3872                           ;disp.c: 104: LATA3 = 0;
  3873  003CA4  9689               	bcf	3977,3,c	;volatile
  3874                           
  3875                           ;disp.c: 105: LATA1 = 0;
  3876  003CA6  9289               	bcf	3977,1,c	;volatile
  3877  003CA8  060E               	decf	spi@cnt,f,c
  3878  003CAA  D7D1               	goto	L5
  3879  003CAC                     i2l85:
  3880                           
  3881                           ;disp.c: 106: }
  3882                           ;disp.c: 107: LATA4 = 1;
  3883  003CAC  8889               	bsf	3977,4,c	;volatile
  3884                           
  3885                           ;disp.c: 108: LATA3 = 0;
  3886  003CAE  9689               	bcf	3977,3,c	;volatile
  3887                           
  3888                           ;disp.c: 109: LATA1 = 0;
  3889  003CB0  9289               	bcf	3977,1,c	;volatile
  3890                           
  3891                           ;disp.c: 110: wait(1);
  3892  003CB2  0E01               	movlw	1
  3893  003CB4  6E01               	movwf	wait@count,c
  3894  003CB6  0E00               	movlw	0
  3895  003CB8  6E02               	movwf	wait@count+1,c
  3896  003CBA  0E00               	movlw	0
  3897  003CBC  6E03               	movwf	wait@count+2,c
  3898  003CBE  0E00               	movlw	0
  3899  003CC0  6E04               	movwf	wait@count+3,c
  3900  003CC2  EC05  F023         	call	_wait	;wreg free
  3901  003CC6  0012               	return	
  3902  003CC8                     __end_of_spi:
  3903                           	opt stack 0
  3904                           tosu	equ	0xFFF
  3905                           tosh	equ	0xFFE
  3906                           tosl	equ	0xFFD
  3907                           pclatu	equ	0xFFB
  3908                           pclath	equ	0xFFA
  3909                           tblptru	equ	0xFF8
  3910                           tblptrh	equ	0xFF7
  3911                           tblptrl	equ	0xFF6
  3912                           tablat	equ	0xFF5
  3913                           prodh	equ	0xFF4
  3914                           prodl	equ	0xFF3
  3915                           intcon	equ	0xFF2
  3916                           intcon2	equ	0xFF1
  3917                           postinc0	equ	0xFEE
  3918                           fsr0h	equ	0xFEA
  3919                           fsr0l	equ	0xFE9
  3920                           wreg	equ	0xFE8
  3921                           postinc1	equ	0xFE6
  3922                           postdec1	equ	0xFE5
  3923                           fsr1h	equ	0xFE2
  3924                           fsr1l	equ	0xFE1
  3925                           indf2	equ	0xFDF
  3926                           postinc2	equ	0xFDE
  3927                           postdec2	equ	0xFDD
  3928                           fsr2h	equ	0xFDA
  3929                           fsr2l	equ	0xFD9
  3930                           status	equ	0xFD8
  3931                           
  3932 ;; *************** function _wait *****************
  3933 ;; Defined at:
  3934 ;;		line 3 in file "defs.c"
  3935 ;; Parameters:    Size  Location     Type
  3936 ;;  count           4    0[COMRAM] unsigned long 
  3937 ;; Auto vars:     Size  Location     Type
  3938 ;;		None
  3939 ;; Return value:  Size  Location     Type
  3940 ;;		None               void
  3941 ;; Registers used:
  3942 ;;		wreg, status,2, status,0
  3943 ;; Tracked objects:
  3944 ;;		On entry : 0/0
  3945 ;;		On exit  : 0/0
  3946 ;;		Unchanged: 0/0
  3947 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3948 ;;      Params:         4       0       0       0       0       0       0       0       0
  3949 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3950 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3951 ;;      Totals:         4       0       0       0       0       0       0       0       0
  3952 ;;Total ram usage:        4 bytes
  3953 ;; Hardware stack levels used:    1
  3954 ;; This function calls:
  3955 ;;		Nothing
  3956 ;; This function is called by:
  3957 ;;		_spi
  3958 ;; This function uses a non-reentrant model
  3959 ;;
  3960                           
  3961                           	psect	text13
  3962  00460A                     __ptext13:
  3963                           	opt stack 0
  3964  00460A                     _wait:
  3965                           	opt stack 22
  3966  00460A                     i2l3696:
  3967  00460A  0601               	decf	wait@count,f,c
  3968  00460C  0E00               	movlw	0
  3969  00460E  5A02               	subwfb	wait@count+1,f,c
  3970  004610  5A03               	subwfb	wait@count+2,f,c
  3971  004612  5A04               	subwfb	wait@count+3,f,c
  3972  004614  2801               	incf	wait@count& (0+255),w,c
  3973  004616  B4D8               	btfsc	status,2,c
  3974  004618  2802               	incf	(wait@count+1)& (0+255),w,c
  3975  00461A  B4D8               	btfsc	status,2,c
  3976  00461C  2803               	incf	(wait@count+2)& (0+255),w,c
  3977  00461E  B4D8               	btfsc	status,2,c
  3978  004620  2804               	incf	(wait@count+3)& (0+255),w,c
  3979  004622  B4D8               	btfsc	status,2,c
  3980  004624  0012               	return	
  3981  004626  D7F1               	goto	i2l3696
  3982  004628                     __end_of_wait:
  3983                           	opt stack 0
  3984                           tosu	equ	0xFFF
  3985                           tosh	equ	0xFFE
  3986                           tosl	equ	0xFFD
  3987                           pclatu	equ	0xFFB
  3988                           pclath	equ	0xFFA
  3989                           tblptru	equ	0xFF8
  3990                           tblptrh	equ	0xFF7
  3991                           tblptrl	equ	0xFF6
  3992                           tablat	equ	0xFF5
  3993                           prodh	equ	0xFF4
  3994                           prodl	equ	0xFF3
  3995                           intcon	equ	0xFF2
  3996                           intcon2	equ	0xFF1
  3997                           postinc0	equ	0xFEE
  3998                           fsr0h	equ	0xFEA
  3999                           fsr0l	equ	0xFE9
  4000                           wreg	equ	0xFE8
  4001                           postinc1	equ	0xFE6
  4002                           postdec1	equ	0xFE5
  4003                           fsr1h	equ	0xFE2
  4004                           fsr1l	equ	0xFE1
  4005                           indf2	equ	0xFDF
  4006                           postinc2	equ	0xFDE
  4007                           postdec2	equ	0xFDD
  4008                           fsr2h	equ	0xFDA
  4009                           fsr2l	equ	0xFD9
  4010                           status	equ	0xFD8
  4011                           
  4012 ;; *************** function _rotate *****************
  4013 ;; Defined at:
  4014 ;;		line 220 in file "disp.c"
  4015 ;; Parameters:    Size  Location     Type
  4016 ;;  seg             1    wreg     unsigned char 
  4017 ;; Auto vars:     Size  Location     Type
  4018 ;;  seg             1    3[COMRAM] unsigned char 
  4019 ;;  cnt             1    5[COMRAM] char 
  4020 ;;  ret             1    4[COMRAM] unsigned char 
  4021 ;; Return value:  Size  Location     Type
  4022 ;;                  1    wreg      unsigned char 
  4023 ;; Registers used:
  4024 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  4025 ;; Tracked objects:
  4026 ;;		On entry : 0/0
  4027 ;;		On exit  : 0/0
  4028 ;;		Unchanged: 0/0
  4029 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4030 ;;      Params:         0       0       0       0       0       0       0       0       0
  4031 ;;      Locals:         3       0       0       0       0       0       0       0       0
  4032 ;;      Temps:          3       0       0       0       0       0       0       0       0
  4033 ;;      Totals:         6       0       0       0       0       0       0       0       0
  4034 ;;Total ram usage:        6 bytes
  4035 ;; Hardware stack levels used:    1
  4036 ;; This function calls:
  4037 ;;		Nothing
  4038 ;; This function is called by:
  4039 ;;		_writeDigit
  4040 ;; This function uses a non-reentrant model
  4041 ;;
  4042                           
  4043                           	psect	text14
  4044  0042E2                     __ptext14:
  4045                           	opt stack 0
  4046  0042E2                     _rotate:
  4047                           	opt stack 23
  4048                           
  4049                           ;incstack = 0
  4050                           ;rotate@seg stored from wreg
  4051  0042E2  6E04               	movwf	rotate@seg,c
  4052                           
  4053                           ;disp.c: 222: uint8_t ret = 0;
  4054  0042E4  0E00               	movlw	0
  4055  0042E6  6E05               	movwf	rotate@ret,c
  4056                           
  4057                           ;disp.c: 223: int8_t cnt;
  4058                           ;disp.c: 224: for (cnt = 7; cnt >= 0; cnt--)
  4059  0042E8  0E07               	movlw	7
  4060  0042EA  6E06               	movwf	rotate@cnt,c
  4061  0042EC  BE06               	btfsc	rotate@cnt,7,c
  4062  0042EE  D022               	goto	i2l4018
  4063                           
  4064                           ;disp.c: 225: {
  4065                           ;disp.c: 226: ret |= ((screen.digits.screen[cnt].bits >> seg) & 1) << cnt;
  4066  0042F0  C006  F001         	movff	rotate@cnt,??_rotate
  4067  0042F4  C004  F002         	movff	rotate@seg,??_rotate+1
  4068  0042F8  5006               	movf	rotate@cnt,w,c
  4069  0042FA  0D01               	mullw	1
  4070  0042FC  0100               	movlb	0	; () banked
  4071  0042FE  0ED3               	movlw	low _screen
  4072  004300  24F3               	addwf	prodl,w,c
  4073  004302  6ED9               	movwf	fsr2l,c
  4074  004304  0100               	movlb	0	; () banked
  4075  004306  0E00               	movlw	high _screen
  4076  004308  20F4               	addwfc	prodh,w,c
  4077  00430A  6EDA               	movwf	fsr2h,c
  4078  00430C  50DF               	movf	indf2,w,c
  4079  00430E  6E03               	movwf	(??_rotate+2)& (0+255),c
  4080  004310  2A02               	incf	??_rotate+1,f,c
  4081  004312  D002               	goto	i2u378_44
  4082  004314                     i2u378_45:
  4083  004314  90D8               	bcf	status,0,c
  4084  004316  3203               	rrcf	??_rotate+2,f,c
  4085  004318                     i2u378_44:
  4086  004318  2E02               	decfsz	??_rotate+1,f,c
  4087  00431A  D7FC               	goto	i2u378_45
  4088  00431C  0E01               	movlw	1
  4089  00431E  1603               	andwf	??_rotate+2,f,c
  4090  004320  2A01               	incf	??_rotate,f,c
  4091  004322  D002               	goto	i2u379_44
  4092  004324                     i2u379_45:
  4093  004324  90D8               	bcf	status,0,c
  4094  004326  3603               	rlcf	??_rotate+2,f,c
  4095  004328                     i2u379_44:
  4096  004328  2E01               	decfsz	??_rotate,f,c
  4097  00432A  D7FC               	goto	i2u379_45
  4098  00432C  5003               	movf	??_rotate+2,w,c
  4099  00432E  1205               	iorwf	rotate@ret,f,c
  4100                           
  4101                           ; BSR set to: 0
  4102  004330  0606               	decf	rotate@cnt,f,c
  4103  004332  D7DC               	goto	L6
  4104  004334                     i2l4018:
  4105                           
  4106                           ;disp.c: 227: }
  4107                           ;disp.c: 228: return ret;
  4108  004334  5005               	movf	rotate@ret,w,c
  4109  004336  0012               	return	
  4110  004338                     __end_of_rotate:
  4111                           	opt stack 0
  4112                           tosu	equ	0xFFF
  4113                           tosh	equ	0xFFE
  4114                           tosl	equ	0xFFD
  4115                           pclatu	equ	0xFFB
  4116                           pclath	equ	0xFFA
  4117                           tblptru	equ	0xFF8
  4118                           tblptrh	equ	0xFF7
  4119                           tblptrl	equ	0xFF6
  4120                           tablat	equ	0xFF5
  4121                           prodh	equ	0xFF4
  4122                           prodl	equ	0xFF3
  4123                           intcon	equ	0xFF2
  4124                           intcon2	equ	0xFF1
  4125                           postinc0	equ	0xFEE
  4126                           fsr0h	equ	0xFEA
  4127                           fsr0l	equ	0xFE9
  4128                           wreg	equ	0xFE8
  4129                           postinc1	equ	0xFE6
  4130                           postdec1	equ	0xFE5
  4131                           fsr1h	equ	0xFE2
  4132                           fsr1l	equ	0xFE1
  4133                           indf2	equ	0xFDF
  4134                           postinc2	equ	0xFDE
  4135                           postdec2	equ	0xFDD
  4136                           fsr2h	equ	0xFDA
  4137                           fsr2l	equ	0xFD9
  4138                           status	equ	0xFD8
  4139                           
  4140 ;; *************** function _printRTC *****************
  4141 ;; Defined at:
  4142 ;;		line 282 in file "RTC.c"
  4143 ;; Parameters:    Size  Location     Type
  4144 ;;  digits          1    wreg     unsigned char 
  4145 ;; Auto vars:     Size  Location     Type
  4146 ;;  digits          1   92[COMRAM] unsigned char 
  4147 ;;  i               1   93[COMRAM] unsigned char 
  4148 ;;  cnt             1   91[COMRAM] unsigned char 
  4149 ;;  bits            1   90[COMRAM] unsigned char 
  4150 ;; Return value:  Size  Location     Type
  4151 ;;		None               void
  4152 ;; Registers used:
  4153 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4154 ;; Tracked objects:
  4155 ;;		On entry : 0/0
  4156 ;;		On exit  : 0/0
  4157 ;;		Unchanged: 0/0
  4158 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4159 ;;      Params:         0       0       0       0       0       0       0       0       0
  4160 ;;      Locals:         4       0       0       0       0       0       0       0       0
  4161 ;;      Temps:          4       0       0       0       0       0       0       0       0
  4162 ;;      Totals:         8       0       0       0       0       0       0       0       0
  4163 ;;Total ram usage:        8 bytes
  4164 ;; Hardware stack levels used:    1
  4165 ;; Hardware stack levels required when called:    4
  4166 ;; This function calls:
  4167 ;;		___lwmod
  4168 ;;		_advState
  4169 ;;		_countBits
  4170 ;;		_sprintf
  4171 ;;		_writeString
  4172 ;; This function is called by:
  4173 ;;		_initRTC
  4174 ;;		_isr
  4175 ;; This function uses a non-reentrant model
  4176 ;;
  4177                           
  4178                           	psect	text15
  4179  00183A                     __ptext15:
  4180                           	opt stack 0
  4181  00183A                     _printRTC:
  4182                           	opt stack 21
  4183                           
  4184                           ;incstack = 0
  4185                           ;printRTC@digits stored from wreg
  4186  00183A  6E5D               	movwf	printRTC@digits,c
  4187                           
  4188                           ;RTC.c: 285: static char str[(8 + 6 + 1)];
  4189                           ;RTC.c: 286: uint8_t cnt = 0;
  4190  00183C  0E00               	movlw	0
  4191  00183E  6E5C               	movwf	printRTC@cnt,c
  4192                           
  4193                           ;RTC.c: 288: uint8_t bits = countBits(digits);
  4194  001840  505D               	movf	printRTC@digits,w,c
  4195  001842  6E01               	movwf	countBits@num,c
  4196  001844  6A02               	clrf	countBits@num+1,c
  4197  001846  6A03               	clrf	countBits@num+2,c
  4198  001848  6A04               	clrf	countBits@num+3,c
  4199  00184A  ECA9  F022         	call	_countBits	;wreg free
  4200  00184E  6E5B               	movwf	printRTC@bits,c
  4201  001850  D1C3               	goto	i2l5178
  4202  001852                     i2l5110:
  4203                           
  4204                           ;RTC.c: 300: sprintf(str, "%s %02d.%02d", dow[date.dow], date.hour, date.minute);
  4205  001852  0100               	movlb	0	; () banked
  4206  001854  0E00               	movlw	high printRTC@str
  4207  001856  6E46               	movwf	sprintf@sp+1,c
  4208  001858  0100               	movlb	0	; () banked
  4209  00185A  0EC4               	movlw	low printRTC@str
  4210  00185C  6E45               	movwf	sprintf@sp,c
  4211  00185E  0E7D               	movlw	high STR_4
  4212  001860  6E48               	movwf	sprintf@f+1,c
  4213  001862  0E89               	movlw	low STR_4
  4214  001864  6E47               	movwf	sprintf@f,c
  4215  001866  0100               	movlb	0	; () banked
  4216  001868  51AC               	movf	(_date+4)& (0+255),w,b
  4217  00186A  0D04               	mullw	4
  4218  00186C  0E3E               	movlw	low _dow
  4219  00186E  24F3               	addwf	prodl,w,c
  4220  001870  6E49               	movwf	?_sprintf+4,c
  4221  001872  0E7D               	movlw	high _dow
  4222  001874  20F4               	addwfc	prodh,w,c
  4223  001876  6E4A               	movwf	?_sprintf+5,c
  4224  001878  0100               	movlb	0	; () banked
  4225  00187A  C0AA  F04B         	movff	_date+2,?_sprintf+6
  4226  00187E  6A4C               	clrf	?_sprintf+7,c
  4227  001880  0100               	movlb	0	; () banked
  4228  001882  C0A9  F04D         	movff	_date+1,?_sprintf+8
  4229  001886  6A4E               	clrf	?_sprintf+9,c
  4230  001888  EC0E  F000         	call	_sprintf	;wreg free
  4231                           
  4232                           ;RTC.c: 301: break;
  4233  00188C  D1C1               	goto	i2l294
  4234  00188E                     i2l5112:
  4235                           
  4236                           ;RTC.c: 303: sprintf(str, "%02d-%02d-%02d", date.day, date.month, date.year % 100);
  4237  00188E  0100               	movlb	0	; () banked
  4238  001890  0E00               	movlw	high printRTC@str
  4239  001892  6E46               	movwf	sprintf@sp+1,c
  4240  001894  0100               	movlb	0	; () banked
  4241  001896  0EC4               	movlw	low printRTC@str
  4242  001898  6E45               	movwf	sprintf@sp,c
  4243  00189A  0E7D               	movlw	high STR_5
  4244  00189C  6E48               	movwf	sprintf@f+1,c
  4245  00189E  0E6B               	movlw	low STR_5
  4246  0018A0  6E47               	movwf	sprintf@f,c
  4247  0018A2  0100               	movlb	0	; () banked
  4248  0018A4  C0AB  F049         	movff	_date+3,?_sprintf+4
  4249  0018A8  6A4A               	clrf	?_sprintf+5,c
  4250  0018AA  0100               	movlb	0	; () banked
  4251  0018AC  C0AD  F04B         	movff	_date+5,?_sprintf+6
  4252  0018B0  6A4C               	clrf	?_sprintf+7,c
  4253  0018B2  C0AE  F001         	movff	_date+6,___lwmod@dividend
  4254  0018B6  C0AF  F002         	movff	_date+7,___lwmod@dividend+1
  4255  0018BA  0E00               	movlw	0
  4256  0018BC  6E04               	movwf	___lwmod@divisor+1,c
  4257  0018BE  0E64               	movlw	100
  4258  0018C0  6E03               	movwf	___lwmod@divisor,c
  4259  0018C2  EC56  F022         	call	___lwmod	;wreg free
  4260  0018C6  C001  F04D         	movff	?___lwmod,?_sprintf+8
  4261  0018CA  C002  F04E         	movff	?___lwmod+1,?_sprintf+9
  4262  0018CE  EC0E  F000         	call	_sprintf	;wreg free
  4263                           
  4264                           ;RTC.c: 304: break;
  4265  0018D2  D19E               	goto	i2l294
  4266  0018D4                     i2l5114:
  4267                           
  4268                           ;RTC.c: 306: sprintf(str, "  %02d.%02d.%02d", date.hour, date.minute, date.second);
  4269  0018D4  0100               	movlb	0	; () banked
  4270  0018D6  0E00               	movlw	high printRTC@str
  4271  0018D8  6E46               	movwf	sprintf@sp+1,c
  4272  0018DA  0100               	movlb	0	; () banked
  4273  0018DC  0EC4               	movlw	low printRTC@str
  4274  0018DE  6E45               	movwf	sprintf@sp,c
  4275  0018E0  0E7D               	movlw	high STR_6
  4276  0018E2  6E48               	movwf	sprintf@f+1,c
  4277  0018E4  0E5A               	movlw	low STR_6
  4278  0018E6  6E47               	movwf	sprintf@f,c
  4279  0018E8  0100               	movlb	0	; () banked
  4280  0018EA  C0AA  F049         	movff	_date+2,?_sprintf+4
  4281  0018EE  6A4A               	clrf	?_sprintf+5,c
  4282  0018F0  0100               	movlb	0	; () banked
  4283  0018F2  C0A9  F04B         	movff	_date+1,?_sprintf+6
  4284  0018F6  6A4C               	clrf	?_sprintf+7,c
  4285  0018F8  0100               	movlb	0	; () banked
  4286  0018FA  C0A8  F04D         	movff	_date,?_sprintf+8
  4287  0018FE  6A4E               	clrf	?_sprintf+9,c
  4288  001900  EC0E  F000         	call	_sprintf	;wreg free
  4289                           
  4290                           ;RTC.c: 307: break;
  4291  001904  D185               	goto	i2l294
  4292  001906                     i2l5116:
  4293                           
  4294                           ;RTC.c: 321: i = (8 + 6 + 1);
  4295  001906  0E0F               	movlw	15
  4296  001908  6E5E               	movwf	printRTC@i,c
  4297                           
  4298                           ;RTC.c: 322: while (--i)
  4299  00190A  D015               	goto	i2l5120
  4300  00190C                     i2l5118:
  4301                           
  4302                           ;RTC.c: 323: str[i-1] = '\0';
  4303  00190C  0EFF               	movlw	255
  4304  00190E  6E57               	movwf	??_printRTC& (0+255),c
  4305  001910  0EFF               	movlw	255
  4306  001912  6E58               	movwf	(??_printRTC+1)& (0+255),c
  4307  001914  505E               	movf	printRTC@i,w,c
  4308  001916  6E59               	movwf	(??_printRTC+2)& (0+255),c
  4309  001918  6A5A               	clrf	(??_printRTC+3)& (0+255),c
  4310  00191A  5057               	movf	??_printRTC,w,c
  4311  00191C  2659               	addwf	??_printRTC+2,f,c
  4312  00191E  5058               	movf	??_printRTC+1,w,c
  4313  001920  225A               	addwfc	??_printRTC+3,f,c
  4314  001922  0100               	movlb	0	; () banked
  4315  001924  0EC4               	movlw	low printRTC@str
  4316  001926  2459               	addwf	??_printRTC+2,w,c
  4317  001928  6ED9               	movwf	fsr2l,c
  4318  00192A  0100               	movlb	0	; () banked
  4319  00192C  0E00               	movlw	high printRTC@str
  4320  00192E  205A               	addwfc	??_printRTC+3,w,c
  4321  001930  6EDA               	movwf	fsr2h,c
  4322  001932  0E00               	movlw	0
  4323  001934  6EDF               	movwf	indf2,c
  4324  001936                     i2l5120:
  4325  001936  2E5E               	decfsz	printRTC@i,f,c
  4326  001938  D7E9               	goto	i2l5118
  4327  00193A  D16A               	goto	i2l294
  4328  00193C                     i2l5124:
  4329  00193C  0100               	movlb	0	; () banked
  4330  00193E  51E5               	movf	_rtcMenu& (0+255),w,b
  4331                           
  4332                           ; Switch size 1, requested type "space"
  4333                           ; Number of cases is 3, Range of values is 1 to 9
  4334                           ; switch strategies available:
  4335                           ; Name         Instructions Cycles
  4336                           ; simple_byte           10     6 (average)
  4337                           ;	Chosen strategy is simple_byte
  4338  001940  0A01               	xorlw	1	; case 1
  4339  001942  B4D8               	btfsc	status,2,c
  4340  001944  D7C7               	goto	i2l5114
  4341  001946  0A03               	xorlw	3	; case 2
  4342  001948  B4D8               	btfsc	status,2,c
  4343  00194A  D783               	goto	i2l5110
  4344  00194C  0A0B               	xorlw	11	; case 9
  4345  00194E  B4D8               	btfsc	status,2,c
  4346  001950  D79E               	goto	i2l5112
  4347  001952  D7D9               	goto	i2l5116
  4348  001954                     i2l5126:
  4349                           
  4350                           ; BSR set to: 0
  4351                           ;RTC.c: 331: sprintf(str, "%02d.%02d.%02d", date.hour, date.minute, date.second);
  4352  001954  0100               	movlb	0	; () banked
  4353  001956  0E00               	movlw	high printRTC@str
  4354  001958  6E46               	movwf	sprintf@sp+1,c
  4355  00195A  0100               	movlb	0	; () banked
  4356  00195C  0EC4               	movlw	low printRTC@str
  4357  00195E  6E45               	movwf	sprintf@sp,c
  4358  001960  0E7D               	movlw	high (STR_6+2)
  4359  001962  6E48               	movwf	sprintf@f+1,c
  4360  001964  0E5C               	movlw	low (STR_6+2)
  4361  001966  6E47               	movwf	sprintf@f,c
  4362  001968  0100               	movlb	0	; () banked
  4363  00196A  C0AA  F049         	movff	_date+2,?_sprintf+4
  4364  00196E  6A4A               	clrf	?_sprintf+5,c
  4365  001970  0100               	movlb	0	; () banked
  4366  001972  C0A9  F04B         	movff	_date+1,?_sprintf+6
  4367  001976  6A4C               	clrf	?_sprintf+7,c
  4368  001978  0100               	movlb	0	; () banked
  4369  00197A  C0A8  F04D         	movff	_date,?_sprintf+8
  4370  00197E  6A4E               	clrf	?_sprintf+9,c
  4371  001980  EC0E  F000         	call	_sprintf	;wreg free
  4372                           
  4373                           ;RTC.c: 332: break;
  4374  001984  D145               	goto	i2l294
  4375  001986                     i2l5128:
  4376                           
  4377                           ;RTC.c: 334: sprintf(str, "%c%c %02d.%02d", (dow[date.dow])[0], (dow[date.dow])[1], date
      +                          .minute, date.second);
  4378  001986  0100               	movlb	0	; () banked
  4379  001988  0E00               	movlw	high printRTC@str
  4380  00198A  6E46               	movwf	sprintf@sp+1,c
  4381  00198C  0100               	movlb	0	; () banked
  4382  00198E  0EC4               	movlw	low printRTC@str
  4383  001990  6E45               	movwf	sprintf@sp,c
  4384  001992  0E7D               	movlw	high STR_8
  4385  001994  6E48               	movwf	sprintf@f+1,c
  4386  001996  0E7A               	movlw	low STR_8
  4387  001998  6E47               	movwf	sprintf@f,c
  4388  00199A  0100               	movlb	0	; () banked
  4389  00199C  51AC               	movf	(_date+4)& (0+255),w,b
  4390  00199E  0D04               	mullw	4
  4391  0019A0  0E3E               	movlw	low _dow
  4392  0019A2  24F3               	addwf	prodl,w,c
  4393  0019A4  6EF6               	movwf	tblptrl,c
  4394  0019A6  0E7D               	movlw	high _dow
  4395  0019A8  20F4               	addwfc	prodh,w,c
  4396  0019AA  6EF7               	movwf	tblptrh,c
  4397  0019AC                     	if	0	;There are less than 3 active tblptr bytes
  4398  0019AC                     	endif
  4399  0019AC  0008               	tblrd		*
  4400  0019AE  50F5               	movf	tablat,w,c
  4401  0019B0  6E49               	movwf	?_sprintf+4,c
  4402  0019B2  6A4A               	clrf	?_sprintf+5,c
  4403  0019B4  0100               	movlb	0	; () banked
  4404  0019B6  51AC               	movf	(_date+4)& (0+255),w,b
  4405  0019B8  0D04               	mullw	4
  4406  0019BA  0E01               	movlw	1
  4407  0019BC  26F3               	addwf	prodl,f,c
  4408  0019BE  0E00               	movlw	0
  4409  0019C0  22F4               	addwfc	prodh,f,c
  4410  0019C2  0E3E               	movlw	low _dow
  4411  0019C4  24F3               	addwf	prodl,w,c
  4412  0019C6  6EF6               	movwf	tblptrl,c
  4413  0019C8  0E7D               	movlw	high _dow
  4414  0019CA  20F4               	addwfc	prodh,w,c
  4415  0019CC  6EF7               	movwf	tblptrh,c
  4416  0019CE                     	if	0	;There are less than 3 active tblptr bytes
  4417  0019CE                     	endif
  4418  0019CE  0008               	tblrd		*
  4419  0019D0  50F5               	movf	tablat,w,c
  4420  0019D2  6E4B               	movwf	?_sprintf+6,c
  4421  0019D4  6A4C               	clrf	?_sprintf+7,c
  4422  0019D6  0100               	movlb	0	; () banked
  4423  0019D8  C0A9  F04D         	movff	_date+1,?_sprintf+8
  4424  0019DC  6A4E               	clrf	?_sprintf+9,c
  4425  0019DE  0100               	movlb	0	; () banked
  4426  0019E0  C0A8  F04F         	movff	_date,?_sprintf+10
  4427  0019E4  6A50               	clrf	?_sprintf+11,c
  4428  0019E6  EC0E  F000         	call	_sprintf	;wreg free
  4429                           
  4430                           ;RTC.c: 335: break;
  4431  0019EA  D112               	goto	i2l294
  4432  0019EC                     i2l5130:
  4433                           
  4434                           ;RTC.c: 337: sprintf(str, "%02d.%02d.%02d", date.day, date.month, date.year % 100);
  4435  0019EC  0100               	movlb	0	; () banked
  4436  0019EE  0E00               	movlw	high printRTC@str
  4437  0019F0  6E46               	movwf	sprintf@sp+1,c
  4438  0019F2  0100               	movlb	0	; () banked
  4439  0019F4  0EC4               	movlw	low printRTC@str
  4440  0019F6  6E45               	movwf	sprintf@sp,c
  4441  0019F8  0E7D               	movlw	high (STR_6+2)
  4442  0019FA  6E48               	movwf	sprintf@f+1,c
  4443  0019FC  0E5C               	movlw	low (STR_6+2)
  4444  0019FE  6E47               	movwf	sprintf@f,c
  4445  001A00  0100               	movlb	0	; () banked
  4446  001A02  C0AB  F049         	movff	_date+3,?_sprintf+4
  4447  001A06  6A4A               	clrf	?_sprintf+5,c
  4448  001A08  0100               	movlb	0	; () banked
  4449  001A0A  C0AD  F04B         	movff	_date+5,?_sprintf+6
  4450  001A0E  6A4C               	clrf	?_sprintf+7,c
  4451  001A10  C0AE  F001         	movff	_date+6,___lwmod@dividend
  4452  001A14  C0AF  F002         	movff	_date+7,___lwmod@dividend+1
  4453  001A18  0E00               	movlw	0
  4454  001A1A  6E04               	movwf	___lwmod@divisor+1,c
  4455  001A1C  0E64               	movlw	100
  4456  001A1E  6E03               	movwf	___lwmod@divisor,c
  4457  001A20  EC56  F022         	call	___lwmod	;wreg free
  4458  001A24  C001  F04D         	movff	?___lwmod,?_sprintf+8
  4459  001A28  C002  F04E         	movff	?___lwmod+1,?_sprintf+9
  4460  001A2C  EC0E  F000         	call	_sprintf	;wreg free
  4461                           
  4462                           ;RTC.c: 338: break;
  4463  001A30  D0EF               	goto	i2l294
  4464  001A32                     i2l5132:
  4465                           
  4466                           ;RTC.c: 346: i = (8 + 6 + 1);
  4467  001A32  0E0F               	movlw	15
  4468  001A34  6E5E               	movwf	printRTC@i,c
  4469                           
  4470                           ;RTC.c: 347: while (--i)
  4471  001A36  D015               	goto	i2l5136
  4472  001A38                     i2l5134:
  4473                           
  4474                           ;RTC.c: 348: str[i - 1] = '\0';
  4475  001A38  0EFF               	movlw	255
  4476  001A3A  6E57               	movwf	??_printRTC& (0+255),c
  4477  001A3C  0EFF               	movlw	255
  4478  001A3E  6E58               	movwf	(??_printRTC+1)& (0+255),c
  4479  001A40  505E               	movf	printRTC@i,w,c
  4480  001A42  6E59               	movwf	(??_printRTC+2)& (0+255),c
  4481  001A44  6A5A               	clrf	(??_printRTC+3)& (0+255),c
  4482  001A46  5057               	movf	??_printRTC,w,c
  4483  001A48  2659               	addwf	??_printRTC+2,f,c
  4484  001A4A  5058               	movf	??_printRTC+1,w,c
  4485  001A4C  225A               	addwfc	??_printRTC+3,f,c
  4486  001A4E  0100               	movlb	0	; () banked
  4487  001A50  0EC4               	movlw	low printRTC@str
  4488  001A52  2459               	addwf	??_printRTC+2,w,c
  4489  001A54  6ED9               	movwf	fsr2l,c
  4490  001A56  0100               	movlb	0	; () banked
  4491  001A58  0E00               	movlw	high printRTC@str
  4492  001A5A  205A               	addwfc	??_printRTC+3,w,c
  4493  001A5C  6EDA               	movwf	fsr2h,c
  4494  001A5E  0E00               	movlw	0
  4495  001A60  6EDF               	movwf	indf2,c
  4496  001A62                     i2l5136:
  4497  001A62  2E5E               	decfsz	printRTC@i,f,c
  4498  001A64  D7E9               	goto	i2l5134
  4499  001A66  D0D4               	goto	i2l294
  4500  001A68                     i2l5140:
  4501  001A68  0100               	movlb	0	; () banked
  4502  001A6A  51E5               	movf	_rtcMenu& (0+255),w,b
  4503                           
  4504                           ; Switch size 1, requested type "space"
  4505                           ; Number of cases is 3, Range of values is 1 to 8
  4506                           ; switch strategies available:
  4507                           ; Name         Instructions Cycles
  4508                           ; simple_byte           10     6 (average)
  4509                           ;	Chosen strategy is simple_byte
  4510  001A6C  0A01               	xorlw	1	; case 1
  4511  001A6E  B4D8               	btfsc	status,2,c
  4512  001A70  D771               	goto	i2l5126
  4513  001A72  0A02               	xorlw	2	; case 3
  4514  001A74  B4D8               	btfsc	status,2,c
  4515  001A76  D787               	goto	i2l5128
  4516  001A78  0A0B               	xorlw	11	; case 8
  4517  001A7A  B4D8               	btfsc	status,2,c
  4518  001A7C  D7B7               	goto	i2l5130
  4519  001A7E  D7D9               	goto	i2l5132
  4520  001A80                     i2l5142:
  4521                           
  4522                           ; BSR set to: 0
  4523                           ;RTC.c: 356: sprintf(str, "%02d.%02d", date.hour, date.minute);
  4524  001A80  0100               	movlb	0	; () banked
  4525  001A82  0E00               	movlw	high printRTC@str
  4526  001A84  6E46               	movwf	sprintf@sp+1,c
  4527  001A86  0100               	movlb	0	; () banked
  4528  001A88  0EC4               	movlw	low printRTC@str
  4529  001A8A  6E45               	movwf	sprintf@sp,c
  4530  001A8C  0E7D               	movlw	high (STR_8+5)
  4531  001A8E  6E48               	movwf	sprintf@f+1,c
  4532  001A90  0E7F               	movlw	low (STR_8+5)
  4533  001A92  6E47               	movwf	sprintf@f,c
  4534  001A94  0100               	movlb	0	; () banked
  4535  001A96  C0AA  F049         	movff	_date+2,?_sprintf+4
  4536  001A9A  6A4A               	clrf	?_sprintf+5,c
  4537  001A9C  0100               	movlb	0	; () banked
  4538  001A9E  C0A9  F04B         	movff	_date+1,?_sprintf+6
  4539  001AA2  6A4C               	clrf	?_sprintf+7,c
  4540  001AA4  EC0E  F000         	call	_sprintf	;wreg free
  4541                           
  4542                           ;RTC.c: 357: break;
  4543  001AA8  D0B3               	goto	i2l294
  4544  001AAA                     i2l5144:
  4545                           
  4546                           ;RTC.c: 359: sprintf(str, "%02d.%02d", date.day, date.month);
  4547  001AAA  0100               	movlb	0	; () banked
  4548  001AAC  0E00               	movlw	high printRTC@str
  4549  001AAE  6E46               	movwf	sprintf@sp+1,c
  4550  001AB0  0100               	movlb	0	; () banked
  4551  001AB2  0EC4               	movlw	low printRTC@str
  4552  001AB4  6E45               	movwf	sprintf@sp,c
  4553  001AB6  0E7D               	movlw	high (STR_8+5)
  4554  001AB8  6E48               	movwf	sprintf@f+1,c
  4555  001ABA  0E7F               	movlw	low (STR_8+5)
  4556  001ABC  6E47               	movwf	sprintf@f,c
  4557  001ABE  0100               	movlb	0	; () banked
  4558  001AC0  C0AB  F049         	movff	_date+3,?_sprintf+4
  4559  001AC4  6A4A               	clrf	?_sprintf+5,c
  4560  001AC6  0100               	movlb	0	; () banked
  4561  001AC8  C0AD  F04B         	movff	_date+5,?_sprintf+6
  4562  001ACC  6A4C               	clrf	?_sprintf+7,c
  4563  001ACE  EC0E  F000         	call	_sprintf	;wreg free
  4564                           
  4565                           ;RTC.c: 360: break;
  4566  001AD2  D09E               	goto	i2l294
  4567  001AD4                     i2l5146:
  4568                           
  4569                           ;RTC.c: 362: i = (8 + 6 + 1);
  4570  001AD4  0E0F               	movlw	15
  4571  001AD6  6E5E               	movwf	printRTC@i,c
  4572                           
  4573                           ;RTC.c: 363: while (--i)
  4574  001AD8  D015               	goto	i2l5150
  4575  001ADA                     i2l5148:
  4576                           
  4577                           ;RTC.c: 364: str[i - 1] = '\0';
  4578  001ADA  0EFF               	movlw	255
  4579  001ADC  6E57               	movwf	??_printRTC& (0+255),c
  4580  001ADE  0EFF               	movlw	255
  4581  001AE0  6E58               	movwf	(??_printRTC+1)& (0+255),c
  4582  001AE2  505E               	movf	printRTC@i,w,c
  4583  001AE4  6E59               	movwf	(??_printRTC+2)& (0+255),c
  4584  001AE6  6A5A               	clrf	(??_printRTC+3)& (0+255),c
  4585  001AE8  5057               	movf	??_printRTC,w,c
  4586  001AEA  2659               	addwf	??_printRTC+2,f,c
  4587  001AEC  5058               	movf	??_printRTC+1,w,c
  4588  001AEE  225A               	addwfc	??_printRTC+3,f,c
  4589  001AF0  0100               	movlb	0	; () banked
  4590  001AF2  0EC4               	movlw	low printRTC@str
  4591  001AF4  2459               	addwf	??_printRTC+2,w,c
  4592  001AF6  6ED9               	movwf	fsr2l,c
  4593  001AF8  0100               	movlb	0	; () banked
  4594  001AFA  0E00               	movlw	high printRTC@str
  4595  001AFC  205A               	addwfc	??_printRTC+3,w,c
  4596  001AFE  6EDA               	movwf	fsr2h,c
  4597  001B00  0E00               	movlw	0
  4598  001B02  6EDF               	movwf	indf2,c
  4599  001B04                     i2l5150:
  4600  001B04  2E5E               	decfsz	printRTC@i,f,c
  4601  001B06  D7E9               	goto	i2l5148
  4602  001B08  D083               	goto	i2l294
  4603  001B0A                     i2l5154:
  4604  001B0A  0100               	movlb	0	; () banked
  4605  001B0C  51E5               	movf	_rtcMenu& (0+255),w,b
  4606                           
  4607                           ; Switch size 1, requested type "space"
  4608                           ; Number of cases is 2, Range of values is 0 to 6
  4609                           ; switch strategies available:
  4610                           ; Name         Instructions Cycles
  4611                           ; simple_byte            7     4 (average)
  4612                           ;	Chosen strategy is simple_byte
  4613  001B0E  0A00               	xorlw	0	; case 0
  4614  001B10  B4D8               	btfsc	status,2,c
  4615  001B12  D7B6               	goto	i2l5142
  4616  001B14  0A06               	xorlw	6	; case 6
  4617  001B16  B4D8               	btfsc	status,2,c
  4618  001B18  D7C8               	goto	i2l5144
  4619  001B1A  D7DC               	goto	i2l5146
  4620  001B1C                     i2l5156:
  4621                           
  4622                           ; BSR set to: 0
  4623                           ;RTC.c: 372: sprintf(str, "%02d.%02d", date.hour, date.minute);
  4624  001B1C  0100               	movlb	0	; () banked
  4625  001B1E  0E00               	movlw	high printRTC@str
  4626  001B20  6E46               	movwf	sprintf@sp+1,c
  4627  001B22  0100               	movlb	0	; () banked
  4628  001B24  0EC4               	movlw	low printRTC@str
  4629  001B26  6E45               	movwf	sprintf@sp,c
  4630  001B28  0E7D               	movlw	high (STR_8+5)
  4631  001B2A  6E48               	movwf	sprintf@f+1,c
  4632  001B2C  0E7F               	movlw	low (STR_8+5)
  4633  001B2E  6E47               	movwf	sprintf@f,c
  4634  001B30  0100               	movlb	0	; () banked
  4635  001B32  C0AA  F049         	movff	_date+2,?_sprintf+4
  4636  001B36  6A4A               	clrf	?_sprintf+5,c
  4637  001B38  0100               	movlb	0	; () banked
  4638  001B3A  C0A9  F04B         	movff	_date+1,?_sprintf+6
  4639  001B3E  6A4C               	clrf	?_sprintf+7,c
  4640  001B40  EC0E  F000         	call	_sprintf	;wreg free
  4641                           
  4642                           ;RTC.c: 373: break;
  4643  001B44  D065               	goto	i2l294
  4644  001B46                     i2l5160:
  4645  001B46  0100               	movlb	0	; () banked
  4646  001B48  51E5               	movf	_rtcMenu& (0+255),w,b
  4647                           
  4648                           ; Switch size 1, requested type "space"
  4649                           ; Number of cases is 1, Range of values is 5 to 5
  4650                           ; switch strategies available:
  4651                           ; Name         Instructions Cycles
  4652                           ; simple_byte            4     3 (average)
  4653                           ;	Chosen strategy is simple_byte
  4654  001B4A  0A05               	xorlw	5	; case 5
  4655  001B4C  B4D8               	btfsc	status,2,c
  4656  001B4E  D7E6               	goto	i2l5156
  4657  001B50  D05F               	goto	i2l294
  4658  001B52                     i2l5162:
  4659                           
  4660                           ; BSR set to: 0
  4661                           ;RTC.c: 380: sprintf(str, "%c%c", date.hour, date.minute);
  4662  001B52  0100               	movlb	0	; () banked
  4663  001B54  0E00               	movlw	high printRTC@str
  4664  001B56  6E46               	movwf	sprintf@sp+1,c
  4665  001B58  0100               	movlb	0	; () banked
  4666  001B5A  0EC4               	movlw	low printRTC@str
  4667  001B5C  6E45               	movwf	sprintf@sp,c
  4668  001B5E  0E7D               	movlw	high STR_13
  4669  001B60  6E48               	movwf	sprintf@f+1,c
  4670  001B62  0EA2               	movlw	low STR_13
  4671  001B64  6E47               	movwf	sprintf@f,c
  4672  001B66  0100               	movlb	0	; () banked
  4673  001B68  C0AA  F049         	movff	_date+2,?_sprintf+4
  4674  001B6C  6A4A               	clrf	?_sprintf+5,c
  4675  001B6E  0100               	movlb	0	; () banked
  4676  001B70  C0A9  F04B         	movff	_date+1,?_sprintf+6
  4677  001B74  6A4C               	clrf	?_sprintf+7,c
  4678  001B76  EC0E  F000         	call	_sprintf	;wreg free
  4679                           
  4680                           ;RTC.c: 381: break;
  4681  001B7A  D04A               	goto	i2l294
  4682  001B7C                     i2l5164:
  4683                           
  4684                           ;RTC.c: 383: i = (8 + 6 + 1);
  4685  001B7C  0E0F               	movlw	15
  4686  001B7E  6E5E               	movwf	printRTC@i,c
  4687                           
  4688                           ;RTC.c: 384: while (--i)
  4689  001B80  D015               	goto	i2l5168
  4690  001B82                     i2l5166:
  4691                           
  4692                           ;RTC.c: 385: str[i - 1] = '\0';
  4693  001B82  0EFF               	movlw	255
  4694  001B84  6E57               	movwf	??_printRTC& (0+255),c
  4695  001B86  0EFF               	movlw	255
  4696  001B88  6E58               	movwf	(??_printRTC+1)& (0+255),c
  4697  001B8A  505E               	movf	printRTC@i,w,c
  4698  001B8C  6E59               	movwf	(??_printRTC+2)& (0+255),c
  4699  001B8E  6A5A               	clrf	(??_printRTC+3)& (0+255),c
  4700  001B90  5057               	movf	??_printRTC,w,c
  4701  001B92  2659               	addwf	??_printRTC+2,f,c
  4702  001B94  5058               	movf	??_printRTC+1,w,c
  4703  001B96  225A               	addwfc	??_printRTC+3,f,c
  4704  001B98  0100               	movlb	0	; () banked
  4705  001B9A  0EC4               	movlw	low printRTC@str
  4706  001B9C  2459               	addwf	??_printRTC+2,w,c
  4707  001B9E  6ED9               	movwf	fsr2l,c
  4708  001BA0  0100               	movlb	0	; () banked
  4709  001BA2  0E00               	movlw	high printRTC@str
  4710  001BA4  205A               	addwfc	??_printRTC+3,w,c
  4711  001BA6  6EDA               	movwf	fsr2h,c
  4712  001BA8  0E00               	movlw	0
  4713  001BAA  6EDF               	movwf	indf2,c
  4714  001BAC                     i2l5168:
  4715  001BAC  2E5E               	decfsz	printRTC@i,f,c
  4716  001BAE  D7E9               	goto	i2l5166
  4717  001BB0  D02F               	goto	i2l294
  4718  001BB2                     i2l5172:
  4719  001BB2  0100               	movlb	0	; () banked
  4720  001BB4  51E5               	movf	_rtcMenu& (0+255),w,b
  4721                           
  4722                           ; Switch size 1, requested type "space"
  4723                           ; Number of cases is 1, Range of values is 4 to 4
  4724                           ; switch strategies available:
  4725                           ; Name         Instructions Cycles
  4726                           ; simple_byte            4     3 (average)
  4727                           ;	Chosen strategy is simple_byte
  4728  001BB6  0A04               	xorlw	4	; case 4
  4729  001BB8  B4D8               	btfsc	status,2,c
  4730  001BBA  D7CB               	goto	i2l5162
  4731  001BBC  D7DF               	goto	i2l5164
  4732  001BBE                     i2l5174:
  4733                           
  4734                           ;RTC.c: 390: sprintf(str, "    ");
  4735  001BBE  0100               	movlb	0	; () banked
  4736  001BC0  0E00               	movlw	high printRTC@str
  4737  001BC2  6E46               	movwf	sprintf@sp+1,c
  4738  001BC4  0100               	movlb	0	; () banked
  4739  001BC6  0EC4               	movlw	low printRTC@str
  4740  001BC8  6E45               	movwf	sprintf@sp,c
  4741  001BCA  0E7D               	movlw	high STR_14
  4742  001BCC  6E48               	movwf	sprintf@f+1,c
  4743  001BCE  0E9D               	movlw	low STR_14
  4744  001BD0  6E47               	movwf	sprintf@f,c
  4745  001BD2  EC0E  F000         	call	_sprintf	;wreg free
  4746                           
  4747                           ;RTC.c: 391: break;
  4748  001BD6  D01C               	goto	i2l294
  4749  001BD8                     i2l5178:
  4750  001BD8  505B               	movf	printRTC@bits,w,c
  4751                           
  4752                           ; Switch size 1, requested type "space"
  4753                           ; Number of cases is 9, Range of values is 0 to 8
  4754                           ; switch strategies available:
  4755                           ; Name         Instructions Cycles
  4756                           ; simple_byte           28    15 (average)
  4757                           ;	Chosen strategy is simple_byte
  4758  001BDA  0A00               	xorlw	0	; case 0
  4759  001BDC  B4D8               	btfsc	status,2,c
  4760  001BDE  D7EF               	goto	i2l5174
  4761  001BE0  0A01               	xorlw	1	; case 1
  4762  001BE2  B4D8               	btfsc	status,2,c
  4763  001BE4  D7EC               	goto	i2l5174
  4764  001BE6  0A03               	xorlw	3	; case 2
  4765  001BE8  B4D8               	btfsc	status,2,c
  4766  001BEA  D7E3               	goto	i2l5172
  4767  001BEC  0A01               	xorlw	1	; case 3
  4768  001BEE  B4D8               	btfsc	status,2,c
  4769  001BF0  D7AA               	goto	i2l5160
  4770  001BF2  0A07               	xorlw	7	; case 4
  4771  001BF4  B4D8               	btfsc	status,2,c
  4772  001BF6  D789               	goto	i2l5154
  4773  001BF8  0A01               	xorlw	1	; case 5
  4774  001BFA  B4D8               	btfsc	status,2,c
  4775  001BFC  D786               	goto	i2l5154
  4776  001BFE  0A03               	xorlw	3	; case 6
  4777  001C00  B4D8               	btfsc	status,2,c
  4778  001C02  D732               	goto	i2l5140
  4779  001C04  0A01               	xorlw	1	; case 7
  4780  001C06  B4D8               	btfsc	status,2,c
  4781  001C08  D72F               	goto	i2l5140
  4782  001C0A  0A0F               	xorlw	15	; case 8
  4783  001C0C  B4D8               	btfsc	status,2,c
  4784  001C0E  D696               	goto	i2l5124
  4785  001C10                     i2l294:
  4786                           
  4787                           ;RTC.c: 393: if (*str == 0)
  4788  001C10  0100               	movlb	0	; () banked
  4789  001C12  67C4               	tstfsz	printRTC@str& (0+255),b
  4790  001C14  D013               	goto	i2l327
  4791                           
  4792                           ; BSR set to: 0
  4793                           ;RTC.c: 394: {
  4794                           ;RTC.c: 395: cnt++;
  4795  001C16  2A5C               	incf	printRTC@cnt,f,c
  4796                           
  4797                           ; BSR set to: 0
  4798                           ;RTC.c: 396: advState();
  4799  001C18  ECD3  F01B         	call	_advState	;wreg free
  4800                           
  4801                           ;RTC.c: 397: if (cnt < 10)
  4802  001C1C  0E0A               	movlw	10
  4803  001C1E  5C5C               	subwf	printRTC@cnt,w,c
  4804  001C20  A0D8               	btfss	status,0,c
  4805  001C22  D7DA               	goto	i2l5178
  4806                           
  4807                           ;RTC.c: 401: else
  4808                           ;RTC.c: 402: {
  4809                           ;RTC.c: 403: sprintf(str, "ERR");
  4810                           
  4811                           ;RTC.c: 400: }
  4812                           
  4813                           ;RTC.c: 398: {
  4814                           ;RTC.c: 399: goto menu_loop;
  4815  001C24  0100               	movlb	0	; () banked
  4816  001C26  0E00               	movlw	high printRTC@str
  4817  001C28  6E46               	movwf	sprintf@sp+1,c
  4818  001C2A  0100               	movlb	0	; () banked
  4819  001C2C  0EC4               	movlw	low printRTC@str
  4820  001C2E  6E45               	movwf	sprintf@sp,c
  4821  001C30  0E7D               	movlw	high STR_15
  4822  001C32  6E48               	movwf	sprintf@f+1,c
  4823  001C34  0EB5               	movlw	low STR_15
  4824  001C36  6E47               	movwf	sprintf@f,c
  4825  001C38  EC0E  F000         	call	_sprintf	;wreg free
  4826  001C3C                     i2l327:
  4827                           
  4828                           ;RTC.c: 404: }
  4829                           ;RTC.c: 405: }
  4830                           ;RTC.c: 407: writeString(digits, str);
  4831  001C3C  0100               	movlb	0	; () banked
  4832  001C3E  0E00               	movlw	high printRTC@str
  4833  001C40  6E1D               	movwf	writeString@string+1,c
  4834  001C42  0100               	movlb	0	; () banked
  4835  001C44  0EC4               	movlw	low printRTC@str
  4836  001C46  6E1C               	movwf	writeString@string,c
  4837  001C48  505D               	movf	printRTC@digits,w,c
  4838  001C4A  ECC1  F011         	call	_writeString
  4839                           
  4840                           ;RTC.c: 408: screen.changed |= digits;
  4841  001C4E  505D               	movf	printRTC@digits,w,c
  4842  001C50  0100               	movlb	0	; () banked
  4843  001C52  13DE               	iorwf	(_screen+11)& (0+255),f,b
  4844                           
  4845                           ; BSR set to: 0
  4846  001C54  0012               	return	
  4847  001C56                     __end_of_printRTC:
  4848                           	opt stack 0
  4849                           tosu	equ	0xFFF
  4850                           tosh	equ	0xFFE
  4851                           tosl	equ	0xFFD
  4852                           pclatu	equ	0xFFB
  4853                           pclath	equ	0xFFA
  4854                           tblptru	equ	0xFF8
  4855                           tblptrh	equ	0xFF7
  4856                           tblptrl	equ	0xFF6
  4857                           tablat	equ	0xFF5
  4858                           prodh	equ	0xFF4
  4859                           prodl	equ	0xFF3
  4860                           intcon	equ	0xFF2
  4861                           intcon2	equ	0xFF1
  4862                           postinc0	equ	0xFEE
  4863                           fsr0h	equ	0xFEA
  4864                           fsr0l	equ	0xFE9
  4865                           wreg	equ	0xFE8
  4866                           postinc1	equ	0xFE6
  4867                           postdec1	equ	0xFE5
  4868                           fsr1h	equ	0xFE2
  4869                           fsr1l	equ	0xFE1
  4870                           indf2	equ	0xFDF
  4871                           postinc2	equ	0xFDE
  4872                           postdec2	equ	0xFDD
  4873                           fsr2h	equ	0xFDA
  4874                           fsr2l	equ	0xFD9
  4875                           status	equ	0xFD8
  4876                           
  4877 ;; *************** function _printTemp *****************
  4878 ;; Defined at:
  4879 ;;		line 80 in file "temp.c"
  4880 ;; Parameters:    Size  Location     Type
  4881 ;;  digits          1    wreg     unsigned char 
  4882 ;; Auto vars:     Size  Location     Type
  4883 ;;  digits          1   57[BANK0 ] unsigned char 
  4884 ;;  str            15   36[BANK0 ] unsigned char [15]
  4885 ;;  units           1   56[BANK0 ] unsigned char 
  4886 ;;  bits            1   55[BANK0 ] unsigned char 
  4887 ;; Return value:  Size  Location     Type
  4888 ;;		None               void
  4889 ;; Registers used:
  4890 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4891 ;; Tracked objects:
  4892 ;;		On entry : 0/0
  4893 ;;		On exit  : 0/0
  4894 ;;		Unchanged: 0/0
  4895 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4896 ;;      Params:         0       0       0       0       0       0       0       0       0
  4897 ;;      Locals:         0      22       0       0       0       0       0       0       0
  4898 ;;      Temps:          5       0       0       0       0       0       0       0       0
  4899 ;;      Totals:         5      22       0       0       0       0       0       0       0
  4900 ;;Total ram usage:       27 bytes
  4901 ;; Hardware stack levels used:    1
  4902 ;; Hardware stack levels required when called:    4
  4903 ;; This function calls:
  4904 ;;		___altoft
  4905 ;;		___ftdiv
  4906 ;;		___ftmul
  4907 ;;		___fttol
  4908 ;;		___lltoft
  4909 ;;		_countBits
  4910 ;;		_lowbit
  4911 ;;		_sprintf
  4912 ;;		_writeString
  4913 ;; This function is called by:
  4914 ;;		_initTemp
  4915 ;;		_isr
  4916 ;; This function uses a non-reentrant model
  4917 ;;
  4918                           
  4919                           	psect	text16
  4920  00286C                     __ptext16:
  4921                           	opt stack 0
  4922  00286C                     _printTemp:
  4923                           	opt stack 21
  4924                           
  4925                           ; BSR set to: 0
  4926                           ;incstack = 0
  4927                           ;printTemp@digits stored from wreg
  4928  00286C  0100               	movlb	0	; () banked
  4929  00286E  6F99               	movwf	printTemp@digits& (0+255),b
  4930                           
  4931                           ; BSR set to: 0
  4932                           ;temp.c: 82: uint8_t units = 0;
  4933  002870  0E00               	movlw	0
  4934  002872  0100               	movlb	0	; () banked
  4935  002874  6F98               	movwf	printTemp@units& (0+255),b
  4936                           
  4937                           ; BSR set to: 0
  4938                           ;temp.c: 83: units |= lowbit(digits);
  4939  002876  0100               	movlb	0	; () banked
  4940  002878  5199               	movf	printTemp@digits& (0+255),w,b
  4941  00287A  6E01               	movwf	lowbit@x,c
  4942  00287C  6A02               	clrf	lowbit@x+1,c
  4943  00287E  6A03               	clrf	lowbit@x+2,c
  4944  002880  6A04               	clrf	lowbit@x+3,c
  4945  002882  EC7F  F020         	call	_lowbit	;wreg free
  4946  002886  C001  F057         	movff	?_lowbit,??_printTemp
  4947  00288A  C002  F058         	movff	?_lowbit+1,??_printTemp+1
  4948  00288E  C003  F059         	movff	?_lowbit+2,??_printTemp+2
  4949  002892  C004  F05A         	movff	?_lowbit+3,??_printTemp+3
  4950  002896  5057               	movf	??_printTemp,w,c
  4951  002898  0100               	movlb	0	; () banked
  4952  00289A  1398               	iorwf	printTemp@units& (0+255),f,b
  4953                           
  4954                           ; BSR set to: 0
  4955                           ;temp.c: 84: units |= lowbit(digits & (~lowbit(digits)));
  4956  00289C  0100               	movlb	0	; () banked
  4957  00289E  5199               	movf	printTemp@digits& (0+255),w,b
  4958  0028A0  6E01               	movwf	lowbit@x,c
  4959  0028A2  6A02               	clrf	lowbit@x+1,c
  4960  0028A4  6A03               	clrf	lowbit@x+2,c
  4961  0028A6  6A04               	clrf	lowbit@x+3,c
  4962  0028A8  EC7F  F020         	call	_lowbit	;wreg free
  4963  0028AC  C001  F057         	movff	?_lowbit,??_printTemp
  4964  0028B0  C002  F058         	movff	?_lowbit+1,??_printTemp+1
  4965  0028B4  C003  F059         	movff	?_lowbit+2,??_printTemp+2
  4966  0028B8  C004  F05A         	movff	?_lowbit+3,??_printTemp+3
  4967  0028BC  5057               	movf	??_printTemp,w,c
  4968  0028BE  0AFF               	xorlw	255
  4969  0028C0  0100               	movlb	0	; () banked
  4970  0028C2  1599               	andwf	printTemp@digits& (0+255),w,b
  4971  0028C4  6E5B               	movwf	(??_printTemp+4)& (0+255),c
  4972  0028C6  505B               	movf	??_printTemp+4,w,c
  4973  0028C8  0100               	movlb	0	; () banked
  4974  0028CA  6F93               	movwf	_printTemp$1310& (0+255),b
  4975  0028CC  0100               	movlb	0	; () banked
  4976  0028CE  6B94               	clrf	(_printTemp$1310+1)& (0+255),b
  4977  0028D0  0100               	movlb	0	; () banked
  4978  0028D2  6B95               	clrf	(_printTemp$1310+2)& (0+255),b
  4979  0028D4  0100               	movlb	0	; () banked
  4980  0028D6  6B96               	clrf	(_printTemp$1310+3)& (0+255),b
  4981                           
  4982                           ; BSR set to: 0
  4983                           ;temp.c: 84: units |= lowbit(digits & (~lowbit(digits)));
  4984  0028D8  C093  F001         	movff	_printTemp$1310,lowbit@x
  4985  0028DC  C094  F002         	movff	_printTemp$1310+1,lowbit@x+1
  4986  0028E0  C095  F003         	movff	_printTemp$1310+2,lowbit@x+2
  4987  0028E4  C096  F004         	movff	_printTemp$1310+3,lowbit@x+3
  4988  0028E8  EC7F  F020         	call	_lowbit	;wreg free
  4989  0028EC  C001  F057         	movff	?_lowbit,??_printTemp
  4990  0028F0  C002  F058         	movff	?_lowbit+1,??_printTemp+1
  4991  0028F4  C003  F059         	movff	?_lowbit+2,??_printTemp+2
  4992  0028F8  C004  F05A         	movff	?_lowbit+3,??_printTemp+3
  4993  0028FC  5057               	movf	??_printTemp,w,c
  4994  0028FE  0100               	movlb	0	; () banked
  4995  002900  1398               	iorwf	printTemp@units& (0+255),f,b
  4996                           
  4997                           ; BSR set to: 0
  4998                           ;temp.c: 85: digits &= ~units;
  4999  002902  0100               	movlb	0	; () banked
  5000  002904  5198               	movf	printTemp@units& (0+255),w,b
  5001  002906  0AFF               	xorlw	255
  5002  002908  0100               	movlb	0	; () banked
  5003  00290A  1799               	andwf	printTemp@digits& (0+255),f,b
  5004                           
  5005                           ; BSR set to: 0
  5006                           ;temp.c: 86: if (tempMenu.state == 0)
  5007  00290C  0100               	movlb	0	; () banked
  5008  00290E  67E0               	tstfsz	_tempMenu& (0+255),b
  5009  002910  D009               	goto	i2l5254
  5010                           
  5011                           ; BSR set to: 0
  5012                           ;temp.c: 87: {
  5013                           ;temp.c: 88: writeString(units, (char*) "*C");
  5014  002912  0E7D               	movlw	high STR_16
  5015  002914  6E1D               	movwf	writeString@string+1,c
  5016  002916  0EB9               	movlw	low STR_16
  5017  002918  6E1C               	movwf	writeString@string,c
  5018  00291A  0100               	movlb	0	; () banked
  5019  00291C  5198               	movf	printTemp@units& (0+255),w,b
  5020  00291E  ECC1  F011         	call	_writeString
  5021                           
  5022                           ;temp.c: 89: }
  5023  002922  D008               	goto	i2l5256
  5024  002924                     i2l5254:
  5025                           
  5026                           ;temp.c: 90: else
  5027                           ;temp.c: 91: {
  5028                           ;temp.c: 92: writeString(units, (char*) "*F");
  5029  002924  0E7D               	movlw	high STR_17
  5030  002926  6E1D               	movwf	writeString@string+1,c
  5031  002928  0EBC               	movlw	low STR_17
  5032  00292A  6E1C               	movwf	writeString@string,c
  5033  00292C  0100               	movlb	0	; () banked
  5034  00292E  5198               	movf	printTemp@units& (0+255),w,b
  5035  002930  ECC1  F011         	call	_writeString
  5036  002934                     i2l5256:
  5037                           
  5038                           ;temp.c: 93: }
  5039                           ;temp.c: 94: char str[(8 + 6 + 1)];
  5040                           ;temp.c: 96: uint8_t bits = countBits(digits);
  5041  002934  0100               	movlb	0	; () banked
  5042  002936  5199               	movf	printTemp@digits& (0+255),w,b
  5043  002938  6E01               	movwf	countBits@num,c
  5044  00293A  6A02               	clrf	countBits@num+1,c
  5045  00293C  6A03               	clrf	countBits@num+2,c
  5046  00293E  6A04               	clrf	countBits@num+3,c
  5047  002940  ECA9  F022         	call	_countBits	;wreg free
  5048  002944  0100               	movlb	0	; () banked
  5049  002946  6F97               	movwf	printTemp@bits& (0+255),b
  5050                           
  5051                           ; BSR set to: 0
  5052                           ;temp.c: 97: temp *= (pow10[bits - 2]);
  5053  002948  C0B9  F015         	movff	_temp,___ftmul@f1
  5054  00294C  C0BA  F016         	movff	_temp+1,___ftmul@f1+1
  5055  002950  C0BB  F017         	movff	_temp+2,___ftmul@f1+2
  5056  002954  0EF8               	movlw	248
  5057  002956  6E57               	movwf	??_printTemp& (0+255),c
  5058  002958  0EFF               	movlw	255
  5059  00295A  6E58               	movwf	(??_printTemp+1)& (0+255),c
  5060  00295C  0100               	movlb	0	; () banked
  5061  00295E  5197               	movf	printTemp@bits& (0+255),w,b
  5062  002960  6E59               	movwf	(??_printTemp+2)& (0+255),c
  5063  002962  6A5A               	clrf	(??_printTemp+3)& (0+255),c
  5064  002964  90D8               	bcf	status,0,c
  5065  002966  3659               	rlcf	??_printTemp+2,f,c
  5066  002968  365A               	rlcf	??_printTemp+3,f,c
  5067  00296A  90D8               	bcf	status,0,c
  5068  00296C  3659               	rlcf	??_printTemp+2,f,c
  5069  00296E  365A               	rlcf	??_printTemp+3,f,c
  5070  002970  5057               	movf	??_printTemp,w,c
  5071  002972  2659               	addwf	??_printTemp+2,f,c
  5072  002974  5058               	movf	??_printTemp+1,w,c
  5073  002976  225A               	addwfc	??_printTemp+3,f,c
  5074  002978  0EC8               	movlw	low _pow10
  5075  00297A  2459               	addwf	??_printTemp+2,w,c
  5076  00297C  6EF6               	movwf	tblptrl,c
  5077  00297E  0E7C               	movlw	high _pow10
  5078  002980  205A               	addwfc	??_printTemp+3,w,c
  5079  002982  6EF7               	movwf	tblptrh,c
  5080  002984                     	if	0	;There are less than 3 active tblptr bytes
  5081  002984                     	endif
  5082  002984  0009               	tblrd		*+
  5083  002986  CFF5 F009          	movff	tablat,___lltoft@c
  5084  00298A  0009               	tblrd		*+
  5085  00298C  CFF5 F00A          	movff	tablat,___lltoft@c+1
  5086  002990  0009               	tblrd		*+
  5087  002992  CFF5 F00B          	movff	tablat,___lltoft@c+2
  5088  002996  000A               	tblrd		*-
  5089  002998  CFF5 F00C          	movff	tablat,___lltoft@c+3
  5090  00299C  EC17  F021         	call	___lltoft	;wreg free
  5091  0029A0  C009  F018         	movff	?___lltoft,___ftmul@f2
  5092  0029A4  C00A  F019         	movff	?___lltoft+1,___ftmul@f2+1
  5093  0029A8  C00B  F01A         	movff	?___lltoft+2,___ftmul@f2+2
  5094  0029AC  EC61  F01B         	call	___ftmul	;wreg free
  5095  0029B0  C015  F0B9         	movff	?___ftmul,_temp
  5096  0029B4  C016  F0BA         	movff	?___ftmul+1,_temp+1
  5097  0029B8  C017  F0BB         	movff	?___ftmul+2,_temp+2
  5098                           
  5099                           ;temp.c: 98: temp = (int32_t) temp;
  5100  0029BC  C0B9  F024         	movff	_temp,___fttol@f1
  5101  0029C0  C0BA  F025         	movff	_temp+1,___fttol@f1+1
  5102  0029C4  C0BB  F026         	movff	_temp+2,___fttol@f1+2
  5103  0029C8  ECAF  F01C         	call	___fttol	;wreg free
  5104  0029CC  C024  F033         	movff	?___fttol,___altoft@c
  5105  0029D0  C025  F034         	movff	?___fttol+1,___altoft@c+1
  5106  0029D4  C026  F035         	movff	?___fttol+2,___altoft@c+2
  5107  0029D8  C027  F036         	movff	?___fttol+3,___altoft@c+3
  5108  0029DC  EC64  F01E         	call	___altoft	;wreg free
  5109  0029E0  C033  F0B9         	movff	?___altoft,_temp
  5110  0029E4  C034  F0BA         	movff	?___altoft+1,_temp+1
  5111  0029E8  C035  F0BB         	movff	?___altoft+2,_temp+2
  5112                           
  5113                           ;temp.c: 99: temp /= (pow10[bits - 2]);
  5114  0029EC  C0B9  F024         	movff	_temp,___ftdiv@f1
  5115  0029F0  C0BA  F025         	movff	_temp+1,___ftdiv@f1+1
  5116  0029F4  C0BB  F026         	movff	_temp+2,___ftdiv@f1+2
  5117  0029F8  0EF8               	movlw	248
  5118  0029FA  6E57               	movwf	??_printTemp& (0+255),c
  5119  0029FC  0EFF               	movlw	255
  5120  0029FE  6E58               	movwf	(??_printTemp+1)& (0+255),c
  5121  002A00  0100               	movlb	0	; () banked
  5122  002A02  5197               	movf	printTemp@bits& (0+255),w,b
  5123  002A04  6E59               	movwf	(??_printTemp+2)& (0+255),c
  5124  002A06  6A5A               	clrf	(??_printTemp+3)& (0+255),c
  5125  002A08  90D8               	bcf	status,0,c
  5126  002A0A  3659               	rlcf	??_printTemp+2,f,c
  5127  002A0C  365A               	rlcf	??_printTemp+3,f,c
  5128  002A0E  90D8               	bcf	status,0,c
  5129  002A10  3659               	rlcf	??_printTemp+2,f,c
  5130  002A12  365A               	rlcf	??_printTemp+3,f,c
  5131  002A14  5057               	movf	??_printTemp,w,c
  5132  002A16  2659               	addwf	??_printTemp+2,f,c
  5133  002A18  5058               	movf	??_printTemp+1,w,c
  5134  002A1A  225A               	addwfc	??_printTemp+3,f,c
  5135  002A1C  0EC8               	movlw	low _pow10
  5136  002A1E  2459               	addwf	??_printTemp+2,w,c
  5137  002A20  6EF6               	movwf	tblptrl,c
  5138  002A22  0E7C               	movlw	high _pow10
  5139  002A24  205A               	addwfc	??_printTemp+3,w,c
  5140  002A26  6EF7               	movwf	tblptrh,c
  5141  002A28                     	if	0	;There are less than 3 active tblptr bytes
  5142  002A28                     	endif
  5143  002A28  0009               	tblrd		*+
  5144  002A2A  CFF5 F009          	movff	tablat,___lltoft@c
  5145  002A2E  0009               	tblrd		*+
  5146  002A30  CFF5 F00A          	movff	tablat,___lltoft@c+1
  5147  002A34  0009               	tblrd		*+
  5148  002A36  CFF5 F00B          	movff	tablat,___lltoft@c+2
  5149  002A3A  000A               	tblrd		*-
  5150  002A3C  CFF5 F00C          	movff	tablat,___lltoft@c+3
  5151  002A40  EC17  F021         	call	___lltoft	;wreg free
  5152  002A44  C009  F027         	movff	?___lltoft,___ftdiv@f2
  5153  002A48  C00A  F028         	movff	?___lltoft+1,___ftdiv@f2+1
  5154  002A4C  C00B  F029         	movff	?___lltoft+2,___ftdiv@f2+2
  5155  002A50  EC44  F01C         	call	___ftdiv	;wreg free
  5156  002A54  C024  F0B9         	movff	?___ftdiv,_temp
  5157  002A58  C025  F0BA         	movff	?___ftdiv+1,_temp+1
  5158  002A5C  C026  F0BB         	movff	?___ftdiv+2,_temp+2
  5159                           
  5160                           ;temp.c: 101: sprintf(str, "%*f", bits, temp);
  5161  002A60  0100               	movlb	0	; () banked
  5162  002A62  0E00               	movlw	high printTemp@str
  5163  002A64  6E46               	movwf	sprintf@sp+1,c
  5164  002A66  0100               	movlb	0	; () banked
  5165  002A68  0E84               	movlw	low printTemp@str
  5166  002A6A  6E45               	movwf	sprintf@sp,c
  5167  002A6C  0E7D               	movlw	high STR_18
  5168  002A6E  6E48               	movwf	sprintf@f+1,c
  5169  002A70  0EB1               	movlw	low STR_18
  5170  002A72  6E47               	movwf	sprintf@f,c
  5171  002A74  0100               	movlb	0	; () banked
  5172  002A76  C097  F049         	movff	printTemp@bits,?_sprintf+4
  5173  002A7A  6A4A               	clrf	?_sprintf+5,c
  5174  002A7C  C0B9  F04B         	movff	_temp,?_sprintf+6
  5175  002A80  C0BA  F04C         	movff	_temp+1,?_sprintf+7
  5176  002A84  C0BB  F04D         	movff	_temp+2,?_sprintf+8
  5177  002A88  EC0E  F000         	call	_sprintf	;wreg free
  5178                           
  5179                           ;temp.c: 102: writeString(digits, str);
  5180  002A8C  0100               	movlb	0	; () banked
  5181  002A8E  0E00               	movlw	high printTemp@str
  5182  002A90  6E1D               	movwf	writeString@string+1,c
  5183  002A92  0100               	movlb	0	; () banked
  5184  002A94  0E84               	movlw	low printTemp@str
  5185  002A96  6E1C               	movwf	writeString@string,c
  5186  002A98  0100               	movlb	0	; () banked
  5187  002A9A  5199               	movf	printTemp@digits& (0+255),w,b
  5188  002A9C  ECC1  F011         	call	_writeString
  5189  002AA0  0012               	return	
  5190  002AA2                     __end_of_printTemp:
  5191                           	opt stack 0
  5192                           tosu	equ	0xFFF
  5193                           tosh	equ	0xFFE
  5194                           tosl	equ	0xFFD
  5195                           pclatu	equ	0xFFB
  5196                           pclath	equ	0xFFA
  5197                           tblptru	equ	0xFF8
  5198                           tblptrh	equ	0xFF7
  5199                           tblptrl	equ	0xFF6
  5200                           tablat	equ	0xFF5
  5201                           prodh	equ	0xFF4
  5202                           prodl	equ	0xFF3
  5203                           intcon	equ	0xFF2
  5204                           intcon2	equ	0xFF1
  5205                           postinc0	equ	0xFEE
  5206                           fsr0h	equ	0xFEA
  5207                           fsr0l	equ	0xFE9
  5208                           wreg	equ	0xFE8
  5209                           postinc1	equ	0xFE6
  5210                           postdec1	equ	0xFE5
  5211                           fsr1h	equ	0xFE2
  5212                           fsr1l	equ	0xFE1
  5213                           indf2	equ	0xFDF
  5214                           postinc2	equ	0xFDE
  5215                           postdec2	equ	0xFDD
  5216                           fsr2h	equ	0xFDA
  5217                           fsr2l	equ	0xFD9
  5218                           status	equ	0xFD8
  5219                           
  5220 ;; *************** function _lowbit *****************
  5221 ;; Defined at:
  5222 ;;		line 25 in file "defs.c"
  5223 ;; Parameters:    Size  Location     Type
  5224 ;;  x               4    0[COMRAM] unsigned long 
  5225 ;; Auto vars:     Size  Location     Type
  5226 ;;  log2Val         4    7[COMRAM] unsigned long 
  5227 ;; Return value:  Size  Location     Type
  5228 ;;                  4    0[COMRAM] unsigned long 
  5229 ;; Registers used:
  5230 ;;		wreg, status,2, status,0
  5231 ;; Tracked objects:
  5232 ;;		On entry : 0/0
  5233 ;;		On exit  : 0/0
  5234 ;;		Unchanged: 0/0
  5235 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5236 ;;      Params:         4       0       0       0       0       0       0       0       0
  5237 ;;      Locals:         4       0       0       0       0       0       0       0       0
  5238 ;;      Temps:          3       0       0       0       0       0       0       0       0
  5239 ;;      Totals:        11       0       0       0       0       0       0       0       0
  5240 ;;Total ram usage:       11 bytes
  5241 ;; Hardware stack levels used:    1
  5242 ;; This function calls:
  5243 ;;		Nothing
  5244 ;; This function is called by:
  5245 ;;		_printTemp
  5246 ;; This function uses a non-reentrant model
  5247 ;;
  5248                           
  5249                           	psect	text17
  5250  0040FE                     __ptext17:
  5251                           	opt stack 0
  5252  0040FE                     _lowbit:
  5253                           	opt stack 24
  5254                           
  5255                           ;defs.c: 27: uint32_t log2Val = 0;
  5256                           
  5257                           ;incstack = 0
  5258  0040FE  0E00               	movlw	0
  5259  004100  6E08               	movwf	lowbit@log2Val,c
  5260  004102  0E00               	movlw	0
  5261  004104  6E09               	movwf	lowbit@log2Val+1,c
  5262  004106  0E00               	movlw	0
  5263  004108  6E0A               	movwf	lowbit@log2Val+2,c
  5264  00410A  0E00               	movlw	0
  5265  00410C  6E0B               	movwf	lowbit@log2Val+3,c
  5266                           
  5267                           ;defs.c: 28: if (x & 1)
  5268  00410E  A001               	btfss	lowbit@x,0,c
  5269  004110  D008               	goto	i2l4956
  5270                           
  5271                           ;defs.c: 29: return 1;
  5272  004112  0E01               	movlw	1
  5273  004114  6E01               	movwf	?_lowbit,c
  5274  004116  0E00               	movlw	0
  5275  004118  6E02               	movwf	?_lowbit+1,c
  5276  00411A  0E00               	movlw	0
  5277  00411C  6E03               	movwf	?_lowbit+2,c
  5278  00411E  0E00               	movlw	0
  5279  004120  D021               	goto	L7
  5280  004122                     i2l4956:
  5281  004122  0E01               	movlw	1
  5282  004124  2608               	addwf	lowbit@log2Val,f,c
  5283  004126  0E00               	movlw	0
  5284  004128  2209               	addwfc	lowbit@log2Val+1,f,c
  5285  00412A  220A               	addwfc	lowbit@log2Val+2,f,c
  5286  00412C  220B               	addwfc	lowbit@log2Val+3,f,c
  5287  00412E  90D8               	bcf	status,0,c
  5288  004130  3204               	rrcf	lowbit@x+3,f,c
  5289  004132  3203               	rrcf	lowbit@x+2,f,c
  5290  004134  3202               	rrcf	lowbit@x+1,f,c
  5291  004136  3201               	rrcf	lowbit@x,f,c
  5292  004138  A001               	btfss	lowbit@x& (0+255),0,c
  5293  00413A  D7F3               	goto	i2l4956
  5294                           
  5295                           ;defs.c: 32: return 1 << log2Val;
  5296  00413C  C008  F005         	movff	lowbit@log2Val,??_lowbit
  5297  004140  0E01               	movlw	1
  5298  004142  6E06               	movwf	(??_lowbit+1)& (0+255),c
  5299  004144  6A07               	clrf	(??_lowbit+2)& (0+255),c
  5300  004146  2A05               	incf	??_lowbit,f,c
  5301  004148  D003               	goto	i2u524_44
  5302  00414A                     i2u524_45:
  5303  00414A  90D8               	bcf	status,0,c
  5304  00414C  3606               	rlcf	??_lowbit+1,f,c
  5305  00414E  3607               	rlcf	??_lowbit+2,f,c
  5306  004150                     i2u524_44:
  5307  004150  2E05               	decfsz	??_lowbit,f,c
  5308  004152  D7FB               	goto	i2u524_45
  5309  004154  C006  F001         	movff	??_lowbit+1,?_lowbit
  5310  004158  C007  F002         	movff	??_lowbit+2,?_lowbit+1
  5311  00415C  0E00               	movlw	0
  5312  00415E  BE02               	btfsc	?_lowbit+1,7,c
  5313  004160  0EFF               	movlw	-1
  5314  004162  6E03               	movwf	?_lowbit+2,c
  5315  004164                     L7:
  5316  004164  6E04               	movwf	?_lowbit+3,c
  5317  004166  0012               	return	
  5318  004168                     __end_of_lowbit:
  5319                           	opt stack 0
  5320                           tosu	equ	0xFFF
  5321                           tosh	equ	0xFFE
  5322                           tosl	equ	0xFFD
  5323                           pclatu	equ	0xFFB
  5324                           pclath	equ	0xFFA
  5325                           tblptru	equ	0xFF8
  5326                           tblptrh	equ	0xFF7
  5327                           tblptrl	equ	0xFF6
  5328                           tablat	equ	0xFF5
  5329                           prodh	equ	0xFF4
  5330                           prodl	equ	0xFF3
  5331                           intcon	equ	0xFF2
  5332                           intcon2	equ	0xFF1
  5333                           postinc0	equ	0xFEE
  5334                           fsr0h	equ	0xFEA
  5335                           fsr0l	equ	0xFE9
  5336                           wreg	equ	0xFE8
  5337                           postinc1	equ	0xFE6
  5338                           postdec1	equ	0xFE5
  5339                           fsr1h	equ	0xFE2
  5340                           fsr1l	equ	0xFE1
  5341                           indf2	equ	0xFDF
  5342                           postinc2	equ	0xFDE
  5343                           postdec2	equ	0xFDD
  5344                           fsr2h	equ	0xFDA
  5345                           fsr2l	equ	0xFD9
  5346                           status	equ	0xFD8
  5347                           
  5348 ;; *************** function ___altoft *****************
  5349 ;; Defined at:
  5350 ;;		line 42 in file "/opt/microchip/xc8/v1.32/sources/common/altoft.c"
  5351 ;; Parameters:    Size  Location     Type
  5352 ;;  c               4   50[COMRAM] long 
  5353 ;; Auto vars:     Size  Location     Type
  5354 ;;  sign            1   59[COMRAM] unsigned char 
  5355 ;;  exp             1   58[COMRAM] unsigned char 
  5356 ;; Return value:  Size  Location     Type
  5357 ;;                  3   50[COMRAM] float 
  5358 ;; Registers used:
  5359 ;;		wreg, status,2, status,0, cstack
  5360 ;; Tracked objects:
  5361 ;;		On entry : 0/0
  5362 ;;		On exit  : 0/0
  5363 ;;		Unchanged: 0/0
  5364 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5365 ;;      Params:         4       0       0       0       0       0       0       0       0
  5366 ;;      Locals:         2       0       0       0       0       0       0       0       0
  5367 ;;      Temps:          4       0       0       0       0       0       0       0       0
  5368 ;;      Totals:        10       0       0       0       0       0       0       0       0
  5369 ;;Total ram usage:       10 bytes
  5370 ;; Hardware stack levels used:    1
  5371 ;; Hardware stack levels required when called:    1
  5372 ;; This function calls:
  5373 ;;		___ftpack
  5374 ;; This function is called by:
  5375 ;;		_printTemp
  5376 ;; This function uses a non-reentrant model
  5377 ;;
  5378                           
  5379                           	psect	text18
  5380  003CC8                     __ptext18:
  5381                           	opt stack 0
  5382  003CC8                     ___altoft:
  5383                           	opt stack 23
  5384                           
  5385                           ;incstack = 0
  5386  003CC8  0E00               	movlw	0
  5387  003CCA  6E3C               	movwf	___altoft@sign,c
  5388  003CCC  0E8E               	movlw	142
  5389  003CCE  6E3B               	movwf	___altoft@exp,c
  5390  003CD0  5036               	movf	___altoft@c+3,w,c
  5391  003CD2  0A80               	xorlw	128
  5392  003CD4  0F80               	addlw	128
  5393  003CD6  E108               	bnz	i2u529_45
  5394  003CD8  0E00               	movlw	0
  5395  003CDA  5C35               	subwf	___altoft@c+2,w,c
  5396  003CDC  E105               	bnz	i2u529_45
  5397  003CDE  0E00               	movlw	0
  5398  003CE0  5C34               	subwf	___altoft@c+1,w,c
  5399  003CE2  E102               	bnz	i2u529_45
  5400  003CE4  0E00               	movlw	0
  5401  003CE6  5C33               	subwf	___altoft@c,w,c
  5402  003CE8                     i2u529_45:
  5403  003CE8  B0D8               	btfsc	status,0,c
  5404  003CEA  D011               	goto	i2l4994
  5405  003CEC  1E36               	comf	___altoft@c+3,f,c
  5406  003CEE  1E35               	comf	___altoft@c+2,f,c
  5407  003CF0  1E34               	comf	___altoft@c+1,f,c
  5408  003CF2  6C33               	negf	___altoft@c,c
  5409  003CF4  0E00               	movlw	0
  5410  003CF6  2234               	addwfc	___altoft@c+1,f,c
  5411  003CF8  2235               	addwfc	___altoft@c+2,f,c
  5412  003CFA  2236               	addwfc	___altoft@c+3,f,c
  5413  003CFC  0E01               	movlw	1
  5414  003CFE  6E3C               	movwf	___altoft@sign,c
  5415  003D00  D006               	goto	i2l4994
  5416  003D02                     i2l4992:
  5417  003D02  90D8               	bcf	status,0,c
  5418  003D04  3236               	rrcf	___altoft@c+3,f,c
  5419  003D06  3235               	rrcf	___altoft@c+2,f,c
  5420  003D08  3234               	rrcf	___altoft@c+1,f,c
  5421  003D0A  3233               	rrcf	___altoft@c,f,c
  5422  003D0C  2A3B               	incf	___altoft@exp,f,c
  5423  003D0E                     i2l4994:
  5424  003D0E  0E00               	movlw	0
  5425  003D10  1433               	andwf	___altoft@c,w,c
  5426  003D12  6E37               	movwf	??___altoft& (0+255),c
  5427  003D14  0E00               	movlw	0
  5428  003D16  1434               	andwf	___altoft@c+1,w,c
  5429  003D18  6E38               	movwf	(??___altoft+1)& (0+255),c
  5430  003D1A  0E00               	movlw	0
  5431  003D1C  1435               	andwf	___altoft@c+2,w,c
  5432  003D1E  6E39               	movwf	(??___altoft+2)& (0+255),c
  5433  003D20  0EFF               	movlw	255
  5434  003D22  1436               	andwf	___altoft@c+3,w,c
  5435  003D24  6E3A               	movwf	(??___altoft+3)& (0+255),c
  5436  003D26  503A               	movf	??___altoft+3,w,c
  5437  003D28  1037               	iorwf	??___altoft,w,c
  5438  003D2A  1038               	iorwf	??___altoft+1,w,c
  5439  003D2C  1039               	iorwf	??___altoft+2,w,c
  5440  003D2E  A4D8               	btfss	status,2,c
  5441  003D30  D7E8               	goto	i2l4992
  5442  003D32  C033  F001         	movff	___altoft@c,___ftpack@arg
  5443  003D36  C034  F002         	movff	___altoft@c+1,___ftpack@arg+1
  5444  003D3A  C035  F003         	movff	___altoft@c+2,___ftpack@arg+2
  5445  003D3E  C03B  F004         	movff	___altoft@exp,___ftpack@exp
  5446  003D42  C03C  F005         	movff	___altoft@sign,___ftpack@sign
  5447  003D46  EC70  F01D         	call	___ftpack	;wreg free
  5448  003D4A  C001  F033         	movff	?___ftpack,?___altoft
  5449  003D4E  C002  F034         	movff	?___ftpack+1,?___altoft+1
  5450  003D52  C003  F035         	movff	?___ftpack+2,?___altoft+2
  5451  003D56  0012               	return	
  5452  003D58                     __end_of___altoft:
  5453                           	opt stack 0
  5454                           tosu	equ	0xFFF
  5455                           tosh	equ	0xFFE
  5456                           tosl	equ	0xFFD
  5457                           pclatu	equ	0xFFB
  5458                           pclath	equ	0xFFA
  5459                           tblptru	equ	0xFF8
  5460                           tblptrh	equ	0xFF7
  5461                           tblptrl	equ	0xFF6
  5462                           tablat	equ	0xFF5
  5463                           prodh	equ	0xFF4
  5464                           prodl	equ	0xFF3
  5465                           intcon	equ	0xFF2
  5466                           intcon2	equ	0xFF1
  5467                           postinc0	equ	0xFEE
  5468                           fsr0h	equ	0xFEA
  5469                           fsr0l	equ	0xFE9
  5470                           wreg	equ	0xFE8
  5471                           postinc1	equ	0xFE6
  5472                           postdec1	equ	0xFE5
  5473                           fsr1h	equ	0xFE2
  5474                           fsr1l	equ	0xFE1
  5475                           indf2	equ	0xFDF
  5476                           postinc2	equ	0xFDE
  5477                           postdec2	equ	0xFDD
  5478                           fsr2h	equ	0xFDA
  5479                           fsr2l	equ	0xFD9
  5480                           status	equ	0xFD8
  5481                           
  5482 ;; *************** function _sprintf *****************
  5483 ;; Defined at:
  5484 ;;		line 492 in file "/opt/microchip/xc8/v1.32/sources/common/doprnt.c"
  5485 ;; Parameters:    Size  Location     Type
  5486 ;;  sp              2   68[COMRAM] PTR unsigned char 
  5487 ;;		 -> printTemp@str(15), printRTC@str(15), writeFloat@str(15), writeLong@str(15), 
  5488 ;;  f               2   70[COMRAM] PTR const unsigned char 
  5489 ;;		 -> STR_18(4), STR_15(4), STR_14(5), STR_13(5), 
  5490 ;;		 -> STR_12(10), STR_11(10), STR_10(10), STR_9(15), 
  5491 ;;		 -> STR_8(15), STR_7(15), STR_6(17), STR_5(15), 
  5492 ;;		 -> STR_4(13), STR_3(5), STR_2(5), 
  5493 ;; Auto vars:     Size  Location     Type
  5494 ;;  vd              4    7[BANK0 ] unsigned long 
  5495 ;;  vd              4   11[BANK0 ] unsigned long 
  5496 ;;  _val            4   32[BANK0 ] struct .
  5497 ;;  fval            3   24[BANK0 ] struct .
  5498 ;;  integ           3   15[BANK0 ] struct .
  5499 ;;  ival            3    0        struct .
  5500 ;;  prec            2   29[BANK0 ] int 
  5501 ;;  width           2   27[BANK0 ] int 
  5502 ;;  flag            2   22[BANK0 ] unsigned short 
  5503 ;;  exp             2   20[BANK0 ] int 
  5504 ;;  ap              2   18[BANK0 ] PTR void [1]
  5505 ;;		 -> ?_sprintf(2), 
  5506 ;;  c               1   31[BANK0 ] char 
  5507 ;;  d               1    0        unsigned char 
  5508 ;; Return value:  Size  Location     Type
  5509 ;;                  2   68[COMRAM] int 
  5510 ;; Registers used:
  5511 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5512 ;; Tracked objects:
  5513 ;;		On entry : 0/0
  5514 ;;		On exit  : 0/0
  5515 ;;		Unchanged: 0/0
  5516 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5517 ;;      Params:        12       0       0       0       0       0       0       0       0
  5518 ;;      Locals:         0      36       0       0       0       0       0       0       0
  5519 ;;      Temps:          6       0       0       0       0       0       0       0       0
  5520 ;;      Totals:        18      36       0       0       0       0       0       0       0
  5521 ;;Total ram usage:       54 bytes
  5522 ;; Hardware stack levels used:    1
  5523 ;; Hardware stack levels required when called:    3
  5524 ;; This function calls:
  5525 ;;		___awdiv
  5526 ;;		___ftadd
  5527 ;;		___ftge
  5528 ;;		___ftmul
  5529 ;;		___ftneg
  5530 ;;		___ftsub
  5531 ;;		___fttol
  5532 ;;		___lldiv
  5533 ;;		___llmod
  5534 ;;		___lltoft
  5535 ;;		___wmul
  5536 ;;		__div_to_l_
  5537 ;;		__tdiv_to_l_
  5538 ;;		_fround
  5539 ;;		_isdigit
  5540 ;;		_scale
  5541 ;; This function is called by:
  5542 ;;		_printRTC
  5543 ;;		_printTemp
  5544 ;;		_writeLong
  5545 ;;		_writeFloat
  5546 ;; This function uses a non-reentrant model
  5547 ;;
  5548                           
  5549                           	psect	text19
  5550  00001C                     __ptext19:
  5551                           	opt stack 0
  5552  00001C                     _sprintf:
  5553                           	opt stack 21
  5554                           
  5555                           ;doprnt.c: 494: va_list ap;
  5556                           ;doprnt.c: 499: signed char c;
  5557                           ;doprnt.c: 501: int width;
  5558                           ;doprnt.c: 504: int prec;
  5559                           ;doprnt.c: 508: unsigned short flag;
  5560                           ;doprnt.c: 515: char d;
  5561                           ;doprnt.c: 516: double fval, integ;
  5562                           ;doprnt.c: 517: int exp;
  5563                           ;doprnt.c: 518: double ival;
  5564                           ;doprnt.c: 519: union {
  5565                           ;doprnt.c: 520: unsigned long _val;
  5566                           ;doprnt.c: 521: struct {
  5567                           ;doprnt.c: 522: const char * _cp;
  5568                           ;doprnt.c: 523: unsigned _len;
  5569                           ;doprnt.c: 524: } _str;
  5570                           ;doprnt.c: 525: } _val;
  5571                           ;doprnt.c: 542: *ap = __va_start();
  5572                           
  5573                           ;incstack = 0
  5574  00001C  0E00               	movlw	high (?_sprintf+4)
  5575  00001E  0100               	movlb	0	; () banked
  5576  000020  6F73               	movwf	(sprintf@ap+1)& (0+255),b
  5577  000022  0E49               	movlw	low (?_sprintf+4)
  5578  000024  0100               	movlb	0	; () banked
  5579  000026  6F72               	movwf	sprintf@ap& (0+255),b
  5580                           
  5581                           ;doprnt.c: 545: while(c = *f++) {
  5582  000028  EF4F  F007         	goto	i2l4870
  5583  00002C                     i2l4474:
  5584                           
  5585                           ; BSR set to: 0
  5586                           ;doprnt.c: 547: if(c != '%')
  5587  00002C  0100               	movlb	0	; () banked
  5588  00002E  517F               	movf	sprintf@c& (0+255),w,b
  5589  000030  0A25               	xorlw	37
  5590  000032  B4D8               	btfsc	status,2,c
  5591  000034  D00B               	goto	i2l4480
  5592                           
  5593                           ; BSR set to: 0
  5594                           ;doprnt.c: 549: {
  5595                           ;doprnt.c: 550: ((*sp++ = (c)));
  5596  000036  C045  FFD9         	movff	sprintf@sp,fsr2l
  5597  00003A  C046  FFDA         	movff	sprintf@sp+1,fsr2h
  5598  00003E  0100               	movlb	0	; () banked
  5599  000040  C07F  FFDF         	movff	sprintf@c,indf2
  5600                           
  5601                           ; BSR set to: 0
  5602  000044  4A45               	infsnz	sprintf@sp,f,c
  5603  000046  2A46               	incf	sprintf@sp+1,f,c
  5604                           
  5605                           ;doprnt.c: 551: continue;
  5606  000048  EF4F  F007         	goto	i2l4870
  5607  00004C                     i2l4480:
  5608                           
  5609                           ; BSR set to: 0
  5610                           ;doprnt.c: 552: }
  5611                           ;doprnt.c: 555: width = 0;
  5612  00004C  0E00               	movlw	0
  5613  00004E  0100               	movlb	0	; () banked
  5614  000050  6F7C               	movwf	(sprintf@width+1)& (0+255),b
  5615  000052  0E00               	movlw	0
  5616  000054  0100               	movlb	0	; () banked
  5617  000056  6F7B               	movwf	sprintf@width& (0+255),b
  5618                           
  5619                           ;doprnt.c: 557: flag = 0;
  5620  000058  0E00               	movlw	0
  5621  00005A  0100               	movlb	0	; () banked
  5622  00005C  6F77               	movwf	(sprintf@flag+1)& (0+255),b
  5623  00005E  0E00               	movlw	0
  5624  000060  0100               	movlb	0	; () banked
  5625  000062  6F76               	movwf	sprintf@flag& (0+255),b
  5626  000064  D004               	goto	i2l4486
  5627  000066                     i2l4482:
  5628                           
  5629                           ;doprnt.c: 589: flag |= 0x04;
  5630  000066  0100               	movlb	0	; () banked
  5631  000068  8576               	bsf	sprintf@flag& (0+255),2,b
  5632                           
  5633                           ;doprnt.c: 590: f++;
  5634  00006A  4A47               	infsnz	sprintf@f,f,c
  5635  00006C  2A48               	incf	sprintf@f+1,f,c
  5636  00006E                     i2l4486:
  5637  00006E  C047  FFF6         	movff	sprintf@f,tblptrl
  5638  000072  C048  FFF7         	movff	sprintf@f+1,tblptrh
  5639  000076                     	if	0	;tblptru may be non-zero
  5640  000076                     	endif
  5641  000076                     	if	0	;tblptru may be non-zero
  5642  000076                     	endif
  5643  000076  0008               	tblrd		*
  5644  000078  50F5               	movf	tablat,w,c
  5645                           
  5646                           ; Switch size 1, requested type "space"
  5647                           ; Number of cases is 1, Range of values is 48 to 48
  5648                           ; switch strategies available:
  5649                           ; Name         Instructions Cycles
  5650                           ; simple_byte            4     3 (average)
  5651                           ;	Chosen strategy is simple_byte
  5652  00007A  0A30               	xorlw	48	; case 48
  5653  00007C  B4D8               	btfsc	status,2,c
  5654  00007E  D7F3               	goto	i2l4482
  5655                           
  5656                           ;doprnt.c: 606: if(isdigit((unsigned)*f)) {
  5657                           
  5658                           ;doprnt.c: 595: }
  5659                           
  5660                           ;doprnt.c: 594: break;
  5661  000080  C047  FFF6         	movff	sprintf@f,tblptrl
  5662  000084  C048  FFF7         	movff	sprintf@f+1,tblptrh
  5663  000088                     	if	0	;tblptru may be non-zero
  5664  000088                     	endif
  5665  000088                     	if	0	;tblptru may be non-zero
  5666  000088                     	endif
  5667  000088  0008               	tblrd		*
  5668  00008A  50F5               	movf	tablat,w,c
  5669  00008C  ECF5  F022         	call	_isdigit
  5670  000090  A0D8               	btfss	status,0,c
  5671  000092  D037               	goto	i2l4500
  5672                           
  5673                           ;doprnt.c: 607: width = 0;
  5674  000094  0E00               	movlw	0
  5675  000096  0100               	movlb	0	; () banked
  5676  000098  6F7C               	movwf	(sprintf@width+1)& (0+255),b
  5677  00009A  0E00               	movlw	0
  5678  00009C  0100               	movlb	0	; () banked
  5679  00009E  6F7B               	movwf	sprintf@width& (0+255),b
  5680  0000A0                     i2l4492:
  5681                           
  5682                           ;doprnt.c: 609: width *= 10;
  5683  0000A0  C07B  F00F         	movff	sprintf@width,___wmul@multiplier
  5684  0000A4  C07C  F010         	movff	sprintf@width+1,___wmul@multiplier+1
  5685  0000A8  0E00               	movlw	0
  5686  0000AA  6E12               	movwf	___wmul@multiplicand+1,c
  5687  0000AC  0E0A               	movlw	10
  5688  0000AE  6E11               	movwf	___wmul@multiplicand,c
  5689  0000B0  ECD0  F022         	call	___wmul	;wreg free
  5690  0000B4  C00F  F07B         	movff	?___wmul,sprintf@width
  5691  0000B8  C010  F07C         	movff	?___wmul+1,sprintf@width+1
  5692                           
  5693                           ;doprnt.c: 610: width += *f++ - '0';
  5694  0000BC  0ED0               	movlw	208
  5695  0000BE  6E51               	movwf	??_sprintf& (0+255),c
  5696  0000C0  0EFF               	movlw	255
  5697  0000C2  6E52               	movwf	(??_sprintf+1)& (0+255),c
  5698  0000C4  C047  FFF6         	movff	sprintf@f,tblptrl
  5699  0000C8  C048  FFF7         	movff	sprintf@f+1,tblptrh
  5700  0000CC                     	if	0	;tblptru may be non-zero
  5701  0000CC                     	endif
  5702  0000CC                     	if	0	;tblptru may be non-zero
  5703  0000CC                     	endif
  5704  0000CC  0008               	tblrd		*
  5705  0000CE  50F5               	movf	tablat,w,c
  5706  0000D0  6E53               	movwf	(??_sprintf+2)& (0+255),c
  5707  0000D2  6A54               	clrf	(??_sprintf+3)& (0+255),c
  5708  0000D4  5051               	movf	??_sprintf,w,c
  5709  0000D6  2653               	addwf	??_sprintf+2,f,c
  5710  0000D8  5052               	movf	??_sprintf+1,w,c
  5711  0000DA  2254               	addwfc	??_sprintf+3,f,c
  5712  0000DC  5053               	movf	??_sprintf+2,w,c
  5713  0000DE  0100               	movlb	0	; () banked
  5714  0000E0  277B               	addwf	sprintf@width& (0+255),f,b
  5715  0000E2  5054               	movf	??_sprintf+3,w,c
  5716  0000E4  0100               	movlb	0	; () banked
  5717  0000E6  237C               	addwfc	(sprintf@width+1)& (0+255),f,b
  5718                           
  5719                           ; BSR set to: 0
  5720  0000E8  4A47               	infsnz	sprintf@f,f,c
  5721  0000EA  2A48               	incf	sprintf@f+1,f,c
  5722                           
  5723                           ; BSR set to: 0
  5724                           ;doprnt.c: 611: } while(isdigit((unsigned)*f));
  5725  0000EC  C047  FFF6         	movff	sprintf@f,tblptrl
  5726  0000F0  C048  FFF7         	movff	sprintf@f+1,tblptrh
  5727  0000F4                     	if	0	;tblptru may be non-zero
  5728  0000F4                     	endif
  5729  0000F4                     	if	0	;tblptru may be non-zero
  5730  0000F4                     	endif
  5731  0000F4  0008               	tblrd		*
  5732  0000F6  50F5               	movf	tablat,w,c
  5733  0000F8  ECF5  F022         	call	_isdigit
  5734  0000FC  A0D8               	btfss	status,0,c
  5735  0000FE  D01C               	goto	i2l4508
  5736  000100  D7CF               	goto	i2l4492
  5737  000102                     i2l4500:
  5738  000102  C047  FFF6         	movff	sprintf@f,tblptrl
  5739  000106  C048  FFF7         	movff	sprintf@f+1,tblptrh
  5740  00010A                     	if	0	;tblptru may be non-zero
  5741  00010A                     	endif
  5742  00010A                     	if	0	;tblptru may be non-zero
  5743  00010A                     	endif
  5744  00010A  0008               	tblrd		*
  5745  00010C  50F5               	movf	tablat,w,c
  5746  00010E  0A2A               	xorlw	42
  5747  000110  A4D8               	btfss	status,2,c
  5748  000112  D012               	goto	i2l4508
  5749                           
  5750                           ;doprnt.c: 614: width = (*(int *)__va_arg((*(int **)ap), (int)0));
  5751  000114  C072  FFD9         	movff	sprintf@ap,fsr2l
  5752  000118  C073  FFDA         	movff	sprintf@ap+1,fsr2h
  5753  00011C  0100               	movlb	0	; () banked
  5754  00011E  CFDE F07B          	movff	postinc2,sprintf@width
  5755  000122  0100               	movlb	0	; () banked
  5756  000124  CFDD F07C          	movff	postdec2,sprintf@width+1
  5757                           
  5758                           ; BSR set to: 0
  5759  000128  0E02               	movlw	2
  5760  00012A  0100               	movlb	0	; () banked
  5761  00012C  2772               	addwf	sprintf@ap& (0+255),f,b
  5762  00012E  0E00               	movlw	0
  5763  000130  0100               	movlb	0	; () banked
  5764  000132  2373               	addwfc	(sprintf@ap+1)& (0+255),f,b
  5765                           
  5766                           ; BSR set to: 0
  5767                           ;doprnt.c: 615: f++;
  5768  000134  4A47               	infsnz	sprintf@f,f,c
  5769  000136  2A48               	incf	sprintf@f+1,f,c
  5770  000138                     i2l4508:
  5771                           
  5772                           ;doprnt.c: 617: }
  5773                           ;doprnt.c: 620: if(*f == '.') {
  5774  000138  C047  FFF6         	movff	sprintf@f,tblptrl
  5775  00013C  C048  FFF7         	movff	sprintf@f+1,tblptrh
  5776  000140                     	if	0	;tblptru may be non-zero
  5777  000140                     	endif
  5778  000140                     	if	0	;tblptru may be non-zero
  5779  000140                     	endif
  5780  000140  0008               	tblrd		*
  5781  000142  50F5               	movf	tablat,w,c
  5782  000144  0A2E               	xorlw	46
  5783  000146  A4D8               	btfss	status,2,c
  5784  000148  D04F               	goto	i2l4528
  5785                           
  5786                           ;doprnt.c: 621: flag |= 0x4000;
  5787  00014A  0100               	movlb	0	; () banked
  5788  00014C  8D77               	bsf	(sprintf@flag+1)& (0+255),6,b
  5789                           
  5790                           ;doprnt.c: 622: f++;
  5791  00014E  4A47               	infsnz	sprintf@f,f,c
  5792  000150  2A48               	incf	sprintf@f+1,f,c
  5793                           
  5794                           ; BSR set to: 0
  5795                           ;doprnt.c: 624: if(*f == '*') {
  5796  000152  C047  FFF6         	movff	sprintf@f,tblptrl
  5797  000156  C048  FFF7         	movff	sprintf@f+1,tblptrh
  5798  00015A                     	if	0	;tblptru may be non-zero
  5799  00015A                     	endif
  5800  00015A                     	if	0	;tblptru may be non-zero
  5801  00015A                     	endif
  5802  00015A  0008               	tblrd		*
  5803  00015C  50F5               	movf	tablat,w,c
  5804  00015E  0A2A               	xorlw	42
  5805  000160  A4D8               	btfss	status,2,c
  5806  000162  D013               	goto	i2l4520
  5807                           
  5808                           ; BSR set to: 0
  5809                           ;doprnt.c: 625: prec = (*(int *)__va_arg((*(int **)ap), (int)0));
  5810  000164  C072  FFD9         	movff	sprintf@ap,fsr2l
  5811  000168  C073  FFDA         	movff	sprintf@ap+1,fsr2h
  5812  00016C  0100               	movlb	0	; () banked
  5813  00016E  CFDE F07D          	movff	postinc2,sprintf@prec
  5814  000172  0100               	movlb	0	; () banked
  5815  000174  CFDD F07E          	movff	postdec2,sprintf@prec+1
  5816                           
  5817                           ; BSR set to: 0
  5818  000178  0E02               	movlw	2
  5819  00017A  0100               	movlb	0	; () banked
  5820  00017C  2772               	addwf	sprintf@ap& (0+255),f,b
  5821  00017E  0E00               	movlw	0
  5822  000180  0100               	movlb	0	; () banked
  5823  000182  2373               	addwfc	(sprintf@ap+1)& (0+255),f,b
  5824                           
  5825                           ; BSR set to: 0
  5826                           ;doprnt.c: 626: f++;
  5827  000184  4A47               	infsnz	sprintf@f,f,c
  5828  000186  2A48               	incf	sprintf@f+1,f,c
  5829                           
  5830                           ;doprnt.c: 627: } else
  5831  000188  D107               	goto	i2l4586
  5832  00018A                     i2l4520:
  5833                           
  5834                           ; BSR set to: 0
  5835                           ;doprnt.c: 629: {
  5836                           ;doprnt.c: 630: prec = 0;
  5837  00018A  0E00               	movlw	0
  5838  00018C  0100               	movlb	0	; () banked
  5839  00018E  6F7E               	movwf	(sprintf@prec+1)& (0+255),b
  5840  000190  0E00               	movlw	0
  5841  000192  0100               	movlb	0	; () banked
  5842  000194  6F7D               	movwf	sprintf@prec& (0+255),b
  5843                           
  5844                           ;doprnt.c: 631: while(isdigit((unsigned)*f))
  5845  000196  D01D               	goto	i2l4526
  5846  000198                     i2l4522:
  5847                           
  5848                           ;doprnt.c: 632: prec = prec*10 + *f++ - '0';
  5849  000198  C07D  F00F         	movff	sprintf@prec,___wmul@multiplier
  5850  00019C  C07E  F010         	movff	sprintf@prec+1,___wmul@multiplier+1
  5851  0001A0  0E00               	movlw	0
  5852  0001A2  6E12               	movwf	___wmul@multiplicand+1,c
  5853  0001A4  0E0A               	movlw	10
  5854  0001A6  6E11               	movwf	___wmul@multiplicand,c
  5855  0001A8  ECD0  F022         	call	___wmul	;wreg free
  5856  0001AC  C047  FFF6         	movff	sprintf@f,tblptrl
  5857  0001B0  C048  FFF7         	movff	sprintf@f+1,tblptrh
  5858  0001B4                     	if	0	;tblptru may be non-zero
  5859  0001B4                     	endif
  5860  0001B4                     	if	0	;tblptru may be non-zero
  5861  0001B4                     	endif
  5862  0001B4  0008               	tblrd		*
  5863  0001B6  50F5               	movf	tablat,w,c
  5864  0001B8  260F               	addwf	?___wmul,f,c
  5865  0001BA  0E00               	movlw	0
  5866  0001BC  2210               	addwfc	?___wmul+1,f,c
  5867  0001BE  0ED0               	movlw	208
  5868  0001C0  240F               	addwf	?___wmul,w,c
  5869  0001C2  0100               	movlb	0	; () banked
  5870  0001C4  6F7D               	movwf	sprintf@prec& (0+255),b
  5871  0001C6  0EFF               	movlw	255
  5872  0001C8  2010               	addwfc	?___wmul+1,w,c
  5873  0001CA  0100               	movlb	0	; () banked
  5874  0001CC  6F7E               	movwf	(sprintf@prec+1)& (0+255),b
  5875                           
  5876                           ; BSR set to: 0
  5877  0001CE  4A47               	infsnz	sprintf@f,f,c
  5878  0001D0  2A48               	incf	sprintf@f+1,f,c
  5879  0001D2                     i2l4526:
  5880                           
  5881                           ; BSR set to: 0
  5882  0001D2  C047  FFF6         	movff	sprintf@f,tblptrl
  5883  0001D6  C048  FFF7         	movff	sprintf@f+1,tblptrh
  5884  0001DA                     	if	0	;tblptru may be non-zero
  5885  0001DA                     	endif
  5886  0001DA                     	if	0	;tblptru may be non-zero
  5887  0001DA                     	endif
  5888  0001DA  0008               	tblrd		*
  5889  0001DC  50F5               	movf	tablat,w,c
  5890  0001DE  ECF5  F022         	call	_isdigit
  5891  0001E2  A0D8               	btfss	status,0,c
  5892  0001E4  D0D9               	goto	i2l4586
  5893  0001E6  D7D8               	goto	i2l4522
  5894  0001E8                     i2l4528:
  5895                           
  5896                           ;doprnt.c: 635: prec = 0;
  5897  0001E8  0E00               	movlw	0
  5898  0001EA  0100               	movlb	0	; () banked
  5899  0001EC  6F7E               	movwf	(sprintf@prec+1)& (0+255),b
  5900  0001EE  0E00               	movlw	0
  5901  0001F0  0100               	movlb	0	; () banked
  5902  0001F2  6F7D               	movwf	sprintf@prec& (0+255),b
  5903                           
  5904                           ; BSR set to: 0
  5905                           ;doprnt.c: 637: flag |= 0x1000;
  5906  0001F4  0100               	movlb	0	; () banked
  5907  0001F6  8977               	bsf	(sprintf@flag+1)& (0+255),4,b
  5908  0001F8  D0CF               	goto	i2l4586
  5909  0001FA                     i2l4532:
  5910                           
  5911                           ; BSR set to: 0
  5912                           ;doprnt.c: 652: flag |= 0x10;
  5913  0001FA  0100               	movlb	0	; () banked
  5914  0001FC  8976               	bsf	sprintf@flag& (0+255),4,b
  5915                           
  5916                           ;doprnt.c: 653: goto loop;
  5917  0001FE  D0CC               	goto	i2l4586
  5918  000200                     i2l4534:
  5919                           
  5920                           ; BSR set to: 0
  5921                           ;doprnt.c: 672: flag |= 0x400;
  5922  000200  0100               	movlb	0	; () banked
  5923  000202  8577               	bsf	(sprintf@flag+1)& (0+255),2,b
  5924                           
  5925                           ;doprnt.c: 673: break;
  5926  000204  D0EC               	goto	i2l4588
  5927  000206                     i2l4536:
  5928                           
  5929                           ; BSR set to: 0
  5930                           ;doprnt.c: 743: _val._str._cp = (*(const char * *)__va_arg((*(const char * **)ap), (cons
      +                          t char *)0));
  5931  000206  C072  FFD9         	movff	sprintf@ap,fsr2l
  5932  00020A  C073  FFDA         	movff	sprintf@ap+1,fsr2h
  5933  00020E  0100               	movlb	0	; () banked
  5934  000210  CFDE F080          	movff	postinc2,sprintf@_val
  5935  000214  0100               	movlb	0	; () banked
  5936  000216  CFDD F081          	movff	postdec2,sprintf@_val+1
  5937                           
  5938                           ; BSR set to: 0
  5939  00021A  0E02               	movlw	2
  5940  00021C  0100               	movlb	0	; () banked
  5941  00021E  2772               	addwf	sprintf@ap& (0+255),f,b
  5942  000220  0E00               	movlw	0
  5943  000222  0100               	movlb	0	; () banked
  5944  000224  2373               	addwfc	(sprintf@ap+1)& (0+255),f,b
  5945                           
  5946                           ; BSR set to: 0
  5947                           ;doprnt.c: 749: if(!_val._str._cp)
  5948  000226  0100               	movlb	0	; () banked
  5949  000228  5181               	movf	(sprintf@_val+1)& (0+255),w,b
  5950  00022A  1180               	iorwf	sprintf@_val& (0+255),w,b
  5951  00022C  A4D8               	btfss	status,2,c
  5952  00022E  D006               	goto	i2l4544
  5953                           
  5954                           ; BSR set to: 0
  5955                           ;doprnt.c: 750: _val._str._cp = "(null)";
  5956  000230  0E7D               	movlw	high STR_19
  5957  000232  0100               	movlb	0	; () banked
  5958  000234  6F81               	movwf	(sprintf@_val+1)& (0+255),b
  5959  000236  0E96               	movlw	low STR_19
  5960  000238  0100               	movlb	0	; () banked
  5961  00023A  6F80               	movwf	sprintf@_val& (0+255),b
  5962  00023C                     i2l4544:
  5963                           
  5964                           ; BSR set to: 0
  5965                           ;doprnt.c: 754: _val._str._len = 0;
  5966  00023C  0E00               	movlw	0
  5967  00023E  0100               	movlb	0	; () banked
  5968  000240  6F83               	movwf	(sprintf@_val+3)& (0+255),b
  5969  000242  0E00               	movlw	0
  5970  000244  0100               	movlb	0	; () banked
  5971  000246  6F82               	movwf	(sprintf@_val+2)& (0+255),b
  5972                           
  5973                           ;doprnt.c: 755: while(_val._str._cp[_val._str._len])
  5974  000248  D003               	goto	i2l4548
  5975  00024A                     i2l4546:
  5976                           
  5977                           ;doprnt.c: 756: _val._str._len++;
  5978  00024A  0100               	movlb	0	; () banked
  5979  00024C  4B82               	infsnz	(sprintf@_val+2)& (0+255),f,b
  5980  00024E  2B83               	incf	(sprintf@_val+3)& (0+255),f,b
  5981  000250                     i2l4548:
  5982                           
  5983                           ; BSR set to: 0
  5984  000250  0100               	movlb	0	; () banked
  5985  000252  C080  F051         	movff	sprintf@_val,??_sprintf
  5986  000256  0100               	movlb	0	; () banked
  5987  000258  C081  F052         	movff	sprintf@_val+1,??_sprintf+1
  5988  00025C  0100               	movlb	0	; () banked
  5989  00025E  5182               	movf	(sprintf@_val+2)& (0+255),w,b
  5990  000260  2651               	addwf	??_sprintf,f,c
  5991  000262  0100               	movlb	0	; () banked
  5992  000264  5183               	movf	(sprintf@_val+3)& (0+255),w,b
  5993  000266  2252               	addwfc	??_sprintf+1,f,c
  5994  000268  C051  FFF6         	movff	??_sprintf,tblptrl
  5995  00026C  C052  FFF7         	movff	??_sprintf+1,tblptrh
  5996  000270  6AF8               	clrf	tblptru,c
  5997  000272  0E07               	movlw	(high __ramtop+-1)
  5998  000274  64F7               	cpfsgt	tblptrh,c
  5999  000276  D003               	bra	i2u451_47
  6000  000278  0008               	tblrd		*
  6001  00027A  50F5               	movf	tablat,w,c
  6002  00027C  D005               	bra	i2u451_40
  6003  00027E                     i2u451_47:
  6004  00027E  CFF6 FFE9          	movff	tblptrl,fsr0l
  6005  000282  CFF7 FFEA          	movff	tblptrh,fsr0h
  6006  000286  50EF               	movf	indf0,w,c
  6007  000288                     i2u451_40:
  6008  000288  0900               	iorlw	0
  6009  00028A  A4D8               	btfss	status,2,c
  6010  00028C  D7DE               	goto	i2l4546
  6011  00028E                     i2l4550:
  6012                           
  6013                           ;doprnt.c: 762: if(prec && prec < _val._str._len)
  6014  00028E  0100               	movlb	0	; () banked
  6015  000290  517E               	movf	(sprintf@prec+1)& (0+255),w,b
  6016  000292  117D               	iorwf	sprintf@prec& (0+255),w,b
  6017  000294  B4D8               	btfsc	status,2,c
  6018  000296  D00E               	goto	i2l4556
  6019                           
  6020                           ; BSR set to: 0
  6021  000298  0100               	movlb	0	; () banked
  6022  00029A  5182               	movf	(sprintf@_val+2)& (0+255),w,b
  6023  00029C  0100               	movlb	0	; () banked
  6024  00029E  5D7D               	subwf	sprintf@prec& (0+255),w,b
  6025  0002A0  0100               	movlb	0	; () banked
  6026  0002A2  5183               	movf	(sprintf@_val+3)& (0+255),w,b
  6027  0002A4  0100               	movlb	0	; () banked
  6028  0002A6  597E               	subwfb	(sprintf@prec+1)& (0+255),w,b
  6029  0002A8  B0D8               	btfsc	status,0,c
  6030  0002AA  D004               	goto	i2l4556
  6031                           
  6032                           ; BSR set to: 0
  6033                           ;doprnt.c: 763: _val._str._len = prec;
  6034  0002AC  C07D  F082         	movff	sprintf@prec,sprintf@_val+2
  6035  0002B0  C07E  F083         	movff	sprintf@prec+1,sprintf@_val+3
  6036  0002B4                     i2l4556:
  6037                           
  6038                           ; BSR set to: 0
  6039                           ;doprnt.c: 766: if(width > _val._str._len)
  6040  0002B4  0100               	movlb	0	; () banked
  6041  0002B6  517B               	movf	sprintf@width& (0+255),w,b
  6042  0002B8  0100               	movlb	0	; () banked
  6043  0002BA  5D82               	subwf	(sprintf@_val+2)& (0+255),w,b
  6044  0002BC  0100               	movlb	0	; () banked
  6045  0002BE  517C               	movf	(sprintf@width+1)& (0+255),w,b
  6046  0002C0  0100               	movlb	0	; () banked
  6047  0002C2  5983               	subwfb	(sprintf@_val+3)& (0+255),w,b
  6048  0002C4  B0D8               	btfsc	status,0,c
  6049  0002C6  D00A               	goto	i2l4560
  6050                           
  6051                           ; BSR set to: 0
  6052                           ;doprnt.c: 767: width -= _val._str._len;
  6053  0002C8  0100               	movlb	0	; () banked
  6054  0002CA  EE20  F082         	lfsr	2,sprintf@_val+2
  6055  0002CE  50DE               	movf	postinc2,w,c
  6056  0002D0  0100               	movlb	0	; () banked
  6057  0002D2  5F7B               	subwf	sprintf@width& (0+255),f,b
  6058  0002D4  50DD               	movf	postdec2,w,c
  6059  0002D6  0100               	movlb	0	; () banked
  6060  0002D8  5B7C               	subwfb	(sprintf@width+1)& (0+255),f,b
  6061  0002DA  D00F               	goto	i2l4566
  6062  0002DC                     i2l4560:
  6063                           
  6064                           ; BSR set to: 0
  6065                           ;doprnt.c: 768: else
  6066                           ;doprnt.c: 769: width = 0;
  6067  0002DC  0E00               	movlw	0
  6068  0002DE  0100               	movlb	0	; () banked
  6069  0002E0  6F7C               	movwf	(sprintf@width+1)& (0+255),b
  6070  0002E2  0E00               	movlw	0
  6071  0002E4  0100               	movlb	0	; () banked
  6072  0002E6  6F7B               	movwf	sprintf@width& (0+255),b
  6073  0002E8  D008               	goto	i2l4566
  6074  0002EA                     i2l4562:
  6075                           
  6076                           ; BSR set to: 0
  6077                           ;doprnt.c: 774: ((*sp++ = (' ')));
  6078  0002EA  C045  FFD9         	movff	sprintf@sp,fsr2l
  6079  0002EE  C046  FFDA         	movff	sprintf@sp+1,fsr2h
  6080  0002F2  0E20               	movlw	32
  6081  0002F4  6EDF               	movwf	indf2,c
  6082                           
  6083                           ; BSR set to: 0
  6084  0002F6  4A45               	infsnz	sprintf@sp,f,c
  6085  0002F8  2A46               	incf	sprintf@sp+1,f,c
  6086  0002FA                     i2l4566:
  6087                           
  6088                           ; BSR set to: 0
  6089  0002FA  0100               	movlb	0	; () banked
  6090  0002FC  077B               	decf	sprintf@width& (0+255),f,b
  6091  0002FE  A0D8               	btfss	status,0,c
  6092  000300  077C               	decf	(sprintf@width+1)& (0+255),f,b
  6093  000302  0100               	movlb	0	; () banked
  6094  000304  297B               	incf	sprintf@width& (0+255),w,b
  6095  000306  B4D8               	btfsc	status,2,c
  6096  000308  297C               	incf	(sprintf@width+1)& (0+255),w,b
  6097  00030A  B4D8               	btfsc	status,2,c
  6098  00030C  D01D               	goto	i2l4574
  6099  00030E  D7ED               	goto	i2l4562
  6100  000310                     i2l4568:
  6101                           
  6102                           ; BSR set to: 0
  6103                           ;doprnt.c: 777: ((*sp++ = (*_val._str._cp++)));
  6104  000310  0100               	movlb	0	; () banked
  6105  000312  C080  FFF6         	movff	sprintf@_val,tblptrl
  6106  000316  0100               	movlb	0	; () banked
  6107  000318  C081  FFF7         	movff	sprintf@_val+1,tblptrh
  6108  00031C  6AF8               	clrf	tblptru,c
  6109  00031E  C045  FFD9         	movff	sprintf@sp,fsr2l
  6110  000322  C046  FFDA         	movff	sprintf@sp+1,fsr2h
  6111  000326  0E07               	movlw	(high __ramtop+-1)
  6112  000328  64F7               	cpfsgt	tblptrh,c
  6113  00032A  D003               	bra	i2u457_47
  6114  00032C  0008               	tblrd		*
  6115  00032E  50F5               	movf	tablat,w,c
  6116  000330  D005               	bra	i2u457_40
  6117  000332                     i2u457_47:
  6118  000332  CFF6 FFE9          	movff	tblptrl,fsr0l
  6119  000336  CFF7 FFEA          	movff	tblptrh,fsr0h
  6120  00033A  50EF               	movf	indf0,w,c
  6121  00033C                     i2u457_40:
  6122  00033C  6EDF               	movwf	indf2,c
  6123  00033E  0100               	movlb	0	; () banked
  6124  000340  4B80               	infsnz	sprintf@_val& (0+255),f,b
  6125  000342  2B81               	incf	(sprintf@_val+1)& (0+255),f,b
  6126                           
  6127                           ; BSR set to: 0
  6128  000344  4A45               	infsnz	sprintf@sp,f,c
  6129  000346  2A46               	incf	sprintf@sp+1,f,c
  6130  000348                     i2l4574:
  6131                           
  6132                           ; BSR set to: 0
  6133  000348  0100               	movlb	0	; () banked
  6134  00034A  0782               	decf	(sprintf@_val+2)& (0+255),f,b
  6135  00034C  A0D8               	btfss	status,0,c
  6136  00034E  0783               	decf	(sprintf@_val+3)& (0+255),f,b
  6137  000350  0100               	movlb	0	; () banked
  6138  000352  2982               	incf	(sprintf@_val+2)& (0+255),w,b
  6139  000354  B4D8               	btfsc	status,2,c
  6140  000356  2983               	incf	(sprintf@_val+3)& (0+255),w,b
  6141  000358  B4D8               	btfsc	status,2,c
  6142  00035A  EF4F  F007         	goto	i2l4870
  6143  00035E  D7D8               	goto	i2l4568
  6144  000360                     i2l4576:
  6145                           
  6146                           ; BSR set to: 0
  6147                           ;doprnt.c: 808: c = (*(int *)__va_arg((*(int **)ap), (int)0));
  6148  000360  C072  FFD9         	movff	sprintf@ap,fsr2l
  6149  000364  C073  FFDA         	movff	sprintf@ap+1,fsr2h
  6150  000368  50DF               	movf	indf2,w,c
  6151  00036A  0100               	movlb	0	; () banked
  6152  00036C  6F7F               	movwf	sprintf@c& (0+255),b
  6153                           
  6154                           ; BSR set to: 0
  6155  00036E  0E02               	movlw	2
  6156  000370  0100               	movlb	0	; () banked
  6157  000372  2772               	addwf	sprintf@ap& (0+255),f,b
  6158  000374  0E00               	movlw	0
  6159  000376  0100               	movlb	0	; () banked
  6160  000378  2373               	addwfc	(sprintf@ap+1)& (0+255),f,b
  6161  00037A                     i2l4580:
  6162                           
  6163                           ; BSR set to: 0
  6164                           ;doprnt.c: 814: _val._str._cp = (char *)&c;
  6165  00037A  0100               	movlb	0	; () banked
  6166  00037C  0E00               	movlw	high sprintf@c
  6167  00037E  0100               	movlb	0	; () banked
  6168  000380  6F81               	movwf	(sprintf@_val+1)& (0+255),b
  6169  000382  0100               	movlb	0	; () banked
  6170  000384  0E7F               	movlw	low sprintf@c
  6171  000386  0100               	movlb	0	; () banked
  6172  000388  6F80               	movwf	sprintf@_val& (0+255),b
  6173                           
  6174                           ; BSR set to: 0
  6175                           ;doprnt.c: 815: _val._str._len = 1;
  6176  00038A  0E00               	movlw	0
  6177  00038C  0100               	movlb	0	; () banked
  6178  00038E  6F83               	movwf	(sprintf@_val+3)& (0+255),b
  6179  000390  0E01               	movlw	1
  6180  000392  0100               	movlb	0	; () banked
  6181  000394  6F82               	movwf	(sprintf@_val+2)& (0+255),b
  6182                           
  6183                           ;doprnt.c: 816: goto dostring;
  6184  000396  D77B               	goto	i2l4550
  6185  000398                     i2l4586:
  6186  000398  C047  FFF6         	movff	sprintf@f,tblptrl
  6187  00039C  C048  FFF7         	movff	sprintf@f+1,tblptrh
  6188  0003A0  4A47               	infsnz	sprintf@f,f,c
  6189  0003A2  2A48               	incf	sprintf@f+1,f,c
  6190  0003A4                     	if	0	;tblptru may be non-zero
  6191  0003A4                     	endif
  6192  0003A4                     	if	0	;tblptru may be non-zero
  6193  0003A4                     	endif
  6194  0003A4  0008               	tblrd		*
  6195  0003A6  0100               	movlb	0	; () banked
  6196  0003A8  CFF5 F07F          	movff	tablat,sprintf@c
  6197  0003AC  0100               	movlb	0	; () banked
  6198  0003AE  517F               	movf	sprintf@c& (0+255),w,b
  6199                           
  6200                           ; Switch size 1, requested type "space"
  6201                           ; Number of cases is 7, Range of values is 0 to 115
  6202                           ; switch strategies available:
  6203                           ; Name         Instructions Cycles
  6204                           ; simple_byte           22    12 (average)
  6205                           ;	Chosen strategy is simple_byte
  6206  0003B0  0A00               	xorlw	0	; case 0
  6207  0003B2  B4D8               	btfsc	status,2,c
  6208  0003B4  EF5D  F007         	goto	i2l4872
  6209  0003B8  0A63               	xorlw	99	; case 99
  6210  0003BA  B4D8               	btfsc	status,2,c
  6211  0003BC  D7D1               	goto	i2l4576
  6212  0003BE  0A07               	xorlw	7	; case 100
  6213  0003C0  B4D8               	btfsc	status,2,c
  6214  0003C2  D00D               	goto	i2l4588
  6215  0003C4  0A02               	xorlw	2	; case 102
  6216  0003C6  B4D8               	btfsc	status,2,c
  6217  0003C8  D71B               	goto	i2l4534
  6218  0003CA  0A0F               	xorlw	15	; case 105
  6219  0003CC  B4D8               	btfsc	status,2,c
  6220  0003CE  D007               	goto	i2l4588
  6221  0003D0  0A05               	xorlw	5	; case 108
  6222  0003D2  B4D8               	btfsc	status,2,c
  6223  0003D4  D712               	goto	i2l4532
  6224  0003D6  0A1F               	xorlw	31	; case 115
  6225  0003D8  B4D8               	btfsc	status,2,c
  6226  0003DA  D715               	goto	i2l4536
  6227  0003DC  D7CE               	goto	i2l4580
  6228  0003DE                     i2l4588:
  6229                           
  6230                           ; BSR set to: 0
  6231                           ;doprnt.c: 834: if(flag & (0x700)) {
  6232  0003DE  0E07               	movlw	7
  6233  0003E0  0100               	movlb	0	; () banked
  6234  0003E2  1577               	andwf	(sprintf@flag+1)& (0+255),w,b
  6235  0003E4  B4D8               	btfsc	status,2,c
  6236  0003E6  D3A9               	goto	i2l708
  6237                           
  6238                           ; BSR set to: 0
  6239                           ;doprnt.c: 836: if(flag & 0x1000)
  6240  0003E8  0100               	movlb	0	; () banked
  6241  0003EA  A977               	btfss	(sprintf@flag+1)& (0+255),4,b
  6242  0003EC  D006               	goto	i2l4594
  6243                           
  6244                           ; BSR set to: 0
  6245                           ;doprnt.c: 838: prec = 6;
  6246  0003EE  0E00               	movlw	0
  6247  0003F0  0100               	movlb	0	; () banked
  6248  0003F2  6F7E               	movwf	(sprintf@prec+1)& (0+255),b
  6249  0003F4  0E06               	movlw	6
  6250  0003F6  0100               	movlb	0	; () banked
  6251  0003F8  6F7D               	movwf	sprintf@prec& (0+255),b
  6252  0003FA                     i2l4594:
  6253                           
  6254                           ; BSR set to: 0
  6255                           ;doprnt.c: 839: fval = (*(double *)__va_arg((*(double **)ap), (double)0));
  6256  0003FA  C072  FFD9         	movff	sprintf@ap,fsr2l
  6257  0003FE  C073  FFDA         	movff	sprintf@ap+1,fsr2h
  6258  000402  0100               	movlb	0	; () banked
  6259  000404  CFDE F078          	movff	postinc2,sprintf@fval
  6260  000408  0100               	movlb	0	; () banked
  6261  00040A  CFDE F079          	movff	postinc2,sprintf@fval+1
  6262  00040E  0100               	movlb	0	; () banked
  6263  000410  CFDD F07A          	movff	postdec2,sprintf@fval+2
  6264                           
  6265                           ; BSR set to: 0
  6266  000414  0E03               	movlw	3
  6267  000416  0100               	movlb	0	; () banked
  6268  000418  2772               	addwf	sprintf@ap& (0+255),f,b
  6269  00041A  0E00               	movlw	0
  6270  00041C  0100               	movlb	0	; () banked
  6271  00041E  2373               	addwfc	(sprintf@ap+1)& (0+255),f,b
  6272                           
  6273                           ; BSR set to: 0
  6274                           ;doprnt.c: 840: if(fval < 0.0) {
  6275  000420  0100               	movlb	0	; () banked
  6276  000422  517A               	movf	(sprintf@fval+2)& (0+255),w,b
  6277  000424  0A80               	xorlw	128
  6278  000426  0F80               	addlw	128
  6279  000428  E107               	bnz	i2u461_45
  6280  00042A  0E00               	movlw	0
  6281  00042C  0100               	movlb	0	; () banked
  6282  00042E  5D79               	subwf	(sprintf@fval+1)& (0+255),w,b
  6283  000430  E103               	bnz	i2u461_45
  6284  000432  0E00               	movlw	0
  6285  000434  0100               	movlb	0	; () banked
  6286  000436  5D78               	subwf	sprintf@fval& (0+255),w,b
  6287  000438                     i2u461_45:
  6288  000438  B0D8               	btfsc	status,0,c
  6289  00043A  D011               	goto	i2l4604
  6290                           
  6291                           ; BSR set to: 0
  6292                           ;doprnt.c: 841: fval = -fval;
  6293  00043C  C078  F001         	movff	sprintf@fval,___ftneg@f1
  6294  000440  C079  F002         	movff	sprintf@fval+1,___ftneg@f1+1
  6295  000444  C07A  F003         	movff	sprintf@fval+2,___ftneg@f1+2
  6296  000448  ECBD  F022         	call	___ftneg	;wreg free
  6297  00044C  C001  F078         	movff	?___ftneg,sprintf@fval
  6298  000450  C002  F079         	movff	?___ftneg+1,sprintf@fval+1
  6299  000454  C003  F07A         	movff	?___ftneg+2,sprintf@fval+2
  6300                           
  6301                           ;doprnt.c: 842: flag |= 0x03;
  6302  000458  0E03               	movlw	3
  6303  00045A  0100               	movlb	0	; () banked
  6304  00045C  1376               	iorwf	sprintf@flag& (0+255),f,b
  6305  00045E                     i2l4604:
  6306                           
  6307                           ; BSR set to: 0
  6308                           ;doprnt.c: 843: }
  6309                           ;doprnt.c: 844: exp = 0;
  6310  00045E  0E00               	movlw	0
  6311  000460  0100               	movlb	0	; () banked
  6312  000462  6F75               	movwf	(sprintf@exp+1)& (0+255),b
  6313  000464  0E00               	movlw	0
  6314  000466  0100               	movlb	0	; () banked
  6315  000468  6F74               	movwf	sprintf@exp& (0+255),b
  6316                           
  6317                           ; BSR set to: 0
  6318                           ;doprnt.c: 845: if( fval!=0) {
  6319  00046A  0E7F               	movlw	127
  6320  00046C  0100               	movlb	0	; () banked
  6321  00046E  157A               	andwf	(sprintf@fval+2)& (0+255),w,b
  6322  000470  0100               	movlb	0	; () banked
  6323  000472  1179               	iorwf	(sprintf@fval+1)& (0+255),w,b
  6324  000474  0100               	movlb	0	; () banked
  6325  000476  1178               	iorwf	sprintf@fval& (0+255),w,b
  6326  000478  B4D8               	btfsc	status,2,c
  6327  00047A  D097               	goto	i2l4632
  6328                           
  6329                           ; BSR set to: 0
  6330                           ;doprnt.c: 846: (void)(*(&exp) = ((*(unsigned long *)&fval >> 15) & 255) - 126);
  6331  00047C  0E82               	movlw	130
  6332  00047E  6E51               	movwf	??_sprintf& (0+255),c
  6333  000480  0EFF               	movlw	255
  6334  000482  6E52               	movwf	(??_sprintf+1)& (0+255),c
  6335  000484  0100               	movlb	0	; () banked
  6336  000486  C078  F053         	movff	sprintf@fval,??_sprintf+2
  6337  00048A  0100               	movlb	0	; () banked
  6338  00048C  C079  F054         	movff	sprintf@fval+1,??_sprintf+3
  6339  000490  0100               	movlb	0	; () banked
  6340  000492  C07A  F055         	movff	sprintf@fval+2,??_sprintf+4
  6341  000496  0100               	movlb	0	; () banked
  6342  000498  C07B  F056         	movff	sprintf@fval+3,??_sprintf+5
  6343  00049C  0E10               	movlw	16
  6344  00049E  D005               	goto	i2u463_40
  6345  0004A0                     i2u463_45:
  6346  0004A0  90D8               	bcf	status,0,c
  6347  0004A2  3256               	rrcf	??_sprintf+5,f,c
  6348  0004A4  3255               	rrcf	??_sprintf+4,f,c
  6349  0004A6  3254               	rrcf	??_sprintf+3,f,c
  6350  0004A8  3253               	rrcf	??_sprintf+2,f,c
  6351  0004AA                     i2u463_40:
  6352  0004AA  2EE8               	decfsz	wreg,f,c
  6353  0004AC  D7F9               	goto	i2u463_45
  6354  0004AE  5053               	movf	??_sprintf+2,w,c
  6355  0004B0  2451               	addwf	??_sprintf,w,c
  6356  0004B2  0100               	movlb	0	; () banked
  6357  0004B4  6F74               	movwf	sprintf@exp& (0+255),b
  6358  0004B6  0E00               	movlw	0
  6359  0004B8  2052               	addwfc	??_sprintf+1,w,c
  6360  0004BA  0100               	movlb	0	; () banked
  6361  0004BC  6F75               	movwf	(sprintf@exp+1)& (0+255),b
  6362                           
  6363                           ; BSR set to: 0
  6364                           ;doprnt.c: 847: exp--;
  6365  0004BE  0100               	movlb	0	; () banked
  6366  0004C0  0774               	decf	sprintf@exp& (0+255),f,b
  6367  0004C2  A0D8               	btfss	status,0,c
  6368  0004C4  0775               	decf	(sprintf@exp+1)& (0+255),f,b
  6369                           
  6370                           ; BSR set to: 0
  6371                           ;doprnt.c: 848: exp *= 3;
  6372  0004C6  C074  F00F         	movff	sprintf@exp,___wmul@multiplier
  6373  0004CA  C075  F010         	movff	sprintf@exp+1,___wmul@multiplier+1
  6374  0004CE  0E00               	movlw	0
  6375  0004D0  6E12               	movwf	___wmul@multiplicand+1,c
  6376  0004D2  0E03               	movlw	3
  6377  0004D4  6E11               	movwf	___wmul@multiplicand,c
  6378  0004D6  ECD0  F022         	call	___wmul	;wreg free
  6379  0004DA  C00F  F074         	movff	?___wmul,sprintf@exp
  6380  0004DE  C010  F075         	movff	?___wmul+1,sprintf@exp+1
  6381                           
  6382                           ;doprnt.c: 849: exp /= 10;
  6383  0004E2  C074  F007         	movff	sprintf@exp,___awdiv@dividend
  6384  0004E6  C075  F008         	movff	sprintf@exp+1,___awdiv@dividend+1
  6385  0004EA  0E00               	movlw	0
  6386  0004EC  6E0A               	movwf	___awdiv@divisor+1,c
  6387  0004EE  0E0A               	movlw	10
  6388  0004F0  6E09               	movwf	___awdiv@divisor,c
  6389  0004F2  ECC4  F01D         	call	___awdiv	;wreg free
  6390  0004F6  C007  F074         	movff	?___awdiv,sprintf@exp
  6391  0004FA  C008  F075         	movff	?___awdiv+1,sprintf@exp+1
  6392                           
  6393                           ;doprnt.c: 850: if(exp < 0)
  6394  0004FE  0100               	movlb	0	; () banked
  6395  000500  5175               	movf	(sprintf@exp+1)& (0+255),w,b
  6396  000502  0A80               	xorlw	128
  6397  000504  6EF3               	movwf	prodl,c
  6398  000506  0E80               	movlw	128
  6399  000508  5CF3               	subwf	prodl,w,c
  6400  00050A  0E00               	movlw	0
  6401  00050C  B4D8               	btfsc	status,2,c
  6402  00050E  5D74               	subwf	sprintf@exp& (0+255),w,b
  6403  000510  B0D8               	btfsc	status,0,c
  6404  000512  D004               	goto	i2l4620
  6405                           
  6406                           ; BSR set to: 0
  6407                           ;doprnt.c: 851: exp--;
  6408  000514  0100               	movlb	0	; () banked
  6409  000516  0774               	decf	sprintf@exp& (0+255),f,b
  6410  000518  A0D8               	btfss	status,0,c
  6411  00051A  0775               	decf	(sprintf@exp+1)& (0+255),f,b
  6412  00051C                     i2l4620:
  6413                           
  6414                           ; BSR set to: 0
  6415                           ;doprnt.c: 855: integ = scale(-exp);
  6416  00051C  0100               	movlb	0	; () banked
  6417  00051E  5174               	movf	sprintf@exp& (0+255),w,b
  6418  000520  0800               	sublw	0
  6419  000522  EC2B  F00E         	call	_scale
  6420  000526  C024  F06F         	movff	?_scale,sprintf@integ
  6421  00052A  C025  F070         	movff	?_scale+1,sprintf@integ+1
  6422  00052E  C026  F071         	movff	?_scale+2,sprintf@integ+2
  6423                           
  6424                           ;doprnt.c: 856: integ *= fval;
  6425  000532  C06F  F015         	movff	sprintf@integ,___ftmul@f1
  6426  000536  C070  F016         	movff	sprintf@integ+1,___ftmul@f1+1
  6427  00053A  C071  F017         	movff	sprintf@integ+2,___ftmul@f1+2
  6428  00053E  C078  F018         	movff	sprintf@fval,___ftmul@f2
  6429  000542  C079  F019         	movff	sprintf@fval+1,___ftmul@f2+1
  6430  000546  C07A  F01A         	movff	sprintf@fval+2,___ftmul@f2+2
  6431  00054A  EC61  F01B         	call	___ftmul	;wreg free
  6432  00054E  C015  F06F         	movff	?___ftmul,sprintf@integ
  6433  000552  C016  F070         	movff	?___ftmul+1,sprintf@integ+1
  6434  000556  C017  F071         	movff	?___ftmul+2,sprintf@integ+2
  6435                           
  6436                           ;doprnt.c: 857: if(integ < 1.0)
  6437  00055A  C06F  F001         	movff	sprintf@integ,___ftge@ff1
  6438  00055E  C070  F002         	movff	sprintf@integ+1,___ftge@ff1+1
  6439  000562  C071  F003         	movff	sprintf@integ+2,___ftge@ff1+2
  6440  000566  0E00               	movlw	0
  6441  000568  6E04               	movwf	___ftge@ff2,c
  6442  00056A  0E80               	movlw	128
  6443  00056C  6E05               	movwf	___ftge@ff2+1,c
  6444  00056E  0E3F               	movlw	63
  6445  000570  6E06               	movwf	___ftge@ff2+2,c
  6446  000572  ECAC  F01E         	call	___ftge	;wreg free
  6447  000576  B0D8               	btfsc	status,0,c
  6448  000578  D005               	goto	i2l4628
  6449                           
  6450                           ;doprnt.c: 858: exp--;
  6451  00057A  0100               	movlb	0	; () banked
  6452  00057C  0774               	decf	sprintf@exp& (0+255),f,b
  6453  00057E  A0D8               	btfss	status,0,c
  6454  000580  0775               	decf	(sprintf@exp+1)& (0+255),f,b
  6455  000582  D013               	goto	i2l4632
  6456  000584                     i2l4628:
  6457                           
  6458                           ;doprnt.c: 859: else if(integ >= 10.0)
  6459  000584  C06F  F001         	movff	sprintf@integ,___ftge@ff1
  6460  000588  C070  F002         	movff	sprintf@integ+1,___ftge@ff1+1
  6461  00058C  C071  F003         	movff	sprintf@integ+2,___ftge@ff1+2
  6462  000590  0E00               	movlw	0
  6463  000592  6E04               	movwf	___ftge@ff2,c
  6464  000594  0E20               	movlw	32
  6465  000596  6E05               	movwf	___ftge@ff2+1,c
  6466  000598  0E41               	movlw	65
  6467  00059A  6E06               	movwf	___ftge@ff2+2,c
  6468  00059C  ECAC  F01E         	call	___ftge	;wreg free
  6469  0005A0  A0D8               	btfss	status,0,c
  6470  0005A2  D003               	goto	i2l4632
  6471                           
  6472                           ;doprnt.c: 860: exp++;
  6473  0005A4  0100               	movlb	0	; () banked
  6474  0005A6  4B74               	infsnz	sprintf@exp& (0+255),f,b
  6475  0005A8  2B75               	incf	(sprintf@exp+1)& (0+255),f,b
  6476  0005AA                     i2l4632:
  6477                           
  6478                           ;doprnt.c: 861: }
  6479                           ;doprnt.c: 1121: if(prec <= 12)
  6480  0005AA  0100               	movlb	0	; () banked
  6481  0005AC  517E               	movf	(sprintf@prec+1)& (0+255),w,b
  6482  0005AE  0A80               	xorlw	128
  6483  0005B0  6EF3               	movwf	prodl,c
  6484  0005B2  0E80               	movlw	128
  6485  0005B4  5CF3               	subwf	prodl,w,c
  6486  0005B6  0E0D               	movlw	13
  6487  0005B8  B4D8               	btfsc	status,2,c
  6488  0005BA  5D7D               	subwf	sprintf@prec& (0+255),w,b
  6489  0005BC  B0D8               	btfsc	status,0,c
  6490  0005BE  D018               	goto	i2l4636
  6491                           
  6492                           ; BSR set to: 0
  6493                           ;doprnt.c: 1122: fval += fround(prec);
  6494  0005C0  C078  F033         	movff	sprintf@fval,___ftadd@f1
  6495  0005C4  C079  F034         	movff	sprintf@fval+1,___ftadd@f1+1
  6496  0005C8  C07A  F035         	movff	sprintf@fval+2,___ftadd@f1+2
  6497  0005CC  0100               	movlb	0	; () banked
  6498  0005CE  517D               	movf	sprintf@prec& (0+255),w,b
  6499  0005D0  EC19  F013         	call	_fround
  6500  0005D4  C024  F036         	movff	?_fround,___ftadd@f2
  6501  0005D8  C025  F037         	movff	?_fround+1,___ftadd@f2+1
  6502  0005DC  C026  F038         	movff	?_fround+2,___ftadd@f2+2
  6503  0005E0  EC44  F017         	call	___ftadd	;wreg free
  6504  0005E4  C033  F078         	movff	?___ftadd,sprintf@fval
  6505  0005E8  C034  F079         	movff	?___ftadd+1,sprintf@fval+1
  6506  0005EC  C035  F07A         	movff	?___ftadd+2,sprintf@fval+2
  6507  0005F0                     i2l4636:
  6508                           
  6509                           ;doprnt.c: 1125: if((exp > 9)||(fval != 0 && (unsigned long)fval == 0 && exp > 1)) {
  6510  0005F0  0100               	movlb	0	; () banked
  6511  0005F2  5175               	movf	(sprintf@exp+1)& (0+255),w,b
  6512  0005F4  0A80               	xorlw	128
  6513  0005F6  6EF3               	movwf	prodl,c
  6514  0005F8  0E80               	movlw	128
  6515  0005FA  5CF3               	subwf	prodl,w,c
  6516  0005FC  0E0A               	movlw	10
  6517  0005FE  B4D8               	btfsc	status,2,c
  6518  000600  5D74               	subwf	sprintf@exp& (0+255),w,b
  6519  000602  B0D8               	btfsc	status,0,c
  6520  000604  D028               	goto	i2l4644
  6521                           
  6522                           ; BSR set to: 0
  6523  000606  0E7F               	movlw	127
  6524  000608  0100               	movlb	0	; () banked
  6525  00060A  157A               	andwf	(sprintf@fval+2)& (0+255),w,b
  6526  00060C  0100               	movlb	0	; () banked
  6527  00060E  1179               	iorwf	(sprintf@fval+1)& (0+255),w,b
  6528  000610  0100               	movlb	0	; () banked
  6529  000612  1178               	iorwf	sprintf@fval& (0+255),w,b
  6530  000614  B4D8               	btfsc	status,2,c
  6531  000616  D06B               	goto	i2l4660
  6532                           
  6533                           ; BSR set to: 0
  6534  000618  C078  F024         	movff	sprintf@fval,___fttol@f1
  6535  00061C  C079  F025         	movff	sprintf@fval+1,___fttol@f1+1
  6536  000620  C07A  F026         	movff	sprintf@fval+2,___fttol@f1+2
  6537  000624  ECAF  F01C         	call	___fttol	;wreg free
  6538  000628  C024  F051         	movff	?___fttol,??_sprintf
  6539  00062C  C025  F052         	movff	?___fttol+1,??_sprintf+1
  6540  000630  C026  F053         	movff	?___fttol+2,??_sprintf+2
  6541  000634  C027  F054         	movff	?___fttol+3,??_sprintf+3
  6542  000638  5054               	movf	??_sprintf+3,w,c
  6543  00063A  1051               	iorwf	??_sprintf,w,c
  6544  00063C  1052               	iorwf	??_sprintf+1,w,c
  6545  00063E  1053               	iorwf	??_sprintf+2,w,c
  6546  000640  A4D8               	btfss	status,2,c
  6547  000642  D055               	goto	i2l4660
  6548  000644  0100               	movlb	0	; () banked
  6549  000646  5175               	movf	(sprintf@exp+1)& (0+255),w,b
  6550  000648  0A80               	xorlw	128
  6551  00064A  0F80               	addlw	-128
  6552  00064C  0E02               	movlw	2
  6553  00064E  B4D8               	btfsc	status,2,c
  6554  000650  5D74               	subwf	sprintf@exp& (0+255),w,b
  6555  000652  A0D8               	btfss	status,0,c
  6556  000654  D04C               	goto	i2l4660
  6557  000656                     i2l4644:
  6558                           
  6559                           ; BSR set to: 0
  6560                           ;doprnt.c: 1129: if(integ < 4.294967296){
  6561  000656  C06F  F001         	movff	sprintf@integ,___ftge@ff1
  6562  00065A  C070  F002         	movff	sprintf@integ+1,___ftge@ff1+1
  6563  00065E  C071  F003         	movff	sprintf@integ+2,___ftge@ff1+2
  6564  000662  0E70               	movlw	112
  6565  000664  6E04               	movwf	___ftge@ff2,c
  6566  000666  0E89               	movlw	137
  6567  000668  6E05               	movwf	___ftge@ff2+1,c
  6568  00066A  0E40               	movlw	64
  6569  00066C  6E06               	movwf	___ftge@ff2+2,c
  6570  00066E  ECAC  F01E         	call	___ftge	;wreg free
  6571  000672  B0D8               	btfsc	status,0,c
  6572  000674  D003               	goto	i2l4648
  6573                           
  6574                           ;doprnt.c: 1130: exp -= (sizeof dpowers/sizeof dpowers[0])-1;
  6575  000676  0100               	movlb	0	; () banked
  6576  000678  0EF7               	movlw	247
  6577  00067A  D002               	goto	L8
  6578  00067C                     i2l4648:
  6579                           
  6580                           ;doprnt.c: 1132: exp -= (sizeof dpowers/sizeof dpowers[0])-2;
  6581  00067C  0100               	movlb	0	; () banked
  6582  00067E  0EF8               	movlw	248
  6583  000680                     L8:
  6584  000680  0100               	movlb	0	; () banked
  6585  000682  2774               	addwf	sprintf@exp& (0+255),f,b
  6586  000684  0EFF               	movlw	255
  6587  000686  0100               	movlb	0	; () banked
  6588  000688  2375               	addwfc	(sprintf@exp+1)& (0+255),f,b
  6589                           
  6590                           ; BSR set to: 0
  6591                           ;doprnt.c: 1133: }
  6592                           ;doprnt.c: 1134: integ = scale(exp);
  6593                           
  6594                           ; BSR set to: 0
  6595  00068A  0100               	movlb	0	; () banked
  6596  00068C  5174               	movf	sprintf@exp& (0+255),w,b
  6597  00068E  EC2B  F00E         	call	_scale
  6598  000692  C024  F06F         	movff	?_scale,sprintf@integ
  6599  000696  C025  F070         	movff	?_scale+1,sprintf@integ+1
  6600  00069A  C026  F071         	movff	?_scale+2,sprintf@integ+2
  6601                           
  6602                           ;doprnt.c: 1135: _val._val = ((sizeof(double)== 3) ? _tdiv_to_l_(fval,integ) : _div_to_l
      +                          _(fval,integ));
  6603  00069E  C078  F001         	movff	sprintf@fval,__tdiv_to_l_@f1
  6604  0006A2  C079  F002         	movff	sprintf@fval+1,__tdiv_to_l_@f1+1
  6605  0006A6  C07A  F003         	movff	sprintf@fval+2,__tdiv_to_l_@f1+2
  6606  0006AA  C06F  F004         	movff	sprintf@integ,__tdiv_to_l_@f2
  6607  0006AE  C070  F005         	movff	sprintf@integ+1,__tdiv_to_l_@f2+1
  6608  0006B2  C071  F006         	movff	sprintf@integ+2,__tdiv_to_l_@f2+2
  6609  0006B6  EC7A  F019         	call	__tdiv_to_l_	;wreg free
  6610  0006BA  C001  F063         	movff	?__tdiv_to_l_,_sprintf$749
  6611  0006BE  C002  F064         	movff	?__tdiv_to_l_+1,_sprintf$749+1
  6612  0006C2  C003  F065         	movff	?__tdiv_to_l_+2,_sprintf$749+2
  6613  0006C6  C004  F066         	movff	?__tdiv_to_l_+3,_sprintf$749+3
  6614  0006CA  C063  F080         	movff	_sprintf$749,sprintf@_val
  6615  0006CE  C064  F081         	movff	_sprintf$749+1,sprintf@_val+1
  6616  0006D2  C065  F082         	movff	_sprintf$749+2,sprintf@_val+2
  6617  0006D6  C066  F083         	movff	_sprintf$749+3,sprintf@_val+3
  6618                           
  6619                           ;doprnt.c: 1138: fval = 0.0;
  6620  0006DA  0E00               	movlw	0
  6621  0006DC  0100               	movlb	0	; () banked
  6622  0006DE  6F78               	movwf	sprintf@fval& (0+255),b
  6623  0006E0  0E00               	movlw	0
  6624  0006E2  0100               	movlb	0	; () banked
  6625  0006E4  6F79               	movwf	(sprintf@fval+1)& (0+255),b
  6626  0006E6  0E00               	movlw	0
  6627  0006E8  0100               	movlb	0	; () banked
  6628  0006EA  6F7A               	movwf	(sprintf@fval+2)& (0+255),b
  6629                           
  6630                           ;doprnt.c: 1139: } else {
  6631  0006EC  D034               	goto	i2l4664
  6632  0006EE                     i2l4660:
  6633                           
  6634                           ;doprnt.c: 1140: _val._val = (unsigned long)fval;
  6635  0006EE  C078  F024         	movff	sprintf@fval,___fttol@f1
  6636  0006F2  C079  F025         	movff	sprintf@fval+1,___fttol@f1+1
  6637  0006F6  C07A  F026         	movff	sprintf@fval+2,___fttol@f1+2
  6638  0006FA  ECAF  F01C         	call	___fttol	;wreg free
  6639  0006FE  C024  F080         	movff	?___fttol,sprintf@_val
  6640  000702  C025  F081         	movff	?___fttol+1,sprintf@_val+1
  6641  000706  C026  F082         	movff	?___fttol+2,sprintf@_val+2
  6642  00070A  C027  F083         	movff	?___fttol+3,sprintf@_val+3
  6643                           
  6644                           ;doprnt.c: 1141: fval -= (double)_val._val;
  6645  00070E  C078  F03F         	movff	sprintf@fval,___ftsub@f1
  6646  000712  C079  F040         	movff	sprintf@fval+1,___ftsub@f1+1
  6647  000716  C07A  F041         	movff	sprintf@fval+2,___ftsub@f1+2
  6648  00071A  C080  F009         	movff	sprintf@_val,___lltoft@c
  6649  00071E  C081  F00A         	movff	sprintf@_val+1,___lltoft@c+1
  6650  000722  C082  F00B         	movff	sprintf@_val+2,___lltoft@c+2
  6651  000726  C083  F00C         	movff	sprintf@_val+3,___lltoft@c+3
  6652  00072A  EC17  F021         	call	___lltoft	;wreg free
  6653  00072E  C009  F042         	movff	?___lltoft,___ftsub@f2
  6654  000732  C00A  F043         	movff	?___lltoft+1,___ftsub@f2+1
  6655  000736  C00B  F044         	movff	?___lltoft+2,___ftsub@f2+2
  6656  00073A  EC77  F022         	call	___ftsub	;wreg free
  6657  00073E  C03F  F078         	movff	?___ftsub,sprintf@fval
  6658  000742  C040  F079         	movff	?___ftsub+1,sprintf@fval+1
  6659  000746  C041  F07A         	movff	?___ftsub+2,sprintf@fval+2
  6660                           
  6661                           ;doprnt.c: 1142: exp = 0;
  6662  00074A  0E00               	movlw	0
  6663  00074C  0100               	movlb	0	; () banked
  6664  00074E  6F75               	movwf	(sprintf@exp+1)& (0+255),b
  6665  000750  0E00               	movlw	0
  6666  000752  0100               	movlb	0	; () banked
  6667  000754  6F74               	movwf	sprintf@exp& (0+255),b
  6668  000756                     i2l4664:
  6669                           
  6670                           ; BSR set to: 0
  6671                           ;doprnt.c: 1143: }
  6672                           ;doprnt.c: 1145: for(c = 1 ; c != (sizeof dpowers/sizeof dpowers[0]) ; c++)
  6673  000756  0E01               	movlw	1
  6674  000758  0100               	movlb	0	; () banked
  6675  00075A  6F7F               	movwf	sprintf@c& (0+255),b
  6676  00075C                     
  6677                           ; BSR set to: 0
  6678  00075C  0100               	movlb	0	; () banked
  6679  00075E  517F               	movf	sprintf@c& (0+255),w,b
  6680  000760  0A0A               	xorlw	10
  6681  000762  B4D8               	btfsc	status,2,c
  6682  000764  D01E               	goto	i2l4678
  6683                           
  6684                           ; BSR set to: 0
  6685                           ;doprnt.c: 1146: if(_val._val < dpowers[c])
  6686                           
  6687                           ; BSR set to: 0
  6688                           
  6689                           ; BSR set to: 0
  6690  000766  0100               	movlb	0	; () banked
  6691  000768  517F               	movf	sprintf@c& (0+255),w,b
  6692  00076A  0D04               	mullw	4
  6693  00076C  0EA0               	movlw	low _dpowers
  6694  00076E  24F3               	addwf	prodl,w,c
  6695  000770  6EF6               	movwf	tblptrl,c
  6696  000772  0E7C               	movlw	high _dpowers
  6697  000774  20F4               	addwfc	prodh,w,c
  6698  000776  6EF7               	movwf	tblptrh,c
  6699  000778                     	if	0	;There are less than 3 active tblptr bytes
  6700  000778                     	endif
  6701  000778  0009               	tblrd		*+
  6702  00077A  50F5               	movf	tablat,w,c
  6703  00077C  0100               	movlb	0	; () banked
  6704  00077E  5D80               	subwf	sprintf@_val& (0+255),w,b
  6705  000780  0009               	tblrd		*+
  6706  000782  50F5               	movf	tablat,w,c
  6707  000784  0100               	movlb	0	; () banked
  6708  000786  5981               	subwfb	(sprintf@_val+1)& (0+255),w,b
  6709  000788  0009               	tblrd		*+
  6710  00078A  50F5               	movf	tablat,w,c
  6711  00078C  0100               	movlb	0	; () banked
  6712  00078E  5982               	subwfb	(sprintf@_val+2)& (0+255),w,b
  6713  000790  0009               	tblrd		*+
  6714  000792  50F5               	movf	tablat,w,c
  6715  000794  0100               	movlb	0	; () banked
  6716  000796  5983               	subwfb	(sprintf@_val+3)& (0+255),w,b
  6717  000798  A0D8               	btfss	status,0,c
  6718  00079A  D003               	goto	i2l4678
  6719                           
  6720                           ; BSR set to: 0
  6721                           
  6722                           ; BSR set to: 0
  6723                           
  6724                           ; BSR set to: 0
  6725                           ;doprnt.c: 1147: break;
  6726  00079C  0100               	movlb	0	; () banked
  6727  00079E  2B7F               	incf	sprintf@c& (0+255),f,b
  6728  0007A0  D7DD               	goto	L9
  6729  0007A2                     i2l4678:
  6730                           
  6731                           ; BSR set to: 0
  6732                           ;doprnt.c: 1151: width -= prec + c + exp;
  6733  0007A2  0100               	movlb	0	; () banked
  6734  0007A4  C07F  F051         	movff	sprintf@c,??_sprintf
  6735  0007A8  6A52               	clrf	(??_sprintf+1)& (0+255),c
  6736  0007AA  BE51               	btfsc	??_sprintf& (0+255),7,c
  6737  0007AC  0652               	decf	(??_sprintf+1)& (0+255),f,c
  6738  0007AE  0100               	movlb	0	; () banked
  6739  0007B0  517D               	movf	sprintf@prec& (0+255),w,b
  6740  0007B2  2651               	addwf	??_sprintf,f,c
  6741  0007B4  0100               	movlb	0	; () banked
  6742  0007B6  517E               	movf	(sprintf@prec+1)& (0+255),w,b
  6743  0007B8  2252               	addwfc	??_sprintf+1,f,c
  6744  0007BA  0100               	movlb	0	; () banked
  6745  0007BC  5174               	movf	sprintf@exp& (0+255),w,b
  6746  0007BE  2651               	addwf	??_sprintf,f,c
  6747  0007C0  0100               	movlb	0	; () banked
  6748  0007C2  5175               	movf	(sprintf@exp+1)& (0+255),w,b
  6749  0007C4  2252               	addwfc	??_sprintf+1,f,c
  6750  0007C6  5051               	movf	??_sprintf,w,c
  6751  0007C8  0100               	movlb	0	; () banked
  6752  0007CA  5F7B               	subwf	sprintf@width& (0+255),f,b
  6753  0007CC  5052               	movf	??_sprintf+1,w,c
  6754  0007CE  0100               	movlb	0	; () banked
  6755  0007D0  5B7C               	subwfb	(sprintf@width+1)& (0+255),f,b
  6756                           
  6757                           ;doprnt.c: 1152: if(
  6758                           ;doprnt.c: 1156: prec)
  6759  0007D2  0100               	movlb	0	; () banked
  6760  0007D4  517E               	movf	(sprintf@prec+1)& (0+255),w,b
  6761  0007D6  117D               	iorwf	sprintf@prec& (0+255),w,b
  6762  0007D8  B4D8               	btfsc	status,2,c
  6763  0007DA  D004               	goto	i2l4682
  6764                           
  6765                           ; BSR set to: 0
  6766                           ;doprnt.c: 1157: width--;
  6767  0007DC  0100               	movlb	0	; () banked
  6768  0007DE  077B               	decf	sprintf@width& (0+255),f,b
  6769  0007E0  A0D8               	btfss	status,0,c
  6770  0007E2  077C               	decf	(sprintf@width+1)& (0+255),f,b
  6771  0007E4                     i2l4682:
  6772                           
  6773                           ; BSR set to: 0
  6774                           ;doprnt.c: 1158: if(flag & 0x03)
  6775  0007E4  0E03               	movlw	3
  6776  0007E6  0100               	movlb	0	; () banked
  6777  0007E8  1576               	andwf	sprintf@flag& (0+255),w,b
  6778  0007EA  6E51               	movwf	??_sprintf& (0+255),c
  6779  0007EC  0E00               	movlw	0
  6780  0007EE  0100               	movlb	0	; () banked
  6781  0007F0  1577               	andwf	(sprintf@flag+1)& (0+255),w,b
  6782  0007F2  6E52               	movwf	(??_sprintf+1)& (0+255),c
  6783  0007F4  5052               	movf	??_sprintf+1,w,c
  6784  0007F6  1051               	iorwf	??_sprintf,w,c
  6785  0007F8  B4D8               	btfsc	status,2,c
  6786  0007FA  D004               	goto	i2l4686
  6787                           
  6788                           ; BSR set to: 0
  6789                           ;doprnt.c: 1159: width--;
  6790  0007FC  0100               	movlb	0	; () banked
  6791  0007FE  077B               	decf	sprintf@width& (0+255),f,b
  6792  000800  A0D8               	btfss	status,0,c
  6793  000802  077C               	decf	(sprintf@width+1)& (0+255),f,b
  6794  000804                     i2l4686:
  6795                           
  6796                           ; BSR set to: 0
  6797                           ;doprnt.c: 1162: if(flag & 0x04) {
  6798  000804  0100               	movlb	0	; () banked
  6799  000806  A576               	btfss	sprintf@flag& (0+255),2,b
  6800  000808  D039               	goto	i2l4708
  6801                           
  6802                           ; BSR set to: 0
  6803                           ;doprnt.c: 1166: if(flag & 0x03)
  6804  00080A  0E03               	movlw	3
  6805  00080C  0100               	movlb	0	; () banked
  6806  00080E  1576               	andwf	sprintf@flag& (0+255),w,b
  6807  000810  6E51               	movwf	??_sprintf& (0+255),c
  6808  000812  0E00               	movlw	0
  6809  000814  0100               	movlb	0	; () banked
  6810  000816  1577               	andwf	(sprintf@flag+1)& (0+255),w,b
  6811  000818  6E52               	movwf	(??_sprintf+1)& (0+255),c
  6812  00081A  5052               	movf	??_sprintf+1,w,c
  6813  00081C  1051               	iorwf	??_sprintf,w,c
  6814  00081E  B4D8               	btfsc	status,2,c
  6815  000820  D015               	goto	i2l4700
  6816                           
  6817                           ; BSR set to: 0
  6818                           ;doprnt.c: 1168: ((*sp++ = ('-')));
  6819  000822  C045  FFD9         	movff	sprintf@sp,fsr2l
  6820  000826  C046  FFDA         	movff	sprintf@sp+1,fsr2h
  6821  00082A  0E2D               	movlw	45
  6822  00082C  6EDF               	movwf	indf2,c
  6823                           
  6824                           ; BSR set to: 0
  6825  00082E  4A45               	infsnz	sprintf@sp,f,c
  6826  000830  2A46               	incf	sprintf@sp+1,f,c
  6827  000832  D00C               	goto	i2l4700
  6828  000834                     i2l4694:
  6829                           
  6830                           ; BSR set to: 0
  6831                           ;doprnt.c: 1178: ((*sp++ = ('0')));
  6832  000834  C045  FFD9         	movff	sprintf@sp,fsr2l
  6833  000838  C046  FFDA         	movff	sprintf@sp+1,fsr2h
  6834  00083C  0E30               	movlw	48
  6835  00083E  6EDF               	movwf	indf2,c
  6836                           
  6837                           ; BSR set to: 0
  6838  000840  4A45               	infsnz	sprintf@sp,f,c
  6839  000842  2A46               	incf	sprintf@sp+1,f,c
  6840                           
  6841                           ; BSR set to: 0
  6842                           ;doprnt.c: 1179: width--;
  6843  000844  0100               	movlb	0	; () banked
  6844  000846  077B               	decf	sprintf@width& (0+255),f,b
  6845  000848  A0D8               	btfss	status,0,c
  6846  00084A  077C               	decf	(sprintf@width+1)& (0+255),f,b
  6847  00084C                     i2l4700:
  6848                           
  6849                           ; BSR set to: 0
  6850  00084C  0100               	movlb	0	; () banked
  6851  00084E  517C               	movf	(sprintf@width+1)& (0+255),w,b
  6852  000850  0A80               	xorlw	128
  6853  000852  6EF3               	movwf	prodl,c
  6854  000854  0E80               	movlw	128
  6855  000856  5CF3               	subwf	prodl,w,c
  6856  000858  0E01               	movlw	1
  6857  00085A  B4D8               	btfsc	status,2,c
  6858  00085C  5D7B               	subwf	sprintf@width& (0+255),w,b
  6859  00085E  A0D8               	btfss	status,0,c
  6860  000860  D075               	goto	i2l4724
  6861  000862  D7E8               	goto	i2l4694
  6862  000864                     i2l4702:
  6863                           
  6864                           ; BSR set to: 0
  6865                           ;doprnt.c: 1190: ((*sp++ = (' ')));
  6866  000864  C045  FFD9         	movff	sprintf@sp,fsr2l
  6867  000868  C046  FFDA         	movff	sprintf@sp+1,fsr2h
  6868  00086C  0E20               	movlw	32
  6869  00086E  6EDF               	movwf	indf2,c
  6870                           
  6871                           ; BSR set to: 0
  6872  000870  4A45               	infsnz	sprintf@sp,f,c
  6873  000872  2A46               	incf	sprintf@sp+1,f,c
  6874                           
  6875                           ; BSR set to: 0
  6876                           ;doprnt.c: 1191: width--;
  6877  000874  0100               	movlb	0	; () banked
  6878  000876  077B               	decf	sprintf@width& (0+255),f,b
  6879  000878  A0D8               	btfss	status,0,c
  6880  00087A  077C               	decf	(sprintf@width+1)& (0+255),f,b
  6881  00087C                     i2l4708:
  6882                           
  6883                           ; BSR set to: 0
  6884  00087C  0100               	movlb	0	; () banked
  6885  00087E  517C               	movf	(sprintf@width+1)& (0+255),w,b
  6886  000880  0A80               	xorlw	128
  6887  000882  6EF3               	movwf	prodl,c
  6888  000884  0E80               	movlw	128
  6889  000886  5CF3               	subwf	prodl,w,c
  6890  000888  0E01               	movlw	1
  6891  00088A  B4D8               	btfsc	status,2,c
  6892  00088C  5D7B               	subwf	sprintf@width& (0+255),w,b
  6893  00088E  B0D8               	btfsc	status,0,c
  6894  000890  D7E9               	goto	i2l4702
  6895                           
  6896                           ; BSR set to: 0
  6897                           ;doprnt.c: 1192: }
  6898                           ;doprnt.c: 1197: if(flag & 0x03)
  6899                           
  6900                           ; BSR set to: 0
  6901  000892  0E03               	movlw	3
  6902  000894  0100               	movlb	0	; () banked
  6903  000896  1576               	andwf	sprintf@flag& (0+255),w,b
  6904  000898  6E51               	movwf	??_sprintf& (0+255),c
  6905  00089A  0E00               	movlw	0
  6906  00089C  0100               	movlb	0	; () banked
  6907  00089E  1577               	andwf	(sprintf@flag+1)& (0+255),w,b
  6908  0008A0  6E52               	movwf	(??_sprintf+1)& (0+255),c
  6909  0008A2  5052               	movf	??_sprintf+1,w,c
  6910  0008A4  1051               	iorwf	??_sprintf,w,c
  6911  0008A6  B4D8               	btfsc	status,2,c
  6912  0008A8  D051               	goto	i2l4724
  6913                           
  6914                           ; BSR set to: 0
  6915                           ;doprnt.c: 1199: ((*sp++ = ('-')));
  6916  0008AA  C045  FFD9         	movff	sprintf@sp,fsr2l
  6917  0008AE  C046  FFDA         	movff	sprintf@sp+1,fsr2h
  6918  0008B2  0E2D               	movlw	45
  6919  0008B4  D048               	goto	L10
  6920  0008B6                     i2l4716:
  6921                           
  6922                           ; BSR set to: 0
  6923                           ;doprnt.c: 1209: {
  6924                           ;doprnt.c: 1210: unsigned long vd = _val._val/dpowers[c];
  6925  0008B6  C080  F001         	movff	sprintf@_val,___lldiv@dividend
  6926  0008BA  C081  F002         	movff	sprintf@_val+1,___lldiv@dividend+1
  6927  0008BE  C082  F003         	movff	sprintf@_val+2,___lldiv@dividend+2
  6928  0008C2  C083  F004         	movff	sprintf@_val+3,___lldiv@dividend+3
  6929  0008C6  0100               	movlb	0	; () banked
  6930  0008C8  517F               	movf	sprintf@c& (0+255),w,b
  6931  0008CA  0D04               	mullw	4
  6932  0008CC  0EA0               	movlw	low _dpowers
  6933  0008CE  24F3               	addwf	prodl,w,c
  6934  0008D0  6EF6               	movwf	tblptrl,c
  6935  0008D2  0E7C               	movlw	high _dpowers
  6936  0008D4  20F4               	addwfc	prodh,w,c
  6937  0008D6  6EF7               	movwf	tblptrh,c
  6938  0008D8                     	if	0	;There are less than 3 active tblptr bytes
  6939  0008D8                     	endif
  6940  0008D8  0009               	tblrd		*+
  6941  0008DA  CFF5 F005          	movff	tablat,___lldiv@divisor
  6942  0008DE  0009               	tblrd		*+
  6943  0008E0  CFF5 F006          	movff	tablat,___lldiv@divisor+1
  6944  0008E4  0009               	tblrd		*+
  6945  0008E6  CFF5 F007          	movff	tablat,___lldiv@divisor+2
  6946  0008EA  000A               	tblrd		*-
  6947  0008EC  CFF5 F008          	movff	tablat,___lldiv@divisor+3
  6948  0008F0  ECC7  F01F         	call	___lldiv	;wreg free
  6949  0008F4  C001  F067         	movff	?___lldiv,sprintf@vd
  6950  0008F8  C002  F068         	movff	?___lldiv+1,sprintf@vd+1
  6951  0008FC  C003  F069         	movff	?___lldiv+2,sprintf@vd+2
  6952  000900  C004  F06A         	movff	?___lldiv+3,sprintf@vd+3
  6953                           
  6954                           ;doprnt.c: 1211: vd %= 10;
  6955  000904  C067  F00E         	movff	sprintf@vd,___llmod@dividend
  6956  000908  C068  F00F         	movff	sprintf@vd+1,___llmod@dividend+1
  6957  00090C  C069  F010         	movff	sprintf@vd+2,___llmod@dividend+2
  6958  000910  C06A  F011         	movff	sprintf@vd+3,___llmod@dividend+3
  6959  000914  0E0A               	movlw	10
  6960  000916  6E12               	movwf	___llmod@divisor,c
  6961  000918  0E00               	movlw	0
  6962  00091A  6E13               	movwf	___llmod@divisor+1,c
  6963  00091C  0E00               	movlw	0
  6964  00091E  6E14               	movwf	___llmod@divisor+2,c
  6965  000920  0E00               	movlw	0
  6966  000922  6E15               	movwf	___llmod@divisor+3,c
  6967  000924  ECB4  F020         	call	___llmod	;wreg free
  6968  000928  C00E  F067         	movff	?___llmod,sprintf@vd
  6969  00092C  C00F  F068         	movff	?___llmod+1,sprintf@vd+1
  6970  000930  C010  F069         	movff	?___llmod+2,sprintf@vd+2
  6971  000934  C011  F06A         	movff	?___llmod+3,sprintf@vd+3
  6972                           
  6973                           ;doprnt.c: 1212: ((*sp++ = ('0' + vd)));
  6974  000938  0100               	movlb	0	; () banked
  6975  00093A  5167               	movf	sprintf@vd& (0+255),w,b
  6976  00093C  0F30               	addlw	48
  6977  00093E  C045  FFD9         	movff	sprintf@sp,fsr2l
  6978  000942  C046  FFDA         	movff	sprintf@sp+1,fsr2h
  6979  000946                     L10:
  6980  000946  6EDF               	movwf	indf2,c
  6981                           
  6982                           ; BSR set to: 0
  6983  000948  4A45               	infsnz	sprintf@sp,f,c
  6984  00094A  2A46               	incf	sprintf@sp+1,f,c
  6985  00094C                     i2l4724:
  6986                           
  6987                           ; BSR set to: 0
  6988  00094C  0100               	movlb	0	; () banked
  6989  00094E  077F               	decf	sprintf@c& (0+255),f,b
  6990  000950  0100               	movlb	0	; () banked
  6991  000952  297F               	incf	sprintf@c& (0+255),w,b
  6992  000954  B4D8               	btfsc	status,2,c
  6993  000956  D00D               	goto	i2l4732
  6994  000958  D7AE               	goto	i2l4716
  6995  00095A                     i2l4726:
  6996                           
  6997                           ; BSR set to: 0
  6998                           ;doprnt.c: 1217: ((*sp++ = ('0')));
  6999  00095A  C045  FFD9         	movff	sprintf@sp,fsr2l
  7000  00095E  C046  FFDA         	movff	sprintf@sp+1,fsr2h
  7001  000962  0E30               	movlw	48
  7002  000964  6EDF               	movwf	indf2,c
  7003                           
  7004                           ; BSR set to: 0
  7005  000966  4A45               	infsnz	sprintf@sp,f,c
  7006  000968  2A46               	incf	sprintf@sp+1,f,c
  7007                           
  7008                           ; BSR set to: 0
  7009                           ;doprnt.c: 1218: exp--;
  7010  00096A  0100               	movlb	0	; () banked
  7011  00096C  0774               	decf	sprintf@exp& (0+255),f,b
  7012  00096E  A0D8               	btfss	status,0,c
  7013  000970  0775               	decf	(sprintf@exp+1)& (0+255),f,b
  7014  000972                     i2l4732:
  7015                           
  7016                           ; BSR set to: 0
  7017  000972  0100               	movlb	0	; () banked
  7018  000974  5175               	movf	(sprintf@exp+1)& (0+255),w,b
  7019  000976  0A80               	xorlw	128
  7020  000978  6EF3               	movwf	prodl,c
  7021  00097A  0E80               	movlw	128
  7022  00097C  5CF3               	subwf	prodl,w,c
  7023  00097E  0E01               	movlw	1
  7024  000980  B4D8               	btfsc	status,2,c
  7025  000982  5D74               	subwf	sprintf@exp& (0+255),w,b
  7026  000984  B0D8               	btfsc	status,0,c
  7027  000986  D7E9               	goto	i2l4726
  7028                           
  7029                           ; BSR set to: 0
  7030                           ;doprnt.c: 1219: }
  7031                           ;doprnt.c: 1220: if(prec > (int)((sizeof dpowers/sizeof dpowers[0])-2))
  7032                           
  7033                           ; BSR set to: 0
  7034  000988  0100               	movlb	0	; () banked
  7035  00098A  517E               	movf	(sprintf@prec+1)& (0+255),w,b
  7036  00098C  0A80               	xorlw	128
  7037  00098E  0F80               	addlw	-128
  7038  000990  0E09               	movlw	9
  7039  000992  B4D8               	btfsc	status,2,c
  7040  000994  5D7D               	subwf	sprintf@prec& (0+255),w,b
  7041  000996  A0D8               	btfss	status,0,c
  7042  000998  D004               	goto	i2l748
  7043                           
  7044                           ; BSR set to: 0
  7045                           ;doprnt.c: 1221: c = (sizeof dpowers/sizeof dpowers[0])-2;
  7046  00099A  0E08               	movlw	8
  7047  00099C  0100               	movlb	0	; () banked
  7048  00099E  6F7F               	movwf	sprintf@c& (0+255),b
  7049  0009A0  D002               	goto	i2l4738
  7050  0009A2                     i2l748:
  7051                           
  7052                           ; BSR set to: 0
  7053                           ;doprnt.c: 1222: else
  7054                           ;doprnt.c: 1223: c = prec;
  7055  0009A2  C07D  F07F         	movff	sprintf@prec,sprintf@c
  7056  0009A6                     i2l4738:
  7057                           
  7058                           ; BSR set to: 0
  7059                           ;doprnt.c: 1224: prec -= c;
  7060  0009A6  0100               	movlb	0	; () banked
  7061  0009A8  517F               	movf	sprintf@c& (0+255),w,b
  7062  0009AA  0100               	movlb	0	; () banked
  7063  0009AC  5F7D               	subwf	sprintf@prec& (0+255),f,b
  7064  0009AE  0E00               	movlw	0
  7065  0009B0  0100               	movlb	0	; () banked
  7066  0009B2  BF7F               	btfsc	sprintf@c& (0+255),7,b
  7067  0009B4  0EFF               	movlw	255
  7068  0009B6  0100               	movlb	0	; () banked
  7069  0009B8  5B7E               	subwfb	(sprintf@prec+1)& (0+255),f,b
  7070                           
  7071                           ; BSR set to: 0
  7072                           ;doprnt.c: 1228: if(c)
  7073  0009BA  0100               	movlb	0	; () banked
  7074  0009BC  517F               	movf	sprintf@c& (0+255),w,b
  7075  0009BE  B4D8               	btfsc	status,2,c
  7076  0009C0  D008               	goto	i2l4746
  7077                           
  7078                           ; BSR set to: 0
  7079                           ;doprnt.c: 1230: ((*sp++ = ('.')));
  7080  0009C2  C045  FFD9         	movff	sprintf@sp,fsr2l
  7081  0009C6  C046  FFDA         	movff	sprintf@sp+1,fsr2h
  7082  0009CA  0E2E               	movlw	46
  7083  0009CC  6EDF               	movwf	indf2,c
  7084                           
  7085                           ; BSR set to: 0
  7086  0009CE  4A45               	infsnz	sprintf@sp,f,c
  7087  0009D0  2A46               	incf	sprintf@sp+1,f,c
  7088  0009D2                     i2l4746:
  7089                           
  7090                           ; BSR set to: 0
  7091                           ;doprnt.c: 1236: _val._val = (long)(fval * scale(c));
  7092  0009D2  0100               	movlb	0	; () banked
  7093  0009D4  517F               	movf	sprintf@c& (0+255),w,b
  7094  0009D6  EC2B  F00E         	call	_scale
  7095  0009DA  C024  F060         	movff	?_scale,_sprintf$1314
  7096  0009DE  C025  F061         	movff	?_scale+1,_sprintf$1314+1
  7097  0009E2  C026  F062         	movff	?_scale+2,_sprintf$1314+2
  7098                           
  7099                           ;doprnt.c: 1236: _val._val = (long)(fval * scale(c));
  7100  0009E6  C078  F018         	movff	sprintf@fval,___ftmul@f2
  7101  0009EA  C079  F019         	movff	sprintf@fval+1,___ftmul@f2+1
  7102  0009EE  C07A  F01A         	movff	sprintf@fval+2,___ftmul@f2+2
  7103  0009F2  C060  F015         	movff	_sprintf$1314,___ftmul@f1
  7104  0009F6  C061  F016         	movff	_sprintf$1314+1,___ftmul@f1+1
  7105  0009FA  C062  F017         	movff	_sprintf$1314+2,___ftmul@f1+2
  7106  0009FE  EC61  F01B         	call	___ftmul	;wreg free
  7107  000A02  C015  F024         	movff	?___ftmul,___fttol@f1
  7108  000A06  C016  F025         	movff	?___ftmul+1,___fttol@f1+1
  7109  000A0A  C017  F026         	movff	?___ftmul+2,___fttol@f1+2
  7110  000A0E  ECAF  F01C         	call	___fttol	;wreg free
  7111  000A12  C024  F080         	movff	?___fttol,sprintf@_val
  7112  000A16  C025  F081         	movff	?___fttol+1,sprintf@_val+1
  7113  000A1A  C026  F082         	movff	?___fttol+2,sprintf@_val+2
  7114  000A1E  C027  F083         	movff	?___fttol+3,sprintf@_val+3
  7115                           
  7116                           ;doprnt.c: 1237: while(c--) {
  7117  000A22  D072               	goto	i2l4760
  7118  000A24                     i2l4750:
  7119                           
  7120                           ;doprnt.c: 1238: unsigned long vd = _val._val/dpowers[c];
  7121  000A24  C080  F001         	movff	sprintf@_val,___lldiv@dividend
  7122  000A28  C081  F002         	movff	sprintf@_val+1,___lldiv@dividend+1
  7123  000A2C  C082  F003         	movff	sprintf@_val+2,___lldiv@dividend+2
  7124  000A30  C083  F004         	movff	sprintf@_val+3,___lldiv@dividend+3
  7125  000A34  0100               	movlb	0	; () banked
  7126  000A36  517F               	movf	sprintf@c& (0+255),w,b
  7127  000A38  0D04               	mullw	4
  7128  000A3A  0EA0               	movlw	low _dpowers
  7129  000A3C  24F3               	addwf	prodl,w,c
  7130  000A3E  6EF6               	movwf	tblptrl,c
  7131  000A40  0E7C               	movlw	high _dpowers
  7132  000A42  20F4               	addwfc	prodh,w,c
  7133  000A44  6EF7               	movwf	tblptrh,c
  7134  000A46                     	if	0	;There are less than 3 active tblptr bytes
  7135  000A46                     	endif
  7136  000A46  0009               	tblrd		*+
  7137  000A48  CFF5 F005          	movff	tablat,___lldiv@divisor
  7138  000A4C  0009               	tblrd		*+
  7139  000A4E  CFF5 F006          	movff	tablat,___lldiv@divisor+1
  7140  000A52  0009               	tblrd		*+
  7141  000A54  CFF5 F007          	movff	tablat,___lldiv@divisor+2
  7142  000A58  000A               	tblrd		*-
  7143  000A5A  CFF5 F008          	movff	tablat,___lldiv@divisor+3
  7144  000A5E  ECC7  F01F         	call	___lldiv	;wreg free
  7145  000A62  C001  F06B         	movff	?___lldiv,sprintf@vd_751
  7146  000A66  C002  F06C         	movff	?___lldiv+1,sprintf@vd_751+1
  7147  000A6A  C003  F06D         	movff	?___lldiv+2,sprintf@vd_751+2
  7148  000A6E  C004  F06E         	movff	?___lldiv+3,sprintf@vd_751+3
  7149                           
  7150                           ;doprnt.c: 1239: vd %= 10;
  7151  000A72  C06B  F00E         	movff	sprintf@vd_751,___llmod@dividend
  7152  000A76  C06C  F00F         	movff	sprintf@vd_751+1,___llmod@dividend+1
  7153  000A7A  C06D  F010         	movff	sprintf@vd_751+2,___llmod@dividend+2
  7154  000A7E  C06E  F011         	movff	sprintf@vd_751+3,___llmod@dividend+3
  7155  000A82  0E0A               	movlw	10
  7156  000A84  6E12               	movwf	___llmod@divisor,c
  7157  000A86  0E00               	movlw	0
  7158  000A88  6E13               	movwf	___llmod@divisor+1,c
  7159  000A8A  0E00               	movlw	0
  7160  000A8C  6E14               	movwf	___llmod@divisor+2,c
  7161  000A8E  0E00               	movlw	0
  7162  000A90  6E15               	movwf	___llmod@divisor+3,c
  7163  000A92  ECB4  F020         	call	___llmod	;wreg free
  7164  000A96  C00E  F06B         	movff	?___llmod,sprintf@vd_751
  7165  000A9A  C00F  F06C         	movff	?___llmod+1,sprintf@vd_751+1
  7166  000A9E  C010  F06D         	movff	?___llmod+2,sprintf@vd_751+2
  7167  000AA2  C011  F06E         	movff	?___llmod+3,sprintf@vd_751+3
  7168                           
  7169                           ;doprnt.c: 1240: ((*sp++ = ('0' + vd)));
  7170  000AA6  0100               	movlb	0	; () banked
  7171  000AA8  516B               	movf	sprintf@vd_751& (0+255),w,b
  7172  000AAA  0F30               	addlw	48
  7173  000AAC  C045  FFD9         	movff	sprintf@sp,fsr2l
  7174  000AB0  C046  FFDA         	movff	sprintf@sp+1,fsr2h
  7175  000AB4  6EDF               	movwf	indf2,c
  7176                           
  7177                           ; BSR set to: 0
  7178  000AB6  4A45               	infsnz	sprintf@sp,f,c
  7179  000AB8  2A46               	incf	sprintf@sp+1,f,c
  7180                           
  7181                           ; BSR set to: 0
  7182                           ;doprnt.c: 1241: _val._val %= dpowers[c];
  7183  000ABA  C080  F00E         	movff	sprintf@_val,___llmod@dividend
  7184  000ABE  C081  F00F         	movff	sprintf@_val+1,___llmod@dividend+1
  7185  000AC2  C082  F010         	movff	sprintf@_val+2,___llmod@dividend+2
  7186  000AC6  C083  F011         	movff	sprintf@_val+3,___llmod@dividend+3
  7187  000ACA  0100               	movlb	0	; () banked
  7188  000ACC  517F               	movf	sprintf@c& (0+255),w,b
  7189  000ACE  0D04               	mullw	4
  7190  000AD0  0EA0               	movlw	low _dpowers
  7191  000AD2  24F3               	addwf	prodl,w,c
  7192  000AD4  6EF6               	movwf	tblptrl,c
  7193  000AD6  0E7C               	movlw	high _dpowers
  7194  000AD8  20F4               	addwfc	prodh,w,c
  7195  000ADA  6EF7               	movwf	tblptrh,c
  7196  000ADC                     	if	0	;There are less than 3 active tblptr bytes
  7197  000ADC                     	endif
  7198  000ADC  0009               	tblrd		*+
  7199  000ADE  CFF5 F012          	movff	tablat,___llmod@divisor
  7200  000AE2  0009               	tblrd		*+
  7201  000AE4  CFF5 F013          	movff	tablat,___llmod@divisor+1
  7202  000AE8  0009               	tblrd		*+
  7203  000AEA  CFF5 F014          	movff	tablat,___llmod@divisor+2
  7204  000AEE  000A               	tblrd		*-
  7205  000AF0  CFF5 F015          	movff	tablat,___llmod@divisor+3
  7206  000AF4  ECB4  F020         	call	___llmod	;wreg free
  7207  000AF8  C00E  F080         	movff	?___llmod,sprintf@_val
  7208  000AFC  C00F  F081         	movff	?___llmod+1,sprintf@_val+1
  7209  000B00  C010  F082         	movff	?___llmod+2,sprintf@_val+2
  7210  000B04  C011  F083         	movff	?___llmod+3,sprintf@_val+3
  7211  000B08                     i2l4760:
  7212  000B08  0100               	movlb	0	; () banked
  7213  000B0A  077F               	decf	sprintf@c& (0+255),f,b
  7214  000B0C  0100               	movlb	0	; () banked
  7215  000B0E  297F               	incf	sprintf@c& (0+255),w,b
  7216  000B10  B4D8               	btfsc	status,2,c
  7217  000B12  D00D               	goto	i2l4768
  7218  000B14  D787               	goto	i2l4750
  7219  000B16                     i2l4762:
  7220                           
  7221                           ; BSR set to: 0
  7222                           ;doprnt.c: 1245: ((*sp++ = ('0')));
  7223  000B16  C045  FFD9         	movff	sprintf@sp,fsr2l
  7224  000B1A  C046  FFDA         	movff	sprintf@sp+1,fsr2h
  7225  000B1E  0E30               	movlw	48
  7226  000B20  6EDF               	movwf	indf2,c
  7227                           
  7228                           ; BSR set to: 0
  7229  000B22  4A45               	infsnz	sprintf@sp,f,c
  7230  000B24  2A46               	incf	sprintf@sp+1,f,c
  7231                           
  7232                           ; BSR set to: 0
  7233                           ;doprnt.c: 1246: prec--;
  7234  000B26  0100               	movlb	0	; () banked
  7235  000B28  077D               	decf	sprintf@prec& (0+255),f,b
  7236  000B2A  A0D8               	btfss	status,0,c
  7237  000B2C  077E               	decf	(sprintf@prec+1)& (0+255),f,b
  7238  000B2E                     i2l4768:
  7239                           
  7240                           ; BSR set to: 0
  7241  000B2E  0100               	movlb	0	; () banked
  7242  000B30  517E               	movf	(sprintf@prec+1)& (0+255),w,b
  7243  000B32  117D               	iorwf	sprintf@prec& (0+255),w,b
  7244  000B34  B4D8               	btfsc	status,2,c
  7245  000B36  D1B3               	goto	i2l4870
  7246  000B38  D7EE               	goto	i2l4762
  7247  000B3A                     i2l708:
  7248                           
  7249                           ; BSR set to: 0
  7250                           ;doprnt.c: 1255: }
  7251                           ;doprnt.c: 1262: {
  7252                           ;doprnt.c: 1264: if(flag & 0x10)
  7253  000B3A  0100               	movlb	0	; () banked
  7254  000B3C  A976               	btfss	sprintf@flag& (0+255),4,b
  7255  000B3E  D012               	goto	i2l4774
  7256                           
  7257                           ; BSR set to: 0
  7258                           ;doprnt.c: 1265: _val._val = (*(long *)__va_arg((*(long **)ap), (long)0));
  7259  000B40  C072  FFD9         	movff	sprintf@ap,fsr2l
  7260  000B44  C073  FFDA         	movff	sprintf@ap+1,fsr2h
  7261  000B48  0100               	movlb	0	; () banked
  7262  000B4A  CFDE F080          	movff	postinc2,sprintf@_val
  7263  000B4E  0100               	movlb	0	; () banked
  7264  000B50  CFDE F081          	movff	postinc2,sprintf@_val+1
  7265  000B54  0100               	movlb	0	; () banked
  7266  000B56  CFDE F082          	movff	postinc2,sprintf@_val+2
  7267  000B5A  0100               	movlb	0	; () banked
  7268  000B5C  CFDE F083          	movff	postinc2,sprintf@_val+3
  7269                           
  7270                           ; BSR set to: 0
  7271  000B60  0E04               	movlw	4
  7272  000B62  D014               	goto	L11
  7273  000B64                     i2l4774:
  7274                           
  7275                           ; BSR set to: 0
  7276                           ;doprnt.c: 1266: else
  7277                           ;doprnt.c: 1268: _val._val = (long)(*(int *)__va_arg((*(int **)ap), (int)0));
  7278  000B64  C072  FFD9         	movff	sprintf@ap,fsr2l
  7279  000B68  C073  FFDA         	movff	sprintf@ap+1,fsr2h
  7280  000B6C  0100               	movlb	0	; () banked
  7281  000B6E  CFDE F080          	movff	postinc2,sprintf@_val
  7282  000B72  0100               	movlb	0	; () banked
  7283  000B74  CFDD F081          	movff	postdec2,sprintf@_val+1
  7284  000B78  0100               	movlb	0	; () banked
  7285  000B7A  0E00               	movlw	0
  7286  000B7C  0100               	movlb	0	; () banked
  7287  000B7E  BF81               	btfsc	(sprintf@_val+1)& (0+255),7,b
  7288  000B80  0EFF               	movlw	-1
  7289  000B82  0100               	movlb	0	; () banked
  7290  000B84  6F82               	movwf	(sprintf@_val+2)& (0+255),b
  7291  000B86  0100               	movlb	0	; () banked
  7292  000B88  6F83               	movwf	(sprintf@_val+3)& (0+255),b
  7293                           
  7294                           ; BSR set to: 0
  7295  000B8A  0E02               	movlw	2
  7296  000B8C                     L11:
  7297  000B8C  0100               	movlb	0	; () banked
  7298  000B8E  2772               	addwf	sprintf@ap& (0+255),f,b
  7299  000B90  0E00               	movlw	0
  7300  000B92  0100               	movlb	0	; () banked
  7301  000B94  2373               	addwfc	(sprintf@ap+1)& (0+255),f,b
  7302                           
  7303                           ; BSR set to: 0
  7304                           ;doprnt.c: 1270: if((long)_val._val < 0) {
  7305                           
  7306                           ; BSR set to: 0
  7307  000B96  0100               	movlb	0	; () banked
  7308  000B98  5183               	movf	(sprintf@_val+3)& (0+255),w,b
  7309  000B9A  0A80               	xorlw	128
  7310  000B9C  0F80               	addlw	128
  7311  000B9E  E10B               	bnz	i2u490_45
  7312  000BA0  0E00               	movlw	0
  7313  000BA2  0100               	movlb	0	; () banked
  7314  000BA4  5D82               	subwf	(sprintf@_val+2)& (0+255),w,b
  7315  000BA6  E107               	bnz	i2u490_45
  7316  000BA8  0E00               	movlw	0
  7317  000BAA  0100               	movlb	0	; () banked
  7318  000BAC  5D81               	subwf	(sprintf@_val+1)& (0+255),w,b
  7319  000BAE  E103               	bnz	i2u490_45
  7320  000BB0  0E00               	movlw	0
  7321  000BB2  0100               	movlb	0	; () banked
  7322  000BB4  5D80               	subwf	sprintf@_val& (0+255),w,b
  7323  000BB6                     i2u490_45:
  7324  000BB6  B0D8               	btfsc	status,0,c
  7325  000BB8  D012               	goto	i2l4784
  7326                           
  7327                           ; BSR set to: 0
  7328                           ;doprnt.c: 1271: flag |= 0x03;
  7329  000BBA  0E03               	movlw	3
  7330  000BBC  0100               	movlb	0	; () banked
  7331  000BBE  1376               	iorwf	sprintf@flag& (0+255),f,b
  7332                           
  7333                           ; BSR set to: 0
  7334                           ;doprnt.c: 1272: _val._val = -_val._val;
  7335  000BC0  0100               	movlb	0	; () banked
  7336  000BC2  1F83               	comf	(sprintf@_val+3)& (0+255),f,b
  7337  000BC4  0100               	movlb	0	; () banked
  7338  000BC6  1F82               	comf	(sprintf@_val+2)& (0+255),f,b
  7339  000BC8  0100               	movlb	0	; () banked
  7340  000BCA  1F81               	comf	(sprintf@_val+1)& (0+255),f,b
  7341  000BCC  0100               	movlb	0	; () banked
  7342  000BCE  6D80               	negf	sprintf@_val& (0+255),b
  7343  000BD0  0E00               	movlw	0
  7344  000BD2  0100               	movlb	0	; () banked
  7345  000BD4  2381               	addwfc	(sprintf@_val+1)& (0+255),f,b
  7346  000BD6  0100               	movlb	0	; () banked
  7347  000BD8  2382               	addwfc	(sprintf@_val+2)& (0+255),f,b
  7348  000BDA  0100               	movlb	0	; () banked
  7349  000BDC  2383               	addwfc	(sprintf@_val+3)& (0+255),f,b
  7350  000BDE                     i2l4784:
  7351                           
  7352                           ; BSR set to: 0
  7353                           ;doprnt.c: 1273: }
  7354                           ;doprnt.c: 1275: }
  7355                           ;doprnt.c: 1299: if(prec == 0 && _val._val == 0)
  7356  000BDE  0100               	movlb	0	; () banked
  7357  000BE0  517E               	movf	(sprintf@prec+1)& (0+255),w,b
  7358  000BE2  117D               	iorwf	sprintf@prec& (0+255),w,b
  7359  000BE4  A4D8               	btfss	status,2,c
  7360  000BE6  D00A               	goto	i2l4790
  7361                           
  7362                           ; BSR set to: 0
  7363  000BE8  0100               	movlb	0	; () banked
  7364  000BEA  5183               	movf	(sprintf@_val+3)& (0+255),w,b
  7365  000BEC  1180               	iorwf	sprintf@_val& (0+255),w,b
  7366  000BEE  1181               	iorwf	(sprintf@_val+1)& (0+255),w,b
  7367  000BF0  1182               	iorwf	(sprintf@_val+2)& (0+255),w,b
  7368  000BF2  A4D8               	btfss	status,2,c
  7369  000BF4  D003               	goto	i2l4790
  7370                           
  7371                           ; BSR set to: 0
  7372                           ;doprnt.c: 1300: prec++;
  7373  000BF6  0100               	movlb	0	; () banked
  7374  000BF8  4B7D               	infsnz	sprintf@prec& (0+255),f,b
  7375  000BFA  2B7E               	incf	(sprintf@prec+1)& (0+255),f,b
  7376  000BFC                     i2l4790:
  7377                           
  7378                           ; BSR set to: 0
  7379                           ;doprnt.c: 1314: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  7380  000BFC  0E01               	movlw	1
  7381  000BFE  0100               	movlb	0	; () banked
  7382  000C00  6F7F               	movwf	sprintf@c& (0+255),b
  7383  000C02                     
  7384                           ; BSR set to: 0
  7385  000C02  0100               	movlb	0	; () banked
  7386  000C04  517F               	movf	sprintf@c& (0+255),w,b
  7387  000C06  0A0A               	xorlw	10
  7388  000C08  B4D8               	btfsc	status,2,c
  7389  000C0A  D01E               	goto	i2l4804
  7390                           
  7391                           ; BSR set to: 0
  7392                           ;doprnt.c: 1315: if(_val._val < dpowers[c])
  7393                           
  7394                           ; BSR set to: 0
  7395                           
  7396                           ; BSR set to: 0
  7397  000C0C  0100               	movlb	0	; () banked
  7398  000C0E  517F               	movf	sprintf@c& (0+255),w,b
  7399  000C10  0D04               	mullw	4
  7400  000C12  0EA0               	movlw	low _dpowers
  7401  000C14  24F3               	addwf	prodl,w,c
  7402  000C16  6EF6               	movwf	tblptrl,c
  7403  000C18  0E7C               	movlw	high _dpowers
  7404  000C1A  20F4               	addwfc	prodh,w,c
  7405  000C1C  6EF7               	movwf	tblptrh,c
  7406  000C1E                     	if	0	;There are less than 3 active tblptr bytes
  7407  000C1E                     	endif
  7408  000C1E  0009               	tblrd		*+
  7409  000C20  50F5               	movf	tablat,w,c
  7410  000C22  0100               	movlb	0	; () banked
  7411  000C24  5D80               	subwf	sprintf@_val& (0+255),w,b
  7412  000C26  0009               	tblrd		*+
  7413  000C28  50F5               	movf	tablat,w,c
  7414  000C2A  0100               	movlb	0	; () banked
  7415  000C2C  5981               	subwfb	(sprintf@_val+1)& (0+255),w,b
  7416  000C2E  0009               	tblrd		*+
  7417  000C30  50F5               	movf	tablat,w,c
  7418  000C32  0100               	movlb	0	; () banked
  7419  000C34  5982               	subwfb	(sprintf@_val+2)& (0+255),w,b
  7420  000C36  0009               	tblrd		*+
  7421  000C38  50F5               	movf	tablat,w,c
  7422  000C3A  0100               	movlb	0	; () banked
  7423  000C3C  5983               	subwfb	(sprintf@_val+3)& (0+255),w,b
  7424  000C3E  A0D8               	btfss	status,0,c
  7425  000C40  D003               	goto	i2l4804
  7426                           
  7427                           ; BSR set to: 0
  7428                           
  7429                           ; BSR set to: 0
  7430                           
  7431                           ; BSR set to: 0
  7432                           ;doprnt.c: 1316: break;
  7433  000C42  0100               	movlb	0	; () banked
  7434  000C44  2B7F               	incf	sprintf@c& (0+255),f,b
  7435  000C46  D7DD               	goto	L12
  7436  000C48                     i2l4804:
  7437                           
  7438                           ; BSR set to: 0
  7439                           ;doprnt.c: 1348: if(c < prec)
  7440  000C48  0E80               	movlw	128
  7441  000C4A  0100               	movlb	0	; () banked
  7442  000C4C  BF7F               	btfsc	sprintf@c& (0+255),7,b
  7443  000C4E  0E7F               	movlw	127
  7444  000C50  6E51               	movwf	??_sprintf& (0+255),c
  7445  000C52  0100               	movlb	0	; () banked
  7446  000C54  517D               	movf	sprintf@prec& (0+255),w,b
  7447  000C56  0100               	movlb	0	; () banked
  7448  000C58  5D7F               	subwf	sprintf@c& (0+255),w,b
  7449  000C5A  0100               	movlb	0	; () banked
  7450  000C5C  517E               	movf	(sprintf@prec+1)& (0+255),w,b
  7451  000C5E  0A80               	xorlw	128
  7452  000C60  5851               	subwfb	??_sprintf& (0+255),w,c
  7453  000C62  B0D8               	btfsc	status,0,c
  7454  000C64  D003               	goto	i2l4808
  7455                           
  7456                           ; BSR set to: 0
  7457                           ;doprnt.c: 1349: c = prec;
  7458  000C66  C07D  F07F         	movff	sprintf@prec,sprintf@c
  7459  000C6A  D018               	goto	i2l4812
  7460  000C6C                     i2l4808:
  7461                           
  7462                           ; BSR set to: 0
  7463                           ;doprnt.c: 1350: else if(prec < c)
  7464  000C6C  0100               	movlb	0	; () banked
  7465  000C6E  517E               	movf	(sprintf@prec+1)& (0+255),w,b
  7466  000C70  0A80               	xorlw	128
  7467  000C72  6E51               	movwf	??_sprintf& (0+255),c
  7468  000C74  0100               	movlb	0	; () banked
  7469  000C76  517F               	movf	sprintf@c& (0+255),w,b
  7470  000C78  0100               	movlb	0	; () banked
  7471  000C7A  5D7D               	subwf	sprintf@prec& (0+255),w,b
  7472  000C7C  0E80               	movlw	128
  7473  000C7E  0100               	movlb	0	; () banked
  7474  000C80  BF7F               	btfsc	sprintf@c& (0+255),7,b
  7475  000C82  0E7F               	movlw	127
  7476  000C84  5851               	subwfb	??_sprintf& (0+255),w,c
  7477  000C86  B0D8               	btfsc	status,0,c
  7478  000C88  D009               	goto	i2l4812
  7479                           
  7480                           ; BSR set to: 0
  7481                           ;doprnt.c: 1351: prec = c;
  7482  000C8A  0100               	movlb	0	; () banked
  7483  000C8C  517F               	movf	sprintf@c& (0+255),w,b
  7484  000C8E  0100               	movlb	0	; () banked
  7485  000C90  6F7D               	movwf	sprintf@prec& (0+255),b
  7486  000C92  0100               	movlb	0	; () banked
  7487  000C94  6B7E               	clrf	(sprintf@prec+1)& (0+255),b
  7488  000C96  0100               	movlb	0	; () banked
  7489  000C98  BF7D               	btfsc	sprintf@prec& (0+255),7,b
  7490  000C9A  077E               	decf	(sprintf@prec+1)& (0+255),f,b
  7491  000C9C                     i2l4812:
  7492                           
  7493                           ; BSR set to: 0
  7494                           ;doprnt.c: 1354: if(width && flag & 0x03)
  7495  000C9C  0100               	movlb	0	; () banked
  7496  000C9E  517C               	movf	(sprintf@width+1)& (0+255),w,b
  7497  000CA0  117B               	iorwf	sprintf@width& (0+255),w,b
  7498  000CA2  B4D8               	btfsc	status,2,c
  7499  000CA4  D010               	goto	i2l4818
  7500                           
  7501                           ; BSR set to: 0
  7502  000CA6  0E03               	movlw	3
  7503  000CA8  0100               	movlb	0	; () banked
  7504  000CAA  1576               	andwf	sprintf@flag& (0+255),w,b
  7505  000CAC  6E51               	movwf	??_sprintf& (0+255),c
  7506  000CAE  0E00               	movlw	0
  7507  000CB0  0100               	movlb	0	; () banked
  7508  000CB2  1577               	andwf	(sprintf@flag+1)& (0+255),w,b
  7509  000CB4  6E52               	movwf	(??_sprintf+1)& (0+255),c
  7510  000CB6  5052               	movf	??_sprintf+1,w,c
  7511  000CB8  1051               	iorwf	??_sprintf,w,c
  7512  000CBA  B4D8               	btfsc	status,2,c
  7513  000CBC  D004               	goto	i2l4818
  7514                           
  7515                           ; BSR set to: 0
  7516                           ;doprnt.c: 1355: width--;
  7517  000CBE  0100               	movlb	0	; () banked
  7518  000CC0  077B               	decf	sprintf@width& (0+255),f,b
  7519  000CC2  A0D8               	btfss	status,0,c
  7520  000CC4  077C               	decf	(sprintf@width+1)& (0+255),f,b
  7521  000CC6                     i2l4818:
  7522                           
  7523                           ; BSR set to: 0
  7524                           ;doprnt.c: 1357: if(flag & 0x4000) {
  7525  000CC6  0100               	movlb	0	; () banked
  7526  000CC8  AD77               	btfss	(sprintf@flag+1)& (0+255),6,b
  7527  000CCA  D01D               	goto	i2l4826
  7528                           
  7529                           ; BSR set to: 0
  7530                           ;doprnt.c: 1358: if(width > prec)
  7531  000CCC  0100               	movlb	0	; () banked
  7532  000CCE  517E               	movf	(sprintf@prec+1)& (0+255),w,b
  7533  000CD0  0A80               	xorlw	128
  7534  000CD2  6E51               	movwf	??_sprintf& (0+255),c
  7535  000CD4  0100               	movlb	0	; () banked
  7536  000CD6  517B               	movf	sprintf@width& (0+255),w,b
  7537  000CD8  0100               	movlb	0	; () banked
  7538  000CDA  5D7D               	subwf	sprintf@prec& (0+255),w,b
  7539  000CDC  0100               	movlb	0	; () banked
  7540  000CDE  517C               	movf	(sprintf@width+1)& (0+255),w,b
  7541  000CE0  0A80               	xorlw	128
  7542  000CE2  5851               	subwfb	??_sprintf& (0+255),w,c
  7543  000CE4  B0D8               	btfsc	status,0,c
  7544  000CE6  D009               	goto	i2l4824
  7545                           
  7546                           ; BSR set to: 0
  7547                           ;doprnt.c: 1359: width -= prec;
  7548  000CE8  0100               	movlb	0	; () banked
  7549  000CEA  517D               	movf	sprintf@prec& (0+255),w,b
  7550  000CEC  0100               	movlb	0	; () banked
  7551  000CEE  5F7B               	subwf	sprintf@width& (0+255),f,b
  7552  000CF0  0100               	movlb	0	; () banked
  7553  000CF2  517E               	movf	(sprintf@prec+1)& (0+255),w,b
  7554  000CF4  0100               	movlb	0	; () banked
  7555  000CF6  5B7C               	subwfb	(sprintf@width+1)& (0+255),f,b
  7556  000CF8  D006               	goto	i2l4826
  7557  000CFA                     i2l4824:
  7558                           
  7559                           ; BSR set to: 0
  7560                           ;doprnt.c: 1360: else
  7561                           ;doprnt.c: 1361: width = 0;
  7562  000CFA  0E00               	movlw	0
  7563  000CFC  0100               	movlb	0	; () banked
  7564  000CFE  6F7C               	movwf	(sprintf@width+1)& (0+255),b
  7565  000D00  0E00               	movlw	0
  7566  000D02  0100               	movlb	0	; () banked
  7567  000D04  6F7B               	movwf	sprintf@width& (0+255),b
  7568  000D06                     i2l4826:
  7569                           
  7570                           ; BSR set to: 0
  7571                           ;doprnt.c: 1362: }
  7572                           ;doprnt.c: 1390: if(width > c)
  7573  000D06  0E80               	movlw	128
  7574  000D08  0100               	movlb	0	; () banked
  7575  000D0A  BF7F               	btfsc	sprintf@c& (0+255),7,b
  7576  000D0C  0E7F               	movlw	127
  7577  000D0E  6E51               	movwf	??_sprintf& (0+255),c
  7578  000D10  0100               	movlb	0	; () banked
  7579  000D12  517B               	movf	sprintf@width& (0+255),w,b
  7580  000D14  0100               	movlb	0	; () banked
  7581  000D16  5D7F               	subwf	sprintf@c& (0+255),w,b
  7582  000D18  0100               	movlb	0	; () banked
  7583  000D1A  517C               	movf	(sprintf@width+1)& (0+255),w,b
  7584  000D1C  0A80               	xorlw	128
  7585  000D1E  5851               	subwfb	??_sprintf& (0+255),w,c
  7586  000D20  B0D8               	btfsc	status,0,c
  7587  000D22  D00B               	goto	i2l4830
  7588                           
  7589                           ; BSR set to: 0
  7590                           ;doprnt.c: 1391: width -= c;
  7591  000D24  0100               	movlb	0	; () banked
  7592  000D26  517F               	movf	sprintf@c& (0+255),w,b
  7593  000D28  0100               	movlb	0	; () banked
  7594  000D2A  5F7B               	subwf	sprintf@width& (0+255),f,b
  7595  000D2C  0E00               	movlw	0
  7596  000D2E  0100               	movlb	0	; () banked
  7597  000D30  BF7F               	btfsc	sprintf@c& (0+255),7,b
  7598  000D32  0EFF               	movlw	255
  7599  000D34  0100               	movlb	0	; () banked
  7600  000D36  5B7C               	subwfb	(sprintf@width+1)& (0+255),f,b
  7601  000D38  D006               	goto	i2l4832
  7602  000D3A                     i2l4830:
  7603                           
  7604                           ; BSR set to: 0
  7605                           ;doprnt.c: 1392: else
  7606                           ;doprnt.c: 1393: width = 0;
  7607  000D3A  0E00               	movlw	0
  7608  000D3C  0100               	movlb	0	; () banked
  7609  000D3E  6F7C               	movwf	(sprintf@width+1)& (0+255),b
  7610  000D40  0E00               	movlw	0
  7611  000D42  0100               	movlb	0	; () banked
  7612  000D44  6F7B               	movwf	sprintf@width& (0+255),b
  7613  000D46                     i2l4832:
  7614                           
  7615                           ; BSR set to: 0
  7616                           ;doprnt.c: 1396: if(flag & 0x04) {
  7617  000D46  0100               	movlb	0	; () banked
  7618  000D48  A576               	btfss	sprintf@flag& (0+255),2,b
  7619  000D4A  D027               	goto	i2l4848
  7620                           
  7621                           ; BSR set to: 0
  7622                           ;doprnt.c: 1401: if(flag & 0x03)
  7623  000D4C  0E03               	movlw	3
  7624  000D4E  0100               	movlb	0	; () banked
  7625  000D50  1576               	andwf	sprintf@flag& (0+255),w,b
  7626  000D52  6E51               	movwf	??_sprintf& (0+255),c
  7627  000D54  0E00               	movlw	0
  7628  000D56  0100               	movlb	0	; () banked
  7629  000D58  1577               	andwf	(sprintf@flag+1)& (0+255),w,b
  7630  000D5A  6E52               	movwf	(??_sprintf+1)& (0+255),c
  7631  000D5C  5052               	movf	??_sprintf+1,w,c
  7632  000D5E  1051               	iorwf	??_sprintf,w,c
  7633  000D60  B4D8               	btfsc	status,2,c
  7634  000D62  D008               	goto	i2l4840
  7635                           
  7636                           ; BSR set to: 0
  7637                           ;doprnt.c: 1402: ((*sp++ = ('-')));
  7638  000D64  C045  FFD9         	movff	sprintf@sp,fsr2l
  7639  000D68  C046  FFDA         	movff	sprintf@sp+1,fsr2h
  7640  000D6C  0E2D               	movlw	45
  7641  000D6E  6EDF               	movwf	indf2,c
  7642                           
  7643                           ; BSR set to: 0
  7644  000D70  4A45               	infsnz	sprintf@sp,f,c
  7645  000D72  2A46               	incf	sprintf@sp+1,f,c
  7646  000D74                     i2l4840:
  7647                           
  7648                           ; BSR set to: 0
  7649                           ;doprnt.c: 1424: if(width)
  7650  000D74  0100               	movlb	0	; () banked
  7651  000D76  0100               	movlb	0	; () banked
  7652  000D78  517C               	movf	(sprintf@width+1)& (0+255),w,b
  7653  000D7A  117B               	iorwf	sprintf@width& (0+255),w,b
  7654  000D7C  B4D8               	btfsc	status,2,c
  7655  000D7E  D085               	goto	i2l4868
  7656                           
  7657                           ; BSR set to: 0
  7658                           ;doprnt.c: 1426: ((*sp++ = ('0')));
  7659                           
  7660                           ; BSR set to: 0
  7661                           
  7662                           ;doprnt.c: 1425: do
  7663  000D80  C045  FFD9         	movff	sprintf@sp,fsr2l
  7664  000D84  C046  FFDA         	movff	sprintf@sp+1,fsr2h
  7665  000D88  0E30               	movlw	48
  7666  000D8A  6EDF               	movwf	indf2,c
  7667                           
  7668                           ; BSR set to: 0
  7669  000D8C  4A45               	infsnz	sprintf@sp,f,c
  7670  000D8E  2A46               	incf	sprintf@sp+1,f,c
  7671                           
  7672                           ; BSR set to: 0
  7673                           ;doprnt.c: 1427: while(--width);
  7674  000D90  0100               	movlb	0	; () banked
  7675  000D92  077B               	decf	sprintf@width& (0+255),f,b
  7676  000D94  A0D8               	btfss	status,0,c
  7677  000D96  077C               	decf	(sprintf@width+1)& (0+255),f,b
  7678  000D98  D7EE               	goto	L14
  7679  000D9A                     i2l4848:
  7680                           
  7681                           ; BSR set to: 0
  7682                           ;doprnt.c: 1431: {
  7683                           ;doprnt.c: 1433: if(width
  7684                           ;doprnt.c: 1437: )
  7685  000D9A  0100               	movlb	0	; () banked
  7686  000D9C  517C               	movf	(sprintf@width+1)& (0+255),w,b
  7687  000D9E  117B               	iorwf	sprintf@width& (0+255),w,b
  7688  000DA0  B4D8               	btfsc	status,2,c
  7689  000DA2  D011               	goto	i2l4856
  7690  000DA4                     i2l4850:
  7691                           
  7692                           ; BSR set to: 0
  7693                           ;doprnt.c: 1439: ((*sp++ = (' ')));
  7694  000DA4  C045  FFD9         	movff	sprintf@sp,fsr2l
  7695  000DA8  C046  FFDA         	movff	sprintf@sp+1,fsr2h
  7696  000DAC  0E20               	movlw	32
  7697  000DAE  6EDF               	movwf	indf2,c
  7698                           
  7699                           ; BSR set to: 0
  7700  000DB0  4A45               	infsnz	sprintf@sp,f,c
  7701  000DB2  2A46               	incf	sprintf@sp+1,f,c
  7702                           
  7703                           ; BSR set to: 0
  7704                           ;doprnt.c: 1440: while(--width);
  7705  000DB4  0100               	movlb	0	; () banked
  7706  000DB6  077B               	decf	sprintf@width& (0+255),f,b
  7707  000DB8  A0D8               	btfss	status,0,c
  7708  000DBA  077C               	decf	(sprintf@width+1)& (0+255),f,b
  7709  000DBC  0100               	movlb	0	; () banked
  7710  000DBE  517C               	movf	(sprintf@width+1)& (0+255),w,b
  7711  000DC0  117B               	iorwf	sprintf@width& (0+255),w,b
  7712  000DC2  A4D8               	btfss	status,2,c
  7713  000DC4  D7EF               	goto	i2l4850
  7714  000DC6                     i2l4856:
  7715                           
  7716                           ; BSR set to: 0
  7717                           ;doprnt.c: 1447: if(flag & 0x03)
  7718  000DC6  0E03               	movlw	3
  7719  000DC8  0100               	movlb	0	; () banked
  7720  000DCA  1576               	andwf	sprintf@flag& (0+255),w,b
  7721  000DCC  6E51               	movwf	??_sprintf& (0+255),c
  7722  000DCE  0E00               	movlw	0
  7723  000DD0  0100               	movlb	0	; () banked
  7724  000DD2  1577               	andwf	(sprintf@flag+1)& (0+255),w,b
  7725  000DD4  6E52               	movwf	(??_sprintf+1)& (0+255),c
  7726  000DD6  5052               	movf	??_sprintf+1,w,c
  7727  000DD8  1051               	iorwf	??_sprintf,w,c
  7728  000DDA  B4D8               	btfsc	status,2,c
  7729  000DDC  D056               	goto	i2l4868
  7730                           
  7731                           ; BSR set to: 0
  7732                           ;doprnt.c: 1448: ((*sp++ = ('-')));
  7733  000DDE  C045  FFD9         	movff	sprintf@sp,fsr2l
  7734  000DE2  C046  FFDA         	movff	sprintf@sp+1,fsr2h
  7735  000DE6  0E2D               	movlw	45
  7736  000DE8  6EDF               	movwf	indf2,c
  7737  000DEA  D04D               	goto	L13
  7738  000DEC                     i2l4862:
  7739                           
  7740                           ; BSR set to: 0
  7741                           ;doprnt.c: 1487: {
  7742                           ;doprnt.c: 1498: c = (_val._val / dpowers[prec]) % 10 + '0';
  7743  000DEC  0100               	movlb	0	; () banked
  7744  000DEE  C07D  F051         	movff	sprintf@prec,??_sprintf
  7745  000DF2  0100               	movlb	0	; () banked
  7746  000DF4  C07E  F052         	movff	sprintf@prec+1,??_sprintf+1
  7747  000DF8  90D8               	bcf	status,0,c
  7748  000DFA  3651               	rlcf	??_sprintf,f,c
  7749  000DFC  3652               	rlcf	??_sprintf+1,f,c
  7750  000DFE  90D8               	bcf	status,0,c
  7751  000E00  3651               	rlcf	??_sprintf,f,c
  7752  000E02  3652               	rlcf	??_sprintf+1,f,c
  7753  000E04  0EA0               	movlw	low _dpowers
  7754  000E06  2451               	addwf	??_sprintf,w,c
  7755  000E08  6EF6               	movwf	tblptrl,c
  7756  000E0A  0E7C               	movlw	high _dpowers
  7757  000E0C  2052               	addwfc	??_sprintf+1,w,c
  7758  000E0E  6EF7               	movwf	tblptrh,c
  7759  000E10                     	if	0	;There are less than 3 active tblptr bytes
  7760  000E10                     	endif
  7761  000E10  0009               	tblrd		*+
  7762  000E12  CFF5 F005          	movff	tablat,___lldiv@divisor
  7763  000E16  0009               	tblrd		*+
  7764  000E18  CFF5 F006          	movff	tablat,___lldiv@divisor+1
  7765  000E1C  0009               	tblrd		*+
  7766  000E1E  CFF5 F007          	movff	tablat,___lldiv@divisor+2
  7767  000E22  000A               	tblrd		*-
  7768  000E24  CFF5 F008          	movff	tablat,___lldiv@divisor+3
  7769  000E28  C080  F001         	movff	sprintf@_val,___lldiv@dividend
  7770  000E2C  C081  F002         	movff	sprintf@_val+1,___lldiv@dividend+1
  7771  000E30  C082  F003         	movff	sprintf@_val+2,___lldiv@dividend+2
  7772  000E34  C083  F004         	movff	sprintf@_val+3,___lldiv@dividend+3
  7773  000E38  ECC7  F01F         	call	___lldiv	;wreg free
  7774  000E3C  C001  F00E         	movff	?___lldiv,___llmod@dividend
  7775  000E40  C002  F00F         	movff	?___lldiv+1,___llmod@dividend+1
  7776  000E44  C003  F010         	movff	?___lldiv+2,___llmod@dividend+2
  7777  000E48  C004  F011         	movff	?___lldiv+3,___llmod@dividend+3
  7778  000E4C  0E0A               	movlw	10
  7779  000E4E  6E12               	movwf	___llmod@divisor,c
  7780  000E50  0E00               	movlw	0
  7781  000E52  6E13               	movwf	___llmod@divisor+1,c
  7782  000E54  0E00               	movlw	0
  7783  000E56  6E14               	movwf	___llmod@divisor+2,c
  7784  000E58  0E00               	movlw	0
  7785  000E5A  6E15               	movwf	___llmod@divisor+3,c
  7786  000E5C  ECB4  F020         	call	___llmod	;wreg free
  7787  000E60  C00E  F053         	movff	?___llmod,??_sprintf+2
  7788  000E64  C00F  F054         	movff	?___llmod+1,??_sprintf+3
  7789  000E68  C010  F055         	movff	?___llmod+2,??_sprintf+4
  7790  000E6C  C011  F056         	movff	?___llmod+3,??_sprintf+5
  7791  000E70  5053               	movf	??_sprintf+2,w,c
  7792  000E72  0F30               	addlw	48
  7793  000E74  0100               	movlb	0	; () banked
  7794  000E76  6F7F               	movwf	sprintf@c& (0+255),b
  7795                           
  7796                           ; BSR set to: 0
  7797                           ;doprnt.c: 1532: }
  7798                           ;doprnt.c: 1533: ((*sp++ = (c)));
  7799  000E78  C045  FFD9         	movff	sprintf@sp,fsr2l
  7800  000E7C  C046  FFDA         	movff	sprintf@sp+1,fsr2h
  7801  000E80  0100               	movlb	0	; () banked
  7802  000E82  C07F  FFDF         	movff	sprintf@c,indf2
  7803  000E86                     L13:
  7804                           
  7805                           ; BSR set to: 0
  7806  000E86  4A45               	infsnz	sprintf@sp,f,c
  7807  000E88  2A46               	incf	sprintf@sp+1,f,c
  7808  000E8A                     i2l4868:
  7809                           
  7810                           ; BSR set to: 0
  7811  000E8A  0100               	movlb	0	; () banked
  7812  000E8C  077D               	decf	sprintf@prec& (0+255),f,b
  7813  000E8E  A0D8               	btfss	status,0,c
  7814  000E90  077E               	decf	(sprintf@prec+1)& (0+255),f,b
  7815  000E92  0100               	movlb	0	; () banked
  7816  000E94  297D               	incf	sprintf@prec& (0+255),w,b
  7817  000E96  B4D8               	btfsc	status,2,c
  7818  000E98  297E               	incf	(sprintf@prec+1)& (0+255),w,b
  7819  000E9A  A4D8               	btfss	status,2,c
  7820  000E9C  D7A7               	goto	i2l4862
  7821  000E9E                     i2l4870:
  7822                           
  7823                           ; BSR set to: 0
  7824  000E9E  C047  FFF6         	movff	sprintf@f,tblptrl
  7825  000EA2  C048  FFF7         	movff	sprintf@f+1,tblptrh
  7826  000EA6  4A47               	infsnz	sprintf@f,f,c
  7827  000EA8  2A48               	incf	sprintf@f+1,f,c
  7828  000EAA                     	if	0	;tblptru may be non-zero
  7829  000EAA                     	endif
  7830  000EAA                     	if	0	;tblptru may be non-zero
  7831  000EAA                     	endif
  7832  000EAA  0008               	tblrd		*
  7833  000EAC  0100               	movlb	0	; () banked
  7834  000EAE  CFF5 F07F          	movff	tablat,sprintf@c
  7835  000EB2  0100               	movlb	0	; () banked
  7836  000EB4  677F               	tstfsz	sprintf@c& (0+255),b
  7837  000EB6  EF16  F000         	goto	i2l4474
  7838  000EBA                     i2l4872:
  7839                           
  7840                           ; BSR set to: 0
  7841                           ;doprnt.c: 1547: *sp = 0;
  7842  000EBA  C045  FFD9         	movff	sprintf@sp,fsr2l
  7843  000EBE  C046  FFDA         	movff	sprintf@sp+1,fsr2h
  7844  000EC2  0E00               	movlw	0
  7845  000EC4  6EDF               	movwf	indf2,c
  7846                           
  7847                           ; BSR set to: 0
  7848                           
  7849                           ; BSR set to: 0
  7850                           ;doprnt.c: 1549: return 0;
  7851                           ;	Return value of _sprintf is never used
  7852  000EC6  0012               	return	
  7853  000EC8                     __end_of_sprintf:
  7854                           	opt stack 0
  7855                           tosu	equ	0xFFF
  7856                           tosh	equ	0xFFE
  7857                           tosl	equ	0xFFD
  7858                           pclatu	equ	0xFFB
  7859                           pclath	equ	0xFFA
  7860                           tblptru	equ	0xFF8
  7861                           tblptrh	equ	0xFF7
  7862                           tblptrl	equ	0xFF6
  7863                           tablat	equ	0xFF5
  7864                           prodh	equ	0xFF4
  7865                           prodl	equ	0xFF3
  7866                           intcon	equ	0xFF2
  7867                           intcon2	equ	0xFF1
  7868                           indf0	equ	0xFEF
  7869                           postinc0	equ	0xFEE
  7870                           fsr0h	equ	0xFEA
  7871                           fsr0l	equ	0xFE9
  7872                           wreg	equ	0xFE8
  7873                           postinc1	equ	0xFE6
  7874                           postdec1	equ	0xFE5
  7875                           fsr1h	equ	0xFE2
  7876                           fsr1l	equ	0xFE1
  7877                           indf2	equ	0xFDF
  7878                           postinc2	equ	0xFDE
  7879                           postdec2	equ	0xFDD
  7880                           fsr2h	equ	0xFDA
  7881                           fsr2l	equ	0xFD9
  7882                           status	equ	0xFD8
  7883                           
  7884 ;; *************** function _scale *****************
  7885 ;; Defined at:
  7886 ;;		line 425 in file "/opt/microchip/xc8/v1.32/sources/common/doprnt.c"
  7887 ;; Parameters:    Size  Location     Type
  7888 ;;  scl             1    wreg     char 
  7889 ;; Auto vars:     Size  Location     Type
  7890 ;;  scl             1   41[COMRAM] char 
  7891 ;; Return value:  Size  Location     Type
  7892 ;;                  3   35[COMRAM] char 
  7893 ;; Registers used:
  7894 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7895 ;; Tracked objects:
  7896 ;;		On entry : 0/0
  7897 ;;		On exit  : 0/0
  7898 ;;		Unchanged: 0/0
  7899 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7900 ;;      Params:         3       0       0       0       0       0       0       0       0
  7901 ;;      Locals:         4       0       0       0       0       0       0       0       0
  7902 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7903 ;;      Totals:         7       0       0       0       0       0       0       0       0
  7904 ;;Total ram usage:        7 bytes
  7905 ;; Hardware stack levels used:    1
  7906 ;; Hardware stack levels required when called:    2
  7907 ;; This function calls:
  7908 ;;		___awdiv
  7909 ;;		___awmod
  7910 ;;		___ftmul
  7911 ;;		___wmul
  7912 ;; This function is called by:
  7913 ;;		_sprintf
  7914 ;; This function uses a non-reentrant model
  7915 ;;
  7916                           
  7917                           	psect	text20
  7918  001C56                     __ptext20:
  7919                           	opt stack 0
  7920  001C56                     _scale:
  7921                           	opt stack 21
  7922                           
  7923                           ; BSR set to: 0
  7924                           ;incstack = 0
  7925                           ;scale@scl stored from wreg
  7926  001C56  6E2A               	movwf	scale@scl,c
  7927                           
  7928                           ;doprnt.c: 428: if(scl < 0) {
  7929  001C58  AE2A               	btfss	scale@scl,7,c
  7930  001C5A  D0EA               	goto	i2l4192
  7931                           
  7932                           ;doprnt.c: 429: scl = -scl;
  7933  001C5C  6C2A               	negf	scale@scl,c
  7934                           
  7935                           ;doprnt.c: 430: if(scl>=110)
  7936  001C5E  502A               	movf	scale@scl,w,c
  7937  001C60  0A80               	xorlw	128
  7938  001C62  0F12               	addlw	-238
  7939  001C64  A0D8               	btfss	status,0,c
  7940  001C66  D08B               	goto	i2l4182
  7941                           
  7942                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  7943  001C68  0E00               	movlw	0
  7944  001C6A  6E12               	movwf	___wmul@multiplicand+1,c
  7945  001C6C  0E03               	movlw	3
  7946  001C6E  6E11               	movwf	___wmul@multiplicand,c
  7947  001C70  0E00               	movlw	0
  7948  001C72  6E0A               	movwf	___awdiv@divisor+1,c
  7949  001C74  0E0A               	movlw	10
  7950  001C76  6E09               	movwf	___awdiv@divisor,c
  7951  001C78  0E00               	movlw	0
  7952  001C7A  6E04               	movwf	___awmod@divisor+1,c
  7953  001C7C  0E64               	movlw	100
  7954  001C7E  6E03               	movwf	___awmod@divisor,c
  7955  001C80  502A               	movf	scale@scl,w,c
  7956  001C82  6E01               	movwf	___awmod@dividend,c
  7957  001C84  6A02               	clrf	___awmod@dividend+1,c
  7958  001C86  BE01               	btfsc	___awmod@dividend,7,c
  7959  001C88  0602               	decf	___awmod@dividend+1,f,c
  7960  001C8A  ECF4  F01E         	call	___awmod	;wreg free
  7961  001C8E  C001  F007         	movff	?___awmod,___awdiv@dividend
  7962  001C92  C002  F008         	movff	?___awmod+1,___awdiv@dividend+1
  7963  001C96  ECC4  F01D         	call	___awdiv	;wreg free
  7964  001C9A  0E09               	movlw	9
  7965  001C9C  2407               	addwf	?___awdiv,w,c
  7966  001C9E  6E0F               	movwf	___wmul@multiplier,c
  7967  001CA0  0E00               	movlw	0
  7968  001CA2  2008               	addwfc	?___awdiv+1,w,c
  7969  001CA4  6E10               	movwf	___wmul@multiplier+1,c
  7970  001CA6  ECD0  F022         	call	___wmul	;wreg free
  7971  001CAA  0EF0               	movlw	low __npowers_
  7972  001CAC  240F               	addwf	?___wmul,w,c
  7973  001CAE  6EF6               	movwf	tblptrl,c
  7974  001CB0  0E7C               	movlw	high __npowers_
  7975  001CB2  2010               	addwfc	?___wmul+1,w,c
  7976  001CB4  6EF7               	movwf	tblptrh,c
  7977  001CB6                     	if	0	;There are less than 3 active tblptr bytes
  7978  001CB6                     	endif
  7979  001CB6  0009               	tblrd		*+
  7980  001CB8  CFF5 F018          	movff	tablat,___ftmul@f2
  7981  001CBC  0009               	tblrd		*+
  7982  001CBE  CFF5 F019          	movff	tablat,___ftmul@f2+1
  7983  001CC2  000A               	tblrd		*-
  7984  001CC4  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  7985  001CC8  0E00               	movlw	0
  7986  001CCA  6E0A               	movwf	___awdiv@divisor+1,c
  7987  001CCC  0E64               	movlw	100
  7988  001CCE  6E09               	movwf	___awdiv@divisor,c
  7989  001CD0  502A               	movf	scale@scl,w,c
  7990  001CD2  6E07               	movwf	___awdiv@dividend,c
  7991  001CD4  6A08               	clrf	___awdiv@dividend+1,c
  7992  001CD6  BE07               	btfsc	___awdiv@dividend,7,c
  7993  001CD8  0608               	decf	___awdiv@dividend+1,f,c
  7994  001CDA  ECC4  F01D         	call	___awdiv	;wreg free
  7995  001CDE  0E12               	movlw	18
  7996  001CE0  2407               	addwf	?___awdiv,w,c
  7997  001CE2  6E0F               	movwf	___wmul@multiplier,c
  7998  001CE4  0E00               	movlw	0
  7999  001CE6  2008               	addwfc	?___awdiv+1,w,c
  8000  001CE8  6E10               	movwf	___wmul@multiplier+1,c
  8001  001CEA  0E00               	movlw	0
  8002  001CEC  6E12               	movwf	___wmul@multiplicand+1,c
  8003  001CEE  0E03               	movlw	3
  8004  001CF0  6E11               	movwf	___wmul@multiplicand,c
  8005  001CF2  ECD0  F022         	call	___wmul	;wreg free
  8006  001CF6  0EF0               	movlw	low __npowers_
  8007  001CF8  240F               	addwf	?___wmul,w,c
  8008  001CFA  6EF6               	movwf	tblptrl,c
  8009  001CFC  0E7C               	movlw	high __npowers_
  8010  001CFE  2010               	addwfc	?___wmul+1,w,c
  8011  001D00  6EF7               	movwf	tblptrh,c
  8012  001D02                     	if	0	;There are less than 3 active tblptr bytes
  8013  001D02                     	endif
  8014  001D02  0009               	tblrd		*+
  8015  001D04  CFF5 F015          	movff	tablat,___ftmul@f1
  8016  001D08  0009               	tblrd		*+
  8017  001D0A  CFF5 F016          	movff	tablat,___ftmul@f1+1
  8018  001D0E  000A               	tblrd		*-
  8019  001D10  CFF5 F017          	movff	tablat,___ftmul@f1+2
  8020  001D14  EC61  F01B         	call	___ftmul	;wreg free
  8021  001D18  C015  F027         	movff	?___ftmul,_scale$1313
  8022  001D1C  C016  F028         	movff	?___ftmul+1,_scale$1313+1
  8023  001D20  C017  F029         	movff	?___ftmul+2,_scale$1313+2
  8024                           
  8025                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  8026  001D24  C027  F015         	movff	_scale$1313,___ftmul@f1
  8027  001D28  C028  F016         	movff	_scale$1313+1,___ftmul@f1+1
  8028  001D2C  C029  F017         	movff	_scale$1313+2,___ftmul@f1+2
  8029  001D30  0E00               	movlw	0
  8030  001D32  6E12               	movwf	___wmul@multiplicand+1,c
  8031  001D34  0E03               	movlw	3
  8032  001D36  6E11               	movwf	___wmul@multiplicand,c
  8033  001D38  0E00               	movlw	0
  8034  001D3A  6E04               	movwf	___awmod@divisor+1,c
  8035  001D3C  0E0A               	movlw	10
  8036  001D3E  6E03               	movwf	___awmod@divisor,c
  8037  001D40  502A               	movf	scale@scl,w,c
  8038  001D42  6E01               	movwf	___awmod@dividend,c
  8039  001D44  6A02               	clrf	___awmod@dividend+1,c
  8040  001D46  BE01               	btfsc	___awmod@dividend,7,c
  8041  001D48  0602               	decf	___awmod@dividend+1,f,c
  8042  001D4A  ECF4  F01E         	call	___awmod	;wreg free
  8043  001D4E  C001  F00F         	movff	?___awmod,___wmul@multiplier
  8044  001D52  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  8045  001D56  ECD0  F022         	call	___wmul	;wreg free
  8046  001D5A  0EF0               	movlw	low __npowers_
  8047  001D5C  240F               	addwf	?___wmul,w,c
  8048  001D5E  6EF6               	movwf	tblptrl,c
  8049  001D60  0E7C               	movlw	high __npowers_
  8050  001D62  2010               	addwfc	?___wmul+1,w,c
  8051  001D64  6EF7               	movwf	tblptrh,c
  8052  001D66                     	if	0	;There are less than 3 active tblptr bytes
  8053  001D66                     	endif
  8054  001D66  0009               	tblrd		*+
  8055  001D68  CFF5 F018          	movff	tablat,___ftmul@f2
  8056  001D6C  0009               	tblrd		*+
  8057  001D6E  CFF5 F019          	movff	tablat,___ftmul@f2+1
  8058  001D72  000A               	tblrd		*-
  8059  001D74  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  8060  001D78  EC61  F01B         	call	___ftmul	;wreg free
  8061  001D7C  D13A               	goto	L18
  8062  001D7E                     i2l4182:
  8063                           
  8064                           ;doprnt.c: 432: else if(scl > 10)
  8065  001D7E  502A               	movf	scale@scl,w,c
  8066  001D80  0A80               	xorlw	128
  8067  001D82  0F75               	addlw	-139
  8068  001D84  A0D8               	btfss	status,0,c
  8069  001D86  D04D               	goto	i2l4188
  8070                           
  8071                           ;doprnt.c: 433: return _npowers_[scl/10+9] * _npowers_[scl%10];
  8072  001D88  0E00               	movlw	0
  8073  001D8A  6E0A               	movwf	___awdiv@divisor+1,c
  8074  001D8C  0E0A               	movlw	10
  8075  001D8E  6E09               	movwf	___awdiv@divisor,c
  8076  001D90  502A               	movf	scale@scl,w,c
  8077  001D92  6E07               	movwf	___awdiv@dividend,c
  8078  001D94  6A08               	clrf	___awdiv@dividend+1,c
  8079  001D96  BE07               	btfsc	___awdiv@dividend,7,c
  8080  001D98  0608               	decf	___awdiv@dividend+1,f,c
  8081  001D9A  ECC4  F01D         	call	___awdiv	;wreg free
  8082  001D9E  0E09               	movlw	9
  8083  001DA0  2407               	addwf	?___awdiv,w,c
  8084  001DA2  6E0F               	movwf	___wmul@multiplier,c
  8085  001DA4  0E00               	movlw	0
  8086  001DA6  2008               	addwfc	?___awdiv+1,w,c
  8087  001DA8  6E10               	movwf	___wmul@multiplier+1,c
  8088  001DAA  0E00               	movlw	0
  8089  001DAC  6E12               	movwf	___wmul@multiplicand+1,c
  8090  001DAE  0E03               	movlw	3
  8091  001DB0  6E11               	movwf	___wmul@multiplicand,c
  8092  001DB2  ECD0  F022         	call	___wmul	;wreg free
  8093  001DB6  0EF0               	movlw	low __npowers_
  8094  001DB8  240F               	addwf	?___wmul,w,c
  8095  001DBA  6EF6               	movwf	tblptrl,c
  8096  001DBC  0E7C               	movlw	high __npowers_
  8097  001DBE  2010               	addwfc	?___wmul+1,w,c
  8098  001DC0  6EF7               	movwf	tblptrh,c
  8099  001DC2                     	if	0	;There are less than 3 active tblptr bytes
  8100  001DC2                     	endif
  8101  001DC2  0009               	tblrd		*+
  8102  001DC4  CFF5 F015          	movff	tablat,___ftmul@f1
  8103  001DC8  0009               	tblrd		*+
  8104  001DCA  CFF5 F016          	movff	tablat,___ftmul@f1+1
  8105  001DCE  000A               	tblrd		*-
  8106  001DD0  CFF5 F017          	movff	tablat,___ftmul@f1+2
  8107  001DD4  0E00               	movlw	0
  8108  001DD6  6E12               	movwf	___wmul@multiplicand+1,c
  8109  001DD8  0E03               	movlw	3
  8110  001DDA  6E11               	movwf	___wmul@multiplicand,c
  8111  001DDC  0E00               	movlw	0
  8112  001DDE  6E04               	movwf	___awmod@divisor+1,c
  8113  001DE0  0E0A               	movlw	10
  8114  001DE2  6E03               	movwf	___awmod@divisor,c
  8115  001DE4  502A               	movf	scale@scl,w,c
  8116  001DE6  6E01               	movwf	___awmod@dividend,c
  8117  001DE8  6A02               	clrf	___awmod@dividend+1,c
  8118  001DEA  BE01               	btfsc	___awmod@dividend,7,c
  8119  001DEC  0602               	decf	___awmod@dividend+1,f,c
  8120  001DEE  ECF4  F01E         	call	___awmod	;wreg free
  8121  001DF2  C001  F00F         	movff	?___awmod,___wmul@multiplier
  8122  001DF6  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  8123  001DFA  ECD0  F022         	call	___wmul	;wreg free
  8124  001DFE  0EF0               	movlw	low __npowers_
  8125  001E00  240F               	addwf	?___wmul,w,c
  8126  001E02  6EF6               	movwf	tblptrl,c
  8127  001E04  0E7C               	movlw	high __npowers_
  8128  001E06  2010               	addwfc	?___wmul+1,w,c
  8129  001E08  6EF7               	movwf	tblptrh,c
  8130  001E0A                     	if	0	;There are less than 3 active tblptr bytes
  8131  001E0A                     	endif
  8132  001E0A  0009               	tblrd		*+
  8133  001E0C  CFF5 F018          	movff	tablat,___ftmul@f2
  8134  001E10  0009               	tblrd		*+
  8135  001E12  CFF5 F019          	movff	tablat,___ftmul@f2+1
  8136  001E16  000A               	tblrd		*-
  8137  001E18  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  8138  001E1C  EC61  F01B         	call	___ftmul	;wreg free
  8139  001E20  D0E8               	goto	L18
  8140  001E22                     i2l4188:
  8141                           
  8142                           ;doprnt.c: 434: return _npowers_[scl];
  8143  001E22  502A               	movf	scale@scl,w,c
  8144  001E24  0D03               	mullw	3
  8145  001E26  0EF0               	movlw	low __npowers_
  8146  001E28  24F3               	addwf	prodl,w,c
  8147  001E2A  6EF6               	movwf	tblptrl,c
  8148  001E2C  0E7C               	movlw	high __npowers_
  8149  001E2E  D0EE               	goto	L17
  8150  001E30                     i2l4192:
  8151                           
  8152                           ;doprnt.c: 435: }
  8153                           ;doprnt.c: 436: if(scl>=110)
  8154  001E30  502A               	movf	scale@scl,w,c
  8155  001E32  0A80               	xorlw	128
  8156  001E34  0F12               	addlw	-238
  8157  001E36  A0D8               	btfss	status,0,c
  8158  001E38  D08B               	goto	i2l4200
  8159                           
  8160                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  8161  001E3A  0E00               	movlw	0
  8162  001E3C  6E12               	movwf	___wmul@multiplicand+1,c
  8163  001E3E  0E03               	movlw	3
  8164  001E40  6E11               	movwf	___wmul@multiplicand,c
  8165  001E42  0E00               	movlw	0
  8166  001E44  6E0A               	movwf	___awdiv@divisor+1,c
  8167  001E46  0E0A               	movlw	10
  8168  001E48  6E09               	movwf	___awdiv@divisor,c
  8169  001E4A  0E00               	movlw	0
  8170  001E4C  6E04               	movwf	___awmod@divisor+1,c
  8171  001E4E  0E64               	movlw	100
  8172  001E50  6E03               	movwf	___awmod@divisor,c
  8173  001E52  502A               	movf	scale@scl,w,c
  8174  001E54  6E01               	movwf	___awmod@dividend,c
  8175  001E56  6A02               	clrf	___awmod@dividend+1,c
  8176  001E58  BE01               	btfsc	___awmod@dividend,7,c
  8177  001E5A  0602               	decf	___awmod@dividend+1,f,c
  8178  001E5C  ECF4  F01E         	call	___awmod	;wreg free
  8179  001E60  C001  F007         	movff	?___awmod,___awdiv@dividend
  8180  001E64  C002  F008         	movff	?___awmod+1,___awdiv@dividend+1
  8181  001E68  ECC4  F01D         	call	___awdiv	;wreg free
  8182  001E6C  0E09               	movlw	9
  8183  001E6E  2407               	addwf	?___awdiv,w,c
  8184  001E70  6E0F               	movwf	___wmul@multiplier,c
  8185  001E72  0E00               	movlw	0
  8186  001E74  2008               	addwfc	?___awdiv+1,w,c
  8187  001E76  6E10               	movwf	___wmul@multiplier+1,c
  8188  001E78  ECD0  F022         	call	___wmul	;wreg free
  8189  001E7C  0E17               	movlw	low __powers_
  8190  001E7E  240F               	addwf	?___wmul,w,c
  8191  001E80  6EF6               	movwf	tblptrl,c
  8192  001E82  0E7D               	movlw	high __powers_
  8193  001E84  2010               	addwfc	?___wmul+1,w,c
  8194  001E86  6EF7               	movwf	tblptrh,c
  8195  001E88                     	if	0	;There are less than 3 active tblptr bytes
  8196  001E88                     	endif
  8197  001E88  0009               	tblrd		*+
  8198  001E8A  CFF5 F018          	movff	tablat,___ftmul@f2
  8199  001E8E  0009               	tblrd		*+
  8200  001E90  CFF5 F019          	movff	tablat,___ftmul@f2+1
  8201  001E94  000A               	tblrd		*-
  8202  001E96  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  8203  001E9A  0E00               	movlw	0
  8204  001E9C  6E0A               	movwf	___awdiv@divisor+1,c
  8205  001E9E  0E64               	movlw	100
  8206  001EA0  6E09               	movwf	___awdiv@divisor,c
  8207  001EA2  502A               	movf	scale@scl,w,c
  8208  001EA4  6E07               	movwf	___awdiv@dividend,c
  8209  001EA6  6A08               	clrf	___awdiv@dividend+1,c
  8210  001EA8  BE07               	btfsc	___awdiv@dividend,7,c
  8211  001EAA  0608               	decf	___awdiv@dividend+1,f,c
  8212  001EAC  ECC4  F01D         	call	___awdiv	;wreg free
  8213  001EB0  0E12               	movlw	18
  8214  001EB2  2407               	addwf	?___awdiv,w,c
  8215  001EB4  6E0F               	movwf	___wmul@multiplier,c
  8216  001EB6  0E00               	movlw	0
  8217  001EB8  2008               	addwfc	?___awdiv+1,w,c
  8218  001EBA  6E10               	movwf	___wmul@multiplier+1,c
  8219  001EBC  0E00               	movlw	0
  8220  001EBE  6E12               	movwf	___wmul@multiplicand+1,c
  8221  001EC0  0E03               	movlw	3
  8222  001EC2  6E11               	movwf	___wmul@multiplicand,c
  8223  001EC4  ECD0  F022         	call	___wmul	;wreg free
  8224  001EC8  0E17               	movlw	low __powers_
  8225  001ECA  240F               	addwf	?___wmul,w,c
  8226  001ECC  6EF6               	movwf	tblptrl,c
  8227  001ECE  0E7D               	movlw	high __powers_
  8228  001ED0  2010               	addwfc	?___wmul+1,w,c
  8229  001ED2  6EF7               	movwf	tblptrh,c
  8230  001ED4                     	if	0	;There are less than 3 active tblptr bytes
  8231  001ED4                     	endif
  8232  001ED4  0009               	tblrd		*+
  8233  001ED6  CFF5 F015          	movff	tablat,___ftmul@f1
  8234  001EDA  0009               	tblrd		*+
  8235  001EDC  CFF5 F016          	movff	tablat,___ftmul@f1+1
  8236  001EE0  000A               	tblrd		*-
  8237  001EE2  CFF5 F017          	movff	tablat,___ftmul@f1+2
  8238  001EE6  EC61  F01B         	call	___ftmul	;wreg free
  8239  001EEA  C015  F027         	movff	?___ftmul,_scale$1313
  8240  001EEE  C016  F028         	movff	?___ftmul+1,_scale$1313+1
  8241  001EF2  C017  F029         	movff	?___ftmul+2,_scale$1313+2
  8242                           
  8243                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  8244  001EF6  C027  F015         	movff	_scale$1313,___ftmul@f1
  8245  001EFA  C028  F016         	movff	_scale$1313+1,___ftmul@f1+1
  8246  001EFE  C029  F017         	movff	_scale$1313+2,___ftmul@f1+2
  8247  001F02  0E00               	movlw	0
  8248  001F04  6E12               	movwf	___wmul@multiplicand+1,c
  8249  001F06  0E03               	movlw	3
  8250  001F08  6E11               	movwf	___wmul@multiplicand,c
  8251  001F0A  0E00               	movlw	0
  8252  001F0C  6E04               	movwf	___awmod@divisor+1,c
  8253  001F0E  0E0A               	movlw	10
  8254  001F10  6E03               	movwf	___awmod@divisor,c
  8255  001F12  502A               	movf	scale@scl,w,c
  8256  001F14  6E01               	movwf	___awmod@dividend,c
  8257  001F16  6A02               	clrf	___awmod@dividend+1,c
  8258  001F18  BE01               	btfsc	___awmod@dividend,7,c
  8259  001F1A  0602               	decf	___awmod@dividend+1,f,c
  8260  001F1C  ECF4  F01E         	call	___awmod	;wreg free
  8261  001F20  C001  F00F         	movff	?___awmod,___wmul@multiplier
  8262  001F24  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  8263  001F28  ECD0  F022         	call	___wmul	;wreg free
  8264  001F2C  0E17               	movlw	low __powers_
  8265  001F2E  240F               	addwf	?___wmul,w,c
  8266  001F30  6EF6               	movwf	tblptrl,c
  8267  001F32  0E7D               	movlw	high __powers_
  8268  001F34  2010               	addwfc	?___wmul+1,w,c
  8269  001F36  6EF7               	movwf	tblptrh,c
  8270  001F38                     	if	0	;There are less than 3 active tblptr bytes
  8271  001F38                     	endif
  8272  001F38  0009               	tblrd		*+
  8273  001F3A  CFF5 F018          	movff	tablat,___ftmul@f2
  8274  001F3E  0009               	tblrd		*+
  8275  001F40  CFF5 F019          	movff	tablat,___ftmul@f2+1
  8276  001F44  000A               	tblrd		*-
  8277  001F46  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  8278  001F4A  EC61  F01B         	call	___ftmul	;wreg free
  8279  001F4E  D051               	goto	L18
  8280  001F50                     i2l4200:
  8281                           
  8282                           ;doprnt.c: 438: else if(scl > 10)
  8283  001F50  502A               	movf	scale@scl,w,c
  8284  001F52  0A80               	xorlw	128
  8285  001F54  0F75               	addlw	-139
  8286  001F56  A0D8               	btfss	status,0,c
  8287  001F58  D053               	goto	i2l4206
  8288                           
  8289                           ;doprnt.c: 439: return _powers_[scl/10+9] * _powers_[scl%10];
  8290  001F5A  0E00               	movlw	0
  8291  001F5C  6E0A               	movwf	___awdiv@divisor+1,c
  8292  001F5E  0E0A               	movlw	10
  8293  001F60  6E09               	movwf	___awdiv@divisor,c
  8294  001F62  502A               	movf	scale@scl,w,c
  8295  001F64  6E07               	movwf	___awdiv@dividend,c
  8296  001F66  6A08               	clrf	___awdiv@dividend+1,c
  8297  001F68  BE07               	btfsc	___awdiv@dividend,7,c
  8298  001F6A  0608               	decf	___awdiv@dividend+1,f,c
  8299  001F6C  ECC4  F01D         	call	___awdiv	;wreg free
  8300  001F70  0E09               	movlw	9
  8301  001F72  2407               	addwf	?___awdiv,w,c
  8302  001F74  6E0F               	movwf	___wmul@multiplier,c
  8303  001F76  0E00               	movlw	0
  8304  001F78  2008               	addwfc	?___awdiv+1,w,c
  8305  001F7A  6E10               	movwf	___wmul@multiplier+1,c
  8306  001F7C  0E00               	movlw	0
  8307  001F7E  6E12               	movwf	___wmul@multiplicand+1,c
  8308  001F80  0E03               	movlw	3
  8309  001F82  6E11               	movwf	___wmul@multiplicand,c
  8310  001F84  ECD0  F022         	call	___wmul	;wreg free
  8311  001F88  0E17               	movlw	low __powers_
  8312  001F8A  240F               	addwf	?___wmul,w,c
  8313  001F8C  6EF6               	movwf	tblptrl,c
  8314  001F8E  0E7D               	movlw	high __powers_
  8315  001F90  2010               	addwfc	?___wmul+1,w,c
  8316  001F92  6EF7               	movwf	tblptrh,c
  8317  001F94                     	if	0	;There are less than 3 active tblptr bytes
  8318  001F94                     	endif
  8319  001F94  0009               	tblrd		*+
  8320  001F96  CFF5 F015          	movff	tablat,___ftmul@f1
  8321  001F9A  0009               	tblrd		*+
  8322  001F9C  CFF5 F016          	movff	tablat,___ftmul@f1+1
  8323  001FA0  000A               	tblrd		*-
  8324  001FA2  CFF5 F017          	movff	tablat,___ftmul@f1+2
  8325  001FA6  0E00               	movlw	0
  8326  001FA8  6E12               	movwf	___wmul@multiplicand+1,c
  8327  001FAA  0E03               	movlw	3
  8328  001FAC  6E11               	movwf	___wmul@multiplicand,c
  8329  001FAE  0E00               	movlw	0
  8330  001FB0  6E04               	movwf	___awmod@divisor+1,c
  8331  001FB2  0E0A               	movlw	10
  8332  001FB4  6E03               	movwf	___awmod@divisor,c
  8333  001FB6  502A               	movf	scale@scl,w,c
  8334  001FB8  6E01               	movwf	___awmod@dividend,c
  8335  001FBA  6A02               	clrf	___awmod@dividend+1,c
  8336  001FBC  BE01               	btfsc	___awmod@dividend,7,c
  8337  001FBE  0602               	decf	___awmod@dividend+1,f,c
  8338  001FC0  ECF4  F01E         	call	___awmod	;wreg free
  8339  001FC4  C001  F00F         	movff	?___awmod,___wmul@multiplier
  8340  001FC8  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  8341  001FCC  ECD0  F022         	call	___wmul	;wreg free
  8342  001FD0  0E17               	movlw	low __powers_
  8343  001FD2  240F               	addwf	?___wmul,w,c
  8344  001FD4  6EF6               	movwf	tblptrl,c
  8345  001FD6  0E7D               	movlw	high __powers_
  8346  001FD8  2010               	addwfc	?___wmul+1,w,c
  8347  001FDA  6EF7               	movwf	tblptrh,c
  8348  001FDC                     	if	0	;There are less than 3 active tblptr bytes
  8349  001FDC                     	endif
  8350  001FDC  0009               	tblrd		*+
  8351  001FDE  CFF5 F018          	movff	tablat,___ftmul@f2
  8352  001FE2  0009               	tblrd		*+
  8353  001FE4  CFF5 F019          	movff	tablat,___ftmul@f2+1
  8354  001FE8  000A               	tblrd		*-
  8355  001FEA  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  8356  001FEE  EC61  F01B         	call	___ftmul	;wreg free
  8357  001FF2                     L18:
  8358  001FF2  C015  F024         	movff	?___ftmul,?_scale
  8359  001FF6  C016  F025         	movff	?___ftmul+1,?_scale+1
  8360  001FFA  C017  F026         	movff	?___ftmul+2,?_scale+2
  8361  001FFE  D011               	goto	i2l653
  8362  002000                     i2l4206:
  8363                           
  8364                           ;doprnt.c: 440: return _powers_[scl];
  8365  002000  502A               	movf	scale@scl,w,c
  8366  002002  0D03               	mullw	3
  8367  002004  0E17               	movlw	low __powers_
  8368  002006  24F3               	addwf	prodl,w,c
  8369  002008  6EF6               	movwf	tblptrl,c
  8370  00200A  0E7D               	movlw	high __powers_
  8371  00200C                     L17:
  8372  00200C  20F4               	addwfc	prodh,w,c
  8373  00200E  6EF7               	movwf	tblptrh,c
  8374  002010                     	if	0	;There are less than 3 active tblptr bytes
  8375  002010                     	endif
  8376  002010  0009               	tblrd		*+
  8377  002012  CFF5 F024          	movff	tablat,?_scale
  8378  002016  0009               	tblrd		*+
  8379  002018  CFF5 F025          	movff	tablat,?_scale+1
  8380  00201C  000A               	tblrd		*-
  8381  00201E  CFF5 F026          	movff	tablat,?_scale+2
  8382  002022                     i2l653:
  8383  002022  0012               	return	
  8384  002024                     __end_of_scale:
  8385                           	opt stack 0
  8386                           tosu	equ	0xFFF
  8387                           tosh	equ	0xFFE
  8388                           tosl	equ	0xFFD
  8389                           pclatu	equ	0xFFB
  8390                           pclath	equ	0xFFA
  8391                           tblptru	equ	0xFF8
  8392                           tblptrh	equ	0xFF7
  8393                           tblptrl	equ	0xFF6
  8394                           tablat	equ	0xFF5
  8395                           prodh	equ	0xFF4
  8396                           prodl	equ	0xFF3
  8397                           intcon	equ	0xFF2
  8398                           intcon2	equ	0xFF1
  8399                           indf0	equ	0xFEF
  8400                           postinc0	equ	0xFEE
  8401                           fsr0h	equ	0xFEA
  8402                           fsr0l	equ	0xFE9
  8403                           wreg	equ	0xFE8
  8404                           postinc1	equ	0xFE6
  8405                           postdec1	equ	0xFE5
  8406                           fsr1h	equ	0xFE2
  8407                           fsr1l	equ	0xFE1
  8408                           indf2	equ	0xFDF
  8409                           postinc2	equ	0xFDE
  8410                           postdec2	equ	0xFDD
  8411                           fsr2h	equ	0xFDA
  8412                           fsr2l	equ	0xFD9
  8413                           status	equ	0xFD8
  8414                           
  8415 ;; *************** function _isdigit *****************
  8416 ;; Defined at:
  8417 ;;		line 8 in file "/opt/microchip/xc8/v1.32/sources/common/isdigit.c"
  8418 ;; Parameters:    Size  Location     Type
  8419 ;;  c               1    wreg     unsigned char 
  8420 ;; Auto vars:     Size  Location     Type
  8421 ;;  c               1    2[COMRAM] unsigned char 
  8422 ;; Return value:  Size  Location     Type
  8423 ;;		None               void
  8424 ;; Registers used:
  8425 ;;		wreg, status,2, status,0
  8426 ;; Tracked objects:
  8427 ;;		On entry : 0/0
  8428 ;;		On exit  : 0/0
  8429 ;;		Unchanged: 0/0
  8430 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8431 ;;      Params:         0       0       0       0       0       0       0       0       0
  8432 ;;      Locals:         2       0       0       0       0       0       0       0       0
  8433 ;;      Temps:          1       0       0       0       0       0       0       0       0
  8434 ;;      Totals:         3       0       0       0       0       0       0       0       0
  8435 ;;Total ram usage:        3 bytes
  8436 ;; Hardware stack levels used:    1
  8437 ;; This function calls:
  8438 ;;		Nothing
  8439 ;; This function is called by:
  8440 ;;		_sprintf
  8441 ;; This function uses a non-reentrant model
  8442 ;;
  8443                           
  8444                           	psect	text21
  8445  0045EA                     __ptext21:
  8446                           	opt stack 0
  8447  0045EA                     _isdigit:
  8448                           	opt stack 23
  8449                           
  8450                           ;incstack = 0
  8451                           ;isdigit@c stored from wreg
  8452  0045EA  6E03               	movwf	isdigit@c,c
  8453  0045EC  0E00               	movlw	0
  8454  0045EE  6E02               	movwf	_isdigit$1032,c
  8455  0045F0  0E3A               	movlw	58
  8456  0045F2  5C03               	subwf	isdigit@c,w,c
  8457  0045F4  B0D8               	btfsc	status,0,c
  8458  0045F6  D005               	goto	i2l4218
  8459  0045F8  0E2F               	movlw	47
  8460  0045FA  6403               	cpfsgt	isdigit@c,c
  8461  0045FC  D002               	goto	i2l4218
  8462  0045FE  0E01               	movlw	1
  8463  004600  6E02               	movwf	_isdigit$1032,c
  8464  004602                     i2l4218:
  8465  004602  C002  F001         	movff	_isdigit$1032,??_isdigit
  8466  004606  3001               	rrcf	??_isdigit,w,c
  8467  004608  0012               	return	
  8468  00460A                     __end_of_isdigit:
  8469                           	opt stack 0
  8470                           tosu	equ	0xFFF
  8471                           tosh	equ	0xFFE
  8472                           tosl	equ	0xFFD
  8473                           pclatu	equ	0xFFB
  8474                           pclath	equ	0xFFA
  8475                           tblptru	equ	0xFF8
  8476                           tblptrh	equ	0xFF7
  8477                           tblptrl	equ	0xFF6
  8478                           tablat	equ	0xFF5
  8479                           prodh	equ	0xFF4
  8480                           prodl	equ	0xFF3
  8481                           intcon	equ	0xFF2
  8482                           intcon2	equ	0xFF1
  8483                           indf0	equ	0xFEF
  8484                           postinc0	equ	0xFEE
  8485                           fsr0h	equ	0xFEA
  8486                           fsr0l	equ	0xFE9
  8487                           wreg	equ	0xFE8
  8488                           postinc1	equ	0xFE6
  8489                           postdec1	equ	0xFE5
  8490                           fsr1h	equ	0xFE2
  8491                           fsr1l	equ	0xFE1
  8492                           indf2	equ	0xFDF
  8493                           postinc2	equ	0xFDE
  8494                           postdec2	equ	0xFDD
  8495                           fsr2h	equ	0xFDA
  8496                           fsr2l	equ	0xFD9
  8497                           status	equ	0xFD8
  8498                           
  8499 ;; *************** function _fround *****************
  8500 ;; Defined at:
  8501 ;;		line 409 in file "/opt/microchip/xc8/v1.32/sources/common/doprnt.c"
  8502 ;; Parameters:    Size  Location     Type
  8503 ;;  prec            1    wreg     unsigned char 
  8504 ;; Auto vars:     Size  Location     Type
  8505 ;;  prec            1   44[COMRAM] unsigned char 
  8506 ;; Return value:  Size  Location     Type
  8507 ;;                  3   35[COMRAM] unsigned char 
  8508 ;; Registers used:
  8509 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8510 ;; Tracked objects:
  8511 ;;		On entry : 0/0
  8512 ;;		On exit  : 0/0
  8513 ;;		Unchanged: 0/0
  8514 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8515 ;;      Params:         3       0       0       0       0       0       0       0       0
  8516 ;;      Locals:         7       0       0       0       0       0       0       0       0
  8517 ;;      Temps:          0       0       0       0       0       0       0       0       0
  8518 ;;      Totals:        10       0       0       0       0       0       0       0       0
  8519 ;;Total ram usage:       10 bytes
  8520 ;; Hardware stack levels used:    1
  8521 ;; Hardware stack levels required when called:    2
  8522 ;; This function calls:
  8523 ;;		___awdiv
  8524 ;;		___awmod
  8525 ;;		___ftmul
  8526 ;;		___wmul
  8527 ;; This function is called by:
  8528 ;;		_sprintf
  8529 ;; This function uses a non-reentrant model
  8530 ;;
  8531                           
  8532                           	psect	text22
  8533  002632                     __ptext22:
  8534                           	opt stack 0
  8535  002632                     _fround:
  8536                           	opt stack 21
  8537                           
  8538                           ;incstack = 0
  8539                           ;fround@prec stored from wreg
  8540  002632  6E2D               	movwf	fround@prec,c
  8541                           
  8542                           ;doprnt.c: 413: if(prec>=110)
  8543  002634  0E6D               	movlw	109
  8544  002636  642D               	cpfsgt	fround@prec,c
  8545  002638  D099               	goto	i2l4160
  8546                           
  8547                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  8548  00263A  0E00               	movlw	0
  8549  00263C  6E12               	movwf	___wmul@multiplicand+1,c
  8550  00263E  0E03               	movlw	3
  8551  002640  6E11               	movwf	___wmul@multiplicand,c
  8552  002642  0E00               	movlw	0
  8553  002644  6E0A               	movwf	___awdiv@divisor+1,c
  8554  002646  0E0A               	movlw	10
  8555  002648  6E09               	movwf	___awdiv@divisor,c
  8556  00264A  0E00               	movlw	0
  8557  00264C  6E04               	movwf	___awmod@divisor+1,c
  8558  00264E  0E64               	movlw	100
  8559  002650  6E03               	movwf	___awmod@divisor,c
  8560  002652  C02D  F001         	movff	fround@prec,___awmod@dividend
  8561  002656  6A02               	clrf	___awmod@dividend+1,c
  8562  002658  ECF4  F01E         	call	___awmod	;wreg free
  8563  00265C  C001  F007         	movff	?___awmod,___awdiv@dividend
  8564  002660  C002  F008         	movff	?___awmod+1,___awdiv@dividend+1
  8565  002664  ECC4  F01D         	call	___awdiv	;wreg free
  8566  002668  0E09               	movlw	9
  8567  00266A  2407               	addwf	?___awdiv,w,c
  8568  00266C  6E0F               	movwf	___wmul@multiplier,c
  8569  00266E  0E00               	movlw	0
  8570  002670  2008               	addwfc	?___awdiv+1,w,c
  8571  002672  6E10               	movwf	___wmul@multiplier+1,c
  8572  002674  ECD0  F022         	call	___wmul	;wreg free
  8573  002678  0EF0               	movlw	low __npowers_
  8574  00267A  240F               	addwf	?___wmul,w,c
  8575  00267C  6EF6               	movwf	tblptrl,c
  8576  00267E  0E7C               	movlw	high __npowers_
  8577  002680  2010               	addwfc	?___wmul+1,w,c
  8578  002682  6EF7               	movwf	tblptrh,c
  8579  002684                     	if	0	;There are less than 3 active tblptr bytes
  8580  002684                     	endif
  8581  002684  0009               	tblrd		*+
  8582  002686  CFF5 F018          	movff	tablat,___ftmul@f2
  8583  00268A  0009               	tblrd		*+
  8584  00268C  CFF5 F019          	movff	tablat,___ftmul@f2+1
  8585  002690  000A               	tblrd		*-
  8586  002692  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  8587  002696  0E00               	movlw	0
  8588  002698  6E0A               	movwf	___awdiv@divisor+1,c
  8589  00269A  0E64               	movlw	100
  8590  00269C  6E09               	movwf	___awdiv@divisor,c
  8591  00269E  C02D  F007         	movff	fround@prec,___awdiv@dividend
  8592  0026A2  6A08               	clrf	___awdiv@dividend+1,c
  8593  0026A4  ECC4  F01D         	call	___awdiv	;wreg free
  8594  0026A8  0E12               	movlw	18
  8595  0026AA  2407               	addwf	?___awdiv,w,c
  8596  0026AC  6E0F               	movwf	___wmul@multiplier,c
  8597  0026AE  0E00               	movlw	0
  8598  0026B0  2008               	addwfc	?___awdiv+1,w,c
  8599  0026B2  6E10               	movwf	___wmul@multiplier+1,c
  8600  0026B4  0E00               	movlw	0
  8601  0026B6  6E12               	movwf	___wmul@multiplicand+1,c
  8602  0026B8  0E03               	movlw	3
  8603  0026BA  6E11               	movwf	___wmul@multiplicand,c
  8604  0026BC  ECD0  F022         	call	___wmul	;wreg free
  8605  0026C0  0EF0               	movlw	low __npowers_
  8606  0026C2  240F               	addwf	?___wmul,w,c
  8607  0026C4  6EF6               	movwf	tblptrl,c
  8608  0026C6  0E7C               	movlw	high __npowers_
  8609  0026C8  2010               	addwfc	?___wmul+1,w,c
  8610  0026CA  6EF7               	movwf	tblptrh,c
  8611  0026CC                     	if	0	;There are less than 3 active tblptr bytes
  8612  0026CC                     	endif
  8613  0026CC  0009               	tblrd		*+
  8614  0026CE  CFF5 F015          	movff	tablat,___ftmul@f1
  8615  0026D2  0009               	tblrd		*+
  8616  0026D4  CFF5 F016          	movff	tablat,___ftmul@f1+1
  8617  0026D8  000A               	tblrd		*-
  8618  0026DA  CFF5 F017          	movff	tablat,___ftmul@f1+2
  8619  0026DE  EC61  F01B         	call	___ftmul	;wreg free
  8620  0026E2  C015  F02A         	movff	?___ftmul,_fround$1311
  8621  0026E6  C016  F02B         	movff	?___ftmul+1,_fround$1311+1
  8622  0026EA  C017  F02C         	movff	?___ftmul+2,_fround$1311+2
  8623                           
  8624                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  8625  0026EE  0E00               	movlw	0
  8626  0026F0  6E12               	movwf	___wmul@multiplicand+1,c
  8627  0026F2  0E03               	movlw	3
  8628  0026F4  6E11               	movwf	___wmul@multiplicand,c
  8629  0026F6  0E00               	movlw	0
  8630  0026F8  6E04               	movwf	___awmod@divisor+1,c
  8631  0026FA  0E0A               	movlw	10
  8632  0026FC  6E03               	movwf	___awmod@divisor,c
  8633  0026FE  C02D  F001         	movff	fround@prec,___awmod@dividend
  8634  002702  6A02               	clrf	___awmod@dividend+1,c
  8635  002704  ECF4  F01E         	call	___awmod	;wreg free
  8636  002708  C001  F00F         	movff	?___awmod,___wmul@multiplier
  8637  00270C  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  8638  002710  ECD0  F022         	call	___wmul	;wreg free
  8639  002714  0EF0               	movlw	low __npowers_
  8640  002716  240F               	addwf	?___wmul,w,c
  8641  002718  6EF6               	movwf	tblptrl,c
  8642  00271A  0E7C               	movlw	high __npowers_
  8643  00271C  2010               	addwfc	?___wmul+1,w,c
  8644  00271E  6EF7               	movwf	tblptrh,c
  8645  002720                     	if	0	;There are less than 3 active tblptr bytes
  8646  002720                     	endif
  8647  002720  0009               	tblrd		*+
  8648  002722  CFF5 F018          	movff	tablat,___ftmul@f2
  8649  002726  0009               	tblrd		*+
  8650  002728  CFF5 F019          	movff	tablat,___ftmul@f2+1
  8651  00272C  000A               	tblrd		*-
  8652  00272E  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  8653  002732  C02A  F015         	movff	_fround$1311,___ftmul@f1
  8654  002736  C02B  F016         	movff	_fround$1311+1,___ftmul@f1+1
  8655  00273A  C02C  F017         	movff	_fround$1311+2,___ftmul@f1+2
  8656  00273E  EC61  F01B         	call	___ftmul	;wreg free
  8657  002742  C015  F027         	movff	?___ftmul,_fround$1312
  8658  002746  C016  F028         	movff	?___ftmul+1,_fround$1312+1
  8659  00274A  C017  F029         	movff	?___ftmul+2,_fround$1312+2
  8660                           
  8661                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  8662  00274E  C027  F015         	movff	_fround$1312,___ftmul@f1
  8663  002752  C028  F016         	movff	_fround$1312+1,___ftmul@f1+1
  8664  002756  C029  F017         	movff	_fround$1312+2,___ftmul@f1+2
  8665  00275A  0E00               	movlw	0
  8666  00275C  6E18               	movwf	___ftmul@f2,c
  8667  00275E  0E00               	movlw	0
  8668  002760  6E19               	movwf	___ftmul@f2+1,c
  8669  002762  0E3F               	movlw	63
  8670  002764  6E1A               	movwf	___ftmul@f2+2,c
  8671  002766  EC61  F01B         	call	___ftmul	;wreg free
  8672  00276A  D079               	goto	L20
  8673  00276C                     i2l4160:
  8674                           
  8675                           ;doprnt.c: 415: else if(prec > 10)
  8676  00276C  0E0A               	movlw	10
  8677  00276E  642D               	cpfsgt	fround@prec,c
  8678  002770  D05D               	goto	i2l4168
  8679                           
  8680                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  8681  002772  0E00               	movlw	0
  8682  002774  6E12               	movwf	___wmul@multiplicand+1,c
  8683  002776  0E03               	movlw	3
  8684  002778  6E11               	movwf	___wmul@multiplicand,c
  8685  00277A  0E00               	movlw	0
  8686  00277C  6E04               	movwf	___awmod@divisor+1,c
  8687  00277E  0E0A               	movlw	10
  8688  002780  6E03               	movwf	___awmod@divisor,c
  8689  002782  C02D  F001         	movff	fround@prec,___awmod@dividend
  8690  002786  6A02               	clrf	___awmod@dividend+1,c
  8691  002788  ECF4  F01E         	call	___awmod	;wreg free
  8692  00278C  C001  F00F         	movff	?___awmod,___wmul@multiplier
  8693  002790  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  8694  002794  ECD0  F022         	call	___wmul	;wreg free
  8695  002798  0EF0               	movlw	low __npowers_
  8696  00279A  240F               	addwf	?___wmul,w,c
  8697  00279C  6EF6               	movwf	tblptrl,c
  8698  00279E  0E7C               	movlw	high __npowers_
  8699  0027A0  2010               	addwfc	?___wmul+1,w,c
  8700  0027A2  6EF7               	movwf	tblptrh,c
  8701  0027A4                     	if	0	;There are less than 3 active tblptr bytes
  8702  0027A4                     	endif
  8703  0027A4  0009               	tblrd		*+
  8704  0027A6  CFF5 F018          	movff	tablat,___ftmul@f2
  8705  0027AA  0009               	tblrd		*+
  8706  0027AC  CFF5 F019          	movff	tablat,___ftmul@f2+1
  8707  0027B0  000A               	tblrd		*-
  8708  0027B2  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  8709  0027B6  0E00               	movlw	0
  8710  0027B8  6E0A               	movwf	___awdiv@divisor+1,c
  8711  0027BA  0E0A               	movlw	10
  8712  0027BC  6E09               	movwf	___awdiv@divisor,c
  8713  0027BE  C02D  F007         	movff	fround@prec,___awdiv@dividend
  8714  0027C2  6A08               	clrf	___awdiv@dividend+1,c
  8715  0027C4  ECC4  F01D         	call	___awdiv	;wreg free
  8716  0027C8  0E09               	movlw	9
  8717  0027CA  2407               	addwf	?___awdiv,w,c
  8718  0027CC  6E0F               	movwf	___wmul@multiplier,c
  8719  0027CE  0E00               	movlw	0
  8720  0027D0  2008               	addwfc	?___awdiv+1,w,c
  8721  0027D2  6E10               	movwf	___wmul@multiplier+1,c
  8722  0027D4  0E00               	movlw	0
  8723  0027D6  6E12               	movwf	___wmul@multiplicand+1,c
  8724  0027D8  0E03               	movlw	3
  8725  0027DA  6E11               	movwf	___wmul@multiplicand,c
  8726  0027DC  ECD0  F022         	call	___wmul	;wreg free
  8727  0027E0  0EF0               	movlw	low __npowers_
  8728  0027E2  240F               	addwf	?___wmul,w,c
  8729  0027E4  6EF6               	movwf	tblptrl,c
  8730  0027E6  0E7C               	movlw	high __npowers_
  8731  0027E8  2010               	addwfc	?___wmul+1,w,c
  8732  0027EA  6EF7               	movwf	tblptrh,c
  8733  0027EC                     	if	0	;There are less than 3 active tblptr bytes
  8734  0027EC                     	endif
  8735  0027EC  0009               	tblrd		*+
  8736  0027EE  CFF5 F015          	movff	tablat,___ftmul@f1
  8737  0027F2  0009               	tblrd		*+
  8738  0027F4  CFF5 F016          	movff	tablat,___ftmul@f1+1
  8739  0027F8  000A               	tblrd		*-
  8740  0027FA  CFF5 F017          	movff	tablat,___ftmul@f1+2
  8741  0027FE  EC61  F01B         	call	___ftmul	;wreg free
  8742  002802  C015  F02A         	movff	?___ftmul,_fround$1311
  8743  002806  C016  F02B         	movff	?___ftmul+1,_fround$1311+1
  8744  00280A  C017  F02C         	movff	?___ftmul+2,_fround$1311+2
  8745                           
  8746                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  8747  00280E  C02A  F015         	movff	_fround$1311,___ftmul@f1
  8748  002812  C02B  F016         	movff	_fround$1311+1,___ftmul@f1+1
  8749  002816  C02C  F017         	movff	_fround$1311+2,___ftmul@f1+2
  8750  00281A  0E00               	movlw	0
  8751  00281C  6E18               	movwf	___ftmul@f2,c
  8752  00281E  0E00               	movlw	0
  8753  002820  6E19               	movwf	___ftmul@f2+1,c
  8754  002822  0E3F               	movlw	63
  8755  002824  6E1A               	movwf	___ftmul@f2+2,c
  8756  002826  EC61  F01B         	call	___ftmul	;wreg free
  8757  00282A  D019               	goto	L20
  8758  00282C                     i2l4168:
  8759                           
  8760                           ;doprnt.c: 417: return 0.5 * _npowers_[prec];
  8761  00282C  502D               	movf	fround@prec,w,c
  8762  00282E  0D03               	mullw	3
  8763  002830  0EF0               	movlw	low __npowers_
  8764  002832  24F3               	addwf	prodl,w,c
  8765  002834  6EF6               	movwf	tblptrl,c
  8766  002836  0E7C               	movlw	high __npowers_
  8767  002838  20F4               	addwfc	prodh,w,c
  8768  00283A  6EF7               	movwf	tblptrh,c
  8769  00283C                     	if	0	;There are less than 3 active tblptr bytes
  8770  00283C                     	endif
  8771  00283C  0009               	tblrd		*+
  8772  00283E  CFF5 F015          	movff	tablat,___ftmul@f1
  8773  002842  0009               	tblrd		*+
  8774  002844  CFF5 F016          	movff	tablat,___ftmul@f1+1
  8775  002848  000A               	tblrd		*-
  8776  00284A  CFF5 F017          	movff	tablat,___ftmul@f1+2
  8777  00284E  0E00               	movlw	0
  8778  002850  6E18               	movwf	___ftmul@f2,c
  8779  002852  0E00               	movlw	0
  8780  002854  6E19               	movwf	___ftmul@f2+1,c
  8781  002856  0E3F               	movlw	63
  8782  002858  6E1A               	movwf	___ftmul@f2+2,c
  8783  00285A  EC61  F01B         	call	___ftmul	;wreg free
  8784  00285E                     L20:
  8785  00285E  C015  F024         	movff	?___ftmul,?_fround
  8786  002862  C016  F025         	movff	?___ftmul+1,?_fround+1
  8787  002866  C017  F026         	movff	?___ftmul+2,?_fround+2
  8788  00286A  0012               	return	
  8789  00286C                     __end_of_fround:
  8790                           	opt stack 0
  8791                           tosu	equ	0xFFF
  8792                           tosh	equ	0xFFE
  8793                           tosl	equ	0xFFD
  8794                           pclatu	equ	0xFFB
  8795                           pclath	equ	0xFFA
  8796                           tblptru	equ	0xFF8
  8797                           tblptrh	equ	0xFF7
  8798                           tblptrl	equ	0xFF6
  8799                           tablat	equ	0xFF5
  8800                           prodh	equ	0xFF4
  8801                           prodl	equ	0xFF3
  8802                           intcon	equ	0xFF2
  8803                           intcon2	equ	0xFF1
  8804                           indf0	equ	0xFEF
  8805                           postinc0	equ	0xFEE
  8806                           fsr0h	equ	0xFEA
  8807                           fsr0l	equ	0xFE9
  8808                           wreg	equ	0xFE8
  8809                           postinc1	equ	0xFE6
  8810                           postdec1	equ	0xFE5
  8811                           fsr1h	equ	0xFE2
  8812                           fsr1l	equ	0xFE1
  8813                           indf2	equ	0xFDF
  8814                           postinc2	equ	0xFDE
  8815                           postdec2	equ	0xFDD
  8816                           fsr2h	equ	0xFDA
  8817                           fsr2l	equ	0xFD9
  8818                           status	equ	0xFD8
  8819                           
  8820 ;; *************** function __tdiv_to_l_ *****************
  8821 ;; Defined at:
  8822 ;;		line 60 in file "/opt/microchip/xc8/v1.32/sources/common/ftdivl.c"
  8823 ;; Parameters:    Size  Location     Type
  8824 ;;  f1              3    0[COMRAM] float 
  8825 ;;  f2              3    3[COMRAM] float 
  8826 ;; Auto vars:     Size  Location     Type
  8827 ;;  quot            4    9[COMRAM] unsigned long 
  8828 ;;  exp1            1   14[COMRAM] unsigned char 
  8829 ;;  cntr            1   13[COMRAM] unsigned char 
  8830 ;; Return value:  Size  Location     Type
  8831 ;;                  4    0[COMRAM] unsigned long 
  8832 ;; Registers used:
  8833 ;;		wreg, status,2, status,0
  8834 ;; Tracked objects:
  8835 ;;		On entry : 0/0
  8836 ;;		On exit  : 0/0
  8837 ;;		Unchanged: 0/0
  8838 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8839 ;;      Params:         6       0       0       0       0       0       0       0       0
  8840 ;;      Locals:         6       0       0       0       0       0       0       0       0
  8841 ;;      Temps:          3       0       0       0       0       0       0       0       0
  8842 ;;      Totals:        15       0       0       0       0       0       0       0       0
  8843 ;;Total ram usage:       15 bytes
  8844 ;; Hardware stack levels used:    1
  8845 ;; This function calls:
  8846 ;;		Nothing
  8847 ;; This function is called by:
  8848 ;;		_sprintf
  8849 ;; This function uses a non-reentrant model
  8850 ;;
  8851                           
  8852                           	psect	text23
  8853  0032F4                     __ptext23:
  8854                           	opt stack 0
  8855  0032F4                     __tdiv_to_l_:
  8856                           	opt stack 23
  8857                           
  8858                           ;incstack = 0
  8859  0032F4  C003  F007         	movff	__tdiv_to_l_@f1+2,??__tdiv_to_l_
  8860  0032F8  6A08               	clrf	(??__tdiv_to_l_+1)& (0+255),c
  8861  0032FA  6A09               	clrf	(??__tdiv_to_l_+2)& (0+255),c
  8862  0032FC  3402               	rlcf	__tdiv_to_l_@f1+1,w,c
  8863  0032FE  3607               	rlcf	??__tdiv_to_l_& (0+255),f,c
  8864  003300  E301               	bnc	u407_41
  8865  003302  8008               	bsf	(??__tdiv_to_l_+1)& (0+255),0,c
  8866  003304                     u407_41:
  8867  003304  5007               	movf	??__tdiv_to_l_,w,c
  8868  003306  6E0F               	movwf	__tdiv_to_l_@exp1,c
  8869  003308  660F               	tstfsz	__tdiv_to_l_@exp1& (0+255),c
  8870  00330A  D001               	goto	i2l4228
  8871  00330C  D059               	goto	i2u414_40
  8872  00330E                     i2l4228:
  8873  00330E  C006  F007         	movff	__tdiv_to_l_@f2+2,??__tdiv_to_l_
  8874  003312  6A08               	clrf	(??__tdiv_to_l_+1)& (0+255),c
  8875  003314  6A09               	clrf	(??__tdiv_to_l_+2)& (0+255),c
  8876  003316  3405               	rlcf	__tdiv_to_l_@f2+1,w,c
  8877  003318  3607               	rlcf	??__tdiv_to_l_& (0+255),f,c
  8878  00331A  E301               	bnc	u409_41
  8879  00331C  8008               	bsf	(??__tdiv_to_l_+1)& (0+255),0,c
  8880  00331E                     u409_41:
  8881  00331E  5007               	movf	??__tdiv_to_l_,w,c
  8882  003320  6E0E               	movwf	__tdiv_to_l_@cntr,c
  8883  003322  660E               	tstfsz	__tdiv_to_l_@cntr& (0+255),c
  8884  003324  D001               	goto	i2l4234
  8885  003326  D04C               	goto	i2u414_40
  8886  003328                     i2l4234:
  8887  003328  8E02               	bsf	__tdiv_to_l_@f1+1,7,c
  8888  00332A  0EFF               	movlw	255
  8889  00332C  1601               	andwf	__tdiv_to_l_@f1,f,c
  8890  00332E  0EFF               	movlw	255
  8891  003330  1602               	andwf	__tdiv_to_l_@f1+1,f,c
  8892  003332  0E00               	movlw	0
  8893  003334  1603               	andwf	__tdiv_to_l_@f1+2,f,c
  8894  003336  8E05               	bsf	__tdiv_to_l_@f2+1,7,c
  8895  003338  0EFF               	movlw	255
  8896  00333A  1604               	andwf	__tdiv_to_l_@f2,f,c
  8897  00333C  0EFF               	movlw	255
  8898  00333E  1605               	andwf	__tdiv_to_l_@f2+1,f,c
  8899  003340  0E00               	movlw	0
  8900  003342  1606               	andwf	__tdiv_to_l_@f2+2,f,c
  8901  003344  0E00               	movlw	0
  8902  003346  6E0A               	movwf	__tdiv_to_l_@quot,c
  8903  003348  0E00               	movlw	0
  8904  00334A  6E0B               	movwf	__tdiv_to_l_@quot+1,c
  8905  00334C  0E00               	movlw	0
  8906  00334E  6E0C               	movwf	__tdiv_to_l_@quot+2,c
  8907  003350  0E00               	movlw	0
  8908  003352  6E0D               	movwf	__tdiv_to_l_@quot+3,c
  8909  003354  0E7F               	movlw	127
  8910  003356  5E0F               	subwf	__tdiv_to_l_@exp1,f,c
  8911  003358  500E               	movf	__tdiv_to_l_@cntr,w,c
  8912  00335A  0F98               	addlw	152
  8913  00335C  5E0F               	subwf	__tdiv_to_l_@exp1,f,c
  8914  00335E  0E18               	movlw	24
  8915  003360  6E0E               	movwf	__tdiv_to_l_@cntr,c
  8916  003362                     i2l1192:
  8917  003362  90D8               	bcf	status,0,c
  8918  003364  360A               	rlcf	__tdiv_to_l_@quot,f,c
  8919  003366  360B               	rlcf	__tdiv_to_l_@quot+1,f,c
  8920  003368  360C               	rlcf	__tdiv_to_l_@quot+2,f,c
  8921  00336A  360D               	rlcf	__tdiv_to_l_@quot+3,f,c
  8922  00336C  5004               	movf	__tdiv_to_l_@f2,w,c
  8923  00336E  5C01               	subwf	__tdiv_to_l_@f1,w,c
  8924  003370  5005               	movf	__tdiv_to_l_@f2+1,w,c
  8925  003372  5802               	subwfb	__tdiv_to_l_@f1+1,w,c
  8926  003374  5006               	movf	__tdiv_to_l_@f2+2,w,c
  8927  003376  5803               	subwfb	__tdiv_to_l_@f1+2,w,c
  8928  003378  A0D8               	btfss	status,0,c
  8929  00337A  D007               	goto	i2l1193
  8930  00337C  5004               	movf	__tdiv_to_l_@f2,w,c
  8931  00337E  5E01               	subwf	__tdiv_to_l_@f1,f,c
  8932  003380  5005               	movf	__tdiv_to_l_@f2+1,w,c
  8933  003382  5A02               	subwfb	__tdiv_to_l_@f1+1,f,c
  8934  003384  5006               	movf	__tdiv_to_l_@f2+2,w,c
  8935  003386  5A03               	subwfb	__tdiv_to_l_@f1+2,f,c
  8936  003388  800A               	bsf	__tdiv_to_l_@quot,0,c
  8937  00338A                     i2l1193:
  8938  00338A  90D8               	bcf	status,0,c
  8939  00338C  3601               	rlcf	__tdiv_to_l_@f1,f,c
  8940  00338E  3602               	rlcf	__tdiv_to_l_@f1+1,f,c
  8941  003390  3603               	rlcf	__tdiv_to_l_@f1+2,f,c
  8942  003392  2E0E               	decfsz	__tdiv_to_l_@cntr,f,c
  8943  003394  D7E6               	goto	i2l1192
  8944  003396  AE0F               	btfss	__tdiv_to_l_@exp1,7,c
  8945  003398  D010               	goto	i2l4266
  8946  00339A  500F               	movf	__tdiv_to_l_@exp1,w,c
  8947  00339C  0A80               	xorlw	128
  8948  00339E  6E07               	movwf	??__tdiv_to_l_& (0+255),c
  8949  0033A0  0EE9               	movlw	233
  8950  0033A2  0A80               	xorlw	128
  8951  0033A4  5C07               	subwf	??__tdiv_to_l_,w,c
  8952  0033A6  A0D8               	btfss	status,0,c
  8953  0033A8  D00B               	goto	i2u414_40
  8954  0033AA                     i2l4262:
  8955  0033AA  90D8               	bcf	status,0,c
  8956  0033AC  320D               	rrcf	__tdiv_to_l_@quot+3,f,c
  8957  0033AE  320C               	rrcf	__tdiv_to_l_@quot+2,f,c
  8958  0033B0  320B               	rrcf	__tdiv_to_l_@quot+1,f,c
  8959  0033B2  320A               	rrcf	__tdiv_to_l_@quot,f,c
  8960  0033B4  3E0F               	incfsz	__tdiv_to_l_@exp1,f,c
  8961  0033B6  D7F9               	goto	i2l4262
  8962  0033B8  D014               	goto	i2l1199
  8963  0033BA                     i2l4266:
  8964  0033BA  0E17               	movlw	23
  8965  0033BC  640F               	cpfsgt	__tdiv_to_l_@exp1,c
  8966  0033BE  D00F               	goto	i2l4274
  8967  0033C0                     i2u414_40:
  8968  0033C0  0E00               	movlw	0
  8969  0033C2  6E01               	movwf	?__tdiv_to_l_,c
  8970  0033C4  0E00               	movlw	0
  8971  0033C6  6E02               	movwf	?__tdiv_to_l_+1,c
  8972  0033C8  0E00               	movlw	0
  8973  0033CA  6E03               	movwf	?__tdiv_to_l_+2,c
  8974  0033CC  0E00               	movlw	0
  8975  0033CE  6E04               	movwf	?__tdiv_to_l_+3,c
  8976  0033D0  D010               	goto	i2l1190
  8977  0033D2                     i2l4272:
  8978  0033D2  90D8               	bcf	status,0,c
  8979  0033D4  360A               	rlcf	__tdiv_to_l_@quot,f,c
  8980  0033D6  360B               	rlcf	__tdiv_to_l_@quot+1,f,c
  8981  0033D8  360C               	rlcf	__tdiv_to_l_@quot+2,f,c
  8982  0033DA  360D               	rlcf	__tdiv_to_l_@quot+3,f,c
  8983  0033DC  060F               	decf	__tdiv_to_l_@exp1,f,c
  8984  0033DE                     i2l4274:
  8985  0033DE  660F               	tstfsz	__tdiv_to_l_@exp1,c
  8986  0033E0  D7F8               	goto	i2l4272
  8987  0033E2                     i2l1199:
  8988  0033E2  C00A  F001         	movff	__tdiv_to_l_@quot,?__tdiv_to_l_
  8989  0033E6  C00B  F002         	movff	__tdiv_to_l_@quot+1,?__tdiv_to_l_+1
  8990  0033EA  C00C  F003         	movff	__tdiv_to_l_@quot+2,?__tdiv_to_l_+2
  8991  0033EE  C00D  F004         	movff	__tdiv_to_l_@quot+3,?__tdiv_to_l_+3
  8992  0033F2                     i2l1190:
  8993  0033F2  0012               	return	
  8994  0033F4                     __end_of__tdiv_to_l_:
  8995                           	opt stack 0
  8996                           tosu	equ	0xFFF
  8997                           tosh	equ	0xFFE
  8998                           tosl	equ	0xFFD
  8999                           pclatu	equ	0xFFB
  9000                           pclath	equ	0xFFA
  9001                           tblptru	equ	0xFF8
  9002                           tblptrh	equ	0xFF7
  9003                           tblptrl	equ	0xFF6
  9004                           tablat	equ	0xFF5
  9005                           prodh	equ	0xFF4
  9006                           prodl	equ	0xFF3
  9007                           intcon	equ	0xFF2
  9008                           intcon2	equ	0xFF1
  9009                           indf0	equ	0xFEF
  9010                           postinc0	equ	0xFEE
  9011                           fsr0h	equ	0xFEA
  9012                           fsr0l	equ	0xFE9
  9013                           wreg	equ	0xFE8
  9014                           postinc1	equ	0xFE6
  9015                           postdec1	equ	0xFE5
  9016                           fsr1h	equ	0xFE2
  9017                           fsr1l	equ	0xFE1
  9018                           indf2	equ	0xFDF
  9019                           postinc2	equ	0xFDE
  9020                           postdec2	equ	0xFDD
  9021                           fsr2h	equ	0xFDA
  9022                           fsr2l	equ	0xFD9
  9023                           status	equ	0xFD8
  9024                           
  9025 ;; *************** function __div_to_l_ *****************
  9026 ;; Defined at:
  9027 ;;		line 60 in file "/opt/microchip/xc8/v1.32/sources/common/fldivl.c"
  9028 ;; Parameters:    Size  Location     Type
  9029 ;;  f1              3    0[COMRAM] unsigned long 
  9030 ;;  f2              3    3[COMRAM] unsigned long 
  9031 ;; Auto vars:     Size  Location     Type
  9032 ;;  quot            4   10[COMRAM] unsigned long 
  9033 ;;  exp1            1   15[COMRAM] unsigned char 
  9034 ;;  cntr            1   14[COMRAM] unsigned char 
  9035 ;; Return value:  Size  Location     Type
  9036 ;;                  4    0[COMRAM] unsigned long 
  9037 ;; Registers used:
  9038 ;;		wreg, status,2, status,0
  9039 ;; Tracked objects:
  9040 ;;		On entry : 0/0
  9041 ;;		On exit  : 0/0
  9042 ;;		Unchanged: 0/0
  9043 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9044 ;;      Params:         6       0       0       0       0       0       0       0       0
  9045 ;;      Locals:         6       0       0       0       0       0       0       0       0
  9046 ;;      Temps:          4       0       0       0       0       0       0       0       0
  9047 ;;      Totals:        16       0       0       0       0       0       0       0       0
  9048 ;;Total ram usage:       16 bytes
  9049 ;; Hardware stack levels used:    1
  9050 ;; This function calls:
  9051 ;;		Nothing
  9052 ;; This function is called by:
  9053 ;;		_sprintf
  9054 ;; This function uses a non-reentrant model
  9055 ;;
  9056                           
  9057                           	psect	text24
  9058  0031BE                     __ptext24:
  9059                           	opt stack 0
  9060  0031BE                     __div_to_l_:
  9061                           	opt stack 23
  9062                           
  9063                           ;incstack = 0
  9064  0031BE  C001  F007         	movff	__div_to_l_@f1,??__div_to_l_
  9065  0031C2  C002  F008         	movff	__div_to_l_@f1+1,??__div_to_l_+1
  9066  0031C6  C003  F009         	movff	__div_to_l_@f1+2,??__div_to_l_+2
  9067  0031CA  C004  F00A         	movff	__div_to_l_@f1+3,??__div_to_l_+3
  9068  0031CE  0E18               	movlw	24
  9069  0031D0  D005               	goto	i2u416_40
  9070  0031D2                     i2u416_45:
  9071  0031D2  90D8               	bcf	status,0,c
  9072  0031D4  320A               	rrcf	??__div_to_l_+3,f,c
  9073  0031D6  3209               	rrcf	??__div_to_l_+2,f,c
  9074  0031D8  3208               	rrcf	??__div_to_l_+1,f,c
  9075  0031DA  3207               	rrcf	??__div_to_l_,f,c
  9076  0031DC                     i2u416_40:
  9077  0031DC  2EE8               	decfsz	wreg,f,c
  9078  0031DE  D7F9               	goto	i2u416_45
  9079  0031E0  5007               	movf	??__div_to_l_,w,c
  9080  0031E2  6E10               	movwf	__div_to_l_@exp1,c
  9081  0031E4  6610               	tstfsz	__div_to_l_@exp1& (0+255),c
  9082  0031E6  D001               	goto	i2l4282
  9083  0031E8  D06B               	goto	i2u423_40
  9084  0031EA                     i2l4282:
  9085  0031EA  C004  F007         	movff	__div_to_l_@f2,??__div_to_l_
  9086  0031EE  C005  F008         	movff	__div_to_l_@f2+1,??__div_to_l_+1
  9087  0031F2  C006  F009         	movff	__div_to_l_@f2+2,??__div_to_l_+2
  9088  0031F6  C007  F00A         	movff	__div_to_l_@f2+3,??__div_to_l_+3
  9089  0031FA  0E18               	movlw	24
  9090  0031FC  D005               	goto	i2u418_40
  9091  0031FE                     i2u418_45:
  9092  0031FE  90D8               	bcf	status,0,c
  9093  003200  320A               	rrcf	??__div_to_l_+3,f,c
  9094  003202  3209               	rrcf	??__div_to_l_+2,f,c
  9095  003204  3208               	rrcf	??__div_to_l_+1,f,c
  9096  003206  3207               	rrcf	??__div_to_l_,f,c
  9097  003208                     i2u418_40:
  9098  003208  2EE8               	decfsz	wreg,f,c
  9099  00320A  D7F9               	goto	i2u418_45
  9100  00320C  5007               	movf	??__div_to_l_,w,c
  9101  00320E  6E0F               	movwf	__div_to_l_@cntr,c
  9102  003210  660F               	tstfsz	__div_to_l_@cntr& (0+255),c
  9103  003212  D001               	goto	i2l4288
  9104  003214  D055               	goto	i2u423_40
  9105  003216                     i2l4288:
  9106  003216  8E03               	bsf	__div_to_l_@f1+2,7,c
  9107  003218  0EFF               	movlw	255
  9108  00321A  1601               	andwf	__div_to_l_@f1,f,c
  9109  00321C  0EFF               	movlw	255
  9110  00321E  1602               	andwf	__div_to_l_@f1+1,f,c
  9111  003220  0EFF               	movlw	255
  9112  003222  1603               	andwf	__div_to_l_@f1+2,f,c
  9113  003224  0E00               	movlw	0
  9114  003226  1604               	andwf	__div_to_l_@f1+3,f,c
  9115  003228  8E06               	bsf	__div_to_l_@f2+2,7,c
  9116  00322A  0EFF               	movlw	255
  9117  00322C  1604               	andwf	__div_to_l_@f2,f,c
  9118  00322E  0EFF               	movlw	255
  9119  003230  1605               	andwf	__div_to_l_@f2+1,f,c
  9120  003232  0EFF               	movlw	255
  9121  003234  1606               	andwf	__div_to_l_@f2+2,f,c
  9122  003236  0E00               	movlw	0
  9123  003238  1607               	andwf	__div_to_l_@f2+3,f,c
  9124  00323A  0E00               	movlw	0
  9125  00323C  6E0B               	movwf	__div_to_l_@quot,c
  9126  00323E  0E00               	movlw	0
  9127  003240  6E0C               	movwf	__div_to_l_@quot+1,c
  9128  003242  0E00               	movlw	0
  9129  003244  6E0D               	movwf	__div_to_l_@quot+2,c
  9130  003246  0E00               	movlw	0
  9131  003248  6E0E               	movwf	__div_to_l_@quot+3,c
  9132  00324A  0E7F               	movlw	127
  9133  00324C  5E10               	subwf	__div_to_l_@exp1,f,c
  9134  00324E  500F               	movf	__div_to_l_@cntr,w,c
  9135  003250  0FA0               	addlw	160
  9136  003252  5E10               	subwf	__div_to_l_@exp1,f,c
  9137  003254  0E20               	movlw	32
  9138  003256  6E0F               	movwf	__div_to_l_@cntr,c
  9139  003258                     i2l4302:
  9140  003258  90D8               	bcf	status,0,c
  9141  00325A  360B               	rlcf	__div_to_l_@quot,f,c
  9142  00325C  360C               	rlcf	__div_to_l_@quot+1,f,c
  9143  00325E  360D               	rlcf	__div_to_l_@quot+2,f,c
  9144  003260  360E               	rlcf	__div_to_l_@quot+3,f,c
  9145  003262  5004               	movf	__div_to_l_@f2,w,c
  9146  003264  5C01               	subwf	__div_to_l_@f1,w,c
  9147  003266  5005               	movf	__div_to_l_@f2+1,w,c
  9148  003268  5802               	subwfb	__div_to_l_@f1+1,w,c
  9149  00326A  5006               	movf	__div_to_l_@f2+2,w,c
  9150  00326C  5803               	subwfb	__div_to_l_@f1+2,w,c
  9151  00326E  5007               	movf	__div_to_l_@f2+3,w,c
  9152  003270  5804               	subwfb	__div_to_l_@f1+3,w,c
  9153  003272  A0D8               	btfss	status,0,c
  9154  003274  D009               	goto	i2l4310
  9155  003276  5004               	movf	__div_to_l_@f2,w,c
  9156  003278  5E01               	subwf	__div_to_l_@f1,f,c
  9157  00327A  5005               	movf	__div_to_l_@f2+1,w,c
  9158  00327C  5A02               	subwfb	__div_to_l_@f1+1,f,c
  9159  00327E  5006               	movf	__div_to_l_@f2+2,w,c
  9160  003280  5A03               	subwfb	__div_to_l_@f1+2,f,c
  9161  003282  5007               	movf	__div_to_l_@f2+3,w,c
  9162  003284  5A04               	subwfb	__div_to_l_@f1+3,f,c
  9163  003286  800B               	bsf	__div_to_l_@quot,0,c
  9164  003288                     i2l4310:
  9165  003288  90D8               	bcf	status,0,c
  9166  00328A  3601               	rlcf	__div_to_l_@f1,f,c
  9167  00328C  3602               	rlcf	__div_to_l_@f1+1,f,c
  9168  00328E  3603               	rlcf	__div_to_l_@f1+2,f,c
  9169  003290  3604               	rlcf	__div_to_l_@f1+3,f,c
  9170  003292  2E0F               	decfsz	__div_to_l_@cntr,f,c
  9171  003294  D7E1               	goto	i2l4302
  9172  003296  AE10               	btfss	__div_to_l_@exp1,7,c
  9173  003298  D010               	goto	i2l4324
  9174  00329A  5010               	movf	__div_to_l_@exp1,w,c
  9175  00329C  0A80               	xorlw	128
  9176  00329E  6E07               	movwf	??__div_to_l_& (0+255),c
  9177  0032A0  0EE1               	movlw	225
  9178  0032A2  0A80               	xorlw	128
  9179  0032A4  5C07               	subwf	??__div_to_l_,w,c
  9180  0032A6  A0D8               	btfss	status,0,c
  9181  0032A8  D00B               	goto	i2u423_40
  9182  0032AA                     i2l4320:
  9183  0032AA  90D8               	bcf	status,0,c
  9184  0032AC  320E               	rrcf	__div_to_l_@quot+3,f,c
  9185  0032AE  320D               	rrcf	__div_to_l_@quot+2,f,c
  9186  0032B0  320C               	rrcf	__div_to_l_@quot+1,f,c
  9187  0032B2  320B               	rrcf	__div_to_l_@quot,f,c
  9188  0032B4  3E10               	incfsz	__div_to_l_@exp1,f,c
  9189  0032B6  D7F9               	goto	i2l4320
  9190  0032B8  D014               	goto	i2l1081
  9191  0032BA                     i2l4324:
  9192  0032BA  0E1F               	movlw	31
  9193  0032BC  6410               	cpfsgt	__div_to_l_@exp1,c
  9194  0032BE  D00F               	goto	i2l4332
  9195  0032C0                     i2u423_40:
  9196  0032C0  0E00               	movlw	0
  9197  0032C2  6E01               	movwf	?__div_to_l_,c
  9198  0032C4  0E00               	movlw	0
  9199  0032C6  6E02               	movwf	?__div_to_l_+1,c
  9200  0032C8  0E00               	movlw	0
  9201  0032CA  6E03               	movwf	?__div_to_l_+2,c
  9202  0032CC  0E00               	movlw	0
  9203  0032CE  6E04               	movwf	?__div_to_l_+3,c
  9204  0032D0  D010               	goto	i2l1072
  9205  0032D2                     i2l4330:
  9206  0032D2  90D8               	bcf	status,0,c
  9207  0032D4  360B               	rlcf	__div_to_l_@quot,f,c
  9208  0032D6  360C               	rlcf	__div_to_l_@quot+1,f,c
  9209  0032D8  360D               	rlcf	__div_to_l_@quot+2,f,c
  9210  0032DA  360E               	rlcf	__div_to_l_@quot+3,f,c
  9211  0032DC  0610               	decf	__div_to_l_@exp1,f,c
  9212  0032DE                     i2l4332:
  9213  0032DE  6610               	tstfsz	__div_to_l_@exp1,c
  9214  0032E0  D7F8               	goto	i2l4330
  9215  0032E2                     i2l1081:
  9216  0032E2  C00B  F001         	movff	__div_to_l_@quot,?__div_to_l_
  9217  0032E6  C00C  F002         	movff	__div_to_l_@quot+1,?__div_to_l_+1
  9218  0032EA  C00D  F003         	movff	__div_to_l_@quot+2,?__div_to_l_+2
  9219  0032EE  C00E  F004         	movff	__div_to_l_@quot+3,?__div_to_l_+3
  9220  0032F2                     i2l1072:
  9221  0032F2  0012               	return	
  9222  0032F4                     __end_of__div_to_l_:
  9223                           	opt stack 0
  9224                           tosu	equ	0xFFF
  9225                           tosh	equ	0xFFE
  9226                           tosl	equ	0xFFD
  9227                           pclatu	equ	0xFFB
  9228                           pclath	equ	0xFFA
  9229                           tblptru	equ	0xFF8
  9230                           tblptrh	equ	0xFF7
  9231                           tblptrl	equ	0xFF6
  9232                           tablat	equ	0xFF5
  9233                           prodh	equ	0xFF4
  9234                           prodl	equ	0xFF3
  9235                           intcon	equ	0xFF2
  9236                           intcon2	equ	0xFF1
  9237                           indf0	equ	0xFEF
  9238                           postinc0	equ	0xFEE
  9239                           fsr0h	equ	0xFEA
  9240                           fsr0l	equ	0xFE9
  9241                           wreg	equ	0xFE8
  9242                           postinc1	equ	0xFE6
  9243                           postdec1	equ	0xFE5
  9244                           fsr1h	equ	0xFE2
  9245                           fsr1l	equ	0xFE1
  9246                           indf2	equ	0xFDF
  9247                           postinc2	equ	0xFDE
  9248                           postdec2	equ	0xFDD
  9249                           fsr2h	equ	0xFDA
  9250                           fsr2l	equ	0xFD9
  9251                           status	equ	0xFD8
  9252                           
  9253 ;; *************** function ___lltoft *****************
  9254 ;; Defined at:
  9255 ;;		line 35 in file "/opt/microchip/xc8/v1.32/sources/common/lltoft.c"
  9256 ;; Parameters:    Size  Location     Type
  9257 ;;  c               4    8[COMRAM] unsigned long 
  9258 ;; Auto vars:     Size  Location     Type
  9259 ;;  exp             1   16[COMRAM] unsigned char 
  9260 ;; Return value:  Size  Location     Type
  9261 ;;                  3    8[COMRAM] float 
  9262 ;; Registers used:
  9263 ;;		wreg, status,2, status,0, cstack
  9264 ;; Tracked objects:
  9265 ;;		On entry : 0/0
  9266 ;;		On exit  : 0/0
  9267 ;;		Unchanged: 0/0
  9268 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9269 ;;      Params:         4       0       0       0       0       0       0       0       0
  9270 ;;      Locals:         1       0       0       0       0       0       0       0       0
  9271 ;;      Temps:          4       0       0       0       0       0       0       0       0
  9272 ;;      Totals:         9       0       0       0       0       0       0       0       0
  9273 ;;Total ram usage:        9 bytes
  9274 ;; Hardware stack levels used:    1
  9275 ;; Hardware stack levels required when called:    1
  9276 ;; This function calls:
  9277 ;;		___ftpack
  9278 ;; This function is called by:
  9279 ;;		_printTemp
  9280 ;;		_sprintf
  9281 ;; This function uses a non-reentrant model
  9282 ;;
  9283                           
  9284                           	psect	text25
  9285  00422E                     __ptext25:
  9286                           	opt stack 0
  9287  00422E                     ___lltoft:
  9288                           	opt stack 22
  9289                           
  9290                           ;incstack = 0
  9291  00422E  0E8E               	movlw	142
  9292  004230  6E11               	movwf	___lltoft@exp,c
  9293  004232  D006               	goto	i2l4434
  9294  004234                     i2l4432:
  9295  004234  90D8               	bcf	status,0,c
  9296  004236  320C               	rrcf	___lltoft@c+3,f,c
  9297  004238  320B               	rrcf	___lltoft@c+2,f,c
  9298  00423A  320A               	rrcf	___lltoft@c+1,f,c
  9299  00423C  3209               	rrcf	___lltoft@c,f,c
  9300  00423E  2A11               	incf	___lltoft@exp,f,c
  9301  004240                     i2l4434:
  9302  004240  0E00               	movlw	0
  9303  004242  1409               	andwf	___lltoft@c,w,c
  9304  004244  6E0D               	movwf	??___lltoft& (0+255),c
  9305  004246  0E00               	movlw	0
  9306  004248  140A               	andwf	___lltoft@c+1,w,c
  9307  00424A  6E0E               	movwf	(??___lltoft+1)& (0+255),c
  9308  00424C  0E00               	movlw	0
  9309  00424E  140B               	andwf	___lltoft@c+2,w,c
  9310  004250  6E0F               	movwf	(??___lltoft+2)& (0+255),c
  9311  004252  0EFF               	movlw	255
  9312  004254  140C               	andwf	___lltoft@c+3,w,c
  9313  004256  6E10               	movwf	(??___lltoft+3)& (0+255),c
  9314  004258  5010               	movf	??___lltoft+3,w,c
  9315  00425A  100D               	iorwf	??___lltoft,w,c
  9316  00425C  100E               	iorwf	??___lltoft+1,w,c
  9317  00425E  100F               	iorwf	??___lltoft+2,w,c
  9318  004260  A4D8               	btfss	status,2,c
  9319  004262  D7E8               	goto	i2l4432
  9320  004264  C009  F001         	movff	___lltoft@c,___ftpack@arg
  9321  004268  C00A  F002         	movff	___lltoft@c+1,___ftpack@arg+1
  9322  00426C  C00B  F003         	movff	___lltoft@c+2,___ftpack@arg+2
  9323  004270  C011  F004         	movff	___lltoft@exp,___ftpack@exp
  9324  004274  0E00               	movlw	0
  9325  004276  6E05               	movwf	___ftpack@sign,c
  9326  004278  EC70  F01D         	call	___ftpack	;wreg free
  9327  00427C  C001  F009         	movff	?___ftpack,?___lltoft
  9328  004280  C002  F00A         	movff	?___ftpack+1,?___lltoft+1
  9329  004284  C003  F00B         	movff	?___ftpack+2,?___lltoft+2
  9330  004288  0012               	return	
  9331  00428A                     __end_of___lltoft:
  9332                           	opt stack 0
  9333                           tosu	equ	0xFFF
  9334                           tosh	equ	0xFFE
  9335                           tosl	equ	0xFFD
  9336                           pclatu	equ	0xFFB
  9337                           pclath	equ	0xFFA
  9338                           tblptru	equ	0xFF8
  9339                           tblptrh	equ	0xFF7
  9340                           tblptrl	equ	0xFF6
  9341                           tablat	equ	0xFF5
  9342                           prodh	equ	0xFF4
  9343                           prodl	equ	0xFF3
  9344                           intcon	equ	0xFF2
  9345                           intcon2	equ	0xFF1
  9346                           indf0	equ	0xFEF
  9347                           postinc0	equ	0xFEE
  9348                           fsr0h	equ	0xFEA
  9349                           fsr0l	equ	0xFE9
  9350                           wreg	equ	0xFE8
  9351                           postinc1	equ	0xFE6
  9352                           postdec1	equ	0xFE5
  9353                           fsr1h	equ	0xFE2
  9354                           fsr1l	equ	0xFE1
  9355                           indf2	equ	0xFDF
  9356                           postinc2	equ	0xFDE
  9357                           postdec2	equ	0xFDD
  9358                           fsr2h	equ	0xFDA
  9359                           fsr2l	equ	0xFD9
  9360                           status	equ	0xFD8
  9361                           
  9362 ;; *************** function ___lldiv *****************
  9363 ;; Defined at:
  9364 ;;		line 8 in file "/opt/microchip/xc8/v1.32/sources/common/lldiv.c"
  9365 ;; Parameters:    Size  Location     Type
  9366 ;;  dividend        4    0[COMRAM] unsigned long 
  9367 ;;  divisor         4    4[COMRAM] unsigned long 
  9368 ;; Auto vars:     Size  Location     Type
  9369 ;;  quotient        4    8[COMRAM] unsigned long 
  9370 ;;  counter         1   12[COMRAM] unsigned char 
  9371 ;; Return value:  Size  Location     Type
  9372 ;;                  4    0[COMRAM] unsigned long 
  9373 ;; Registers used:
  9374 ;;		wreg, status,2, status,0
  9375 ;; Tracked objects:
  9376 ;;		On entry : 0/0
  9377 ;;		On exit  : 0/0
  9378 ;;		Unchanged: 0/0
  9379 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9380 ;;      Params:         8       0       0       0       0       0       0       0       0
  9381 ;;      Locals:         5       0       0       0       0       0       0       0       0
  9382 ;;      Temps:          0       0       0       0       0       0       0       0       0
  9383 ;;      Totals:        13       0       0       0       0       0       0       0       0
  9384 ;;Total ram usage:       13 bytes
  9385 ;; Hardware stack levels used:    1
  9386 ;; This function calls:
  9387 ;;		Nothing
  9388 ;; This function is called by:
  9389 ;;		_sprintf
  9390 ;; This function uses a non-reentrant model
  9391 ;;
  9392                           
  9393                           	psect	text26
  9394  003F8E                     __ptext26:
  9395                           	opt stack 0
  9396  003F8E                     ___lldiv:
  9397                           	opt stack 23
  9398                           
  9399                           ;incstack = 0
  9400  003F8E  0E00               	movlw	0
  9401  003F90  6E09               	movwf	___lldiv@quotient,c
  9402  003F92  0E00               	movlw	0
  9403  003F94  6E0A               	movwf	___lldiv@quotient+1,c
  9404  003F96  0E00               	movlw	0
  9405  003F98  6E0B               	movwf	___lldiv@quotient+2,c
  9406  003F9A  0E00               	movlw	0
  9407  003F9C  6E0C               	movwf	___lldiv@quotient+3,c
  9408  003F9E  5008               	movf	___lldiv@divisor+3,w,c
  9409  003FA0  1005               	iorwf	___lldiv@divisor,w,c
  9410  003FA2  1006               	iorwf	___lldiv@divisor+1,w,c
  9411  003FA4  1007               	iorwf	___lldiv@divisor+2,w,c
  9412  003FA6  B4D8               	btfsc	status,2,c
  9413  003FA8  D02A               	goto	i2l1278
  9414  003FAA  0E01               	movlw	1
  9415  003FAC  6E0D               	movwf	___lldiv@counter,c
  9416  003FAE  D006               	goto	i2l4416
  9417  003FB0                     i2l4414:
  9418  003FB0  90D8               	bcf	status,0,c
  9419  003FB2  3605               	rlcf	___lldiv@divisor,f,c
  9420  003FB4  3606               	rlcf	___lldiv@divisor+1,f,c
  9421  003FB6  3607               	rlcf	___lldiv@divisor+2,f,c
  9422  003FB8  3608               	rlcf	___lldiv@divisor+3,f,c
  9423  003FBA  2A0D               	incf	___lldiv@counter,f,c
  9424  003FBC                     i2l4416:
  9425  003FBC  AE08               	btfss	___lldiv@divisor+3,7,c
  9426  003FBE  D7F8               	goto	i2l4414
  9427  003FC0                     i2l4418:
  9428  003FC0  90D8               	bcf	status,0,c
  9429  003FC2  3609               	rlcf	___lldiv@quotient,f,c
  9430  003FC4  360A               	rlcf	___lldiv@quotient+1,f,c
  9431  003FC6  360B               	rlcf	___lldiv@quotient+2,f,c
  9432  003FC8  360C               	rlcf	___lldiv@quotient+3,f,c
  9433  003FCA  5005               	movf	___lldiv@divisor,w,c
  9434  003FCC  5C01               	subwf	___lldiv@dividend,w,c
  9435  003FCE  5006               	movf	___lldiv@divisor+1,w,c
  9436  003FD0  5802               	subwfb	___lldiv@dividend+1,w,c
  9437  003FD2  5007               	movf	___lldiv@divisor+2,w,c
  9438  003FD4  5803               	subwfb	___lldiv@dividend+2,w,c
  9439  003FD6  5008               	movf	___lldiv@divisor+3,w,c
  9440  003FD8  5804               	subwfb	___lldiv@dividend+3,w,c
  9441  003FDA  A0D8               	btfss	status,0,c
  9442  003FDC  D009               	goto	i2l4426
  9443  003FDE  5005               	movf	___lldiv@divisor,w,c
  9444  003FE0  5E01               	subwf	___lldiv@dividend,f,c
  9445  003FE2  5006               	movf	___lldiv@divisor+1,w,c
  9446  003FE4  5A02               	subwfb	___lldiv@dividend+1,f,c
  9447  003FE6  5007               	movf	___lldiv@divisor+2,w,c
  9448  003FE8  5A03               	subwfb	___lldiv@dividend+2,f,c
  9449  003FEA  5008               	movf	___lldiv@divisor+3,w,c
  9450  003FEC  5A04               	subwfb	___lldiv@dividend+3,f,c
  9451  003FEE  8009               	bsf	___lldiv@quotient,0,c
  9452  003FF0                     i2l4426:
  9453  003FF0  90D8               	bcf	status,0,c
  9454  003FF2  3208               	rrcf	___lldiv@divisor+3,f,c
  9455  003FF4  3207               	rrcf	___lldiv@divisor+2,f,c
  9456  003FF6  3206               	rrcf	___lldiv@divisor+1,f,c
  9457  003FF8  3205               	rrcf	___lldiv@divisor,f,c
  9458  003FFA  2E0D               	decfsz	___lldiv@counter,f,c
  9459  003FFC  D7E1               	goto	i2l4418
  9460  003FFE                     i2l1278:
  9461  003FFE  C009  F001         	movff	___lldiv@quotient,?___lldiv
  9462  004002  C00A  F002         	movff	___lldiv@quotient+1,?___lldiv+1
  9463  004006  C00B  F003         	movff	___lldiv@quotient+2,?___lldiv+2
  9464  00400A  C00C  F004         	movff	___lldiv@quotient+3,?___lldiv+3
  9465  00400E  0012               	return	
  9466  004010                     __end_of___lldiv:
  9467                           	opt stack 0
  9468                           tosu	equ	0xFFF
  9469                           tosh	equ	0xFFE
  9470                           tosl	equ	0xFFD
  9471                           pclatu	equ	0xFFB
  9472                           pclath	equ	0xFFA
  9473                           tblptru	equ	0xFF8
  9474                           tblptrh	equ	0xFF7
  9475                           tblptrl	equ	0xFF6
  9476                           tablat	equ	0xFF5
  9477                           prodh	equ	0xFF4
  9478                           prodl	equ	0xFF3
  9479                           intcon	equ	0xFF2
  9480                           intcon2	equ	0xFF1
  9481                           indf0	equ	0xFEF
  9482                           postinc0	equ	0xFEE
  9483                           fsr0h	equ	0xFEA
  9484                           fsr0l	equ	0xFE9
  9485                           wreg	equ	0xFE8
  9486                           postinc1	equ	0xFE6
  9487                           postdec1	equ	0xFE5
  9488                           fsr1h	equ	0xFE2
  9489                           fsr1l	equ	0xFE1
  9490                           indf2	equ	0xFDF
  9491                           postinc2	equ	0xFDE
  9492                           postdec2	equ	0xFDD
  9493                           fsr2h	equ	0xFDA
  9494                           fsr2l	equ	0xFD9
  9495                           status	equ	0xFD8
  9496                           
  9497 ;; *************** function ___fttol *****************
  9498 ;; Defined at:
  9499 ;;		line 44 in file "/opt/microchip/xc8/v1.32/sources/common/fttol.c"
  9500 ;; Parameters:    Size  Location     Type
  9501 ;;  f1              3   35[COMRAM] float 
  9502 ;; Auto vars:     Size  Location     Type
  9503 ;;  lval            4   45[COMRAM] unsigned long 
  9504 ;;  exp1            1   49[COMRAM] unsigned char 
  9505 ;;  sign1           1   44[COMRAM] unsigned char 
  9506 ;; Return value:  Size  Location     Type
  9507 ;;                  4   35[COMRAM] long 
  9508 ;; Registers used:
  9509 ;;		wreg, status,2, status,0
  9510 ;; Tracked objects:
  9511 ;;		On entry : 0/0
  9512 ;;		On exit  : 0/0
  9513 ;;		Unchanged: 0/0
  9514 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9515 ;;      Params:         4       0       0       0       0       0       0       0       0
  9516 ;;      Locals:         6       0       0       0       0       0       0       0       0
  9517 ;;      Temps:          5       0       0       0       0       0       0       0       0
  9518 ;;      Totals:        15       0       0       0       0       0       0       0       0
  9519 ;;Total ram usage:       15 bytes
  9520 ;; Hardware stack levels used:    1
  9521 ;; This function calls:
  9522 ;;		Nothing
  9523 ;; This function is called by:
  9524 ;;		_printTemp
  9525 ;;		_sprintf
  9526 ;; This function uses a non-reentrant model
  9527 ;;
  9528                           
  9529                           	psect	text27
  9530  00395E                     __ptext27:
  9531                           	opt stack 0
  9532  00395E                     ___fttol:
  9533                           	opt stack 23
  9534                           
  9535                           ;incstack = 0
  9536  00395E  C026  F028         	movff	___fttol@f1+2,??___fttol
  9537  003962  6A29               	clrf	(??___fttol+1)& (0+255),c
  9538  003964  6A2A               	clrf	(??___fttol+2)& (0+255),c
  9539  003966  3425               	rlcf	___fttol@f1+1,w,c
  9540  003968  3628               	rlcf	??___fttol& (0+255),f,c
  9541  00396A  E301               	bnc	u429_41
  9542  00396C  8029               	bsf	(??___fttol+1)& (0+255),0,c
  9543  00396E                     u429_41:
  9544  00396E  5028               	movf	??___fttol,w,c
  9545  003970  6E32               	movwf	___fttol@exp1,c
  9546  003972  6632               	tstfsz	___fttol@exp1& (0+255),c
  9547  003974  D001               	goto	i2l4368
  9548  003976  D038               	goto	i2u434_40
  9549  003978                     i2l4368:
  9550  003978  0E17               	movlw	23
  9551  00397A  6E28               	movwf	??___fttol& (0+255),c
  9552  00397C  C024  F029         	movff	___fttol@f1,??___fttol+1
  9553  003980  C025  F02A         	movff	___fttol@f1+1,??___fttol+2
  9554  003984  C026  F02B         	movff	___fttol@f1+2,??___fttol+3
  9555  003988  2828               	incf	??___fttol,w,c
  9556  00398A  6E2C               	movwf	(??___fttol+4)& (0+255),c
  9557  00398C  D004               	goto	i2u431_40
  9558  00398E                     i2u431_45:
  9559  00398E  90D8               	bcf	status,0,c
  9560  003990  322B               	rrcf	??___fttol+3,f,c
  9561  003992  322A               	rrcf	??___fttol+2,f,c
  9562  003994  3229               	rrcf	??___fttol+1,f,c
  9563  003996                     i2u431_40:
  9564  003996  2E2C               	decfsz	(??___fttol+4)& (0+255),f,c
  9565  003998  D7FA               	goto	i2u431_45
  9566  00399A  5029               	movf	??___fttol+1,w,c
  9567  00399C  6E2D               	movwf	___fttol@sign1,c
  9568  00399E  8E25               	bsf	___fttol@f1+1,7,c
  9569  0039A0  0EFF               	movlw	255
  9570  0039A2  1624               	andwf	___fttol@f1,f,c
  9571  0039A4  0EFF               	movlw	255
  9572  0039A6  1625               	andwf	___fttol@f1+1,f,c
  9573  0039A8  0E00               	movlw	0
  9574  0039AA  1626               	andwf	___fttol@f1+2,f,c
  9575  0039AC  5024               	movf	___fttol@f1,w,c
  9576  0039AE  6E2E               	movwf	___fttol@lval,c
  9577  0039B0  5025               	movf	___fttol@f1+1,w,c
  9578  0039B2  6E2F               	movwf	___fttol@lval+1,c
  9579  0039B4  5026               	movf	___fttol@f1+2,w,c
  9580  0039B6  6E30               	movwf	___fttol@lval+2,c
  9581  0039B8  6A31               	clrf	___fttol@lval+3,c
  9582  0039BA  0E8E               	movlw	142
  9583  0039BC  5E32               	subwf	___fttol@exp1,f,c
  9584  0039BE  AE32               	btfss	___fttol@exp1,7,c
  9585  0039C0  D010               	goto	i2l4390
  9586  0039C2  5032               	movf	___fttol@exp1,w,c
  9587  0039C4  0A80               	xorlw	128
  9588  0039C6  6E28               	movwf	??___fttol& (0+255),c
  9589  0039C8  0EF1               	movlw	241
  9590  0039CA  0A80               	xorlw	128
  9591  0039CC  5C28               	subwf	??___fttol,w,c
  9592  0039CE  A0D8               	btfss	status,0,c
  9593  0039D0  D00B               	goto	i2u434_40
  9594  0039D2                     i2l4386:
  9595  0039D2  90D8               	bcf	status,0,c
  9596  0039D4  3231               	rrcf	___fttol@lval+3,f,c
  9597  0039D6  3230               	rrcf	___fttol@lval+2,f,c
  9598  0039D8  322F               	rrcf	___fttol@lval+1,f,c
  9599  0039DA  322E               	rrcf	___fttol@lval,f,c
  9600  0039DC  3E32               	incfsz	___fttol@exp1,f,c
  9601  0039DE  D7F9               	goto	i2l4386
  9602  0039E0  D014               	goto	i2l4400
  9603  0039E2                     i2l4390:
  9604  0039E2  0E17               	movlw	23
  9605  0039E4  6432               	cpfsgt	___fttol@exp1,c
  9606  0039E6  D00F               	goto	i2l4398
  9607  0039E8                     i2u434_40:
  9608  0039E8  0E00               	movlw	0
  9609  0039EA  6E24               	movwf	?___fttol,c
  9610  0039EC  0E00               	movlw	0
  9611  0039EE  6E25               	movwf	?___fttol+1,c
  9612  0039F0  0E00               	movlw	0
  9613  0039F2  6E26               	movwf	?___fttol+2,c
  9614  0039F4  0E00               	movlw	0
  9615  0039F6  6E27               	movwf	?___fttol+3,c
  9616  0039F8  D01B               	goto	i2l1234
  9617  0039FA                     i2l4396:
  9618  0039FA  90D8               	bcf	status,0,c
  9619  0039FC  362E               	rlcf	___fttol@lval,f,c
  9620  0039FE  362F               	rlcf	___fttol@lval+1,f,c
  9621  003A00  3630               	rlcf	___fttol@lval+2,f,c
  9622  003A02  3631               	rlcf	___fttol@lval+3,f,c
  9623  003A04  0632               	decf	___fttol@exp1,f,c
  9624  003A06                     i2l4398:
  9625  003A06  6632               	tstfsz	___fttol@exp1,c
  9626  003A08  D7F8               	goto	i2l4396
  9627  003A0A                     i2l4400:
  9628  003A0A  502D               	movf	___fttol@sign1,w,c
  9629  003A0C  B4D8               	btfsc	status,2,c
  9630  003A0E  D008               	goto	i2l4404
  9631  003A10  1E31               	comf	___fttol@lval+3,f,c
  9632  003A12  1E30               	comf	___fttol@lval+2,f,c
  9633  003A14  1E2F               	comf	___fttol@lval+1,f,c
  9634  003A16  6C2E               	negf	___fttol@lval,c
  9635  003A18  0E00               	movlw	0
  9636  003A1A  222F               	addwfc	___fttol@lval+1,f,c
  9637  003A1C  2230               	addwfc	___fttol@lval+2,f,c
  9638  003A1E  2231               	addwfc	___fttol@lval+3,f,c
  9639  003A20                     i2l4404:
  9640  003A20  C02E  F024         	movff	___fttol@lval,?___fttol
  9641  003A24  C02F  F025         	movff	___fttol@lval+1,?___fttol+1
  9642  003A28  C030  F026         	movff	___fttol@lval+2,?___fttol+2
  9643  003A2C  C031  F027         	movff	___fttol@lval+3,?___fttol+3
  9644  003A30                     i2l1234:
  9645  003A30  0012               	return	
  9646  003A32                     __end_of___fttol:
  9647                           	opt stack 0
  9648                           tosu	equ	0xFFF
  9649                           tosh	equ	0xFFE
  9650                           tosl	equ	0xFFD
  9651                           pclatu	equ	0xFFB
  9652                           pclath	equ	0xFFA
  9653                           tblptru	equ	0xFF8
  9654                           tblptrh	equ	0xFF7
  9655                           tblptrl	equ	0xFF6
  9656                           tablat	equ	0xFF5
  9657                           prodh	equ	0xFF4
  9658                           prodl	equ	0xFF3
  9659                           intcon	equ	0xFF2
  9660                           intcon2	equ	0xFF1
  9661                           indf0	equ	0xFEF
  9662                           postinc0	equ	0xFEE
  9663                           fsr0h	equ	0xFEA
  9664                           fsr0l	equ	0xFE9
  9665                           wreg	equ	0xFE8
  9666                           postinc1	equ	0xFE6
  9667                           postdec1	equ	0xFE5
  9668                           fsr1h	equ	0xFE2
  9669                           fsr1l	equ	0xFE1
  9670                           indf2	equ	0xFDF
  9671                           postinc2	equ	0xFDE
  9672                           postdec2	equ	0xFDD
  9673                           fsr2h	equ	0xFDA
  9674                           fsr2l	equ	0xFD9
  9675                           status	equ	0xFD8
  9676                           
  9677 ;; *************** function ___ftsub *****************
  9678 ;; Defined at:
  9679 ;;		line 20 in file "/opt/microchip/xc8/v1.32/sources/common/ftsub.c"
  9680 ;; Parameters:    Size  Location     Type
  9681 ;;  f1              3   62[COMRAM] float 
  9682 ;;  f2              3   65[COMRAM] float 
  9683 ;; Auto vars:     Size  Location     Type
  9684 ;;		None
  9685 ;; Return value:  Size  Location     Type
  9686 ;;                  3   62[COMRAM] float 
  9687 ;; Registers used:
  9688 ;;		wreg, status,2, status,0, cstack
  9689 ;; Tracked objects:
  9690 ;;		On entry : 0/0
  9691 ;;		On exit  : 0/0
  9692 ;;		Unchanged: 0/0
  9693 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9694 ;;      Params:         6       0       0       0       0       0       0       0       0
  9695 ;;      Locals:         0       0       0       0       0       0       0       0       0
  9696 ;;      Temps:          0       0       0       0       0       0       0       0       0
  9697 ;;      Totals:         6       0       0       0       0       0       0       0       0
  9698 ;;Total ram usage:        6 bytes
  9699 ;; Hardware stack levels used:    1
  9700 ;; Hardware stack levels required when called:    2
  9701 ;; This function calls:
  9702 ;;		___ftadd
  9703 ;; This function is called by:
  9704 ;;		_sprintf
  9705 ;; This function uses a non-reentrant model
  9706 ;;
  9707                           
  9708                           	psect	text28
  9709  0044EE                     __ptext28:
  9710                           	opt stack 0
  9711  0044EE                     ___ftsub:
  9712                           	opt stack 21
  9713                           
  9714                           ;incstack = 0
  9715  0044EE  0E00               	movlw	0
  9716  0044F0  1A42               	xorwf	___ftsub@f2,f,c
  9717  0044F2  0E00               	movlw	0
  9718  0044F4  1A43               	xorwf	___ftsub@f2+1,f,c
  9719  0044F6  0E80               	movlw	128
  9720  0044F8  1A44               	xorwf	___ftsub@f2+2,f,c
  9721  0044FA  C03F  F033         	movff	___ftsub@f1,___ftadd@f1
  9722  0044FE  C040  F034         	movff	___ftsub@f1+1,___ftadd@f1+1
  9723  004502  C041  F035         	movff	___ftsub@f1+2,___ftadd@f1+2
  9724  004506  C042  F036         	movff	___ftsub@f2,___ftadd@f2
  9725  00450A  C043  F037         	movff	___ftsub@f2+1,___ftadd@f2+1
  9726  00450E  C044  F038         	movff	___ftsub@f2+2,___ftadd@f2+2
  9727  004512  EC44  F017         	call	___ftadd	;wreg free
  9728  004516  C033  F03F         	movff	?___ftadd,?___ftsub
  9729  00451A  C034  F040         	movff	?___ftadd+1,?___ftsub+1
  9730  00451E  C035  F041         	movff	?___ftadd+2,?___ftsub+2
  9731  004522  0012               	return	
  9732  004524                     __end_of___ftsub:
  9733                           	opt stack 0
  9734                           tosu	equ	0xFFF
  9735                           tosh	equ	0xFFE
  9736                           tosl	equ	0xFFD
  9737                           pclatu	equ	0xFFB
  9738                           pclath	equ	0xFFA
  9739                           tblptru	equ	0xFF8
  9740                           tblptrh	equ	0xFF7
  9741                           tblptrl	equ	0xFF6
  9742                           tablat	equ	0xFF5
  9743                           prodh	equ	0xFF4
  9744                           prodl	equ	0xFF3
  9745                           intcon	equ	0xFF2
  9746                           intcon2	equ	0xFF1
  9747                           indf0	equ	0xFEF
  9748                           postinc0	equ	0xFEE
  9749                           fsr0h	equ	0xFEA
  9750                           fsr0l	equ	0xFE9
  9751                           wreg	equ	0xFE8
  9752                           postinc1	equ	0xFE6
  9753                           postdec1	equ	0xFE5
  9754                           fsr1h	equ	0xFE2
  9755                           fsr1l	equ	0xFE1
  9756                           indf2	equ	0xFDF
  9757                           postinc2	equ	0xFDE
  9758                           postdec2	equ	0xFDD
  9759                           fsr2h	equ	0xFDA
  9760                           fsr2l	equ	0xFD9
  9761                           status	equ	0xFD8
  9762                           
  9763 ;; *************** function ___ftneg *****************
  9764 ;; Defined at:
  9765 ;;		line 15 in file "/opt/microchip/xc8/v1.32/sources/common/ftneg.c"
  9766 ;; Parameters:    Size  Location     Type
  9767 ;;  f1              3    0[COMRAM] float 
  9768 ;; Auto vars:     Size  Location     Type
  9769 ;;		None
  9770 ;; Return value:  Size  Location     Type
  9771 ;;                  3    0[COMRAM] float 
  9772 ;; Registers used:
  9773 ;;		wreg, status,2, status,0
  9774 ;; Tracked objects:
  9775 ;;		On entry : 0/0
  9776 ;;		On exit  : 0/0
  9777 ;;		Unchanged: 0/0
  9778 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9779 ;;      Params:         3       0       0       0       0       0       0       0       0
  9780 ;;      Locals:         0       0       0       0       0       0       0       0       0
  9781 ;;      Temps:          0       0       0       0       0       0       0       0       0
  9782 ;;      Totals:         3       0       0       0       0       0       0       0       0
  9783 ;;Total ram usage:        3 bytes
  9784 ;; Hardware stack levels used:    1
  9785 ;; This function calls:
  9786 ;;		Nothing
  9787 ;; This function is called by:
  9788 ;;		_sprintf
  9789 ;; This function uses a non-reentrant model
  9790 ;;
  9791                           
  9792                           	psect	text29
  9793  00457A                     __ptext29:
  9794                           	opt stack 0
  9795  00457A                     ___ftneg:
  9796                           	opt stack 23
  9797                           
  9798                           ;incstack = 0
  9799  00457A  0E7F               	movlw	127
  9800  00457C  1403               	andwf	___ftneg@f1+2,w,c
  9801  00457E  1002               	iorwf	___ftneg@f1+1,w,c
  9802  004580  1001               	iorwf	___ftneg@f1,w,c
  9803  004582  B4D8               	btfsc	status,2,c
  9804  004584  D006               	goto	i2l1224
  9805  004586  0E00               	movlw	0
  9806  004588  1A01               	xorwf	___ftneg@f1,f,c
  9807  00458A  0E00               	movlw	0
  9808  00458C  1A02               	xorwf	___ftneg@f1+1,f,c
  9809  00458E  0E80               	movlw	128
  9810  004590  1A03               	xorwf	___ftneg@f1+2,f,c
  9811  004592                     i2l1224:
  9812  004592  C001  F001         	movff	___ftneg@f1,?___ftneg
  9813  004596  C002  F002         	movff	___ftneg@f1+1,?___ftneg+1
  9814  00459A  C003  F003         	movff	___ftneg@f1+2,?___ftneg+2
  9815  00459E  0012               	return	
  9816  0045A0                     __end_of___ftneg:
  9817                           	opt stack 0
  9818                           tosu	equ	0xFFF
  9819                           tosh	equ	0xFFE
  9820                           tosl	equ	0xFFD
  9821                           pclatu	equ	0xFFB
  9822                           pclath	equ	0xFFA
  9823                           tblptru	equ	0xFF8
  9824                           tblptrh	equ	0xFF7
  9825                           tblptrl	equ	0xFF6
  9826                           tablat	equ	0xFF5
  9827                           prodh	equ	0xFF4
  9828                           prodl	equ	0xFF3
  9829                           intcon	equ	0xFF2
  9830                           intcon2	equ	0xFF1
  9831                           indf0	equ	0xFEF
  9832                           postinc0	equ	0xFEE
  9833                           fsr0h	equ	0xFEA
  9834                           fsr0l	equ	0xFE9
  9835                           wreg	equ	0xFE8
  9836                           postinc1	equ	0xFE6
  9837                           postdec1	equ	0xFE5
  9838                           fsr1h	equ	0xFE2
  9839                           fsr1l	equ	0xFE1
  9840                           indf2	equ	0xFDF
  9841                           postinc2	equ	0xFDE
  9842                           postdec2	equ	0xFDD
  9843                           fsr2h	equ	0xFDA
  9844                           fsr2l	equ	0xFD9
  9845                           status	equ	0xFD8
  9846                           
  9847 ;; *************** function ___ftge *****************
  9848 ;; Defined at:
  9849 ;;		line 4 in file "/opt/microchip/xc8/v1.32/sources/common/ftge.c"
  9850 ;; Parameters:    Size  Location     Type
  9851 ;;  ff1             3    0[COMRAM] float 
  9852 ;;  ff2             3    3[COMRAM] float 
  9853 ;; Auto vars:     Size  Location     Type
  9854 ;;		None
  9855 ;; Return value:  Size  Location     Type
  9856 ;;		None               void
  9857 ;; Registers used:
  9858 ;;		wreg, status,2, status,0
  9859 ;; Tracked objects:
  9860 ;;		On entry : 0/0
  9861 ;;		On exit  : 0/0
  9862 ;;		Unchanged: 0/0
  9863 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9864 ;;      Params:         6       0       0       0       0       0       0       0       0
  9865 ;;      Locals:         0       0       0       0       0       0       0       0       0
  9866 ;;      Temps:          3       0       0       0       0       0       0       0       0
  9867 ;;      Totals:         9       0       0       0       0       0       0       0       0
  9868 ;;Total ram usage:        9 bytes
  9869 ;; Hardware stack levels used:    1
  9870 ;; This function calls:
  9871 ;;		Nothing
  9872 ;; This function is called by:
  9873 ;;		_sprintf
  9874 ;; This function uses a non-reentrant model
  9875 ;;
  9876                           
  9877                           	psect	text30
  9878  003D58                     __ptext30:
  9879                           	opt stack 0
  9880  003D58                     ___ftge:
  9881                           	opt stack 23
  9882                           
  9883                           ;incstack = 0
  9884  003D58  AE03               	btfss	___ftge@ff1+2,7,c
  9885  003D5A  D016               	goto	i2l4344
  9886  003D5C  C001  F007         	movff	___ftge@ff1,??___ftge
  9887  003D60  C002  F008         	movff	___ftge@ff1+1,??___ftge+1
  9888  003D64  C003  F009         	movff	___ftge@ff1+2,??___ftge+2
  9889  003D68  1E07               	comf	??___ftge,f,c
  9890  003D6A  1E08               	comf	??___ftge+1,f,c
  9891  003D6C  1E09               	comf	??___ftge+2,f,c
  9892  003D6E  2A07               	incf	??___ftge,f,c
  9893  003D70  0E00               	movlw	0
  9894  003D72  2208               	addwfc	??___ftge+1,f,c
  9895  003D74  2209               	addwfc	??___ftge+2,f,c
  9896  003D76  0E00               	movlw	0
  9897  003D78  2407               	addwf	??___ftge,w,c
  9898  003D7A  6E01               	movwf	___ftge@ff1,c
  9899  003D7C  0E00               	movlw	0
  9900  003D7E  2008               	addwfc	??___ftge+1,w,c
  9901  003D80  6E02               	movwf	___ftge@ff1+1,c
  9902  003D82  0E80               	movlw	128
  9903  003D84  2009               	addwfc	??___ftge+2,w,c
  9904  003D86  6E03               	movwf	___ftge@ff1+2,c
  9905  003D88                     i2l4344:
  9906  003D88  AE06               	btfss	___ftge@ff2+2,7,c
  9907  003D8A  D016               	goto	i2l4348
  9908  003D8C  C004  F007         	movff	___ftge@ff2,??___ftge
  9909  003D90  C005  F008         	movff	___ftge@ff2+1,??___ftge+1
  9910  003D94  C006  F009         	movff	___ftge@ff2+2,??___ftge+2
  9911  003D98  1E07               	comf	??___ftge,f,c
  9912  003D9A  1E08               	comf	??___ftge+1,f,c
  9913  003D9C  1E09               	comf	??___ftge+2,f,c
  9914  003D9E  2A07               	incf	??___ftge,f,c
  9915  003DA0  0E00               	movlw	0
  9916  003DA2  2208               	addwfc	??___ftge+1,f,c
  9917  003DA4  2209               	addwfc	??___ftge+2,f,c
  9918  003DA6  0E00               	movlw	0
  9919  003DA8  2407               	addwf	??___ftge,w,c
  9920  003DAA  6E04               	movwf	___ftge@ff2,c
  9921  003DAC  0E00               	movlw	0
  9922  003DAE  2008               	addwfc	??___ftge+1,w,c
  9923  003DB0  6E05               	movwf	___ftge@ff2+1,c
  9924  003DB2  0E80               	movlw	128
  9925  003DB4  2009               	addwfc	??___ftge+2,w,c
  9926  003DB6  6E06               	movwf	___ftge@ff2+2,c
  9927  003DB8                     i2l4348:
  9928  003DB8  0E00               	movlw	0
  9929  003DBA  1A01               	xorwf	___ftge@ff1,f,c
  9930  003DBC  0E00               	movlw	0
  9931  003DBE  1A02               	xorwf	___ftge@ff1+1,f,c
  9932  003DC0  0E80               	movlw	128
  9933  003DC2  1A03               	xorwf	___ftge@ff1+2,f,c
  9934  003DC4  0E00               	movlw	0
  9935  003DC6  1A04               	xorwf	___ftge@ff2,f,c
  9936  003DC8  0E00               	movlw	0
  9937  003DCA  1A05               	xorwf	___ftge@ff2+1,f,c
  9938  003DCC  0E80               	movlw	128
  9939  003DCE  1A06               	xorwf	___ftge@ff2+2,f,c
  9940  003DD0  5004               	movf	___ftge@ff2,w,c
  9941  003DD2  5C01               	subwf	___ftge@ff1,w,c
  9942  003DD4  5005               	movf	___ftge@ff2+1,w,c
  9943  003DD6  5802               	subwfb	___ftge@ff1+1,w,c
  9944  003DD8  5006               	movf	___ftge@ff2+2,w,c
  9945  003DDA  5803               	subwfb	___ftge@ff1+2,w,c
  9946  003DDC  B0D8               	btfsc	status,0,c
  9947  003DDE  D002               	goto	i2l4354
  9948  003DE0  90D8               	bcf	status,0,c
  9949  003DE2  D001               	goto	i2l1208
  9950  003DE4                     i2l4354:
  9951  003DE4  80D8               	bsf	status,0,c
  9952  003DE6                     i2l1208:
  9953  003DE6  0012               	return	
  9954  003DE8                     __end_of___ftge:
  9955                           	opt stack 0
  9956                           tosu	equ	0xFFF
  9957                           tosh	equ	0xFFE
  9958                           tosl	equ	0xFFD
  9959                           pclatu	equ	0xFFB
  9960                           pclath	equ	0xFFA
  9961                           tblptru	equ	0xFF8
  9962                           tblptrh	equ	0xFF7
  9963                           tblptrl	equ	0xFF6
  9964                           tablat	equ	0xFF5
  9965                           prodh	equ	0xFF4
  9966                           prodl	equ	0xFF3
  9967                           intcon	equ	0xFF2
  9968                           intcon2	equ	0xFF1
  9969                           indf0	equ	0xFEF
  9970                           postinc0	equ	0xFEE
  9971                           fsr0h	equ	0xFEA
  9972                           fsr0l	equ	0xFE9
  9973                           wreg	equ	0xFE8
  9974                           postinc1	equ	0xFE6
  9975                           postdec1	equ	0xFE5
  9976                           fsr1h	equ	0xFE2
  9977                           fsr1l	equ	0xFE1
  9978                           indf2	equ	0xFDF
  9979                           postinc2	equ	0xFDE
  9980                           postdec2	equ	0xFDD
  9981                           fsr2h	equ	0xFDA
  9982                           fsr2l	equ	0xFD9
  9983                           status	equ	0xFD8
  9984                           
  9985 ;; *************** function _getTemp *****************
  9986 ;; Defined at:
  9987 ;;		line 45 in file "temp.c"
  9988 ;; Parameters:    Size  Location     Type
  9989 ;;		None
  9990 ;; Auto vars:     Size  Location     Type
  9991 ;;  oldTempsTemp    9   62[COMRAM] float [3]
  9992 ;;  tmp             3   83[COMRAM] float 
  9993 ;;  total           3   74[COMRAM] float 
  9994 ;;  cnt             1   86[COMRAM] unsigned char 
  9995 ;; Return value:  Size  Location     Type
  9996 ;;                  3  369[COMRAM] float 
  9997 ;; Registers used:
  9998 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  9999 ;; Tracked objects:
 10000 ;;		On entry : 0/0
 10001 ;;		On exit  : 0/0
 10002 ;;		Unchanged: 0/0
 10003 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10004 ;;      Params:         0       0       0       0       0       0       0       0       0
 10005 ;;      Locals:        25       0       0       0       0       0       0       0       0
 10006 ;;      Temps:          0       0       0       0       0       0       0       0       0
 10007 ;;      Totals:        25       0       0       0       0       0       0       0       0
 10008 ;;Total ram usage:       25 bytes
 10009 ;; Hardware stack levels used:    1
 10010 ;; Hardware stack levels required when called:    2
 10011 ;; This function calls:
 10012 ;;		___ftadd
 10013 ;;		___ftdiv
 10014 ;;		___ftmul
 10015 ;;		___lwtoft
 10016 ;;		___wmul
 10017 ;; This function is called by:
 10018 ;;		_isr
 10019 ;; This function uses a non-reentrant model
 10020 ;;
 10021                           
 10022                           	psect	text31
 10023  002024                     __ptext31:
 10024                           	opt stack 0
 10025  002024                     _getTemp:
 10026                           	opt stack 23
 10027                           
 10028                           ;temp.c: 47: float oldTempsTemp[3];
 10029                           ;temp.c: 48: uint8_t cnt;
 10030                           ;temp.c: 49: for (cnt = 3; cnt > 0; cnt--)
 10031                           
 10032                           ;incstack = 0
 10033  002024  0E03               	movlw	3
 10034  002026  6E57               	movwf	getTemp@cnt,c
 10035  002028  D024               	goto	L22
 10036  00202A                     i2l5200:
 10037                           
 10038                           ;temp.c: 50: {
 10039                           ;temp.c: 51: oldTempsTemp[cnt - 1] = oldTemps[cnt];
 10040  00202A  5057               	movf	getTemp@cnt,w,c
 10041  00202C  0D03               	mullw	3
 10042  00202E  0101               	movlb	1	; () banked
 10043  002030  0E3E               	movlw	low _oldTemps
 10044  002032  24F3               	addwf	prodl,w,c
 10045  002034  6ED9               	movwf	fsr2l,c
 10046  002036  0101               	movlb	1	; () banked
 10047  002038  0E01               	movlw	high _oldTemps
 10048  00203A  20F4               	addwfc	prodh,w,c
 10049  00203C  6EDA               	movwf	fsr2h,c
 10050  00203E  0EFF               	movlw	255
 10051  002040  2457               	addwf	getTemp@cnt,w,c
 10052  002042  6E0F               	movwf	___wmul@multiplier,c
 10053  002044  6A10               	clrf	___wmul@multiplier+1,c
 10054  002046  0EFF               	movlw	255
 10055  002048  2210               	addwfc	___wmul@multiplier+1,f,c
 10056  00204A  0E00               	movlw	0
 10057  00204C  6E12               	movwf	___wmul@multiplicand+1,c
 10058  00204E  0E03               	movlw	3
 10059  002050  6E11               	movwf	___wmul@multiplicand,c
 10060  002052  ECD0  F022         	call	___wmul	;wreg free
 10061  002056  0E3F               	movlw	low getTemp@oldTempsTemp
 10062  002058  240F               	addwf	?___wmul,w,c
 10063  00205A  6EE1               	movwf	fsr1l,c
 10064  00205C  0E00               	movlw	high getTemp@oldTempsTemp
 10065  00205E  2010               	addwfc	?___wmul+1,w,c
 10066  002060  6EE2               	movwf	fsr1h,c
 10067  002062  CFDE FFE6          	movff	postinc2,postinc1
 10068  002066  CFDE FFE6          	movff	postinc2,postinc1
 10069  00206A  CFDE FFE5          	movff	postinc2,postdec1
 10070  00206E  52E5               	movf	postdec1,f,c
 10071  002070  0657               	decf	getTemp@cnt,f,c
 10072  002072                     L22:
 10073  002072  6657               	tstfsz	getTemp@cnt,c
 10074  002074  D7DA               	goto	i2l5200
 10075                           
 10076                           ;temp.c: 52: }
 10077                           ;temp.c: 53: GO = 1;
 10078  002076  82C2               	bsf	4034,1,c	;volatile
 10079  002078                     i2l372:
 10080  002078  B2C2               	btfsc	4034,1,c	;volatile
 10081  00207A  D7FE               	goto	i2l372
 10082                           
 10083                           ;temp.c: 55: float tmp;
 10084                           ;temp.c: 57: tmp = ((double).4 - (((double)5.0)/((((double)12.0) + ((double)1.0))/((doub
      +                          le)1.0))));
 10085  00207C  0E10               	movlw	16
 10086  00207E  6E54               	movwf	getTemp@tmp,c
 10087  002080  0E7C               	movlw	124
 10088  002082  6E55               	movwf	getTemp@tmp+1,c
 10089  002084  0E3C               	movlw	60
 10090  002086  6E56               	movwf	getTemp@tmp+2,c
 10091                           
 10092                           ;temp.c: 58: tmp = (ADRES * ((double)5.0)) / ((double)1024.0);
 10093  002088  0E00               	movlw	0
 10094  00208A  6E18               	movwf	___ftmul@f2,c
 10095  00208C  0EA0               	movlw	160
 10096  00208E  6E19               	movwf	___ftmul@f2+1,c
 10097  002090  0E40               	movlw	64
 10098  002092  6E1A               	movwf	___ftmul@f2+2,c
 10099  002094  CFC3 F009          	movff	4035,___lwtoft@c	;volatile
 10100  002098  CFC4 F00A          	movff	4036,___lwtoft@c+1	;volatile
 10101  00209C  ECE3  F022         	call	___lwtoft	;wreg free
 10102  0020A0  C009  F015         	movff	?___lwtoft,___ftmul@f1
 10103  0020A4  C00A  F016         	movff	?___lwtoft+1,___ftmul@f1+1
 10104  0020A8  C00B  F017         	movff	?___lwtoft+2,___ftmul@f1+2
 10105  0020AC  EC61  F01B         	call	___ftmul	;wreg free
 10106  0020B0  C015  F024         	movff	?___ftmul,___ftdiv@f1
 10107  0020B4  C016  F025         	movff	?___ftmul+1,___ftdiv@f1+1
 10108  0020B8  C017  F026         	movff	?___ftmul+2,___ftdiv@f1+2
 10109  0020BC  0E00               	movlw	0
 10110  0020BE  6E27               	movwf	___ftdiv@f2,c
 10111  0020C0  0E80               	movlw	128
 10112  0020C2  6E28               	movwf	___ftdiv@f2+1,c
 10113  0020C4  0E44               	movlw	68
 10114  0020C6  6E29               	movwf	___ftdiv@f2+2,c
 10115  0020C8  EC44  F01C         	call	___ftdiv	;wreg free
 10116  0020CC  C024  F054         	movff	?___ftdiv,getTemp@tmp
 10117  0020D0  C025  F055         	movff	?___ftdiv+1,getTemp@tmp+1
 10118  0020D4  C026  F056         	movff	?___ftdiv+2,getTemp@tmp+2
 10119                           
 10120                           ;temp.c: 59: tmp = ADRES;
 10121  0020D8  CFC3 F009          	movff	4035,___lwtoft@c	;volatile
 10122  0020DC  CFC4 F00A          	movff	4036,___lwtoft@c+1	;volatile
 10123  0020E0  ECE3  F022         	call	___lwtoft	;wreg free
 10124  0020E4  C009  F054         	movff	?___lwtoft,getTemp@tmp
 10125  0020E8  C00A  F055         	movff	?___lwtoft+1,getTemp@tmp+1
 10126  0020EC  C00B  F056         	movff	?___lwtoft+2,getTemp@tmp+2
 10127                           
 10128                           ;temp.c: 60: if (tempMenu.state == 0)
 10129  0020F0  0100               	movlb	0	; () banked
 10130  0020F2  67E0               	tstfsz	_tempMenu& (0+255),b
 10131  0020F4  D059               	goto	i2l5216
 10132                           
 10133                           ; BSR set to: 0
 10134                           ;temp.c: 61: {
 10135                           ;temp.c: 62: tmp = (( ((double)ADRES) * ((double)5.0)/((double)1024.0) / (((double)56.0)
      +                          /((double)10.0)) / ((double)0.0195) - (((double).4 - (((double)5.0)/((((double)12.0) + (
      +                          (double)1.0))/((double)1.0)))) / ((double)0.0195)) ));
 10136  0020F6  0E00               	movlw	0
 10137  0020F8  6E27               	movwf	___ftdiv@f2,c
 10138  0020FA  0E80               	movlw	128
 10139  0020FC  6E28               	movwf	___ftdiv@f2+1,c
 10140  0020FE  0E44               	movlw	68
 10141  002100  6E29               	movwf	___ftdiv@f2+2,c
 10142  002102  0E00               	movlw	0
 10143  002104  6E18               	movwf	___ftmul@f2,c
 10144  002106  0EA0               	movlw	160
 10145  002108  6E19               	movwf	___ftmul@f2+1,c
 10146  00210A  0E40               	movlw	64
 10147  00210C  6E1A               	movwf	___ftmul@f2+2,c
 10148  00210E  CFC3 F009          	movff	4035,___lwtoft@c	;volatile
 10149  002112  CFC4 F00A          	movff	4036,___lwtoft@c+1	;volatile
 10150  002116  ECE3  F022         	call	___lwtoft	;wreg free
 10151  00211A  C009  F015         	movff	?___lwtoft,___ftmul@f1
 10152  00211E  C00A  F016         	movff	?___lwtoft+1,___ftmul@f1+1
 10153  002122  C00B  F017         	movff	?___lwtoft+2,___ftmul@f1+2
 10154  002126  EC61  F01B         	call	___ftmul	;wreg free
 10155  00212A  C015  F024         	movff	?___ftmul,___ftdiv@f1
 10156  00212E  C016  F025         	movff	?___ftmul+1,___ftdiv@f1+1
 10157  002132  C017  F026         	movff	?___ftmul+2,___ftdiv@f1+2
 10158  002136  EC44  F01C         	call	___ftdiv	;wreg free
 10159  00213A  C024  F04E         	movff	?___ftdiv,_getTemp$1307
 10160  00213E  C025  F04F         	movff	?___ftdiv+1,_getTemp$1307+1
 10161  002142  C026  F050         	movff	?___ftdiv+2,_getTemp$1307+2
 10162                           
 10163                           ;temp.c: 61: {
 10164                           ;temp.c: 62: tmp = (( ((double)ADRES) * ((double)5.0)/((double)1024.0) / (((double)56.0)
      +                          /((double)10.0)) / ((double)0.0195) - (((double).4 - (((double)5.0)/((((double)12.0) + (
      +                          (double)1.0))/((double)1.0)))) / ((double)0.0195)) ));
 10165  002146  0E33               	movlw	51
 10166  002148  6E27               	movwf	___ftdiv@f2,c
 10167  00214A  0EB3               	movlw	179
 10168  00214C  6E28               	movwf	___ftdiv@f2+1,c
 10169  00214E  0E40               	movlw	64
 10170  002150  6E29               	movwf	___ftdiv@f2+2,c
 10171  002152  C04E  F024         	movff	_getTemp$1307,___ftdiv@f1
 10172  002156  C04F  F025         	movff	_getTemp$1307+1,___ftdiv@f1+1
 10173  00215A  C050  F026         	movff	_getTemp$1307+2,___ftdiv@f1+2
 10174  00215E  EC44  F01C         	call	___ftdiv	;wreg free
 10175  002162  C024  F051         	movff	?___ftdiv,_getTemp$1308
 10176  002166  C025  F052         	movff	?___ftdiv+1,_getTemp$1308+1
 10177  00216A  C026  F053         	movff	?___ftdiv+2,_getTemp$1308+2
 10178                           
 10179                           ;temp.c: 61: {
 10180                           ;temp.c: 62: tmp = (( ((double)ADRES) * ((double)5.0)/((double)1024.0) / (((double)56.0)
      +                          /((double)10.0)) / ((double)0.0195) - (((double).4 - (((double)5.0)/((((double)12.0) + (
      +                          (double)1.0))/((double)1.0)))) / ((double)0.0195)) ));
 10181  00216E  0EBE               	movlw	190
 10182  002170  6E27               	movwf	___ftdiv@f2,c
 10183  002172  0E9F               	movlw	159
 10184  002174  6E28               	movwf	___ftdiv@f2+1,c
 10185  002176  0E3C               	movlw	60
 10186  002178  6E29               	movwf	___ftdiv@f2+2,c
 10187  00217A  C051  F024         	movff	_getTemp$1308,___ftdiv@f1
 10188  00217E  C052  F025         	movff	_getTemp$1308+1,___ftdiv@f1+1
 10189  002182  C053  F026         	movff	_getTemp$1308+2,___ftdiv@f1+2
 10190  002186  EC44  F01C         	call	___ftdiv	;wreg free
 10191  00218A  C024  F033         	movff	?___ftdiv,___ftadd@f1
 10192  00218E  C025  F034         	movff	?___ftdiv+1,___ftadd@f1+1
 10193  002192  C026  F035         	movff	?___ftdiv+2,___ftadd@f1+2
 10194  002196  0EF9               	movlw	249
 10195  002198  6E36               	movwf	___ftadd@f2,c
 10196  00219A  0E49               	movlw	73
 10197  00219C  6E37               	movwf	___ftadd@f2+1,c
 10198  00219E  0EBF               	movlw	191
 10199  0021A0  6E38               	movwf	___ftadd@f2+2,c
 10200  0021A2  EC44  F017         	call	___ftadd	;wreg free
 10201  0021A6  D088               	goto	L21
 10202  0021A8                     i2l5216:
 10203                           
 10204                           ;temp.c: 64: else
 10205                           ;temp.c: 65: {
 10206                           ;temp.c: 66: tmp = (( ((double)ADRES) * ((double)5.0)/((double)1024.0) / (((double)56.0)
      +                          /((double)10.0)) / ((double)0.0195) - (((double).4 - (((double)5.0)/((((double)12.0) + (
      +                          (double)1.0))/((double)1.0)))) / ((double)0.0195)) ) * 5.0 / 9.0 + 32.0);
 10207  0021A8  0E00               	movlw	0
 10208  0021AA  6E27               	movwf	___ftdiv@f2,c
 10209  0021AC  0E80               	movlw	128
 10210  0021AE  6E28               	movwf	___ftdiv@f2+1,c
 10211  0021B0  0E44               	movlw	68
 10212  0021B2  6E29               	movwf	___ftdiv@f2+2,c
 10213  0021B4  0E00               	movlw	0
 10214  0021B6  6E18               	movwf	___ftmul@f2,c
 10215  0021B8  0EA0               	movlw	160
 10216  0021BA  6E19               	movwf	___ftmul@f2+1,c
 10217  0021BC  0E40               	movlw	64
 10218  0021BE  6E1A               	movwf	___ftmul@f2+2,c
 10219  0021C0  CFC3 F009          	movff	4035,___lwtoft@c	;volatile
 10220  0021C4  CFC4 F00A          	movff	4036,___lwtoft@c+1	;volatile
 10221  0021C8  ECE3  F022         	call	___lwtoft	;wreg free
 10222  0021CC  C009  F015         	movff	?___lwtoft,___ftmul@f1
 10223  0021D0  C00A  F016         	movff	?___lwtoft+1,___ftmul@f1+1
 10224  0021D4  C00B  F017         	movff	?___lwtoft+2,___ftmul@f1+2
 10225  0021D8  EC61  F01B         	call	___ftmul	;wreg free
 10226  0021DC  C015  F024         	movff	?___ftmul,___ftdiv@f1
 10227  0021E0  C016  F025         	movff	?___ftmul+1,___ftdiv@f1+1
 10228  0021E4  C017  F026         	movff	?___ftmul+2,___ftdiv@f1+2
 10229  0021E8  EC44  F01C         	call	___ftdiv	;wreg free
 10230  0021EC  C024  F04E         	movff	?___ftdiv,_getTemp$1307
 10231  0021F0  C025  F04F         	movff	?___ftdiv+1,_getTemp$1307+1
 10232  0021F4  C026  F050         	movff	?___ftdiv+2,_getTemp$1307+2
 10233                           
 10234                           ;temp.c: 64: else
 10235                           ;temp.c: 65: {
 10236                           ;temp.c: 66: tmp = (( ((double)ADRES) * ((double)5.0)/((double)1024.0) / (((double)56.0)
      +                          /((double)10.0)) / ((double)0.0195) - (((double).4 - (((double)5.0)/((((double)12.0) + (
      +                          (double)1.0))/((double)1.0)))) / ((double)0.0195)) ) * 5.0 / 9.0 + 32.0);
 10237  0021F8  0E33               	movlw	51
 10238  0021FA  6E27               	movwf	___ftdiv@f2,c
 10239  0021FC  0EB3               	movlw	179
 10240  0021FE  6E28               	movwf	___ftdiv@f2+1,c
 10241  002200  0E40               	movlw	64
 10242  002202  6E29               	movwf	___ftdiv@f2+2,c
 10243  002204  C04E  F024         	movff	_getTemp$1307,___ftdiv@f1
 10244  002208  C04F  F025         	movff	_getTemp$1307+1,___ftdiv@f1+1
 10245  00220C  C050  F026         	movff	_getTemp$1307+2,___ftdiv@f1+2
 10246  002210  EC44  F01C         	call	___ftdiv	;wreg free
 10247  002214  C024  F051         	movff	?___ftdiv,_getTemp$1308
 10248  002218  C025  F052         	movff	?___ftdiv+1,_getTemp$1308+1
 10249  00221C  C026  F053         	movff	?___ftdiv+2,_getTemp$1308+2
 10250                           
 10251                           ;temp.c: 64: else
 10252                           ;temp.c: 65: {
 10253                           ;temp.c: 66: tmp = (( ((double)ADRES) * ((double)5.0)/((double)1024.0) / (((double)56.0)
      +                          /((double)10.0)) / ((double)0.0195) - (((double).4 - (((double)5.0)/((((double)12.0) + (
      +                          (double)1.0))/((double)1.0)))) / ((double)0.0195)) ) * 5.0 / 9.0 + 32.0);
 10254  002220  0E00               	movlw	0
 10255  002222  6E18               	movwf	___ftmul@f2,c
 10256  002224  0EA0               	movlw	160
 10257  002226  6E19               	movwf	___ftmul@f2+1,c
 10258  002228  0E40               	movlw	64
 10259  00222A  6E1A               	movwf	___ftmul@f2+2,c
 10260  00222C  0EF9               	movlw	249
 10261  00222E  6E36               	movwf	___ftadd@f2,c
 10262  002230  0E49               	movlw	73
 10263  002232  6E37               	movwf	___ftadd@f2+1,c
 10264  002234  0EBF               	movlw	191
 10265  002236  6E38               	movwf	___ftadd@f2+2,c
 10266  002238  0EBE               	movlw	190
 10267  00223A  6E27               	movwf	___ftdiv@f2,c
 10268  00223C  0E9F               	movlw	159
 10269  00223E  6E28               	movwf	___ftdiv@f2+1,c
 10270  002240  0E3C               	movlw	60
 10271  002242  6E29               	movwf	___ftdiv@f2+2,c
 10272  002244  C051  F024         	movff	_getTemp$1308,___ftdiv@f1
 10273  002248  C052  F025         	movff	_getTemp$1308+1,___ftdiv@f1+1
 10274  00224C  C053  F026         	movff	_getTemp$1308+2,___ftdiv@f1+2
 10275  002250  EC44  F01C         	call	___ftdiv	;wreg free
 10276  002254  C024  F033         	movff	?___ftdiv,___ftadd@f1
 10277  002258  C025  F034         	movff	?___ftdiv+1,___ftadd@f1+1
 10278  00225C  C026  F035         	movff	?___ftdiv+2,___ftadd@f1+2
 10279  002260  EC44  F017         	call	___ftadd	;wreg free
 10280  002264  C033  F015         	movff	?___ftadd,___ftmul@f1
 10281  002268  C034  F016         	movff	?___ftadd+1,___ftmul@f1+1
 10282  00226C  C035  F017         	movff	?___ftadd+2,___ftmul@f1+2
 10283  002270  EC61  F01B         	call	___ftmul	;wreg free
 10284  002274  C015  F048         	movff	?___ftmul,_getTemp$1309
 10285  002278  C016  F049         	movff	?___ftmul+1,_getTemp$1309+1
 10286  00227C  C017  F04A         	movff	?___ftmul+2,_getTemp$1309+2
 10287                           
 10288                           ;temp.c: 64: else
 10289                           ;temp.c: 65: {
 10290                           ;temp.c: 66: tmp = (( ((double)ADRES) * ((double)5.0)/((double)1024.0) / (((double)56.0)
      +                          /((double)10.0)) / ((double)0.0195) - (((double).4 - (((double)5.0)/((((double)12.0) + (
      +                          (double)1.0))/((double)1.0)))) / ((double)0.0195)) ) * 5.0 / 9.0 + 32.0);
 10291  002280  0E00               	movlw	0
 10292  002282  6E27               	movwf	___ftdiv@f2,c
 10293  002284  0E10               	movlw	16
 10294  002286  6E28               	movwf	___ftdiv@f2+1,c
 10295  002288  0E41               	movlw	65
 10296  00228A  6E29               	movwf	___ftdiv@f2+2,c
 10297  00228C  C048  F024         	movff	_getTemp$1309,___ftdiv@f1
 10298  002290  C049  F025         	movff	_getTemp$1309+1,___ftdiv@f1+1
 10299  002294  C04A  F026         	movff	_getTemp$1309+2,___ftdiv@f1+2
 10300  002298  EC44  F01C         	call	___ftdiv	;wreg free
 10301  00229C  C024  F033         	movff	?___ftdiv,___ftadd@f1
 10302  0022A0  C025  F034         	movff	?___ftdiv+1,___ftadd@f1+1
 10303  0022A4  C026  F035         	movff	?___ftdiv+2,___ftadd@f1+2
 10304  0022A8  0E00               	movlw	0
 10305  0022AA  6E36               	movwf	___ftadd@f2,c
 10306  0022AC  0E00               	movlw	0
 10307  0022AE  6E37               	movwf	___ftadd@f2+1,c
 10308  0022B0  0E42               	movlw	66
 10309  0022B2  6E38               	movwf	___ftadd@f2+2,c
 10310  0022B4  EC44  F017         	call	___ftadd	;wreg free
 10311  0022B8                     L21:
 10312  0022B8  C033  F054         	movff	?___ftadd,getTemp@tmp
 10313  0022BC  C034  F055         	movff	?___ftadd+1,getTemp@tmp+1
 10314  0022C0  C035  F056         	movff	?___ftadd+2,getTemp@tmp+2
 10315                           
 10316                           ;temp.c: 67: }
 10317                           ;temp.c: 68: float total = tmp;
 10318  0022C4  C054  F04B         	movff	getTemp@tmp,getTemp@total
 10319  0022C8  C055  F04C         	movff	getTemp@tmp+1,getTemp@total+1
 10320  0022CC  C056  F04D         	movff	getTemp@tmp+2,getTemp@total+2
 10321                           
 10322                           ;temp.c: 69: oldTemps[3] = tmp;
 10323  0022D0  C054  F147         	movff	getTemp@tmp,_oldTemps+9
 10324  0022D4  C055  F148         	movff	getTemp@tmp+1,_oldTemps+10
 10325  0022D8  C056  F149         	movff	getTemp@tmp+2,_oldTemps+11
 10326                           
 10327                           ;temp.c: 70: for (cnt = 0; cnt < 3; cnt++)
 10328  0022DC  0E00               	movlw	0
 10329  0022DE  6E57               	movwf	getTemp@cnt,c
 10330  0022E0  D038               	goto	L23
 10331  0022E2                     i2l5228:
 10332                           
 10333                           ;temp.c: 71: {
 10334                           ;temp.c: 72: oldTemps[cnt] = oldTempsTemp[cnt];
 10335  0022E2  5057               	movf	getTemp@cnt,w,c
 10336  0022E4  0D03               	mullw	3
 10337  0022E6  0E3F               	movlw	low getTemp@oldTempsTemp
 10338  0022E8  24F3               	addwf	prodl,w,c
 10339  0022EA  6ED9               	movwf	fsr2l,c
 10340  0022EC  0E00               	movlw	high getTemp@oldTempsTemp
 10341  0022EE  20F4               	addwfc	prodh,w,c
 10342  0022F0  6EDA               	movwf	fsr2h,c
 10343  0022F2  5057               	movf	getTemp@cnt,w,c
 10344  0022F4  0D03               	mullw	3
 10345  0022F6  0101               	movlb	1	; () banked
 10346  0022F8  0E3E               	movlw	low _oldTemps
 10347  0022FA  24F3               	addwf	prodl,w,c
 10348  0022FC  6EE1               	movwf	fsr1l,c
 10349  0022FE  0101               	movlb	1	; () banked
 10350  002300  0E01               	movlw	high _oldTemps
 10351  002302  20F4               	addwfc	prodh,w,c
 10352  002304  6EE2               	movwf	fsr1h,c
 10353  002306  CFDE FFE6          	movff	postinc2,postinc1
 10354  00230A  CFDE FFE6          	movff	postinc2,postinc1
 10355  00230E  CFDE FFE5          	movff	postinc2,postdec1
 10356  002312  52E5               	movf	postdec1,f,c
 10357                           
 10358                           ; BSR set to: 1
 10359                           ;temp.c: 73: total += oldTemps[cnt];
 10360  002314  C04B  F033         	movff	getTemp@total,___ftadd@f1
 10361  002318  C04C  F034         	movff	getTemp@total+1,___ftadd@f1+1
 10362  00231C  C04D  F035         	movff	getTemp@total+2,___ftadd@f1+2
 10363  002320  5057               	movf	getTemp@cnt,w,c
 10364  002322  0D03               	mullw	3
 10365  002324  0101               	movlb	1	; () banked
 10366  002326  0E3E               	movlw	low _oldTemps
 10367  002328  24F3               	addwf	prodl,w,c
 10368  00232A  6ED9               	movwf	fsr2l,c
 10369  00232C  0101               	movlb	1	; () banked
 10370  00232E  0E01               	movlw	high _oldTemps
 10371  002330  20F4               	addwfc	prodh,w,c
 10372  002332  6EDA               	movwf	fsr2h,c
 10373  002334  CFDE F036          	movff	postinc2,___ftadd@f2
 10374  002338  CFDE F037          	movff	postinc2,___ftadd@f2+1
 10375  00233C  CFDD F038          	movff	postdec2,___ftadd@f2+2
 10376  002340  EC44  F017         	call	___ftadd	;wreg free
 10377  002344  C033  F04B         	movff	?___ftadd,getTemp@total
 10378  002348  C034  F04C         	movff	?___ftadd+1,getTemp@total+1
 10379  00234C  C035  F04D         	movff	?___ftadd+2,getTemp@total+2
 10380  002350  2A57               	incf	getTemp@cnt,f,c
 10381  002352                     L23:
 10382  002352  0E02               	movlw	2
 10383  002354  6457               	cpfsgt	getTemp@cnt,c
 10384  002356  D7C5               	goto	i2l5228
 10385                           
 10386                           ;temp.c: 74: }
 10387                           ;temp.c: 76: temp = total / 4;
 10388  002358  C04B  F024         	movff	getTemp@total,___ftdiv@f1
 10389  00235C  C04C  F025         	movff	getTemp@total+1,___ftdiv@f1+1
 10390  002360  C04D  F026         	movff	getTemp@total+2,___ftdiv@f1+2
 10391  002364  0E00               	movlw	0
 10392  002366  6E27               	movwf	___ftdiv@f2,c
 10393  002368  0E80               	movlw	128
 10394  00236A  6E28               	movwf	___ftdiv@f2+1,c
 10395  00236C  0E40               	movlw	64
 10396  00236E  6E29               	movwf	___ftdiv@f2+2,c
 10397  002370  EC44  F01C         	call	___ftdiv	;wreg free
 10398  002374  C024  F0B9         	movff	?___ftdiv,_temp
 10399  002378  C025  F0BA         	movff	?___ftdiv+1,_temp+1
 10400  00237C  C026  F0BB         	movff	?___ftdiv+2,_temp+2
 10401                           
 10402                           ;temp.c: 77: return temp;
 10403                           ;	Return value of _getTemp is never used
 10404  002380  0012               	return	
 10405  002382                     __end_of_getTemp:
 10406                           	opt stack 0
 10407                           tosu	equ	0xFFF
 10408                           tosh	equ	0xFFE
 10409                           tosl	equ	0xFFD
 10410                           pclatu	equ	0xFFB
 10411                           pclath	equ	0xFFA
 10412                           tblptru	equ	0xFF8
 10413                           tblptrh	equ	0xFF7
 10414                           tblptrl	equ	0xFF6
 10415                           tablat	equ	0xFF5
 10416                           prodh	equ	0xFF4
 10417                           prodl	equ	0xFF3
 10418                           intcon	equ	0xFF2
 10419                           intcon2	equ	0xFF1
 10420                           indf0	equ	0xFEF
 10421                           postinc0	equ	0xFEE
 10422                           fsr0h	equ	0xFEA
 10423                           fsr0l	equ	0xFE9
 10424                           wreg	equ	0xFE8
 10425                           postinc1	equ	0xFE6
 10426                           postdec1	equ	0xFE5
 10427                           fsr1h	equ	0xFE2
 10428                           fsr1l	equ	0xFE1
 10429                           indf2	equ	0xFDF
 10430                           postinc2	equ	0xFDE
 10431                           postdec2	equ	0xFDD
 10432                           fsr2h	equ	0xFDA
 10433                           fsr2l	equ	0xFD9
 10434                           status	equ	0xFD8
 10435                           
 10436 ;; *************** function ___lwtoft *****************
 10437 ;; Defined at:
 10438 ;;		line 28 in file "/opt/microchip/xc8/v1.32/sources/common/lwtoft.c"
 10439 ;; Parameters:    Size  Location     Type
 10440 ;;  c               2    8[COMRAM] unsigned int 
 10441 ;; Auto vars:     Size  Location     Type
 10442 ;;		None
 10443 ;; Return value:  Size  Location     Type
 10444 ;;                  3    8[COMRAM] float 
 10445 ;; Registers used:
 10446 ;;		wreg, status,2, status,0, cstack
 10447 ;; Tracked objects:
 10448 ;;		On entry : 0/0
 10449 ;;		On exit  : 0/0
 10450 ;;		Unchanged: 0/0
 10451 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10452 ;;      Params:         3       0       0       0       0       0       0       0       0
 10453 ;;      Locals:         0       0       0       0       0       0       0       0       0
 10454 ;;      Temps:          0       0       0       0       0       0       0       0       0
 10455 ;;      Totals:         3       0       0       0       0       0       0       0       0
 10456 ;;Total ram usage:        3 bytes
 10457 ;; Hardware stack levels used:    1
 10458 ;; Hardware stack levels required when called:    1
 10459 ;; This function calls:
 10460 ;;		___ftpack
 10461 ;; This function is called by:
 10462 ;;		_getTemp
 10463 ;; This function uses a non-reentrant model
 10464 ;;
 10465                           
 10466                           	psect	text32
 10467  0045C6                     __ptext32:
 10468                           	opt stack 0
 10469  0045C6                     ___lwtoft:
 10470                           	opt stack 23
 10471                           
 10472                           ;incstack = 0
 10473  0045C6  C009  F001         	movff	___lwtoft@c,___ftpack@arg
 10474  0045CA  C00A  F002         	movff	___lwtoft@c+1,___ftpack@arg+1
 10475  0045CE  6A03               	clrf	___ftpack@arg+2,c
 10476  0045D0  0E8E               	movlw	142
 10477  0045D2  6E04               	movwf	___ftpack@exp,c
 10478  0045D4  0E00               	movlw	0
 10479  0045D6  6E05               	movwf	___ftpack@sign,c
 10480  0045D8  EC70  F01D         	call	___ftpack	;wreg free
 10481  0045DC  C001  F009         	movff	?___ftpack,?___lwtoft
 10482  0045E0  C002  F00A         	movff	?___ftpack+1,?___lwtoft+1
 10483  0045E4  C003  F00B         	movff	?___ftpack+2,?___lwtoft+2
 10484  0045E8  0012               	return	
 10485  0045EA                     __end_of___lwtoft:
 10486                           	opt stack 0
 10487                           tosu	equ	0xFFF
 10488                           tosh	equ	0xFFE
 10489                           tosl	equ	0xFFD
 10490                           pclatu	equ	0xFFB
 10491                           pclath	equ	0xFFA
 10492                           tblptru	equ	0xFF8
 10493                           tblptrh	equ	0xFF7
 10494                           tblptrl	equ	0xFF6
 10495                           tablat	equ	0xFF5
 10496                           prodh	equ	0xFF4
 10497                           prodl	equ	0xFF3
 10498                           intcon	equ	0xFF2
 10499                           intcon2	equ	0xFF1
 10500                           indf0	equ	0xFEF
 10501                           postinc0	equ	0xFEE
 10502                           fsr0h	equ	0xFEA
 10503                           fsr0l	equ	0xFE9
 10504                           wreg	equ	0xFE8
 10505                           postinc1	equ	0xFE6
 10506                           postdec1	equ	0xFE5
 10507                           fsr1h	equ	0xFE2
 10508                           fsr1l	equ	0xFE1
 10509                           indf2	equ	0xFDF
 10510                           postinc2	equ	0xFDE
 10511                           postdec2	equ	0xFDD
 10512                           fsr2h	equ	0xFDA
 10513                           fsr2l	equ	0xFD9
 10514                           status	equ	0xFD8
 10515                           
 10516 ;; *************** function ___ftmul *****************
 10517 ;; Defined at:
 10518 ;;		line 62 in file "/opt/microchip/xc8/v1.32/sources/common/ftmul.c"
 10519 ;; Parameters:    Size  Location     Type
 10520 ;;  f1              3   20[COMRAM] float 
 10521 ;;  f2              3   23[COMRAM] float 
 10522 ;; Auto vars:     Size  Location     Type
 10523 ;;  f3_as_produc    3   30[COMRAM] unsigned um
 10524 ;;  sign            1   34[COMRAM] unsigned char 
 10525 ;;  cntr            1   33[COMRAM] unsigned char 
 10526 ;;  exp             1   29[COMRAM] unsigned char 
 10527 ;; Return value:  Size  Location     Type
 10528 ;;                  3   20[COMRAM] float 
 10529 ;; Registers used:
 10530 ;;		wreg, status,2, status,0, cstack
 10531 ;; Tracked objects:
 10532 ;;		On entry : 0/0
 10533 ;;		On exit  : 0/0
 10534 ;;		Unchanged: 0/0
 10535 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10536 ;;      Params:         6       0       0       0       0       0       0       0       0
 10537 ;;      Locals:         6       0       0       0       0       0       0       0       0
 10538 ;;      Temps:          3       0       0       0       0       0       0       0       0
 10539 ;;      Totals:        15       0       0       0       0       0       0       0       0
 10540 ;;Total ram usage:       15 bytes
 10541 ;; Hardware stack levels used:    1
 10542 ;; Hardware stack levels required when called:    1
 10543 ;; This function calls:
 10544 ;;		___ftpack
 10545 ;; This function is called by:
 10546 ;;		_getTemp
 10547 ;;		_printTemp
 10548 ;;		_fround
 10549 ;;		_scale
 10550 ;;		_sprintf
 10551 ;; This function uses a non-reentrant model
 10552 ;;
 10553                           
 10554                           	psect	text33
 10555  0036C2                     __ptext33:
 10556                           	opt stack 0
 10557  0036C2                     ___ftmul:
 10558                           	opt stack 21
 10559                           
 10560                           ;incstack = 0
 10561  0036C2  C017  F01B         	movff	___ftmul@f1+2,??___ftmul
 10562  0036C6  6A1C               	clrf	(??___ftmul+1)& (0+255),c
 10563  0036C8  6A1D               	clrf	(??___ftmul+2)& (0+255),c
 10564  0036CA  3416               	rlcf	___ftmul@f1+1,w,c
 10565  0036CC  361B               	rlcf	??___ftmul& (0+255),f,c
 10566  0036CE  E301               	bnc	u351_41
 10567  0036D0  801C               	bsf	(??___ftmul+1)& (0+255),0,c
 10568  0036D2                     u351_41:
 10569  0036D2  501B               	movf	??___ftmul,w,c
 10570  0036D4  6E1E               	movwf	___ftmul@exp,c
 10571  0036D6  661E               	tstfsz	___ftmul@exp& (0+255),c
 10572  0036D8  D001               	goto	i2l3826
 10573  0036DA  D00C               	goto	i2u354_40
 10574  0036DC                     i2l3826:
 10575  0036DC  C01A  F01B         	movff	___ftmul@f2+2,??___ftmul
 10576  0036E0  6A1C               	clrf	(??___ftmul+1)& (0+255),c
 10577  0036E2  6A1D               	clrf	(??___ftmul+2)& (0+255),c
 10578  0036E4  3419               	rlcf	___ftmul@f2+1,w,c
 10579  0036E6  361B               	rlcf	??___ftmul& (0+255),f,c
 10580  0036E8  E301               	bnc	u353_41
 10581  0036EA  801C               	bsf	(??___ftmul+1)& (0+255),0,c
 10582  0036EC                     u353_41:
 10583  0036EC  501B               	movf	??___ftmul,w,c
 10584  0036EE  6E23               	movwf	___ftmul@sign,c
 10585  0036F0  6623               	tstfsz	___ftmul@sign& (0+255),c
 10586  0036F2  D007               	goto	i2l3832
 10587  0036F4                     i2u354_40:
 10588  0036F4  0E00               	movlw	0
 10589  0036F6  6E15               	movwf	?___ftmul,c
 10590  0036F8  0E00               	movlw	0
 10591  0036FA  6E16               	movwf	?___ftmul+1,c
 10592  0036FC  0E00               	movlw	0
 10593  0036FE  6E17               	movwf	?___ftmul+2,c
 10594  003700  D051               	goto	i2l1214
 10595  003702                     i2l3832:
 10596  003702  5023               	movf	___ftmul@sign,w,c
 10597  003704  0F7B               	addlw	123
 10598  003706  261E               	addwf	___ftmul@exp,f,c
 10599  003708  C017  F023         	movff	___ftmul@f1+2,___ftmul@sign
 10600  00370C  501A               	movf	___ftmul@f2+2,w,c
 10601  00370E  1A23               	xorwf	___ftmul@sign,f,c
 10602  003710  0E80               	movlw	128
 10603  003712  1623               	andwf	___ftmul@sign,f,c
 10604  003714  8E16               	bsf	___ftmul@f1+1,7,c
 10605  003716  8E19               	bsf	___ftmul@f2+1,7,c
 10606  003718  0EFF               	movlw	255
 10607  00371A  1618               	andwf	___ftmul@f2,f,c
 10608  00371C  0EFF               	movlw	255
 10609  00371E  1619               	andwf	___ftmul@f2+1,f,c
 10610  003720  0E00               	movlw	0
 10611  003722  161A               	andwf	___ftmul@f2+2,f,c
 10612  003724  0E00               	movlw	0
 10613  003726  6E1F               	movwf	___ftmul@f3_as_product,c
 10614  003728  0E00               	movlw	0
 10615  00372A  6E20               	movwf	___ftmul@f3_as_product+1,c
 10616  00372C  0E00               	movlw	0
 10617  00372E  6E21               	movwf	___ftmul@f3_as_product+2,c
 10618  003730  0E07               	movlw	7
 10619  003732  6E22               	movwf	___ftmul@cntr,c
 10620  003734                     i2l3846:
 10621  003734  A015               	btfss	___ftmul@f1,0,c
 10622  003736  D006               	goto	i2l3850
 10623  003738  5018               	movf	___ftmul@f2,w,c
 10624  00373A  261F               	addwf	___ftmul@f3_as_product,f,c
 10625  00373C  5019               	movf	___ftmul@f2+1,w,c
 10626  00373E  2220               	addwfc	___ftmul@f3_as_product+1,f,c
 10627  003740  501A               	movf	___ftmul@f2+2,w,c
 10628  003742  2221               	addwfc	___ftmul@f3_as_product+2,f,c
 10629  003744                     i2l3850:
 10630  003744  90D8               	bcf	status,0,c
 10631  003746  3217               	rrcf	___ftmul@f1+2,f,c
 10632  003748  3216               	rrcf	___ftmul@f1+1,f,c
 10633  00374A  3215               	rrcf	___ftmul@f1,f,c
 10634  00374C  90D8               	bcf	status,0,c
 10635  00374E  3618               	rlcf	___ftmul@f2,f,c
 10636  003750  3619               	rlcf	___ftmul@f2+1,f,c
 10637  003752  361A               	rlcf	___ftmul@f2+2,f,c
 10638  003754  2E22               	decfsz	___ftmul@cntr,f,c
 10639  003756  D7EE               	goto	i2l3846
 10640  003758  0E09               	movlw	9
 10641  00375A  6E22               	movwf	___ftmul@cntr,c
 10642  00375C                     i2l3856:
 10643  00375C  A015               	btfss	___ftmul@f1,0,c
 10644  00375E  D006               	goto	i2l3860
 10645  003760  5018               	movf	___ftmul@f2,w,c
 10646  003762  261F               	addwf	___ftmul@f3_as_product,f,c
 10647  003764  5019               	movf	___ftmul@f2+1,w,c
 10648  003766  2220               	addwfc	___ftmul@f3_as_product+1,f,c
 10649  003768  501A               	movf	___ftmul@f2+2,w,c
 10650  00376A  2221               	addwfc	___ftmul@f3_as_product+2,f,c
 10651  00376C                     i2l3860:
 10652  00376C  90D8               	bcf	status,0,c
 10653  00376E  3217               	rrcf	___ftmul@f1+2,f,c
 10654  003770  3216               	rrcf	___ftmul@f1+1,f,c
 10655  003772  3215               	rrcf	___ftmul@f1,f,c
 10656  003774  90D8               	bcf	status,0,c
 10657  003776  3221               	rrcf	___ftmul@f3_as_product+2,f,c
 10658  003778  3220               	rrcf	___ftmul@f3_as_product+1,f,c
 10659  00377A  321F               	rrcf	___ftmul@f3_as_product,f,c
 10660  00377C  2E22               	decfsz	___ftmul@cntr,f,c
 10661  00377E  D7EE               	goto	i2l3856
 10662  003780  C01F  F001         	movff	___ftmul@f3_as_product,___ftpack@arg
 10663  003784  C020  F002         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
 10664  003788  C021  F003         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
 10665  00378C  C01E  F004         	movff	___ftmul@exp,___ftpack@exp
 10666  003790  C023  F005         	movff	___ftmul@sign,___ftpack@sign
 10667  003794  EC70  F01D         	call	___ftpack	;wreg free
 10668  003798  C001  F015         	movff	?___ftpack,?___ftmul
 10669  00379C  C002  F016         	movff	?___ftpack+1,?___ftmul+1
 10670  0037A0  C003  F017         	movff	?___ftpack+2,?___ftmul+2
 10671  0037A4                     i2l1214:
 10672  0037A4  0012               	return	
 10673  0037A6                     __end_of___ftmul:
 10674                           	opt stack 0
 10675                           tosu	equ	0xFFF
 10676                           tosh	equ	0xFFE
 10677                           tosl	equ	0xFFD
 10678                           pclatu	equ	0xFFB
 10679                           pclath	equ	0xFFA
 10680                           tblptru	equ	0xFF8
 10681                           tblptrh	equ	0xFF7
 10682                           tblptrl	equ	0xFF6
 10683                           tablat	equ	0xFF5
 10684                           prodh	equ	0xFF4
 10685                           prodl	equ	0xFF3
 10686                           intcon	equ	0xFF2
 10687                           intcon2	equ	0xFF1
 10688                           indf0	equ	0xFEF
 10689                           postinc0	equ	0xFEE
 10690                           fsr0h	equ	0xFEA
 10691                           fsr0l	equ	0xFE9
 10692                           wreg	equ	0xFE8
 10693                           postinc1	equ	0xFE6
 10694                           postdec1	equ	0xFE5
 10695                           fsr1h	equ	0xFE2
 10696                           fsr1l	equ	0xFE1
 10697                           indf2	equ	0xFDF
 10698                           postinc2	equ	0xFDE
 10699                           postdec2	equ	0xFDD
 10700                           fsr2h	equ	0xFDA
 10701                           fsr2l	equ	0xFD9
 10702                           status	equ	0xFD8
 10703                           
 10704 ;; *************** function ___ftdiv *****************
 10705 ;; Defined at:
 10706 ;;		line 49 in file "/opt/microchip/xc8/v1.32/sources/common/ftdiv.c"
 10707 ;; Parameters:    Size  Location     Type
 10708 ;;  f1              3   35[COMRAM] float 
 10709 ;;  f2              3   38[COMRAM] float 
 10710 ;; Auto vars:     Size  Location     Type
 10711 ;;  f3              3   45[COMRAM] float 
 10712 ;;  sign            1   49[COMRAM] unsigned char 
 10713 ;;  exp             1   48[COMRAM] unsigned char 
 10714 ;;  cntr            1   44[COMRAM] unsigned char 
 10715 ;; Return value:  Size  Location     Type
 10716 ;;                  3   35[COMRAM] float 
 10717 ;; Registers used:
 10718 ;;		wreg, status,2, status,0, cstack
 10719 ;; Tracked objects:
 10720 ;;		On entry : 0/0
 10721 ;;		On exit  : 0/0
 10722 ;;		Unchanged: 0/0
 10723 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10724 ;;      Params:         6       0       0       0       0       0       0       0       0
 10725 ;;      Locals:         6       0       0       0       0       0       0       0       0
 10726 ;;      Temps:          3       0       0       0       0       0       0       0       0
 10727 ;;      Totals:        15       0       0       0       0       0       0       0       0
 10728 ;;Total ram usage:       15 bytes
 10729 ;; Hardware stack levels used:    1
 10730 ;; Hardware stack levels required when called:    1
 10731 ;; This function calls:
 10732 ;;		___ftpack
 10733 ;; This function is called by:
 10734 ;;		_getTemp
 10735 ;;		_printTemp
 10736 ;; This function uses a non-reentrant model
 10737 ;;
 10738                           
 10739                           	psect	text34
 10740  003888                     __ptext34:
 10741                           	opt stack 0
 10742  003888                     ___ftdiv:
 10743                           	opt stack 23
 10744                           
 10745                           ;incstack = 0
 10746  003888  C026  F02A         	movff	___ftdiv@f1+2,??___ftdiv
 10747  00388C  6A2B               	clrf	(??___ftdiv+1)& (0+255),c
 10748  00388E  6A2C               	clrf	(??___ftdiv+2)& (0+255),c
 10749  003890  3425               	rlcf	___ftdiv@f1+1,w,c
 10750  003892  362A               	rlcf	??___ftdiv& (0+255),f,c
 10751  003894  E301               	bnc	u531_41
 10752  003896  802B               	bsf	(??___ftdiv+1)& (0+255),0,c
 10753  003898                     u531_41:
 10754  003898  502A               	movf	??___ftdiv,w,c
 10755  00389A  6E31               	movwf	___ftdiv@exp,c
 10756  00389C  6631               	tstfsz	___ftdiv@exp& (0+255),c
 10757  00389E  D001               	goto	i2l5006
 10758  0038A0  D00C               	goto	i2u534_40
 10759  0038A2                     i2l5006:
 10760  0038A2  C029  F02A         	movff	___ftdiv@f2+2,??___ftdiv
 10761  0038A6  6A2B               	clrf	(??___ftdiv+1)& (0+255),c
 10762  0038A8  6A2C               	clrf	(??___ftdiv+2)& (0+255),c
 10763  0038AA  3428               	rlcf	___ftdiv@f2+1,w,c
 10764  0038AC  362A               	rlcf	??___ftdiv& (0+255),f,c
 10765  0038AE  E301               	bnc	u533_41
 10766  0038B0  802B               	bsf	(??___ftdiv+1)& (0+255),0,c
 10767  0038B2                     u533_41:
 10768  0038B2  502A               	movf	??___ftdiv,w,c
 10769  0038B4  6E32               	movwf	___ftdiv@sign,c
 10770  0038B6  6632               	tstfsz	___ftdiv@sign& (0+255),c
 10771  0038B8  D007               	goto	i2l5012
 10772  0038BA                     i2u534_40:
 10773  0038BA  0E00               	movlw	0
 10774  0038BC  6E24               	movwf	?___ftdiv,c
 10775  0038BE  0E00               	movlw	0
 10776  0038C0  6E25               	movwf	?___ftdiv+1,c
 10777  0038C2  0E00               	movlw	0
 10778  0038C4  6E26               	movwf	?___ftdiv+2,c
 10779  0038C6  D04A               	goto	i2l1182
 10780  0038C8                     i2l5012:
 10781  0038C8  0E00               	movlw	0
 10782  0038CA  6E2E               	movwf	___ftdiv@f3,c
 10783  0038CC  0E00               	movlw	0
 10784  0038CE  6E2F               	movwf	___ftdiv@f3+1,c
 10785  0038D0  0E00               	movlw	0
 10786  0038D2  6E30               	movwf	___ftdiv@f3+2,c
 10787  0038D4  5032               	movf	___ftdiv@sign,w,c
 10788  0038D6  0F89               	addlw	137
 10789  0038D8  5E31               	subwf	___ftdiv@exp,f,c
 10790  0038DA  C026  F032         	movff	___ftdiv@f1+2,___ftdiv@sign
 10791  0038DE  5029               	movf	___ftdiv@f2+2,w,c
 10792  0038E0  1A32               	xorwf	___ftdiv@sign,f,c
 10793  0038E2  0E80               	movlw	128
 10794  0038E4  1632               	andwf	___ftdiv@sign,f,c
 10795  0038E6  8E25               	bsf	___ftdiv@f1+1,7,c
 10796  0038E8  0EFF               	movlw	255
 10797  0038EA  1624               	andwf	___ftdiv@f1,f,c
 10798  0038EC  0EFF               	movlw	255
 10799  0038EE  1625               	andwf	___ftdiv@f1+1,f,c
 10800  0038F0  0E00               	movlw	0
 10801  0038F2  1626               	andwf	___ftdiv@f1+2,f,c
 10802  0038F4  8E28               	bsf	___ftdiv@f2+1,7,c
 10803  0038F6  0EFF               	movlw	255
 10804  0038F8  1627               	andwf	___ftdiv@f2,f,c
 10805  0038FA  0EFF               	movlw	255
 10806  0038FC  1628               	andwf	___ftdiv@f2+1,f,c
 10807  0038FE  0E00               	movlw	0
 10808  003900  1629               	andwf	___ftdiv@f2+2,f,c
 10809  003902  0E18               	movlw	24
 10810  003904  6E2D               	movwf	___ftdiv@cntr,c
 10811  003906                     i2l5032:
 10812  003906  90D8               	bcf	status,0,c
 10813  003908  362E               	rlcf	___ftdiv@f3,f,c
 10814  00390A  362F               	rlcf	___ftdiv@f3+1,f,c
 10815  00390C  3630               	rlcf	___ftdiv@f3+2,f,c
 10816  00390E  5027               	movf	___ftdiv@f2,w,c
 10817  003910  5C24               	subwf	___ftdiv@f1,w,c
 10818  003912  5028               	movf	___ftdiv@f2+1,w,c
 10819  003914  5825               	subwfb	___ftdiv@f1+1,w,c
 10820  003916  5029               	movf	___ftdiv@f2+2,w,c
 10821  003918  5826               	subwfb	___ftdiv@f1+2,w,c
 10822  00391A  A0D8               	btfss	status,0,c
 10823  00391C  D007               	goto	i2l1185
 10824  00391E  5027               	movf	___ftdiv@f2,w,c
 10825  003920  5E24               	subwf	___ftdiv@f1,f,c
 10826  003922  5028               	movf	___ftdiv@f2+1,w,c
 10827  003924  5A25               	subwfb	___ftdiv@f1+1,f,c
 10828  003926  5029               	movf	___ftdiv@f2+2,w,c
 10829  003928  5A26               	subwfb	___ftdiv@f1+2,f,c
 10830  00392A  802E               	bsf	___ftdiv@f3,0,c
 10831  00392C                     i2l1185:
 10832  00392C  90D8               	bcf	status,0,c
 10833  00392E  3624               	rlcf	___ftdiv@f1,f,c
 10834  003930  3625               	rlcf	___ftdiv@f1+1,f,c
 10835  003932  3626               	rlcf	___ftdiv@f1+2,f,c
 10836  003934  2E2D               	decfsz	___ftdiv@cntr,f,c
 10837  003936  D7E7               	goto	i2l5032
 10838  003938  C02E  F001         	movff	___ftdiv@f3,___ftpack@arg
 10839  00393C  C02F  F002         	movff	___ftdiv@f3+1,___ftpack@arg+1
 10840  003940  C030  F003         	movff	___ftdiv@f3+2,___ftpack@arg+2
 10841  003944  C031  F004         	movff	___ftdiv@exp,___ftpack@exp
 10842  003948  C032  F005         	movff	___ftdiv@sign,___ftpack@sign
 10843  00394C  EC70  F01D         	call	___ftpack	;wreg free
 10844  003950  C001  F024         	movff	?___ftpack,?___ftdiv
 10845  003954  C002  F025         	movff	?___ftpack+1,?___ftdiv+1
 10846  003958  C003  F026         	movff	?___ftpack+2,?___ftdiv+2
 10847  00395C                     i2l1182:
 10848  00395C  0012               	return	
 10849  00395E                     __end_of___ftdiv:
 10850                           	opt stack 0
 10851                           tosu	equ	0xFFF
 10852                           tosh	equ	0xFFE
 10853                           tosl	equ	0xFFD
 10854                           pclatu	equ	0xFFB
 10855                           pclath	equ	0xFFA
 10856                           tblptru	equ	0xFF8
 10857                           tblptrh	equ	0xFF7
 10858                           tblptrl	equ	0xFF6
 10859                           tablat	equ	0xFF5
 10860                           prodh	equ	0xFF4
 10861                           prodl	equ	0xFF3
 10862                           intcon	equ	0xFF2
 10863                           intcon2	equ	0xFF1
 10864                           indf0	equ	0xFEF
 10865                           postinc0	equ	0xFEE
 10866                           fsr0h	equ	0xFEA
 10867                           fsr0l	equ	0xFE9
 10868                           wreg	equ	0xFE8
 10869                           postinc1	equ	0xFE6
 10870                           postdec1	equ	0xFE5
 10871                           fsr1h	equ	0xFE2
 10872                           fsr1l	equ	0xFE1
 10873                           indf2	equ	0xFDF
 10874                           postinc2	equ	0xFDE
 10875                           postdec2	equ	0xFDD
 10876                           fsr2h	equ	0xFDA
 10877                           fsr2l	equ	0xFD9
 10878                           status	equ	0xFD8
 10879                           
 10880 ;; *************** function ___ftadd *****************
 10881 ;; Defined at:
 10882 ;;		line 86 in file "/opt/microchip/xc8/v1.32/sources/common/ftadd.c"
 10883 ;; Parameters:    Size  Location     Type
 10884 ;;  f1              3   50[COMRAM] float 
 10885 ;;  f2              3   53[COMRAM] float 
 10886 ;; Auto vars:     Size  Location     Type
 10887 ;;  exp1            1   61[COMRAM] unsigned char 
 10888 ;;  exp2            1   60[COMRAM] unsigned char 
 10889 ;;  sign            1   59[COMRAM] unsigned char 
 10890 ;; Return value:  Size  Location     Type
 10891 ;;                  3   50[COMRAM] float 
 10892 ;; Registers used:
 10893 ;;		wreg, status,2, status,0, cstack
 10894 ;; Tracked objects:
 10895 ;;		On entry : 0/0
 10896 ;;		On exit  : 0/0
 10897 ;;		Unchanged: 0/0
 10898 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10899 ;;      Params:         6       0       0       0       0       0       0       0       0
 10900 ;;      Locals:         3       0       0       0       0       0       0       0       0
 10901 ;;      Temps:          3       0       0       0       0       0       0       0       0
 10902 ;;      Totals:        12       0       0       0       0       0       0       0       0
 10903 ;;Total ram usage:       12 bytes
 10904 ;; Hardware stack levels used:    1
 10905 ;; Hardware stack levels required when called:    1
 10906 ;; This function calls:
 10907 ;;		___ftpack
 10908 ;; This function is called by:
 10909 ;;		_getTemp
 10910 ;;		_sprintf
 10911 ;;		___ftsub
 10912 ;; This function uses a non-reentrant model
 10913 ;;
 10914                           
 10915                           	psect	text35
 10916  002E88                     __ptext35:
 10917                           	opt stack 0
 10918  002E88                     ___ftadd:
 10919                           	opt stack 21
 10920                           
 10921                           ;incstack = 0
 10922  002E88  C035  F039         	movff	___ftadd@f1+2,??___ftadd
 10923  002E8C  6A3A               	clrf	(??___ftadd+1)& (0+255),c
 10924  002E8E  6A3B               	clrf	(??___ftadd+2)& (0+255),c
 10925  002E90  3434               	rlcf	___ftadd@f1+1,w,c
 10926  002E92  3639               	rlcf	??___ftadd& (0+255),f,c
 10927  002E94  E301               	bnc	u330_41
 10928  002E96  803A               	bsf	(??___ftadd+1)& (0+255),0,c
 10929  002E98                     u330_41:
 10930  002E98  5039               	movf	??___ftadd,w,c
 10931  002E9A  6E3E               	movwf	___ftadd@exp1,c
 10932  002E9C  C038  F039         	movff	___ftadd@f2+2,??___ftadd
 10933  002EA0  6A3A               	clrf	(??___ftadd+1)& (0+255),c
 10934  002EA2  6A3B               	clrf	(??___ftadd+2)& (0+255),c
 10935  002EA4  3437               	rlcf	___ftadd@f2+1,w,c
 10936  002EA6  3639               	rlcf	??___ftadd& (0+255),f,c
 10937  002EA8  E301               	bnc	u331_41
 10938  002EAA  803A               	bsf	(??___ftadd+1)& (0+255),0,c
 10939  002EAC                     u331_41:
 10940  002EAC  5039               	movf	??___ftadd,w,c
 10941  002EAE  6E3D               	movwf	___ftadd@exp2,c
 10942  002EB0  503E               	movf	___ftadd@exp1,w,c
 10943  002EB2  B4D8               	btfsc	status,2,c
 10944  002EB4  D00C               	goto	i2l1150
 10945  002EB6  503D               	movf	___ftadd@exp2,w,c
 10946  002EB8  5C3E               	subwf	___ftadd@exp1,w,c
 10947  002EBA  B0D8               	btfsc	status,0,c
 10948  002EBC  D00F               	goto	i2l3758
 10949  002EBE  503E               	movf	___ftadd@exp1,w,c
 10950  002EC0  0800               	sublw	0
 10951  002EC2  243D               	addwf	___ftadd@exp2,w,c
 10952  002EC4  6E39               	movwf	??___ftadd& (0+255),c
 10953  002EC6  0E19               	movlw	25
 10954  002EC8  5C39               	subwf	??___ftadd,w,c
 10955  002ECA  A0D8               	btfss	status,0,c
 10956  002ECC  D007               	goto	i2l3758
 10957  002ECE                     i2l1150:
 10958  002ECE  C036  F033         	movff	___ftadd@f2,?___ftadd
 10959  002ED2  C037  F034         	movff	___ftadd@f2+1,?___ftadd+1
 10960  002ED6  C038  F035         	movff	___ftadd@f2+2,?___ftadd+2
 10961  002EDA  D0AB               	goto	i2l1151
 10962  002EDC                     i2l3758:
 10963  002EDC  503D               	movf	___ftadd@exp2,w,c
 10964  002EDE  B4D8               	btfsc	status,2,c
 10965  002EE0  D00C               	goto	i2l1154
 10966  002EE2  503E               	movf	___ftadd@exp1,w,c
 10967  002EE4  5C3D               	subwf	___ftadd@exp2,w,c
 10968  002EE6  B0D8               	btfsc	status,0,c
 10969  002EE8  D00F               	goto	i2l3764
 10970  002EEA  503D               	movf	___ftadd@exp2,w,c
 10971  002EEC  0800               	sublw	0
 10972  002EEE  243E               	addwf	___ftadd@exp1,w,c
 10973  002EF0  6E39               	movwf	??___ftadd& (0+255),c
 10974  002EF2  0E19               	movlw	25
 10975  002EF4  5C39               	subwf	??___ftadd,w,c
 10976  002EF6  A0D8               	btfss	status,0,c
 10977  002EF8  D007               	goto	i2l3764
 10978  002EFA                     i2l1154:
 10979  002EFA  C033  F033         	movff	___ftadd@f1,?___ftadd
 10980  002EFE  C034  F034         	movff	___ftadd@f1+1,?___ftadd+1
 10981  002F02  C035  F035         	movff	___ftadd@f1+2,?___ftadd+2
 10982  002F06  D095               	goto	i2l1151
 10983  002F08                     i2l3764:
 10984  002F08  0E06               	movlw	6
 10985  002F0A  6E3C               	movwf	___ftadd@sign,c
 10986  002F0C  BE35               	btfsc	___ftadd@f1+2,7,c
 10987  002F0E  8E3C               	bsf	___ftadd@sign,7,c
 10988  002F10  BE38               	btfsc	___ftadd@f2+2,7,c
 10989  002F12  8C3C               	bsf	___ftadd@sign,6,c
 10990  002F14  8E34               	bsf	___ftadd@f1+1,7,c
 10991  002F16  0EFF               	movlw	255
 10992  002F18  1633               	andwf	___ftadd@f1,f,c
 10993  002F1A  0EFF               	movlw	255
 10994  002F1C  1634               	andwf	___ftadd@f1+1,f,c
 10995  002F1E  0E00               	movlw	0
 10996  002F20  1635               	andwf	___ftadd@f1+2,f,c
 10997  002F22  8E37               	bsf	___ftadd@f2+1,7,c
 10998  002F24  0EFF               	movlw	255
 10999  002F26  1636               	andwf	___ftadd@f2,f,c
 11000  002F28  0EFF               	movlw	255
 11001  002F2A  1637               	andwf	___ftadd@f2+1,f,c
 11002  002F2C  0E00               	movlw	0
 11003  002F2E  1638               	andwf	___ftadd@f2+2,f,c
 11004  002F30  503D               	movf	___ftadd@exp2,w,c
 11005  002F32  5C3E               	subwf	___ftadd@exp1,w,c
 11006  002F34  B0D8               	btfsc	status,0,c
 11007  002F36  D01A               	goto	i2l3790
 11008  002F38                     i2l3780:
 11009  002F38  90D8               	bcf	status,0,c
 11010  002F3A  3636               	rlcf	___ftadd@f2,f,c
 11011  002F3C  3637               	rlcf	___ftadd@f2+1,f,c
 11012  002F3E  3638               	rlcf	___ftadd@f2+2,f,c
 11013  002F40  063D               	decf	___ftadd@exp2,f,c
 11014  002F42  503D               	movf	___ftadd@exp2,w,c
 11015  002F44  183E               	xorwf	___ftadd@exp1,w,c
 11016  002F46  B4D8               	btfsc	status,2,c
 11017  002F48  D00D               	goto	i2l3788
 11018  002F4A  063C               	decf	___ftadd@sign,f,c
 11019  002F4C  C03C  F039         	movff	___ftadd@sign,??___ftadd
 11020  002F50  0E07               	movlw	7
 11021  002F52  1639               	andwf	??___ftadd,f,c
 11022  002F54  B4D8               	btfsc	status,2,c
 11023  002F56  D006               	goto	i2l3788
 11024  002F58  D7EF               	goto	i2l3780
 11025  002F5A                     i2l3786:
 11026  002F5A  90D8               	bcf	status,0,c
 11027  002F5C  3235               	rrcf	___ftadd@f1+2,f,c
 11028  002F5E  3234               	rrcf	___ftadd@f1+1,f,c
 11029  002F60  3233               	rrcf	___ftadd@f1,f,c
 11030  002F62  2A3E               	incf	___ftadd@exp1,f,c
 11031  002F64                     i2l3788:
 11032  002F64  503D               	movf	___ftadd@exp2,w,c
 11033  002F66  623E               	cpfseq	___ftadd@exp1,c
 11034  002F68  D7F8               	goto	i2l3786
 11035  002F6A  D01D               	goto	i2l1165
 11036  002F6C                     i2l3790:
 11037  002F6C  503E               	movf	___ftadd@exp1,w,c
 11038  002F6E  5C3D               	subwf	___ftadd@exp2,w,c
 11039  002F70  B0D8               	btfsc	status,0,c
 11040  002F72  D019               	goto	i2l1165
 11041  002F74                     i2l3792:
 11042  002F74  90D8               	bcf	status,0,c
 11043  002F76  3633               	rlcf	___ftadd@f1,f,c
 11044  002F78  3634               	rlcf	___ftadd@f1+1,f,c
 11045  002F7A  3635               	rlcf	___ftadd@f1+2,f,c
 11046  002F7C  063E               	decf	___ftadd@exp1,f,c
 11047  002F7E  503D               	movf	___ftadd@exp2,w,c
 11048  002F80  183E               	xorwf	___ftadd@exp1,w,c
 11049  002F82  B4D8               	btfsc	status,2,c
 11050  002F84  D00D               	goto	i2l3800
 11051  002F86  063C               	decf	___ftadd@sign,f,c
 11052  002F88  C03C  F039         	movff	___ftadd@sign,??___ftadd
 11053  002F8C  0E07               	movlw	7
 11054  002F8E  1639               	andwf	??___ftadd,f,c
 11055  002F90  B4D8               	btfsc	status,2,c
 11056  002F92  D006               	goto	i2l3800
 11057  002F94  D7EF               	goto	i2l3792
 11058  002F96                     i2l3798:
 11059  002F96  90D8               	bcf	status,0,c
 11060  002F98  3238               	rrcf	___ftadd@f2+2,f,c
 11061  002F9A  3237               	rrcf	___ftadd@f2+1,f,c
 11062  002F9C  3236               	rrcf	___ftadd@f2,f,c
 11063  002F9E  2A3D               	incf	___ftadd@exp2,f,c
 11064  002FA0                     i2l3800:
 11065  002FA0  503D               	movf	___ftadd@exp2,w,c
 11066  002FA2  623E               	cpfseq	___ftadd@exp1,c
 11067  002FA4  D7F8               	goto	i2l3798
 11068  002FA6                     i2l1165:
 11069  002FA6  AE3C               	btfss	___ftadd@sign,7,c
 11070  002FA8  D00C               	goto	i2l1174
 11071  002FAA  0EFF               	movlw	255
 11072  002FAC  1A33               	xorwf	___ftadd@f1,f,c
 11073  002FAE  0EFF               	movlw	255
 11074  002FB0  1A34               	xorwf	___ftadd@f1+1,f,c
 11075  002FB2  0EFF               	movlw	255
 11076  002FB4  1A35               	xorwf	___ftadd@f1+2,f,c
 11077  002FB6  0E01               	movlw	1
 11078  002FB8  2633               	addwf	___ftadd@f1,f,c
 11079  002FBA  0E00               	movlw	0
 11080  002FBC  2234               	addwfc	___ftadd@f1+1,f,c
 11081  002FBE  0E00               	movlw	0
 11082  002FC0  2235               	addwfc	___ftadd@f1+2,f,c
 11083  002FC2                     i2l1174:
 11084  002FC2  AC3C               	btfss	___ftadd@sign,6,c
 11085  002FC4  D00C               	goto	i2l3806
 11086  002FC6  0EFF               	movlw	255
 11087  002FC8  1A36               	xorwf	___ftadd@f2,f,c
 11088  002FCA  0EFF               	movlw	255
 11089  002FCC  1A37               	xorwf	___ftadd@f2+1,f,c
 11090  002FCE  0EFF               	movlw	255
 11091  002FD0  1A38               	xorwf	___ftadd@f2+2,f,c
 11092  002FD2  0E01               	movlw	1
 11093  002FD4  2636               	addwf	___ftadd@f2,f,c
 11094  002FD6  0E00               	movlw	0
 11095  002FD8  2237               	addwfc	___ftadd@f2+1,f,c
 11096  002FDA  0E00               	movlw	0
 11097  002FDC  2238               	addwfc	___ftadd@f2+2,f,c
 11098  002FDE                     i2l3806:
 11099  002FDE  0E00               	movlw	0
 11100  002FE0  6E3C               	movwf	___ftadd@sign,c
 11101  002FE2  5033               	movf	___ftadd@f1,w,c
 11102  002FE4  2636               	addwf	___ftadd@f2,f,c
 11103  002FE6  5034               	movf	___ftadd@f1+1,w,c
 11104  002FE8  2237               	addwfc	___ftadd@f2+1,f,c
 11105  002FEA  5035               	movf	___ftadd@f1+2,w,c
 11106  002FEC  2238               	addwfc	___ftadd@f2+2,f,c
 11107  002FEE  AE38               	btfss	___ftadd@f2+2,7,c
 11108  002FF0  D00E               	goto	i2l3816
 11109  002FF2  0EFF               	movlw	255
 11110  002FF4  1A36               	xorwf	___ftadd@f2,f,c
 11111  002FF6  0EFF               	movlw	255
 11112  002FF8  1A37               	xorwf	___ftadd@f2+1,f,c
 11113  002FFA  0EFF               	movlw	255
 11114  002FFC  1A38               	xorwf	___ftadd@f2+2,f,c
 11115  002FFE  0E01               	movlw	1
 11116  003000  2636               	addwf	___ftadd@f2,f,c
 11117  003002  0E00               	movlw	0
 11118  003004  2237               	addwfc	___ftadd@f2+1,f,c
 11119  003006  0E00               	movlw	0
 11120  003008  2238               	addwfc	___ftadd@f2+2,f,c
 11121  00300A  0E01               	movlw	1
 11122  00300C  6E3C               	movwf	___ftadd@sign,c
 11123  00300E                     i2l3816:
 11124  00300E  C036  F001         	movff	___ftadd@f2,___ftpack@arg
 11125  003012  C037  F002         	movff	___ftadd@f2+1,___ftpack@arg+1
 11126  003016  C038  F003         	movff	___ftadd@f2+2,___ftpack@arg+2
 11127  00301A  C03E  F004         	movff	___ftadd@exp1,___ftpack@exp
 11128  00301E  C03C  F005         	movff	___ftadd@sign,___ftpack@sign
 11129  003022  EC70  F01D         	call	___ftpack	;wreg free
 11130  003026  C001  F033         	movff	?___ftpack,?___ftadd
 11131  00302A  C002  F034         	movff	?___ftpack+1,?___ftadd+1
 11132  00302E  C003  F035         	movff	?___ftpack+2,?___ftadd+2
 11133  003032                     i2l1151:
 11134  003032  0012               	return	
 11135  003034                     __end_of___ftadd:
 11136                           	opt stack 0
 11137                           tosu	equ	0xFFF
 11138                           tosh	equ	0xFFE
 11139                           tosl	equ	0xFFD
 11140                           pclatu	equ	0xFFB
 11141                           pclath	equ	0xFFA
 11142                           tblptru	equ	0xFF8
 11143                           tblptrh	equ	0xFF7
 11144                           tblptrl	equ	0xFF6
 11145                           tablat	equ	0xFF5
 11146                           prodh	equ	0xFF4
 11147                           prodl	equ	0xFF3
 11148                           intcon	equ	0xFF2
 11149                           intcon2	equ	0xFF1
 11150                           indf0	equ	0xFEF
 11151                           postinc0	equ	0xFEE
 11152                           fsr0h	equ	0xFEA
 11153                           fsr0l	equ	0xFE9
 11154                           wreg	equ	0xFE8
 11155                           postinc1	equ	0xFE6
 11156                           postdec1	equ	0xFE5
 11157                           fsr1h	equ	0xFE2
 11158                           fsr1l	equ	0xFE1
 11159                           indf2	equ	0xFDF
 11160                           postinc2	equ	0xFDE
 11161                           postdec2	equ	0xFDD
 11162                           fsr2h	equ	0xFDA
 11163                           fsr2l	equ	0xFD9
 11164                           status	equ	0xFD8
 11165                           
 11166 ;; *************** function ___ftpack *****************
 11167 ;; Defined at:
 11168 ;;		line 62 in file "/opt/microchip/xc8/v1.32/sources/common/float.c"
 11169 ;; Parameters:    Size  Location     Type
 11170 ;;  arg             3    0[COMRAM] unsigned um
 11171 ;;  exp             1    3[COMRAM] unsigned char 
 11172 ;;  sign            1    4[COMRAM] unsigned char 
 11173 ;; Auto vars:     Size  Location     Type
 11174 ;;		None
 11175 ;; Return value:  Size  Location     Type
 11176 ;;                  3    0[COMRAM] float 
 11177 ;; Registers used:
 11178 ;;		wreg, status,2, status,0
 11179 ;; Tracked objects:
 11180 ;;		On entry : 0/0
 11181 ;;		On exit  : 0/0
 11182 ;;		Unchanged: 0/0
 11183 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11184 ;;      Params:         5       0       0       0       0       0       0       0       0
 11185 ;;      Locals:         0       0       0       0       0       0       0       0       0
 11186 ;;      Temps:          3       0       0       0       0       0       0       0       0
 11187 ;;      Totals:         8       0       0       0       0       0       0       0       0
 11188 ;;Total ram usage:        8 bytes
 11189 ;; Hardware stack levels used:    1
 11190 ;; This function calls:
 11191 ;;		Nothing
 11192 ;; This function is called by:
 11193 ;;		___altoft
 11194 ;;		___ftadd
 11195 ;;		___ftdiv
 11196 ;;		___ftmul
 11197 ;;		___lltoft
 11198 ;;		___lwtoft
 11199 ;; This function uses a non-reentrant model
 11200 ;;
 11201                           
 11202                           	psect	text36
 11203  003AE0                     __ptext36:
 11204                           	opt stack 0
 11205  003AE0                     ___ftpack:
 11206                           	opt stack 21
 11207                           
 11208                           ;incstack = 0
 11209  003AE0  5004               	movf	___ftpack@exp,w,c
 11210  003AE2  B4D8               	btfsc	status,2,c
 11211  003AE4  D005               	goto	i2l3598
 11212  003AE6  5001               	movf	___ftpack@arg,w,c
 11213  003AE8  1002               	iorwf	___ftpack@arg+1,w,c
 11214  003AEA  1003               	iorwf	___ftpack@arg+2,w,c
 11215  003AEC  A4D8               	btfss	status,2,c
 11216  003AEE  D00C               	goto	i2l3604
 11217  003AF0                     i2l3598:
 11218  003AF0  0E00               	movlw	0
 11219  003AF2  6E01               	movwf	?___ftpack,c
 11220  003AF4  0E00               	movlw	0
 11221  003AF6  6E02               	movwf	?___ftpack+1,c
 11222  003AF8  0E00               	movlw	0
 11223  003AFA  6E03               	movwf	?___ftpack+2,c
 11224  003AFC  D044               	goto	i2l1113
 11225  003AFE                     i2l3602:
 11226  003AFE  2A04               	incf	___ftpack@exp,f,c
 11227  003B00  90D8               	bcf	status,0,c
 11228  003B02  3203               	rrcf	___ftpack@arg+2,f,c
 11229  003B04  3202               	rrcf	___ftpack@arg+1,f,c
 11230  003B06  3201               	rrcf	___ftpack@arg,f,c
 11231  003B08                     i2l3604:
 11232  003B08  0E00               	movlw	0
 11233  003B0A  1401               	andwf	___ftpack@arg,w,c
 11234  003B0C  6E06               	movwf	??___ftpack& (0+255),c
 11235  003B0E  0E00               	movlw	0
 11236  003B10  1402               	andwf	___ftpack@arg+1,w,c
 11237  003B12  6E07               	movwf	(??___ftpack+1)& (0+255),c
 11238  003B14  0EFE               	movlw	254
 11239  003B16  1403               	andwf	___ftpack@arg+2,w,c
 11240  003B18  6E08               	movwf	(??___ftpack+2)& (0+255),c
 11241  003B1A  5006               	movf	??___ftpack,w,c
 11242  003B1C  1007               	iorwf	??___ftpack+1,w,c
 11243  003B1E  1008               	iorwf	??___ftpack+2,w,c
 11244  003B20  B4D8               	btfsc	status,2,c
 11245  003B22  D00C               	goto	i2l3610
 11246  003B24  D7EC               	goto	i2l3602
 11247  003B26                     i2l3606:
 11248  003B26  2A04               	incf	___ftpack@exp,f,c
 11249  003B28  0E01               	movlw	1
 11250  003B2A  2601               	addwf	___ftpack@arg,f,c
 11251  003B2C  0E00               	movlw	0
 11252  003B2E  2202               	addwfc	___ftpack@arg+1,f,c
 11253  003B30  0E00               	movlw	0
 11254  003B32  2203               	addwfc	___ftpack@arg+2,f,c
 11255  003B34  90D8               	bcf	status,0,c
 11256  003B36  3203               	rrcf	___ftpack@arg+2,f,c
 11257  003B38  3202               	rrcf	___ftpack@arg+1,f,c
 11258  003B3A  3201               	rrcf	___ftpack@arg,f,c
 11259  003B3C                     i2l3610:
 11260  003B3C  0E00               	movlw	0
 11261  003B3E  1401               	andwf	___ftpack@arg,w,c
 11262  003B40  6E06               	movwf	??___ftpack& (0+255),c
 11263  003B42  0E00               	movlw	0
 11264  003B44  1402               	andwf	___ftpack@arg+1,w,c
 11265  003B46  6E07               	movwf	(??___ftpack+1)& (0+255),c
 11266  003B48  0EFF               	movlw	255
 11267  003B4A  1403               	andwf	___ftpack@arg+2,w,c
 11268  003B4C  6E08               	movwf	(??___ftpack+2)& (0+255),c
 11269  003B4E  5006               	movf	??___ftpack,w,c
 11270  003B50  1007               	iorwf	??___ftpack+1,w,c
 11271  003B52  1008               	iorwf	??___ftpack+2,w,c
 11272  003B54  B4D8               	btfsc	status,2,c
 11273  003B56  D006               	goto	i2l3614
 11274  003B58  D7E6               	goto	i2l3606
 11275  003B5A                     i2l3612:
 11276  003B5A  0604               	decf	___ftpack@exp,f,c
 11277  003B5C  90D8               	bcf	status,0,c
 11278  003B5E  3601               	rlcf	___ftpack@arg,f,c
 11279  003B60  3602               	rlcf	___ftpack@arg+1,f,c
 11280  003B62  3603               	rlcf	___ftpack@arg+2,f,c
 11281  003B64                     i2l3614:
 11282  003B64  AE02               	btfss	___ftpack@arg+1,7,c
 11283  003B66  D7F9               	goto	i2l3612
 11284  003B68  A004               	btfss	___ftpack@exp,0,c
 11285  003B6A  9E02               	bcf	___ftpack@arg+1,7,c
 11286  003B6C  90D8               	bcf	status,0,c
 11287  003B6E  3204               	rrcf	___ftpack@exp,f,c
 11288  003B70  5004               	movf	___ftpack@exp,w,c
 11289  003B72  1203               	iorwf	___ftpack@arg+2,f,c
 11290  003B74  5005               	movf	___ftpack@sign,w,c
 11291  003B76  A4D8               	btfss	status,2,c
 11292  003B78  8E03               	bsf	___ftpack@arg+2,7,c
 11293  003B7A  C001  F001         	movff	___ftpack@arg,?___ftpack
 11294  003B7E  C002  F002         	movff	___ftpack@arg+1,?___ftpack+1
 11295  003B82  C003  F003         	movff	___ftpack@arg+2,?___ftpack+2
 11296  003B86                     i2l1113:
 11297  003B86  0012               	return	
 11298  003B88                     __end_of___ftpack:
 11299                           	opt stack 0
 11300                           tosu	equ	0xFFF
 11301                           tosh	equ	0xFFE
 11302                           tosl	equ	0xFFD
 11303                           pclatu	equ	0xFFB
 11304                           pclath	equ	0xFFA
 11305                           tblptru	equ	0xFF8
 11306                           tblptrh	equ	0xFF7
 11307                           tblptrl	equ	0xFF6
 11308                           tablat	equ	0xFF5
 11309                           prodh	equ	0xFF4
 11310                           prodl	equ	0xFF3
 11311                           intcon	equ	0xFF2
 11312                           intcon2	equ	0xFF1
 11313                           indf0	equ	0xFEF
 11314                           postinc0	equ	0xFEE
 11315                           fsr0h	equ	0xFEA
 11316                           fsr0l	equ	0xFE9
 11317                           wreg	equ	0xFE8
 11318                           postinc1	equ	0xFE6
 11319                           postdec1	equ	0xFE5
 11320                           fsr1h	equ	0xFE2
 11321                           fsr1l	equ	0xFE1
 11322                           indf2	equ	0xFDF
 11323                           postinc2	equ	0xFDE
 11324                           postdec2	equ	0xFDD
 11325                           fsr2h	equ	0xFDA
 11326                           fsr2l	equ	0xFD9
 11327                           status	equ	0xFD8
 11328                           
 11329 ;; *************** function _buttons *****************
 11330 ;; Defined at:
 11331 ;;		line 23 in file "buttons.c"
 11332 ;; Parameters:    Size  Location     Type
 11333 ;;		None
 11334 ;; Auto vars:     Size  Location     Type
 11335 ;;		None
 11336 ;; Return value:  Size  Location     Type
 11337 ;;		None               void
 11338 ;; Registers used:
 11339 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11340 ;; Tracked objects:
 11341 ;;		On entry : 0/0
 11342 ;;		On exit  : 0/0
 11343 ;;		Unchanged: 0/0
 11344 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11345 ;;      Params:         0       0       0       0       0       0       0       0       0
 11346 ;;      Locals:         0       0       0       0       0       0       0       0       0
 11347 ;;      Temps:          8       0       0       0       0       0       0       0       0
 11348 ;;      Totals:         8       0       0       0       0       0       0       0       0
 11349 ;;Total ram usage:        8 bytes
 11350 ;; Hardware stack levels used:    1
 11351 ;; Hardware stack levels required when called:    5
 11352 ;; This function calls:
 11353 ;;		_advMenu
 11354 ;;		_advState
 11355 ;; This function is called by:
 11356 ;;		_isr
 11357 ;; This function uses a non-reentrant model
 11358 ;;
 11359                           
 11360                           	psect	text37
 11361  000EC8                     __ptext37:
 11362                           	opt stack 0
 11363  000EC8                     _buttons:
 11364                           	opt stack 20
 11365                           
 11366                           ;buttons.c: 25: waitcnt++;
 11367                           
 11368                           ;incstack = 0
 11369  000EC8  0E01               	movlw	1
 11370  000ECA  0100               	movlb	0	; () banked
 11371  000ECC  27B5               	addwf	_waitcnt& (0+255),f,b
 11372  000ECE  0E00               	movlw	0
 11373  000ED0  0100               	movlb	0	; () banked
 11374  000ED2  23B6               	addwfc	(_waitcnt+1)& (0+255),f,b
 11375  000ED4  0100               	movlb	0	; () banked
 11376  000ED6  23B7               	addwfc	(_waitcnt+2)& (0+255),f,b
 11377  000ED8  0100               	movlb	0	; () banked
 11378  000EDA  23B8               	addwfc	(_waitcnt+3)& (0+255),f,b
 11379                           
 11380                           ; BSR set to: 0
 11381                           ;buttons.c: 28: if ((( PORTB) & 0b1) && ((int32_t) (waitCnt[0] - waitcnt) <= 0))
 11382  000EDC  A081               	btfss	3969,0,c	;volatile
 11383  000EDE  D051               	goto	i2l5274
 11384                           
 11385                           ; BSR set to: 0
 11386  000EE0  0100               	movlb	0	; () banked
 11387  000EE2  C0B5  F028         	movff	_waitcnt,??_buttons
 11388  000EE6  0100               	movlb	0	; () banked
 11389  000EE8  C0B6  F029         	movff	_waitcnt+1,??_buttons+1
 11390  000EEC  0100               	movlb	0	; () banked
 11391  000EEE  C0B7  F02A         	movff	_waitcnt+2,??_buttons+2
 11392  000EF2  0100               	movlb	0	; () banked
 11393  000EF4  C0B8  F02B         	movff	_waitcnt+3,??_buttons+3
 11394  000EF8  1E28               	comf	??_buttons,f,c
 11395  000EFA  1E29               	comf	??_buttons+1,f,c
 11396  000EFC  1E2A               	comf	??_buttons+2,f,c
 11397  000EFE  1E2B               	comf	??_buttons+3,f,c
 11398  000F00  2A28               	incf	??_buttons,f,c
 11399  000F02  0E00               	movlw	0
 11400  000F04  2229               	addwfc	??_buttons+1,f,c
 11401  000F06  222A               	addwfc	??_buttons+2,f,c
 11402  000F08  222B               	addwfc	??_buttons+3,f,c
 11403  000F0A  0101               	movlb	1	; () banked
 11404  000F0C  5100               	movf	_waitCnt& (0+255),w,b
 11405  000F0E  2428               	addwf	??_buttons,w,c
 11406  000F10  6E2C               	movwf	(??_buttons+4)& (0+255),c
 11407  000F12  0101               	movlb	1	; () banked
 11408  000F14  5101               	movf	(_waitCnt+1)& (0+255),w,b
 11409  000F16  2029               	addwfc	??_buttons+1,w,c
 11410  000F18  6E2D               	movwf	(??_buttons+5)& (0+255),c
 11411  000F1A  0101               	movlb	1	; () banked
 11412  000F1C  5102               	movf	(_waitCnt+2)& (0+255),w,b
 11413  000F1E  202A               	addwfc	??_buttons+2,w,c
 11414  000F20  6E2E               	movwf	(??_buttons+6)& (0+255),c
 11415  000F22  0101               	movlb	1	; () banked
 11416  000F24  5103               	movf	(_waitCnt+3)& (0+255),w,b
 11417  000F26  202B               	addwfc	??_buttons+3,w,c
 11418  000F28  6E2F               	movwf	(??_buttons+7)& (0+255),c
 11419  000F2A  502F               	movf	??_buttons+7,w,c
 11420  000F2C  0A80               	xorlw	128
 11421  000F2E  0F80               	addlw	128
 11422  000F30  E108               	bnz	i2u553_45
 11423  000F32  0E00               	movlw	0
 11424  000F34  5C2E               	subwf	??_buttons+6,w,c
 11425  000F36  E105               	bnz	i2u553_45
 11426  000F38  0E00               	movlw	0
 11427  000F3A  5C2D               	subwf	??_buttons+5,w,c
 11428  000F3C  E102               	bnz	i2u553_45
 11429  000F3E  0E01               	movlw	1
 11430  000F40  5C2C               	subwf	??_buttons+4,w,c
 11431  000F42                     i2u553_45:
 11432  000F42  B0D8               	btfsc	status,0,c
 11433  000F44  D01E               	goto	i2l5274
 11434                           
 11435                           ; BSR set to: 1
 11436                           ;buttons.c: 29: {
 11437                           ;buttons.c: 30: waitCnt[0] = waitcnt + 150;
 11438  000F46  0E96               	movlw	150
 11439  000F48  0100               	movlb	0	; () banked
 11440  000F4A  25B5               	addwf	_waitcnt& (0+255),w,b
 11441  000F4C  0101               	movlb	1	; () banked
 11442  000F4E  6F00               	movwf	_waitCnt& (0+255),b
 11443  000F50  0E00               	movlw	0
 11444  000F52  0100               	movlb	0	; () banked
 11445  000F54  21B6               	addwfc	(_waitcnt+1)& (0+255),w,b
 11446  000F56  0101               	movlb	1	; () banked
 11447  000F58  6F01               	movwf	(_waitCnt+1)& (0+255),b
 11448  000F5A  0E00               	movlw	0
 11449  000F5C  0100               	movlb	0	; () banked
 11450  000F5E  21B7               	addwfc	(_waitcnt+2)& (0+255),w,b
 11451  000F60  0101               	movlb	1	; () banked
 11452  000F62  6F02               	movwf	(_waitCnt+2)& (0+255),b
 11453  000F64  0E00               	movlw	0
 11454  000F66  0100               	movlb	0	; () banked
 11455  000F68  21B8               	addwfc	(_waitcnt+3)& (0+255),w,b
 11456  000F6A  0101               	movlb	1	; () banked
 11457  000F6C  6F03               	movwf	(_waitCnt+3)& (0+255),b
 11458                           
 11459                           ; BSR set to: 1
 11460                           ;buttons.c: 31: LATC7 = advState();
 11461  000F6E  ECD3  F01B         	call	_advState	;wreg free
 11462  000F72  6E28               	movwf	??_buttons& (0+255),c
 11463  000F74  3028               	rrcf	??_buttons,w,c
 11464  000F76  A0D8               	btfss	status,0,c
 11465  000F78  D001               	bra	i2u554_45
 11466  000F7A  8E8B               	bsf	3979,7,c	;volatile
 11467  000F7C                     i2u554_45:
 11468  000F7C  B0D8               	btfsc	status,0,c
 11469  000F7E  D001               	bra	i2u554_46
 11470  000F80  9E8B               	bcf	3979,7,c	;volatile
 11471  000F82                     i2u554_46:
 11472  000F82                     i2l5274:
 11473                           
 11474                           ;buttons.c: 32: }
 11475                           ;buttons.c: 33: if ((( PORTB) & 0b10) && ((int32_t) (waitCnt[1] - waitcnt) <= 0))
 11476  000F82  A281               	btfss	3969,1,c	;volatile
 11477  000F84  D058               	goto	i2l5282
 11478  000F86  0100               	movlb	0	; () banked
 11479  000F88  C0B5  F028         	movff	_waitcnt,??_buttons
 11480  000F8C  0100               	movlb	0	; () banked
 11481  000F8E  C0B6  F029         	movff	_waitcnt+1,??_buttons+1
 11482  000F92  0100               	movlb	0	; () banked
 11483  000F94  C0B7  F02A         	movff	_waitcnt+2,??_buttons+2
 11484  000F98  0100               	movlb	0	; () banked
 11485  000F9A  C0B8  F02B         	movff	_waitcnt+3,??_buttons+3
 11486  000F9E  1E28               	comf	??_buttons,f,c
 11487  000FA0  1E29               	comf	??_buttons+1,f,c
 11488  000FA2  1E2A               	comf	??_buttons+2,f,c
 11489  000FA4  1E2B               	comf	??_buttons+3,f,c
 11490  000FA6  2A28               	incf	??_buttons,f,c
 11491  000FA8  0E00               	movlw	0
 11492  000FAA  2229               	addwfc	??_buttons+1,f,c
 11493  000FAC  222A               	addwfc	??_buttons+2,f,c
 11494  000FAE  222B               	addwfc	??_buttons+3,f,c
 11495  000FB0  0101               	movlb	1	; () banked
 11496  000FB2  5104               	movf	(_waitCnt+4)& (0+255),w,b
 11497  000FB4  2428               	addwf	??_buttons,w,c
 11498  000FB6  6E2C               	movwf	(??_buttons+4)& (0+255),c
 11499  000FB8  0101               	movlb	1	; () banked
 11500  000FBA  5105               	movf	(_waitCnt+5)& (0+255),w,b
 11501  000FBC  2029               	addwfc	??_buttons+1,w,c
 11502  000FBE  6E2D               	movwf	(??_buttons+5)& (0+255),c
 11503  000FC0  0101               	movlb	1	; () banked
 11504  000FC2  5106               	movf	(_waitCnt+6)& (0+255),w,b
 11505  000FC4  202A               	addwfc	??_buttons+2,w,c
 11506  000FC6  6E2E               	movwf	(??_buttons+6)& (0+255),c
 11507  000FC8  0101               	movlb	1	; () banked
 11508  000FCA  5107               	movf	(_waitCnt+7)& (0+255),w,b
 11509  000FCC  202B               	addwfc	??_buttons+3,w,c
 11510  000FCE  6E2F               	movwf	(??_buttons+7)& (0+255),c
 11511  000FD0  502F               	movf	??_buttons+7,w,c
 11512  000FD2  0A80               	xorlw	128
 11513  000FD4  0F80               	addlw	128
 11514  000FD6  E108               	bnz	i2u556_45
 11515  000FD8  0E00               	movlw	0
 11516  000FDA  5C2E               	subwf	??_buttons+6,w,c
 11517  000FDC  E105               	bnz	i2u556_45
 11518  000FDE  0E00               	movlw	0
 11519  000FE0  5C2D               	subwf	??_buttons+5,w,c
 11520  000FE2  E102               	bnz	i2u556_45
 11521  000FE4  0E01               	movlw	1
 11522  000FE6  5C2C               	subwf	??_buttons+4,w,c
 11523  000FE8                     i2u556_45:
 11524  000FE8  B0D8               	btfsc	status,0,c
 11525  000FEA  D025               	goto	i2l5282
 11526                           
 11527                           ; BSR set to: 1
 11528                           ;buttons.c: 34: {
 11529                           ;buttons.c: 35: waitCnt[1] = waitcnt + 150;
 11530  000FEC  0E96               	movlw	150
 11531  000FEE  0100               	movlb	0	; () banked
 11532  000FF0  25B5               	addwf	_waitcnt& (0+255),w,b
 11533  000FF2  0101               	movlb	1	; () banked
 11534  000FF4  6F04               	movwf	(_waitCnt+4)& (0+255),b
 11535  000FF6  0E00               	movlw	0
 11536  000FF8  0100               	movlb	0	; () banked
 11537  000FFA  21B6               	addwfc	(_waitcnt+1)& (0+255),w,b
 11538  000FFC  0101               	movlb	1	; () banked
 11539  000FFE  6F05               	movwf	(_waitCnt+5)& (0+255),b
 11540  001000  0E00               	movlw	0
 11541  001002  0100               	movlb	0	; () banked
 11542  001004  21B7               	addwfc	(_waitcnt+2)& (0+255),w,b
 11543  001006  0101               	movlb	1	; () banked
 11544  001008  6F06               	movwf	(_waitCnt+6)& (0+255),b
 11545  00100A  0E00               	movlw	0
 11546  00100C  0100               	movlb	0	; () banked
 11547  00100E  21B8               	addwfc	(_waitcnt+3)& (0+255),w,b
 11548  001010  0101               	movlb	1	; () banked
 11549  001012  6F07               	movwf	(_waitCnt+7)& (0+255),b
 11550                           
 11551                           ;buttons.c: 36: screen.brightness++;
 11552  001014  0E01               	movlw	1
 11553  001016  6E28               	movwf	??_buttons& (0+255),c
 11554  001018  0100               	movlb	0	; () banked
 11555  00101A  51DC               	movf	(_screen+9)& (0+255),w,b
 11556  00101C  0B0F               	andlw	15
 11557  00101E  6E29               	movwf	(??_buttons+1)& (0+255),c
 11558  001020  5028               	movf	??_buttons,w,c
 11559  001022  2629               	addwf	??_buttons+1,f,c
 11560  001024  0100               	movlb	0	; () banked
 11561  001026  51DC               	movf	(_screen+9)& (0+255),w,b
 11562  001028  1829               	xorwf	(??_buttons+1)& (0+255),w,c
 11563  00102A  0BF0               	andlw	-16
 11564  00102C  1829               	xorwf	(??_buttons+1)& (0+255),w,c
 11565  00102E  0100               	movlb	0	; () banked
 11566  001030  6FDC               	movwf	(_screen+9)& (0+255),b
 11567                           
 11568                           ; BSR set to: 0
 11569                           ;buttons.c: 37: screen.changed |= (1 << 10);
 11570  001032  0100               	movlb	0	; () banked
 11571  001034  85DF               	bsf	(_screen+12)& (0+255),2,b
 11572  001036                     i2l5282:
 11573                           
 11574                           ;buttons.c: 38: }
 11575                           ;buttons.c: 39: if ((( PORTB) & 0b100) && ((int32_t) (waitCnt[2] - waitcnt) <= 0))
 11576  001036  A481               	btfss	3969,2,c	;volatile
 11577  001038  D049               	goto	i2l5290
 11578  00103A  0100               	movlb	0	; () banked
 11579  00103C  C0B5  F028         	movff	_waitcnt,??_buttons
 11580  001040  0100               	movlb	0	; () banked
 11581  001042  C0B6  F029         	movff	_waitcnt+1,??_buttons+1
 11582  001046  0100               	movlb	0	; () banked
 11583  001048  C0B7  F02A         	movff	_waitcnt+2,??_buttons+2
 11584  00104C  0100               	movlb	0	; () banked
 11585  00104E  C0B8  F02B         	movff	_waitcnt+3,??_buttons+3
 11586  001052  1E28               	comf	??_buttons,f,c
 11587  001054  1E29               	comf	??_buttons+1,f,c
 11588  001056  1E2A               	comf	??_buttons+2,f,c
 11589  001058  1E2B               	comf	??_buttons+3,f,c
 11590  00105A  2A28               	incf	??_buttons,f,c
 11591  00105C  0E00               	movlw	0
 11592  00105E  2229               	addwfc	??_buttons+1,f,c
 11593  001060  222A               	addwfc	??_buttons+2,f,c
 11594  001062  222B               	addwfc	??_buttons+3,f,c
 11595  001064  0101               	movlb	1	; () banked
 11596  001066  5108               	movf	(_waitCnt+8)& (0+255),w,b
 11597  001068  2428               	addwf	??_buttons,w,c
 11598  00106A  6E2C               	movwf	(??_buttons+4)& (0+255),c
 11599  00106C  0101               	movlb	1	; () banked
 11600  00106E  5109               	movf	(_waitCnt+9)& (0+255),w,b
 11601  001070  2029               	addwfc	??_buttons+1,w,c
 11602  001072  6E2D               	movwf	(??_buttons+5)& (0+255),c
 11603  001074  0101               	movlb	1	; () banked
 11604  001076  510A               	movf	(_waitCnt+10)& (0+255),w,b
 11605  001078  202A               	addwfc	??_buttons+2,w,c
 11606  00107A  6E2E               	movwf	(??_buttons+6)& (0+255),c
 11607  00107C  0101               	movlb	1	; () banked
 11608  00107E  510B               	movf	(_waitCnt+11)& (0+255),w,b
 11609  001080  202B               	addwfc	??_buttons+3,w,c
 11610  001082  6E2F               	movwf	(??_buttons+7)& (0+255),c
 11611  001084  502F               	movf	??_buttons+7,w,c
 11612  001086  0A80               	xorlw	128
 11613  001088  0F80               	addlw	128
 11614  00108A  E108               	bnz	i2u558_45
 11615  00108C  0E00               	movlw	0
 11616  00108E  5C2E               	subwf	??_buttons+6,w,c
 11617  001090  E105               	bnz	i2u558_45
 11618  001092  0E00               	movlw	0
 11619  001094  5C2D               	subwf	??_buttons+5,w,c
 11620  001096  E102               	bnz	i2u558_45
 11621  001098  0E01               	movlw	1
 11622  00109A  5C2C               	subwf	??_buttons+4,w,c
 11623  00109C                     i2u558_45:
 11624  00109C  B0D8               	btfsc	status,0,c
 11625  00109E  D016               	goto	i2l5290
 11626                           
 11627                           ; BSR set to: 1
 11628                           ;buttons.c: 40: {
 11629                           ;buttons.c: 41: waitCnt[2] = waitcnt + 150;
 11630  0010A0  0E96               	movlw	150
 11631  0010A2  0100               	movlb	0	; () banked
 11632  0010A4  25B5               	addwf	_waitcnt& (0+255),w,b
 11633  0010A6  0101               	movlb	1	; () banked
 11634  0010A8  6F08               	movwf	(_waitCnt+8)& (0+255),b
 11635  0010AA  0E00               	movlw	0
 11636  0010AC  0100               	movlb	0	; () banked
 11637  0010AE  21B6               	addwfc	(_waitcnt+1)& (0+255),w,b
 11638  0010B0  0101               	movlb	1	; () banked
 11639  0010B2  6F09               	movwf	(_waitCnt+9)& (0+255),b
 11640  0010B4  0E00               	movlw	0
 11641  0010B6  0100               	movlb	0	; () banked
 11642  0010B8  21B7               	addwfc	(_waitcnt+2)& (0+255),w,b
 11643  0010BA  0101               	movlb	1	; () banked
 11644  0010BC  6F0A               	movwf	(_waitCnt+10)& (0+255),b
 11645  0010BE  0E00               	movlw	0
 11646  0010C0  0100               	movlb	0	; () banked
 11647  0010C2  21B8               	addwfc	(_waitcnt+3)& (0+255),w,b
 11648  0010C4  0101               	movlb	1	; () banked
 11649  0010C6  6F0B               	movwf	(_waitCnt+11)& (0+255),b
 11650                           
 11651                           ; BSR set to: 1
 11652                           ;buttons.c: 42: advMenu();
 11653  0010C8  EC83  F01F         	call	_advMenu	;wreg free
 11654  0010CC                     i2l5290:
 11655                           
 11656                           ;buttons.c: 43: }
 11657                           ;buttons.c: 44: if ((( PORTB) & 0b1000) && ((int32_t) (waitCnt[3] - waitcnt) <= 0))
 11658  0010CC  A681               	btfss	3969,3,c	;volatile
 11659  0010CE  D058               	goto	i2l5298
 11660  0010D0  0100               	movlb	0	; () banked
 11661  0010D2  C0B5  F028         	movff	_waitcnt,??_buttons
 11662  0010D6  0100               	movlb	0	; () banked
 11663  0010D8  C0B6  F029         	movff	_waitcnt+1,??_buttons+1
 11664  0010DC  0100               	movlb	0	; () banked
 11665  0010DE  C0B7  F02A         	movff	_waitcnt+2,??_buttons+2
 11666  0010E2  0100               	movlb	0	; () banked
 11667  0010E4  C0B8  F02B         	movff	_waitcnt+3,??_buttons+3
 11668  0010E8  1E28               	comf	??_buttons,f,c
 11669  0010EA  1E29               	comf	??_buttons+1,f,c
 11670  0010EC  1E2A               	comf	??_buttons+2,f,c
 11671  0010EE  1E2B               	comf	??_buttons+3,f,c
 11672  0010F0  2A28               	incf	??_buttons,f,c
 11673  0010F2  0E00               	movlw	0
 11674  0010F4  2229               	addwfc	??_buttons+1,f,c
 11675  0010F6  222A               	addwfc	??_buttons+2,f,c
 11676  0010F8  222B               	addwfc	??_buttons+3,f,c
 11677  0010FA  0101               	movlb	1	; () banked
 11678  0010FC  510C               	movf	(_waitCnt+12)& (0+255),w,b
 11679  0010FE  2428               	addwf	??_buttons,w,c
 11680  001100  6E2C               	movwf	(??_buttons+4)& (0+255),c
 11681  001102  0101               	movlb	1	; () banked
 11682  001104  510D               	movf	(_waitCnt+13)& (0+255),w,b
 11683  001106  2029               	addwfc	??_buttons+1,w,c
 11684  001108  6E2D               	movwf	(??_buttons+5)& (0+255),c
 11685  00110A  0101               	movlb	1	; () banked
 11686  00110C  510E               	movf	(_waitCnt+14)& (0+255),w,b
 11687  00110E  202A               	addwfc	??_buttons+2,w,c
 11688  001110  6E2E               	movwf	(??_buttons+6)& (0+255),c
 11689  001112  0101               	movlb	1	; () banked
 11690  001114  510F               	movf	(_waitCnt+15)& (0+255),w,b
 11691  001116  202B               	addwfc	??_buttons+3,w,c
 11692  001118  6E2F               	movwf	(??_buttons+7)& (0+255),c
 11693  00111A  502F               	movf	??_buttons+7,w,c
 11694  00111C  0A80               	xorlw	128
 11695  00111E  0F80               	addlw	128
 11696  001120  E108               	bnz	i2u560_45
 11697  001122  0E00               	movlw	0
 11698  001124  5C2E               	subwf	??_buttons+6,w,c
 11699  001126  E105               	bnz	i2u560_45
 11700  001128  0E00               	movlw	0
 11701  00112A  5C2D               	subwf	??_buttons+5,w,c
 11702  00112C  E102               	bnz	i2u560_45
 11703  00112E  0E01               	movlw	1
 11704  001130  5C2C               	subwf	??_buttons+4,w,c
 11705  001132                     i2u560_45:
 11706  001132  B0D8               	btfsc	status,0,c
 11707  001134  D025               	goto	i2l5298
 11708                           
 11709                           ; BSR set to: 1
 11710                           ;buttons.c: 45: {
 11711                           ;buttons.c: 46: waitCnt[3] = waitcnt + 150;
 11712  001136  0E96               	movlw	150
 11713  001138  0100               	movlb	0	; () banked
 11714  00113A  25B5               	addwf	_waitcnt& (0+255),w,b
 11715  00113C  0101               	movlb	1	; () banked
 11716  00113E  6F0C               	movwf	(_waitCnt+12)& (0+255),b
 11717  001140  0E00               	movlw	0
 11718  001142  0100               	movlb	0	; () banked
 11719  001144  21B6               	addwfc	(_waitcnt+1)& (0+255),w,b
 11720  001146  0101               	movlb	1	; () banked
 11721  001148  6F0D               	movwf	(_waitCnt+13)& (0+255),b
 11722  00114A  0E00               	movlw	0
 11723  00114C  0100               	movlb	0	; () banked
 11724  00114E  21B7               	addwfc	(_waitcnt+2)& (0+255),w,b
 11725  001150  0101               	movlb	1	; () banked
 11726  001152  6F0E               	movwf	(_waitCnt+14)& (0+255),b
 11727  001154  0E00               	movlw	0
 11728  001156  0100               	movlb	0	; () banked
 11729  001158  21B8               	addwfc	(_waitcnt+3)& (0+255),w,b
 11730  00115A  0101               	movlb	1	; () banked
 11731  00115C  6F0F               	movwf	(_waitCnt+15)& (0+255),b
 11732                           
 11733                           ;buttons.c: 47: screen.brightness--;
 11734  00115E  0E01               	movlw	1
 11735  001160  6E28               	movwf	??_buttons& (0+255),c
 11736  001162  0100               	movlb	0	; () banked
 11737  001164  51DC               	movf	(_screen+9)& (0+255),w,b
 11738  001166  0B0F               	andlw	15
 11739  001168  6E29               	movwf	(??_buttons+1)& (0+255),c
 11740  00116A  5028               	movf	??_buttons,w,c
 11741  00116C  5E29               	subwf	??_buttons+1,f,c
 11742  00116E  0100               	movlb	0	; () banked
 11743  001170  51DC               	movf	(_screen+9)& (0+255),w,b
 11744  001172  1829               	xorwf	(??_buttons+1)& (0+255),w,c
 11745  001174  0BF0               	andlw	-16
 11746  001176  1829               	xorwf	(??_buttons+1)& (0+255),w,c
 11747  001178  0100               	movlb	0	; () banked
 11748  00117A  6FDC               	movwf	(_screen+9)& (0+255),b
 11749                           
 11750                           ; BSR set to: 0
 11751                           ;buttons.c: 48: screen.changed |= (1 << 10);
 11752  00117C  0100               	movlb	0	; () banked
 11753  00117E  85DF               	bsf	(_screen+12)& (0+255),2,b
 11754  001180                     i2l5298:
 11755                           
 11756                           ;buttons.c: 49: }
 11757                           ;buttons.c: 50: if ((( PORTB) & 0b10000) && ((int32_t) (waitCnt[4] - waitcnt) <= 0))
 11758  001180  A881               	btfss	3969,4,c	;volatile
 11759  001182  D047               	goto	i2l5304
 11760  001184  0100               	movlb	0	; () banked
 11761  001186  C0B5  F028         	movff	_waitcnt,??_buttons
 11762  00118A  0100               	movlb	0	; () banked
 11763  00118C  C0B6  F029         	movff	_waitcnt+1,??_buttons+1
 11764  001190  0100               	movlb	0	; () banked
 11765  001192  C0B7  F02A         	movff	_waitcnt+2,??_buttons+2
 11766  001196  0100               	movlb	0	; () banked
 11767  001198  C0B8  F02B         	movff	_waitcnt+3,??_buttons+3
 11768  00119C  1E28               	comf	??_buttons,f,c
 11769  00119E  1E29               	comf	??_buttons+1,f,c
 11770  0011A0  1E2A               	comf	??_buttons+2,f,c
 11771  0011A2  1E2B               	comf	??_buttons+3,f,c
 11772  0011A4  2A28               	incf	??_buttons,f,c
 11773  0011A6  0E00               	movlw	0
 11774  0011A8  2229               	addwfc	??_buttons+1,f,c
 11775  0011AA  222A               	addwfc	??_buttons+2,f,c
 11776  0011AC  222B               	addwfc	??_buttons+3,f,c
 11777  0011AE  0101               	movlb	1	; () banked
 11778  0011B0  5110               	movf	(_waitCnt+16)& (0+255),w,b
 11779  0011B2  2428               	addwf	??_buttons,w,c
 11780  0011B4  6E2C               	movwf	(??_buttons+4)& (0+255),c
 11781  0011B6  0101               	movlb	1	; () banked
 11782  0011B8  5111               	movf	(_waitCnt+17)& (0+255),w,b
 11783  0011BA  2029               	addwfc	??_buttons+1,w,c
 11784  0011BC  6E2D               	movwf	(??_buttons+5)& (0+255),c
 11785  0011BE  0101               	movlb	1	; () banked
 11786  0011C0  5112               	movf	(_waitCnt+18)& (0+255),w,b
 11787  0011C2  202A               	addwfc	??_buttons+2,w,c
 11788  0011C4  6E2E               	movwf	(??_buttons+6)& (0+255),c
 11789  0011C6  0101               	movlb	1	; () banked
 11790  0011C8  5113               	movf	(_waitCnt+19)& (0+255),w,b
 11791  0011CA  202B               	addwfc	??_buttons+3,w,c
 11792  0011CC  6E2F               	movwf	(??_buttons+7)& (0+255),c
 11793  0011CE  502F               	movf	??_buttons+7,w,c
 11794  0011D0  0A80               	xorlw	128
 11795  0011D2  0F80               	addlw	128
 11796  0011D4  E108               	bnz	i2u562_45
 11797  0011D6  0E00               	movlw	0
 11798  0011D8  5C2E               	subwf	??_buttons+6,w,c
 11799  0011DA  E105               	bnz	i2u562_45
 11800  0011DC  0E00               	movlw	0
 11801  0011DE  5C2D               	subwf	??_buttons+5,w,c
 11802  0011E0  E102               	bnz	i2u562_45
 11803  0011E2  0E01               	movlw	1
 11804  0011E4  5C2C               	subwf	??_buttons+4,w,c
 11805  0011E6                     i2u562_45:
 11806  0011E6  B0D8               	btfsc	status,0,c
 11807  0011E8  D014               	goto	i2l5304
 11808                           
 11809                           ; BSR set to: 1
 11810                           ;buttons.c: 51: {
 11811                           ;buttons.c: 52: waitCnt[4] = waitcnt + 150;
 11812  0011EA  0E96               	movlw	150
 11813  0011EC  0100               	movlb	0	; () banked
 11814  0011EE  25B5               	addwf	_waitcnt& (0+255),w,b
 11815  0011F0  0101               	movlb	1	; () banked
 11816  0011F2  6F10               	movwf	(_waitCnt+16)& (0+255),b
 11817  0011F4  0E00               	movlw	0
 11818  0011F6  0100               	movlb	0	; () banked
 11819  0011F8  21B6               	addwfc	(_waitcnt+1)& (0+255),w,b
 11820  0011FA  0101               	movlb	1	; () banked
 11821  0011FC  6F11               	movwf	(_waitCnt+17)& (0+255),b
 11822  0011FE  0E00               	movlw	0
 11823  001200  0100               	movlb	0	; () banked
 11824  001202  21B7               	addwfc	(_waitcnt+2)& (0+255),w,b
 11825  001204  0101               	movlb	1	; () banked
 11826  001206  6F12               	movwf	(_waitCnt+18)& (0+255),b
 11827  001208  0E00               	movlw	0
 11828  00120A  0100               	movlb	0	; () banked
 11829  00120C  21B8               	addwfc	(_waitcnt+3)& (0+255),w,b
 11830  00120E  0101               	movlb	1	; () banked
 11831  001210  6F13               	movwf	(_waitCnt+19)& (0+255),b
 11832  001212                     i2l5304:
 11833                           
 11834                           ;buttons.c: 53: }
 11835                           ;buttons.c: 54: if ((( PORTB) & 0b100000) && ((int32_t) (waitCnt[5] - waitcnt) <= 0))
 11836  001212  AA81               	btfss	3969,5,c	;volatile
 11837  001214  D047               	goto	i2l5310
 11838  001216  0100               	movlb	0	; () banked
 11839  001218  C0B5  F028         	movff	_waitcnt,??_buttons
 11840  00121C  0100               	movlb	0	; () banked
 11841  00121E  C0B6  F029         	movff	_waitcnt+1,??_buttons+1
 11842  001222  0100               	movlb	0	; () banked
 11843  001224  C0B7  F02A         	movff	_waitcnt+2,??_buttons+2
 11844  001228  0100               	movlb	0	; () banked
 11845  00122A  C0B8  F02B         	movff	_waitcnt+3,??_buttons+3
 11846  00122E  1E28               	comf	??_buttons,f,c
 11847  001230  1E29               	comf	??_buttons+1,f,c
 11848  001232  1E2A               	comf	??_buttons+2,f,c
 11849  001234  1E2B               	comf	??_buttons+3,f,c
 11850  001236  2A28               	incf	??_buttons,f,c
 11851  001238  0E00               	movlw	0
 11852  00123A  2229               	addwfc	??_buttons+1,f,c
 11853  00123C  222A               	addwfc	??_buttons+2,f,c
 11854  00123E  222B               	addwfc	??_buttons+3,f,c
 11855  001240  0101               	movlb	1	; () banked
 11856  001242  5114               	movf	(_waitCnt+20)& (0+255),w,b
 11857  001244  2428               	addwf	??_buttons,w,c
 11858  001246  6E2C               	movwf	(??_buttons+4)& (0+255),c
 11859  001248  0101               	movlb	1	; () banked
 11860  00124A  5115               	movf	(_waitCnt+21)& (0+255),w,b
 11861  00124C  2029               	addwfc	??_buttons+1,w,c
 11862  00124E  6E2D               	movwf	(??_buttons+5)& (0+255),c
 11863  001250  0101               	movlb	1	; () banked
 11864  001252  5116               	movf	(_waitCnt+22)& (0+255),w,b
 11865  001254  202A               	addwfc	??_buttons+2,w,c
 11866  001256  6E2E               	movwf	(??_buttons+6)& (0+255),c
 11867  001258  0101               	movlb	1	; () banked
 11868  00125A  5117               	movf	(_waitCnt+23)& (0+255),w,b
 11869  00125C  202B               	addwfc	??_buttons+3,w,c
 11870  00125E  6E2F               	movwf	(??_buttons+7)& (0+255),c
 11871  001260  502F               	movf	??_buttons+7,w,c
 11872  001262  0A80               	xorlw	128
 11873  001264  0F80               	addlw	128
 11874  001266  E108               	bnz	i2u564_45
 11875  001268  0E00               	movlw	0
 11876  00126A  5C2E               	subwf	??_buttons+6,w,c
 11877  00126C  E105               	bnz	i2u564_45
 11878  00126E  0E00               	movlw	0
 11879  001270  5C2D               	subwf	??_buttons+5,w,c
 11880  001272  E102               	bnz	i2u564_45
 11881  001274  0E01               	movlw	1
 11882  001276  5C2C               	subwf	??_buttons+4,w,c
 11883  001278                     i2u564_45:
 11884  001278  B0D8               	btfsc	status,0,c
 11885  00127A  D014               	goto	i2l5310
 11886                           
 11887                           ; BSR set to: 1
 11888                           ;buttons.c: 55: {
 11889                           ;buttons.c: 56: waitCnt[5] = waitcnt + 150;
 11890  00127C  0E96               	movlw	150
 11891  00127E  0100               	movlb	0	; () banked
 11892  001280  25B5               	addwf	_waitcnt& (0+255),w,b
 11893  001282  0101               	movlb	1	; () banked
 11894  001284  6F14               	movwf	(_waitCnt+20)& (0+255),b
 11895  001286  0E00               	movlw	0
 11896  001288  0100               	movlb	0	; () banked
 11897  00128A  21B6               	addwfc	(_waitcnt+1)& (0+255),w,b
 11898  00128C  0101               	movlb	1	; () banked
 11899  00128E  6F15               	movwf	(_waitCnt+21)& (0+255),b
 11900  001290  0E00               	movlw	0
 11901  001292  0100               	movlb	0	; () banked
 11902  001294  21B7               	addwfc	(_waitcnt+2)& (0+255),w,b
 11903  001296  0101               	movlb	1	; () banked
 11904  001298  6F16               	movwf	(_waitCnt+22)& (0+255),b
 11905  00129A  0E00               	movlw	0
 11906  00129C  0100               	movlb	0	; () banked
 11907  00129E  21B8               	addwfc	(_waitcnt+3)& (0+255),w,b
 11908  0012A0  0101               	movlb	1	; () banked
 11909  0012A2  6F17               	movwf	(_waitCnt+23)& (0+255),b
 11910  0012A4                     i2l5310:
 11911                           
 11912                           ;buttons.c: 57: }
 11913                           ;buttons.c: 58: if ((( PORTB) & 0b1000000) && ((int32_t) (waitCnt[6] - waitcnt) <= 0))
 11914  0012A4  AC81               	btfss	3969,6,c	;volatile
 11915  0012A6  D047               	goto	i2l5316
 11916  0012A8  0100               	movlb	0	; () banked
 11917  0012AA  C0B5  F028         	movff	_waitcnt,??_buttons
 11918  0012AE  0100               	movlb	0	; () banked
 11919  0012B0  C0B6  F029         	movff	_waitcnt+1,??_buttons+1
 11920  0012B4  0100               	movlb	0	; () banked
 11921  0012B6  C0B7  F02A         	movff	_waitcnt+2,??_buttons+2
 11922  0012BA  0100               	movlb	0	; () banked
 11923  0012BC  C0B8  F02B         	movff	_waitcnt+3,??_buttons+3
 11924  0012C0  1E28               	comf	??_buttons,f,c
 11925  0012C2  1E29               	comf	??_buttons+1,f,c
 11926  0012C4  1E2A               	comf	??_buttons+2,f,c
 11927  0012C6  1E2B               	comf	??_buttons+3,f,c
 11928  0012C8  2A28               	incf	??_buttons,f,c
 11929  0012CA  0E00               	movlw	0
 11930  0012CC  2229               	addwfc	??_buttons+1,f,c
 11931  0012CE  222A               	addwfc	??_buttons+2,f,c
 11932  0012D0  222B               	addwfc	??_buttons+3,f,c
 11933  0012D2  0101               	movlb	1	; () banked
 11934  0012D4  5118               	movf	(_waitCnt+24)& (0+255),w,b
 11935  0012D6  2428               	addwf	??_buttons,w,c
 11936  0012D8  6E2C               	movwf	(??_buttons+4)& (0+255),c
 11937  0012DA  0101               	movlb	1	; () banked
 11938  0012DC  5119               	movf	(_waitCnt+25)& (0+255),w,b
 11939  0012DE  2029               	addwfc	??_buttons+1,w,c
 11940  0012E0  6E2D               	movwf	(??_buttons+5)& (0+255),c
 11941  0012E2  0101               	movlb	1	; () banked
 11942  0012E4  511A               	movf	(_waitCnt+26)& (0+255),w,b
 11943  0012E6  202A               	addwfc	??_buttons+2,w,c
 11944  0012E8  6E2E               	movwf	(??_buttons+6)& (0+255),c
 11945  0012EA  0101               	movlb	1	; () banked
 11946  0012EC  511B               	movf	(_waitCnt+27)& (0+255),w,b
 11947  0012EE  202B               	addwfc	??_buttons+3,w,c
 11948  0012F0  6E2F               	movwf	(??_buttons+7)& (0+255),c
 11949  0012F2  502F               	movf	??_buttons+7,w,c
 11950  0012F4  0A80               	xorlw	128
 11951  0012F6  0F80               	addlw	128
 11952  0012F8  E108               	bnz	i2u566_45
 11953  0012FA  0E00               	movlw	0
 11954  0012FC  5C2E               	subwf	??_buttons+6,w,c
 11955  0012FE  E105               	bnz	i2u566_45
 11956  001300  0E00               	movlw	0
 11957  001302  5C2D               	subwf	??_buttons+5,w,c
 11958  001304  E102               	bnz	i2u566_45
 11959  001306  0E01               	movlw	1
 11960  001308  5C2C               	subwf	??_buttons+4,w,c
 11961  00130A                     i2u566_45:
 11962  00130A  B0D8               	btfsc	status,0,c
 11963  00130C  D014               	goto	i2l5316
 11964                           
 11965                           ; BSR set to: 1
 11966                           ;buttons.c: 59: {
 11967                           ;buttons.c: 60: waitCnt[6] = waitcnt + 150;
 11968  00130E  0E96               	movlw	150
 11969  001310  0100               	movlb	0	; () banked
 11970  001312  25B5               	addwf	_waitcnt& (0+255),w,b
 11971  001314  0101               	movlb	1	; () banked
 11972  001316  6F18               	movwf	(_waitCnt+24)& (0+255),b
 11973  001318  0E00               	movlw	0
 11974  00131A  0100               	movlb	0	; () banked
 11975  00131C  21B6               	addwfc	(_waitcnt+1)& (0+255),w,b
 11976  00131E  0101               	movlb	1	; () banked
 11977  001320  6F19               	movwf	(_waitCnt+25)& (0+255),b
 11978  001322  0E00               	movlw	0
 11979  001324  0100               	movlb	0	; () banked
 11980  001326  21B7               	addwfc	(_waitcnt+2)& (0+255),w,b
 11981  001328  0101               	movlb	1	; () banked
 11982  00132A  6F1A               	movwf	(_waitCnt+26)& (0+255),b
 11983  00132C  0E00               	movlw	0
 11984  00132E  0100               	movlb	0	; () banked
 11985  001330  21B8               	addwfc	(_waitcnt+3)& (0+255),w,b
 11986  001332  0101               	movlb	1	; () banked
 11987  001334  6F1B               	movwf	(_waitCnt+27)& (0+255),b
 11988  001336                     i2l5316:
 11989                           
 11990                           ;buttons.c: 61: }
 11991                           ;buttons.c: 62: if ((( PORTB) & 0b10000000) && ((int32_t) (waitCnt[7] - waitcnt) <= 0))
 11992  001336  AE81               	btfss	3969,7,c	;volatile
 11993  001338  D047               	goto	i2l5322
 11994  00133A  0100               	movlb	0	; () banked
 11995  00133C  C0B5  F028         	movff	_waitcnt,??_buttons
 11996  001340  0100               	movlb	0	; () banked
 11997  001342  C0B6  F029         	movff	_waitcnt+1,??_buttons+1
 11998  001346  0100               	movlb	0	; () banked
 11999  001348  C0B7  F02A         	movff	_waitcnt+2,??_buttons+2
 12000  00134C  0100               	movlb	0	; () banked
 12001  00134E  C0B8  F02B         	movff	_waitcnt+3,??_buttons+3
 12002  001352  1E28               	comf	??_buttons,f,c
 12003  001354  1E29               	comf	??_buttons+1,f,c
 12004  001356  1E2A               	comf	??_buttons+2,f,c
 12005  001358  1E2B               	comf	??_buttons+3,f,c
 12006  00135A  2A28               	incf	??_buttons,f,c
 12007  00135C  0E00               	movlw	0
 12008  00135E  2229               	addwfc	??_buttons+1,f,c
 12009  001360  222A               	addwfc	??_buttons+2,f,c
 12010  001362  222B               	addwfc	??_buttons+3,f,c
 12011  001364  0101               	movlb	1	; () banked
 12012  001366  511C               	movf	(_waitCnt+28)& (0+255),w,b
 12013  001368  2428               	addwf	??_buttons,w,c
 12014  00136A  6E2C               	movwf	(??_buttons+4)& (0+255),c
 12015  00136C  0101               	movlb	1	; () banked
 12016  00136E  511D               	movf	(_waitCnt+29)& (0+255),w,b
 12017  001370  2029               	addwfc	??_buttons+1,w,c
 12018  001372  6E2D               	movwf	(??_buttons+5)& (0+255),c
 12019  001374  0101               	movlb	1	; () banked
 12020  001376  511E               	movf	(_waitCnt+30)& (0+255),w,b
 12021  001378  202A               	addwfc	??_buttons+2,w,c
 12022  00137A  6E2E               	movwf	(??_buttons+6)& (0+255),c
 12023  00137C  0101               	movlb	1	; () banked
 12024  00137E  511F               	movf	(_waitCnt+31)& (0+255),w,b
 12025  001380  202B               	addwfc	??_buttons+3,w,c
 12026  001382  6E2F               	movwf	(??_buttons+7)& (0+255),c
 12027  001384  502F               	movf	??_buttons+7,w,c
 12028  001386  0A80               	xorlw	128
 12029  001388  0F80               	addlw	128
 12030  00138A  E108               	bnz	i2u568_45
 12031  00138C  0E00               	movlw	0
 12032  00138E  5C2E               	subwf	??_buttons+6,w,c
 12033  001390  E105               	bnz	i2u568_45
 12034  001392  0E00               	movlw	0
 12035  001394  5C2D               	subwf	??_buttons+5,w,c
 12036  001396  E102               	bnz	i2u568_45
 12037  001398  0E01               	movlw	1
 12038  00139A  5C2C               	subwf	??_buttons+4,w,c
 12039  00139C                     i2u568_45:
 12040  00139C  B0D8               	btfsc	status,0,c
 12041  00139E  D014               	goto	i2l5322
 12042                           
 12043                           ; BSR set to: 1
 12044                           ;buttons.c: 63: {
 12045                           ;buttons.c: 64: waitCnt[7] = waitcnt + 150;
 12046  0013A0  0E96               	movlw	150
 12047  0013A2  0100               	movlb	0	; () banked
 12048  0013A4  25B5               	addwf	_waitcnt& (0+255),w,b
 12049  0013A6  0101               	movlb	1	; () banked
 12050  0013A8  6F1C               	movwf	(_waitCnt+28)& (0+255),b
 12051  0013AA  0E00               	movlw	0
 12052  0013AC  0100               	movlb	0	; () banked
 12053  0013AE  21B6               	addwfc	(_waitcnt+1)& (0+255),w,b
 12054  0013B0  0101               	movlb	1	; () banked
 12055  0013B2  6F1D               	movwf	(_waitCnt+29)& (0+255),b
 12056  0013B4  0E00               	movlw	0
 12057  0013B6  0100               	movlb	0	; () banked
 12058  0013B8  21B7               	addwfc	(_waitcnt+2)& (0+255),w,b
 12059  0013BA  0101               	movlb	1	; () banked
 12060  0013BC  6F1E               	movwf	(_waitCnt+30)& (0+255),b
 12061  0013BE  0E00               	movlw	0
 12062  0013C0  0100               	movlb	0	; () banked
 12063  0013C2  21B8               	addwfc	(_waitcnt+3)& (0+255),w,b
 12064  0013C4  0101               	movlb	1	; () banked
 12065  0013C6  6F1F               	movwf	(_waitCnt+31)& (0+255),b
 12066  0013C8                     i2l5322:
 12067                           
 12068                           ;buttons.c: 65: }
 12069                           ;buttons.c: 66: if ( PORTB)
 12070  0013C8  5081               	movf	3969,w,c	;volatile
 12071                           
 12072                           ;buttons.c: 69: }
 12073                           ;buttons.c: 70: if (! PORTB)
 12074                           
 12075                           ;buttons.c: 67: {
 12076  0013CA  6681               	tstfsz	3969,c	;volatile
 12077  0013CC  D00C               	goto	i2l442
 12078                           
 12079                           ;buttons.c: 71: {
 12080                           ;buttons.c: 73: *waitCnt = 0;
 12081  0013CE  0E00               	movlw	0
 12082  0013D0  0101               	movlb	1	; () banked
 12083  0013D2  6F00               	movwf	_waitCnt& (0+255),b
 12084  0013D4  0E00               	movlw	0
 12085  0013D6  0101               	movlb	1	; () banked
 12086  0013D8  6F01               	movwf	(_waitCnt+1)& (0+255),b
 12087  0013DA  0E00               	movlw	0
 12088  0013DC  0101               	movlb	1	; () banked
 12089  0013DE  6F02               	movwf	(_waitCnt+2)& (0+255),b
 12090  0013E0  0E00               	movlw	0
 12091  0013E2  0101               	movlb	1	; () banked
 12092  0013E4  6F03               	movwf	(_waitCnt+3)& (0+255),b
 12093  0013E6                     i2l442:
 12094  0013E6  0012               	return	
 12095  0013E8                     __end_of_buttons:
 12096                           	opt stack 0
 12097                           tosu	equ	0xFFF
 12098                           tosh	equ	0xFFE
 12099                           tosl	equ	0xFFD
 12100                           pclatu	equ	0xFFB
 12101                           pclath	equ	0xFFA
 12102                           tblptru	equ	0xFF8
 12103                           tblptrh	equ	0xFF7
 12104                           tblptrl	equ	0xFF6
 12105                           tablat	equ	0xFF5
 12106                           prodh	equ	0xFF4
 12107                           prodl	equ	0xFF3
 12108                           intcon	equ	0xFF2
 12109                           intcon2	equ	0xFF1
 12110                           indf0	equ	0xFEF
 12111                           postinc0	equ	0xFEE
 12112                           fsr0h	equ	0xFEA
 12113                           fsr0l	equ	0xFE9
 12114                           wreg	equ	0xFE8
 12115                           postinc1	equ	0xFE6
 12116                           postdec1	equ	0xFE5
 12117                           fsr1h	equ	0xFE2
 12118                           fsr1l	equ	0xFE1
 12119                           indf2	equ	0xFDF
 12120                           postinc2	equ	0xFDE
 12121                           postdec2	equ	0xFDD
 12122                           fsr2h	equ	0xFDA
 12123                           fsr2l	equ	0xFD9
 12124                           status	equ	0xFD8
 12125                           
 12126 ;; *************** function _advState *****************
 12127 ;; Defined at:
 12128 ;;		line 6 in file "menu.c"
 12129 ;; Parameters:    Size  Location     Type
 12130 ;;		None
 12131 ;; Auto vars:     Size  Location     Type
 12132 ;;		None
 12133 ;; Return value:  Size  Location     Type
 12134 ;;                  1    wreg      unsigned char 
 12135 ;; Registers used:
 12136 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, cstack
 12137 ;; Tracked objects:
 12138 ;;		On entry : 0/0
 12139 ;;		On exit  : 0/0
 12140 ;;		Unchanged: 0/0
 12141 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12142 ;;      Params:         0       0       0       0       0       0       0       0       0
 12143 ;;      Locals:         0       0       0       0       0       0       0       0       0
 12144 ;;      Temps:          5       0       0       0       0       0       0       0       0
 12145 ;;      Totals:         5       0       0       0       0       0       0       0       0
 12146 ;;Total ram usage:        5 bytes
 12147 ;; Hardware stack levels used:    1
 12148 ;; Hardware stack levels required when called:    1
 12149 ;; This function calls:
 12150 ;;		___awmod
 12151 ;; This function is called by:
 12152 ;;		_printRTC
 12153 ;;		_buttons
 12154 ;; This function uses a non-reentrant model
 12155 ;;
 12156                           
 12157                           	psect	text38
 12158  0037A6                     __ptext38:
 12159                           	opt stack 0
 12160  0037A6                     _advState:
 12161                           	opt stack 23
 12162                           
 12163                           ;menu.c: 8: menu->state = (menu->state + 1) % menu->num_states;
 12164                           
 12165                           ;incstack = 0
 12166  0037A6  C0BC  FFD9         	movff	_menu,fsr2l
 12167  0037AA  C0BD  FFDA         	movff	_menu+1,fsr2h
 12168  0037AE  50DF               	movf	indf2,w,c
 12169  0037B0  6E07               	movwf	??_advState& (0+255),c
 12170  0037B2  0E01               	movlw	1
 12171  0037B4  2407               	addwf	??_advState,w,c
 12172  0037B6  6E01               	movwf	___awmod@dividend,c
 12173  0037B8  6A02               	clrf	___awmod@dividend+1,c
 12174  0037BA  0E00               	movlw	0
 12175  0037BC  2202               	addwfc	___awmod@dividend+1,f,c
 12176  0037BE  0100               	movlb	0	; () banked
 12177  0037C0  EE20 F002          	lfsr	2,2
 12178  0037C4  0100               	movlb	0	; () banked
 12179  0037C6  51BC               	movf	_menu& (0+255),w,b
 12180  0037C8  26D9               	addwf	fsr2l,f,c
 12181  0037CA  0100               	movlb	0	; () banked
 12182  0037CC  51BD               	movf	(_menu+1)& (0+255),w,b
 12183  0037CE  22DA               	addwfc	fsr2h,f,c
 12184  0037D0  50DF               	movf	indf2,w,c
 12185  0037D2  6E08               	movwf	(??_advState+1)& (0+255),c
 12186  0037D4  5008               	movf	??_advState+1,w,c
 12187  0037D6  6E03               	movwf	___awmod@divisor,c
 12188  0037D8  6A04               	clrf	___awmod@divisor+1,c
 12189  0037DA  ECF4  F01E         	call	___awmod	;wreg free
 12190  0037DE  5001               	movf	?___awmod,w,c
 12191  0037E0  C0BC  FFD9         	movff	_menu,fsr2l
 12192  0037E4  C0BD  FFDA         	movff	_menu+1,fsr2h
 12193  0037E8  6EDF               	movwf	indf2,c
 12194                           
 12195                           ;menu.c: 9: screen.changed |= menu->digits;
 12196  0037EA  0100               	movlb	0	; () banked
 12197  0037EC  EE20 F001          	lfsr	2,1
 12198  0037F0  0100               	movlb	0	; () banked
 12199  0037F2  51BC               	movf	_menu& (0+255),w,b
 12200  0037F4  26D9               	addwf	fsr2l,f,c
 12201  0037F6  0100               	movlb	0	; () banked
 12202  0037F8  51BD               	movf	(_menu+1)& (0+255),w,b
 12203  0037FA  22DA               	addwfc	fsr2h,f,c
 12204  0037FC  50DF               	movf	indf2,w,c
 12205  0037FE  6E07               	movwf	??_advState& (0+255),c
 12206  003800  5007               	movf	??_advState,w,c
 12207  003802  0100               	movlb	0	; () banked
 12208  003804  13DE               	iorwf	(_screen+11)& (0+255),f,b
 12209                           
 12210                           ; BSR set to: 0
 12211                           ;menu.c: 10: LATC = ((((menu->state)&(0b1<<(0)))>>(0))<<0) | ((((menu->state)&(0b1<<(1))
      +                          )>>(1))<<1) | ((((menu->state)&(0b1<<(2)))>>(2))<<2)| ((((menu->state)&(0b1<<(3)))>>(3))
      +                          <<6);
 12212  003806  C0BC  FFD9         	movff	_menu,fsr2l
 12213  00380A  C0BD  FFDA         	movff	_menu+1,fsr2h
 12214  00380E  50DF               	movf	indf2,w,c
 12215  003810  6E07               	movwf	??_advState& (0+255),c
 12216  003812  90D8               	bcf	status,0,c
 12217  003814  3207               	rrcf	??_advState,f,c
 12218  003816  90D8               	bcf	status,0,c
 12219  003818  3207               	rrcf	??_advState,f,c
 12220  00381A  90D8               	bcf	status,0,c
 12221  00381C  3207               	rrcf	??_advState,f,c
 12222  00381E  0E01               	movlw	1
 12223  003820  1607               	andwf	??_advState,f,c
 12224  003822  0E06               	movlw	6
 12225  003824  6E08               	movwf	(??_advState+1)& (0+255),c
 12226  003826                     i2u521_45:
 12227  003826  90D8               	bcf	status,0,c
 12228  003828  3607               	rlcf	??_advState,f,c
 12229  00382A  2E08               	decfsz	(??_advState+1)& (0+255),f,c
 12230  00382C  D7FC               	goto	i2u521_45
 12231  00382E  C0BC  FFD9         	movff	_menu,fsr2l
 12232  003832  C0BD  FFDA         	movff	_menu+1,fsr2h
 12233  003836  50DF               	movf	indf2,w,c
 12234  003838  6E09               	movwf	(??_advState+2)& (0+255),c
 12235  00383A  90D8               	bcf	status,0,c
 12236  00383C  3209               	rrcf	??_advState+2,f,c
 12237  00383E  90D8               	bcf	status,0,c
 12238  003840  3209               	rrcf	??_advState+2,f,c
 12239  003842  0E01               	movlw	1
 12240  003844  1609               	andwf	??_advState+2,f,c
 12241  003846  90D8               	bcf	status,0,c
 12242  003848  3609               	rlcf	??_advState+2,f,c
 12243  00384A  90D8               	bcf	status,0,c
 12244  00384C  3609               	rlcf	??_advState+2,f,c
 12245  00384E  C0BC  FFD9         	movff	_menu,fsr2l
 12246  003852  C0BD  FFDA         	movff	_menu+1,fsr2h
 12247  003856  50DF               	movf	indf2,w,c
 12248  003858  6E0A               	movwf	(??_advState+3)& (0+255),c
 12249  00385A  90D8               	bcf	status,0,c
 12250  00385C  320A               	rrcf	??_advState+3,f,c
 12251  00385E  0E01               	movlw	1
 12252  003860  160A               	andwf	??_advState+3,f,c
 12253  003862  90D8               	bcf	status,0,c
 12254  003864  340A               	rlcf	??_advState+3,w,c
 12255  003866  6E0B               	movwf	(??_advState+4)& (0+255),c
 12256  003868  C0BC  FFD9         	movff	_menu,fsr2l
 12257  00386C  C0BD  FFDA         	movff	_menu+1,fsr2h
 12258  003870  50DF               	movf	indf2,w,c
 12259  003872  0B01               	andlw	1
 12260  003874  100B               	iorwf	??_advState+4,w,c
 12261  003876  1009               	iorwf	??_advState+2,w,c
 12262  003878  1007               	iorwf	??_advState,w,c
 12263  00387A  6E8B               	movwf	3979,c	;volatile
 12264                           
 12265                           ; BSR set to: 0
 12266                           ;menu.c: 11: return menu->state;
 12267  00387C  C0BC  FFD9         	movff	_menu,fsr2l
 12268  003880  C0BD  FFDA         	movff	_menu+1,fsr2h
 12269  003884  50DF               	movf	indf2,w,c
 12270                           
 12271                           ; BSR set to: 0
 12272                           
 12273                           ; BSR set to: 0
 12274  003886  0012               	return	
 12275  003888                     __end_of_advState:
 12276                           	opt stack 0
 12277                           tosu	equ	0xFFF
 12278                           tosh	equ	0xFFE
 12279                           tosl	equ	0xFFD
 12280                           pclatu	equ	0xFFB
 12281                           pclath	equ	0xFFA
 12282                           tblptru	equ	0xFF8
 12283                           tblptrh	equ	0xFF7
 12284                           tblptrl	equ	0xFF6
 12285                           tablat	equ	0xFF5
 12286                           prodh	equ	0xFF4
 12287                           prodl	equ	0xFF3
 12288                           intcon	equ	0xFF2
 12289                           intcon2	equ	0xFF1
 12290                           indf0	equ	0xFEF
 12291                           postinc0	equ	0xFEE
 12292                           fsr0h	equ	0xFEA
 12293                           fsr0l	equ	0xFE9
 12294                           wreg	equ	0xFE8
 12295                           postinc1	equ	0xFE6
 12296                           postdec1	equ	0xFE5
 12297                           fsr1h	equ	0xFE2
 12298                           fsr1l	equ	0xFE1
 12299                           indf2	equ	0xFDF
 12300                           postinc2	equ	0xFDE
 12301                           postdec2	equ	0xFDD
 12302                           fsr2h	equ	0xFDA
 12303                           fsr2l	equ	0xFD9
 12304                           status	equ	0xFD8
 12305                           
 12306 ;; *************** function _advMenu *****************
 12307 ;; Defined at:
 12308 ;;		line 14 in file "menu.c"
 12309 ;; Parameters:    Size  Location     Type
 12310 ;;		None
 12311 ;; Auto vars:     Size  Location     Type
 12312 ;;		None
 12313 ;; Return value:  Size  Location     Type
 12314 ;;		None               void
 12315 ;; Registers used:
 12316 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12317 ;; Tracked objects:
 12318 ;;		On entry : 0/0
 12319 ;;		On exit  : 0/0
 12320 ;;		Unchanged: 0/0
 12321 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12322 ;;      Params:         0       0       0       0       0       0       0       0       0
 12323 ;;      Locals:         0       0       0       0       0       0       0       0       0
 12324 ;;      Temps:          2       0       0       0       0       0       0       0       0
 12325 ;;      Totals:         2       0       0       0       0       0       0       0       0
 12326 ;;Total ram usage:        2 bytes
 12327 ;; Hardware stack levels used:    1
 12328 ;; Hardware stack levels required when called:    4
 12329 ;; This function calls:
 12330 ;;		_clearScreen
 12331 ;; This function is called by:
 12332 ;;		_buttons
 12333 ;; This function uses a non-reentrant model
 12334 ;;
 12335                           
 12336                           	psect	text39
 12337  003F06                     __ptext39:
 12338                           	opt stack 0
 12339  003F06                     _advMenu:
 12340                           	opt stack 20
 12341                           
 12342                           ;menu.c: 16: if (menu == &rtcMenu)
 12343                           
 12344                           ; BSR set to: 0
 12345                           ;incstack = 0
 12346  003F06  0EE5               	movlw	low _rtcMenu
 12347  003F08  6E26               	movwf	??_advMenu& (0+255),c
 12348  003F0A  0E00               	movlw	high _rtcMenu
 12349  003F0C  6E27               	movwf	(??_advMenu+1)& (0+255),c
 12350  003F0E  5027               	movf	??_advMenu+1,w,c
 12351  003F10  0100               	movlb	0	; () banked
 12352  003F12  19BD               	xorwf	(_menu+1)& (0+255),w,b
 12353  003F14  E103               	bnz	i2u525_45
 12354  003F16  5026               	movf	??_advMenu,w,c
 12355  003F18  0100               	movlb	0	; () banked
 12356  003F1A  19BC               	xorwf	_menu& (0+255),w,b
 12357  003F1C                     i2u525_45:
 12358  003F1C  A4D8               	btfss	status,2,c
 12359  003F1E  D007               	goto	i2l4974
 12360                           
 12361                           ; BSR set to: 0
 12362                           ;menu.c: 17: {
 12363                           ;menu.c: 18: menu = &tempMenu;
 12364  003F20  0100               	movlb	0	; () banked
 12365  003F22  0E00               	movlw	high _tempMenu
 12366  003F24  0100               	movlb	0	; () banked
 12367  003F26  6FBD               	movwf	(_menu+1)& (0+255),b
 12368  003F28  0100               	movlb	0	; () banked
 12369  003F2A  0EE0               	movlw	low _tempMenu
 12370  003F2C  D013               	goto	L25
 12371  003F2E                     i2l4974:
 12372                           
 12373                           ; BSR set to: 0
 12374                           ;menu.c: 20: else if (menu == &tempMenu)
 12375  003F2E  0EE0               	movlw	low _tempMenu
 12376  003F30  6E26               	movwf	??_advMenu& (0+255),c
 12377  003F32  0E00               	movlw	high _tempMenu
 12378  003F34  6E27               	movwf	(??_advMenu+1)& (0+255),c
 12379  003F36  5027               	movf	??_advMenu+1,w,c
 12380  003F38  0100               	movlb	0	; () banked
 12381  003F3A  19BD               	xorwf	(_menu+1)& (0+255),w,b
 12382  003F3C  E103               	bnz	i2u526_45
 12383  003F3E  5026               	movf	??_advMenu,w,c
 12384  003F40  0100               	movlb	0	; () banked
 12385  003F42  19BC               	xorwf	_menu& (0+255),w,b
 12386  003F44                     i2u526_45:
 12387  003F44  A4D8               	btfss	status,2,c
 12388  003F46  D008               	goto	i2l4978
 12389                           
 12390                           ; BSR set to: 0
 12391                           ;menu.c: 21: {
 12392                           ;menu.c: 22: menu = &rtcMenu;
 12393  003F48  0100               	movlb	0	; () banked
 12394  003F4A  0E00               	movlw	high _rtcMenu
 12395  003F4C  0100               	movlb	0	; () banked
 12396  003F4E  6FBD               	movwf	(_menu+1)& (0+255),b
 12397  003F50  0100               	movlb	0	; () banked
 12398  003F52  0EE5               	movlw	low _rtcMenu
 12399  003F54                     L25:
 12400  003F54  0100               	movlb	0	; () banked
 12401  003F56  6FBC               	movwf	_menu& (0+255),b
 12402  003F58                     i2l4978:
 12403                           
 12404                           ; BSR set to: 0
 12405                           ;menu.c: 23: }
 12406                           ;menu.c: 24: clearScreen();
 12407  003F58  EC3D  F023         	call	_clearScreen	;wreg free
 12408                           
 12409                           ;menu.c: 25: screen.changed |= rtcMenu.digits | tempMenu.digits;
 12410  003F5C  0100               	movlb	0	; () banked
 12411  003F5E  51E6               	movf	(_rtcMenu+1)& (0+255),w,b
 12412  003F60  0100               	movlb	0	; () banked
 12413  003F62  11E1               	iorwf	(_tempMenu+1)& (0+255),w,b
 12414  003F64  6E26               	movwf	??_advMenu& (0+255),c
 12415  003F66  5026               	movf	??_advMenu,w,c
 12416  003F68  0100               	movlb	0	; () banked
 12417  003F6A  13DE               	iorwf	(_screen+11)& (0+255),f,b
 12418                           
 12419                           ; BSR set to: 0
 12420                           ;menu.c: 26: LATA5 = (menu != &tempMenu);
 12421  003F6C  0EE0               	movlw	low _tempMenu
 12422  003F6E  6E26               	movwf	??_advMenu& (0+255),c
 12423  003F70  0E00               	movlw	high _tempMenu
 12424  003F72  6E27               	movwf	(??_advMenu+1)& (0+255),c
 12425  003F74  5027               	movf	??_advMenu+1,w,c
 12426  003F76  0100               	movlb	0	; () banked
 12427  003F78  19BD               	xorwf	(_menu+1)& (0+255),w,b
 12428  003F7A  E103               	bnz	i2u527_45
 12429  003F7C  5026               	movf	??_advMenu,w,c
 12430  003F7E  0100               	movlb	0	; () banked
 12431  003F80  19BC               	xorwf	_menu& (0+255),w,b
 12432  003F82                     i2u527_45:
 12433  003F82  B4D8               	btfsc	status,2,c
 12434  003F84  D002               	goto	i2u527_40
 12435  003F86  8A89               	bsf	3977,5,c	;volatile
 12436  003F88  D001               	goto	i2u528_45
 12437  003F8A                     i2u527_40:
 12438  003F8A  9A89               	bcf	3977,5,c	;volatile
 12439  003F8C                     i2u528_45:
 12440  003F8C  0012               	return	
 12441  003F8E                     __end_of_advMenu:
 12442                           	opt stack 0
 12443                           tosu	equ	0xFFF
 12444                           tosh	equ	0xFFE
 12445                           tosl	equ	0xFFD
 12446                           pclatu	equ	0xFFB
 12447                           pclath	equ	0xFFA
 12448                           tblptru	equ	0xFF8
 12449                           tblptrh	equ	0xFF7
 12450                           tblptrl	equ	0xFF6
 12451                           tablat	equ	0xFF5
 12452                           prodh	equ	0xFF4
 12453                           prodl	equ	0xFF3
 12454                           intcon	equ	0xFF2
 12455                           intcon2	equ	0xFF1
 12456                           indf0	equ	0xFEF
 12457                           postinc0	equ	0xFEE
 12458                           fsr0h	equ	0xFEA
 12459                           fsr0l	equ	0xFE9
 12460                           wreg	equ	0xFE8
 12461                           postinc1	equ	0xFE6
 12462                           postdec1	equ	0xFE5
 12463                           fsr1h	equ	0xFE2
 12464                           fsr1l	equ	0xFE1
 12465                           indf2	equ	0xFDF
 12466                           postinc2	equ	0xFDE
 12467                           postdec2	equ	0xFDD
 12468                           fsr2h	equ	0xFDA
 12469                           fsr2l	equ	0xFD9
 12470                           status	equ	0xFD8
 12471                           
 12472 ;; *************** function _clearScreen *****************
 12473 ;; Defined at:
 12474 ;;		line 86 in file "disp.c"
 12475 ;; Parameters:    Size  Location     Type
 12476 ;;		None
 12477 ;; Auto vars:     Size  Location     Type
 12478 ;;		None
 12479 ;; Return value:  Size  Location     Type
 12480 ;;		None               void
 12481 ;; Registers used:
 12482 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12483 ;; Tracked objects:
 12484 ;;		On entry : 0/0
 12485 ;;		On exit  : 0/0
 12486 ;;		Unchanged: 0/0
 12487 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12488 ;;      Params:         0       0       0       0       0       0       0       0       0
 12489 ;;      Locals:         0       0       0       0       0       0       0       0       0
 12490 ;;      Temps:          0       0       0       0       0       0       0       0       0
 12491 ;;      Totals:         0       0       0       0       0       0       0       0       0
 12492 ;;Total ram usage:        0 bytes
 12493 ;; Hardware stack levels used:    1
 12494 ;; Hardware stack levels required when called:    3
 12495 ;; This function calls:
 12496 ;;		_writeString
 12497 ;; This function is called by:
 12498 ;;		_advMenu
 12499 ;; This function uses a non-reentrant model
 12500 ;;
 12501                           
 12502                           	psect	text40
 12503  00467A                     __ptext40:
 12504                           	opt stack 0
 12505  00467A                     _clearScreen:
 12506                           	opt stack 20
 12507                           
 12508                           ;disp.c: 88: writeString(0b11111111, (char*)"");
 12509                           
 12510                           ;incstack = 0
 12511  00467A  0E7D               	movlw	high (STR_14+4)
 12512  00467C  6E1D               	movwf	writeString@string+1,c
 12513  00467E  0EA1               	movlw	low (STR_14+4)
 12514  004680  6E1C               	movwf	writeString@string,c
 12515  004682  0EFF               	movlw	255
 12516  004684  ECC1  F011         	call	_writeString
 12517  004688  0012               	return	
 12518  00468A                     __end_of_clearScreen:
 12519                           	opt stack 0
 12520                           tosu	equ	0xFFF
 12521                           tosh	equ	0xFFE
 12522                           tosl	equ	0xFFD
 12523                           pclatu	equ	0xFFB
 12524                           pclath	equ	0xFFA
 12525                           tblptru	equ	0xFF8
 12526                           tblptrh	equ	0xFF7
 12527                           tblptrl	equ	0xFF6
 12528                           tablat	equ	0xFF5
 12529                           prodh	equ	0xFF4
 12530                           prodl	equ	0xFF3
 12531                           intcon	equ	0xFF2
 12532                           intcon2	equ	0xFF1
 12533                           indf0	equ	0xFEF
 12534                           postinc0	equ	0xFEE
 12535                           fsr0h	equ	0xFEA
 12536                           fsr0l	equ	0xFE9
 12537                           wreg	equ	0xFE8
 12538                           postinc1	equ	0xFE6
 12539                           postdec1	equ	0xFE5
 12540                           fsr1h	equ	0xFE2
 12541                           fsr1l	equ	0xFE1
 12542                           indf2	equ	0xFDF
 12543                           postinc2	equ	0xFDE
 12544                           postdec2	equ	0xFDD
 12545                           fsr2h	equ	0xFDA
 12546                           fsr2l	equ	0xFD9
 12547                           status	equ	0xFD8
 12548                           
 12549 ;; *************** function _writeString *****************
 12550 ;; Defined at:
 12551 ;;		line 178 in file "disp.c"
 12552 ;; Parameters:    Size  Location     Type
 12553 ;;  digits          1    wreg     unsigned char 
 12554 ;;  string          2   27[COMRAM] PTR unsigned char 
 12555 ;;		 -> printTemp@str(15), STR_17(3), STR_16(3), printRTC@str(15), 
 12556 ;;		 -> writeFloat@str(15), writeLong@str(15), STR_1(1), 
 12557 ;; Auto vars:     Size  Location     Type
 12558 ;;  digits          1   34[COMRAM] unsigned char 
 12559 ;;  cnt             1   36[COMRAM] char 
 12560 ;;  i               1   35[COMRAM] char 
 12561 ;;  bits            1   33[COMRAM] unsigned char 
 12562 ;; Return value:  Size  Location     Type
 12563 ;;		None               void
 12564 ;; Registers used:
 12565 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12566 ;; Tracked objects:
 12567 ;;		On entry : 0/0
 12568 ;;		On exit  : 0/0
 12569 ;;		Unchanged: 0/0
 12570 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12571 ;;      Params:         2       0       0       0       0       0       0       0       0
 12572 ;;      Locals:         4       0       0       0       0       0       0       0       0
 12573 ;;      Temps:          4       0       0       0       0       0       0       0       0
 12574 ;;      Totals:        10       0       0       0       0       0       0       0       0
 12575 ;;Total ram usage:       10 bytes
 12576 ;; Hardware stack levels used:    1
 12577 ;; Hardware stack levels required when called:    2
 12578 ;; This function calls:
 12579 ;;		___wmul
 12580 ;;		_countBits
 12581 ;;		_getFontChar
 12582 ;;		_hibit
 12583 ;;		_log2
 12584 ;;		_writeChar
 12585 ;; This function is called by:
 12586 ;;		_clearScreen
 12587 ;;		_printRTC
 12588 ;;		_printTemp
 12589 ;;		_writeLong
 12590 ;;		_writeFloat
 12591 ;; This function uses a non-reentrant model
 12592 ;;
 12593                           
 12594                           	psect	text41
 12595  002382                     __ptext41:
 12596                           	opt stack 0
 12597  002382                     _writeString:
 12598                           	opt stack 22
 12599                           
 12600                           ;incstack = 0
 12601                           ;writeString@digits stored from wreg
 12602  002382  6E23               	movwf	writeString@digits,c
 12603                           
 12604                           ;disp.c: 184: int8_t cnt = 0, i = 0;
 12605  002384  0E00               	movlw	0
 12606  002386  6E25               	movwf	writeString@cnt,c
 12607  002388  0E00               	movlw	0
 12608  00238A  6E24               	movwf	writeString@i,c
 12609                           
 12610                           ;disp.c: 185: uint8_t bits = countBits(digits);
 12611  00238C  5023               	movf	writeString@digits,w,c
 12612  00238E  6E01               	movwf	countBits@num,c
 12613  002390  6A02               	clrf	countBits@num+1,c
 12614  002392  6A03               	clrf	countBits@num+2,c
 12615  002394  6A04               	clrf	countBits@num+3,c
 12616  002396  ECA9  F022         	call	_countBits	;wreg free
 12617  00239A  6E22               	movwf	writeString@bits,c
 12618                           
 12619                           ;disp.c: 187: for (cnt = 0;cnt < 8;cnt++)
 12620  00239C  0E00               	movlw	0
 12621  00239E  6E25               	movwf	writeString@cnt,c
 12622  0023A0  5025               	movf	writeString@cnt,w,c
 12623  0023A2  0A80               	xorlw	128
 12624  0023A4  0F78               	addlw	-136
 12625  0023A6  B0D8               	btfsc	status,0,c
 12626  0023A8  D022               	goto	i2l3662
 12627                           
 12628                           ;disp.c: 188: {
 12629                           ;disp.c: 189: if ((1<<cnt) & digits)
 12630  0023AA  C025  F01E         	movff	writeString@cnt,??_writeString
 12631  0023AE  0E01               	movlw	1
 12632  0023B0  6E1F               	movwf	(??_writeString+1)& (0+255),c
 12633  0023B2  6A20               	clrf	(??_writeString+2)& (0+255),c
 12634  0023B4  2A1E               	incf	??_writeString,f,c
 12635  0023B6  D003               	goto	i2u307_44
 12636  0023B8                     i2u307_45:
 12637  0023B8  90D8               	bcf	status,0,c
 12638  0023BA  361F               	rlcf	??_writeString+1,f,c
 12639  0023BC  3620               	rlcf	??_writeString+2,f,c
 12640  0023BE                     i2u307_44:
 12641  0023BE  2E1E               	decfsz	??_writeString,f,c
 12642  0023C0  D7FB               	goto	i2u307_45
 12643  0023C2  5023               	movf	writeString@digits,w,c
 12644  0023C4  161F               	andwf	??_writeString+1,f,c
 12645  0023C6  0E00               	movlw	0
 12646  0023C8  1620               	andwf	??_writeString+2,f,c
 12647  0023CA  5020               	movf	??_writeString+2,w,c
 12648  0023CC  101F               	iorwf	??_writeString+1,w,c
 12649  0023CE  B4D8               	btfsc	status,2,c
 12650  0023D0  D00C               	goto	i2l3658
 12651                           
 12652                           ;disp.c: 190: {
 12653                           ;disp.c: 191: screen.digits.screen[cnt].bits = 0;
 12654  0023D2  5025               	movf	writeString@cnt,w,c
 12655  0023D4  0D01               	mullw	1
 12656  0023D6  0100               	movlb	0	; () banked
 12657  0023D8  0ED3               	movlw	low _screen
 12658  0023DA  24F3               	addwf	prodl,w,c
 12659  0023DC  6ED9               	movwf	fsr2l,c
 12660  0023DE  0100               	movlb	0	; () banked
 12661  0023E0  0E00               	movlw	high _screen
 12662  0023E2  20F4               	addwfc	prodh,w,c
 12663  0023E4  6EDA               	movwf	fsr2h,c
 12664  0023E6  0E00               	movlw	0
 12665  0023E8  6EDF               	movwf	indf2,c
 12666  0023EA                     i2l3658:
 12667  0023EA  2A25               	incf	writeString@cnt,f,c
 12668  0023EC  D7D9               	goto	L26
 12669  0023EE                     i2l3662:
 12670                           
 12671                           ;disp.c: 192: }
 12672                           ;disp.c: 193: }
 12673                           ;disp.c: 195: bits += 1;
 12674  0023EE  2A22               	incf	writeString@bits,f,c
 12675                           
 12676                           ;disp.c: 196: for (cnt = log2(hibit(digits)); --bits; cnt--)
 12677  0023F0  5023               	movf	writeString@digits,w,c
 12678  0023F2  6E01               	movwf	hibit@x,c
 12679  0023F4  6A02               	clrf	hibit@x+1,c
 12680  0023F6  6A03               	clrf	hibit@x+2,c
 12681  0023F8  6A04               	clrf	hibit@x+3,c
 12682  0023FA  ECE7  F020         	call	_hibit	;wreg free
 12683  0023FE  C001  F00C         	movff	?_hibit,log2@num
 12684  002402  C002  F00D         	movff	?_hibit+1,log2@num+1
 12685  002406  C003  F00E         	movff	?_hibit+2,log2@num+2
 12686  00240A  C004  F00F         	movff	?_hibit+3,log2@num+3
 12687  00240E  EC11  F022         	call	_log2	;wreg free
 12688  002412  C00C  F01E         	movff	?_log2,??_writeString
 12689  002416  C00D  F01F         	movff	?_log2+1,??_writeString+1
 12690  00241A  C00E  F020         	movff	?_log2+2,??_writeString+2
 12691  00241E  C00F  F021         	movff	?_log2+3,??_writeString+3
 12692  002422  501E               	movf	??_writeString,w,c
 12693  002424  6E25               	movwf	writeString@cnt,c
 12694  002426  D102               	goto	i2l3692
 12695  002428                     i2l3666:
 12696                           
 12697                           ;disp.c: 197: {
 12698                           ;disp.c: 198: if (0x1 & (digits >> cnt))
 12699  002428  C025  F01E         	movff	writeString@cnt,??_writeString
 12700  00242C  C023  F01F         	movff	writeString@digits,??_writeString+1
 12701  002430  2A1E               	incf	??_writeString,f,c
 12702  002432  D002               	goto	i2u310_44
 12703  002434                     i2u310_45:
 12704  002434  90D8               	bcf	status,0,c
 12705  002436  321F               	rrcf	??_writeString+1,f,c
 12706  002438                     i2u310_44:
 12707  002438  2E1E               	decfsz	??_writeString,f,c
 12708  00243A  D7FC               	goto	i2u310_45
 12709  00243C  A01F               	btfss	??_writeString+1,0,c
 12710  00243E  D0F5               	goto	i2l3690
 12711                           
 12712                           ;disp.c: 199: {
 12713                           ;disp.c: 200: if (string[i] == '\0')
 12714  002440  5024               	movf	writeString@i,w,c
 12715  002442  6E0F               	movwf	___wmul@multiplier,c
 12716  002444  6A10               	clrf	___wmul@multiplier+1,c
 12717  002446  BE0F               	btfsc	___wmul@multiplier,7,c
 12718  002448  0610               	decf	___wmul@multiplier+1,f,c
 12719  00244A  0E00               	movlw	0
 12720  00244C  6E12               	movwf	___wmul@multiplicand+1,c
 12721  00244E  0E01               	movlw	1
 12722  002450  6E11               	movwf	___wmul@multiplicand,c
 12723  002452  ECD0  F022         	call	___wmul	;wreg free
 12724  002456  C01C  F01E         	movff	writeString@string,??_writeString
 12725  00245A  C01D  F01F         	movff	writeString@string+1,??_writeString+1
 12726  00245E  500F               	movf	?___wmul,w,c
 12727  002460  261E               	addwf	??_writeString,f,c
 12728  002462  5010               	movf	?___wmul+1,w,c
 12729  002464  221F               	addwfc	??_writeString+1,f,c
 12730  002466  C01E  FFF6         	movff	??_writeString,tblptrl
 12731  00246A  C01F  FFF7         	movff	??_writeString+1,tblptrh
 12732  00246E  6AF8               	clrf	tblptru,c
 12733  002470  0E07               	movlw	(high __ramtop+-1)
 12734  002472  64F7               	cpfsgt	tblptrh,c
 12735  002474  D003               	bra	i2u312_47
 12736  002476  0008               	tblrd		*
 12737  002478  50F5               	movf	tablat,w,c
 12738  00247A  D005               	bra	i2u312_40
 12739  00247C                     i2u312_47:
 12740  00247C  CFF6 FFE9          	movff	tblptrl,fsr0l
 12741  002480  CFF7 FFEA          	movff	tblptrh,fsr0h
 12742  002484  50EF               	movf	indf0,w,c
 12743  002486                     i2u312_40:
 12744  002486  0900               	iorlw	0
 12745  002488  B4D8               	btfsc	status,2,c
 12746  00248A  D0D2               	goto	i2l119
 12747                           
 12748                           ;disp.c: 203: }
 12749                           ;disp.c: 204: if (string[i] == '.')
 12750                           
 12751                           ;disp.c: 201: {
 12752                           ;disp.c: 202: break;
 12753  00248C  5024               	movf	writeString@i,w,c
 12754  00248E  6E0F               	movwf	___wmul@multiplier,c
 12755  002490  6A10               	clrf	___wmul@multiplier+1,c
 12756  002492  BE0F               	btfsc	___wmul@multiplier,7,c
 12757  002494  0610               	decf	___wmul@multiplier+1,f,c
 12758  002496  0E00               	movlw	0
 12759  002498  6E12               	movwf	___wmul@multiplicand+1,c
 12760  00249A  0E01               	movlw	1
 12761  00249C  6E11               	movwf	___wmul@multiplicand,c
 12762  00249E  ECD0  F022         	call	___wmul	;wreg free
 12763  0024A2  C01C  F01E         	movff	writeString@string,??_writeString
 12764  0024A6  C01D  F01F         	movff	writeString@string+1,??_writeString+1
 12765  0024AA  500F               	movf	?___wmul,w,c
 12766  0024AC  261E               	addwf	??_writeString,f,c
 12767  0024AE  5010               	movf	?___wmul+1,w,c
 12768  0024B0  221F               	addwfc	??_writeString+1,f,c
 12769  0024B2  C01E  FFF6         	movff	??_writeString,tblptrl
 12770  0024B6  C01F  FFF7         	movff	??_writeString+1,tblptrh
 12771  0024BA  6AF8               	clrf	tblptru,c
 12772  0024BC  0E07               	movlw	(high __ramtop+-1)
 12773  0024BE  64F7               	cpfsgt	tblptrh,c
 12774  0024C0  D003               	bra	i2u314_47
 12775  0024C2  0008               	tblrd		*
 12776  0024C4  50F5               	movf	tablat,w,c
 12777  0024C6  D005               	bra	i2u314_40
 12778  0024C8                     i2u314_47:
 12779  0024C8  CFF6 FFE9          	movff	tblptrl,fsr0l
 12780  0024CC  CFF7 FFEA          	movff	tblptrh,fsr0h
 12781  0024D0  50EF               	movf	indf0,w,c
 12782  0024D2                     i2u314_40:
 12783  0024D2  0A2E               	xorlw	46
 12784  0024D4  A4D8               	btfss	status,2,c
 12785  0024D6  D029               	goto	i2l3682
 12786                           
 12787                           ;disp.c: 205: {
 12788                           ;disp.c: 206: screen.digits.screen[cnt + 1].bits |= 0b10000000;
 12789  0024D8  C025  F01E         	movff	writeString@cnt,??_writeString
 12790  0024DC  6A1F               	clrf	(??_writeString+1)& (0+255),c
 12791  0024DE  BE1E               	btfsc	??_writeString& (0+255),7,c
 12792  0024E0  061F               	decf	(??_writeString+1)& (0+255),f,c
 12793  0024E2  0E01               	movlw	1
 12794  0024E4  261E               	addwf	??_writeString,f,c
 12795  0024E6  0E00               	movlw	0
 12796  0024E8  221F               	addwfc	??_writeString+1,f,c
 12797  0024EA  0100               	movlb	0	; () banked
 12798  0024EC  0ED3               	movlw	low _screen
 12799  0024EE  241E               	addwf	??_writeString,w,c
 12800  0024F0  6ED9               	movwf	fsr2l,c
 12801  0024F2  0100               	movlb	0	; () banked
 12802  0024F4  0E00               	movlw	high _screen
 12803  0024F6  201F               	addwfc	??_writeString+1,w,c
 12804  0024F8  6EDA               	movwf	fsr2h,c
 12805  0024FA  0E00               	movlw	0
 12806  0024FC  8EDB               	bsf	plusw2,7,c
 12807                           
 12808                           ; BSR set to: 0
 12809                           ;disp.c: 207: screen.changed |= 1 << (cnt + 1);
 12810  0024FE  C025  F01E         	movff	writeString@cnt,??_writeString
 12811  002502  0E01               	movlw	1
 12812  002504  261E               	addwf	??_writeString,f,c
 12813  002506  0E01               	movlw	1
 12814  002508  6E1F               	movwf	(??_writeString+1)& (0+255),c
 12815  00250A  6A20               	clrf	(??_writeString+2)& (0+255),c
 12816  00250C  2A1E               	incf	??_writeString,f,c
 12817  00250E  D003               	goto	i2u316_44
 12818  002510                     i2u316_45:
 12819  002510  90D8               	bcf	status,0,c
 12820  002512  361F               	rlcf	??_writeString+1,f,c
 12821  002514  3620               	rlcf	??_writeString+2,f,c
 12822  002516                     i2u316_44:
 12823  002516  2E1E               	decfsz	??_writeString,f,c
 12824  002518  D7FB               	goto	i2u316_45
 12825  00251A  501F               	movf	??_writeString+1,w,c
 12826  00251C  0100               	movlb	0	; () banked
 12827  00251E  13DE               	iorwf	(_screen+11)& (0+255),f,b
 12828  002520  5020               	movf	??_writeString+2,w,c
 12829  002522  0100               	movlb	0	; () banked
 12830  002524  13DF               	iorwf	(_screen+12)& (0+255),f,b
 12831                           
 12832                           ; BSR set to: 0
 12833                           ;disp.c: 208: bits++;
 12834  002526  2A22               	incf	writeString@bits,f,c
 12835                           
 12836                           ; BSR set to: 0
 12837                           ;disp.c: 209: i++;
 12838  002528  2A24               	incf	writeString@i,f,c
 12839  00252A                     i2l3682:
 12840                           
 12841                           ;disp.c: 210: }
 12842                           ;disp.c: 211: if (getFontChar(string[i]) || string[i] == ' ')
 12843  00252A  5024               	movf	writeString@i,w,c
 12844  00252C  6E0F               	movwf	___wmul@multiplier,c
 12845  00252E  6A10               	clrf	___wmul@multiplier+1,c
 12846  002530  BE0F               	btfsc	___wmul@multiplier,7,c
 12847  002532  0610               	decf	___wmul@multiplier+1,f,c
 12848  002534  0E00               	movlw	0
 12849  002536  6E12               	movwf	___wmul@multiplicand+1,c
 12850  002538  0E01               	movlw	1
 12851  00253A  6E11               	movwf	___wmul@multiplicand,c
 12852  00253C  ECD0  F022         	call	___wmul	;wreg free
 12853  002540  C01C  F01E         	movff	writeString@string,??_writeString
 12854  002544  C01D  F01F         	movff	writeString@string+1,??_writeString+1
 12855  002548  500F               	movf	?___wmul,w,c
 12856  00254A  261E               	addwf	??_writeString,f,c
 12857  00254C  5010               	movf	?___wmul+1,w,c
 12858  00254E  221F               	addwfc	??_writeString+1,f,c
 12859  002550  C01E  FFF6         	movff	??_writeString,tblptrl
 12860  002554  C01F  FFF7         	movff	??_writeString+1,tblptrh
 12861  002558  6AF8               	clrf	tblptru,c
 12862  00255A  0E07               	movlw	(high __ramtop+-1)
 12863  00255C  64F7               	cpfsgt	tblptrh,c
 12864  00255E  D003               	bra	i2u317_47
 12865  002560  0008               	tblrd		*
 12866  002562  50F5               	movf	tablat,w,c
 12867  002564  D005               	bra	i2u317_40
 12868  002566                     i2u317_47:
 12869  002566  CFF6 FFE9          	movff	tblptrl,fsr0l
 12870  00256A  CFF7 FFEA          	movff	tblptrh,fsr0h
 12871  00256E  50EF               	movf	indf0,w,c
 12872  002570                     i2u317_40:
 12873  002570  EC51  F015         	call	_getFontChar
 12874  002574  0900               	iorlw	0
 12875  002576  A4D8               	btfss	status,2,c
 12876  002578  D026               	goto	i2l3686
 12877  00257A  5024               	movf	writeString@i,w,c
 12878  00257C  6E0F               	movwf	___wmul@multiplier,c
 12879  00257E  6A10               	clrf	___wmul@multiplier+1,c
 12880  002580  BE0F               	btfsc	___wmul@multiplier,7,c
 12881  002582  0610               	decf	___wmul@multiplier+1,f,c
 12882  002584  0E00               	movlw	0
 12883  002586  6E12               	movwf	___wmul@multiplicand+1,c
 12884  002588  0E01               	movlw	1
 12885  00258A  6E11               	movwf	___wmul@multiplicand,c
 12886  00258C  ECD0  F022         	call	___wmul	;wreg free
 12887  002590  C01C  F01E         	movff	writeString@string,??_writeString
 12888  002594  C01D  F01F         	movff	writeString@string+1,??_writeString+1
 12889  002598  500F               	movf	?___wmul,w,c
 12890  00259A  261E               	addwf	??_writeString,f,c
 12891  00259C  5010               	movf	?___wmul+1,w,c
 12892  00259E  221F               	addwfc	??_writeString+1,f,c
 12893  0025A0  C01E  FFF6         	movff	??_writeString,tblptrl
 12894  0025A4  C01F  FFF7         	movff	??_writeString+1,tblptrh
 12895  0025A8  6AF8               	clrf	tblptru,c
 12896  0025AA  0E07               	movlw	(high __ramtop+-1)
 12897  0025AC  64F7               	cpfsgt	tblptrh,c
 12898  0025AE  D003               	bra	i2u319_47
 12899  0025B0  0008               	tblrd		*
 12900  0025B2  50F5               	movf	tablat,w,c
 12901  0025B4  D005               	bra	i2u319_40
 12902  0025B6                     i2u319_47:
 12903  0025B6  CFF6 FFE9          	movff	tblptrl,fsr0l
 12904  0025BA  CFF7 FFEA          	movff	tblptrh,fsr0h
 12905  0025BE  50EF               	movf	indf0,w,c
 12906  0025C0                     i2u319_40:
 12907  0025C0  0A20               	xorlw	32
 12908  0025C2  A4D8               	btfss	status,2,c
 12909  0025C4  D031               	goto	i2l3688
 12910  0025C6                     i2l3686:
 12911                           
 12912                           ;disp.c: 212: {
 12913                           ;disp.c: 213: writeChar(1 << cnt, string[i]);
 12914  0025C6  5024               	movf	writeString@i,w,c
 12915  0025C8  6E0F               	movwf	___wmul@multiplier,c
 12916  0025CA  6A10               	clrf	___wmul@multiplier+1,c
 12917  0025CC  BE0F               	btfsc	___wmul@multiplier,7,c
 12918  0025CE  0610               	decf	___wmul@multiplier+1,f,c
 12919  0025D0  0E00               	movlw	0
 12920  0025D2  6E12               	movwf	___wmul@multiplicand+1,c
 12921  0025D4  0E01               	movlw	1
 12922  0025D6  6E11               	movwf	___wmul@multiplicand,c
 12923  0025D8  ECD0  F022         	call	___wmul	;wreg free
 12924  0025DC  C01C  F01E         	movff	writeString@string,??_writeString
 12925  0025E0  C01D  F01F         	movff	writeString@string+1,??_writeString+1
 12926  0025E4  500F               	movf	?___wmul,w,c
 12927  0025E6  261E               	addwf	??_writeString,f,c
 12928  0025E8  5010               	movf	?___wmul+1,w,c
 12929  0025EA  221F               	addwfc	??_writeString+1,f,c
 12930  0025EC  C01E  FFF6         	movff	??_writeString,tblptrl
 12931  0025F0  C01F  FFF7         	movff	??_writeString+1,tblptrh
 12932  0025F4  6AF8               	clrf	tblptru,c
 12933  0025F6  0E07               	movlw	(high __ramtop+-1)
 12934  0025F8  64F7               	cpfsgt	tblptrh,c
 12935  0025FA  D003               	bra	i2u321_47
 12936  0025FC  0008               	tblrd		*
 12937  0025FE  50F5               	movf	tablat,w,c
 12938  002600  D005               	bra	i2u321_40
 12939  002602                     i2u321_47:
 12940  002602  CFF6 FFE9          	movff	tblptrl,fsr0l
 12941  002606  CFF7 FFEA          	movff	tblptrh,fsr0h
 12942  00260A  50EF               	movf	indf0,w,c
 12943  00260C                     i2u321_40:
 12944  00260C  6E15               	movwf	writeChar@ch,c
 12945  00260E  C025  F020         	movff	writeString@cnt,??_writeString+2
 12946  002612  0E01               	movlw	1
 12947  002614  6E21               	movwf	(??_writeString+3)& (0+255),c
 12948  002616  2A20               	incf	??_writeString+2,f,c
 12949  002618  D002               	goto	i2u322_44
 12950  00261A                     i2u322_45:
 12951  00261A  90D8               	bcf	status,0,c
 12952  00261C  3621               	rlcf	??_writeString+3,f,c
 12953  00261E                     i2u322_44:
 12954  00261E  2E20               	decfsz	??_writeString+2,f,c
 12955  002620  D7FC               	goto	i2u322_45
 12956  002622  5021               	movf	??_writeString+3,w,c
 12957  002624  ECED  F021         	call	_writeChar
 12958  002628                     i2l3688:
 12959                           
 12960                           ;disp.c: 214: }
 12961                           ;disp.c: 215: i++;
 12962  002628  2A24               	incf	writeString@i,f,c
 12963  00262A                     i2l3690:
 12964  00262A  0625               	decf	writeString@cnt,f,c
 12965  00262C                     i2l3692:
 12966  00262C  2E22               	decfsz	writeString@bits,f,c
 12967  00262E  D6FC               	goto	i2l3666
 12968  002630                     i2l119:
 12969  002630  0012               	return	
 12970  002632                     __end_of_writeString:
 12971                           	opt stack 0
 12972                           tosu	equ	0xFFF
 12973                           tosh	equ	0xFFE
 12974                           tosl	equ	0xFFD
 12975                           pclatu	equ	0xFFB
 12976                           pclath	equ	0xFFA
 12977                           tblptru	equ	0xFF8
 12978                           tblptrh	equ	0xFF7
 12979                           tblptrl	equ	0xFF6
 12980                           tablat	equ	0xFF5
 12981                           prodh	equ	0xFF4
 12982                           prodl	equ	0xFF3
 12983                           intcon	equ	0xFF2
 12984                           intcon2	equ	0xFF1
 12985                           indf0	equ	0xFEF
 12986                           postinc0	equ	0xFEE
 12987                           fsr0h	equ	0xFEA
 12988                           fsr0l	equ	0xFE9
 12989                           wreg	equ	0xFE8
 12990                           postinc1	equ	0xFE6
 12991                           postdec1	equ	0xFE5
 12992                           fsr1h	equ	0xFE2
 12993                           fsr1l	equ	0xFE1
 12994                           indf2	equ	0xFDF
 12995                           postinc2	equ	0xFDE
 12996                           postdec2	equ	0xFDD
 12997                           plusw2	equ	0xFDB
 12998                           fsr2h	equ	0xFDA
 12999                           fsr2l	equ	0xFD9
 13000                           status	equ	0xFD8
 13001                           
 13002 ;; *************** function _writeChar *****************
 13003 ;; Defined at:
 13004 ;;		line 127 in file "disp.c"
 13005 ;; Parameters:    Size  Location     Type
 13006 ;;  digit           1    wreg     unsigned char 
 13007 ;;  ch              1   20[COMRAM] unsigned char 
 13008 ;; Auto vars:     Size  Location     Type
 13009 ;;  digit           1   26[COMRAM] unsigned char 
 13010 ;;  dig             1   25[COMRAM] unsigned char 
 13011 ;; Return value:  Size  Location     Type
 13012 ;;		None               void
 13013 ;; Registers used:
 13014 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13015 ;; Tracked objects:
 13016 ;;		On entry : 0/0
 13017 ;;		On exit  : 0/0
 13018 ;;		Unchanged: 0/0
 13019 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13020 ;;      Params:         1       0       0       0       0       0       0       0       0
 13021 ;;      Locals:         2       0       0       0       0       0       0       0       0
 13022 ;;      Temps:          4       0       0       0       0       0       0       0       0
 13023 ;;      Totals:         7       0       0       0       0       0       0       0       0
 13024 ;;Total ram usage:        7 bytes
 13025 ;; Hardware stack levels used:    1
 13026 ;; Hardware stack levels required when called:    1
 13027 ;; This function calls:
 13028 ;;		_getFontChar
 13029 ;;		_log2
 13030 ;; This function is called by:
 13031 ;;		_writeString
 13032 ;; This function uses a non-reentrant model
 13033 ;;
 13034                           
 13035                           	psect	text42
 13036  0043DA                     __ptext42:
 13037                           	opt stack 0
 13038  0043DA                     _writeChar:
 13039                           	opt stack 22
 13040                           
 13041                           ;incstack = 0
 13042                           ;writeChar@digit stored from wreg
 13043  0043DA  6E1B               	movwf	writeChar@digit,c
 13044                           
 13045                           ;disp.c: 129: uint8_t dig = (uint8_t) log2(digit);
 13046  0043DC  501B               	movf	writeChar@digit,w,c
 13047  0043DE  6E0C               	movwf	log2@num,c
 13048  0043E0  6A0D               	clrf	log2@num+1,c
 13049  0043E2  6A0E               	clrf	log2@num+2,c
 13050  0043E4  6A0F               	clrf	log2@num+3,c
 13051  0043E6  EC11  F022         	call	_log2	;wreg free
 13052  0043EA  C00C  F016         	movff	?_log2,??_writeChar
 13053  0043EE  C00D  F017         	movff	?_log2+1,??_writeChar+1
 13054  0043F2  C00E  F018         	movff	?_log2+2,??_writeChar+2
 13055  0043F6  C00F  F019         	movff	?_log2+3,??_writeChar+3
 13056  0043FA  5016               	movf	??_writeChar,w,c
 13057  0043FC  6E1A               	movwf	writeChar@dig,c
 13058                           
 13059                           ;disp.c: 130: screen.digits.screen[dig].bits = getFontChar(ch);
 13060  0043FE  501A               	movf	writeChar@dig,w,c
 13061  004400  0D01               	mullw	1
 13062  004402  0100               	movlb	0	; () banked
 13063  004404  0ED3               	movlw	low _screen
 13064  004406  24F3               	addwf	prodl,w,c
 13065  004408  6ED9               	movwf	fsr2l,c
 13066  00440A  0100               	movlb	0	; () banked
 13067  00440C  0E00               	movlw	high _screen
 13068  00440E  20F4               	addwfc	prodh,w,c
 13069  004410  6EDA               	movwf	fsr2h,c
 13070  004412  5015               	movf	writeChar@ch,w,c
 13071  004414  EC51  F015         	call	_getFontChar
 13072  004418  6EDF               	movwf	indf2,c
 13073                           
 13074                           ;disp.c: 131: screen.changed |= digit;
 13075  00441A  501B               	movf	writeChar@digit,w,c
 13076  00441C  0100               	movlb	0	; () banked
 13077  00441E  13DE               	iorwf	(_screen+11)& (0+255),f,b
 13078                           
 13079                           ; BSR set to: 0
 13080  004420  0012               	return	
 13081  004422                     __end_of_writeChar:
 13082                           	opt stack 0
 13083                           tosu	equ	0xFFF
 13084                           tosh	equ	0xFFE
 13085                           tosl	equ	0xFFD
 13086                           pclatu	equ	0xFFB
 13087                           pclath	equ	0xFFA
 13088                           tblptru	equ	0xFF8
 13089                           tblptrh	equ	0xFF7
 13090                           tblptrl	equ	0xFF6
 13091                           tablat	equ	0xFF5
 13092                           prodh	equ	0xFF4
 13093                           prodl	equ	0xFF3
 13094                           intcon	equ	0xFF2
 13095                           intcon2	equ	0xFF1
 13096                           indf0	equ	0xFEF
 13097                           postinc0	equ	0xFEE
 13098                           fsr0h	equ	0xFEA
 13099                           fsr0l	equ	0xFE9
 13100                           wreg	equ	0xFE8
 13101                           postinc1	equ	0xFE6
 13102                           postdec1	equ	0xFE5
 13103                           fsr1h	equ	0xFE2
 13104                           fsr1l	equ	0xFE1
 13105                           indf2	equ	0xFDF
 13106                           postinc2	equ	0xFDE
 13107                           postdec2	equ	0xFDD
 13108                           plusw2	equ	0xFDB
 13109                           fsr2h	equ	0xFDA
 13110                           fsr2l	equ	0xFD9
 13111                           status	equ	0xFD8
 13112                           
 13113 ;; *************** function _log2 *****************
 13114 ;; Defined at:
 13115 ;;		line 47 in file "defs.c"
 13116 ;; Parameters:    Size  Location     Type
 13117 ;;  num             4   11[COMRAM] unsigned long 
 13118 ;; Auto vars:     Size  Location     Type
 13119 ;;  log2Val         4   15[COMRAM] unsigned long 
 13120 ;; Return value:  Size  Location     Type
 13121 ;;                  4   11[COMRAM] unsigned long 
 13122 ;; Registers used:
 13123 ;;		wreg, status,2, status,0
 13124 ;; Tracked objects:
 13125 ;;		On entry : 0/0
 13126 ;;		On exit  : 0/0
 13127 ;;		Unchanged: 0/0
 13128 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13129 ;;      Params:         4       0       0       0       0       0       0       0       0
 13130 ;;      Locals:         4       0       0       0       0       0       0       0       0
 13131 ;;      Temps:          0       0       0       0       0       0       0       0       0
 13132 ;;      Totals:         8       0       0       0       0       0       0       0       0
 13133 ;;Total ram usage:        8 bytes
 13134 ;; Hardware stack levels used:    1
 13135 ;; This function calls:
 13136 ;;		Nothing
 13137 ;; This function is called by:
 13138 ;;		_writeDigit
 13139 ;;		_writeChar
 13140 ;;		_writeString
 13141 ;; This function uses a non-reentrant model
 13142 ;;
 13143                           
 13144                           	psect	text43
 13145  004422                     __ptext43:
 13146                           	opt stack 0
 13147  004422                     _log2:
 13148                           	opt stack 23
 13149                           
 13150                           ;defs.c: 49: uint32_t log2Val = 0;
 13151                           
 13152                           ; BSR set to: 0
 13153                           ;incstack = 0
 13154  004422  0E00               	movlw	0
 13155  004424  6E10               	movwf	log2@log2Val,c
 13156  004426  0E00               	movlw	0
 13157  004428  6E11               	movwf	log2@log2Val+1,c
 13158  00442A  0E00               	movlw	0
 13159  00442C  6E12               	movwf	log2@log2Val+2,c
 13160  00442E  0E00               	movlw	0
 13161  004430  6E13               	movwf	log2@log2Val+3,c
 13162                           
 13163                           ;defs.c: 50: while (num >>= 1) log2Val++;
 13164  004432  D006               	goto	i2l510
 13165  004434                     i2l3564:
 13166  004434  0E01               	movlw	1
 13167  004436  2610               	addwf	log2@log2Val,f,c
 13168  004438  0E00               	movlw	0
 13169  00443A  2211               	addwfc	log2@log2Val+1,f,c
 13170  00443C  2212               	addwfc	log2@log2Val+2,f,c
 13171  00443E  2213               	addwfc	log2@log2Val+3,f,c
 13172  004440                     i2l510:
 13173  004440  90D8               	bcf	status,0,c
 13174  004442  320F               	rrcf	log2@num+3,f,c
 13175  004444  320E               	rrcf	log2@num+2,f,c
 13176  004446  320D               	rrcf	log2@num+1,f,c
 13177  004448  320C               	rrcf	log2@num,f,c
 13178  00444A  500F               	movf	(log2@num+3)& (0+255),w,c
 13179  00444C  100C               	iorwf	log2@num& (0+255),w,c
 13180  00444E  100D               	iorwf	(log2@num+1)& (0+255),w,c
 13181  004450  100E               	iorwf	(log2@num+2)& (0+255),w,c
 13182  004452  A4D8               	btfss	status,2,c
 13183  004454  D7EF               	goto	i2l3564
 13184                           
 13185                           ;defs.c: 51: return log2Val;
 13186  004456  C010  F00C         	movff	log2@log2Val,?_log2
 13187  00445A  C011  F00D         	movff	log2@log2Val+1,?_log2+1
 13188  00445E  C012  F00E         	movff	log2@log2Val+2,?_log2+2
 13189  004462  C013  F00F         	movff	log2@log2Val+3,?_log2+3
 13190  004466  0012               	return	
 13191  004468                     __end_of_log2:
 13192                           	opt stack 0
 13193                           tosu	equ	0xFFF
 13194                           tosh	equ	0xFFE
 13195                           tosl	equ	0xFFD
 13196                           pclatu	equ	0xFFB
 13197                           pclath	equ	0xFFA
 13198                           tblptru	equ	0xFF8
 13199                           tblptrh	equ	0xFF7
 13200                           tblptrl	equ	0xFF6
 13201                           tablat	equ	0xFF5
 13202                           prodh	equ	0xFF4
 13203                           prodl	equ	0xFF3
 13204                           intcon	equ	0xFF2
 13205                           intcon2	equ	0xFF1
 13206                           indf0	equ	0xFEF
 13207                           postinc0	equ	0xFEE
 13208                           fsr0h	equ	0xFEA
 13209                           fsr0l	equ	0xFE9
 13210                           wreg	equ	0xFE8
 13211                           postinc1	equ	0xFE6
 13212                           postdec1	equ	0xFE5
 13213                           fsr1h	equ	0xFE2
 13214                           fsr1l	equ	0xFE1
 13215                           indf2	equ	0xFDF
 13216                           postinc2	equ	0xFDE
 13217                           postdec2	equ	0xFDD
 13218                           plusw2	equ	0xFDB
 13219                           fsr2h	equ	0xFDA
 13220                           fsr2l	equ	0xFD9
 13221                           status	equ	0xFD8
 13222                           
 13223 ;; *************** function _getFontChar *****************
 13224 ;; Defined at:
 13225 ;;		line 116 in file "display1.h"
 13226 ;; Parameters:    Size  Location     Type
 13227 ;;  ch              1    wreg     unsigned char 
 13228 ;; Auto vars:     Size  Location     Type
 13229 ;;  ch              1    4[COMRAM] unsigned char 
 13230 ;; Return value:  Size  Location     Type
 13231 ;;                  1    wreg      unsigned char 
 13232 ;; Registers used:
 13233 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru
 13234 ;; Tracked objects:
 13235 ;;		On entry : 0/0
 13236 ;;		On exit  : 0/0
 13237 ;;		Unchanged: 0/0
 13238 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13239 ;;      Params:         0       0       0       0       0       0       0       0       0
 13240 ;;      Locals:         1       0       0       0       0       0       0       0       0
 13241 ;;      Temps:          4       0       0       0       0       0       0       0       0
 13242 ;;      Totals:         5       0       0       0       0       0       0       0       0
 13243 ;;Total ram usage:        5 bytes
 13244 ;; Hardware stack levels used:    1
 13245 ;; This function calls:
 13246 ;;		Nothing
 13247 ;; This function is called by:
 13248 ;;		_writeChar
 13249 ;;		_writeString
 13250 ;; This function uses a non-reentrant model
 13251 ;;
 13252                           
 13253                           	psect	text44
 13254  002AA2                     __ptext44:
 13255                           	opt stack 0
 13256  002AA2                     _getFontChar:
 13257                           	opt stack 22
 13258                           
 13259                           ;incstack = 0
 13260                           ;getFontChar@ch stored from wreg
 13261  002AA2  6E05               	movwf	getFontChar@ch,c
 13262                           
 13263                           ;display1.h: 118: switch (ch)
 13264  002AA4  D024               	goto	i2l3560
 13265  002AA6                     i2l3518:
 13266                           
 13267                           ;display1.h: 121: return lcd_font[ch - '0'];
 13268  002AA6  0ED0               	movlw	208
 13269  002AA8  D001               	goto	L27
 13270  002AAA                     i2l3522:
 13271                           
 13272                           ;display1.h: 123: return lcd_font[ch - ('0' + ('a' - 'A'))];
 13273  002AAA  0EB0               	movlw	176
 13274  002AAC                     L27:
 13275  002AAC  6E01               	movwf	??_getFontChar& (0+255),c
 13276  002AAE  0EFF               	movlw	255
 13277  002AB0  6E02               	movwf	(??_getFontChar+1)& (0+255),c
 13278  002AB2  5005               	movf	getFontChar@ch,w,c
 13279  002AB4  6E03               	movwf	(??_getFontChar+2)& (0+255),c
 13280  002AB6  6A04               	clrf	(??_getFontChar+3)& (0+255),c
 13281  002AB8  5001               	movf	??_getFontChar,w,c
 13282  002ABA  2603               	addwf	??_getFontChar+2,f,c
 13283  002ABC  5002               	movf	??_getFontChar+1,w,c
 13284  002ABE  2204               	addwfc	??_getFontChar+3,f,c
 13285  002AC0  0E75               	movlw	low _lcd_font
 13286  002AC2  2403               	addwf	??_getFontChar+2,w,c
 13287  002AC4  6EF6               	movwf	tblptrl,c
 13288  002AC6  0E7C               	movlw	high _lcd_font
 13289  002AC8  2004               	addwfc	??_getFontChar+3,w,c
 13290  002ACA  6EF7               	movwf	tblptrh,c
 13291  002ACC                     	if	0	;There are less than 3 active tblptr bytes
 13292  002ACC                     	endif
 13293  002ACC  0008               	tblrd		*
 13294  002ACE  50F5               	movf	tablat,w,c
 13295  002AD0  D0F7               	goto	i2l43
 13296  002AD2                     i2l3526:
 13297                           
 13298                           ;display1.h: 125: return 0b01000000;
 13299  002AD2  0E40               	movlw	64
 13300  002AD4  D0F5               	goto	i2l43
 13301  002AD6                     i2l3530:
 13302                           
 13303                           ;display1.h: 127: case ',':
 13304                           ;display1.h: 128: return 0b10000000;
 13305  002AD6  0E80               	movlw	128
 13306  002AD8  D0F3               	goto	i2l43
 13307  002ADA                     i2l3534:
 13308                           
 13309                           ;display1.h: 130: return 0b00000001 + 0b00001000 + 0b00010000 + 0b00100000;
 13310  002ADA  0E39               	movlw	57
 13311  002ADC  D0F1               	goto	i2l43
 13312  002ADE                     i2l3538:
 13313                           
 13314                           ;display1.h: 132: return 0b00000001 + 0b00000010 + 0b00000100 + 0b00001000;
 13315  002ADE  0E0F               	movlw	15
 13316  002AE0  D0EF               	goto	i2l43
 13317  002AE2                     i2l3542:
 13318                           
 13319                           ;display1.h: 134: return 0b00001000;
 13320  002AE2  0E08               	movlw	8
 13321  002AE4  D0ED               	goto	i2l43
 13322  002AE6                     i2l3546:
 13323                           
 13324                           ;display1.h: 136: return 0b00000001 + 0b00000010 + 0b00100000 + 0b01000000;
 13325  002AE6  0E63               	movlw	99
 13326  002AE8  D0EB               	goto	i2l43
 13327  002AEA                     i2l3554:
 13328                           
 13329                           ;display1.h: 140: return 0;
 13330  002AEA  0E00               	movlw	0
 13331  002AEC  D0E9               	goto	i2l43
 13332  002AEE                     i2l3560:
 13333  002AEE  5005               	movf	getFontChar@ch,w,c
 13334                           
 13335                           ; Switch size 1, requested type "space"
 13336                           ; Number of cases is 77, Range of values is 32 to 122
 13337                           ; switch strategies available:
 13338                           ; Name         Instructions Cycles
 13339                           ; simple_byte          232   117 (average)
 13340                           ;	Chosen strategy is simple_byte
 13341  002AF0  0A20               	xorlw	32	; case 32
 13342  002AF2  B4D8               	btfsc	status,2,c
 13343  002AF4  D7FA               	goto	i2l3554
 13344  002AF6  0A0A               	xorlw	10	; case 42
 13345  002AF8  B4D8               	btfsc	status,2,c
 13346  002AFA  D7F5               	goto	i2l3546
 13347  002AFC  0A06               	xorlw	6	; case 44
 13348  002AFE  B4D8               	btfsc	status,2,c
 13349  002B00  D7EA               	goto	i2l3530
 13350  002B02  0A01               	xorlw	1	; case 45
 13351  002B04  B4D8               	btfsc	status,2,c
 13352  002B06  D7E5               	goto	i2l3526
 13353  002B08  0A03               	xorlw	3	; case 46
 13354  002B0A  B4D8               	btfsc	status,2,c
 13355  002B0C  D7E4               	goto	i2l3530
 13356  002B0E  0A1E               	xorlw	30	; case 48
 13357  002B10  B4D8               	btfsc	status,2,c
 13358  002B12  D7C9               	goto	i2l3518
 13359  002B14  0A01               	xorlw	1	; case 49
 13360  002B16  B4D8               	btfsc	status,2,c
 13361  002B18  D7C6               	goto	i2l3518
 13362  002B1A  0A03               	xorlw	3	; case 50
 13363  002B1C  B4D8               	btfsc	status,2,c
 13364  002B1E  D7C3               	goto	i2l3518
 13365  002B20  0A01               	xorlw	1	; case 51
 13366  002B22  B4D8               	btfsc	status,2,c
 13367  002B24  D7C0               	goto	i2l3518
 13368  002B26  0A07               	xorlw	7	; case 52
 13369  002B28  B4D8               	btfsc	status,2,c
 13370  002B2A  D7BD               	goto	i2l3518
 13371  002B2C  0A01               	xorlw	1	; case 53
 13372  002B2E  B4D8               	btfsc	status,2,c
 13373  002B30  D7BA               	goto	i2l3518
 13374  002B32  0A03               	xorlw	3	; case 54
 13375  002B34  B4D8               	btfsc	status,2,c
 13376  002B36  D7B7               	goto	i2l3518
 13377  002B38  0A01               	xorlw	1	; case 55
 13378  002B3A  B4D8               	btfsc	status,2,c
 13379  002B3C  D7B4               	goto	i2l3518
 13380  002B3E  0A0F               	xorlw	15	; case 56
 13381  002B40  B4D8               	btfsc	status,2,c
 13382  002B42  D7B1               	goto	i2l3518
 13383  002B44  0A01               	xorlw	1	; case 57
 13384  002B46  B4D8               	btfsc	status,2,c
 13385  002B48  D7AE               	goto	i2l3518
 13386  002B4A  0A03               	xorlw	3	; case 58
 13387  002B4C  B4D8               	btfsc	status,2,c
 13388  002B4E  D7AB               	goto	i2l3518
 13389  002B50  0A01               	xorlw	1	; case 59
 13390  002B52  B4D8               	btfsc	status,2,c
 13391  002B54  D7A8               	goto	i2l3518
 13392  002B56  0A07               	xorlw	7	; case 60
 13393  002B58  B4D8               	btfsc	status,2,c
 13394  002B5A  D7A5               	goto	i2l3518
 13395  002B5C  0A01               	xorlw	1	; case 61
 13396  002B5E  B4D8               	btfsc	status,2,c
 13397  002B60  D7A2               	goto	i2l3518
 13398  002B62  0A03               	xorlw	3	; case 62
 13399  002B64  B4D8               	btfsc	status,2,c
 13400  002B66  D79F               	goto	i2l3518
 13401  002B68  0A01               	xorlw	1	; case 63
 13402  002B6A  B4D8               	btfsc	status,2,c
 13403  002B6C  D79C               	goto	i2l3518
 13404  002B6E  0A7F               	xorlw	127	; case 64
 13405  002B70  B4D8               	btfsc	status,2,c
 13406  002B72  D799               	goto	i2l3518
 13407  002B74  0A01               	xorlw	1	; case 65
 13408  002B76  B4D8               	btfsc	status,2,c
 13409  002B78  D796               	goto	i2l3518
 13410  002B7A  0A03               	xorlw	3	; case 66
 13411  002B7C  B4D8               	btfsc	status,2,c
 13412  002B7E  D793               	goto	i2l3518
 13413  002B80  0A01               	xorlw	1	; case 67
 13414  002B82  B4D8               	btfsc	status,2,c
 13415  002B84  D790               	goto	i2l3518
 13416  002B86  0A07               	xorlw	7	; case 68
 13417  002B88  B4D8               	btfsc	status,2,c
 13418  002B8A  D78D               	goto	i2l3518
 13419  002B8C  0A01               	xorlw	1	; case 69
 13420  002B8E  B4D8               	btfsc	status,2,c
 13421  002B90  D78A               	goto	i2l3518
 13422  002B92  0A03               	xorlw	3	; case 70
 13423  002B94  B4D8               	btfsc	status,2,c
 13424  002B96  D787               	goto	i2l3518
 13425  002B98  0A01               	xorlw	1	; case 71
 13426  002B9A  B4D8               	btfsc	status,2,c
 13427  002B9C  D784               	goto	i2l3518
 13428  002B9E  0A0F               	xorlw	15	; case 72
 13429  002BA0  B4D8               	btfsc	status,2,c
 13430  002BA2  D781               	goto	i2l3518
 13431  002BA4  0A01               	xorlw	1	; case 73
 13432  002BA6  B4D8               	btfsc	status,2,c
 13433  002BA8  D77E               	goto	i2l3518
 13434  002BAA  0A03               	xorlw	3	; case 74
 13435  002BAC  B4D8               	btfsc	status,2,c
 13436  002BAE  D77B               	goto	i2l3518
 13437  002BB0  0A01               	xorlw	1	; case 75
 13438  002BB2  B4D8               	btfsc	status,2,c
 13439  002BB4  D778               	goto	i2l3518
 13440  002BB6  0A07               	xorlw	7	; case 76
 13441  002BB8  B4D8               	btfsc	status,2,c
 13442  002BBA  D775               	goto	i2l3518
 13443  002BBC  0A01               	xorlw	1	; case 77
 13444  002BBE  B4D8               	btfsc	status,2,c
 13445  002BC0  D772               	goto	i2l3518
 13446  002BC2  0A03               	xorlw	3	; case 78
 13447  002BC4  B4D8               	btfsc	status,2,c
 13448  002BC6  D76F               	goto	i2l3518
 13449  002BC8  0A01               	xorlw	1	; case 79
 13450  002BCA  B4D8               	btfsc	status,2,c
 13451  002BCC  D76C               	goto	i2l3518
 13452  002BCE  0A1F               	xorlw	31	; case 80
 13453  002BD0  B4D8               	btfsc	status,2,c
 13454  002BD2  D769               	goto	i2l3518
 13455  002BD4  0A01               	xorlw	1	; case 81
 13456  002BD6  B4D8               	btfsc	status,2,c
 13457  002BD8  D766               	goto	i2l3518
 13458  002BDA  0A03               	xorlw	3	; case 82
 13459  002BDC  B4D8               	btfsc	status,2,c
 13460  002BDE  D763               	goto	i2l3518
 13461  002BE0  0A01               	xorlw	1	; case 83
 13462  002BE2  B4D8               	btfsc	status,2,c
 13463  002BE4  D760               	goto	i2l3518
 13464  002BE6  0A07               	xorlw	7	; case 84
 13465  002BE8  B4D8               	btfsc	status,2,c
 13466  002BEA  D75D               	goto	i2l3518
 13467  002BEC  0A01               	xorlw	1	; case 85
 13468  002BEE  B4D8               	btfsc	status,2,c
 13469  002BF0  D75A               	goto	i2l3518
 13470  002BF2  0A03               	xorlw	3	; case 86
 13471  002BF4  B4D8               	btfsc	status,2,c
 13472  002BF6  D757               	goto	i2l3518
 13473  002BF8  0A01               	xorlw	1	; case 87
 13474  002BFA  B4D8               	btfsc	status,2,c
 13475  002BFC  D754               	goto	i2l3518
 13476  002BFE  0A0F               	xorlw	15	; case 88
 13477  002C00  B4D8               	btfsc	status,2,c
 13478  002C02  D751               	goto	i2l3518
 13479  002C04  0A01               	xorlw	1	; case 89
 13480  002C06  B4D8               	btfsc	status,2,c
 13481  002C08  D74E               	goto	i2l3518
 13482  002C0A  0A03               	xorlw	3	; case 90
 13483  002C0C  B4D8               	btfsc	status,2,c
 13484  002C0E  D74B               	goto	i2l3518
 13485  002C10  0A01               	xorlw	1	; case 91
 13486  002C12  B4D8               	btfsc	status,2,c
 13487  002C14  D762               	goto	i2l3534
 13488  002C16  0A06               	xorlw	6	; case 93
 13489  002C18  B4D8               	btfsc	status,2,c
 13490  002C1A  D761               	goto	i2l3538
 13491  002C1C  0A02               	xorlw	2	; case 95
 13492  002C1E  B4D8               	btfsc	status,2,c
 13493  002C20  D760               	goto	i2l3542
 13494  002C22  0A3E               	xorlw	62	; case 97
 13495  002C24  B4D8               	btfsc	status,2,c
 13496  002C26  D741               	goto	i2l3522
 13497  002C28  0A03               	xorlw	3	; case 98
 13498  002C2A  B4D8               	btfsc	status,2,c
 13499  002C2C  D73E               	goto	i2l3522
 13500  002C2E  0A01               	xorlw	1	; case 99
 13501  002C30  B4D8               	btfsc	status,2,c
 13502  002C32  D73B               	goto	i2l3522
 13503  002C34  0A07               	xorlw	7	; case 100
 13504  002C36  B4D8               	btfsc	status,2,c
 13505  002C38  D738               	goto	i2l3522
 13506  002C3A  0A01               	xorlw	1	; case 101
 13507  002C3C  B4D8               	btfsc	status,2,c
 13508  002C3E  D735               	goto	i2l3522
 13509  002C40  0A03               	xorlw	3	; case 102
 13510  002C42  B4D8               	btfsc	status,2,c
 13511  002C44  D732               	goto	i2l3522
 13512  002C46  0A01               	xorlw	1	; case 103
 13513  002C48  B4D8               	btfsc	status,2,c
 13514  002C4A  D72F               	goto	i2l3522
 13515  002C4C  0A0F               	xorlw	15	; case 104
 13516  002C4E  B4D8               	btfsc	status,2,c
 13517  002C50  D72C               	goto	i2l3522
 13518  002C52  0A01               	xorlw	1	; case 105
 13519  002C54  B4D8               	btfsc	status,2,c
 13520  002C56  D729               	goto	i2l3522
 13521  002C58  0A03               	xorlw	3	; case 106
 13522  002C5A  B4D8               	btfsc	status,2,c
 13523  002C5C  D726               	goto	i2l3522
 13524  002C5E  0A01               	xorlw	1	; case 107
 13525  002C60  B4D8               	btfsc	status,2,c
 13526  002C62  D723               	goto	i2l3522
 13527  002C64  0A07               	xorlw	7	; case 108
 13528  002C66  B4D8               	btfsc	status,2,c
 13529  002C68  D720               	goto	i2l3522
 13530  002C6A  0A01               	xorlw	1	; case 109
 13531  002C6C  B4D8               	btfsc	status,2,c
 13532  002C6E  D71D               	goto	i2l3522
 13533  002C70  0A03               	xorlw	3	; case 110
 13534  002C72  B4D8               	btfsc	status,2,c
 13535  002C74  D71A               	goto	i2l3522
 13536  002C76  0A01               	xorlw	1	; case 111
 13537  002C78  B4D8               	btfsc	status,2,c
 13538  002C7A  D717               	goto	i2l3522
 13539  002C7C  0A1F               	xorlw	31	; case 112
 13540  002C7E  B4D8               	btfsc	status,2,c
 13541  002C80  D714               	goto	i2l3522
 13542  002C82  0A01               	xorlw	1	; case 113
 13543  002C84  B4D8               	btfsc	status,2,c
 13544  002C86  D711               	goto	i2l3522
 13545  002C88  0A03               	xorlw	3	; case 114
 13546  002C8A  B4D8               	btfsc	status,2,c
 13547  002C8C  D70E               	goto	i2l3522
 13548  002C8E  0A01               	xorlw	1	; case 115
 13549  002C90  B4D8               	btfsc	status,2,c
 13550  002C92  D70B               	goto	i2l3522
 13551  002C94  0A07               	xorlw	7	; case 116
 13552  002C96  B4D8               	btfsc	status,2,c
 13553  002C98  D708               	goto	i2l3522
 13554  002C9A  0A01               	xorlw	1	; case 117
 13555  002C9C  B4D8               	btfsc	status,2,c
 13556  002C9E  D705               	goto	i2l3522
 13557  002CA0  0A03               	xorlw	3	; case 118
 13558  002CA2  B4D8               	btfsc	status,2,c
 13559  002CA4  D702               	goto	i2l3522
 13560  002CA6  0A01               	xorlw	1	; case 119
 13561  002CA8  B4D8               	btfsc	status,2,c
 13562  002CAA  D6FF               	goto	i2l3522
 13563  002CAC  0A0F               	xorlw	15	; case 120
 13564  002CAE  B4D8               	btfsc	status,2,c
 13565  002CB0  D6FC               	goto	i2l3522
 13566  002CB2  0A01               	xorlw	1	; case 121
 13567  002CB4  B4D8               	btfsc	status,2,c
 13568  002CB6  D6F9               	goto	i2l3522
 13569  002CB8  0A03               	xorlw	3	; case 122
 13570  002CBA  B4D8               	btfsc	status,2,c
 13571  002CBC  D6F6               	goto	i2l3522
 13572  002CBE  D715               	goto	i2l3554
 13573  002CC0                     i2l43:
 13574  002CC0  0012               	return	
 13575  002CC2                     __end_of_getFontChar:
 13576                           	opt stack 0
 13577                           tosu	equ	0xFFF
 13578                           tosh	equ	0xFFE
 13579                           tosl	equ	0xFFD
 13580                           pclatu	equ	0xFFB
 13581                           pclath	equ	0xFFA
 13582                           tblptru	equ	0xFF8
 13583                           tblptrh	equ	0xFF7
 13584                           tblptrl	equ	0xFF6
 13585                           tablat	equ	0xFF5
 13586                           prodh	equ	0xFF4
 13587                           prodl	equ	0xFF3
 13588                           intcon	equ	0xFF2
 13589                           intcon2	equ	0xFF1
 13590                           indf0	equ	0xFEF
 13591                           postinc0	equ	0xFEE
 13592                           fsr0h	equ	0xFEA
 13593                           fsr0l	equ	0xFE9
 13594                           wreg	equ	0xFE8
 13595                           postinc1	equ	0xFE6
 13596                           postdec1	equ	0xFE5
 13597                           fsr1h	equ	0xFE2
 13598                           fsr1l	equ	0xFE1
 13599                           indf2	equ	0xFDF
 13600                           postinc2	equ	0xFDE
 13601                           postdec2	equ	0xFDD
 13602                           plusw2	equ	0xFDB
 13603                           fsr2h	equ	0xFDA
 13604                           fsr2l	equ	0xFD9
 13605                           status	equ	0xFD8
 13606                           
 13607 ;; *************** function _hibit *****************
 13608 ;; Defined at:
 13609 ;;		line 18 in file "defs.c"
 13610 ;; Parameters:    Size  Location     Type
 13611 ;;  x               4    0[COMRAM] unsigned long 
 13612 ;; Auto vars:     Size  Location     Type
 13613 ;;  log2Val         4    7[COMRAM] unsigned long 
 13614 ;; Return value:  Size  Location     Type
 13615 ;;                  4    0[COMRAM] unsigned long 
 13616 ;; Registers used:
 13617 ;;		wreg, status,2, status,0
 13618 ;; Tracked objects:
 13619 ;;		On entry : 0/0
 13620 ;;		On exit  : 0/0
 13621 ;;		Unchanged: 0/0
 13622 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13623 ;;      Params:         4       0       0       0       0       0       0       0       0
 13624 ;;      Locals:         4       0       0       0       0       0       0       0       0
 13625 ;;      Temps:          3       0       0       0       0       0       0       0       0
 13626 ;;      Totals:        11       0       0       0       0       0       0       0       0
 13627 ;;Total ram usage:       11 bytes
 13628 ;; Hardware stack levels used:    1
 13629 ;; This function calls:
 13630 ;;		Nothing
 13631 ;; This function is called by:
 13632 ;;		_writeString
 13633 ;; This function uses a non-reentrant model
 13634 ;;
 13635                           
 13636                           	psect	text45
 13637  0041CE                     __ptext45:
 13638                           	opt stack 0
 13639  0041CE                     _hibit:
 13640                           	opt stack 23
 13641                           
 13642                           ;defs.c: 20: uint32_t log2Val = 0;
 13643                           
 13644                           ;incstack = 0
 13645  0041CE  0E00               	movlw	0
 13646  0041D0  6E08               	movwf	hibit@log2Val,c
 13647  0041D2  0E00               	movlw	0
 13648  0041D4  6E09               	movwf	hibit@log2Val+1,c
 13649  0041D6  0E00               	movlw	0
 13650  0041D8  6E0A               	movwf	hibit@log2Val+2,c
 13651  0041DA  0E00               	movlw	0
 13652  0041DC  6E0B               	movwf	hibit@log2Val+3,c
 13653                           
 13654                           ;defs.c: 21: while (x >>= 1) log2Val++;
 13655  0041DE  D006               	goto	i2l494
 13656  0041E0                     i2l3582:
 13657  0041E0  0E01               	movlw	1
 13658  0041E2  2608               	addwf	hibit@log2Val,f,c
 13659  0041E4  0E00               	movlw	0
 13660  0041E6  2209               	addwfc	hibit@log2Val+1,f,c
 13661  0041E8  220A               	addwfc	hibit@log2Val+2,f,c
 13662  0041EA  220B               	addwfc	hibit@log2Val+3,f,c
 13663  0041EC                     i2l494:
 13664  0041EC  90D8               	bcf	status,0,c
 13665  0041EE  3204               	rrcf	hibit@x+3,f,c
 13666  0041F0  3203               	rrcf	hibit@x+2,f,c
 13667  0041F2  3202               	rrcf	hibit@x+1,f,c
 13668  0041F4  3201               	rrcf	hibit@x,f,c
 13669  0041F6  5004               	movf	(hibit@x+3)& (0+255),w,c
 13670  0041F8  1001               	iorwf	hibit@x& (0+255),w,c
 13671  0041FA  1002               	iorwf	(hibit@x+1)& (0+255),w,c
 13672  0041FC  1003               	iorwf	(hibit@x+2)& (0+255),w,c
 13673  0041FE  A4D8               	btfss	status,2,c
 13674  004200  D7EF               	goto	i2l3582
 13675                           
 13676                           ;defs.c: 22: return 1 << log2Val;
 13677  004202  C008  F005         	movff	hibit@log2Val,??_hibit
 13678  004206  0E01               	movlw	1
 13679  004208  6E06               	movwf	(??_hibit+1)& (0+255),c
 13680  00420A  6A07               	clrf	(??_hibit+2)& (0+255),c
 13681  00420C  2A05               	incf	??_hibit,f,c
 13682  00420E  D003               	goto	i2u295_44
 13683  004210                     i2u295_45:
 13684  004210  90D8               	bcf	status,0,c
 13685  004212  3606               	rlcf	??_hibit+1,f,c
 13686  004214  3607               	rlcf	??_hibit+2,f,c
 13687  004216                     i2u295_44:
 13688  004216  2E05               	decfsz	??_hibit,f,c
 13689  004218  D7FB               	goto	i2u295_45
 13690  00421A  C006  F001         	movff	??_hibit+1,?_hibit
 13691  00421E  C007  F002         	movff	??_hibit+2,?_hibit+1
 13692  004222  0E00               	movlw	0
 13693  004224  BE02               	btfsc	?_hibit+1,7,c
 13694  004226  0EFF               	movlw	-1
 13695  004228  6E03               	movwf	?_hibit+2,c
 13696  00422A  6E04               	movwf	?_hibit+3,c
 13697  00422C  0012               	return	
 13698  00422E                     __end_of_hibit:
 13699                           	opt stack 0
 13700                           tosu	equ	0xFFF
 13701                           tosh	equ	0xFFE
 13702                           tosl	equ	0xFFD
 13703                           pclatu	equ	0xFFB
 13704                           pclath	equ	0xFFA
 13705                           tblptru	equ	0xFF8
 13706                           tblptrh	equ	0xFF7
 13707                           tblptrl	equ	0xFF6
 13708                           tablat	equ	0xFF5
 13709                           prodh	equ	0xFF4
 13710                           prodl	equ	0xFF3
 13711                           intcon	equ	0xFF2
 13712                           intcon2	equ	0xFF1
 13713                           indf0	equ	0xFEF
 13714                           postinc0	equ	0xFEE
 13715                           fsr0h	equ	0xFEA
 13716                           fsr0l	equ	0xFE9
 13717                           wreg	equ	0xFE8
 13718                           postinc1	equ	0xFE6
 13719                           postdec1	equ	0xFE5
 13720                           fsr1h	equ	0xFE2
 13721                           fsr1l	equ	0xFE1
 13722                           indf2	equ	0xFDF
 13723                           postinc2	equ	0xFDE
 13724                           postdec2	equ	0xFDD
 13725                           plusw2	equ	0xFDB
 13726                           fsr2h	equ	0xFDA
 13727                           fsr2l	equ	0xFD9
 13728                           status	equ	0xFD8
 13729                           
 13730 ;; *************** function _countBits *****************
 13731 ;; Defined at:
 13732 ;;		line 8 in file "defs.c"
 13733 ;; Parameters:    Size  Location     Type
 13734 ;;  num             4    0[COMRAM] unsigned long 
 13735 ;; Auto vars:     Size  Location     Type
 13736 ;;  ret             1    4[COMRAM] unsigned char 
 13737 ;; Return value:  Size  Location     Type
 13738 ;;                  1    wreg      unsigned char 
 13739 ;; Registers used:
 13740 ;;		wreg, status,2, status,0
 13741 ;; Tracked objects:
 13742 ;;		On entry : 0/0
 13743 ;;		On exit  : 0/0
 13744 ;;		Unchanged: 0/0
 13745 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13746 ;;      Params:         4       0       0       0       0       0       0       0       0
 13747 ;;      Locals:         1       0       0       0       0       0       0       0       0
 13748 ;;      Temps:          0       0       0       0       0       0       0       0       0
 13749 ;;      Totals:         5       0       0       0       0       0       0       0       0
 13750 ;;Total ram usage:        5 bytes
 13751 ;; Hardware stack levels used:    1
 13752 ;; This function calls:
 13753 ;;		Nothing
 13754 ;; This function is called by:
 13755 ;;		_writeString
 13756 ;;		_printRTC
 13757 ;;		_printTemp
 13758 ;;		_writeLong
 13759 ;;		_writeFloat
 13760 ;;		_maxSize
 13761 ;; This function uses a non-reentrant model
 13762 ;;
 13763                           
 13764                           	psect	text46
 13765  004552                     __ptext46:
 13766                           	opt stack 0
 13767  004552                     _countBits:
 13768                           	opt stack 23
 13769                           
 13770                           ;defs.c: 10: uint8_t ret = num & 1;
 13771                           
 13772                           ;incstack = 0
 13773  004552  5001               	movf	countBits@num,w,c
 13774  004554  0B01               	andlw	1
 13775  004556  6E05               	movwf	countBits@ret,c
 13776                           
 13777                           ;defs.c: 11: while (num) ret += (0x1 & (num >>= 1));
 13778  004558  D008               	goto	i2l488
 13779  00455A                     i2l3574:
 13780  00455A  90D8               	bcf	status,0,c
 13781  00455C  3204               	rrcf	countBits@num+3,f,c
 13782  00455E  3203               	rrcf	countBits@num+2,f,c
 13783  004560  3202               	rrcf	countBits@num+1,f,c
 13784  004562  3201               	rrcf	countBits@num,f,c
 13785  004564  5001               	movf	countBits@num& (0+255),w,c
 13786  004566  0B01               	andlw	1
 13787  004568  2605               	addwf	countBits@ret,f,c
 13788  00456A                     i2l488:
 13789  00456A  5004               	movf	countBits@num+3,w,c
 13790  00456C  1001               	iorwf	countBits@num,w,c
 13791  00456E  1002               	iorwf	countBits@num+1,w,c
 13792  004570  1003               	iorwf	countBits@num+2,w,c
 13793  004572  A4D8               	btfss	status,2,c
 13794  004574  D7F2               	goto	i2l3574
 13795                           
 13796                           ;defs.c: 12: return ret;
 13797  004576  5005               	movf	countBits@ret,w,c
 13798  004578  0012               	return	
 13799  00457A                     __end_of_countBits:
 13800                           	opt stack 0
 13801                           tosu	equ	0xFFF
 13802                           tosh	equ	0xFFE
 13803                           tosl	equ	0xFFD
 13804                           pclatu	equ	0xFFB
 13805                           pclath	equ	0xFFA
 13806                           tblptru	equ	0xFF8
 13807                           tblptrh	equ	0xFF7
 13808                           tblptrl	equ	0xFF6
 13809                           tablat	equ	0xFF5
 13810                           prodh	equ	0xFF4
 13811                           prodl	equ	0xFF3
 13812                           intcon	equ	0xFF2
 13813                           intcon2	equ	0xFF1
 13814                           indf0	equ	0xFEF
 13815                           postinc0	equ	0xFEE
 13816                           fsr0h	equ	0xFEA
 13817                           fsr0l	equ	0xFE9
 13818                           wreg	equ	0xFE8
 13819                           postinc1	equ	0xFE6
 13820                           postdec1	equ	0xFE5
 13821                           fsr1h	equ	0xFE2
 13822                           fsr1l	equ	0xFE1
 13823                           indf2	equ	0xFDF
 13824                           postinc2	equ	0xFDE
 13825                           postdec2	equ	0xFDD
 13826                           plusw2	equ	0xFDB
 13827                           fsr2h	equ	0xFDA
 13828                           fsr2l	equ	0xFD9
 13829                           status	equ	0xFD8
 13830                           
 13831 ;; *************** function _saveTime *****************
 13832 ;; Defined at:
 13833 ;;		line 77 in file "RTC.c"
 13834 ;; Parameters:    Size  Location     Type
 13835 ;;  date            9    0[COMRAM] struct sDate
 13836 ;; Auto vars:     Size  Location     Type
 13837 ;;  cnt             1   10[COMRAM] unsigned char 
 13838 ;; Return value:  Size  Location     Type
 13839 ;;		None               void
 13840 ;; Registers used:
 13841 ;;		wreg, status,2, status,0
 13842 ;; Tracked objects:
 13843 ;;		On entry : 0/0
 13844 ;;		On exit  : 0/0
 13845 ;;		Unchanged: 0/0
 13846 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13847 ;;      Params:         9       0       0       0       0       0       0       0       0
 13848 ;;      Locals:         2       0       0       0       0       0       0       0       0
 13849 ;;      Temps:          0       0       0       0       0       0       0       0       0
 13850 ;;      Totals:        11       0       0       0       0       0       0       0       0
 13851 ;;Total ram usage:       11 bytes
 13852 ;; Hardware stack levels used:    1
 13853 ;; This function calls:
 13854 ;;		Nothing
 13855 ;; This function is called by:
 13856 ;;		_tick
 13857 ;; This function uses a non-reentrant model
 13858 ;;
 13859                           
 13860                           	psect	text47
 13861  00408E                     __ptext47:
 13862                           	opt stack 0
 13863  00408E                     _saveTime:
 13864                           	opt stack 24
 13865                           
 13866                           ;RTC.c: 79: WREN = 1;
 13867                           
 13868                           ;incstack = 0
 13869  00408E  84A6               	bsf	4006,2,c	;volatile
 13870                           
 13871                           ;RTC.c: 80: uint8_t cnt;
 13872                           ;RTC.c: 82: for (cnt = 1; cnt < 7; cnt++)
 13873  004090  0E01               	movlw	1
 13874  004092  6E0B               	movwf	saveTime@cnt,c
 13875  004094  D030               	goto	L28
 13876  004096                     i2l197:
 13877                           
 13878                           ;RTC.c: 83: {
 13879                           ;RTC.c: 84: EEADR = 0 + cnt;
 13880  004096  C00B  FFA9         	movff	saveTime@cnt,4009	;volatile
 13881                           
 13882                           ;RTC.c: 85: switch (cnt)
 13883  00409A  D00F               	goto	i2l3708
 13884  00409C                     i2l200:
 13885                           
 13886                           ;RTC.c: 88: EEDATA = date.minute;
 13887  00409C  C002  FFA8         	movff	saveTime@date+1,4008	;volatile
 13888                           
 13889                           ;RTC.c: 89: break;
 13890  0040A0  D01F               	goto	i2l3710
 13891  0040A2                     i2l202:
 13892                           
 13893                           ;RTC.c: 91: EEDATA = date.hour;
 13894  0040A2  C003  FFA8         	movff	saveTime@date+2,4008	;volatile
 13895                           
 13896                           ;RTC.c: 92: break;
 13897  0040A6  D01C               	goto	i2l3710
 13898  0040A8                     i2l203:
 13899                           
 13900                           ;RTC.c: 94: EEDATA = date.day;
 13901  0040A8  C004  FFA8         	movff	saveTime@date+3,4008	;volatile
 13902                           
 13903                           ;RTC.c: 95: break;
 13904  0040AC  D019               	goto	i2l3710
 13905  0040AE                     i2l204:
 13906                           
 13907                           ;RTC.c: 97: EEDATA = date.month;
 13908  0040AE  C006  FFA8         	movff	saveTime@date+5,4008	;volatile
 13909                           
 13910                           ;RTC.c: 98: break;
 13911  0040B2  D016               	goto	i2l3710
 13912  0040B4                     i2l206:
 13913                           
 13914                           ;RTC.c: 103: EEDATA = date.year;
 13915  0040B4  C007  FFA8         	movff	saveTime@date+6,4008	;volatile
 13916                           
 13917                           ;RTC.c: 104: break;
 13918  0040B8  D013               	goto	i2l3710
 13919  0040BA                     i2l3708:
 13920  0040BA  500B               	movf	saveTime@cnt,w,c
 13921                           
 13922                           ; Switch size 1, requested type "space"
 13923                           ; Number of cases is 6, Range of values is 1 to 6
 13924                           ; switch strategies available:
 13925                           ; Name         Instructions Cycles
 13926                           ; simple_byte           19    10 (average)
 13927                           ;	Chosen strategy is simple_byte
 13928  0040BC  0A01               	xorlw	1	; case 1
 13929  0040BE  B4D8               	btfsc	status,2,c
 13930  0040C0  D7ED               	goto	i2l200
 13931  0040C2  0A03               	xorlw	3	; case 2
 13932  0040C4  B4D8               	btfsc	status,2,c
 13933  0040C6  D7ED               	goto	i2l202
 13934  0040C8  0A01               	xorlw	1	; case 3
 13935  0040CA  B4D8               	btfsc	status,2,c
 13936  0040CC  D7ED               	goto	i2l203
 13937  0040CE  0A07               	xorlw	7	; case 4
 13938  0040D0  B4D8               	btfsc	status,2,c
 13939  0040D2  D7ED               	goto	i2l204
 13940  0040D4  0A01               	xorlw	1	; case 5
 13941  0040D6  B4D8               	btfsc	status,2,c
 13942  0040D8  D7ED               	goto	i2l206
 13943  0040DA  0A03               	xorlw	3	; case 6
 13944  0040DC  B4D8               	btfsc	status,2,c
 13945  0040DE  D7EA               	goto	i2l206
 13946  0040E0                     i2l3710:
 13947                           
 13948                           ;RTC.c: 106: EECON2 = 0x55;
 13949  0040E0  0E55               	movlw	85
 13950  0040E2  6EA7               	movwf	4007,c	;volatile
 13951                           
 13952                           ;RTC.c: 107: EECON2 = 0xAA;
 13953  0040E4  0EAA               	movlw	170
 13954  0040E6  6EA7               	movwf	4007,c	;volatile
 13955                           
 13956                           ;RTC.c: 108: WR = 1;
 13957  0040E8  82A6               	bsf	4006,1,c	;volatile
 13958                           
 13959                           ;RTC.c: 109: while (WR)
 13960  0040EA  D001               	goto	i2l207
 13961  0040EC                     i2l208:
 13962                           
 13963                           ;RTC.c: 110: {
 13964                           ;RTC.c: 111: LATC6 = 1;
 13965  0040EC  8C8B               	bsf	3979,6,c	;volatile
 13966  0040EE                     i2l207:
 13967  0040EE  B2A6               	btfsc	4006,1,c	;volatile
 13968  0040F0  D7FD               	goto	i2l208
 13969                           
 13970                           ;RTC.c: 112: }
 13971                           ;RTC.c: 113: LATC6 = 0;
 13972  0040F2  9C8B               	bcf	3979,6,c	;volatile
 13973  0040F4  2A0B               	incf	saveTime@cnt,f,c
 13974  0040F6                     L28:
 13975  0040F6  0E06               	movlw	6
 13976  0040F8  640B               	cpfsgt	saveTime@cnt,c
 13977  0040FA  D7CD               	goto	i2l197
 13978  0040FC  0012               	return	
 13979  0040FE                     __end_of_saveTime:
 13980                           	opt stack 0
 13981                           tosu	equ	0xFFF
 13982                           tosh	equ	0xFFE
 13983                           tosl	equ	0xFFD
 13984                           pclatu	equ	0xFFB
 13985                           pclath	equ	0xFFA
 13986                           tblptru	equ	0xFF8
 13987                           tblptrh	equ	0xFF7
 13988                           tblptrl	equ	0xFF6
 13989                           tablat	equ	0xFF5
 13990                           prodh	equ	0xFF4
 13991                           prodl	equ	0xFF3
 13992                           intcon	equ	0xFF2
 13993                           intcon2	equ	0xFF1
 13994                           indf0	equ	0xFEF
 13995                           postinc0	equ	0xFEE
 13996                           fsr0h	equ	0xFEA
 13997                           fsr0l	equ	0xFE9
 13998                           wreg	equ	0xFE8
 13999                           postinc1	equ	0xFE6
 14000                           postdec1	equ	0xFE5
 14001                           fsr1h	equ	0xFE2
 14002                           fsr1l	equ	0xFE1
 14003                           indf2	equ	0xFDF
 14004                           postinc2	equ	0xFDE
 14005                           postdec2	equ	0xFDD
 14006                           plusw2	equ	0xFDB
 14007                           fsr2h	equ	0xFDA
 14008                           fsr2l	equ	0xFD9
 14009                           status	equ	0xFD8
 14010                           
 14011 ;; *************** function _daysOfMonth *****************
 14012 ;; Defined at:
 14013 ;;		line 117 in file "RTC.c"
 14014 ;; Parameters:    Size  Location     Type
 14015 ;;  month           1    wreg     unsigned char 
 14016 ;;  year            2    5[COMRAM] unsigned int 
 14017 ;; Auto vars:     Size  Location     Type
 14018 ;;  month           1   10[COMRAM] unsigned char 
 14019 ;; Return value:  Size  Location     Type
 14020 ;;                  1    wreg      unsigned char 
 14021 ;; Registers used:
 14022 ;;		wreg, status,2, status,0, cstack
 14023 ;; Tracked objects:
 14024 ;;		On entry : 0/0
 14025 ;;		On exit  : 0/0
 14026 ;;		Unchanged: 0/0
 14027 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 14028 ;;      Params:         2       0       0       0       0       0       0       0       0
 14029 ;;      Locals:         2       0       0       0       0       0       0       0       0
 14030 ;;      Temps:          2       0       0       0       0       0       0       0       0
 14031 ;;      Totals:         6       0       0       0       0       0       0       0       0
 14032 ;;Total ram usage:        6 bytes
 14033 ;; Hardware stack levels used:    1
 14034 ;; Hardware stack levels required when called:    1
 14035 ;; This function calls:
 14036 ;;		___lwmod
 14037 ;; This function is called by:
 14038 ;;		_tick
 14039 ;; This function uses a non-reentrant model
 14040 ;;
 14041                           
 14042                           	psect	text48
 14043  003A32                     __ptext48:
 14044                           	opt stack 0
 14045  003A32                     _daysOfMonth:
 14046                           	opt stack 23
 14047                           
 14048                           ;incstack = 0
 14049                           ;daysOfMonth@month stored from wreg
 14050  003A32  6E0B               	movwf	daysOfMonth@month,c
 14051                           
 14052                           ;RTC.c: 119: switch (month)
 14053  003A34  D02E               	goto	i2l3744
 14054  003A36                     i2l3720:
 14055                           
 14056                           ;RTC.c: 122: case 3:
 14057                           ;RTC.c: 123: case 5:
 14058                           ;RTC.c: 124: case 7:
 14059                           ;RTC.c: 125: case 8:
 14060                           ;RTC.c: 126: case 10:
 14061                           ;RTC.c: 127: case 12:
 14062                           ;RTC.c: 128: return 31;
 14063  003A36  0E1F               	movlw	31
 14064  003A38  D052               	goto	i2l221
 14065  003A3A                     i2l3724:
 14066                           
 14067                           ;RTC.c: 131: case 6:
 14068                           ;RTC.c: 132: case 9:
 14069                           ;RTC.c: 133: case 11:
 14070                           ;RTC.c: 134: return 30;
 14071  003A3A  0E1E               	movlw	30
 14072  003A3C  D050               	goto	i2l221
 14073  003A3E                     i2l3728:
 14074                           
 14075                           ;RTC.c: 137: if ((((year)%4 == 0) && (((year)%100 != 0) || ((year)%400 == 0))))
 14076  003A3E  0E03               	movlw	3
 14077  003A40  1406               	andwf	daysOfMonth@year,w,c
 14078  003A42  6E08               	movwf	??_daysOfMonth& (0+255),c
 14079  003A44  0E00               	movlw	0
 14080  003A46  1407               	andwf	daysOfMonth@year+1,w,c
 14081  003A48  6E09               	movwf	(??_daysOfMonth+1)& (0+255),c
 14082  003A4A  5009               	movf	??_daysOfMonth+1,w,c
 14083  003A4C  1008               	iorwf	??_daysOfMonth,w,c
 14084  003A4E  A4D8               	btfss	status,2,c
 14085  003A50  D01E               	goto	i2l3740
 14086  003A52  C006  F001         	movff	daysOfMonth@year,___lwmod@dividend
 14087  003A56  C007  F002         	movff	daysOfMonth@year+1,___lwmod@dividend+1
 14088  003A5A  0E00               	movlw	0
 14089  003A5C  6E04               	movwf	___lwmod@divisor+1,c
 14090  003A5E  0E64               	movlw	100
 14091  003A60  6E03               	movwf	___lwmod@divisor,c
 14092  003A62  EC56  F022         	call	___lwmod	;wreg free
 14093  003A66  5002               	movf	?___lwmod+1,w,c
 14094  003A68  1001               	iorwf	?___lwmod,w,c
 14095  003A6A  A4D8               	btfss	status,2,c
 14096  003A6C  D00E               	goto	i2l3734
 14097  003A6E  C006  F001         	movff	daysOfMonth@year,___lwmod@dividend
 14098  003A72  C007  F002         	movff	daysOfMonth@year+1,___lwmod@dividend+1
 14099  003A76  0E01               	movlw	1
 14100  003A78  6E04               	movwf	___lwmod@divisor+1,c
 14101  003A7A  0E90               	movlw	144
 14102  003A7C  6E03               	movwf	___lwmod@divisor,c
 14103  003A7E  EC56  F022         	call	___lwmod	;wreg free
 14104  003A82  5002               	movf	?___lwmod+1,w,c
 14105  003A84  1001               	iorwf	?___lwmod,w,c
 14106  003A86  A4D8               	btfss	status,2,c
 14107  003A88  D002               	goto	i2l3740
 14108  003A8A                     i2l3734:
 14109                           
 14110                           ;RTC.c: 138: return 29;
 14111  003A8A  0E1D               	movlw	29
 14112  003A8C  D028               	goto	i2l221
 14113  003A8E                     i2l3740:
 14114                           
 14115                           ;RTC.c: 139: else
 14116                           ;RTC.c: 140: return 28;
 14117  003A8E  0E1C               	movlw	28
 14118  003A90  D026               	goto	i2l221
 14119  003A92                     i2l3744:
 14120  003A92  500B               	movf	daysOfMonth@month,w,c
 14121                           
 14122                           ; Switch size 1, requested type "space"
 14123                           ; Number of cases is 12, Range of values is 1 to 12
 14124                           ; switch strategies available:
 14125                           ; Name         Instructions Cycles
 14126                           ; simple_byte           37    19 (average)
 14127                           ;	Chosen strategy is simple_byte
 14128  003A94  0A01               	xorlw	1	; case 1
 14129  003A96  B4D8               	btfsc	status,2,c
 14130  003A98  D7CE               	goto	i2l3720
 14131  003A9A  0A03               	xorlw	3	; case 2
 14132  003A9C  B4D8               	btfsc	status,2,c
 14133  003A9E  D7CF               	goto	i2l3728
 14134  003AA0  0A01               	xorlw	1	; case 3
 14135  003AA2  B4D8               	btfsc	status,2,c
 14136  003AA4  D7C8               	goto	i2l3720
 14137  003AA6  0A07               	xorlw	7	; case 4
 14138  003AA8  B4D8               	btfsc	status,2,c
 14139  003AAA  D7C7               	goto	i2l3724
 14140  003AAC  0A01               	xorlw	1	; case 5
 14141  003AAE  B4D8               	btfsc	status,2,c
 14142  003AB0  D7C2               	goto	i2l3720
 14143  003AB2  0A03               	xorlw	3	; case 6
 14144  003AB4  B4D8               	btfsc	status,2,c
 14145  003AB6  D7C1               	goto	i2l3724
 14146  003AB8  0A01               	xorlw	1	; case 7
 14147  003ABA  B4D8               	btfsc	status,2,c
 14148  003ABC  D7BC               	goto	i2l3720
 14149  003ABE  0A0F               	xorlw	15	; case 8
 14150  003AC0  B4D8               	btfsc	status,2,c
 14151  003AC2  D7B9               	goto	i2l3720
 14152  003AC4  0A01               	xorlw	1	; case 9
 14153  003AC6  B4D8               	btfsc	status,2,c
 14154  003AC8  D7B8               	goto	i2l3724
 14155  003ACA  0A03               	xorlw	3	; case 10
 14156  003ACC  B4D8               	btfsc	status,2,c
 14157  003ACE  D7B3               	goto	i2l3720
 14158  003AD0  0A01               	xorlw	1	; case 11
 14159  003AD2  B4D8               	btfsc	status,2,c
 14160  003AD4  D7B2               	goto	i2l3724
 14161  003AD6  0A07               	xorlw	7	; case 12
 14162  003AD8  B4D8               	btfsc	status,2,c
 14163  003ADA  D7AD               	goto	i2l3720
 14164                           
 14165                           ;RTC.c: 143: return 0;
 14166  003ADC  0E00               	movlw	0
 14167  003ADE                     i2l221:
 14168  003ADE  0012               	return	
 14169  003AE0                     __end_of_daysOfMonth:
 14170                           	opt stack 0
 14171                           tosu	equ	0xFFF
 14172                           tosh	equ	0xFFE
 14173                           tosl	equ	0xFFD
 14174                           pclatu	equ	0xFFB
 14175                           pclath	equ	0xFFA
 14176                           tblptru	equ	0xFF8
 14177                           tblptrh	equ	0xFF7
 14178                           tblptrl	equ	0xFF6
 14179                           tablat	equ	0xFF5
 14180                           prodh	equ	0xFF4
 14181                           prodl	equ	0xFF3
 14182                           intcon	equ	0xFF2
 14183                           intcon2	equ	0xFF1
 14184                           indf0	equ	0xFEF
 14185                           postinc0	equ	0xFEE
 14186                           fsr0h	equ	0xFEA
 14187                           fsr0l	equ	0xFE9
 14188                           wreg	equ	0xFE8
 14189                           postinc1	equ	0xFE6
 14190                           postdec1	equ	0xFE5
 14191                           fsr1h	equ	0xFE2
 14192                           fsr1l	equ	0xFE1
 14193                           indf2	equ	0xFDF
 14194                           postinc2	equ	0xFDE
 14195                           postdec2	equ	0xFDD
 14196                           plusw2	equ	0xFDB
 14197                           fsr2h	equ	0xFDA
 14198                           fsr2l	equ	0xFD9
 14199                           status	equ	0xFD8
 14200                           
 14201 ;; *************** function ___lwmod *****************
 14202 ;; Defined at:
 14203 ;;		line 8 in file "/opt/microchip/xc8/v1.32/sources/common/lwmod.c"
 14204 ;; Parameters:    Size  Location     Type
 14205 ;;  dividend        2    0[COMRAM] unsigned int 
 14206 ;;  divisor         2    2[COMRAM] unsigned int 
 14207 ;; Auto vars:     Size  Location     Type
 14208 ;;  counter         1    4[COMRAM] unsigned char 
 14209 ;; Return value:  Size  Location     Type
 14210 ;;                  2    0[COMRAM] unsigned int 
 14211 ;; Registers used:
 14212 ;;		wreg, status,2, status,0
 14213 ;; Tracked objects:
 14214 ;;		On entry : 0/0
 14215 ;;		On exit  : 0/0
 14216 ;;		Unchanged: 0/0
 14217 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 14218 ;;      Params:         4       0       0       0       0       0       0       0       0
 14219 ;;      Locals:         1       0       0       0       0       0       0       0       0
 14220 ;;      Temps:          0       0       0       0       0       0       0       0       0
 14221 ;;      Totals:         5       0       0       0       0       0       0       0       0
 14222 ;;Total ram usage:        5 bytes
 14223 ;; Hardware stack levels used:    1
 14224 ;; This function calls:
 14225 ;;		Nothing
 14226 ;; This function is called by:
 14227 ;;		_daysOfMonth
 14228 ;;		_printRTC
 14229 ;; This function uses a non-reentrant model
 14230 ;;
 14231                           
 14232                           	psect	text49
 14233  0044AC                     __ptext49:
 14234                           	opt stack 0
 14235  0044AC                     ___lwmod:
 14236                           	opt stack 23
 14237                           
 14238                           ;incstack = 0
 14239  0044AC  5004               	movf	___lwmod@divisor+1,w,c
 14240  0044AE  1003               	iorwf	___lwmod@divisor,w,c
 14241  0044B0  B4D8               	btfsc	status,2,c
 14242  0044B2  D018               	goto	i2l1351
 14243  0044B4  0E01               	movlw	1
 14244  0044B6  6E05               	movwf	___lwmod@counter,c
 14245  0044B8  D004               	goto	i2l3634
 14246  0044BA                     i2l3632:
 14247  0044BA  90D8               	bcf	status,0,c
 14248  0044BC  3603               	rlcf	___lwmod@divisor,f,c
 14249  0044BE  3604               	rlcf	___lwmod@divisor+1,f,c
 14250  0044C0  2A05               	incf	___lwmod@counter,f,c
 14251  0044C2                     i2l3634:
 14252  0044C2  AE04               	btfss	___lwmod@divisor+1,7,c
 14253  0044C4  D7FA               	goto	i2l3632
 14254  0044C6                     i2l3636:
 14255  0044C6  5003               	movf	___lwmod@divisor,w,c
 14256  0044C8  5C01               	subwf	___lwmod@dividend,w,c
 14257  0044CA  5004               	movf	___lwmod@divisor+1,w,c
 14258  0044CC  5802               	subwfb	___lwmod@dividend+1,w,c
 14259  0044CE  A0D8               	btfss	status,0,c
 14260  0044D0  D004               	goto	i2l3640
 14261  0044D2  5003               	movf	___lwmod@divisor,w,c
 14262  0044D4  5E01               	subwf	___lwmod@dividend,f,c
 14263  0044D6  5004               	movf	___lwmod@divisor+1,w,c
 14264  0044D8  5A02               	subwfb	___lwmod@dividend+1,f,c
 14265  0044DA                     i2l3640:
 14266  0044DA  90D8               	bcf	status,0,c
 14267  0044DC  3204               	rrcf	___lwmod@divisor+1,f,c
 14268  0044DE  3203               	rrcf	___lwmod@divisor,f,c
 14269  0044E0  2E05               	decfsz	___lwmod@counter,f,c
 14270  0044E2  D7F1               	goto	i2l3636
 14271  0044E4                     i2l1351:
 14272  0044E4  C001  F001         	movff	___lwmod@dividend,?___lwmod
 14273  0044E8  C002  F002         	movff	___lwmod@dividend+1,?___lwmod+1
 14274  0044EC  0012               	return	
 14275  0044EE                     __end_of___lwmod:
 14276                           	opt stack 0
 14277                           tosu	equ	0xFFF
 14278                           tosh	equ	0xFFE
 14279                           tosl	equ	0xFFD
 14280                           pclatu	equ	0xFFB
 14281                           pclath	equ	0xFFA
 14282                           tblptru	equ	0xFF8
 14283                           tblptrh	equ	0xFF7
 14284                           tblptrl	equ	0xFF6
 14285                           tablat	equ	0xFF5
 14286                           prodh	equ	0xFF4
 14287                           prodl	equ	0xFF3
 14288                           intcon	equ	0xFF2
 14289                           intcon2	equ	0xFF1
 14290                           indf0	equ	0xFEF
 14291                           postinc0	equ	0xFEE
 14292                           fsr0h	equ	0xFEA
 14293                           fsr0l	equ	0xFE9
 14294                           wreg	equ	0xFE8
 14295                           postinc1	equ	0xFE6
 14296                           postdec1	equ	0xFE5
 14297                           fsr1h	equ	0xFE2
 14298                           fsr1l	equ	0xFE1
 14299                           indf2	equ	0xFDF
 14300                           postinc2	equ	0xFDE
 14301                           postdec2	equ	0xFDD
 14302                           plusw2	equ	0xFDB
 14303                           fsr2h	equ	0xFDA
 14304                           fsr2l	equ	0xFD9
 14305                           status	equ	0xFD8
 14306                           
 14307 ;; *************** function _checkDST *****************
 14308 ;; Defined at:
 14309 ;;		line 146 in file "RTC.c"
 14310 ;; Parameters:    Size  Location     Type
 14311 ;;		None
 14312 ;; Auto vars:     Size  Location     Type
 14313 ;;		None
 14314 ;; Return value:  Size  Location     Type
 14315 ;;		None               void
 14316 ;; Registers used:
 14317 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, btemp+8, btemp+9, btemp+10, btemp+11, tosl, structret, tblptrl, tblptrh, tblp
      +tru, prodl, prodh, bsr, cstack
 14318 ;; Tracked objects:
 14319 ;;		On entry : 0/0
 14320 ;;		On exit  : 0/0
 14321 ;;		Unchanged: 0/0
 14322 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 14323 ;;      Params:         0       0       0       0       0       0       0       0       0
 14324 ;;      Locals:         2       0       0       0       0       0       0       0       0
 14325 ;;      Temps:          5       0       0       0       0       0       0       0       0
 14326 ;;      Totals:         7       0       0       0       0       0       0       0       0
 14327 ;;Total ram usage:        7 bytes
 14328 ;; Hardware stack levels used:    1
 14329 ;; Hardware stack levels required when called:    2
 14330 ;; This function calls:
 14331 ;;		_dayOfWeek
 14332 ;;		_tick
 14333 ;; This function is called by:
 14334 ;;		_tick
 14335 ;; This function uses a non-reentrant model
 14336 ;;
 14337                           
 14338                           	psect	text50
 14339  0034E6                     __ptext50:
 14340                           	opt stack 0
 14341  0034E6                     _checkDST:
 14342                           	opt stack 22
 14343                           
 14344                           ;RTC.c: 148: if ((date.dst ^ (1 & ((date.day >= ((((2)*7)-dayOfWeek((date.year),(3),((2)
      +                          *7)))) && date.month >= 3) && (date.day < ((((1)*7)-dayOfWeek((date.year),(11),((1)*7)))
      +                          ) && date.month < 11)))) && date.hour == 1)
 14345                           
 14346                           ;incstack = 0
 14347  0034E6  0E00               	movlw	0
 14348  0034E8  6E28               	movwf	_checkDST$309,c
 14349  0034EA  0E03               	movlw	3
 14350  0034EC  6E17               	movwf	dayOfWeek@month,c
 14351  0034EE  0E0E               	movlw	14
 14352  0034F0  6E18               	movwf	dayOfWeek@day,c
 14353  0034F2  0100               	movlb	0	; () banked
 14354  0034F4  51AE               	movf	(_date+6)& (0+255),w,b
 14355  0034F6  EC61  F016         	call	_dayOfWeek
 14356  0034FA  6E22               	movwf	??_checkDST& (0+255),c
 14357  0034FC  6A23               	clrf	(??_checkDST+1)& (0+255),c
 14358  0034FE  1E22               	comf	??_checkDST,f,c
 14359  003500  1E23               	comf	??_checkDST+1,f,c
 14360  003502  4A22               	infsnz	??_checkDST,f,c
 14361  003504  2A23               	incf	??_checkDST+1,f,c
 14362  003506  0E0E               	movlw	14
 14363  003508  2622               	addwf	??_checkDST,f,c
 14364  00350A  0E00               	movlw	0
 14365  00350C  2223               	addwfc	??_checkDST+1,f,c
 14366  00350E  0100               	movlb	0	; () banked
 14367  003510  51AB               	movf	(_date+3)& (0+255),w,b
 14368  003512  6E24               	movwf	(??_checkDST+2)& (0+255),c
 14369  003514  6A25               	clrf	(??_checkDST+3)& (0+255),c
 14370  003516  5025               	movf	??_checkDST+3,w,c
 14371  003518  0A80               	xorlw	128
 14372  00351A  6E26               	movwf	(??_checkDST+4)& (0+255),c
 14373  00351C  5022               	movf	??_checkDST,w,c
 14374  00351E  5C24               	subwf	??_checkDST+2,w,c
 14375  003520  5023               	movf	??_checkDST+1,w,c
 14376  003522  0A80               	xorlw	128
 14377  003524  5826               	subwfb	(??_checkDST+4)& (0+255),w,c
 14378  003526  A0D8               	btfss	status,0,c
 14379  003528  D02D               	goto	i2l4914
 14380                           
 14381                           ; BSR set to: 0
 14382  00352A  0100               	movlb	0	; () banked
 14383  00352C  EE20  F0AD         	lfsr	2,_date+5
 14384  003530  0E02               	movlw	2
 14385  003532  64DF               	cpfsgt	indf2,c
 14386  003534  D027               	goto	i2l4914
 14387                           
 14388                           ; BSR set to: 0
 14389  003536  0E0B               	movlw	11
 14390  003538  6E17               	movwf	dayOfWeek@month,c
 14391  00353A  0E07               	movlw	7
 14392  00353C  6E18               	movwf	dayOfWeek@day,c
 14393  00353E  0100               	movlb	0	; () banked
 14394  003540  51AE               	movf	(_date+6)& (0+255),w,b
 14395  003542  EC61  F016         	call	_dayOfWeek
 14396  003546  6E22               	movwf	??_checkDST& (0+255),c
 14397  003548  6A23               	clrf	(??_checkDST+1)& (0+255),c
 14398  00354A  1E22               	comf	??_checkDST,f,c
 14399  00354C  1E23               	comf	??_checkDST+1,f,c
 14400  00354E  4A22               	infsnz	??_checkDST,f,c
 14401  003550  2A23               	incf	??_checkDST+1,f,c
 14402  003552  0E07               	movlw	7
 14403  003554  2622               	addwf	??_checkDST,f,c
 14404  003556  0E00               	movlw	0
 14405  003558  2223               	addwfc	??_checkDST+1,f,c
 14406  00355A  0100               	movlb	0	; () banked
 14407  00355C  51AB               	movf	(_date+3)& (0+255),w,b
 14408  00355E  6E24               	movwf	(??_checkDST+2)& (0+255),c
 14409  003560  6A25               	clrf	(??_checkDST+3)& (0+255),c
 14410  003562  5025               	movf	??_checkDST+3,w,c
 14411  003564  0A80               	xorlw	128
 14412  003566  6E26               	movwf	(??_checkDST+4)& (0+255),c
 14413  003568  5022               	movf	??_checkDST,w,c
 14414  00356A  5C24               	subwf	??_checkDST+2,w,c
 14415  00356C  5023               	movf	??_checkDST+1,w,c
 14416  00356E  0A80               	xorlw	128
 14417  003570  5826               	subwfb	(??_checkDST+4)& (0+255),w,c
 14418  003572  B0D8               	btfsc	status,0,c
 14419  003574  D007               	goto	i2l4914
 14420                           
 14421                           ; BSR set to: 0
 14422  003576  0E0B               	movlw	11
 14423  003578  0100               	movlb	0	; () banked
 14424  00357A  5DAD               	subwf	(_date+5)& (0+255),w,b
 14425  00357C  B0D8               	btfsc	status,0,c
 14426  00357E  D002               	goto	i2l4914
 14427                           
 14428                           ; BSR set to: 0
 14429  003580  0E01               	movlw	1
 14430  003582  6E28               	movwf	_checkDST$309,c
 14431  003584                     i2l4914:
 14432                           
 14433                           ; BSR set to: 0
 14434  003584  5028               	movf	_checkDST$309,w,c
 14435  003586  0B01               	andlw	1
 14436  003588  0100               	movlb	0	; () banked
 14437  00358A  19B0               	xorwf	(_date+8)& (0+255),w,b
 14438  00358C  0900               	iorlw	0
 14439  00358E  B4D8               	btfsc	status,2,c
 14440  003590  D021               	goto	i2l241
 14441                           
 14442                           ; BSR set to: 0
 14443  003592  0100               	movlb	0	; () banked
 14444  003594  05AA               	decf	(_date+2)& (0+255),w,b
 14445  003596  A4D8               	btfss	status,2,c
 14446  003598  D01D               	goto	i2l241
 14447                           
 14448                           ; BSR set to: 0
 14449                           ;RTC.c: 149: {
 14450                           ;RTC.c: 150: date.dst = !date.dst;
 14451  00359A  0100               	movlb	0	; () banked
 14452  00359C  51B0               	movf	(_date+8)& (0+255),w,b
 14453  00359E  A4D8               	btfss	status,2,c
 14454  0035A0  D002               	goto	i2u518_40
 14455  0035A2  0E01               	movlw	1
 14456  0035A4  D001               	goto	i2u518_46
 14457  0035A6                     i2u518_40:
 14458  0035A6  0E00               	movlw	0
 14459  0035A8                     i2u518_46:
 14460  0035A8  0100               	movlb	0	; () banked
 14461  0035AA  6FB0               	movwf	(_date+8)& (0+255),b
 14462                           
 14463                           ;RTC.c: 151: if (date.dst)
 14464  0035AC  0100               	movlb	0	; () banked
 14465  0035AE  51B0               	movf	(_date+8)& (0+255),w,b
 14466  0035B0  B4D8               	btfsc	status,2,c
 14467  0035B2  D004               	goto	i2l4922
 14468                           
 14469                           ; BSR set to: 0
 14470                           ;RTC.c: 152: {
 14471                           ;RTC.c: 153: tick(hour);
 14472  0035B4  0E02               	movlw	2
 14473  0035B6  ECEB  F01A         	call	_tick
 14474                           
 14475                           ;RTC.c: 154: }
 14476  0035BA  D00C               	goto	i2l241
 14477  0035BC                     i2l4922:
 14478                           
 14479                           ;RTC.c: 155: else
 14480                           ;RTC.c: 156: {
 14481                           ;RTC.c: 157: if (date.hour > 0)
 14482  0035BC  0100               	movlb	0	; () banked
 14483  0035BE  51AA               	movf	(_date+2)& (0+255),w,b
 14484  0035C0  B4D8               	btfsc	status,2,c
 14485  0035C2  D003               	goto	i2l4926
 14486                           
 14487                           ; BSR set to: 0
 14488                           ;RTC.c: 158: {
 14489                           ;RTC.c: 159: date.hour--;
 14490  0035C4  0100               	movlb	0	; () banked
 14491  0035C6  07AA               	decf	(_date+2)& (0+255),f,b
 14492                           
 14493                           ;RTC.c: 160: }
 14494  0035C8  D005               	goto	i2l241
 14495  0035CA                     i2l4926:
 14496                           
 14497                           ; BSR set to: 0
 14498                           ;RTC.c: 161: else
 14499                           ;RTC.c: 162: {
 14500                           ;RTC.c: 163: date.hour = 0;
 14501  0035CA  0E00               	movlw	0
 14502  0035CC  0100               	movlb	0	; () banked
 14503  0035CE  6FAA               	movwf	(_date+2)& (0+255),b
 14504                           
 14505                           ; BSR set to: 0
 14506                           ;RTC.c: 164: date.day--;
 14507  0035D0  0100               	movlb	0	; () banked
 14508  0035D2  07AB               	decf	(_date+3)& (0+255),f,b
 14509  0035D4                     i2l241:
 14510  0035D4  0012               	return	
 14511  0035D6                     __end_of_checkDST:
 14512                           	opt stack 0
 14513                           tosu	equ	0xFFF
 14514                           tosh	equ	0xFFE
 14515                           tosl	equ	0xFFD
 14516                           pclatu	equ	0xFFB
 14517                           pclath	equ	0xFFA
 14518                           tblptru	equ	0xFF8
 14519                           tblptrh	equ	0xFF7
 14520                           tblptrl	equ	0xFF6
 14521                           tablat	equ	0xFF5
 14522                           prodh	equ	0xFF4
 14523                           prodl	equ	0xFF3
 14524                           intcon	equ	0xFF2
 14525                           intcon2	equ	0xFF1
 14526                           indf0	equ	0xFEF
 14527                           postinc0	equ	0xFEE
 14528                           fsr0h	equ	0xFEA
 14529                           fsr0l	equ	0xFE9
 14530                           wreg	equ	0xFE8
 14531                           postinc1	equ	0xFE6
 14532                           postdec1	equ	0xFE5
 14533                           fsr1h	equ	0xFE2
 14534                           fsr1l	equ	0xFE1
 14535                           indf2	equ	0xFDF
 14536                           postinc2	equ	0xFDE
 14537                           postdec2	equ	0xFDD
 14538                           plusw2	equ	0xFDB
 14539                           fsr2h	equ	0xFDA
 14540                           fsr2l	equ	0xFD9
 14541                           status	equ	0xFD8
 14542                           
 14543 ;; *************** function _tick *****************
 14544 ;; Defined at:
 14545 ;;		line 170 in file "RTC.c"
 14546 ;; Parameters:    Size  Location     Type
 14547 ;;  val             1    wreg     unsigned char 
 14548 ;; Auto vars:     Size  Location     Type
 14549 ;;  val             1   11[COMRAM] unsigned char 
 14550 ;;  ret             1   13[COMRAM] unsigned char 
 14551 ;;  save_t          1   12[COMRAM] unsigned char 
 14552 ;; Return value:  Size  Location     Type
 14553 ;;                  1    wreg      unsigned char 
 14554 ;; Registers used:
 14555 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, btemp+8, btemp+9, btemp+10, btemp+11, tosl, structret, tblptrl, tblptrh, tblp
      +tru, prodl, prodh, bsr, cstack
 14556 ;; Tracked objects:
 14557 ;;		On entry : 0/0
 14558 ;;		On exit  : 0/0
 14559 ;;		Unchanged: 0/0
 14560 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 14561 ;;      Params:         0       0       0       0       0       0       0       0       0
 14562 ;;      Locals:         3       0       0       0       0       0       0       0       0
 14563 ;;      Temps:          0       0       0       0       0       0       0       0       0
 14564 ;;      Totals:         3       0       0       0       0       0       0       0       0
 14565 ;;Total ram usage:        3 bytes
 14566 ;; Hardware stack levels used:    1
 14567 ;; Hardware stack levels required when called:    3
 14568 ;; This function calls:
 14569 ;;		_checkDST
 14570 ;;		_daysOfMonth
 14571 ;;		_saveTime
 14572 ;; This function is called by:
 14573 ;;		_checkDST
 14574 ;;		_isr
 14575 ;; This function uses a non-reentrant model
 14576 ;;
 14577                           
 14578                           	psect	text51
 14579  0035D6                     __ptext51:
 14580                           	opt stack 0
 14581  0035D6                     _tick:
 14582                           	opt stack 22
 14583                           
 14584                           ;incstack = 0
 14585                           ;tick@val stored from wreg
 14586  0035D6  6E0C               	movwf	tick@val,c
 14587                           
 14588                           ;RTC.c: 172: uint8_t save_t = 0;
 14589  0035D8  0E00               	movlw	0
 14590  0035DA  6E0D               	movwf	tick@save_t,c
 14591                           
 14592                           ;RTC.c: 173: uint8_t ret = 0;
 14593  0035DC  0E00               	movlw	0
 14594  0035DE  6E0E               	movwf	tick@ret,c
 14595                           
 14596                           ;RTC.c: 174: switch (val)
 14597  0035E0  D04E               	goto	i2l4142
 14598  0035E2                     i2l4096:
 14599                           
 14600                           ;RTC.c: 177: date.second++;
 14601  0035E2  0100               	movlb	0	; () banked
 14602  0035E4  2BA8               	incf	_date& (0+255),f,b
 14603                           
 14604                           ; BSR set to: 0
 14605                           ;RTC.c: 178: ret = date.second;
 14606  0035E6  C0A8  F00E         	movff	_date,tick@ret
 14607                           
 14608                           ; BSR set to: 0
 14609                           ;RTC.c: 179: if (date.second >= 60)
 14610  0035EA  0E3B               	movlw	59
 14611  0035EC  0100               	movlb	0	; () banked
 14612  0035EE  65A8               	cpfsgt	_date& (0+255),b
 14613  0035F0  D059               	goto	i2l4144
 14614                           
 14615                           ; BSR set to: 0
 14616                           ;RTC.c: 180: {
 14617                           ;RTC.c: 181: date.second = 0;
 14618  0035F2  0E00               	movlw	0
 14619  0035F4  0100               	movlb	0	; () banked
 14620  0035F6  6FA8               	movwf	_date& (0+255),b
 14621  0035F8                     i2l4104:
 14622                           
 14623                           ;RTC.c: 183: date.minute++;
 14624  0035F8  0100               	movlb	0	; () banked
 14625  0035FA  2BA9               	incf	(_date+1)& (0+255),f,b
 14626                           
 14627                           ; BSR set to: 0
 14628                           ;RTC.c: 184: save_t = 1;
 14629  0035FC  0E01               	movlw	1
 14630  0035FE  6E0D               	movwf	tick@save_t,c
 14631                           
 14632                           ; BSR set to: 0
 14633                           ;RTC.c: 185: ret = date.second;
 14634  003600  C0A8  F00E         	movff	_date,tick@ret
 14635                           
 14636                           ; BSR set to: 0
 14637                           ;RTC.c: 186: if (date.minute >= 60)
 14638  003604  0100               	movlb	0	; () banked
 14639  003606  EE20  F0A9         	lfsr	2,_date+1
 14640  00360A  0E3B               	movlw	59
 14641  00360C  64DF               	cpfsgt	indf2,c
 14642  00360E  D04A               	goto	i2l4144
 14643                           
 14644                           ; BSR set to: 0
 14645                           ;RTC.c: 187: {
 14646                           ;RTC.c: 188: date.minute = 0;
 14647  003610  0E00               	movlw	0
 14648  003612  0100               	movlb	0	; () banked
 14649  003614  6FA9               	movwf	(_date+1)& (0+255),b
 14650  003616                     i2l4114:
 14651                           
 14652                           ;RTC.c: 190: date.hour++;
 14653  003616  0100               	movlb	0	; () banked
 14654  003618  2BAA               	incf	(_date+2)& (0+255),f,b
 14655                           
 14656                           ; BSR set to: 0
 14657                           ;RTC.c: 191: checkDST();
 14658  00361A  EC73  F01A         	call	_checkDST	;wreg free
 14659                           
 14660                           ;RTC.c: 192: ret = date.hour;
 14661  00361E  C0AA  F00E         	movff	_date+2,tick@ret
 14662                           
 14663                           ;RTC.c: 193: if (date.hour >= 24)
 14664  003622  0100               	movlb	0	; () banked
 14665  003624  EE20  F0AA         	lfsr	2,_date+2
 14666  003628  0E17               	movlw	23
 14667  00362A  64DF               	cpfsgt	indf2,c
 14668  00362C  D03B               	goto	i2l4144
 14669                           
 14670                           ; BSR set to: 0
 14671                           ;RTC.c: 194: {
 14672                           ;RTC.c: 195: date.hour = 0;
 14673  00362E  0E00               	movlw	0
 14674  003630  0100               	movlb	0	; () banked
 14675  003632  6FAA               	movwf	(_date+2)& (0+255),b
 14676  003634                     i2l4124:
 14677                           
 14678                           ;RTC.c: 197: date.day++;
 14679  003634  0100               	movlb	0	; () banked
 14680  003636  2BAB               	incf	(_date+3)& (0+255),f,b
 14681                           
 14682                           ; BSR set to: 0
 14683                           ;RTC.c: 198: ret = date.hour;
 14684  003638  C0AA  F00E         	movff	_date+2,tick@ret
 14685                           
 14686                           ; BSR set to: 0
 14687                           ;RTC.c: 199: if (date.day >= daysOfMonth(date.month, date.year))
 14688  00363C  C0AE  F006         	movff	_date+6,daysOfMonth@year
 14689  003640  C0AF  F007         	movff	_date+7,daysOfMonth@year+1
 14690  003644  0100               	movlb	0	; () banked
 14691  003646  51AD               	movf	(_date+5)& (0+255),w,b
 14692  003648  EC19  F01D         	call	_daysOfMonth
 14693  00364C  0100               	movlb	0	; () banked
 14694  00364E  5DAB               	subwf	(_date+3)& (0+255),w,b
 14695  003650  A0D8               	btfss	status,0,c
 14696  003652  D028               	goto	i2l4144
 14697                           
 14698                           ; BSR set to: 0
 14699                           ;RTC.c: 200: {
 14700                           ;RTC.c: 201: date.day = 1;
 14701  003654  0E01               	movlw	1
 14702  003656  0100               	movlb	0	; () banked
 14703  003658  6FAB               	movwf	(_date+3)& (0+255),b
 14704  00365A                     i2l4132:
 14705                           
 14706                           ;RTC.c: 203: date.month++;
 14707  00365A  0100               	movlb	0	; () banked
 14708  00365C  2BAD               	incf	(_date+5)& (0+255),f,b
 14709                           
 14710                           ; BSR set to: 0
 14711                           ;RTC.c: 204: ret = date.hour;
 14712  00365E  C0AA  F00E         	movff	_date+2,tick@ret
 14713                           
 14714                           ; BSR set to: 0
 14715                           ;RTC.c: 205: if (++date.month > 12)
 14716  003662  0100               	movlb	0	; () banked
 14717  003664  EE20  F0AD         	lfsr	2,_date+5
 14718  003668  2ADF               	incf	indf2,f,c
 14719  00366A  0E0C               	movlw	12
 14720  00366C  64DF               	cpfsgt	indf2,c
 14721  00366E  D01A               	goto	i2l4144
 14722                           
 14723                           ; BSR set to: 0
 14724                           ;RTC.c: 206: {
 14725                           ;RTC.c: 207: date.month = 1;
 14726  003670  0E01               	movlw	1
 14727  003672  0100               	movlb	0	; () banked
 14728  003674  6FAD               	movwf	(_date+5)& (0+255),b
 14729  003676                     i2l4140:
 14730                           
 14731                           ;RTC.c: 209: ++date.year;
 14732  003676  0100               	movlb	0	; () banked
 14733  003678  4BAE               	infsnz	(_date+6)& (0+255),f,b
 14734  00367A  2BAF               	incf	(_date+7)& (0+255),f,b
 14735  00367C  D013               	goto	i2l4144
 14736  00367E                     i2l4142:
 14737  00367E  500C               	movf	tick@val,w,c
 14738                           
 14739                           ; Switch size 1, requested type "space"
 14740                           ; Number of cases is 6, Range of values is 0 to 5
 14741                           ; switch strategies available:
 14742                           ; Name         Instructions Cycles
 14743                           ; simple_byte           19    10 (average)
 14744                           ;	Chosen strategy is simple_byte
 14745  003680  0A00               	xorlw	0	; case 0
 14746  003682  B4D8               	btfsc	status,2,c
 14747  003684  D7AE               	goto	i2l4096
 14748  003686  0A01               	xorlw	1	; case 1
 14749  003688  B4D8               	btfsc	status,2,c
 14750  00368A  D7B6               	goto	i2l4104
 14751  00368C  0A03               	xorlw	3	; case 2
 14752  00368E  B4D8               	btfsc	status,2,c
 14753  003690  D7C2               	goto	i2l4114
 14754  003692  0A01               	xorlw	1	; case 3
 14755  003694  B4D8               	btfsc	status,2,c
 14756  003696  D7CE               	goto	i2l4124
 14757  003698  0A07               	xorlw	7	; case 4
 14758  00369A  B4D8               	btfsc	status,2,c
 14759  00369C  D7DE               	goto	i2l4132
 14760  00369E  0A01               	xorlw	1	; case 5
 14761  0036A0  B4D8               	btfsc	status,2,c
 14762  0036A2  D7E9               	goto	i2l4140
 14763  0036A4                     i2l4144:
 14764                           
 14765                           ;RTC.c: 216: if (save_t)
 14766  0036A4  500D               	movf	tick@save_t,w,c
 14767  0036A6  B4D8               	btfsc	status,2,c
 14768  0036A8  D00B               	goto	i2l258
 14769                           
 14770                           ;RTC.c: 217: {
 14771                           ;RTC.c: 218: saveTime(date);
 14772  0036AA  EE20  F0A8         	lfsr	2,_date
 14773  0036AE  EE10  F001         	lfsr	1,saveTime@date
 14774  0036B2  0E09               	movlw	9
 14775  0036B4                     i2u397_41:
 14776  0036B4  CFDE FFE6          	movff	postinc2,postinc1
 14777  0036B8  2EE8               	decfsz	wreg,f,c
 14778  0036BA  D7FC               	goto	i2u397_41
 14779  0036BC  EC47  F020         	call	_saveTime	;wreg free
 14780  0036C0                     i2l258:
 14781  0036C0  0012               	return	
 14782  0036C2                     __end_of_tick:
 14783                           	opt stack 0
 14784                           tosu	equ	0xFFF
 14785                           tosh	equ	0xFFE
 14786                           tosl	equ	0xFFD
 14787                           pclatu	equ	0xFFB
 14788                           pclath	equ	0xFFA
 14789                           tblptru	equ	0xFF8
 14790                           tblptrh	equ	0xFF7
 14791                           tblptrl	equ	0xFF6
 14792                           tablat	equ	0xFF5
 14793                           prodh	equ	0xFF4
 14794                           prodl	equ	0xFF3
 14795                           intcon	equ	0xFF2
 14796                           intcon2	equ	0xFF1
 14797                           indf0	equ	0xFEF
 14798                           postinc0	equ	0xFEE
 14799                           fsr0h	equ	0xFEA
 14800                           fsr0l	equ	0xFE9
 14801                           wreg	equ	0xFE8
 14802                           postinc1	equ	0xFE6
 14803                           postdec1	equ	0xFE5
 14804                           fsr1h	equ	0xFE2
 14805                           fsr1l	equ	0xFE1
 14806                           indf2	equ	0xFDF
 14807                           postinc2	equ	0xFDE
 14808                           postdec2	equ	0xFDD
 14809                           plusw2	equ	0xFDB
 14810                           fsr2h	equ	0xFDA
 14811                           fsr2l	equ	0xFD9
 14812                           status	equ	0xFD8
 14813                           
 14814 ;; *************** function _dayOfWeek *****************
 14815 ;; Defined at:
 14816 ;;		line 223 in file "RTC.c"
 14817 ;; Parameters:    Size  Location     Type
 14818 ;;  year            1    wreg     unsigned char 
 14819 ;;  month           1   22[COMRAM] unsigned char 
 14820 ;;  day             1   23[COMRAM] unsigned char 
 14821 ;; Auto vars:     Size  Location     Type
 14822 ;;  year            1   28[COMRAM] unsigned char 
 14823 ;;  tmp             4   29[COMRAM] unsigned long 
 14824 ;; Return value:  Size  Location     Type
 14825 ;;                  1    wreg      unsigned char 
 14826 ;; Registers used:
 14827 ;;		wreg, status,2, status,0, prodl, prodh, cstack
 14828 ;; Tracked objects:
 14829 ;;		On entry : 0/0
 14830 ;;		On exit  : 0/0
 14831 ;;		Unchanged: 0/0
 14832 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 14833 ;;      Params:         2       0       0       0       0       0       0       0       0
 14834 ;;      Locals:         5       0       0       0       0       0       0       0       0
 14835 ;;      Temps:          4       0       0       0       0       0       0       0       0
 14836 ;;      Totals:        11       0       0       0       0       0       0       0       0
 14837 ;;Total ram usage:       11 bytes
 14838 ;; Hardware stack levels used:    1
 14839 ;; Hardware stack levels required when called:    1
 14840 ;; This function calls:
 14841 ;;		___awdiv
 14842 ;;		___awmod
 14843 ;;		___llmod
 14844 ;;		___wmul
 14845 ;; This function is called by:
 14846 ;;		_checkDST
 14847 ;; This function uses a non-reentrant model
 14848 ;;
 14849                           
 14850                           	psect	text52
 14851  002CC2                     __ptext52:
 14852                           	opt stack 0
 14853  002CC2                     _dayOfWeek:
 14854                           	opt stack 22
 14855                           
 14856                           ;incstack = 0
 14857                           ;dayOfWeek@year stored from wreg
 14858  002CC2  6E1D               	movwf	dayOfWeek@year,c
 14859                           
 14860                           ;RTC.c: 226: uint32_t tmp = (year % 200) * 365;
 14861  002CC4  0E00               	movlw	0
 14862  002CC6  6E04               	movwf	___awmod@divisor+1,c
 14863  002CC8  0EC8               	movlw	200
 14864  002CCA  6E03               	movwf	___awmod@divisor,c
 14865  002CCC  C01D  F001         	movff	dayOfWeek@year,___awmod@dividend
 14866  002CD0  6A02               	clrf	___awmod@dividend+1,c
 14867  002CD2  ECF4  F01E         	call	___awmod	;wreg free
 14868  002CD6  C001  F00F         	movff	?___awmod,___wmul@multiplier
 14869  002CDA  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
 14870  002CDE  0E01               	movlw	1
 14871  002CE0  6E12               	movwf	___wmul@multiplicand+1,c
 14872  002CE2  0E6D               	movlw	109
 14873  002CE4  6E11               	movwf	___wmul@multiplicand,c
 14874  002CE6  ECD0  F022         	call	___wmul	;wreg free
 14875  002CEA  C00F  F01E         	movff	?___wmul,dayOfWeek@tmp
 14876  002CEE  C010  F01F         	movff	?___wmul+1,dayOfWeek@tmp+1
 14877  002CF2  0E00               	movlw	0
 14878  002CF4  BE1F               	btfsc	dayOfWeek@tmp+1,7,c
 14879  002CF6  0EFF               	movlw	-1
 14880  002CF8  6E20               	movwf	dayOfWeek@tmp+2,c
 14881  002CFA  6E21               	movwf	dayOfWeek@tmp+3,c
 14882                           
 14883                           ;RTC.c: 227: tmp += (((year % 200) + 3) / 4);
 14884  002CFC  0E00               	movlw	0
 14885  002CFE  6E04               	movwf	___awmod@divisor+1,c
 14886  002D00  0EC8               	movlw	200
 14887  002D02  6E03               	movwf	___awmod@divisor,c
 14888  002D04  C01D  F001         	movff	dayOfWeek@year,___awmod@dividend
 14889  002D08  6A02               	clrf	___awmod@dividend+1,c
 14890  002D0A  ECF4  F01E         	call	___awmod	;wreg free
 14891  002D0E  0E03               	movlw	3
 14892  002D10  2401               	addwf	?___awmod,w,c
 14893  002D12  6E07               	movwf	___awdiv@dividend,c
 14894  002D14  0E00               	movlw	0
 14895  002D16  2002               	addwfc	?___awmod+1,w,c
 14896  002D18  6E08               	movwf	___awdiv@dividend+1,c
 14897  002D1A  0E00               	movlw	0
 14898  002D1C  6E0A               	movwf	___awdiv@divisor+1,c
 14899  002D1E  0E04               	movlw	4
 14900  002D20  6E09               	movwf	___awdiv@divisor,c
 14901  002D22  ECC4  F01D         	call	___awdiv	;wreg free
 14902  002D26  C007  F019         	movff	?___awdiv,??_dayOfWeek
 14903  002D2A  C008  F01A         	movff	?___awdiv+1,??_dayOfWeek+1
 14904  002D2E  0E00               	movlw	0
 14905  002D30  BE1A               	btfsc	(??_dayOfWeek+1)& (0+255),7,c
 14906  002D32  0EFF               	movlw	255
 14907  002D34  6E1B               	movwf	(??_dayOfWeek+2)& (0+255),c
 14908  002D36  6E1C               	movwf	(??_dayOfWeek+3)& (0+255),c
 14909  002D38  5019               	movf	??_dayOfWeek,w,c
 14910  002D3A  261E               	addwf	dayOfWeek@tmp,f,c
 14911  002D3C  501A               	movf	??_dayOfWeek+1,w,c
 14912  002D3E  221F               	addwfc	dayOfWeek@tmp+1,f,c
 14913  002D40  501B               	movf	??_dayOfWeek+2,w,c
 14914  002D42  2220               	addwfc	dayOfWeek@tmp+2,f,c
 14915  002D44  501C               	movf	??_dayOfWeek+3,w,c
 14916  002D46  2221               	addwfc	dayOfWeek@tmp+3,f,c
 14917                           
 14918                           ;RTC.c: 229: switch (month)
 14919  002D48  D04F               	goto	i2l4086
 14920  002D4A                     i2l4080:
 14921                           
 14922                           ;RTC.c: 232: tmp += 30;
 14923  002D4A  0E1E               	movlw	30
 14924  002D4C  261E               	addwf	dayOfWeek@tmp,f,c
 14925  002D4E  0E00               	movlw	0
 14926  002D50  221F               	addwfc	dayOfWeek@tmp+1,f,c
 14927  002D52  2220               	addwfc	dayOfWeek@tmp+2,f,c
 14928  002D54  2221               	addwfc	dayOfWeek@tmp+3,f,c
 14929  002D56                     i2l263:
 14930                           
 14931                           ;RTC.c: 235: tmp += 31;
 14932  002D56  0E1F               	movlw	31
 14933  002D58  261E               	addwf	dayOfWeek@tmp,f,c
 14934  002D5A  0E00               	movlw	0
 14935  002D5C  221F               	addwfc	dayOfWeek@tmp+1,f,c
 14936  002D5E  2220               	addwfc	dayOfWeek@tmp+2,f,c
 14937  002D60  2221               	addwfc	dayOfWeek@tmp+3,f,c
 14938  002D62                     i2l264:
 14939                           
 14940                           ;RTC.c: 238: tmp += 30;
 14941  002D62  0E1E               	movlw	30
 14942  002D64  261E               	addwf	dayOfWeek@tmp,f,c
 14943  002D66  0E00               	movlw	0
 14944  002D68  221F               	addwfc	dayOfWeek@tmp+1,f,c
 14945  002D6A  2220               	addwfc	dayOfWeek@tmp+2,f,c
 14946  002D6C  2221               	addwfc	dayOfWeek@tmp+3,f,c
 14947  002D6E                     i2l265:
 14948                           
 14949                           ;RTC.c: 241: tmp += 31;
 14950  002D6E  0E1F               	movlw	31
 14951  002D70  261E               	addwf	dayOfWeek@tmp,f,c
 14952  002D72  0E00               	movlw	0
 14953  002D74  221F               	addwfc	dayOfWeek@tmp+1,f,c
 14954  002D76  2220               	addwfc	dayOfWeek@tmp+2,f,c
 14955  002D78  2221               	addwfc	dayOfWeek@tmp+3,f,c
 14956  002D7A                     i2l266:
 14957                           
 14958                           ;RTC.c: 244: tmp += 31;
 14959  002D7A  0E1F               	movlw	31
 14960  002D7C  261E               	addwf	dayOfWeek@tmp,f,c
 14961  002D7E  0E00               	movlw	0
 14962  002D80  221F               	addwfc	dayOfWeek@tmp+1,f,c
 14963  002D82  2220               	addwfc	dayOfWeek@tmp+2,f,c
 14964  002D84  2221               	addwfc	dayOfWeek@tmp+3,f,c
 14965  002D86                     i2l267:
 14966                           
 14967                           ;RTC.c: 247: tmp += 30;
 14968  002D86  0E1E               	movlw	30
 14969  002D88  261E               	addwf	dayOfWeek@tmp,f,c
 14970  002D8A  0E00               	movlw	0
 14971  002D8C  221F               	addwfc	dayOfWeek@tmp+1,f,c
 14972  002D8E  2220               	addwfc	dayOfWeek@tmp+2,f,c
 14973  002D90  2221               	addwfc	dayOfWeek@tmp+3,f,c
 14974  002D92                     i2l268:
 14975                           
 14976                           ;RTC.c: 250: tmp += 31;
 14977  002D92  0E1F               	movlw	31
 14978  002D94  261E               	addwf	dayOfWeek@tmp,f,c
 14979  002D96  0E00               	movlw	0
 14980  002D98  221F               	addwfc	dayOfWeek@tmp+1,f,c
 14981  002D9A  2220               	addwfc	dayOfWeek@tmp+2,f,c
 14982  002D9C  2221               	addwfc	dayOfWeek@tmp+3,f,c
 14983  002D9E                     i2l269:
 14984                           
 14985                           ;RTC.c: 253: tmp += 30;
 14986  002D9E  0E1E               	movlw	30
 14987  002DA0  261E               	addwf	dayOfWeek@tmp,f,c
 14988  002DA2  0E00               	movlw	0
 14989  002DA4  221F               	addwfc	dayOfWeek@tmp+1,f,c
 14990  002DA6  2220               	addwfc	dayOfWeek@tmp+2,f,c
 14991  002DA8  2221               	addwfc	dayOfWeek@tmp+3,f,c
 14992  002DAA                     i2l270:
 14993                           
 14994                           ;RTC.c: 256: tmp += 31;
 14995  002DAA  0E1F               	movlw	31
 14996  002DAC  261E               	addwf	dayOfWeek@tmp,f,c
 14997  002DAE  0E00               	movlw	0
 14998  002DB0  221F               	addwfc	dayOfWeek@tmp+1,f,c
 14999  002DB2  2220               	addwfc	dayOfWeek@tmp+2,f,c
 15000  002DB4  2221               	addwfc	dayOfWeek@tmp+3,f,c
 15001  002DB6                     i2l271:
 15002                           
 15003                           ;RTC.c: 259: tmp += 28;
 15004  002DB6  0E1C               	movlw	28
 15005  002DB8  261E               	addwf	dayOfWeek@tmp,f,c
 15006  002DBA  0E00               	movlw	0
 15007  002DBC  221F               	addwfc	dayOfWeek@tmp+1,f,c
 15008  002DBE  2220               	addwfc	dayOfWeek@tmp+2,f,c
 15009  002DC0  2221               	addwfc	dayOfWeek@tmp+3,f,c
 15010                           
 15011                           ;RTC.c: 261: if ((year % 4) == 0)
 15012  002DC2  C01D  F019         	movff	dayOfWeek@year,??_dayOfWeek
 15013  002DC6  0E03               	movlw	3
 15014  002DC8  1619               	andwf	??_dayOfWeek,f,c
 15015  002DCA  A4D8               	btfss	status,2,c
 15016  002DCC  D006               	goto	i2l273
 15017                           
 15018                           ;RTC.c: 262: {
 15019                           ;RTC.c: 263: tmp++;
 15020  002DCE  0E01               	movlw	1
 15021  002DD0  261E               	addwf	dayOfWeek@tmp,f,c
 15022  002DD2  0E00               	movlw	0
 15023  002DD4  221F               	addwfc	dayOfWeek@tmp+1,f,c
 15024  002DD6  2220               	addwfc	dayOfWeek@tmp+2,f,c
 15025  002DD8  2221               	addwfc	dayOfWeek@tmp+3,f,c
 15026  002DDA                     i2l273:
 15027                           
 15028                           ;RTC.c: 267: tmp += 31;
 15029  002DDA  0E1F               	movlw	31
 15030  002DDC  261E               	addwf	dayOfWeek@tmp,f,c
 15031  002DDE  0E00               	movlw	0
 15032  002DE0  221F               	addwfc	dayOfWeek@tmp+1,f,c
 15033  002DE2  2220               	addwfc	dayOfWeek@tmp+2,f,c
 15034  002DE4  2221               	addwfc	dayOfWeek@tmp+3,f,c
 15035  002DE6  D025               	goto	i2l4088
 15036  002DE8                     i2l4086:
 15037  002DE8  5017               	movf	dayOfWeek@month,w,c
 15038                           
 15039                           ; Switch size 1, requested type "space"
 15040                           ; Number of cases is 12, Range of values is 1 to 12
 15041                           ; switch strategies available:
 15042                           ; Name         Instructions Cycles
 15043                           ; simple_byte           37    19 (average)
 15044                           ;	Chosen strategy is simple_byte
 15045  002DEA  0A01               	xorlw	1	; case 1
 15046  002DEC  B4D8               	btfsc	status,2,c
 15047  002DEE  D021               	goto	i2l4088
 15048  002DF0  0A03               	xorlw	3	; case 2
 15049  002DF2  B4D8               	btfsc	status,2,c
 15050  002DF4  D7F2               	goto	i2l273
 15051  002DF6  0A01               	xorlw	1	; case 3
 15052  002DF8  B4D8               	btfsc	status,2,c
 15053  002DFA  D7DD               	goto	i2l271
 15054  002DFC  0A07               	xorlw	7	; case 4
 15055  002DFE  B4D8               	btfsc	status,2,c
 15056  002E00  D7D4               	goto	i2l270
 15057  002E02  0A01               	xorlw	1	; case 5
 15058  002E04  B4D8               	btfsc	status,2,c
 15059  002E06  D7CB               	goto	i2l269
 15060  002E08  0A03               	xorlw	3	; case 6
 15061  002E0A  B4D8               	btfsc	status,2,c
 15062  002E0C  D7C2               	goto	i2l268
 15063  002E0E  0A01               	xorlw	1	; case 7
 15064  002E10  B4D8               	btfsc	status,2,c
 15065  002E12  D7B9               	goto	i2l267
 15066  002E14  0A0F               	xorlw	15	; case 8
 15067  002E16  B4D8               	btfsc	status,2,c
 15068  002E18  D7B0               	goto	i2l266
 15069  002E1A  0A01               	xorlw	1	; case 9
 15070  002E1C  B4D8               	btfsc	status,2,c
 15071  002E1E  D7A7               	goto	i2l265
 15072  002E20  0A03               	xorlw	3	; case 10
 15073  002E22  B4D8               	btfsc	status,2,c
 15074  002E24  D79E               	goto	i2l264
 15075  002E26  0A01               	xorlw	1	; case 11
 15076  002E28  B4D8               	btfsc	status,2,c
 15077  002E2A  D795               	goto	i2l263
 15078  002E2C  0A07               	xorlw	7	; case 12
 15079  002E2E  B4D8               	btfsc	status,2,c
 15080  002E30  D78C               	goto	i2l4080
 15081  002E32                     i2l4088:
 15082                           
 15083                           ;RTC.c: 275: tmp += day;
 15084  002E32  5018               	movf	dayOfWeek@day,w,c
 15085  002E34  261E               	addwf	dayOfWeek@tmp,f,c
 15086  002E36  0E00               	movlw	0
 15087  002E38  221F               	addwfc	dayOfWeek@tmp+1,f,c
 15088  002E3A  2220               	addwfc	dayOfWeek@tmp+2,f,c
 15089  002E3C  2221               	addwfc	dayOfWeek@tmp+3,f,c
 15090                           
 15091                           ;RTC.c: 276: tmp--;
 15092  002E3E  061E               	decf	dayOfWeek@tmp,f,c
 15093  002E40  0E00               	movlw	0
 15094  002E42  5A1F               	subwfb	dayOfWeek@tmp+1,f,c
 15095  002E44  5A20               	subwfb	dayOfWeek@tmp+2,f,c
 15096  002E46  5A21               	subwfb	dayOfWeek@tmp+3,f,c
 15097                           
 15098                           ;RTC.c: 279: return (uint8_t) ((tmp + 6) % 7);
 15099  002E48  0E06               	movlw	6
 15100  002E4A  241E               	addwf	dayOfWeek@tmp,w,c
 15101  002E4C  6E0E               	movwf	___llmod@dividend,c
 15102  002E4E  0E00               	movlw	0
 15103  002E50  201F               	addwfc	dayOfWeek@tmp+1,w,c
 15104  002E52  6E0F               	movwf	___llmod@dividend+1,c
 15105  002E54  0E00               	movlw	0
 15106  002E56  2020               	addwfc	dayOfWeek@tmp+2,w,c
 15107  002E58  6E10               	movwf	___llmod@dividend+2,c
 15108  002E5A  0E00               	movlw	0
 15109  002E5C  2021               	addwfc	dayOfWeek@tmp+3,w,c
 15110  002E5E  6E11               	movwf	___llmod@dividend+3,c
 15111  002E60  0E07               	movlw	7
 15112  002E62  6E12               	movwf	___llmod@divisor,c
 15113  002E64  0E00               	movlw	0
 15114  002E66  6E13               	movwf	___llmod@divisor+1,c
 15115  002E68  0E00               	movlw	0
 15116  002E6A  6E14               	movwf	___llmod@divisor+2,c
 15117  002E6C  0E00               	movlw	0
 15118  002E6E  6E15               	movwf	___llmod@divisor+3,c
 15119  002E70  ECB4  F020         	call	___llmod	;wreg free
 15120  002E74  C00E  F019         	movff	?___llmod,??_dayOfWeek
 15121  002E78  C00F  F01A         	movff	?___llmod+1,??_dayOfWeek+1
 15122  002E7C  C010  F01B         	movff	?___llmod+2,??_dayOfWeek+2
 15123  002E80  C011  F01C         	movff	?___llmod+3,??_dayOfWeek+3
 15124  002E84  5019               	movf	??_dayOfWeek,w,c
 15125  002E86  0012               	return	
 15126  002E88                     __end_of_dayOfWeek:
 15127                           	opt stack 0
 15128                           tosu	equ	0xFFF
 15129                           tosh	equ	0xFFE
 15130                           tosl	equ	0xFFD
 15131                           pclatu	equ	0xFFB
 15132                           pclath	equ	0xFFA
 15133                           tblptru	equ	0xFF8
 15134                           tblptrh	equ	0xFF7
 15135                           tblptrl	equ	0xFF6
 15136                           tablat	equ	0xFF5
 15137                           prodh	equ	0xFF4
 15138                           prodl	equ	0xFF3
 15139                           intcon	equ	0xFF2
 15140                           intcon2	equ	0xFF1
 15141                           indf0	equ	0xFEF
 15142                           postinc0	equ	0xFEE
 15143                           fsr0h	equ	0xFEA
 15144                           fsr0l	equ	0xFE9
 15145                           wreg	equ	0xFE8
 15146                           postinc1	equ	0xFE6
 15147                           postdec1	equ	0xFE5
 15148                           fsr1h	equ	0xFE2
 15149                           fsr1l	equ	0xFE1
 15150                           indf2	equ	0xFDF
 15151                           postinc2	equ	0xFDE
 15152                           postdec2	equ	0xFDD
 15153                           plusw2	equ	0xFDB
 15154                           fsr2h	equ	0xFDA
 15155                           fsr2l	equ	0xFD9
 15156                           status	equ	0xFD8
 15157                           
 15158 ;; *************** function ___wmul *****************
 15159 ;; Defined at:
 15160 ;;		line 15 in file "/opt/microchip/xc8/v1.32/sources/common/Umul16.c"
 15161 ;; Parameters:    Size  Location     Type
 15162 ;;  multiplier      2   14[COMRAM] unsigned int 
 15163 ;;  multiplicand    2   16[COMRAM] unsigned int 
 15164 ;; Auto vars:     Size  Location     Type
 15165 ;;  product         2   18[COMRAM] unsigned int 
 15166 ;; Return value:  Size  Location     Type
 15167 ;;                  2   14[COMRAM] unsigned int 
 15168 ;; Registers used:
 15169 ;;		wreg, status,2, status,0, prodl, prodh
 15170 ;; Tracked objects:
 15171 ;;		On entry : 0/0
 15172 ;;		On exit  : 0/0
 15173 ;;		Unchanged: 0/0
 15174 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 15175 ;;      Params:         4       0       0       0       0       0       0       0       0
 15176 ;;      Locals:         2       0       0       0       0       0       0       0       0
 15177 ;;      Temps:          0       0       0       0       0       0       0       0       0
 15178 ;;      Totals:         6       0       0       0       0       0       0       0       0
 15179 ;;Total ram usage:        6 bytes
 15180 ;; Hardware stack levels used:    1
 15181 ;; This function calls:
 15182 ;;		Nothing
 15183 ;; This function is called by:
 15184 ;;		_writeString
 15185 ;;		_dayOfWeek
 15186 ;;		_getTemp
 15187 ;;		_fround
 15188 ;;		_scale
 15189 ;;		_sprintf
 15190 ;; This function uses a non-reentrant model
 15191 ;;
 15192                           
 15193                           	psect	text53
 15194  0045A0                     __ptext53:
 15195                           	opt stack 0
 15196  0045A0                     ___wmul:
 15197                           	opt stack 22
 15198                           
 15199                           ;incstack = 0
 15200  0045A0  500F               	movf	___wmul@multiplier,w,c
 15201  0045A2  0211               	mulwf	___wmul@multiplicand,c
 15202  0045A4  CFF3 F013          	movff	prodl,___wmul@product
 15203  0045A8  CFF4 F014          	movff	prodh,___wmul@product+1
 15204  0045AC  500F               	movf	___wmul@multiplier,w,c
 15205  0045AE  0212               	mulwf	___wmul@multiplicand+1,c
 15206  0045B0  50F3               	movf	prodl,w,c
 15207  0045B2  2614               	addwf	___wmul@product+1,f,c
 15208  0045B4  5010               	movf	___wmul@multiplier+1,w,c
 15209  0045B6  0211               	mulwf	___wmul@multiplicand,c
 15210  0045B8  50F3               	movf	prodl,w,c
 15211  0045BA  2614               	addwf	___wmul@product+1,f,c
 15212  0045BC  C013  F00F         	movff	___wmul@product,?___wmul
 15213  0045C0  C014  F010         	movff	___wmul@product+1,?___wmul+1
 15214  0045C4  0012               	return	
 15215  0045C6                     __end_of___wmul:
 15216                           	opt stack 0
 15217                           tosu	equ	0xFFF
 15218                           tosh	equ	0xFFE
 15219                           tosl	equ	0xFFD
 15220                           pclatu	equ	0xFFB
 15221                           pclath	equ	0xFFA
 15222                           tblptru	equ	0xFF8
 15223                           tblptrh	equ	0xFF7
 15224                           tblptrl	equ	0xFF6
 15225                           tablat	equ	0xFF5
 15226                           prodh	equ	0xFF4
 15227                           prodl	equ	0xFF3
 15228                           intcon	equ	0xFF2
 15229                           intcon2	equ	0xFF1
 15230                           indf0	equ	0xFEF
 15231                           postinc0	equ	0xFEE
 15232                           fsr0h	equ	0xFEA
 15233                           fsr0l	equ	0xFE9
 15234                           wreg	equ	0xFE8
 15235                           postinc1	equ	0xFE6
 15236                           postdec1	equ	0xFE5
 15237                           fsr1h	equ	0xFE2
 15238                           fsr1l	equ	0xFE1
 15239                           indf2	equ	0xFDF
 15240                           postinc2	equ	0xFDE
 15241                           postdec2	equ	0xFDD
 15242                           plusw2	equ	0xFDB
 15243                           fsr2h	equ	0xFDA
 15244                           fsr2l	equ	0xFD9
 15245                           status	equ	0xFD8
 15246                           
 15247 ;; *************** function ___llmod *****************
 15248 ;; Defined at:
 15249 ;;		line 8 in file "/opt/microchip/xc8/v1.32/sources/common/llmod.c"
 15250 ;; Parameters:    Size  Location     Type
 15251 ;;  dividend        4   13[COMRAM] unsigned long 
 15252 ;;  divisor         4   17[COMRAM] unsigned long 
 15253 ;; Auto vars:     Size  Location     Type
 15254 ;;  counter         1   21[COMRAM] unsigned char 
 15255 ;; Return value:  Size  Location     Type
 15256 ;;                  4   13[COMRAM] unsigned long 
 15257 ;; Registers used:
 15258 ;;		wreg, status,2, status,0
 15259 ;; Tracked objects:
 15260 ;;		On entry : 0/0
 15261 ;;		On exit  : 0/0
 15262 ;;		Unchanged: 0/0
 15263 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 15264 ;;      Params:         8       0       0       0       0       0       0       0       0
 15265 ;;      Locals:         1       0       0       0       0       0       0       0       0
 15266 ;;      Temps:          0       0       0       0       0       0       0       0       0
 15267 ;;      Totals:         9       0       0       0       0       0       0       0       0
 15268 ;;Total ram usage:        9 bytes
 15269 ;; Hardware stack levels used:    1
 15270 ;; This function calls:
 15271 ;;		Nothing
 15272 ;; This function is called by:
 15273 ;;		_dayOfWeek
 15274 ;;		_sprintf
 15275 ;; This function uses a non-reentrant model
 15276 ;;
 15277                           
 15278                           	psect	text54
 15279  004168                     __ptext54:
 15280                           	opt stack 0
 15281  004168                     ___llmod:
 15282                           	opt stack 22
 15283                           
 15284                           ;incstack = 0
 15285  004168  5015               	movf	___llmod@divisor+3,w,c
 15286  00416A  1012               	iorwf	___llmod@divisor,w,c
 15287  00416C  1013               	iorwf	___llmod@divisor+1,w,c
 15288  00416E  1014               	iorwf	___llmod@divisor+2,w,c
 15289  004170  B4D8               	btfsc	status,2,c
 15290  004172  D024               	goto	i2l1288
 15291  004174  0E01               	movlw	1
 15292  004176  6E16               	movwf	___llmod@counter,c
 15293  004178  D006               	goto	i2l3954
 15294  00417A                     i2l3952:
 15295  00417A  90D8               	bcf	status,0,c
 15296  00417C  3612               	rlcf	___llmod@divisor,f,c
 15297  00417E  3613               	rlcf	___llmod@divisor+1,f,c
 15298  004180  3614               	rlcf	___llmod@divisor+2,f,c
 15299  004182  3615               	rlcf	___llmod@divisor+3,f,c
 15300  004184  2A16               	incf	___llmod@counter,f,c
 15301  004186                     i2l3954:
 15302  004186  AE15               	btfss	___llmod@divisor+3,7,c
 15303  004188  D7F8               	goto	i2l3952
 15304  00418A                     i2l3956:
 15305  00418A  5012               	movf	___llmod@divisor,w,c
 15306  00418C  5C0E               	subwf	___llmod@dividend,w,c
 15307  00418E  5013               	movf	___llmod@divisor+1,w,c
 15308  004190  580F               	subwfb	___llmod@dividend+1,w,c
 15309  004192  5014               	movf	___llmod@divisor+2,w,c
 15310  004194  5810               	subwfb	___llmod@dividend+2,w,c
 15311  004196  5015               	movf	___llmod@divisor+3,w,c
 15312  004198  5811               	subwfb	___llmod@dividend+3,w,c
 15313  00419A  A0D8               	btfss	status,0,c
 15314  00419C  D008               	goto	i2l3960
 15315  00419E  5012               	movf	___llmod@divisor,w,c
 15316  0041A0  5E0E               	subwf	___llmod@dividend,f,c
 15317  0041A2  5013               	movf	___llmod@divisor+1,w,c
 15318  0041A4  5A0F               	subwfb	___llmod@dividend+1,f,c
 15319  0041A6  5014               	movf	___llmod@divisor+2,w,c
 15320  0041A8  5A10               	subwfb	___llmod@dividend+2,f,c
 15321  0041AA  5015               	movf	___llmod@divisor+3,w,c
 15322  0041AC  5A11               	subwfb	___llmod@dividend+3,f,c
 15323  0041AE                     i2l3960:
 15324  0041AE  90D8               	bcf	status,0,c
 15325  0041B0  3215               	rrcf	___llmod@divisor+3,f,c
 15326  0041B2  3214               	rrcf	___llmod@divisor+2,f,c
 15327  0041B4  3213               	rrcf	___llmod@divisor+1,f,c
 15328  0041B6  3212               	rrcf	___llmod@divisor,f,c
 15329  0041B8  2E16               	decfsz	___llmod@counter,f,c
 15330  0041BA  D7E7               	goto	i2l3956
 15331  0041BC                     i2l1288:
 15332  0041BC  C00E  F00E         	movff	___llmod@dividend,?___llmod
 15333  0041C0  C00F  F00F         	movff	___llmod@dividend+1,?___llmod+1
 15334  0041C4  C010  F010         	movff	___llmod@dividend+2,?___llmod+2
 15335  0041C8  C011  F011         	movff	___llmod@dividend+3,?___llmod+3
 15336  0041CC  0012               	return	
 15337  0041CE                     __end_of___llmod:
 15338                           	opt stack 0
 15339                           tosu	equ	0xFFF
 15340                           tosh	equ	0xFFE
 15341                           tosl	equ	0xFFD
 15342                           pclatu	equ	0xFFB
 15343                           pclath	equ	0xFFA
 15344                           tblptru	equ	0xFF8
 15345                           tblptrh	equ	0xFF7
 15346                           tblptrl	equ	0xFF6
 15347                           tablat	equ	0xFF5
 15348                           prodh	equ	0xFF4
 15349                           prodl	equ	0xFF3
 15350                           intcon	equ	0xFF2
 15351                           intcon2	equ	0xFF1
 15352                           indf0	equ	0xFEF
 15353                           postinc0	equ	0xFEE
 15354                           fsr0h	equ	0xFEA
 15355                           fsr0l	equ	0xFE9
 15356                           wreg	equ	0xFE8
 15357                           postinc1	equ	0xFE6
 15358                           postdec1	equ	0xFE5
 15359                           fsr1h	equ	0xFE2
 15360                           fsr1l	equ	0xFE1
 15361                           indf2	equ	0xFDF
 15362                           postinc2	equ	0xFDE
 15363                           postdec2	equ	0xFDD
 15364                           plusw2	equ	0xFDB
 15365                           fsr2h	equ	0xFDA
 15366                           fsr2l	equ	0xFD9
 15367                           status	equ	0xFD8
 15368                           
 15369 ;; *************** function ___awmod *****************
 15370 ;; Defined at:
 15371 ;;		line 8 in file "/opt/microchip/xc8/v1.32/sources/common/awmod.c"
 15372 ;; Parameters:    Size  Location     Type
 15373 ;;  dividend        2    0[COMRAM] int 
 15374 ;;  divisor         2    2[COMRAM] int 
 15375 ;; Auto vars:     Size  Location     Type
 15376 ;;  sign            1    5[COMRAM] unsigned char 
 15377 ;;  counter         1    4[COMRAM] unsigned char 
 15378 ;; Return value:  Size  Location     Type
 15379 ;;                  2    0[COMRAM] int 
 15380 ;; Registers used:
 15381 ;;		wreg, status,2, status,0, prodl
 15382 ;; Tracked objects:
 15383 ;;		On entry : 0/0
 15384 ;;		On exit  : 0/0
 15385 ;;		Unchanged: 0/0
 15386 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 15387 ;;      Params:         4       0       0       0       0       0       0       0       0
 15388 ;;      Locals:         2       0       0       0       0       0       0       0       0
 15389 ;;      Temps:          0       0       0       0       0       0       0       0       0
 15390 ;;      Totals:         6       0       0       0       0       0       0       0       0
 15391 ;;Total ram usage:        6 bytes
 15392 ;; Hardware stack levels used:    1
 15393 ;; This function calls:
 15394 ;;		Nothing
 15395 ;; This function is called by:
 15396 ;;		_dayOfWeek
 15397 ;;		_advState
 15398 ;;		_fround
 15399 ;;		_scale
 15400 ;; This function uses a non-reentrant model
 15401 ;;
 15402                           
 15403                           	psect	text55
 15404  003DE8                     __ptext55:
 15405                           	opt stack 0
 15406  003DE8                     ___awmod:
 15407                           	opt stack 22
 15408                           
 15409                           ;incstack = 0
 15410  003DE8  0E00               	movlw	0
 15411  003DEA  6E06               	movwf	___awmod@sign,c
 15412  003DEC  5002               	movf	___awmod@dividend+1,w,c
 15413  003DEE  0A80               	xorlw	128
 15414  003DF0  6EF3               	movwf	prodl,c
 15415  003DF2  0E80               	movlw	128
 15416  003DF4  5CF3               	subwf	prodl,w,c
 15417  003DF6  0E00               	movlw	0
 15418  003DF8  B4D8               	btfsc	status,2,c
 15419  003DFA  5C01               	subwf	___awmod@dividend,w,c
 15420  003DFC  B0D8               	btfsc	status,0,c
 15421  003DFE  D006               	goto	i2l3920
 15422  003E00  6C01               	negf	___awmod@dividend,c
 15423  003E02  1E02               	comf	___awmod@dividend+1,f,c
 15424  003E04  B0D8               	btfsc	status,0,c
 15425  003E06  2A02               	incf	___awmod@dividend+1,f,c
 15426  003E08  0E01               	movlw	1
 15427  003E0A  6E06               	movwf	___awmod@sign,c
 15428  003E0C                     i2l3920:
 15429  003E0C  5004               	movf	___awmod@divisor+1,w,c
 15430  003E0E  0A80               	xorlw	128
 15431  003E10  6EF3               	movwf	prodl,c
 15432  003E12  0E80               	movlw	128
 15433  003E14  5CF3               	subwf	prodl,w,c
 15434  003E16  0E00               	movlw	0
 15435  003E18  B4D8               	btfsc	status,2,c
 15436  003E1A  5C03               	subwf	___awmod@divisor,w,c
 15437  003E1C  B0D8               	btfsc	status,0,c
 15438  003E1E  D004               	goto	i2l3924
 15439  003E20  6C03               	negf	___awmod@divisor,c
 15440  003E22  1E04               	comf	___awmod@divisor+1,f,c
 15441  003E24  B0D8               	btfsc	status,0,c
 15442  003E26  2A04               	incf	___awmod@divisor+1,f,c
 15443  003E28                     i2l3924:
 15444  003E28  5004               	movf	___awmod@divisor+1,w,c
 15445  003E2A  1003               	iorwf	___awmod@divisor,w,c
 15446  003E2C  B4D8               	btfsc	status,2,c
 15447  003E2E  D018               	goto	i2l3940
 15448  003E30  0E01               	movlw	1
 15449  003E32  6E05               	movwf	___awmod@counter,c
 15450  003E34  D004               	goto	i2l3930
 15451  003E36                     i2l3928:
 15452  003E36  90D8               	bcf	status,0,c
 15453  003E38  3603               	rlcf	___awmod@divisor,f,c
 15454  003E3A  3604               	rlcf	___awmod@divisor+1,f,c
 15455  003E3C  2A05               	incf	___awmod@counter,f,c
 15456  003E3E                     i2l3930:
 15457  003E3E  AE04               	btfss	___awmod@divisor+1,7,c
 15458  003E40  D7FA               	goto	i2l3928
 15459  003E42                     i2l3932:
 15460  003E42  5003               	movf	___awmod@divisor,w,c
 15461  003E44  5C01               	subwf	___awmod@dividend,w,c
 15462  003E46  5004               	movf	___awmod@divisor+1,w,c
 15463  003E48  5802               	subwfb	___awmod@dividend+1,w,c
 15464  003E4A  A0D8               	btfss	status,0,c
 15465  003E4C  D004               	goto	i2l3936
 15466  003E4E  5003               	movf	___awmod@divisor,w,c
 15467  003E50  5E01               	subwf	___awmod@dividend,f,c
 15468  003E52  5004               	movf	___awmod@divisor+1,w,c
 15469  003E54  5A02               	subwfb	___awmod@dividend+1,f,c
 15470  003E56                     i2l3936:
 15471  003E56  90D8               	bcf	status,0,c
 15472  003E58  3204               	rrcf	___awmod@divisor+1,f,c
 15473  003E5A  3203               	rrcf	___awmod@divisor,f,c
 15474  003E5C  2E05               	decfsz	___awmod@counter,f,c
 15475  003E5E  D7F1               	goto	i2l3932
 15476  003E60                     i2l3940:
 15477  003E60  5006               	movf	___awmod@sign,w,c
 15478  003E62  B4D8               	btfsc	status,2,c
 15479  003E64  D004               	goto	i2l3944
 15480  003E66  6C01               	negf	___awmod@dividend,c
 15481  003E68  1E02               	comf	___awmod@dividend+1,f,c
 15482  003E6A  B0D8               	btfsc	status,0,c
 15483  003E6C  2A02               	incf	___awmod@dividend+1,f,c
 15484  003E6E                     i2l3944:
 15485  003E6E  C001  F001         	movff	___awmod@dividend,?___awmod
 15486  003E72  C002  F002         	movff	___awmod@dividend+1,?___awmod+1
 15487  003E76  0012               	return	
 15488  003E78                     __end_of___awmod:
 15489                           	opt stack 0
 15490                           tosu	equ	0xFFF
 15491                           tosh	equ	0xFFE
 15492                           tosl	equ	0xFFD
 15493                           pclatu	equ	0xFFB
 15494                           pclath	equ	0xFFA
 15495                           tblptru	equ	0xFF8
 15496                           tblptrh	equ	0xFF7
 15497                           tblptrl	equ	0xFF6
 15498                           tablat	equ	0xFF5
 15499                           prodh	equ	0xFF4
 15500                           prodl	equ	0xFF3
 15501                           intcon	equ	0xFF2
 15502                           intcon2	equ	0xFF1
 15503                           indf0	equ	0xFEF
 15504                           postinc0	equ	0xFEE
 15505                           fsr0h	equ	0xFEA
 15506                           fsr0l	equ	0xFE9
 15507                           wreg	equ	0xFE8
 15508                           postinc1	equ	0xFE6
 15509                           postdec1	equ	0xFE5
 15510                           fsr1h	equ	0xFE2
 15511                           fsr1l	equ	0xFE1
 15512                           indf2	equ	0xFDF
 15513                           postinc2	equ	0xFDE
 15514                           postdec2	equ	0xFDD
 15515                           plusw2	equ	0xFDB
 15516                           fsr2h	equ	0xFDA
 15517                           fsr2l	equ	0xFD9
 15518                           status	equ	0xFD8
 15519                           
 15520 ;; *************** function ___awdiv *****************
 15521 ;; Defined at:
 15522 ;;		line 8 in file "/opt/microchip/xc8/v1.32/sources/common/awdiv.c"
 15523 ;; Parameters:    Size  Location     Type
 15524 ;;  dividend        2    6[COMRAM] int 
 15525 ;;  divisor         2    8[COMRAM] int 
 15526 ;; Auto vars:     Size  Location     Type
 15527 ;;  quotient        2   12[COMRAM] int 
 15528 ;;  sign            1   11[COMRAM] unsigned char 
 15529 ;;  counter         1   10[COMRAM] unsigned char 
 15530 ;; Return value:  Size  Location     Type
 15531 ;;                  2    6[COMRAM] int 
 15532 ;; Registers used:
 15533 ;;		wreg, status,2, status,0, prodl
 15534 ;; Tracked objects:
 15535 ;;		On entry : 0/0
 15536 ;;		On exit  : 0/0
 15537 ;;		Unchanged: 0/0
 15538 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 15539 ;;      Params:         4       0       0       0       0       0       0       0       0
 15540 ;;      Locals:         4       0       0       0       0       0       0       0       0
 15541 ;;      Temps:          0       0       0       0       0       0       0       0       0
 15542 ;;      Totals:         8       0       0       0       0       0       0       0       0
 15543 ;;Total ram usage:        8 bytes
 15544 ;; Hardware stack levels used:    1
 15545 ;; This function calls:
 15546 ;;		Nothing
 15547 ;; This function is called by:
 15548 ;;		_dayOfWeek
 15549 ;;		_fround
 15550 ;;		_scale
 15551 ;;		_sprintf
 15552 ;; This function uses a non-reentrant model
 15553 ;;
 15554                           
 15555                           	psect	text56
 15556  003B88                     __ptext56:
 15557                           	opt stack 0
 15558  003B88                     ___awdiv:
 15559                           	opt stack 22
 15560                           
 15561                           ;incstack = 0
 15562  003B88  0E00               	movlw	0
 15563  003B8A  6E0C               	movwf	___awdiv@sign,c
 15564  003B8C  500A               	movf	___awdiv@divisor+1,w,c
 15565  003B8E  0A80               	xorlw	128
 15566  003B90  6EF3               	movwf	prodl,c
 15567  003B92  0E80               	movlw	128
 15568  003B94  5CF3               	subwf	prodl,w,c
 15569  003B96  0E00               	movlw	0
 15570  003B98  B4D8               	btfsc	status,2,c
 15571  003B9A  5C09               	subwf	___awdiv@divisor,w,c
 15572  003B9C  B0D8               	btfsc	status,0,c
 15573  003B9E  D006               	goto	i2l3876
 15574  003BA0  6C09               	negf	___awdiv@divisor,c
 15575  003BA2  1E0A               	comf	___awdiv@divisor+1,f,c
 15576  003BA4  B0D8               	btfsc	status,0,c
 15577  003BA6  2A0A               	incf	___awdiv@divisor+1,f,c
 15578  003BA8  0E01               	movlw	1
 15579  003BAA  6E0C               	movwf	___awdiv@sign,c
 15580  003BAC                     i2l3876:
 15581  003BAC  5008               	movf	___awdiv@dividend+1,w,c
 15582  003BAE  0A80               	xorlw	128
 15583  003BB0  6EF3               	movwf	prodl,c
 15584  003BB2  0E80               	movlw	128
 15585  003BB4  5CF3               	subwf	prodl,w,c
 15586  003BB6  0E00               	movlw	0
 15587  003BB8  B4D8               	btfsc	status,2,c
 15588  003BBA  5C07               	subwf	___awdiv@dividend,w,c
 15589  003BBC  B0D8               	btfsc	status,0,c
 15590  003BBE  D006               	goto	i2l3882
 15591  003BC0  6C07               	negf	___awdiv@dividend,c
 15592  003BC2  1E08               	comf	___awdiv@dividend+1,f,c
 15593  003BC4  B0D8               	btfsc	status,0,c
 15594  003BC6  2A08               	incf	___awdiv@dividend+1,f,c
 15595  003BC8  0E01               	movlw	1
 15596  003BCA  1A0C               	xorwf	___awdiv@sign,f,c
 15597  003BCC                     i2l3882:
 15598  003BCC  0E00               	movlw	0
 15599  003BCE  6E0E               	movwf	___awdiv@quotient+1,c
 15600  003BD0  0E00               	movlw	0
 15601  003BD2  6E0D               	movwf	___awdiv@quotient,c
 15602  003BD4  500A               	movf	___awdiv@divisor+1,w,c
 15603  003BD6  1009               	iorwf	___awdiv@divisor,w,c
 15604  003BD8  B4D8               	btfsc	status,2,c
 15605  003BDA  D01C               	goto	i2l3904
 15606  003BDC  0E01               	movlw	1
 15607  003BDE  6E0B               	movwf	___awdiv@counter,c
 15608  003BE0  D004               	goto	i2l3890
 15609  003BE2                     i2l3888:
 15610  003BE2  90D8               	bcf	status,0,c
 15611  003BE4  3609               	rlcf	___awdiv@divisor,f,c
 15612  003BE6  360A               	rlcf	___awdiv@divisor+1,f,c
 15613  003BE8  2A0B               	incf	___awdiv@counter,f,c
 15614  003BEA                     i2l3890:
 15615  003BEA  AE0A               	btfss	___awdiv@divisor+1,7,c
 15616  003BEC  D7FA               	goto	i2l3888
 15617  003BEE                     i2l3892:
 15618  003BEE  90D8               	bcf	status,0,c
 15619  003BF0  360D               	rlcf	___awdiv@quotient,f,c
 15620  003BF2  360E               	rlcf	___awdiv@quotient+1,f,c
 15621  003BF4  5009               	movf	___awdiv@divisor,w,c
 15622  003BF6  5C07               	subwf	___awdiv@dividend,w,c
 15623  003BF8  500A               	movf	___awdiv@divisor+1,w,c
 15624  003BFA  5808               	subwfb	___awdiv@dividend+1,w,c
 15625  003BFC  A0D8               	btfss	status,0,c
 15626  003BFE  D005               	goto	i2l3900
 15627  003C00  5009               	movf	___awdiv@divisor,w,c
 15628  003C02  5E07               	subwf	___awdiv@dividend,f,c
 15629  003C04  500A               	movf	___awdiv@divisor+1,w,c
 15630  003C06  5A08               	subwfb	___awdiv@dividend+1,f,c
 15631  003C08  800D               	bsf	___awdiv@quotient,0,c
 15632  003C0A                     i2l3900:
 15633  003C0A  90D8               	bcf	status,0,c
 15634  003C0C  320A               	rrcf	___awdiv@divisor+1,f,c
 15635  003C0E  3209               	rrcf	___awdiv@divisor,f,c
 15636  003C10  2E0B               	decfsz	___awdiv@counter,f,c
 15637  003C12  D7ED               	goto	i2l3892
 15638  003C14                     i2l3904:
 15639  003C14  500C               	movf	___awdiv@sign,w,c
 15640  003C16  B4D8               	btfsc	status,2,c
 15641  003C18  D004               	goto	i2l3908
 15642  003C1A  6C0D               	negf	___awdiv@quotient,c
 15643  003C1C  1E0E               	comf	___awdiv@quotient+1,f,c
 15644  003C1E  B0D8               	btfsc	status,0,c
 15645  003C20  2A0E               	incf	___awdiv@quotient+1,f,c
 15646  003C22                     i2l3908:
 15647  003C22  C00D  F007         	movff	___awdiv@quotient,?___awdiv
 15648  003C26  C00E  F008         	movff	___awdiv@quotient+1,?___awdiv+1
 15649  003C2A  0012               	return	
 15650  003C2C                     __end_of___awdiv:
 15651                           	opt stack 0
 15652                           tosu	equ	0xFFF
 15653                           tosh	equ	0xFFE
 15654                           tosl	equ	0xFFD
 15655                           pclatu	equ	0xFFB
 15656                           pclath	equ	0xFFA
 15657                           tblptru	equ	0xFF8
 15658                           tblptrh	equ	0xFF7
 15659                           tblptrl	equ	0xFF6
 15660                           tablat	equ	0xFF5
 15661                           prodh	equ	0xFF4
 15662                           prodl	equ	0xFF3
 15663                           intcon	equ	0xFF2
 15664                           intcon2	equ	0xFF1
 15665                           indf0	equ	0xFEF
 15666                           postinc0	equ	0xFEE
 15667                           fsr0h	equ	0xFEA
 15668                           fsr0l	equ	0xFE9
 15669                           wreg	equ	0xFE8
 15670                           postinc1	equ	0xFE6
 15671                           postdec1	equ	0xFE5
 15672                           fsr1h	equ	0xFE2
 15673                           fsr1l	equ	0xFE1
 15674                           indf2	equ	0xFDF
 15675                           postinc2	equ	0xFDE
 15676                           postdec2	equ	0xFDD
 15677                           plusw2	equ	0xFDB
 15678                           fsr2h	equ	0xFDA
 15679                           fsr2l	equ	0xFD9
 15680                           status	equ	0xFD8
 15681                           tosu	equ	0xFFF
 15682                           tosh	equ	0xFFE
 15683                           tosl	equ	0xFFD
 15684                           pclatu	equ	0xFFB
 15685                           pclath	equ	0xFFA
 15686                           tblptru	equ	0xFF8
 15687                           tblptrh	equ	0xFF7
 15688                           tblptrl	equ	0xFF6
 15689                           tablat	equ	0xFF5
 15690                           prodh	equ	0xFF4
 15691                           prodl	equ	0xFF3
 15692                           intcon	equ	0xFF2
 15693                           intcon2	equ	0xFF1
 15694                           indf0	equ	0xFEF
 15695                           postinc0	equ	0xFEE
 15696                           fsr0h	equ	0xFEA
 15697                           fsr0l	equ	0xFE9
 15698                           wreg	equ	0xFE8
 15699                           postinc1	equ	0xFE6
 15700                           postdec1	equ	0xFE5
 15701                           fsr1h	equ	0xFE2
 15702                           fsr1l	equ	0xFE1
 15703                           indf2	equ	0xFDF
 15704                           postinc2	equ	0xFDE
 15705                           postdec2	equ	0xFDD
 15706                           plusw2	equ	0xFDB
 15707                           fsr2h	equ	0xFDA
 15708                           fsr2l	equ	0xFD9
 15709                           status	equ	0xFD8
 15710                           
 15711                           	psect	text57
 15712  000000                     __ptext57:
 15713                           	opt stack 0
 15714                           tosu	equ	0xFFF
 15715                           tosh	equ	0xFFE
 15716                           tosl	equ	0xFFD
 15717                           pclatu	equ	0xFFB
 15718                           pclath	equ	0xFFA
 15719                           tblptru	equ	0xFF8
 15720                           tblptrh	equ	0xFF7
 15721                           tblptrl	equ	0xFF6
 15722                           tablat	equ	0xFF5
 15723                           prodh	equ	0xFF4
 15724                           prodl	equ	0xFF3
 15725                           intcon	equ	0xFF2
 15726                           intcon2	equ	0xFF1
 15727                           indf0	equ	0xFEF
 15728                           postinc0	equ	0xFEE
 15729                           fsr0h	equ	0xFEA
 15730                           fsr0l	equ	0xFE9
 15731                           wreg	equ	0xFE8
 15732                           postinc1	equ	0xFE6
 15733                           postdec1	equ	0xFE5
 15734                           fsr1h	equ	0xFE2
 15735                           fsr1l	equ	0xFE1
 15736                           indf2	equ	0xFDF
 15737                           postinc2	equ	0xFDE
 15738                           postdec2	equ	0xFDD
 15739                           plusw2	equ	0xFDB
 15740                           fsr2h	equ	0xFDA
 15741                           fsr2l	equ	0xFD9
 15742                           status	equ	0xFD8
 15743                           
 15744                           	psect	rparam
 15745  0000                     tosu	equ	0xFFF
 15746                           tosh	equ	0xFFE
 15747                           tosl	equ	0xFFD
 15748                           pclatu	equ	0xFFB
 15749                           pclath	equ	0xFFA
 15750                           tblptru	equ	0xFF8
 15751                           tblptrh	equ	0xFF7
 15752                           tblptrl	equ	0xFF6
 15753                           tablat	equ	0xFF5
 15754                           prodh	equ	0xFF4
 15755                           prodl	equ	0xFF3
 15756                           intcon	equ	0xFF2
 15757                           intcon2	equ	0xFF1
 15758                           indf0	equ	0xFEF
 15759                           postinc0	equ	0xFEE
 15760                           fsr0h	equ	0xFEA
 15761                           fsr0l	equ	0xFE9
 15762                           wreg	equ	0xFE8
 15763                           postinc1	equ	0xFE6
 15764                           postdec1	equ	0xFE5
 15765                           fsr1h	equ	0xFE2
 15766                           fsr1l	equ	0xFE1
 15767                           indf2	equ	0xFDF
 15768                           postinc2	equ	0xFDE
 15769                           postdec2	equ	0xFDD
 15770                           plusw2	equ	0xFDB
 15771                           fsr2h	equ	0xFDA
 15772                           fsr2l	equ	0xFD9
 15773                           status	equ	0xFD8


Data Sizes:
    Strings     101
    Constant    229
    Data        27
    BSS         109
    Persistent  5
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     94      95
    BANK0           160     72     138
    BANK1           256     22      96
    BANK2           256      0       0
    BANK3           244      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    sprintf@_val._cp	PTR const unsigned char  size(2) Largest target is 28
		 -> STR_19(CODE[7]), sprintf@c(BANK0[1]), dow(CODE[28]), 

    sprintf@f	PTR const unsigned char  size(2) Largest target is 17
		 -> STR_18(CODE[4]), STR_15(CODE[4]), STR_14(CODE[5]), STR_13(CODE[5]), 
		 -> STR_12(CODE[10]), STR_11(CODE[10]), STR_10(CODE[10]), STR_9(CODE[15]), 
		 -> STR_8(CODE[15]), STR_7(CODE[15]), STR_6(CODE[17]), STR_5(CODE[15]), 
		 -> STR_4(CODE[13]), STR_3(CODE[5]), STR_2(CODE[5]), 

    sprintf@sp	PTR unsigned char  size(2) Largest target is 15
		 -> printTemp@str(BANK0[15]), printRTC@str(BANK0[15]), writeFloat@str(COMRAM[15]), writeLong@str(COMRAM[15]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(COMRAM[2]), 

    S732$_cp	PTR const unsigned char  size(2) Largest target is 28
		 -> STR_19(CODE[7]), sprintf@c(BANK0[1]), dow(CODE[28]), 

    _val._str._cp	PTR const unsigned char  size(2) Largest target is 28
		 -> STR_19(CODE[7]), sprintf@c(BANK0[1]), dow(CODE[28]), 

    LATA5.printFn	PTR FTN(unsigned char ,)void  size(2) Largest target is 0
		 -> printTemp(), printRTC(), 

    menu.printFn	PTR FTN(unsigned char ,)void  size(2) Largest target is 0
		 -> printTemp(), printRTC(), 

    menu	PTR struct sMenu size(2) Largest target is 5
		 -> NULL(NULL[0]), tempMenu(BANK0[5]), rtcMenu(BANK0[5]), 

    tempMenu.printFn	PTR FTN(unsigned char ,)void  size(2) Largest target is 0
		 -> printTemp(), printRTC(), 

    S165sMenu$printFn	PTR FTN(unsigned char ,)void  size(2) Largest target is 0
		 -> printTemp(), printRTC(), 

    rtcMenu.printFn	PTR FTN(unsigned char ,)void  size(2) Largest target is 0
		 -> printTemp(), printRTC(), 

    writeString@string	PTR unsigned char  size(2) Largest target is 15
		 -> printTemp@str(BANK0[15]), STR_17(CODE[3]), STR_16(CODE[3]), printRTC@str(BANK0[15]), 
		 -> writeFloat@str(COMRAM[15]), writeLong@str(COMRAM[15]), STR_1(CODE[1]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _isr in COMRAM

    _isr->_printRTC
    _update->_writeDigit
    _writeDigit->_log2
    _spi->_rotate
    _printTemp->_sprintf
    ___altoft->___fttol
    _printRTC->_sprintf
    _sprintf->___ftsub
    _scale->___ftmul
    _fround->___ftmul
    ___lltoft->___ftpack
    ___fttol->___ftmul
    ___ftsub->___ftadd
    _getTemp->___ftadd
    ___lwtoft->___ftpack
    ___ftmul->___wmul
    ___ftdiv->___ftmul
    ___ftadd->___ftdiv
    _buttons->_advMenu
    _advState->___awmod
    _clearScreen->_writeString
    _writeString->_writeChar
    _writeChar->___wmul
    _log2->_hibit
    _daysOfMonth->___lwmod
    _checkDST->_dayOfWeek
    _tick->_daysOfMonth
    _tick->_saveTime
    _daysOfMonth->___lwmod
    _checkDST->_dayOfWeek
    _dayOfWeek->___llmod
    ___wmul->___awdiv
    ___llmod->___lldiv
    ___awdiv->___awmod

Critical Paths under _main in BANK0

    None.

Critical Paths under _isr in BANK0

    _isr->_printTemp
    _printTemp->_sprintf
    _printRTC->_sprintf

Critical Paths under _main in BANK1

    _startDisp->_setBrightness
    _startDisp->_setTest
    _initRTC->_loadTime

Critical Paths under _isr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _isr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _isr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _isr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _isr in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _isr in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _isr in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 9     4      5     882
                                             13 BANK1      9     4      5
                              _setup
 ---------------------------------------------------------------------------------
 (1) _setup                                                0     0      0     845
                            _initRTC
                           _initTemp
                       _setupButtons
                          _startDisp
 ---------------------------------------------------------------------------------
 (2) _startDisp                                            0     0      0      62
                      _setBrightness
                            _setTest
 ---------------------------------------------------------------------------------
 (3) _setTest                                              1     1      0      31
                                              0 BANK1      1     1      0
 ---------------------------------------------------------------------------------
 (3) _setBrightness                                        1     1      0      31
                                              0 BANK1      1     1      0
 ---------------------------------------------------------------------------------
 (2) _setupButtons                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _initTemp                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _initRTC                                              0     0      0     783
                           _loadTime
 ---------------------------------------------------------------------------------
 (3) _loadTime                                            13    13      0     783
                                              0 BANK1     13    13      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _isr                                                 14    14      0  167809
                                             58 BANK0     14    14      0
                            _buttons
                            _getTemp
                           _printRTC *
                          _printTemp *
                               _tick
                             _update
 ---------------------------------------------------------------------------------
 (5) _update                                               6     6      0    2195
                                             27 COMRAM     6     6      0
                                _spi
                         _writeDigit
 ---------------------------------------------------------------------------------
 (6) _writeDigit                                           8     7      1    1328
                                             19 COMRAM     8     7      1
                               _log2
                             _rotate
                                _spi
 ---------------------------------------------------------------------------------
 (7) _spi                                                  8     7      1     733
                                              6 COMRAM     8     7      1
                             _rotate (ARG)
                               _wait
 ---------------------------------------------------------------------------------
 (8) _wait                                                 4     0      4     214
                                              0 COMRAM     4     0      4
 ---------------------------------------------------------------------------------
 (7) _rotate                                               6     6      0     136
                                              0 COMRAM     6     6      0
 ---------------------------------------------------------------------------------
 (5) _printTemp                                           27    27      0   74645
                                             86 COMRAM     5     5      0
                                             36 BANK0     22    22      0
                           ___altoft
                            ___ftdiv
                            ___ftmul
                            ___fttol
                           ___lltoft
                          _countBits
                             _lowbit
                            _sprintf
                        _writeString
 ---------------------------------------------------------------------------------
 (6) _lowbit                                              11     7      4     261
                                              0 COMRAM    11     7      4
 ---------------------------------------------------------------------------------
 (6) ___altoft                                            10     6      4    2328
                                             50 COMRAM    10     6      4
                           ___ftpack
                            ___fttol (ARG)
 ---------------------------------------------------------------------------------
 (5) _printRTC                                             8     8      0   62752
                                             86 COMRAM     8     8      0
                            ___lwmod
                           _advState
                          _countBits
                            _sprintf
                        _writeString
 ---------------------------------------------------------------------------------
 (6) _sprintf                                             58    46     12   53889
                                             68 COMRAM    18     6     12
                                              0 BANK0     36    36      0
                            ___awdiv
                            ___ftadd
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                            ___lldiv
                            ___llmod
                           ___lltoft
                            ___lwmod (ARG)
                             ___wmul
                         __div_to_l_
                        __tdiv_to_l_
                             _fround
                            _isdigit
                              _scale
 ---------------------------------------------------------------------------------
 (7) _scale                                               10     7      3   12298
                                             35 COMRAM     7     4      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (7) _isdigit                                              3     3      0      68
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (7) _fround                                              13    10      3   12100
                                             35 COMRAM    10     7      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (7) __tdiv_to_l_                                         15     9      6     431
                                              0 COMRAM    15     9      6
 ---------------------------------------------------------------------------------
 (7) __div_to_l_                                          16    10      6     574
                                              0 COMRAM    16    10      6
 ---------------------------------------------------------------------------------
 (7) ___lltoft                                             9     5      4    2387
                                              8 COMRAM     9     5      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (7) ___lldiv                                             13     5      8     546
                                              0 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (7) ___fttol                                             15    11      4     508
                                             35 COMRAM    15    11      4
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (7) ___ftsub                                              6     0      6    4111
                                             62 COMRAM     6     0      6
                            ___ftadd
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (7) ___ftneg                                              3     0      3     109
                                              0 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (7) ___ftge                                               9     3      6     520
                                              0 COMRAM     9     3      6
 ---------------------------------------------------------------------------------
 (5) _getTemp                                             31    31      0   18924
                                             62 COMRAM    25    25      0
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                           ___lwtoft
                             ___wmul
 ---------------------------------------------------------------------------------
 (6) ___lwtoft                                             3     0      3    2404
                                              8 COMRAM     3     0      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (8) ___ftmul                                             15     9      6    4986
                                             20 COMRAM    15     9      6
                            ___awdiv (ARG)
                            ___awmod (ARG)
                           ___ftpack
                           ___lltoft (ARG)
                           ___lwtoft (ARG)
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (6) ___ftdiv                                             15     9      6    3788
                                             35 COMRAM    15     9      6
                            ___ftmul (ARG)
                           ___ftpack
                           ___lltoft (ARG)
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (8) ___ftadd                                             12     6      6    3836
                                             50 COMRAM    12     6      6
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                           ___ftpack
                             _fround (ARG)
 ---------------------------------------------------------------------------------
 (9) ___ftpack                                             8     3      5    2126
                                              0 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (5) _buttons                                              8     8      0    7425
                                             39 COMRAM     8     8      0
                            _advMenu
                           _advState
 ---------------------------------------------------------------------------------
 (6) _advState                                             5     5      0    1756
                                              6 COMRAM     5     5      0
                            ___awmod
 ---------------------------------------------------------------------------------
 (6) _advMenu                                              2     2      0    5669
                                             37 COMRAM     2     2      0
                        _clearScreen
 ---------------------------------------------------------------------------------
 (7) _clearScreen                                          0     0      0    5669
                        _writeString
 ---------------------------------------------------------------------------------
 (6) _writeString                                         10     8      2    5669
                                             27 COMRAM    10     8      2
                             ___wmul
                          _countBits
                        _getFontChar
                              _hibit
                               _log2
                          _writeChar
 ---------------------------------------------------------------------------------
 (7) _writeChar                                            7     6      1     457
                                             20 COMRAM     7     6      1
                             ___wmul (ARG)
                        _getFontChar
                               _log2
 ---------------------------------------------------------------------------------
 (7) _log2                                                 8     4      4     238
                                             11 COMRAM     8     4      4
                              _hibit (ARG)
 ---------------------------------------------------------------------------------
 (8) _getFontChar                                          5     5      0      66
                                              0 COMRAM     5     5      0
 ---------------------------------------------------------------------------------
 (7) _hibit                                               11     7      4     110
                                              0 COMRAM    11     7      4
 ---------------------------------------------------------------------------------
 (7) _countBits                                            5     1      4     474
                                              0 COMRAM     5     1      4
 ---------------------------------------------------------------------------------
 (6) _saveTime                                            10     1      9     292
                                              0 COMRAM    11     2      9
 ---------------------------------------------------------------------------------
 (6) _daysOfMonth                                          5     3      2    1494
                                              5 COMRAM     6     4      2
                            ___lwmod
 ---------------------------------------------------------------------------------
 (7) ___lwmod                                              5     1      4     671
                                              0 COMRAM     5     1      4
 ---------------------------------------------------------------------------------
 (6) _checkDST                                             6     6      0   19812
                                             33 COMRAM     7     7      0
                          _dayOfWeek
                               _tick
 ---------------------------------------------------------------------------------
 (5) _tick                                                 3     3      0    1868
                                             11 COMRAM     3     3      0
                           _checkDST
                        _daysOfMonth
                           _saveTime
 ---------------------------------------------------------------------------------
 (6) _saveTime                                            10     1      9     292
                                              0 COMRAM    11     2      9
 ---------------------------------------------------------------------------------
 (6) _daysOfMonth                                          5     3      2    1494
                                              5 COMRAM     6     4      2
                            ___lwmod
 ---------------------------------------------------------------------------------
 (6) _checkDST                                             6     6      0   19812
                                             33 COMRAM     7     7      0
                          _dayOfWeek
                               _tick
 ---------------------------------------------------------------------------------
 (7) _dayOfWeek                                           11     9      2    8026
                                             22 COMRAM    11     9      2
                            ___awdiv
                            ___awmod
                            ___llmod
                             ___wmul
 ---------------------------------------------------------------------------------
 (8) ___wmul                                               6     2      4    3359
                                             14 COMRAM     6     2      4
                            ___awdiv (ARG)
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (8) ___llmod                                              9     1      8     799
                                             13 COMRAM     9     1      8
                            ___lldiv (ARG)
 ---------------------------------------------------------------------------------
 (8) ___awmod                                              6     2      4    1756
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (8) ___awdiv                                              8     4      4    1708
                                              6 COMRAM     8     4      4
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _setup
     _initRTC
       _loadTime
     _initTemp
     _setupButtons
     _startDisp
       _setBrightness
       _setTest

 _isr (ROOT)
   _buttons
     _advMenu
       _clearScreen
         _writeString
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _countBits
           _getFontChar
           _hibit
           _log2
             _hibit (ARG)
           _writeChar
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _getFontChar (ARG)
             _log2 (ARG)
               _hibit (ARG)
     _advState
       ___awmod
   _getTemp
     ___ftadd
       ___ftdiv (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___lltoft (ARG)
             ___ftpack
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftpack (ARG)
         ___lltoft (ARG)
           ___ftpack
         ___lwtoft (ARG)
           ___ftpack
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___lltoft (ARG)
           ___ftpack
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftpack (ARG)
       _fround (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___lltoft (ARG)
             ___ftpack
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___ftdiv
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___lltoft (ARG)
           ___ftpack
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftpack (ARG)
       ___lltoft (ARG)
         ___ftpack
       ___lwtoft (ARG)
         ___ftpack
     ___ftmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___ftpack (ARG)
       ___lltoft (ARG)
         ___ftpack
       ___lwtoft (ARG)
         ___ftpack
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     ___lwtoft
       ___ftpack
     ___wmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
   _printRTC *
     ___lwmod
     _advState
       ___awmod
     _countBits
     _sprintf
       ___awdiv
         ___awmod (ARG)
       ___ftadd
         ___ftdiv (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftpack (ARG)
           ___lltoft (ARG)
             ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___lltoft (ARG)
             ___ftpack
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftpack (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftge
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___lltoft (ARG)
           ___ftpack
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftneg
       ___ftsub
         ___ftadd
           ___ftdiv (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftpack (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lltoft (ARG)
           ___ftpack
       ___fttol
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___lltoft (ARG)
             ___ftpack
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___lldiv
       ___llmod
         ___lldiv (ARG)
       ___lltoft
         ___ftpack
       ___lwmod (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       __div_to_l_ (ARG)
       __tdiv_to_l_ (ARG)
       _fround (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___lltoft (ARG)
             ___ftpack
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       _isdigit (ARG)
       _scale (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___lltoft (ARG)
             ___ftpack
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     _writeString
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       _countBits
       _getFontChar
       _hibit
       _log2
         _hibit (ARG)
       _writeChar
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _getFontChar (ARG)
         _log2 (ARG)
           _hibit (ARG)
   _printTemp *
     ___altoft
       ___ftpack
       ___fttol (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___lltoft (ARG)
             ___ftpack
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
     ___ftdiv
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___lltoft (ARG)
           ___ftpack
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftpack (ARG)
       ___lltoft (ARG)
         ___ftpack
       ___lwtoft (ARG)
         ___ftpack
     ___ftmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___ftpack (ARG)
       ___lltoft (ARG)
         ___ftpack
       ___lwtoft (ARG)
         ___ftpack
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     ___fttol
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___lltoft (ARG)
           ___ftpack
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___lltoft
       ___ftpack
     _countBits
     _lowbit
     _sprintf
       ___awdiv
         ___awmod (ARG)
       ___ftadd
         ___ftdiv (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftpack (ARG)
           ___lltoft (ARG)
             ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___lltoft (ARG)
             ___ftpack
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftpack (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftge
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___lltoft (ARG)
           ___ftpack
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftneg
       ___ftsub
         ___ftadd
           ___ftdiv (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftpack (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lltoft (ARG)
           ___ftpack
       ___fttol
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___lltoft (ARG)
             ___ftpack
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___lldiv
       ___llmod
         ___lldiv (ARG)
       ___lltoft
         ___ftpack
       ___lwmod (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       __div_to_l_ (ARG)
       __tdiv_to_l_ (ARG)
       _fround (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___lltoft (ARG)
             ___ftpack
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       _isdigit (ARG)
       _scale (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___lltoft (ARG)
             ___ftpack
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     _writeString
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       _countBits
       _getFontChar
       _hibit
       _log2
         _hibit (ARG)
       _writeChar
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _getFontChar (ARG)
         _log2 (ARG)
           _hibit (ARG)
   _tick *
     _checkDST
       _dayOfWeek
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___llmod
           ___lldiv (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     _daysOfMonth
       ___lwmod
     _saveTime
   _update *
     _spi
       _rotate (ARG)
       _wait (ARG)
     _writeDigit
       _log2
         _hibit (ARG)
       _rotate
       _spi
         _rotate (ARG)
         _wait (ARG)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM_1           400      0       0      21        0.0%
BIGRAM             3F3      0       0      22        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK2           100      0       0       9        0.0%
BANK2              100      0       0      10        0.0%
BITBANK1           100      0       0       7        0.0%
BANK1              100     16      60       8       37.5%
BITBANK3            F4      0       0      11        0.0%
BANK3               F4      0       0      12        0.0%
BITBANK0            A0      0       0       5        0.0%
BANK0               A0     48      8A       6       86.2%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     5E      5F       1      100.0%
BITSFR_4             0      0       0      40        0.0%
SFR_4                0      0       0      40        0.0%
BITSFR_3             0      0       0      40        0.0%
SFR_3                0      0       0      40        0.0%
BITSFR_2             0      0       0      40        0.0%
SFR_2                0      0       0      40        0.0%
BITSFR_1             0      0       0      40        0.0%
SFR_1                0      0       0      40        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     149       3        0.0%
DATA                 0      0     149       4        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.32 build 58300 
Symbol Table                                                                                   Sun Aug 17 17:20:01 2014

           ___altoft@exp 003B            ___altoft@sign 003C                       _GO 007E11  
                     _RD 007D30                       _WR 007D31             ___awdiv@sign 000C  
    ___wmul@multiplicand 0011             ___ftadd@exp1 003E             ___ftadd@exp2 003D  
           ___ftadd@sign 003C                      l183 34C4                      l178 33FC  
                    _GIE 007F97                      _dow 7D3E                      _isr 0008  
                    _spi 3C2C             ___awmod@sign 0006                      prod 000FF3  
                    tosl 000FFD                      wreg 000FE8              _sprintf$749 0063  
           printTemp@str 0084             __CFG_LVP$OFF 000000             ___ftdiv@cntr 002D  
           ___ftdiv@sign 0032             __CFG_WDT$OFF 000000                     l5602 3408  
                   l5620 3444                     l5612 342A                     l5630 3466  
                   l5614 3430                     l5606 3416                     l5632 3472  
                   l5624 3452                     l5608 341C                     l5640 349C  
                   l5626 3458                     l5618 343E                     l5636 3480  
                   ?_isr 0001                     l5766 43A8                     ?_spi 0007  
                   STR_1 7DA1                     STR_2 7DAC                     STR_3 7DA7  
                   STR_4 7D89                     STR_5 7D6B                     STR_6 7D5A  
                   STR_7 7D5C                     STR_8 7D7A                     STR_9 7D5C  
                   _LATA 000F89                     _LATB 000F8A                     _LATC 000F8B  
                   _IPEN 007E87                     _PEIE 007F96                     i2l43 2CC0  
                   u5921 34DC                     i2l58 1838                     i2l91 42E0  
                   u5835 4670                     u5836 4674                     i2l85 3CAC  
                   _TMR0 000FD6                     _TMR1 000FCE                     _TMR2 000FCC  
                   _WREN 007D32    __end_of_setBrightness 4644                     _date 00A8  
                   _log2 4422                     _main 438C             ___ftpack@arg 0001  
                   _menu 00BC             ___ftpack@exp 0004                     _tick 35D6  
                   _temp 00B9                     _wait 460A                     fsr0h 000FEA  
                   fsr1h 000FE2                     indf0 000FEF                     fsr0l 000FE9  
                   fsr2h 000FDA                     fsr1l 000FE1                     indf2 000FDF  
                   fsr2l 000FD9                     pclat 000FFA                     prodh 000FF4  
                   prodl 000FF3                     start 0018             _sprintf$1314 0060  
          __CFG_MCLRE$ON 000000             ___ftmul@cntr 0022           writeString@cnt 0025  
           ___ftmul@sign 0023            printTemp@bits 0097             ___fttol@exp1 0032  
           ___fttol@lval 002E                    ??_isr 009A                    ??_spi 0008  
          __CFG_PLLDIV$4 000000                    ?_log2 000C                    ?_main 0157  
        __end_of___awdiv 3C2C                    _ADRES 000FC3                    _EEADR 000FA9  
        __end_of___ftadd 3034                    STR_10 7D7F                    STR_11 7D7F  
                  STR_12 7D7F                    STR_13 7DA2                    STR_14 7D9D  
                  STR_15 7DB5                    STR_16 7DB9                    ?_tick 0001  
                  STR_17 7DBC                    STR_18 7DB1                    STR_19 7D96  
        __end_of___awmod 3E78                    ?_wait 0001          __end_of___ftdiv 395E  
        __end_of___ftneg 45A0          __end_of___lldiv 4010          __end_of___ftmul 37A6  
                  _T0CON 000FD5          ___awdiv@divisor 0009                    _T1CON 000FCD  
        __end_of___llmod 41CE          __end_of___ftsub 4524          __end_of___fttol 3A32  
                  _T2CON 000FCA                    _LATA1 007C49                    _LATA3 007C4B  
                  _LATC0 007C58                    _LATA4 007C4C                    _LATA5 007C4D  
                  _LATC6 007C5E                    _LATC7 007C5F           __CFG_DEBUG$OFF 000000  
                  i2l200 409C          __end_of___lwmod 44EE                    i2l202 40A2  
                  i2l203 40A8                    i2l204 40AE                    i2l221 3ADE  
                  i2l206 40B4                    i2l207 40EE                    i2l119 2630  
                  i2l208 40EC                    i2l241 35D4                    i2l270 2DAA  
                  i2l510 4440                    i2l271 2DB6                    i2l263 2D56  
                  i2l327 1C3C                    i2l264 2D62                    i2l273 2DDA  
                  i2l265 2D6E                    i2l266 2D7A                    i2l258 36C0  
                  i2l442 13E6                    i2l267 2D86                    i2l268 2D92  
                  i2l372 2078                    i2l269 2D9E                    i2l197 4096  
                  i2l294 1C10                    i2l708 0B3A                    i2l653 2022  
                  i2l494 41EC                    i2l488 456A                    i2l748 09A2  
        ___awdiv@counter 000B          __end_of_advMenu 3F8E                    _PORTB 000F81  
          __CFG_USBDIV$2 000000                    _TRISA 000F92                    _TRISB 000F93  
                  _TRISC 000F94            __CFG_PWRT$OFF 000000              _writeString 2382  
           ___lltoft@exp 0011          __end_of_getTemp 2382                    _nRBPU 007F8F  
        __end_of_initRTC 438C                    _hibit 41CE          __end_of_dpowers 7CC8  
                  _pow10 7CC8                    _scale 1C56          __end_of_isdigit 460A  
        __end_of_buttons 13E8            ___ftpack@sign 0005                    _setup 3E78  
        __end_of_setTest 467A                    pclath 000FFA                    tablat 000FF5  
                  plusw2 000FDB                    status 000FD8          __end_of_sprintf 0EC8  
   __size_of_clearScreen 0010          __initialization 4468          writeString@bits 0022  
           __end_of_log2 4468             __end_of_main 43DA             __end_of_tick 36C2  
           __end_of_wait 4628     __size_of_daysOfMonth 00AE           printTemp@units 0098  
                 ??_log2 0010                   ??_main 015C            ___fttol@sign1 002D  
                 ??_tick 000C                   ??_wait 0005            __activetblptr 000002  
   __size_of_getFontChar 0220     __size_of__tdiv_to_l_ 0100                   ?_hibit 0001  
                 _ADCON0 000FC2                   _ADCON1 000FC1                   _ADCON2 000FC0  
       __end_of___altoft 3D58         ___llmod@dividend 000E                   ?_scale 0024  
                 _EEDATA 000FA8                   _EECON1 000FA6                   _EECON2 000FA7  
            loadTime@cnt 014C         ___awdiv@dividend 0007                   ?_setup 0001  
       __end_of___ftpack 3B88         __end_of___lltoft 428A                   i2l1113 3B86  
                 i2l1150 2ECE                   i2l1214 37A4                   i2l1151 3032  
                 i2l1208 3DE6                   i2l1224 4592                   i2l1072 32F2  
                 i2l1081 32E2                   i2l1154 2EFA                   i2l1234 3A30  
                 i2l1165 2FA6                   i2l1174 2FC2                   i2l1182 395C  
                 i2l1190 33F2                   i2l1351 44E4                   i2l1192 3362  
                 i2l1185 392C                   i2l1193 338A                   i2l1278 3FFE  
                 i2l1199 33E2                   i2l1288 41BC                   i2l4104 35F8  
                 i2l4200 1F50                   i2l4114 3616                   i2l4018 4334  
                 i2l4140 3676                   i2l4132 365A                   i2l4124 3634  
                 i2l5012 38C8                   i2l4142 367E                   i2l5006 38A2  
                 i2l4310 3288                   i2l4302 3258                   i2l4206 2000  
                 i2l5110 1852                   i2l4080 2D4A                   i2l4144 36A4  
                 i2l5032 3906                   i2l5200 202A                   i2l4400 3A0A  
                 i2l4320 32AA                   i2l4160 276C                   i2l5120 1936  
                 i2l5112 188E                   i2l3530 2AD6                   i2l3522 2AAA  
                 i2l3610 3B3C                   i2l3602 3AFE                   i2l4330 32D2  
                 i2l4234 3328                   i2l4218 4602                   i2l5130 19EC  
                 i2l5114 18D4                   i2l3612 3B5A                   i2l3604 3B08  
                 i2l4404 3A20                   i2l4332 32DE                   i2l4324 32BA  
                 i2l4228 330E                   i2l4500 0102                   i2l5132 1A32  
                 i2l5140 1A68                   i2l5116 1906                   i2l5124 193C  
                 i2l5060 13FC                   i2l4086 2DE8                   i2l3710 40E0  
                 i2l3542 2AE2                   i2l3534 2ADA                   i2l3526 2AD2  
                 i2l3518 2AA6                   i2l5310 12A4                   i2l3614 3B64  
                 i2l3606 3B26                   i2l4414 3FB0                   i2l4262 33AA  
                 i2l4182 1D7E                   i2l5150 1B04                   i2l5142 1A80  
                 i2l5134 1A38                   i2l5126 1954                   i2l5118 190C  
                 i2l5070 1472                   i2l5062 1430                   i2l4088 2E32  
                 i2l4096 35E2                   i2l3640 44DA                   i2l3632 44BA  
                 i2l3720 3A36                   i2l3560 2AEE                   i2l5304 1212  
                 i2l3800 2FA0                   i2l5216 21A8                   i2l4344 3D88  
                 i2l4416 3FBC                   i2l4432 4234                   i2l4272 33D2  
                 i2l4168 282C                   i2l4192 1E30                   i2l4520 018A  
                 i2l5160 1B46                   i2l5144 1AAA                   i2l5136 1A62  
                 i2l5128 1986                   i2l5064 1440                   i2l3634 44C2  
                 i2l3554 2AEA                   i2l3546 2AE6                   i2l3538 2ADE  
                 i2l5322 13C8                   i2l4354 3DE4                   i2l4426 3FF0  
                 i2l4418 3FC0                   i2l4434 4240                   i2l4282 31EA  
                 i2l4274 33DE                   i2l4266 33BA                   i2l4522 0198  
                 i2l5162 1B52                   i2l5146 1AD4                   i2l5154 1B0A  
                 i2l5066 1450                   i2l5074 1488                   i2l3900 3C0A  
                 i2l3636 44C6                   i2l3740 3A8E                   i2l3724 3A3A  
                 i2l3708 40BA                   i2l3564 4434                   i2l5316 1336  
                 i2l5228 22E2                   i2l4348 3DB8                   i2l4188 1E22  
                 i2l4700 084C                   i2l4620 051C                   i2l4604 045E  
                 i2l4532 01FA                   i2l4508 0138                   i2l5164 1B7C  
                 i2l5172 1BB2                   i2l5156 1B1C                   i2l5148 1ADA  
                 i2l5068 1460                   i2l5076 1808                   i2l3734 3A8A  
                 i2l3574 455A                   i2l3582 41E0                   i2l3662 23EE  
                 i2l3806 2FDE                   i2l4390 39E2                   i2l4702 0864  
                 i2l4550 028E                   i2l4534 0200                   i2l4526 01D2  
                 i2l5254 2924                   i2l5174 1BBE                   i2l5166 1B82  
                 i2l3904 3C14                   i2l3920 3E0C                   i2l3728 3A3E  
                 i2l3744 3A92                   i2l3816 300E                   i2l3832 3702  
                 i2l4368 3978                   i2l4288 3216                   i2l4632 05AA  
                 i2l4560 02DC                   i2l4544 023C                   i2l4536 0206  
                 i2l4528 01E8                   i2l4480 004C                   i2l5256 2934  
                 i2l5168 1BAC                   i2l5432 30EA                   i2l3930 3E3E  
                 i2l3682 252A                   i2l3690 262A                   i2l3666 2428  
                 i2l3658 23EA                   i2l5290 10CC                   i2l5282 1036  
                 i2l5274 0F82                   i2l3850 3744                   i2l3826 36DC  
                 i2l4386 39D2                   i2l4562 02EA                   i2l4546 024A  
                 i2l4482 0066                   i2l4474 002C                   i2l5178 1BD8  
                 i2l5434 30EC                   i2l3908 3C22                   i2l3932 3E42  
                 i2l3940 3E60                   i2l3924 3E28                   i2l3692 262C  
                 i2l3780 2F38                   i2l3764 2F08                   i2l3860 376C  
                 i2l4396 39FA                   i2l4812 0C9C                   i2l4804 0C48  
                 i2l4732 0972                   i2l4716 08B6                   i2l4724 094C  
                 i2l4708 087C                   i2l4660 06EE                   i2l4644 0656  
                 i2l4636 05F0                   i2l4628 0584                   i2l4580 037A  
                 i2l4556 02B4                   i2l4548 0250                   i2l4492 00A0  
                 i2l3686 25C6                   i2l3598 3AF0                   i2l3790 2F6C  
                 i2l3758 2EDC                   i2l3846 3734                   i2l4398 3A06  
                 i2l4830 0D3A                   i2l4750 0A24                   i2l4726 095A  
                 i2l4574 0348                   i2l4566 02FA                   i2l4486 006E  
                 i2l3944 3E6E                   i2l3936 3E56                   i2l3928 3E36  
                 i2l3960 41AE                   i2l3952 417A                   i2l3688 2628  
                 i2l3792 2F74                   i2l3856 375C                   i2l4840 0D74  
                 i2l4832 0D46                   i2l4824 0CFA                   i2l4808 0C6C  
                 i2l4760 0B08                   i2l4664 0756                   i2l4648 067C  
                 i2l4576 0360                   i2l4568 0310                   i2l3696 460A  
                 i2l5464 3180                   i2l5448 3126                   i2l3890 3BEA  
                 i2l3882 3BCC                   i2l3954 4186                   i2l4922 35BC  
                 i2l4914 3584                   i2l5298 1180                   i2l3786 2F5A  
                 i2l4850 0DA4                   i2l4826 0D06                   i2l4818 0CC6  
                 i2l4762 0B16                   i2l4746 09D2                   i2l4738 09A6  
                 i2l4682 07E4                   i2l4594 03FA                   i2l4586 0398  
                 i2l5466 3182                   i2l3892 3BEE                   i2l3876 3BAC  
                 i2l3956 418A                   i2l3788 2F64                   i2l4588 03DE  
                 i2l5900 1800                   i2l4926 35CA                   i2l3798 2F96  
                 i2l4862 0DEC                   i2l4790 0BFC                   i2l4774 0B64  
                 i2l4694 0834                   i2l4686 0804                   i2l4678 07A2  
                 i2l4870 0E9E                   i2l3888 3BE2                   i2l4856 0DC6  
                 i2l4848 0D9A                   i2l4784 0BDE                   i2l4768 0B2E  
                 i2l4872 0EBA                   i2l4868 0E8A                   i2l4956 4122  
                 u330_41 2E98                   i2l4974 3F2E                   i2l4992 3D02  
                 i2l4978 3F58                   i2l4994 3D0E                   i2l5890 14D4  
                 i2l5892 17D8                   u331_41 2EAC                   i2l5894 17E2  
                 i2l5896 17EC                   i2l5898 17F6                   u351_41 36D2  
                 u407_41 3304                   u353_41 36EC                   u409_41 331E  
       __end_of___lwtoft 45EA                   u531_41 3898                   u533_41 38B2  
                 u429_41 396E         daysOfMonth@month 000B                   _TMR0IE 007F95  
                 _TMR0IF 007F92                   _TMR1IE 007CE8                   _TMR1IF 007CF0  
                 _TMR2IE 007CE9                   _TMR2IF 007CF1                   _TMR0ON 007EAF  
                 _TMR1ON 007E68                   _TMR2ON 007E52         __end_of_checkDST 35D6  
                 _TRISA0 007C90                   _TRISA1 007C91                   _TRISA2 007C92  
                 _TRISA3 007C93                   _TRISA4 007C94         __end_of_advState 3888  
           _checkDST$309 0028            dayOfWeek@year 001D         __end_of__powers_ 7D3E  
       __end_of_lcd_font 7CA0                   ___ftge 3D58                   ___wmul 45A0  
              ??___awdiv 000B                ??___ftadd 0039                ??___awmod 0005  
              ??___ftdiv 002A                ??___ftneg 0004                ??___lldiv 0009  
              ??___ftmul 001B                ??___llmod 0016                ??___ftsub 0045  
              ??___fttol 0028                ??___lwmod 0005         __end_of_loadTime 34E6  
              ??_advMenu 0026         __end_of_initTemp 4552                   _fround 2632  
                 clear_0 446E                   clear_1 447A         ___awdiv@quotient 000D  
        ___awmod@divisor 0003                   _screen 00D3                   _lowbit 40FE  
        ___awmod@counter 0005                   hibit@x 0001                ??_getTemp 003F  
                 _update 13E8                   _rotate 42E2         __end_of_saveTime 40FE  
  ___ftmul@f3_as_product 001F                ??_initRTC 0157                ??_isdigit 0001  
              ??_buttons 0028             countBits@ret 0005             countBits@num 0001  
       __end_of_printRTC 1C56                   spi@cnt 000E             __mediumconst 7C74  
              ??_setTest 014A                   tblptrh 000FF7                   tblptrl 000FF6  
                 tblptru 000FF8                ??_sprintf 0051               __accesstop 0060  
__end_of__initialization 44A2               ___altoft@c 0033          __CFG_PBADEN$OFF 000000  
             ___ftadd@f1 0033               ___ftadd@f2 0036               ___ftge@ff1 0001  
             ___ftge@ff2 0004               ___ftdiv@f1 0024               ___ftdiv@f2 0027  
             ___ftdiv@f3 002E               ___ftneg@f1 0001               ___ftmul@f1 0015  
             ___ftmul@f2 0018               ___ftsub@f1 003F               ___ftsub@f2 0042  
             ___fttol@f1 0024           __pcstackCOMRAM 0001             __pidataBANK1 4644  
     __size_of_dayOfWeek 01C6               ___lltoft@c 0009            __end_of_hibit 422E  
          __end_of_pow10 7CF0            __end_of_scale 2024            __end_of_setup 3F06  
             ___lwtoft@c 0009          printTemp@digits 0099               __div_to_l_ 31BE  
                ??_hibit 0005          __div_to_l_@exp1 0010          __div_to_l_@cntr 000F  
           sprintf@integ 006F                  ??_scale 0027          __div_to_l_@quot 000B  
           sprintf@width 007B                  ??_setup 0157               __pbssBANK0 00A8  
             __pbssBANK1 0100       __size_of_countBits 0028            __div_to_l_@f1 0001  
          __div_to_l_@f2 0004                  ?___ftge 0001                  ?___wmul 000F  
              ?___altoft 0033                  ?_fround 0024             loadTime@data 0156  
              ?___ftpack 0001                  ?_lowbit 0001                ?___lltoft 0009  
                ?_update 0001                  ?_rotate 0001                ?___lwtoft 0009  
            saveTime@cnt 000B                ?_checkDST 0001                ?_advState 0001  
           ?_writeString 001C       __size_of_printTemp 0236       __size_of_startDisp 007E  
      __end_of_dayOfWeek 2E88             _getTemp$1307 004E             _getTemp$1308 0051  
           _getTemp$1309 0048                ?_loadTime 0001                ?_initTemp 0001  
     __size_of_writeChar 0048                ?_saveTime 0001        __end_of__npowers_ 7D17  
                __Hparam 0000           dayOfWeek@month 0017               _scale$1313 0027  
                __Lparam 0000                ?_printRTC 0001          __size_of___ftge 0090  
                ___awdiv 3B88                  ___ftadd 2E88                  ___awmod 3DE8  
                ___ftdiv 3888                  ___ftneg 457A                  ___lldiv 3F8E  
        __size_of___wmul 0026                  ___ftmul 36C2                  ___llmod 4168  
                ___ftsub 44EE                  ___fttol 395E                  ___lwmod 44AC  
                _advMenu 3F06               ??___altoft 0037        __end_of_countBits 457A  
                __pcinit 4468               ??___ftpack 0006          __size_of_fround 023A  
                __ramtop 0800               ??___lltoft 000D          __size_of_lowbit 006A  
                _getTemp 2024                  __ptext0 438C                  __ptext1 3E78  
                __ptext2 4010                  __ptext3 4660                  __ptext4 4628  
                __ptext5 468A                  __ptext6 4524                  __ptext7 4338  
                __ptext8 33F4          __size_of_update 0452          __size_of_rotate 0056  
             ??___lwtoft 000C                  _oldLATB 005F   __size_of_setBrightness 001C  
            ?__div_to_l_ 0001                  _initRTC 4338                  _dpowers 7CA0  
             ??_checkDST 0022               ??_advState 0007                  _isdigit 45EA  
           __size_of_isr 31B6                  _buttons 0EC8             __size_of_spi 009C  
       ___awmod@dividend 0001                  _setTest 4660                  _waitCnt 0100  
                _rtcMenu 00E5                  _waitcnt 00B5                  log2@num 000C  
                main@cnt 015C                  _sprintf 001C           __pintcode_body 3034  
   end_of_initialization 44A2               ??_loadTime 014A            _tmr0BigCounts 00B1  
             ??_initTemp 014A               _tmr2_count 00C2            __Lmediumconst 7C74  
                int_func 3034            ??_clearScreen 0026             writeChar@dig 001A  
                tick@ret 000E                  tick@val 000C                  spi@addr 000D  
                spi@data 0007          ___lldiv@divisor 0005               ??_saveTime 000A  
                lowbit@x 0001                  spi@send 000B          ___lldiv@counter 000D  
      __end_of_printTemp 2AA2            ??_daysOfMonth 0008               ??_printRTC 0057  
                postdec1 000FE5                  postdec2 000FDD                  postinc0 000FEE  
                postinc1 000FE6                  postinc2 000FDE            ?_setupButtons 0001  
      __end_of_startDisp 408E           __tdiv_to_l_@f1 0001           __tdiv_to_l_@f2 0004  
          ??_getFontChar 0001            ??__tdiv_to_l_ 0007               getTemp@cnt 0057  
             getTemp@tmp 0054        __end_of_writeChar 4422              printRTC@cnt 005C  
            printRTC@str 00C4             writeString@i 0024              ___ftdiv@exp 0031  
          _setBrightness 4628      __size_of__div_to_l_ 0136              ___ftmul@exp 001E  
         ??_setupButtons 014A      __end_of_clearScreen 468A        writeString@digits 0023  
             _writeDigit 428A           __end_of___ftge 3DE8           __end_of___wmul 45C6  
      writeString@string 001C           __end_of_fround 286C      __end_of_daysOfMonth 3AE0  
         __end_of_lowbit 4168           __end_of_update 183A           __end_of_rotate 4338  
    start_initialization 4468            lowbit@log2Val 0008      __end_of_getFontChar 2CC2  
    __end_of__tdiv_to_l_ 33F4              __end_of_dow 7D5A              __end_of_isr 31BE  
            __end_of_spi 3CC8     __size_of_writeString 02B0           ?_setBrightness 0001  
        ___llmod@divisor 0012          ___llmod@counter 0016          daysOfMonth@year 0006  
           dayOfWeek@day 0018             dayOfWeek@tmp 001E                 ??___ftge 0007  
               ??___wmul 0013            sprintf@vd_751 006B              __pdataBANK1 012F  
               ??_fround 0027                 ??_lowbit 0005                 ??_update 001C  
               ??_rotate 0001        __size_of___altoft 0090               fround@prec 002D  
      __size_of___ftpack 00A8        __size_of___lltoft 005C              __pbssCOMRAM 005F  
      __size_of___lwtoft 0024            __pcstackBANK0 0060            __pcstackBANK1 014A  
      __size_of_checkDST 00F0      __end_of__stringdata 7DBF        __size_of_advState 00E2  
           _isdigit$1032 0002              sprintf@_val 0080              sprintf@flag 0076  
            sprintf@fval 0078              sprintf@prec 007D                _dayOfWeek 2CC2  
              __pnvBANK0 00E5              _clearScreen 467A        __size_of_loadTime 00F2  
      __size_of_initTemp 002E                __pintcode 0008            __pmediumconst 7C74  
      __size_of_saveTime 0070              _daysOfMonth 3A32                 ?___awdiv 0007  
               ?___ftadd 0033                 ?___awmod 0001                 ?___ftdiv 0024  
            ?_writeDigit 0014                 ?___ftneg 0001                 ?___lldiv 0001  
               ?___ftmul 0015                 ?___llmod 000E                 ?___ftsub 003F  
              __npowers_ 7CF0                 ?___fttol 0024                 ?___lwmod 0001  
               ?_advMenu 0001      getTemp@oldTempsTemp 003F        __size_of_printRTC 041C  
             tick@save_t 000D              _getFontChar 2AA2              __tdiv_to_l_ 32F4  
               ?_getTemp 0001             ??__div_to_l_ 0007                 ?_initRTC 0001  
              _countBits 4552                 ?_isdigit 0001                 ?_buttons 0001  
        _rtc_small_ticks 00C0                 ?_setTest 0001     __end_of_setupButtons 4694  
         __size_of_hibit 0060                 ?_sprintf 0045           __size_of_scale 03CE  
        ??_setBrightness 014A           __size_of_setup 008E             saveTime@date 0001  
         ___wmul@product 0013               ?_dayOfWeek 0017            getFontChar@ch 0005  
            writeChar@ch 0015                 i2u310_44 2438                 i2u310_45 2434  
               i2u312_40 2486                 i2u312_47 247C                 i2u321_40 260C  
               i2u321_47 2602                 i2u314_40 24D2                 i2u322_44 261E  
               i2u322_45 261A                 i2u314_47 24C8                 i2u307_44 23BE  
               i2u307_45 23B8                 i2u316_44 2516                 i2u316_45 2510  
               i2u317_40 2570                 i2u317_47 2566                 i2u414_40 33C0  
               i2u319_40 25C0                 i2u431_40 3996                 i2u423_40 32C0  
               i2u431_45 398E                 i2u319_47 25B6                 i2u416_40 31DC  
               i2u416_45 31D2                 i2u521_45 3826       __end_of__div_to_l_ 32F4  
               i2u354_40 36F4                 i2u434_40 39E8                 i2u418_40 3208  
               i2u418_45 31FE                 i2u451_40 0288                 i2u451_47 027E  
               i2u524_44 4150                 i2u540_44 149C                 i2u524_45 414A  
               i2u540_45 1496                 i2u373_44 3C68                 i2u541_44 181C  
               i2u525_45 3F1C                 i2u461_45 0438                 i2u373_45 3C62  
               i2u541_45 1816                 i2u518_40 35A6                 i2u534_40 38BA  
               i2u526_45 3F44                 i2u374_45 3C74                 i2u518_46 35A8  
               i2u374_46 3C7A                 i2u527_40 3F8A                 i2u463_40 04AA  
               i2u295_44 4216                 i2u295_45 4210                 i2u527_45 3F82  
               i2u463_45 04A0                 i2u528_45 3F8C                 i2u560_45 1132  
               i2u457_40 033C                 i2u553_45 0F42                 i2u529_45 3CE8  
               i2u457_47 0332                 i2u378_44 4318                 i2u538_44 1424  
               i2u562_45 11E6                 i2u554_45 0F7C                 i2u490_45 0BB6  
               i2u378_45 4314                 i2u538_45 1420                 i2u554_46 0F82  
               i2u539_40 147C                 i2u379_44 4328                 i2u379_45 4324  
               i2u539_46 147E                 i2u564_45 1278                 i2u556_45 0FE8  
               i2u397_41 36B4                 i2u566_45 130A                 i2u558_45 109C  
               i2u568_45 139C                 i2u576_48 30C0                 i2u576_49 30E8  
        writeDigit@digit 0019                _printTemp 286C                _startDisp 4010  
            __stringdata 7D5A        ___wmul@multiplier 000F               ?_countBits 0001  
           setTest@state 014A                _writeChar 43DA                copy_data0 4496  
    __size_of_writeDigit 0058           _printTemp$1310 0093          writeFloat@F5135 0120  
               __Hrparam 0000                 __Lrparam 0000          loadTime@newDate 014D  
             ?_printTemp 0001         __size_of___awdiv 00A4         __size_of___ftadd 01AC  
       __size_of___awmod 0090         __size_of___ftdiv 00D6         __size_of___ftneg 0026  
       __size_of___lldiv 0082                 ___altoft 3CC8         __size_of___ftmul 00E4  
       __size_of___llmod 0066         __size_of___ftsub 0036         __size_of___fttol 00D4  
       __size_of___lwmod 0042                 ___ftpack 3AE0         __size_of_advMenu 0088  
            _fround$1311 002A              _fround$1312 0027                 ___lltoft 422E  
             ?_startDisp 0001                 ___lwtoft 45C6         __size_of_getTemp 035E  
               _checkDST 34E6                 _advState 37A6               sprintf@exp 0074  
       __size_of_initRTC 0054         __size_of_isdigit 0020         __size_of_buttons 0520  
         writeChar@digit 001B         __size_of_setTest 001A               ?_writeChar 0015  
               __ptext10 13E8                 __ptext11 428A                 __ptext20 1C56  
               __ptext12 3C2C                 __ptext21 45EA                 __ptext13 460A  
               __ptext30 3D58                 __ptext22 2632                 __ptext14 42E2  
               __ptext31 2024                 __ptext23 32F4                 __ptext15 183A  
               __ptext40 467A                 __ptext32 45C6                 __ptext24 31BE  
               __ptext16 286C                 __ptext41 2382                 __ptext33 36C2  
               __ptext25 422E                 __ptext17 40FE                 __ptext50 34E6  
               __ptext42 43DA                 __ptext34 3888                 __ptext26 3F8E  
               __ptext18 3CC8                 __ptext51 35D6                 __ptext43 4422  
               __ptext35 2E88                 __ptext27 395E                 __ptext19 001C  
               __ptext52 2CC2                 __ptext44 2AA2                 __ptext36 3AE0  
               __ptext28 44EE                 __ptext53 45A0                 __ptext45 41CE  
               __ptext37 0EC8                 __ptext29 457A                 __ptext54 4168  
               __ptext46 4552                 __ptext38 37A6                 __ptext55 3DE8  
               __ptext47 408E                 __ptext39 3F06                 __ptext56 3B88  
               __ptext48 3A32                 __ptext57 0000                 __ptext49 44AC  
               __powers_ 7D17                 _lcd_font 7C75         __size_of_sprintf 0EAC  
          _rtc_big_ticks 00BE                 _loadTime 33F4                 _initTemp 4524  
              wait@count 0001            __size_of_log2 0046            __size_of_main 004E  
            ??_dayOfWeek 0019                 _oldTemps 013E            __size_of_tick 00EC  
          __size_of_wait 001E                 _saveTime 408E                 _tempMenu 00E0  
               _printRTC 183A           writeDigit@segs 0014                printRTC@i 005E  
               main@argc 0157                 main@argv 0159    __CFG_CPUDIV$OSC3_PLL4 000000  
              update@cnt 0021    __size_of_setupButtons 000A              ??_countBits 0005  
              rotate@cnt 0006            ??_writeString 001E                rotate@seg 0004  
              rotate@ret 0005                 isdigit@c 0003                 scale@scl 002A  
               intlevel2 0000                sprintf@ap 0072         __tdiv_to_l_@exp1 000F  
              sprintf@vd 0067                sprintf@sp 0045         __tdiv_to_l_@cntr 000E  
       __tdiv_to_l_@quot 000A         ___lwmod@dividend 0001         ___lldiv@dividend 0001  
           ?_clearScreen 0001            writeDigit@dig 001A            writeDigit@cnt 001B  
         writeLong@F5131 012F           printRTC@digits 005D             getTemp@total 004B  
           ?_daysOfMonth 0006             ??_writeDigit 0015             _setupButtons 468A  
            ??_printTemp 0057             ?_getFontChar 0001      setBrightness@bright 014A  
           ?__tdiv_to_l_ 0001              ??_startDisp 014B                 sprintf@c 007F  
               sprintf@f 0047         ___lldiv@quotient 0009          ___lwmod@divisor 0003  
        ___lwmod@counter 0005              ??_writeChar 0016              log2@log2Val 0010  
    __end_of_writeString 2632       __CFG_FOSC$HSPLL_HS 000000       __end_of_writeDigit 42E2  
           printRTC@bits 005B             hibit@log2Val 0008  
