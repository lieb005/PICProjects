

Microchip Technology PIC18 LITE Macro Assembler V1.20 build 52243 
                                                                                               Sun Nov 17 18:06:41 2013

Microchip Technology Omniscient Code Generator (Lite mode) build 52243
     1                           	processor	18F2550
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataBANK0,global,class=CODE,delta=1
     6                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1
     7                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	nvBANK1,global,class=BANK1,space=1,delta=1
     9                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    10                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    13                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    14                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    15                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    16                           	psect	text0,global,reloc=2,class=CODE,delta=1
    17                           	psect	text1,global,reloc=2,class=CODE,delta=1
    18                           	psect	text2,global,reloc=2,class=CODE,delta=1
    19                           	psect	text3,global,reloc=2,class=CODE,delta=1
    20                           	psect	text4,global,reloc=2,class=CODE,delta=1
    21                           	psect	text5,global,reloc=2,class=CODE,delta=1
    22                           	psect	text6,global,reloc=2,class=CODE,delta=1
    23                           	psect	text7,global,reloc=2,class=CODE,delta=1
    24                           	psect	text8,global,reloc=2,class=CODE,delta=1
    25                           	psect	text9,global,reloc=2,class=CODE,delta=1
    26                           	psect	text10,global,reloc=2,class=CODE,delta=1
    27                           	psect	text11,global,reloc=2,class=CODE,delta=1
    28                           	psect	text12,global,reloc=2,class=CODE,delta=1
    29                           	psect	text13,global,reloc=2,class=CODE,delta=1
    30                           	psect	text14,global,reloc=2,class=CODE,delta=1
    31                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    32                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    33                           	psect	text16,global,reloc=2,class=CODE,delta=1
    34                           	psect	text17,global,reloc=2,class=CODE,delta=1
    35                           	psect	text18,global,reloc=2,class=CODE,delta=1
    36                           	psect	text19,global,reloc=2,class=CODE,delta=1
    37                           	psect	text20,global,reloc=2,class=CODE,delta=1
    38                           	psect	text21,global,reloc=2,class=CODE,delta=1
    39                           	psect	text22,global,reloc=2,class=CODE,delta=1
    40                           	psect	text23,global,reloc=2,class=CODE,delta=1
    41                           	psect	text24,global,reloc=2,class=CODE,delta=1
    42                           	psect	text25,global,reloc=2,class=CODE,delta=1
    43                           	psect	text26,global,reloc=2,class=CODE,delta=1
    44                           	psect	text27,global,reloc=2,class=CODE,delta=1
    45                           	psect	text28,global,reloc=2,class=CODE,delta=1
    46                           	psect	text29,global,reloc=2,class=CODE,delta=1
    47                           	psect	text30,global,reloc=2,class=CODE,delta=1
    48                           	psect	text31,global,reloc=2,class=CODE,delta=1
    49                           	psect	text32,global,reloc=2,class=CODE,delta=1
    50                           	psect	text33,global,reloc=2,class=CODE,delta=1
    51                           	psect	text34,global,reloc=2,class=CODE,delta=1
    52                           	psect	text35,global,reloc=2,class=CODE,delta=1
    53                           	psect	text36,global,reloc=2,class=CODE,delta=1
    54                           	psect	text37,global,reloc=2,class=CODE,delta=1
    55                           	psect	text38,global,reloc=2,class=CODE,delta=1
    56                           	psect	text39,global,reloc=2,class=CODE,delta=1
    57                           	psect	text40,global,reloc=2,class=CODE,delta=1
    58                           	psect	text41,global,reloc=2,class=CODE,delta=1
    59                           	psect	text42,global,reloc=2,class=CODE,delta=1
    60                           	psect	text43,global,reloc=2,class=CODE,delta=1
    61                           	psect	text44,global,reloc=2,class=CODE,delta=1
    62                           	psect	text45,global,reloc=2,class=CODE,delta=1
    63                           	psect	text46,global,reloc=2,class=CODE,delta=1
    64                           	psect	text47,global,reloc=2,class=CODE,delta=1
    65                           	psect	text48,global,reloc=2,class=CODE,delta=1
    66                           	psect	text49,global,reloc=2,class=CODE,delta=1
    67                           	psect	text50,global,reloc=2,class=CODE,delta=1
    68                           	psect	text51,global,reloc=2,class=CODE,delta=1
    69                           	psect	text52,global,reloc=2,class=CODE,delta=1
    70                           	psect	text53,global,reloc=2,class=CODE,delta=1
    71                           	psect	text54,global,reloc=2,class=CODE,delta=1
    72                           	psect	text55,global,reloc=2,class=CODE,delta=1
    73                           	psect	text56,global,reloc=2,class=CODE,delta=1
    74                           	psect	text57,global,reloc=2,class=CODE,delta=1
    75                           	psect	text58,global,reloc=2,class=CODE,delta=1
    76                           	psect	text59,global,reloc=2,class=CODE,delta=1
    77                           	psect	text60,global,reloc=2,class=CODE,delta=1
    78                           	psect	text61,global,reloc=2,class=CODE,delta=1
    79                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    80                           	psect	text62,global,reloc=2,class=CODE,delta=1
    81                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    82  0000                     
    83                           	psect	idataBANK0
    84  0047EC                     __pidataBANK0:
    85                           	opt stack 0
    86                           
    87                           ;initializer for _dow
    88  0047EC  7FF3               	dw	STR_1& (0+65535)
    89  0047EE  7FEF               	dw	STR_2& (0+65535)
    90  0047F0  7FDF               	dw	STR_3& (0+65535)
    91  0047F2  7FF7               	dw	STR_4& (0+65535)
    92  0047F4  7FEB               	dw	STR_5& (0+65535)
    93  0047F6  7FE3               	dw	STR_6& (0+65535)
    94  0047F8  7FE7               	dw	STR_7& (0+65535)
    95                           
    96                           ;initializer for writeLong@F5021
    97  0047FA  30                 	db	48
    98  0047FB  30                 	db	48
    99  0047FC  30                 	db	48
   100  0047FD  30                 	db	48
   101  0047FE  30                 	db	48
   102  0047FF  30                 	db	48
   103  004800  30                 	db	48
   104  004801  30                 	db	48
   105  004802  00                 	db	0
   106                           
   107                           	psect	mediumconst
   108  007EBA                     __pmediumconst:
   109                           	opt stack 0
   110  007EBA                     _lcd_font:
   111                           	opt stack 0
   112  007EBA  3F                 	db	63
   113  007EBB  06                 	db	6
   114  007EBC  5B                 	db	91
   115  007EBD  4F                 	db	79
   116  007EBE  66                 	db	102
   117  007EBF  6D                 	db	109
   118  007EC0  7C                 	db	124
   119  007EC1  07                 	db	7
   120  007EC2  7F                 	db	127
   121  007EC3  67                 	db	103
   122  007EC4  00                 	db	0
   123  007EC5  00                 	db	0
   124  007EC6  61                 	db	97
   125  007EC7  48                 	db	72
   126  007EC8  00                 	db	0
   127  007EC9  53                 	db	83
   128  007ECA  00                 	db	0
   129  007ECB  77                 	db	119
   130  007ECC  7C                 	db	124
   131  007ECD  58                 	db	88
   132  007ECE  5E                 	db	94
   133  007ECF  79                 	db	121
   134  007ED0  71                 	db	113
   135  007ED1  6F                 	db	111
   136  007ED2  74                 	db	116
   137  007ED3  10                 	db	16
   138  007ED4  0F                 	db	15
   139  007ED5  68                 	db	104
   140  007ED6  38                 	db	56
   141  007ED7  37                 	db	55
   142  007ED8  54                 	db	84
   143  007ED9  5C                 	db	92
   144  007EDA  73                 	db	115
   145  007EDB  67                 	db	103
   146  007EDC  50                 	db	80
   147  007EDD  6D                 	db	109
   148  007EDE  78                 	db	120
   149  007EDF  1C                 	db	28
   150  007EE0  1C                 	db	28
   151  007EE1  7E                 	db	126
   152  007EE2  76                 	db	118
   153  007EE3  6E                 	db	110
   154  007EE4  5B                 	db	91
   155  007EE5                     __end_of_lcd_font:
   156                           	opt stack 0
   157  007EE5                     _dpowers:
   158                           	opt stack 0
   159  007EE5  0001               	dw	1
   160  007EE7  0000               	dw	0
   161  007EE9  000A               	dw	10
   162  007EEB  0000               	dw	0
   163  007EED  0064               	dw	100
   164  007EEF  0000               	dw	0
   165  007EF1  03E8               	dw	1000
   166  007EF3  0000               	dw	0
   167  007EF5  2710               	dw	10000
   168  007EF7  0000               	dw	0
   169  007EF9  86A0               	dw	34464
   170  007EFB  0001               	dw	1
   171  007EFD  4240               	dw	16960
   172  007EFF  000F               	dw	15
   173  007F01  9680               	dw	38528
   174  007F03  0098               	dw	152
   175  007F05  E100               	dw	57600
   176  007F07  05F5               	dw	1525
   177  007F09  CA00               	dw	51712
   178  007F0B  3B9A               	dw	15258
   179  007F0D                     __end_of_dpowers:
   180                           	opt stack 0
   181  007F0D                     _pow10:
   182                           	opt stack 0
   183  007F0D  0001               	dw	1
   184  007F0F  0000               	dw	0
   185  007F11  000A               	dw	10
   186  007F13  0000               	dw	0
   187  007F15  0064               	dw	100
   188  007F17  0000               	dw	0
   189  007F19  03E8               	dw	1000
   190  007F1B  0000               	dw	0
   191  007F1D  2710               	dw	10000
   192  007F1F  0000               	dw	0
   193  007F21  86A0               	dw	34464
   194  007F23  0001               	dw	1
   195  007F25  4240               	dw	16960
   196  007F27  000F               	dw	15
   197  007F29  9680               	dw	38528
   198  007F2B  0098               	dw	152
   199  007F2D  E100               	dw	57600
   200  007F2F  05F5               	dw	1525
   201  007F31  CA00               	dw	51712
   202  007F33  3B9A               	dw	15258
   203  007F35                     __end_of_pow10:
   204                           	opt stack 0
   205  007F35                     __npowers_:
   206                           	opt stack 0
   207  007F35  00                 	db	0
   208  007F36  80                 	db	128
   209  007F37  3F                 	db	63
   210  007F38  CD                 	db	205
   211  007F39  CC                 	db	204
   212  007F3A  3D                 	db	61
   213  007F3B  D7                 	db	215
   214  007F3C  23                 	db	35
   215  007F3D  3C                 	db	60
   216  007F3E  12                 	db	18
   217  007F3F  83                 	db	131
   218  007F40  3A                 	db	58
   219  007F41  B7                 	db	183
   220  007F42  D1                 	db	209
   221  007F43  38                 	db	56
   222  007F44  C6                 	db	198
   223  007F45  27                 	db	39
   224  007F46  37                 	db	55
   225  007F47  38                 	db	56
   226  007F48  86                 	db	134
   227  007F49  35                 	db	53
   228  007F4A  C0                 	db	192
   229  007F4B  D6                 	db	214
   230  007F4C  33                 	db	51
   231  007F4D  CC                 	db	204
   232  007F4E  2B                 	db	43
   233  007F4F  32                 	db	50
   234  007F50  70                 	db	112
   235  007F51  89                 	db	137
   236  007F52  30                 	db	48
   237  007F53  E7                 	db	231
   238  007F54  DB                 	db	219
   239  007F55  2E                 	db	46
   240  007F56  E5                 	db	229
   241  007F57  3C                 	db	60
   242  007F58  1E                 	db	30
   243  007F59  42                 	db	66
   244  007F5A  A2                 	db	162
   245  007F5B  0D                 	db	13
   246  007F5C                     __end_of__npowers_:
   247                           	opt stack 0
   248  007F5C                     __powers_:
   249                           	opt stack 0
   250  007F5C  00                 	db	0
   251  007F5D  80                 	db	128
   252  007F5E  3F                 	db	63
   253  007F5F  00                 	db	0
   254  007F60  20                 	db	32
   255  007F61  41                 	db	65
   256  007F62  00                 	db	0
   257  007F63  C8                 	db	200
   258  007F64  42                 	db	66
   259  007F65  00                 	db	0
   260  007F66  7A                 	db	122
   261  007F67  44                 	db	68
   262  007F68  40                 	db	64
   263  007F69  1C                 	db	28
   264  007F6A  46                 	db	70
   265  007F6B  50                 	db	80
   266  007F6C  C3                 	db	195
   267  007F6D  47                 	db	71
   268  007F6E  24                 	db	36
   269  007F6F  74                 	db	116
   270  007F70  49                 	db	73
   271  007F71  97                 	db	151
   272  007F72  18                 	db	24
   273  007F73  4B                 	db	75
   274  007F74  BC                 	db	188
   275  007F75  BE                 	db	190
   276  007F76  4C                 	db	76
   277  007F77  6B                 	db	107
   278  007F78  6E                 	db	110
   279  007F79  4E                 	db	78
   280  007F7A  03                 	db	3
   281  007F7B  15                 	db	21
   282  007F7C  50                 	db	80
   283  007F7D  79                 	db	121
   284  007F7E  AD                 	db	173
   285  007F7F  60                 	db	96
   286  007F80  F3                 	db	243
   287  007F81  49                 	db	73
   288  007F82  71                 	db	113
   289  007F83                     __end_of__powers_:
   290                           	opt stack 0
   291  0000                     _TMR0	set	4054
   292  0000                     _TMR1	set	4046
   293  0000                     _ADCON0	set	4034
   294  0000                     _ADCON1	set	4033
   295  0000                     _ADCON2	set	4032
   296  0000                     _LATB	set	3978
   297  0000                     _LATC	set	3979
   298  0000                     _T0CON	set	4053
   299  0000                     _T1CON	set	4045
   300  0000                     _TRISB	set	3987
   301  0000                     _TRISC	set	3988
   302  0000                     _GIE	set	32663
   303  0000                     _GO	set	32273
   304  0000                     _LATA1	set	31817
   305  0000                     _LATA3	set	31819
   306  0000                     _LATA4	set	31820
   307  0000                     _LATA5	set	31821
   308  0000                     _LATC0	set	31832
   309  0000                     _LATC1	set	31833
   310  0000                     _LATC2	set	31834
   311  0000                     _PEIE	set	32662
   312  0000                     _TMR0IE	set	32661
   313  0000                     _TMR0IF	set	32658
   314  0000                     _TMR0ON	set	32431
   315  0000                     _TMR1IE	set	31976
   316  0000                     _TMR1IF	set	31984
   317  0000                     _TMR1ON	set	32360
   318  0000                     _TRISA1	set	31889
   319  0000                     _TRISA2	set	31890
   320  0000                     _TRISA3	set	31891
   321  0000                     _TRISA4	set	31892
   322  0000                     _TRISA5	set	31893
   323  0000                     _nRBPU	set	32655
   324  0000                     _ADRES	set	4035
   325  007F83                     __stringdata:
   326                           	opt stack 0
   327  007F83                     STR_19:
   328  007F83  20                 	db	32
   329  007F84  20                 	db	32
   330  007F85  25                 	db	37
   331  007F86  30                 	db	48	;'0'
   332  007F87  32                 	db	50	;'2'
   333  007F88  64                 	db	100	;'d'
   334  007F89  2E                 	db	46
   335  007F8A  25                 	db	37
   336  007F8B  30                 	db	48	;'0'
   337  007F8C  32                 	db	50	;'2'
   338  007F8D  64                 	db	100	;'d'
   339  007F8E  2E                 	db	46
   340  007F8F  25                 	db	37
   341  007F90  30                 	db	48	;'0'
   342  007F91  32                 	db	50	;'2'
   343  007F92  64                 	db	100	;'d'
   344  007F93  00                 	db	0
   345  007F94                     STR_20:
   346  007F94  20                 	db	32
   347  007F95  25                 	db	37
   348  007F96  63                 	db	99	;'c'
   349  007F97  25                 	db	37
   350  007F98  63                 	db	99	;'c'
   351  007F99  20                 	db	32
   352  007F9A  25                 	db	37
   353  007F9B  30                 	db	48	;'0'
   354  007F9C  32                 	db	50	;'2'
   355  007F9D  64                 	db	100	;'d'
   356  007F9E  2E                 	db	46
   357  007F9F  25                 	db	37
   358  007FA0  30                 	db	48	;'0'
   359  007FA1  32                 	db	50	;'2'
   360  007FA2  64                 	db	100	;'d'
   361  007FA3  00                 	db	0
   362  007FA4                     STR_18:
   363  007FA4  25                 	db	37
   364  007FA5  30                 	db	48	;'0'
   365  007FA6  32                 	db	50	;'2'
   366  007FA7  64                 	db	100	;'d'
   367  007FA8  20                 	db	32
   368  007FA9  25                 	db	37
   369  007FAA  30                 	db	48	;'0'
   370  007FAB  32                 	db	50	;'2'
   371  007FAC  64                 	db	100	;'d'
   372  007FAD  20                 	db	32
   373  007FAE  25                 	db	37
   374  007FAF  30                 	db	48	;'0'
   375  007FB0  32                 	db	50	;'2'
   376  007FB1  64                 	db	100	;'d'
   377  007FB2  00                 	db	0
   378  007FB3                     STR_22:
   379  007FB3  20                 	db	32
   380  007FB4  20                 	db	32
   381  007FB5  20                 	db	32
   382  007FB6  20                 	db	32
   383  007FB7  25                 	db	37
   384  007FB8  30                 	db	48	;'0'
   385  007FB9  32                 	db	50	;'2'
   386  007FBA  64                 	db	100	;'d'
   387  007FBB  2E                 	db	46
   388  007FBC  25                 	db	37
   389  007FBD  30                 	db	48	;'0'
   390  007FBE  32                 	db	50	;'2'
   391  007FBF  64                 	db	100	;'d'
   392  007FC0  00                 	db	0
   393  007FC1                     STR_17:
   394  007FC1  25                 	db	37
   395  007FC2  73                 	db	115	;'s'
   396  007FC3  20                 	db	32
   397  007FC4  25                 	db	37
   398  007FC5  30                 	db	48	;'0'
   399  007FC6  32                 	db	50	;'2'
   400  007FC7  64                 	db	100	;'d'
   401  007FC8  2E                 	db	46
   402  007FC9  25                 	db	37
   403  007FCA  30                 	db	48	;'0'
   404  007FCB  32                 	db	50	;'2'
   405  007FCC  64                 	db	100	;'d'
   406  007FCD  00                 	db	0
   407  007FCE                     STR_53:
   408  007FCE  28                 	db	40
   409  007FCF  6E                 	db	110	;'n'
   410  007FD0  75                 	db	117	;'u'
   411  007FD1  6C                 	db	108	;'l'
   412  007FD2  6C                 	db	108	;'l'
   413  007FD3  29                 	db	41
   414  007FD4  00                 	db	0
   415  007FD5                     STR_9:
   416  007FD5  25                 	db	37
   417  007FD6  2E                 	db	46
   418  007FD7  2A                 	db	42
   419  007FD8  66                 	db	102	;'f'
   420  007FD9  00                 	db	0
   421  007FDA  25                 	db	37
   422  007FDB  2A                 	db	42
   423  007FDC  6C                 	db	108	;'l'
   424  007FDD  69                 	db	105	;'i'
   425  007FDE  00                 	db	0
   426  007FDF                     STR_3:
   427  007FDF  44                 	db	68	;'D'
   428  007FE0  65                 	db	101	;'e'
   429  007FE1  69                 	db	105	;'i'
   430  007FE2  00                 	db	0
   431  007FE3                     STR_6:
   432  007FE3  46                 	db	70	;'F'
   433  007FE4  72                 	db	114	;'r'
   434  007FE5  69                 	db	105	;'i'
   435  007FE6  00                 	db	0
   436  007FE7                     STR_7:
   437  007FE7  53                 	db	83	;'S'
   438  007FE8  61                 	db	97	;'a'
   439  007FE9  6D                 	db	109	;'m'
   440  007FEA  00                 	db	0
   441  007FEB                     STR_5:
   442  007FEB  44                 	db	68	;'D'
   443  007FEC  6F                 	db	111	;'o'
   444  007FED  6E                 	db	110	;'n'
   445  007FEE  00                 	db	0
   446  007FEF                     STR_2:
   447  007FEF  4D                 	db	77	;'M'
   448  007FF0  6F                 	db	111	;'o'
   449  007FF1  6E                 	db	110	;'n'
   450  007FF2  00                 	db	0
   451  007FF3                     STR_1:
   452  007FF3  53                 	db	83	;'S'
   453  007FF4  6F                 	db	111	;'o'
   454  007FF5  6E                 	db	110	;'n'
   455  007FF6  00                 	db	0
   456  007FF7                     STR_4:
   457  007FF7  4D                 	db	77	;'M'
   458  007FF8  69                 	db	105	;'i'
   459  007FF9  74                 	db	116	;'t'
   460  007FFA  00                 	db	0
   461  007FFB                     STR_38:
   462  007FFB  2A                 	db	42
   463  007FFC  43                 	db	67	;'C'
   464  007FFD  00                 	db	0
   465  007FFE                     __end_of__stringdata:
   466                           	opt stack 0
   467                           
   468                           ; #config settings
   469  007FFE  00                 	db	0	; dummy byte at the end
   470  0000                     
   471                           	psect	nvBANK0
   472  0000F4                     __pnvBANK0:
   473                           	opt stack 0
   474  0000F4                     _menu:
   475                           	opt stack 0
   476  0000F4                     	ds	2
   477                           
   478                           	psect	nvBANK1
   479  00013D                     __pnvBANK1:
   480                           	opt stack 0
   481  00013D                     _rtcMenu:
   482                           	opt stack 0
   483  00013D                     	ds	5
   484                           
   485                           	psect	cinit
   486  0044BE                     __pcinit:
   487                           	opt stack 0
   488  0044BE                     start_initialization:
   489                           	opt stack 0
   490  0044BE                     __initialization:
   491                           	opt stack 0
   492                           
   493                           ; Clear objects allocated to BANK1 (27 bytes)
   494  0044BE  EE01  F022         	lfsr	0,__pbssBANK1
   495  0044C2  0E1B               	movlw	27
   496  0044C4                     clear_0:
   497  0044C4  6AEE               	clrf	postinc0,c
   498  0044C6  06E8               	decf	wreg,f,c
   499  0044C8  E1FD               	bnz	clear_0
   500                           
   501                           ; Clear objects allocated to BANK0 (38 bytes)
   502  0044CA  EE00  F0B7         	lfsr	0,__pbssBANK0
   503  0044CE  0E26               	movlw	38
   504  0044D0                     clear_1:
   505  0044D0  6AEE               	clrf	postinc0,c
   506  0044D2  06E8               	decf	wreg,f,c
   507  0044D4  E1FD               	bnz	clear_1
   508                           
   509                           ; Initialize objects allocated to BANK0 (23 bytes)
   510                           ; load TBLPTR registers with __pidataBANK0
   511  0044D6  0EEC               	movlw	low __pidataBANK0
   512  0044D8  6EF6               	movwf	tblptrl,c
   513  0044DA  0E47               	movlw	high __pidataBANK0
   514  0044DC  6EF7               	movwf	tblptrh,c
   515  0044DE  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   516  0044E0  6EF8               	movwf	tblptru,c
   517  0044E2  EE00  F0DD         	lfsr	0,__pdataBANK0
   518  0044E6  EE10 F017          	lfsr	1,23
   519  0044EA                     copy_data0:
   520  0044EA  0009               	tblrd		*+
   521  0044EC  CFF5 FFEE          	movff	tablat,postinc0
   522  0044F0  50E5               	movf	postdec1,w,c
   523  0044F2  50E1               	movf	fsr1l,w,c
   524  0044F4  E1FA               	bnz	copy_data0
   525  0044F6                     end_of_initialization:
   526                           	opt stack 0
   527  0044F6                     __end_of__initialization:
   528                           	opt stack 0
   529  0044F6  0E00               	movlw	low (__Lmediumconst shr (0+16))
   530  0044F8  6EF8               	movwf	tblptru,c
   531  0044FA  0100               	movlb	0
   532  0044FC  EF34  F020         	goto	_main	;jump to C main() function
   533                           tblptru	equ	0xFF8
   534                           tblptrh	equ	0xFF7
   535                           tblptrl	equ	0xFF6
   536                           tablat	equ	0xFF5
   537                           postinc0	equ	0xFEE
   538                           wreg	equ	0xFE8
   539                           postdec1	equ	0xFE5
   540                           fsr1l	equ	0xFE1
   541                           
   542                           	psect	bssBANK0
   543  0000B7                     __pbssBANK0:
   544                           	opt stack 0
   545  0000B7                     _oldTemps:
   546                           	opt stack 0
   547  0000B7                     	ds	12
   548  0000C3                     printRTC@F5073:
   549                           	opt stack 0
   550  0000C3                     	ds	9
   551  0000CC                     writeFloat@F5025:
   552                           	opt stack 0
   553  0000CC                     	ds	9
   554  0000D5                     _tmr0BigCounts:
   555                           	opt stack 0
   556  0000D5                     	ds	4
   557  0000D9                     _rtc_big_ticks:
   558                           	opt stack 0
   559  0000D9                     	ds	2
   560  0000DB                     _rtc_small_ticks:
   561                           	opt stack 0
   562  0000DB                     	ds	2
   563                           tblptru	equ	0xFF8
   564                           tblptrh	equ	0xFF7
   565                           tblptrl	equ	0xFF6
   566                           tablat	equ	0xFF5
   567                           postinc0	equ	0xFEE
   568                           wreg	equ	0xFE8
   569                           postdec1	equ	0xFE5
   570                           fsr1l	equ	0xFE1
   571                           
   572                           	psect	dataBANK0
   573  0000DD                     __pdataBANK0:
   574                           	opt stack 0
   575  0000DD                     _dow:
   576                           	opt stack 0
   577  0000DD                     	ds	14
   578  0000EB                     writeLong@F5021:
   579                           	opt stack 0
   580  0000EB                     	ds	9
   581                           tblptru	equ	0xFF8
   582                           tblptrh	equ	0xFF7
   583                           tblptrl	equ	0xFF6
   584                           tablat	equ	0xFF5
   585                           postinc0	equ	0xFEE
   586                           wreg	equ	0xFE8
   587                           postdec1	equ	0xFE5
   588                           fsr1l	equ	0xFE1
   589                           
   590                           	psect	bssBANK1
   591  000122                     __pbssBANK1:
   592                           	opt stack 0
   593  000122                     _date:
   594                           	opt stack 0
   595  000122                     	ds	9
   596  00012B                     _screen:
   597                           	opt stack 0
   598  00012B                     	ds	13
   599  000138                     _tempMenu:
   600                           	opt stack 0
   601  000138                     	ds	5
   602                           tblptru	equ	0xFF8
   603                           tblptrh	equ	0xFF7
   604                           tblptrl	equ	0xFF6
   605                           tablat	equ	0xFF5
   606                           postinc0	equ	0xFEE
   607                           wreg	equ	0xFE8
   608                           postdec1	equ	0xFE5
   609                           fsr1l	equ	0xFE1
   610                           
   611                           	psect	cstackBANK1
   612  000100                     __pcstackBANK1:
   613                           	opt stack 0
   614  000100                     ??_initTemp:
   615  000100                     ?_wait:
   616                           	opt stack 0
   617  000100                     ?_setBrightness:
   618                           	opt stack 0
   619  000100                     ?_setTest:
   620                           	opt stack 0
   621  000100                     ?_rotate:
   622                           	opt stack 0
   623  000100                     ?_log2:
   624                           	opt stack 0
   625  000100                     setBrightness@bright:
   626                           	opt stack 0
   627  000100                     setTest@state:
   628                           	opt stack 0
   629  000100                     rotate@seg:
   630                           	opt stack 0
   631  000100                     wait@count:
   632                           	opt stack 0
   633  000100                     log2@num:
   634                           	opt stack 0
   635  000100                     loadTime@newDate:
   636                           	opt stack 0
   637                           
   638                           ; 9 bytes @ 0x0
   639  000100                     	ds	1
   640  000101                     ??_startDisp:
   641  000101                     ??_rotate:
   642  000101                     
   643                           ; 0 bytes @ 0x1
   644  000101                     	ds	3
   645  000104                     rotate@ret:
   646                           	opt stack 0
   647  000104                     log2@log2Val:
   648                           	opt stack 0
   649                           
   650                           ; 4 bytes @ 0x4
   651  000104                     	ds	1
   652  000105                     rotate@cnt:
   653                           	opt stack 0
   654                           
   655                           ; 1 bytes @ 0x5
   656  000105                     	ds	1
   657  000106                     ?_spi:
   658                           	opt stack 0
   659  000106                     spi@addr:
   660                           	opt stack 0
   661                           
   662                           ; 1 bytes @ 0x6
   663  000106                     	ds	1
   664  000107                     spi@data:
   665                           	opt stack 0
   666                           
   667                           ; 1 bytes @ 0x7
   668  000107                     	ds	1
   669  000108                     ??_spi:
   670                           
   671                           ; 0 bytes @ 0x8
   672  000108                     	ds	1
   673  000109                     ??_initRTC:
   674                           
   675                           ; 0 bytes @ 0x9
   676  000109                     	ds	1
   677  00010A                     
   678                           ; 0 bytes @ 0xA
   679  00010A                     	ds	1
   680  00010B                     spi@send:
   681                           	opt stack 0
   682                           
   683                           ; 2 bytes @ 0xB
   684  00010B                     	ds	2
   685  00010D                     spi@cnt:
   686                           	opt stack 0
   687                           
   688                           ; 1 bytes @ 0xD
   689  00010D                     	ds	1
   690  00010E                     ?_writeDigit:
   691                           	opt stack 0
   692  00010E                     writeDigit@digit:
   693                           	opt stack 0
   694                           
   695                           ; 1 bytes @ 0xE
   696  00010E                     	ds	1
   697  00010F                     writeDigit@segs:
   698                           	opt stack 0
   699                           
   700                           ; 1 bytes @ 0xF
   701  00010F                     	ds	1
   702  000110                     ??_writeDigit:
   703                           
   704                           ; 0 bytes @ 0x10
   705  000110                     	ds	1
   706  000111                     writeDigit@dig:
   707                           	opt stack 0
   708                           
   709                           ; 1 bytes @ 0x11
   710  000111                     	ds	1
   711  000112                     writeDigit@cnt:
   712                           	opt stack 0
   713                           
   714                           ; 1 bytes @ 0x12
   715  000112                     	ds	1
   716  000113                     ??_update:
   717                           
   718                           ; 0 bytes @ 0x13
   719  000113                     	ds	5
   720  000118                     update@cnt:
   721                           	opt stack 0
   722                           
   723                           ; 1 bytes @ 0x18
   724  000118                     	ds	1
   725  000119                     
   726                           ; 2 bytes @ 0x19
   727  000119                     	ds	2
   728  00011B                     
   729                           ; 3 bytes @ 0x1B
   730  00011B                     	ds	3
   731  00011E                     main@cnt:
   732                           	opt stack 0
   733                           
   734                           ; 4 bytes @ 0x1E
   735  00011E                     	ds	4
   736                           tblptru	equ	0xFF8
   737                           tblptrh	equ	0xFF7
   738                           tblptrl	equ	0xFF6
   739                           tablat	equ	0xFF5
   740                           postinc0	equ	0xFEE
   741                           wreg	equ	0xFE8
   742                           postdec1	equ	0xFE5
   743                           fsr1l	equ	0xFE1
   744                           
   745                           	psect	cstackBANK0
   746  000060                     __pcstackBANK0:
   747                           	opt stack 0
   748  000060                     ?_sprintf:
   749                           	opt stack 0
   750  000060                     sprintf@sp:
   751                           	opt stack 0
   752  000060                     getTemp@oldTempsTemp:
   753                           	opt stack 0
   754                           
   755                           ; 9 bytes @ 0x0
   756  000060                     	ds	2
   757  000062                     sprintf@f:
   758                           	opt stack 0
   759                           
   760                           ; 2 bytes @ 0x2
   761  000062                     	ds	7
   762  000069                     getTemp@temp:
   763                           	opt stack 0
   764                           
   765                           ; 3 bytes @ 0x9
   766  000069                     	ds	3
   767  00006C                     getTemp@total:
   768                           	opt stack 0
   769  00006C                     _sprintf$1397:
   770                           	opt stack 0
   771                           
   772                           ; 3 bytes @ 0xC
   773  00006C                     	ds	3
   774  00006F                     getTemp@cnt:
   775                           	opt stack 0
   776  00006F                     _sprintf$751:
   777                           	opt stack 0
   778                           
   779                           ; 4 bytes @ 0xF
   780  00006F                     	ds	4
   781  000073                     sprintf@vd:
   782                           	opt stack 0
   783                           
   784                           ; 2 bytes @ 0x13
   785  000073                     	ds	2
   786  000075                     sprintf@vd_753:
   787                           	opt stack 0
   788                           
   789                           ; 2 bytes @ 0x15
   790  000075                     	ds	2
   791  000077                     sprintf@integ:
   792                           	opt stack 0
   793                           
   794                           ; 3 bytes @ 0x17
   795  000077                     	ds	3
   796  00007A                     sprintf@ap:
   797                           	opt stack 0
   798                           
   799                           ; 2 bytes @ 0x1A
   800  00007A                     	ds	2
   801  00007C                     sprintf@exp:
   802                           	opt stack 0
   803                           
   804                           ; 2 bytes @ 0x1C
   805  00007C                     	ds	2
   806  00007E                     sprintf@flag:
   807                           	opt stack 0
   808                           
   809                           ; 2 bytes @ 0x1E
   810  00007E                     	ds	2
   811  000080                     sprintf@fval:
   812                           	opt stack 0
   813                           
   814                           ; 3 bytes @ 0x20
   815  000080                     	ds	3
   816  000083                     sprintf@width:
   817                           	opt stack 0
   818                           
   819                           ; 2 bytes @ 0x23
   820  000083                     	ds	2
   821  000085                     sprintf@prec:
   822                           	opt stack 0
   823                           
   824                           ; 2 bytes @ 0x25
   825  000085                     	ds	2
   826  000087                     sprintf@c:
   827                           	opt stack 0
   828                           
   829                           ; 1 bytes @ 0x27
   830  000087                     	ds	1
   831  000088                     sprintf@_val:
   832                           	opt stack 0
   833                           
   834                           ; 4 bytes @ 0x28
   835  000088                     	ds	4
   836  00008C                     ?_writeFloat:
   837                           	opt stack 0
   838  00008C                     writeFloat@digits:
   839                           	opt stack 0
   840                           
   841                           ; 1 bytes @ 0x2C
   842  00008C                     	ds	1
   843  00008D                     writeFloat@num:
   844                           	opt stack 0
   845                           
   846                           ; 3 bytes @ 0x2D
   847  00008D                     	ds	3
   848  000090                     writeFloat@str:
   849                           	opt stack 0
   850                           
   851                           ; 9 bytes @ 0x30
   852  000090                     	ds	9
   853  000099                     writeFloat@bits:
   854                           	opt stack 0
   855                           
   856                           ; 1 bytes @ 0x39
   857  000099                     	ds	1
   858  00009A                     ??_printRTC:
   859  00009A                     _printTemp$1393:
   860                           	opt stack 0
   861                           
   862                           ; 4 bytes @ 0x3A
   863  00009A                     	ds	2
   864  00009C                     printRTC@str:
   865                           	opt stack 0
   866                           
   867                           ; 9 bytes @ 0x3C
   868  00009C                     	ds	2
   869  00009E                     printTemp@units:
   870                           	opt stack 0
   871                           
   872                           ; 1 bytes @ 0x3E
   873  00009E                     	ds	7
   874  0000A5                     _printRTC$1392:
   875                           	opt stack 0
   876                           
   877                           ; 2 bytes @ 0x45
   878  0000A5                     	ds	2
   879  0000A7                     ??_high_isr:
   880                           
   881                           ; 0 bytes @ 0x47
   882  0000A7                     	ds	16
   883                           tblptru	equ	0xFF8
   884                           tblptrh	equ	0xFF7
   885                           tblptrl	equ	0xFF6
   886                           tablat	equ	0xFF5
   887                           postinc0	equ	0xFEE
   888                           wreg	equ	0xFE8
   889                           postdec1	equ	0xFE5
   890                           fsr1l	equ	0xFE1
   891                           
   892                           	psect	cstackCOMRAM
   893  000001                     __pcstackCOMRAM:
   894                           	opt stack 0
   895  000001                     ?_isdigit:
   896                           	opt stack 0
   897  000001                     ?___ftge:
   898                           	opt stack 0
   899  000001                     ?i2_wait:
   900                           	opt stack 0
   901  000001                     ?_countBits:
   902                           	opt stack 0
   903  000001                     ?_getFontChar:
   904                           	opt stack 0
   905  000001                     ?i2_rotate:
   906                           	opt stack 0
   907  000001                     ?___awmod:
   908                           	opt stack 0
   909  000001                     ?___lwmod:
   910                           	opt stack 0
   911  000001                     ?___ftpack:
   912                           	opt stack 0
   913  000001                     ?___ftneg:
   914                           	opt stack 0
   915  000001                     ?_hibit:
   916                           	opt stack 0
   917  000001                     ?_lowbit:
   918                           	opt stack 0
   919  000001                     ?__tdiv_to_l_:
   920                           	opt stack 0
   921  000001                     ?__div_to_l_:
   922                           	opt stack 0
   923  000001                     ?___lldiv:
   924                           	opt stack 0
   925  000001                     getFontChar@ch:
   926                           	opt stack 0
   927  000001                     isdigit@c:
   928                           	opt stack 0
   929  000001                     i2rotate@seg:
   930                           	opt stack 0
   931  000001                     ___awmod@dividend:
   932                           	opt stack 0
   933  000001                     ___lwmod@dividend:
   934                           	opt stack 0
   935  000001                     __div_to_l_@f1:
   936                           	opt stack 0
   937  000001                     ___ftpack@arg:
   938                           	opt stack 0
   939  000001                     __tdiv_to_l_@f1:
   940                           	opt stack 0
   941  000001                     ___ftge@ff1:
   942                           	opt stack 0
   943  000001                     ___ftneg@f1:
   944                           	opt stack 0
   945  000001                     countBits@num:
   946                           	opt stack 0
   947  000001                     hibit@x:
   948                           	opt stack 0
   949  000001                     lowbit@x:
   950                           	opt stack 0
   951  000001                     ___lldiv@dividend:
   952                           	opt stack 0
   953  000001                     i2wait@count:
   954                           	opt stack 0
   955                           
   956                           ; 4 bytes @ 0x0
   957  000001                     	ds	1
   958  000002                     ??_isdigit:
   959  000002                     ??_getFontChar:
   960  000002                     ??i2_rotate:
   961                           
   962                           ; 0 bytes @ 0x1
   963  000002                     	ds	1
   964  000003                     _isdigit$1026:
   965                           	opt stack 0
   966  000003                     ___awmod@divisor:
   967                           	opt stack 0
   968  000003                     ___lwmod@divisor:
   969                           	opt stack 0
   970                           
   971                           ; 2 bytes @ 0x2
   972  000003                     	ds	1
   973  000004                     ___ftpack@exp:
   974                           	opt stack 0
   975  000004                     __div_to_l_@f2:
   976                           	opt stack 0
   977  000004                     __tdiv_to_l_@f2:
   978                           	opt stack 0
   979  000004                     ___ftge@ff2:
   980                           	opt stack 0
   981                           
   982                           ; 3 bytes @ 0x3
   983  000004                     	ds	1
   984  000005                     ??_hibit:
   985  000005                     ??_lowbit:
   986  000005                     ??___awmod:
   987  000005                     ??___lwmod:
   988  000005                     countBits@ret:
   989                           	opt stack 0
   990  000005                     ___ftpack@sign:
   991                           	opt stack 0
   992  000005                     i2rotate@ret:
   993                           	opt stack 0
   994  000005                     ___lldiv@divisor:
   995                           	opt stack 0
   996                           
   997                           ; 4 bytes @ 0x4
   998  000005                     	ds	1
   999  000006                     ??___ftpack:
  1000  000006                     i2rotate@cnt:
  1001                           	opt stack 0
  1002                           
  1003                           ; 1 bytes @ 0x5
  1004  000006                     	ds	1
  1005  000007                     ??__tdiv_to_l_:
  1006  000007                     ??__div_to_l_:
  1007  000007                     ??___ftge:
  1008  000007                     ?i2_spi:
  1009                           	opt stack 0
  1010  000007                     ___lwmod@counter:
  1011                           	opt stack 0
  1012  000007                     i2spi@addr:
  1013                           	opt stack 0
  1014                           
  1015                           ; 1 bytes @ 0x6
  1016  000007                     	ds	1
  1017  000008                     ?_daysOfMonth:
  1018                           	opt stack 0
  1019  000008                     daysOfMonth@month:
  1020                           	opt stack 0
  1021  000008                     ___awmod@counter:
  1022                           	opt stack 0
  1023  000008                     i2spi@data:
  1024                           	opt stack 0
  1025  000008                     hibit@log2Val:
  1026                           	opt stack 0
  1027  000008                     lowbit@log2Val:
  1028                           	opt stack 0
  1029  000008                     __div_to_l_@quot:
  1030                           	opt stack 0
  1031                           
  1032                           ; 4 bytes @ 0x7
  1033  000008                     	ds	1
  1034  000009                     ??___lldiv:
  1035  000009                     ??i2_spi:
  1036  000009                     ?___ftdiv:
  1037                           	opt stack 0
  1038  000009                     ?___lltoft:
  1039                           	opt stack 0
  1040  000009                     ?___lwtoft:
  1041                           	opt stack 0
  1042  000009                     ___awmod@sign:
  1043                           	opt stack 0
  1044  000009                     daysOfMonth@year:
  1045                           	opt stack 0
  1046  000009                     ___lwtoft@c:
  1047                           	opt stack 0
  1048  000009                     ___ftdiv@f1:
  1049                           	opt stack 0
  1050  000009                     ___lltoft@c:
  1051                           	opt stack 0
  1052                           
  1053                           ; 4 bytes @ 0x8
  1054  000009                     	ds	1
  1055  00000A                     ?___awdiv:
  1056                           	opt stack 0
  1057  00000A                     ___awdiv@dividend:
  1058                           	opt stack 0
  1059                           
  1060                           ; 2 bytes @ 0x9
  1061  00000A                     	ds	1
  1062  00000B                     ??_daysOfMonth:
  1063                           
  1064                           ; 0 bytes @ 0xA
  1065  00000B                     	ds	1
  1066  00000C                     ??___lwtoft:
  1067  00000C                     ?i2_log2:
  1068                           	opt stack 0
  1069  00000C                     __div_to_l_@cntr:
  1070                           	opt stack 0
  1071  00000C                     ___awdiv@divisor:
  1072                           	opt stack 0
  1073  00000C                     i2spi@send:
  1074                           	opt stack 0
  1075  00000C                     ___ftdiv@f2:
  1076                           	opt stack 0
  1077  00000C                     __tdiv_to_l_@quot:
  1078                           	opt stack 0
  1079  00000C                     i2log2@num:
  1080                           	opt stack 0
  1081                           
  1082                           ; 4 bytes @ 0xB
  1083  00000C                     	ds	1
  1084  00000D                     ??___lltoft:
  1085  00000D                     ?_tick:
  1086                           	opt stack 0
  1087  00000D                     tick@val:
  1088                           	opt stack 0
  1089  00000D                     __div_to_l_@exp1:
  1090                           	opt stack 0
  1091                           
  1092                           ; 1 bytes @ 0xC
  1093  00000D                     	ds	1
  1094  00000E                     ??_tick:
  1095  00000E                     ??___awdiv:
  1096  00000E                     i2spi@cnt:
  1097                           	opt stack 0
  1098                           
  1099                           ; 1 bytes @ 0xD
  1100  00000E                     	ds	1
  1101  00000F                     ??___ftdiv:
  1102  00000F                     ___lldiv@quotient:
  1103                           	opt stack 0
  1104                           
  1105                           ; 4 bytes @ 0xE
  1106  00000F                     	ds	1
  1107  000010                     __tdiv_to_l_@cntr:
  1108                           	opt stack 0
  1109  000010                     i2log2@log2Val:
  1110                           	opt stack 0
  1111                           
  1112                           ; 4 bytes @ 0xF
  1113  000010                     	ds	1
  1114  000011                     __tdiv_to_l_@exp1:
  1115                           	opt stack 0
  1116  000011                     ___lltoft@exp:
  1117                           	opt stack 0
  1118                           
  1119                           ; 1 bytes @ 0x10
  1120  000011                     	ds	2
  1121  000013                     ___awdiv@counter:
  1122                           	opt stack 0
  1123  000013                     ___lldiv@counter:
  1124                           	opt stack 0
  1125                           
  1126                           ; 1 bytes @ 0x12
  1127  000013                     	ds	1
  1128  000014                     ?i2_writeDigit:
  1129                           	opt stack 0
  1130  000014                     ?___llmod:
  1131                           	opt stack 0
  1132  000014                     ___awdiv@sign:
  1133                           	opt stack 0
  1134  000014                     ___ftdiv@cntr:
  1135                           	opt stack 0
  1136  000014                     i2writeDigit@digit:
  1137                           	opt stack 0
  1138  000014                     ___llmod@dividend:
  1139                           	opt stack 0
  1140                           
  1141                           ; 4 bytes @ 0x13
  1142  000014                     	ds	1
  1143  000015                     i2writeDigit@segs:
  1144                           	opt stack 0
  1145  000015                     ___awdiv@quotient:
  1146                           	opt stack 0
  1147  000015                     ___ftdiv@f3:
  1148                           	opt stack 0
  1149                           
  1150                           ; 3 bytes @ 0x14
  1151  000015                     	ds	1
  1152  000016                     ??i2_writeDigit:
  1153                           
  1154                           ; 0 bytes @ 0x15
  1155  000016                     	ds	1
  1156  000017                     ?___wmul:
  1157                           	opt stack 0
  1158  000017                     i2writeDigit@dig:
  1159                           	opt stack 0
  1160  000017                     ___wmul@multiplier:
  1161                           	opt stack 0
  1162                           
  1163                           ; 2 bytes @ 0x16
  1164  000017                     	ds	1
  1165  000018                     ___ftdiv@exp:
  1166                           	opt stack 0
  1167  000018                     i2writeDigit@cnt:
  1168                           	opt stack 0
  1169  000018                     ___llmod@divisor:
  1170                           	opt stack 0
  1171                           
  1172                           ; 4 bytes @ 0x17
  1173  000018                     	ds	1
  1174  000019                     ??i2_update:
  1175  000019                     ___ftdiv@sign:
  1176                           	opt stack 0
  1177  000019                     ___wmul@multiplicand:
  1178                           	opt stack 0
  1179                           
  1180                           ; 2 bytes @ 0x18
  1181  000019                     	ds	2
  1182  00001B                     
  1183                           ; 0 bytes @ 0x1A
  1184  00001B                     	ds	1
  1185  00001C                     ??___llmod:
  1186                           
  1187                           ; 0 bytes @ 0x1B
  1188  00001C                     	ds	1
  1189  00001D                     ___wmul@product:
  1190                           	opt stack 0
  1191                           
  1192                           ; 2 bytes @ 0x1C
  1193  00001D                     	ds	1
  1194  00001E                     ___llmod@counter:
  1195                           	opt stack 0
  1196  00001E                     i2update@cnt:
  1197                           	opt stack 0
  1198                           
  1199                           ; 1 bytes @ 0x1D
  1200  00001E                     	ds	1
  1201  00001F                     ?_writeChar:
  1202                           	opt stack 0
  1203  00001F                     ?_dayOfWeek:
  1204                           	opt stack 0
  1205  00001F                     ?___fttol:
  1206                           	opt stack 0
  1207  00001F                     writeChar@digit:
  1208                           	opt stack 0
  1209  00001F                     dayOfWeek@year:
  1210                           	opt stack 0
  1211  00001F                     ___fttol@f1:
  1212                           	opt stack 0
  1213                           
  1214                           ; 3 bytes @ 0x1E
  1215  00001F                     	ds	1
  1216  000020                     writeChar@ch:
  1217                           	opt stack 0
  1218  000020                     dayOfWeek@month:
  1219                           	opt stack 0
  1220                           
  1221                           ; 1 bytes @ 0x1F
  1222  000020                     	ds	1
  1223  000021                     writeChar@dig:
  1224                           	opt stack 0
  1225  000021                     dayOfWeek@day:
  1226                           	opt stack 0
  1227                           
  1228                           ; 1 bytes @ 0x20
  1229  000021                     	ds	1
  1230  000022                     ?_writeString:
  1231                           	opt stack 0
  1232  000022                     ??_dayOfWeek:
  1233  000022                     writeString@digits:
  1234                           	opt stack 0
  1235                           
  1236                           ; 1 bytes @ 0x21
  1237  000022                     	ds	1
  1238  000023                     ??___fttol:
  1239  000023                     writeString@string:
  1240                           	opt stack 0
  1241                           
  1242                           ; 2 bytes @ 0x22
  1243  000023                     	ds	2
  1244  000025                     ??_writeString:
  1245                           
  1246                           ; 0 bytes @ 0x24
  1247  000025                     	ds	3
  1248  000028                     ___fttol@sign1:
  1249                           	opt stack 0
  1250                           
  1251                           ; 1 bytes @ 0x27
  1252  000028                     	ds	1
  1253  000029                     writeString@bits:
  1254                           	opt stack 0
  1255  000029                     ___fttol@lval:
  1256                           	opt stack 0
  1257                           
  1258                           ; 4 bytes @ 0x28
  1259  000029                     	ds	1
  1260  00002A                     writeString@i:
  1261                           	opt stack 0
  1262  00002A                     dayOfWeek@tmp:
  1263                           	opt stack 0
  1264                           
  1265                           ; 4 bytes @ 0x29
  1266  00002A                     	ds	1
  1267  00002B                     writeString@cnt:
  1268                           	opt stack 0
  1269                           
  1270                           ; 1 bytes @ 0x2A
  1271  00002B                     	ds	2
  1272  00002D                     ___fttol@exp1:
  1273                           	opt stack 0
  1274                           
  1275                           ; 1 bytes @ 0x2C
  1276  00002D                     	ds	1
  1277  00002E                     ??_checkDST:
  1278  00002E                     ?___ftmul:
  1279                           	opt stack 0
  1280  00002E                     ___ftmul@f1:
  1281                           	opt stack 0
  1282                           
  1283                           ; 3 bytes @ 0x2D
  1284  00002E                     	ds	3
  1285  000031                     ___ftmul@f2:
  1286                           	opt stack 0
  1287                           
  1288                           ; 3 bytes @ 0x30
  1289  000031                     	ds	3
  1290  000034                     ??___ftmul:
  1291                           
  1292                           ; 0 bytes @ 0x33
  1293  000034                     	ds	2
  1294  000036                     _checkDST$422:
  1295                           	opt stack 0
  1296                           
  1297                           ; 1 bytes @ 0x35
  1298  000036                     	ds	3
  1299  000039                     ___ftmul@exp:
  1300                           	opt stack 0
  1301                           
  1302                           ; 1 bytes @ 0x38
  1303  000039                     	ds	1
  1304  00003A                     ___ftmul@f3_as_product:
  1305                           	opt stack 0
  1306                           
  1307                           ; 3 bytes @ 0x39
  1308  00003A                     	ds	3
  1309  00003D                     ___ftmul@cntr:
  1310                           	opt stack 0
  1311                           
  1312                           ; 1 bytes @ 0x3C
  1313  00003D                     	ds	1
  1314  00003E                     ___ftmul@sign:
  1315                           	opt stack 0
  1316                           
  1317                           ; 1 bytes @ 0x3D
  1318  00003E                     	ds	1
  1319  00003F                     ?___ftadd:
  1320                           	opt stack 0
  1321  00003F                     ?_fround:
  1322                           	opt stack 0
  1323  00003F                     ?_scale:
  1324                           	opt stack 0
  1325  00003F                     ?___asftmul:
  1326                           	opt stack 0
  1327  00003F                     fround@prec:
  1328                           	opt stack 0
  1329  00003F                     scale@scl:
  1330                           	opt stack 0
  1331  00003F                     ___asftmul@f1p:
  1332                           	opt stack 0
  1333  00003F                     ___ftadd@f1:
  1334                           	opt stack 0
  1335                           
  1336                           ; 3 bytes @ 0x3E
  1337  00003F                     	ds	2
  1338  000041                     ___asftmul@f2:
  1339                           	opt stack 0
  1340                           
  1341                           ; 3 bytes @ 0x40
  1342  000041                     	ds	1
  1343  000042                     ??_fround:
  1344  000042                     ??_scale:
  1345  000042                     ___ftadd@f2:
  1346                           	opt stack 0
  1347                           
  1348                           ; 3 bytes @ 0x41
  1349  000042                     	ds	2
  1350  000044                     
  1351                           ; 0 bytes @ 0x43
  1352  000044                     	ds	1
  1353  000045                     ??___ftadd:
  1354                           
  1355                           ; 0 bytes @ 0x44
  1356  000045                     	ds	3
  1357  000048                     _fround$1395:
  1358                           	opt stack 0
  1359  000048                     _scale$1396:
  1360                           	opt stack 0
  1361                           
  1362                           ; 3 bytes @ 0x47
  1363  000048                     	ds	2
  1364  00004A                     ___ftadd@sign:
  1365                           	opt stack 0
  1366                           
  1367                           ; 1 bytes @ 0x49
  1368  00004A                     	ds	1
  1369  00004B                     ___ftadd@exp2:
  1370                           	opt stack 0
  1371  00004B                     _fround$1394:
  1372                           	opt stack 0
  1373                           
  1374                           ; 3 bytes @ 0x4A
  1375  00004B                     	ds	1
  1376  00004C                     ___ftadd@exp1:
  1377                           	opt stack 0
  1378                           
  1379                           ; 1 bytes @ 0x4B
  1380  00004C                     	ds	1
  1381  00004D                     ?___ftsub:
  1382                           	opt stack 0
  1383  00004D                     ___ftsub@f1:
  1384                           	opt stack 0
  1385                           
  1386                           ; 3 bytes @ 0x4C
  1387  00004D                     	ds	1
  1388  00004E                     ?___asftadd:
  1389                           	opt stack 0
  1390  00004E                     ___asftadd@f1p:
  1391                           	opt stack 0
  1392                           
  1393                           ; 2 bytes @ 0x4D
  1394  00004E                     	ds	2
  1395  000050                     ___asftadd@f2:
  1396                           	opt stack 0
  1397  000050                     ___ftsub@f2:
  1398                           	opt stack 0
  1399                           
  1400                           ; 3 bytes @ 0x4F
  1401  000050                     	ds	3
  1402  000053                     ?_getTemp:
  1403                           	opt stack 0
  1404  000053                     ?___asftsub:
  1405                           	opt stack 0
  1406  000053                     ___asftsub@f1p:
  1407                           	opt stack 0
  1408                           
  1409                           ; 2 bytes @ 0x52
  1410  000053                     	ds	2
  1411  000055                     ___asftsub@f2:
  1412                           	opt stack 0
  1413                           
  1414                           ; 3 bytes @ 0x54
  1415  000055                     	ds	1
  1416  000056                     ??_getTemp:
  1417                           
  1418                           ; 0 bytes @ 0x55
  1419  000056                     	ds	2
  1420  000058                     ??_sprintf:
  1421  000058                     
  1422                           ; 0 bytes @ 0x57
  1423  000058                     	ds	6
  1424  00005E                     ?_printTemp:
  1425                           	opt stack 0
  1426  00005E                     printRTC@digits:
  1427                           	opt stack 0
  1428  00005E                     printTemp@digits:
  1429                           	opt stack 0
  1430                           
  1431                           ; 1 bytes @ 0x5D
  1432  00005E                     	ds	1
  1433  00005F                     ??_printTemp:
  1434                           
  1435                           ; 0 bytes @ 0x5E
  1436  00005F                     	ds	1
  1437                           tblptru	equ	0xFF8
  1438                           tblptrh	equ	0xFF7
  1439                           tblptrl	equ	0xFF6
  1440                           tablat	equ	0xFF5
  1441                           postinc0	equ	0xFEE
  1442                           wreg	equ	0xFE8
  1443                           postdec1	equ	0xFE5
  1444                           fsr1l	equ	0xFE1
  1445                           
  1446 ;;
  1447 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1448 ;;
  1449 ;; *************** function _main *****************
  1450 ;; Defined at:
  1451 ;;		line 42 in file "main.c"
  1452 ;; Parameters:    Size  Location     Type
  1453 ;;  argc            2   25[BANK1 ] int 
  1454 ;;  argv            3   27[BANK1 ] PTR PTR unsigned char 
  1455 ;; Auto vars:     Size  Location     Type
  1456 ;;  cnt             4   30[BANK1 ] unsigned long 
  1457 ;; Return value:  Size  Location     Type
  1458 ;;                  2   25[BANK1 ] int 
  1459 ;; Registers used:
  1460 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  1461 ;; Tracked objects:
  1462 ;;		On entry : 0/0
  1463 ;;		On exit  : 0/0
  1464 ;;		Unchanged: 0/0
  1465 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1466 ;;      Params:         0       0       5       0       0       0       0       0       0
  1467 ;;      Locals:         0       0       4       0       0       0       0       0       0
  1468 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1469 ;;      Totals:         0       0       9       0       0       0       0       0       0
  1470 ;;Total ram usage:        9 bytes
  1471 ;; Hardware stack levels required when called:   12
  1472 ;; This function calls:
  1473 ;;		_setup
  1474 ;;		_update
  1475 ;; This function is called by:
  1476 ;;		Startup code after reset
  1477 ;; This function uses a non-reentrant model
  1478 ;;
  1479                           
  1480                           	psect	text0
  1481  004068                     __ptext0:
  1482                           	opt stack 0
  1483  004068                     _main:
  1484                           	opt stack 19
  1485                           
  1486                           ;main.c: 43: setup();
  1487                           
  1488                           ;incstack = 0
  1489                           ;incstack = 0
  1490  004068  EC4C  F023         	call	_setup	;wreg free
  1491                           
  1492                           ;main.c: 44: uint32_t cnt = 0;
  1493  00406C  0E00               	movlw	0
  1494  00406E  0101               	movlb	1	; () banked
  1495  004070  0101               	movlb	1	; () banked
  1496  004072  6F1E               	movwf	main@cnt& (0+255),b
  1497  004074  0E00               	movlw	0
  1498  004076  0101               	movlb	1	; () banked
  1499  004078  6F1F               	movwf	(main@cnt+1)& (0+255),b
  1500  00407A  0E00               	movlw	0
  1501  00407C  0101               	movlb	1	; () banked
  1502  00407E  6F20               	movwf	(main@cnt+2)& (0+255),b
  1503  004080  0E00               	movlw	0
  1504  004082  0101               	movlb	1	; () banked
  1505  004084  6F21               	movwf	(main@cnt+3)& (0+255),b
  1506  004086                     l5249:
  1507                           
  1508                           ; BSR set to: 1
  1509                           ;main.c: 46: {
  1510                           ;main.c: 47: if (cnt > 200L)
  1511  004086  0EC9               	movlw	201
  1512  004088  0101               	movlb	1	; () banked
  1513  00408A  0101               	movlb	1	; () banked
  1514  00408C  5D1E               	subwf	main@cnt& (0+255),w,b
  1515  00408E  0E00               	movlw	0
  1516  004090  0101               	movlb	1	; () banked
  1517  004092  591F               	subwfb	(main@cnt+1)& (0+255),w,b
  1518  004094  0E00               	movlw	0
  1519  004096  0101               	movlb	1	; () banked
  1520  004098  5920               	subwfb	(main@cnt+2)& (0+255),w,b
  1521  00409A  0E00               	movlw	0
  1522  00409C  0101               	movlb	1	; () banked
  1523  00409E  0101               	movlb	1	; () banked
  1524  0040A0  5921               	subwfb	(main@cnt+3)& (0+255),w,b
  1525  0040A2  A0D8               	btfss	status,0,c
  1526  0040A4  D00F               	goto	l5255
  1527                           
  1528                           ; BSR set to: 1
  1529                           ;main.c: 48: {
  1530                           ;main.c: 49: cnt = 0;
  1531  0040A6  0E00               	movlw	0
  1532  0040A8  0101               	movlb	1	; () banked
  1533  0040AA  0101               	movlb	1	; () banked
  1534  0040AC  6F1E               	movwf	main@cnt& (0+255),b
  1535  0040AE  0E00               	movlw	0
  1536  0040B0  0101               	movlb	1	; () banked
  1537  0040B2  6F1F               	movwf	(main@cnt+1)& (0+255),b
  1538  0040B4  0E00               	movlw	0
  1539  0040B6  0101               	movlb	1	; () banked
  1540  0040B8  6F20               	movwf	(main@cnt+2)& (0+255),b
  1541  0040BA  0E00               	movlw	0
  1542  0040BC  0101               	movlb	1	; () banked
  1543  0040BE  6F21               	movwf	(main@cnt+3)& (0+255),b
  1544                           
  1545                           ; BSR set to: 1
  1546                           ;main.c: 52: update();
  1547  0040C0  ECD6  F00A         	call	_update	;wreg free
  1548  0040C4                     l5255:
  1549                           
  1550                           ;main.c: 54: }
  1551                           ;main.c: 55: cnt++;
  1552  0040C4  0E01               	movlw	1
  1553  0040C6  0101               	movlb	1	; () banked
  1554  0040C8  0101               	movlb	1	; () banked
  1555  0040CA  271E               	addwf	main@cnt& (0+255),f,b
  1556  0040CC  0E00               	movlw	0
  1557  0040CE  0101               	movlb	1	; () banked
  1558  0040D0  231F               	addwfc	(main@cnt+1)& (0+255),f,b
  1559  0040D2  0E00               	movlw	0
  1560  0040D4  0101               	movlb	1	; () banked
  1561  0040D6  2320               	addwfc	(main@cnt+2)& (0+255),f,b
  1562  0040D8  0E00               	movlw	0
  1563  0040DA  0101               	movlb	1	; () banked
  1564  0040DC  2321               	addwfc	(main@cnt+3)& (0+255),f,b
  1565  0040DE  D7D3               	goto	l5249
  1566  0040E0                     __end_of_main:
  1567                           	opt stack 0
  1568                           tblptru	equ	0xFF8
  1569                           tblptrh	equ	0xFF7
  1570                           tblptrl	equ	0xFF6
  1571                           tablat	equ	0xFF5
  1572                           postinc0	equ	0xFEE
  1573                           wreg	equ	0xFE8
  1574                           postdec1	equ	0xFE5
  1575                           fsr1l	equ	0xFE1
  1576                           status	equ	0xFD8
  1577                           
  1578 ;; *************** function _update *****************
  1579 ;; Defined at:
  1580 ;;		line 13 in file "disp.c"
  1581 ;; Parameters:    Size  Location     Type
  1582 ;;		None
  1583 ;; Auto vars:     Size  Location     Type
  1584 ;;  cnt             1   24[BANK1 ] char 
  1585 ;; Return value:  Size  Location     Type
  1586 ;;		None               void
  1587 ;; Registers used:
  1588 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  1589 ;; Tracked objects:
  1590 ;;		On entry : 0/0
  1591 ;;		On exit  : 0/0
  1592 ;;		Unchanged: 0/0
  1593 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1594 ;;      Params:         0       0       0       0       0       0       0       0       0
  1595 ;;      Locals:         0       0       1       0       0       0       0       0       0
  1596 ;;      Temps:          0       0       5       0       0       0       0       0       0
  1597 ;;      Totals:         0       0       6       0       0       0       0       0       0
  1598 ;;Total ram usage:        6 bytes
  1599 ;; Hardware stack levels used:    1
  1600 ;; Hardware stack levels required when called:   11
  1601 ;; This function calls:
  1602 ;;		_writeDigit
  1603 ;;		_spi
  1604 ;; This function is called by:
  1605 ;;		_main
  1606 ;; This function uses a non-reentrant model
  1607 ;;
  1608                           
  1609                           	psect	text1
  1610  0015AC                     __ptext1:
  1611                           	opt stack 0
  1612  0015AC                     _update:
  1613                           	opt stack 19
  1614                           
  1615                           ;disp.c: 14: if (screen.changed == 0)
  1616                           
  1617                           ; BSR set to: 1
  1618                           ;incstack = 0
  1619                           ;incstack = 0
  1620  0015AC  0101               	movlb	1	; () banked
  1621  0015AE  0101               	movlb	1	; () banked
  1622  0015B0  5137               	movf	(_screen+12)& (0+255),w,b
  1623  0015B2  1136               	iorwf	(_screen+11)& (0+255),w,b
  1624  0015B4  B4D8               	btfsc	status,2,c
  1625  0015B6  D285               	goto	l140
  1626                           
  1627                           ; BSR set to: 1
  1628                           ;disp.c: 17: }
  1629                           ;disp.c: 18: int8_t cnt;
  1630                           ;disp.c: 19: for (cnt = 15; cnt >= 0; cnt--)
  1631                           
  1632                           ; BSR set to: 1
  1633                           
  1634                           ; BSR set to: 1
  1635                           ;disp.c: 15: {
  1636                           ;disp.c: 16: return;
  1637  0015B8  0101               	movlb	1	; () banked
  1638  0015BA  6F13               	movwf	??_update& (0+255),b
  1639  0015BC  0E0F               	movlw	15
  1640  0015BE  0101               	movlb	1	; () banked
  1641  0015C0  0101               	movlb	1	; () banked
  1642  0015C2  6F18               	movwf	update@cnt& (0+255),b
  1643  0015C4  0101               	movlb	1	; () banked
  1644  0015C6  5113               	movf	??_update& (0+255),w,b
  1645  0015C8                     
  1646                           ; BSR set to: 1
  1647  0015C8  0101               	movlb	1	; () banked
  1648  0015CA  0101               	movlb	1	; () banked
  1649  0015CC  BF18               	btfsc	update@cnt& (0+255),7,b
  1650  0015CE  D279               	goto	l140
  1651  0015D0  D083               	goto	l5297
  1652  0015D2                     l5283:
  1653                           
  1654                           ; BSR set to: 1
  1655                           ;disp.c: 24: writeDigit(1 << cnt, screen.digits.screen[cnt].bits);
  1656  0015D2  C118  F113         	movff	update@cnt,??_update
  1657  0015D6  0E01               	movlw	1
  1658  0015D8  0101               	movlb	1	; () banked
  1659  0015DA  6F14               	movwf	(??_update+1)& (0+255),b
  1660  0015DC  0101               	movlb	1	; () banked
  1661  0015DE  2B13               	incf	??_update& (0+255),f,b
  1662  0015E0  D003               	goto	u2874
  1663  0015E2                     u2875:
  1664  0015E2  0101               	movlb	1	; () banked
  1665  0015E4  90D8               	bcf	status,0,c
  1666  0015E6  3714               	rlcf	(??_update+1)& (0+255),f,b
  1667  0015E8                     u2874:
  1668  0015E8  0101               	movlb	1	; () banked
  1669  0015EA  2F13               	decfsz	??_update& (0+255),f,b
  1670  0015EC  D7FA               	goto	u2875
  1671  0015EE  0101               	movlb	1	; () banked
  1672  0015F0  5114               	movf	(??_update+1)& (0+255),w,b
  1673  0015F2  0101               	movlb	1	; () banked
  1674  0015F4  0101               	movlb	1	; () banked
  1675  0015F6  6F0E               	movwf	?_writeDigit& (0+255),b
  1676  0015F8  0101               	movlb	1	; () banked
  1677  0015FA  0101               	movlb	1	; () banked
  1678  0015FC  5118               	movf	update@cnt& (0+255),w,b
  1679  0015FE  0D01               	mullw	1
  1680  001600  0101               	movlb	1	; () banked
  1681  001602  0E2B               	movlw	low _screen
  1682  001604  24F3               	addwf	prodl,w,c
  1683  001606  6ED9               	movwf	fsr2l,c
  1684  001608  0101               	movlb	1	; () banked
  1685  00160A  0E01               	movlw	high _screen
  1686  00160C  20F4               	addwfc	prodh,w,c
  1687  00160E  6EDA               	movwf	fsr2h,c
  1688  001610  50DF               	movf	indf2,w,c
  1689  001612  0101               	movlb	1	; () banked
  1690  001614  0101               	movlb	1	; () banked
  1691  001616  6F0F               	movwf	(?_writeDigit+1)& (0+255),b
  1692  001618  ECF4  F01E         	call	_writeDigit	;wreg free
  1693                           
  1694                           ;disp.c: 25: break;
  1695  00161C  D22C               	goto	l5299
  1696  00161E                     l5285:
  1697                           
  1698                           ;disp.c: 27: spi(0b1001, screen.decode);
  1699  00161E  0101               	movlb	1	; () banked
  1700  001620  6F13               	movwf	??_update& (0+255),b
  1701  001622  0E09               	movlw	9
  1702  001624  0101               	movlb	1	; () banked
  1703  001626  0101               	movlb	1	; () banked
  1704  001628  6F06               	movwf	?_spi& (0+255),b
  1705  00162A  0101               	movlb	1	; () banked
  1706  00162C  5113               	movf	??_update& (0+255),w,b
  1707  00162E  0101               	movlb	1	; () banked
  1708  001630  0101               	movlb	1	; () banked
  1709  001632  5133               	movf	(_screen+8)& (0+255),w,b
  1710  001634  0BFF               	andlw	255
  1711  001636  0101               	movlb	1	; () banked
  1712  001638  0101               	movlb	1	; () banked
  1713  00163A  6F07               	movwf	(?_spi+1)& (0+255),b
  1714  00163C  EC2D  F01B         	call	_spi	;wreg free
  1715                           
  1716                           ;disp.c: 28: break;
  1717  001640  D21A               	goto	l5299
  1718  001642                     l5287:
  1719                           
  1720                           ;disp.c: 30: spi(0b1010, screen.brightness);
  1721  001642  0101               	movlb	1	; () banked
  1722  001644  6F13               	movwf	??_update& (0+255),b
  1723  001646  0E0A               	movlw	10
  1724  001648  0101               	movlb	1	; () banked
  1725  00164A  0101               	movlb	1	; () banked
  1726  00164C  6F06               	movwf	?_spi& (0+255),b
  1727  00164E  0101               	movlb	1	; () banked
  1728  001650  5113               	movf	??_update& (0+255),w,b
  1729  001652  0101               	movlb	1	; () banked
  1730  001654  0101               	movlb	1	; () banked
  1731  001656  5134               	movf	(_screen+9)& (0+255),w,b
  1732  001658  0B0F               	andlw	15
  1733  00165A  0101               	movlb	1	; () banked
  1734  00165C  0101               	movlb	1	; () banked
  1735  00165E  6F07               	movwf	(?_spi+1)& (0+255),b
  1736  001660  EC2D  F01B         	call	_spi	;wreg free
  1737                           
  1738                           ;disp.c: 31: break;
  1739  001664  D208               	goto	l5299
  1740  001666                     l5289:
  1741                           
  1742                           ;disp.c: 33: spi(0b1011, screen.scan);
  1743  001666  0101               	movlb	1	; () banked
  1744  001668  6F13               	movwf	??_update& (0+255),b
  1745  00166A  0E0B               	movlw	11
  1746  00166C  0101               	movlb	1	; () banked
  1747  00166E  0101               	movlb	1	; () banked
  1748  001670  6F06               	movwf	?_spi& (0+255),b
  1749  001672  0101               	movlb	1	; () banked
  1750  001674  5113               	movf	??_update& (0+255),w,b
  1751  001676  0101               	movlb	1	; () banked
  1752  001678  0101               	movlb	1	; () banked
  1753  00167A  3934               	swapf	(_screen+9)& (0+255),w,b
  1754  00167C  0B07               	andlw	7
  1755  00167E  0101               	movlb	1	; () banked
  1756  001680  0101               	movlb	1	; () banked
  1757  001682  6F07               	movwf	(?_spi+1)& (0+255),b
  1758  001684  EC2D  F01B         	call	_spi	;wreg free
  1759                           
  1760                           ;disp.c: 34: break;
  1761  001688  D1F6               	goto	l5299
  1762  00168A                     l5291:
  1763                           
  1764                           ;disp.c: 36: spi(0b1111, screen.test);
  1765  00168A  0101               	movlb	1	; () banked
  1766  00168C  6F13               	movwf	??_update& (0+255),b
  1767  00168E  0E0F               	movlw	15
  1768  001690  0101               	movlb	1	; () banked
  1769  001692  0101               	movlb	1	; () banked
  1770  001694  6F06               	movwf	?_spi& (0+255),b
  1771  001696  0101               	movlb	1	; () banked
  1772  001698  5113               	movf	??_update& (0+255),w,b
  1773  00169A  0E00               	movlw	0
  1774  00169C  0101               	movlb	1	; () banked
  1775  00169E  BF34               	btfsc	(_screen+9)& (0+255),7,b
  1776  0016A0  0E01               	movlw	1
  1777  0016A2  0101               	movlb	1	; () banked
  1778  0016A4  0101               	movlb	1	; () banked
  1779  0016A6  6F07               	movwf	(?_spi+1)& (0+255),b
  1780  0016A8  EC2D  F01B         	call	_spi	;wreg free
  1781                           
  1782                           ;disp.c: 37: break;
  1783  0016AC  D1E4               	goto	l5299
  1784  0016AE                     l5293:
  1785                           
  1786                           ;disp.c: 39: spi(0b1100, !screen.shutdown);
  1787  0016AE  0101               	movlb	1	; () banked
  1788  0016B0  6F13               	movwf	??_update& (0+255),b
  1789  0016B2  0E0C               	movlw	12
  1790  0016B4  0101               	movlb	1	; () banked
  1791  0016B6  0101               	movlb	1	; () banked
  1792  0016B8  6F06               	movwf	?_spi& (0+255),b
  1793  0016BA  0101               	movlb	1	; () banked
  1794  0016BC  5113               	movf	??_update& (0+255),w,b
  1795  0016BE  0101               	movlb	1	; () banked
  1796  0016C0  0101               	movlb	1	; () banked
  1797  0016C2  B135               	btfsc	(_screen+10)& (0+255),0,b
  1798  0016C4  D002               	goto	u2880
  1799  0016C6  0E01               	movlw	1
  1800  0016C8  D001               	goto	u2886
  1801  0016CA                     u2880:
  1802  0016CA  0E00               	movlw	0
  1803  0016CC                     u2886:
  1804  0016CC  0101               	movlb	1	; () banked
  1805  0016CE  0101               	movlb	1	; () banked
  1806  0016D0  6F07               	movwf	(?_spi+1)& (0+255),b
  1807  0016D2  EC2D  F01B         	call	_spi	;wreg free
  1808                           
  1809                           ;disp.c: 40: break;
  1810  0016D6  D1CF               	goto	l5299
  1811  0016D8                     l5297:
  1812  0016D8  C118  F113         	movff	update@cnt,??_update
  1813  0016DC  0E01               	movlw	1
  1814  0016DE  0101               	movlb	1	; () banked
  1815  0016E0  6F14               	movwf	(??_update+1)& (0+255),b
  1816  0016E2  6B15               	clrf	(??_update+2)& (0+255),b
  1817  0016E4  0101               	movlb	1	; () banked
  1818  0016E6  2B13               	incf	??_update& (0+255),f,b
  1819  0016E8  D004               	goto	u2894
  1820  0016EA                     u2895:
  1821  0016EA  90D8               	bcf	status,0,c
  1822  0016EC  0101               	movlb	1	; () banked
  1823  0016EE  3714               	rlcf	(??_update+1)& (0+255),f,b
  1824  0016F0  3715               	rlcf	(??_update+2)& (0+255),f,b
  1825  0016F2                     u2894:
  1826  0016F2  0101               	movlb	1	; () banked
  1827  0016F4  2F13               	decfsz	??_update& (0+255),f,b
  1828  0016F6  D7F9               	goto	u2895
  1829  0016F8  0101               	movlb	1	; () banked
  1830  0016FA  0101               	movlb	1	; () banked
  1831  0016FC  5136               	movf	(_screen+11)& (0+255),w,b
  1832  0016FE  0101               	movlb	1	; () banked
  1833  001700  1714               	andwf	(??_update+1)& (0+255),f,b
  1834  001702  0101               	movlb	1	; () banked
  1835  001704  0101               	movlb	1	; () banked
  1836  001706  5137               	movf	(_screen+12)& (0+255),w,b
  1837  001708  0101               	movlb	1	; () banked
  1838  00170A  1715               	andwf	(??_update+2)& (0+255),f,b
  1839                           
  1840                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 6 sub-sw
      +                          itches
  1841                           ; Switch size 1, requested type "space"
  1842                           ; Number of cases is 6, Range of values is 0 to 32
  1843                           ; switch strategies available:
  1844                           ; Name         Instructions Cycles
  1845                           ; simple_byte           19    10 (average)
  1846                           ;	Chosen strategy is simple_byte
  1847  00170C  0101               	movlb	1	; () banked
  1848  00170E  5115               	movf	(??_update+2)& (0+255),w,b
  1849  001710  0A00               	xorlw	0	; case 0
  1850  001712  B4D8               	btfsc	status,2,c
  1851  001714  D010               	goto	l7285
  1852  001716  0A02               	xorlw	2	; case 2
  1853  001718  B4D8               	btfsc	status,2,c
  1854  00171A  D190               	goto	l7287
  1855  00171C  0A06               	xorlw	6	; case 4
  1856  00171E  B4D8               	btfsc	status,2,c
  1857  001720  D193               	goto	l7289
  1858  001722  0A0C               	xorlw	12	; case 8
  1859  001724  B4D8               	btfsc	status,2,c
  1860  001726  D196               	goto	l7291
  1861  001728  0A18               	xorlw	24	; case 16
  1862  00172A  B4D8               	btfsc	status,2,c
  1863  00172C  D199               	goto	l7293
  1864  00172E  0A30               	xorlw	48	; case 32
  1865  001730  B4D8               	btfsc	status,2,c
  1866  001732  D19C               	goto	l7295
  1867  001734  D1A0               	goto	l5299
  1868  001736                     l7285:
  1869                           
  1870                           ; BSR set to: 1
  1871                           ; Switch size 1, requested type "space"
  1872                           ; Number of cases is 128, Range of values is 1 to 128
  1873                           ; switch strategies available:
  1874                           ; Name         Instructions Cycles
  1875                           ; simple_byte          385   193 (average)
  1876                           ;	Chosen strategy is simple_byte
  1877  001736  0101               	movlb	1	; () banked
  1878  001738  5114               	movf	(??_update+1)& (0+255),w,b
  1879  00173A  0A01               	xorlw	1	; case 1
  1880  00173C  B4D8               	btfsc	status,2,c
  1881  00173E  D749               	goto	l5283
  1882  001740  0A03               	xorlw	3	; case 2
  1883  001742  B4D8               	btfsc	status,2,c
  1884  001744  D746               	goto	l5283
  1885  001746  0A01               	xorlw	1	; case 3
  1886  001748  B4D8               	btfsc	status,2,c
  1887  00174A  D743               	goto	l5283
  1888  00174C  0A07               	xorlw	7	; case 4
  1889  00174E  B4D8               	btfsc	status,2,c
  1890  001750  D740               	goto	l5283
  1891  001752  0A01               	xorlw	1	; case 5
  1892  001754  B4D8               	btfsc	status,2,c
  1893  001756  D73D               	goto	l5283
  1894  001758  0A03               	xorlw	3	; case 6
  1895  00175A  B4D8               	btfsc	status,2,c
  1896  00175C  D73A               	goto	l5283
  1897  00175E  0A01               	xorlw	1	; case 7
  1898  001760  B4D8               	btfsc	status,2,c
  1899  001762  D737               	goto	l5283
  1900  001764  0A0F               	xorlw	15	; case 8
  1901  001766  B4D8               	btfsc	status,2,c
  1902  001768  D734               	goto	l5283
  1903  00176A  0A01               	xorlw	1	; case 9
  1904  00176C  B4D8               	btfsc	status,2,c
  1905  00176E  D731               	goto	l5283
  1906  001770  0A03               	xorlw	3	; case 10
  1907  001772  B4D8               	btfsc	status,2,c
  1908  001774  D72E               	goto	l5283
  1909  001776  0A01               	xorlw	1	; case 11
  1910  001778  B4D8               	btfsc	status,2,c
  1911  00177A  D72B               	goto	l5283
  1912  00177C  0A07               	xorlw	7	; case 12
  1913  00177E  B4D8               	btfsc	status,2,c
  1914  001780  D728               	goto	l5283
  1915  001782  0A01               	xorlw	1	; case 13
  1916  001784  B4D8               	btfsc	status,2,c
  1917  001786  D725               	goto	l5283
  1918  001788  0A03               	xorlw	3	; case 14
  1919  00178A  B4D8               	btfsc	status,2,c
  1920  00178C  D722               	goto	l5283
  1921  00178E  0A01               	xorlw	1	; case 15
  1922  001790  B4D8               	btfsc	status,2,c
  1923  001792  D71F               	goto	l5283
  1924  001794  0A1F               	xorlw	31	; case 16
  1925  001796  B4D8               	btfsc	status,2,c
  1926  001798  D71C               	goto	l5283
  1927  00179A  0A01               	xorlw	1	; case 17
  1928  00179C  B4D8               	btfsc	status,2,c
  1929  00179E  D719               	goto	l5283
  1930  0017A0  0A03               	xorlw	3	; case 18
  1931  0017A2  B4D8               	btfsc	status,2,c
  1932  0017A4  D716               	goto	l5283
  1933  0017A6  0A01               	xorlw	1	; case 19
  1934  0017A8  B4D8               	btfsc	status,2,c
  1935  0017AA  D713               	goto	l5283
  1936  0017AC  0A07               	xorlw	7	; case 20
  1937  0017AE  B4D8               	btfsc	status,2,c
  1938  0017B0  D710               	goto	l5283
  1939  0017B2  0A01               	xorlw	1	; case 21
  1940  0017B4  B4D8               	btfsc	status,2,c
  1941  0017B6  D70D               	goto	l5283
  1942  0017B8  0A03               	xorlw	3	; case 22
  1943  0017BA  B4D8               	btfsc	status,2,c
  1944  0017BC  D70A               	goto	l5283
  1945  0017BE  0A01               	xorlw	1	; case 23
  1946  0017C0  B4D8               	btfsc	status,2,c
  1947  0017C2  D707               	goto	l5283
  1948  0017C4  0A0F               	xorlw	15	; case 24
  1949  0017C6  B4D8               	btfsc	status,2,c
  1950  0017C8  D704               	goto	l5283
  1951  0017CA  0A01               	xorlw	1	; case 25
  1952  0017CC  B4D8               	btfsc	status,2,c
  1953  0017CE  D701               	goto	l5283
  1954  0017D0  0A03               	xorlw	3	; case 26
  1955  0017D2  B4D8               	btfsc	status,2,c
  1956  0017D4  D6FE               	goto	l5283
  1957  0017D6  0A01               	xorlw	1	; case 27
  1958  0017D8  B4D8               	btfsc	status,2,c
  1959  0017DA  D6FB               	goto	l5283
  1960  0017DC  0A07               	xorlw	7	; case 28
  1961  0017DE  B4D8               	btfsc	status,2,c
  1962  0017E0  D6F8               	goto	l5283
  1963  0017E2  0A01               	xorlw	1	; case 29
  1964  0017E4  B4D8               	btfsc	status,2,c
  1965  0017E6  D6F5               	goto	l5283
  1966  0017E8  0A03               	xorlw	3	; case 30
  1967  0017EA  B4D8               	btfsc	status,2,c
  1968  0017EC  D6F2               	goto	l5283
  1969  0017EE  0A01               	xorlw	1	; case 31
  1970  0017F0  B4D8               	btfsc	status,2,c
  1971  0017F2  D6EF               	goto	l5283
  1972  0017F4  0A3F               	xorlw	63	; case 32
  1973  0017F6  B4D8               	btfsc	status,2,c
  1974  0017F8  D6EC               	goto	l5283
  1975  0017FA  0A01               	xorlw	1	; case 33
  1976  0017FC  B4D8               	btfsc	status,2,c
  1977  0017FE  D6E9               	goto	l5283
  1978  001800  0A03               	xorlw	3	; case 34
  1979  001802  B4D8               	btfsc	status,2,c
  1980  001804  D6E6               	goto	l5283
  1981  001806  0A01               	xorlw	1	; case 35
  1982  001808  B4D8               	btfsc	status,2,c
  1983  00180A  D6E3               	goto	l5283
  1984  00180C  0A07               	xorlw	7	; case 36
  1985  00180E  B4D8               	btfsc	status,2,c
  1986  001810  D6E0               	goto	l5283
  1987  001812  0A01               	xorlw	1	; case 37
  1988  001814  B4D8               	btfsc	status,2,c
  1989  001816  D6DD               	goto	l5283
  1990  001818  0A03               	xorlw	3	; case 38
  1991  00181A  B4D8               	btfsc	status,2,c
  1992  00181C  D6DA               	goto	l5283
  1993  00181E  0A01               	xorlw	1	; case 39
  1994  001820  B4D8               	btfsc	status,2,c
  1995  001822  D6D7               	goto	l5283
  1996  001824  0A0F               	xorlw	15	; case 40
  1997  001826  B4D8               	btfsc	status,2,c
  1998  001828  D6D4               	goto	l5283
  1999  00182A  0A01               	xorlw	1	; case 41
  2000  00182C  B4D8               	btfsc	status,2,c
  2001  00182E  D6D1               	goto	l5283
  2002  001830  0A03               	xorlw	3	; case 42
  2003  001832  B4D8               	btfsc	status,2,c
  2004  001834  D6CE               	goto	l5283
  2005  001836  0A01               	xorlw	1	; case 43
  2006  001838  B4D8               	btfsc	status,2,c
  2007  00183A  D6CB               	goto	l5283
  2008  00183C  0A07               	xorlw	7	; case 44
  2009  00183E  B4D8               	btfsc	status,2,c
  2010  001840  D6C8               	goto	l5283
  2011  001842  0A01               	xorlw	1	; case 45
  2012  001844  B4D8               	btfsc	status,2,c
  2013  001846  D6C5               	goto	l5283
  2014  001848  0A03               	xorlw	3	; case 46
  2015  00184A  B4D8               	btfsc	status,2,c
  2016  00184C  D6C2               	goto	l5283
  2017  00184E  0A01               	xorlw	1	; case 47
  2018  001850  B4D8               	btfsc	status,2,c
  2019  001852  D6BF               	goto	l5283
  2020  001854  0A1F               	xorlw	31	; case 48
  2021  001856  B4D8               	btfsc	status,2,c
  2022  001858  D6BC               	goto	l5283
  2023  00185A  0A01               	xorlw	1	; case 49
  2024  00185C  B4D8               	btfsc	status,2,c
  2025  00185E  D6B9               	goto	l5283
  2026  001860  0A03               	xorlw	3	; case 50
  2027  001862  B4D8               	btfsc	status,2,c
  2028  001864  D6B6               	goto	l5283
  2029  001866  0A01               	xorlw	1	; case 51
  2030  001868  B4D8               	btfsc	status,2,c
  2031  00186A  D6B3               	goto	l5283
  2032  00186C  0A07               	xorlw	7	; case 52
  2033  00186E  B4D8               	btfsc	status,2,c
  2034  001870  D6B0               	goto	l5283
  2035  001872  0A01               	xorlw	1	; case 53
  2036  001874  B4D8               	btfsc	status,2,c
  2037  001876  D6AD               	goto	l5283
  2038  001878  0A03               	xorlw	3	; case 54
  2039  00187A  B4D8               	btfsc	status,2,c
  2040  00187C  D6AA               	goto	l5283
  2041  00187E  0A01               	xorlw	1	; case 55
  2042  001880  B4D8               	btfsc	status,2,c
  2043  001882  D6A7               	goto	l5283
  2044  001884  0A0F               	xorlw	15	; case 56
  2045  001886  B4D8               	btfsc	status,2,c
  2046  001888  D6A4               	goto	l5283
  2047  00188A  0A01               	xorlw	1	; case 57
  2048  00188C  B4D8               	btfsc	status,2,c
  2049  00188E  D6A1               	goto	l5283
  2050  001890  0A03               	xorlw	3	; case 58
  2051  001892  B4D8               	btfsc	status,2,c
  2052  001894  D69E               	goto	l5283
  2053  001896  0A01               	xorlw	1	; case 59
  2054  001898  B4D8               	btfsc	status,2,c
  2055  00189A  D69B               	goto	l5283
  2056  00189C  0A07               	xorlw	7	; case 60
  2057  00189E  B4D8               	btfsc	status,2,c
  2058  0018A0  D698               	goto	l5283
  2059  0018A2  0A01               	xorlw	1	; case 61
  2060  0018A4  B4D8               	btfsc	status,2,c
  2061  0018A6  D695               	goto	l5283
  2062  0018A8  0A03               	xorlw	3	; case 62
  2063  0018AA  B4D8               	btfsc	status,2,c
  2064  0018AC  D692               	goto	l5283
  2065  0018AE  0A01               	xorlw	1	; case 63
  2066  0018B0  B4D8               	btfsc	status,2,c
  2067  0018B2  D68F               	goto	l5283
  2068  0018B4  0A7F               	xorlw	127	; case 64
  2069  0018B6  B4D8               	btfsc	status,2,c
  2070  0018B8  D68C               	goto	l5283
  2071  0018BA  0A01               	xorlw	1	; case 65
  2072  0018BC  B4D8               	btfsc	status,2,c
  2073  0018BE  D689               	goto	l5283
  2074  0018C0  0A03               	xorlw	3	; case 66
  2075  0018C2  B4D8               	btfsc	status,2,c
  2076  0018C4  D686               	goto	l5283
  2077  0018C6  0A01               	xorlw	1	; case 67
  2078  0018C8  B4D8               	btfsc	status,2,c
  2079  0018CA  D683               	goto	l5283
  2080  0018CC  0A07               	xorlw	7	; case 68
  2081  0018CE  B4D8               	btfsc	status,2,c
  2082  0018D0  D680               	goto	l5283
  2083  0018D2  0A01               	xorlw	1	; case 69
  2084  0018D4  B4D8               	btfsc	status,2,c
  2085  0018D6  D67D               	goto	l5283
  2086  0018D8  0A03               	xorlw	3	; case 70
  2087  0018DA  B4D8               	btfsc	status,2,c
  2088  0018DC  D67A               	goto	l5283
  2089  0018DE  0A01               	xorlw	1	; case 71
  2090  0018E0  B4D8               	btfsc	status,2,c
  2091  0018E2  D677               	goto	l5283
  2092  0018E4  0A0F               	xorlw	15	; case 72
  2093  0018E6  B4D8               	btfsc	status,2,c
  2094  0018E8  D674               	goto	l5283
  2095  0018EA  0A01               	xorlw	1	; case 73
  2096  0018EC  B4D8               	btfsc	status,2,c
  2097  0018EE  D671               	goto	l5283
  2098  0018F0  0A03               	xorlw	3	; case 74
  2099  0018F2  B4D8               	btfsc	status,2,c
  2100  0018F4  D66E               	goto	l5283
  2101  0018F6  0A01               	xorlw	1	; case 75
  2102  0018F8  B4D8               	btfsc	status,2,c
  2103  0018FA  D66B               	goto	l5283
  2104  0018FC  0A07               	xorlw	7	; case 76
  2105  0018FE  B4D8               	btfsc	status,2,c
  2106  001900  D668               	goto	l5283
  2107  001902  0A01               	xorlw	1	; case 77
  2108  001904  B4D8               	btfsc	status,2,c
  2109  001906  D665               	goto	l5283
  2110  001908  0A03               	xorlw	3	; case 78
  2111  00190A  B4D8               	btfsc	status,2,c
  2112  00190C  D662               	goto	l5283
  2113  00190E  0A01               	xorlw	1	; case 79
  2114  001910  B4D8               	btfsc	status,2,c
  2115  001912  D65F               	goto	l5283
  2116  001914  0A1F               	xorlw	31	; case 80
  2117  001916  B4D8               	btfsc	status,2,c
  2118  001918  D65C               	goto	l5283
  2119  00191A  0A01               	xorlw	1	; case 81
  2120  00191C  B4D8               	btfsc	status,2,c
  2121  00191E  D659               	goto	l5283
  2122  001920  0A03               	xorlw	3	; case 82
  2123  001922  B4D8               	btfsc	status,2,c
  2124  001924  D656               	goto	l5283
  2125  001926  0A01               	xorlw	1	; case 83
  2126  001928  B4D8               	btfsc	status,2,c
  2127  00192A  D653               	goto	l5283
  2128  00192C  0A07               	xorlw	7	; case 84
  2129  00192E  B4D8               	btfsc	status,2,c
  2130  001930  D650               	goto	l5283
  2131  001932  0A01               	xorlw	1	; case 85
  2132  001934  B4D8               	btfsc	status,2,c
  2133  001936  D64D               	goto	l5283
  2134  001938  0A03               	xorlw	3	; case 86
  2135  00193A  B4D8               	btfsc	status,2,c
  2136  00193C  D64A               	goto	l5283
  2137  00193E  0A01               	xorlw	1	; case 87
  2138  001940  B4D8               	btfsc	status,2,c
  2139  001942  D647               	goto	l5283
  2140  001944  0A0F               	xorlw	15	; case 88
  2141  001946  B4D8               	btfsc	status,2,c
  2142  001948  D644               	goto	l5283
  2143  00194A  0A01               	xorlw	1	; case 89
  2144  00194C  B4D8               	btfsc	status,2,c
  2145  00194E  D641               	goto	l5283
  2146  001950  0A03               	xorlw	3	; case 90
  2147  001952  B4D8               	btfsc	status,2,c
  2148  001954  D63E               	goto	l5283
  2149  001956  0A01               	xorlw	1	; case 91
  2150  001958  B4D8               	btfsc	status,2,c
  2151  00195A  D63B               	goto	l5283
  2152  00195C  0A07               	xorlw	7	; case 92
  2153  00195E  B4D8               	btfsc	status,2,c
  2154  001960  D638               	goto	l5283
  2155  001962  0A01               	xorlw	1	; case 93
  2156  001964  B4D8               	btfsc	status,2,c
  2157  001966  D635               	goto	l5283
  2158  001968  0A03               	xorlw	3	; case 94
  2159  00196A  B4D8               	btfsc	status,2,c
  2160  00196C  D632               	goto	l5283
  2161  00196E  0A01               	xorlw	1	; case 95
  2162  001970  B4D8               	btfsc	status,2,c
  2163  001972  D62F               	goto	l5283
  2164  001974  0A3F               	xorlw	63	; case 96
  2165  001976  B4D8               	btfsc	status,2,c
  2166  001978  D62C               	goto	l5283
  2167  00197A  0A01               	xorlw	1	; case 97
  2168  00197C  B4D8               	btfsc	status,2,c
  2169  00197E  D629               	goto	l5283
  2170  001980  0A03               	xorlw	3	; case 98
  2171  001982  B4D8               	btfsc	status,2,c
  2172  001984  D626               	goto	l5283
  2173  001986  0A01               	xorlw	1	; case 99
  2174  001988  B4D8               	btfsc	status,2,c
  2175  00198A  D623               	goto	l5283
  2176  00198C  0A07               	xorlw	7	; case 100
  2177  00198E  B4D8               	btfsc	status,2,c
  2178  001990  D620               	goto	l5283
  2179  001992  0A01               	xorlw	1	; case 101
  2180  001994  B4D8               	btfsc	status,2,c
  2181  001996  D61D               	goto	l5283
  2182  001998  0A03               	xorlw	3	; case 102
  2183  00199A  B4D8               	btfsc	status,2,c
  2184  00199C  D61A               	goto	l5283
  2185  00199E  0A01               	xorlw	1	; case 103
  2186  0019A0  B4D8               	btfsc	status,2,c
  2187  0019A2  D617               	goto	l5283
  2188  0019A4  0A0F               	xorlw	15	; case 104
  2189  0019A6  B4D8               	btfsc	status,2,c
  2190  0019A8  D614               	goto	l5283
  2191  0019AA  0A01               	xorlw	1	; case 105
  2192  0019AC  B4D8               	btfsc	status,2,c
  2193  0019AE  D611               	goto	l5283
  2194  0019B0  0A03               	xorlw	3	; case 106
  2195  0019B2  B4D8               	btfsc	status,2,c
  2196  0019B4  D60E               	goto	l5283
  2197  0019B6  0A01               	xorlw	1	; case 107
  2198  0019B8  B4D8               	btfsc	status,2,c
  2199  0019BA  D60B               	goto	l5283
  2200  0019BC  0A07               	xorlw	7	; case 108
  2201  0019BE  B4D8               	btfsc	status,2,c
  2202  0019C0  D608               	goto	l5283
  2203  0019C2  0A01               	xorlw	1	; case 109
  2204  0019C4  B4D8               	btfsc	status,2,c
  2205  0019C6  D605               	goto	l5283
  2206  0019C8  0A03               	xorlw	3	; case 110
  2207  0019CA  B4D8               	btfsc	status,2,c
  2208  0019CC  D602               	goto	l5283
  2209  0019CE  0A01               	xorlw	1	; case 111
  2210  0019D0  B4D8               	btfsc	status,2,c
  2211  0019D2  D5FF               	goto	l5283
  2212  0019D4  0A1F               	xorlw	31	; case 112
  2213  0019D6  B4D8               	btfsc	status,2,c
  2214  0019D8  D5FC               	goto	l5283
  2215  0019DA  0A01               	xorlw	1	; case 113
  2216  0019DC  B4D8               	btfsc	status,2,c
  2217  0019DE  D5F9               	goto	l5283
  2218  0019E0  0A03               	xorlw	3	; case 114
  2219  0019E2  B4D8               	btfsc	status,2,c
  2220  0019E4  D5F6               	goto	l5283
  2221  0019E6  0A01               	xorlw	1	; case 115
  2222  0019E8  B4D8               	btfsc	status,2,c
  2223  0019EA  D5F3               	goto	l5283
  2224  0019EC  0A07               	xorlw	7	; case 116
  2225  0019EE  B4D8               	btfsc	status,2,c
  2226  0019F0  D5F0               	goto	l5283
  2227  0019F2  0A01               	xorlw	1	; case 117
  2228  0019F4  B4D8               	btfsc	status,2,c
  2229  0019F6  D5ED               	goto	l5283
  2230  0019F8  0A03               	xorlw	3	; case 118
  2231  0019FA  B4D8               	btfsc	status,2,c
  2232  0019FC  D5EA               	goto	l5283
  2233  0019FE  0A01               	xorlw	1	; case 119
  2234  001A00  B4D8               	btfsc	status,2,c
  2235  001A02  D5E7               	goto	l5283
  2236  001A04  0A0F               	xorlw	15	; case 120
  2237  001A06  B4D8               	btfsc	status,2,c
  2238  001A08  D5E4               	goto	l5283
  2239  001A0A  0A01               	xorlw	1	; case 121
  2240  001A0C  B4D8               	btfsc	status,2,c
  2241  001A0E  D5E1               	goto	l5283
  2242  001A10  0A03               	xorlw	3	; case 122
  2243  001A12  B4D8               	btfsc	status,2,c
  2244  001A14  D5DE               	goto	l5283
  2245  001A16  0A01               	xorlw	1	; case 123
  2246  001A18  B4D8               	btfsc	status,2,c
  2247  001A1A  D5DB               	goto	l5283
  2248  001A1C  0A07               	xorlw	7	; case 124
  2249  001A1E  B4D8               	btfsc	status,2,c
  2250  001A20  D5D8               	goto	l5283
  2251  001A22  0A01               	xorlw	1	; case 125
  2252  001A24  B4D8               	btfsc	status,2,c
  2253  001A26  D5D5               	goto	l5283
  2254  001A28  0A03               	xorlw	3	; case 126
  2255  001A2A  B4D8               	btfsc	status,2,c
  2256  001A2C  D5D2               	goto	l5283
  2257  001A2E  0A01               	xorlw	1	; case 127
  2258  001A30  B4D8               	btfsc	status,2,c
  2259  001A32  D5CF               	goto	l5283
  2260  001A34  0AFF               	xorlw	255	; case 128
  2261  001A36  B4D8               	btfsc	status,2,c
  2262  001A38  D5CC               	goto	l5283
  2263  001A3A  D01D               	goto	l5299
  2264  001A3C                     l7287:
  2265                           
  2266                           ; BSR set to: 1
  2267                           ; Switch size 1, requested type "space"
  2268                           ; Number of cases is 1, Range of values is 0 to 0
  2269                           ; switch strategies available:
  2270                           ; Name         Instructions Cycles
  2271                           ; simple_byte            4     3 (average)
  2272                           ;	Chosen strategy is simple_byte
  2273  001A3C  0101               	movlb	1	; () banked
  2274  001A3E  5114               	movf	(??_update+1)& (0+255),w,b
  2275  001A40  0A00               	xorlw	0	; case 0
  2276  001A42  B4D8               	btfsc	status,2,c
  2277  001A44  D5EC               	goto	l5285
  2278  001A46  D017               	goto	l5299
  2279  001A48                     l7289:
  2280                           
  2281                           ; BSR set to: 1
  2282                           ; Switch size 1, requested type "space"
  2283                           ; Number of cases is 1, Range of values is 0 to 0
  2284                           ; switch strategies available:
  2285                           ; Name         Instructions Cycles
  2286                           ; simple_byte            4     3 (average)
  2287                           ;	Chosen strategy is simple_byte
  2288  001A48  0101               	movlb	1	; () banked
  2289  001A4A  5114               	movf	(??_update+1)& (0+255),w,b
  2290  001A4C  0A00               	xorlw	0	; case 0
  2291  001A4E  B4D8               	btfsc	status,2,c
  2292  001A50  D5F8               	goto	l5287
  2293  001A52  D011               	goto	l5299
  2294  001A54                     l7291:
  2295                           
  2296                           ; BSR set to: 1
  2297                           ; Switch size 1, requested type "space"
  2298                           ; Number of cases is 1, Range of values is 0 to 0
  2299                           ; switch strategies available:
  2300                           ; Name         Instructions Cycles
  2301                           ; simple_byte            4     3 (average)
  2302                           ;	Chosen strategy is simple_byte
  2303  001A54  0101               	movlb	1	; () banked
  2304  001A56  5114               	movf	(??_update+1)& (0+255),w,b
  2305  001A58  0A00               	xorlw	0	; case 0
  2306  001A5A  B4D8               	btfsc	status,2,c
  2307  001A5C  D604               	goto	l5289
  2308  001A5E  D00B               	goto	l5299
  2309  001A60                     l7293:
  2310                           
  2311                           ; BSR set to: 1
  2312                           ; Switch size 1, requested type "space"
  2313                           ; Number of cases is 1, Range of values is 0 to 0
  2314                           ; switch strategies available:
  2315                           ; Name         Instructions Cycles
  2316                           ; simple_byte            4     3 (average)
  2317                           ;	Chosen strategy is simple_byte
  2318  001A60  0101               	movlb	1	; () banked
  2319  001A62  5114               	movf	(??_update+1)& (0+255),w,b
  2320  001A64  0A00               	xorlw	0	; case 0
  2321  001A66  B4D8               	btfsc	status,2,c
  2322  001A68  D610               	goto	l5291
  2323  001A6A  D005               	goto	l5299
  2324  001A6C                     l7295:
  2325                           
  2326                           ; BSR set to: 1
  2327                           ; Switch size 1, requested type "space"
  2328                           ; Number of cases is 1, Range of values is 0 to 0
  2329                           ; switch strategies available:
  2330                           ; Name         Instructions Cycles
  2331                           ; simple_byte            4     3 (average)
  2332                           ;	Chosen strategy is simple_byte
  2333  001A6C  0101               	movlb	1	; () banked
  2334  001A6E  5114               	movf	(??_update+1)& (0+255),w,b
  2335  001A70  0A00               	xorlw	0	; case 0
  2336  001A72  B4D8               	btfsc	status,2,c
  2337  001A74  D61C               	goto	l5293
  2338  001A76                     l5299:
  2339                           
  2340                           ;disp.c: 44: screen.changed &= ~(1 << cnt);
  2341  001A76  C118  F113         	movff	update@cnt,??_update
  2342  001A7A  0E01               	movlw	1
  2343  001A7C  0101               	movlb	1	; () banked
  2344  001A7E  6F14               	movwf	(??_update+1)& (0+255),b
  2345  001A80  6B15               	clrf	(??_update+2)& (0+255),b
  2346  001A82  0101               	movlb	1	; () banked
  2347  001A84  2B13               	incf	??_update& (0+255),f,b
  2348  001A86  D004               	goto	u2904
  2349  001A88                     u2905:
  2350  001A88  90D8               	bcf	status,0,c
  2351  001A8A  0101               	movlb	1	; () banked
  2352  001A8C  3714               	rlcf	(??_update+1)& (0+255),f,b
  2353  001A8E  3715               	rlcf	(??_update+2)& (0+255),f,b
  2354  001A90                     u2904:
  2355  001A90  0101               	movlb	1	; () banked
  2356  001A92  2F13               	decfsz	??_update& (0+255),f,b
  2357  001A94  D7F9               	goto	u2905
  2358  001A96  0101               	movlb	1	; () banked
  2359  001A98  1D14               	comf	(??_update+1)& (0+255),w,b
  2360  001A9A  0101               	movlb	1	; () banked
  2361  001A9C  6F16               	movwf	(??_update+3)& (0+255),b
  2362  001A9E  0101               	movlb	1	; () banked
  2363  001AA0  0101               	movlb	1	; () banked
  2364  001AA2  1D15               	comf	(??_update+2)& (0+255),w,b
  2365  001AA4  6F17               	movwf	(??_update+4)& (0+255),b
  2366  001AA6  0101               	movlb	1	; () banked
  2367  001AA8  5116               	movf	(??_update+3)& (0+255),w,b
  2368  001AAA  0101               	movlb	1	; () banked
  2369  001AAC  0101               	movlb	1	; () banked
  2370  001AAE  1736               	andwf	(_screen+11)& (0+255),f,b
  2371  001AB0  0101               	movlb	1	; () banked
  2372  001AB2  5117               	movf	(??_update+4)& (0+255),w,b
  2373  001AB4  0101               	movlb	1	; () banked
  2374  001AB6  0101               	movlb	1	; () banked
  2375  001AB8  1737               	andwf	(_screen+12)& (0+255),f,b
  2376                           
  2377                           ; BSR set to: 1
  2378  001ABA  0101               	movlb	1	; () banked
  2379  001ABC  0101               	movlb	1	; () banked
  2380  001ABE  0718               	decf	update@cnt& (0+255),f,b
  2381  001AC0  D583               	goto	L1
  2382  001AC2                     l140:
  2383                           
  2384                           ; BSR set to: 1
  2385  001AC2  0012               	return	
  2386  001AC4                     __end_of_update:
  2387                           	opt stack 0
  2388                           tblptru	equ	0xFF8
  2389                           tblptrh	equ	0xFF7
  2390                           tblptrl	equ	0xFF6
  2391                           tablat	equ	0xFF5
  2392                           prodh	equ	0xFF4
  2393                           prodl	equ	0xFF3
  2394                           postinc0	equ	0xFEE
  2395                           wreg	equ	0xFE8
  2396                           postdec1	equ	0xFE5
  2397                           fsr1l	equ	0xFE1
  2398                           indf2	equ	0xFDF
  2399                           fsr2h	equ	0xFDA
  2400                           fsr2l	equ	0xFD9
  2401                           status	equ	0xFD8
  2402                           
  2403 ;; *************** function _writeDigit *****************
  2404 ;; Defined at:
  2405 ;;		line 109 in file "disp.c"
  2406 ;; Parameters:    Size  Location     Type
  2407 ;;  digit           1   14[BANK1 ] unsigned char 
  2408 ;;  segs            1   15[BANK1 ] unsigned char 
  2409 ;; Auto vars:     Size  Location     Type
  2410 ;;  cnt             1   18[BANK1 ] char 
  2411 ;;  dig             1   17[BANK1 ] unsigned char 
  2412 ;; Return value:  Size  Location     Type
  2413 ;;		None               void
  2414 ;; Registers used:
  2415 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  2416 ;; Tracked objects:
  2417 ;;		On entry : 0/0
  2418 ;;		On exit  : 0/0
  2419 ;;		Unchanged: 0/0
  2420 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2421 ;;      Params:         0       0       2       0       0       0       0       0       0
  2422 ;;      Locals:         0       0       2       0       0       0       0       0       0
  2423 ;;      Temps:          0       0       1       0       0       0       0       0       0
  2424 ;;      Totals:         0       0       5       0       0       0       0       0       0
  2425 ;;Total ram usage:        5 bytes
  2426 ;; Hardware stack levels used:    1
  2427 ;; Hardware stack levels required when called:   10
  2428 ;; This function calls:
  2429 ;;		_spi
  2430 ;;		_log2
  2431 ;;		_rotate
  2432 ;; This function is called by:
  2433 ;;		_update
  2434 ;; This function uses a non-reentrant model
  2435 ;;
  2436                           
  2437                           	psect	text2
  2438  003DE8                     __ptext2:
  2439                           	opt stack 0
  2440  003DE8                     _writeDigit:
  2441                           	opt stack 19
  2442                           
  2443                           ;disp.c: 110: uint8_t dig = (uint8_t) log2(digit);
  2444                           
  2445                           ; BSR set to: 1
  2446                           ;incstack = 0
  2447                           ;incstack = 0
  2448  003DE8  0101               	movlb	1	; () banked
  2449  003DEA  0101               	movlb	1	; () banked
  2450  003DEC  510E               	movf	writeDigit@digit& (0+255),w,b
  2451  003DEE  0101               	movlb	1	; () banked
  2452  003DF0  0101               	movlb	1	; () banked
  2453  003DF2  6F00               	movwf	?_log2& (0+255),b
  2454  003DF4  0101               	movlb	1	; () banked
  2455  003DF6  6B01               	clrf	(?_log2+1)& (0+255),b
  2456  003DF8  0101               	movlb	1	; () banked
  2457  003DFA  6B02               	clrf	(?_log2+2)& (0+255),b
  2458  003DFC  0101               	movlb	1	; () banked
  2459  003DFE  6B03               	clrf	(?_log2+3)& (0+255),b
  2460  003E00  ECA7  F020         	call	_log2	;wreg free
  2461  003E04  0101               	movlb	1	; () banked
  2462  003E06  0101               	movlb	1	; () banked
  2463  003E08  5100               	movf	?_log2& (0+255),w,b
  2464  003E0A  0101               	movlb	1	; () banked
  2465  003E0C  0101               	movlb	1	; () banked
  2466  003E0E  6F11               	movwf	writeDigit@dig& (0+255),b
  2467                           
  2468                           ; BSR set to: 1
  2469                           ;disp.c: 111: screen.digits.screen[dig].bits = segs;
  2470  003E10  0101               	movlb	1	; () banked
  2471  003E12  0101               	movlb	1	; () banked
  2472  003E14  5111               	movf	writeDigit@dig& (0+255),w,b
  2473  003E16  0D01               	mullw	1
  2474  003E18  0101               	movlb	1	; () banked
  2475  003E1A  0E2B               	movlw	low _screen
  2476  003E1C  24F3               	addwf	prodl,w,c
  2477  003E1E  6ED9               	movwf	fsr2l,c
  2478  003E20  0101               	movlb	1	; () banked
  2479  003E22  0E01               	movlw	high _screen
  2480  003E24  20F4               	addwfc	prodh,w,c
  2481  003E26  6EDA               	movwf	fsr2h,c
  2482  003E28  0101               	movlb	1	; () banked
  2483  003E2A  C10F  FFDF         	movff	writeDigit@segs,indf2
  2484                           
  2485                           ; BSR set to: 1
  2486                           ;disp.c: 114: int8_t cnt;
  2487                           ;disp.c: 115: for (cnt = 7; cnt >= 0; cnt--)
  2488  003E2E  0101               	movlb	1	; () banked
  2489  003E30  6F10               	movwf	??_writeDigit& (0+255),b
  2490  003E32  0E07               	movlw	7
  2491  003E34  0101               	movlb	1	; () banked
  2492  003E36  0101               	movlb	1	; () banked
  2493  003E38  6F12               	movwf	writeDigit@cnt& (0+255),b
  2494  003E3A  0101               	movlb	1	; () banked
  2495  003E3C  5110               	movf	??_writeDigit& (0+255),w,b
  2496  003E3E                     
  2497                           ; BSR set to: 1
  2498  003E3E  0101               	movlb	1	; () banked
  2499  003E40  0101               	movlb	1	; () banked
  2500  003E42  BF12               	btfsc	writeDigit@cnt& (0+255),7,b
  2501  003E44  D013               	goto	l170
  2502                           
  2503                           ; BSR set to: 1
  2504                           ;disp.c: 116: {
  2505                           ;disp.c: 118: spi(cnt + 1, rotate(cnt));
  2506                           
  2507                           ; BSR set to: 1
  2508                           
  2509                           ; BSR set to: 1
  2510  003E46  0101               	movlb	1	; () banked
  2511  003E48  0101               	movlb	1	; () banked
  2512  003E4A  2912               	incf	writeDigit@cnt& (0+255),w,b
  2513  003E4C  0101               	movlb	1	; () banked
  2514  003E4E  0101               	movlb	1	; () banked
  2515  003E50  6F06               	movwf	?_spi& (0+255),b
  2516  003E52  C112  F100         	movff	writeDigit@cnt,?_rotate
  2517  003E56  EC1B  F01E         	call	_rotate	;wreg free
  2518  003E5A  0101               	movlb	1	; () banked
  2519  003E5C  0101               	movlb	1	; () banked
  2520  003E5E  6F07               	movwf	(?_spi+1)& (0+255),b
  2521  003E60  EC2D  F01B         	call	_spi	;wreg free
  2522  003E64  0101               	movlb	1	; () banked
  2523  003E66  0101               	movlb	1	; () banked
  2524  003E68  0712               	decf	writeDigit@cnt& (0+255),f,b
  2525  003E6A  D7E9               	goto	L2
  2526  003E6C                     l170:
  2527                           
  2528                           ; BSR set to: 1
  2529  003E6C  0012               	return	
  2530  003E6E                     __end_of_writeDigit:
  2531                           	opt stack 0
  2532                           tblptru	equ	0xFF8
  2533                           tblptrh	equ	0xFF7
  2534                           tblptrl	equ	0xFF6
  2535                           tablat	equ	0xFF5
  2536                           prodh	equ	0xFF4
  2537                           prodl	equ	0xFF3
  2538                           postinc0	equ	0xFEE
  2539                           wreg	equ	0xFE8
  2540                           postdec1	equ	0xFE5
  2541                           fsr1l	equ	0xFE1
  2542                           indf2	equ	0xFDF
  2543                           fsr2h	equ	0xFDA
  2544                           fsr2l	equ	0xFD9
  2545                           status	equ	0xFD8
  2546                           
  2547 ;; *************** function _rotate *****************
  2548 ;; Defined at:
  2549 ;;		line 206 in file "disp.c"
  2550 ;; Parameters:    Size  Location     Type
  2551 ;;  seg             1    0[BANK1 ] unsigned char 
  2552 ;; Auto vars:     Size  Location     Type
  2553 ;;  cnt             1    5[BANK1 ] char 
  2554 ;;  ret             1    4[BANK1 ] unsigned char 
  2555 ;; Return value:  Size  Location     Type
  2556 ;;                  1    wreg      unsigned char 
  2557 ;; Registers used:
  2558 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  2559 ;; Tracked objects:
  2560 ;;		On entry : 0/0
  2561 ;;		On exit  : 0/0
  2562 ;;		Unchanged: 0/0
  2563 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2564 ;;      Params:         0       0       1       0       0       0       0       0       0
  2565 ;;      Locals:         0       0       2       0       0       0       0       0       0
  2566 ;;      Temps:          0       0       3       0       0       0       0       0       0
  2567 ;;      Totals:         0       0       6       0       0       0       0       0       0
  2568 ;;Total ram usage:        6 bytes
  2569 ;; Hardware stack levels used:    1
  2570 ;; Hardware stack levels required when called:    8
  2571 ;; This function calls:
  2572 ;;		Nothing
  2573 ;; This function is called by:
  2574 ;;		_writeDigit
  2575 ;; This function uses a non-reentrant model
  2576 ;;
  2577                           
  2578                           	psect	text3
  2579  003C36                     __ptext3:
  2580                           	opt stack 0
  2581  003C36                     _rotate:
  2582                           	opt stack 20
  2583                           
  2584                           ;disp.c: 207: uint8_t ret = 0;
  2585                           
  2586                           ; BSR set to: 1
  2587                           ;incstack = 0
  2588                           ;incstack = 0
  2589  003C36  0101               	movlb	1	; () banked
  2590  003C38  6F01               	movwf	??_rotate& (0+255),b
  2591  003C3A  0E00               	movlw	0
  2592  003C3C  0101               	movlb	1	; () banked
  2593  003C3E  0101               	movlb	1	; () banked
  2594  003C40  6F04               	movwf	rotate@ret& (0+255),b
  2595  003C42  0101               	movlb	1	; () banked
  2596  003C44  5101               	movf	??_rotate& (0+255),w,b
  2597                           
  2598                           ;disp.c: 208: int8_t cnt;
  2599                           ;disp.c: 209: for (cnt = 7; cnt >= 0; cnt--)
  2600  003C46  0101               	movlb	1	; () banked
  2601  003C48  6F01               	movwf	??_rotate& (0+255),b
  2602  003C4A  0E07               	movlw	7
  2603  003C4C  0101               	movlb	1	; () banked
  2604  003C4E  0101               	movlb	1	; () banked
  2605  003C50  6F05               	movwf	rotate@cnt& (0+255),b
  2606  003C52  0101               	movlb	1	; () banked
  2607  003C54  5101               	movf	??_rotate& (0+255),w,b
  2608  003C56                     
  2609                           ; BSR set to: 1
  2610  003C56  0101               	movlb	1	; () banked
  2611  003C58  0101               	movlb	1	; () banked
  2612  003C5A  BF05               	btfsc	rotate@cnt& (0+255),7,b
  2613  003C5C  D031               	goto	l5505
  2614                           
  2615                           ; BSR set to: 1
  2616                           ;disp.c: 210: {
  2617                           ;disp.c: 211: ret |= ((screen.digits.screen[cnt].bits >> seg) & 1) << cnt;
  2618                           
  2619                           ; BSR set to: 1
  2620                           
  2621                           ; BSR set to: 1
  2622  003C5E  C105  F101         	movff	rotate@cnt,??_rotate
  2623  003C62  C100  F102         	movff	rotate@seg,??_rotate+1
  2624  003C66  0101               	movlb	1	; () banked
  2625  003C68  0101               	movlb	1	; () banked
  2626  003C6A  5105               	movf	rotate@cnt& (0+255),w,b
  2627  003C6C  0D01               	mullw	1
  2628  003C6E  0101               	movlb	1	; () banked
  2629  003C70  0E2B               	movlw	low _screen
  2630  003C72  24F3               	addwf	prodl,w,c
  2631  003C74  6ED9               	movwf	fsr2l,c
  2632  003C76  0101               	movlb	1	; () banked
  2633  003C78  0E01               	movlw	high _screen
  2634  003C7A  20F4               	addwfc	prodh,w,c
  2635  003C7C  6EDA               	movwf	fsr2h,c
  2636  003C7E  50DF               	movf	indf2,w,c
  2637  003C80  0101               	movlb	1	; () banked
  2638  003C82  6F03               	movwf	(??_rotate+2)& (0+255),b
  2639  003C84  0101               	movlb	1	; () banked
  2640  003C86  2B02               	incf	(??_rotate+1)& (0+255),f,b
  2641  003C88  D003               	goto	u3024
  2642  003C8A                     u3025:
  2643  003C8A  0101               	movlb	1	; () banked
  2644  003C8C  90D8               	bcf	status,0,c
  2645  003C8E  3303               	rrcf	(??_rotate+2)& (0+255),f,b
  2646  003C90                     u3024:
  2647  003C90  0101               	movlb	1	; () banked
  2648  003C92  2F02               	decfsz	(??_rotate+1)& (0+255),f,b
  2649  003C94  D7FA               	goto	u3025
  2650  003C96  0E01               	movlw	1
  2651  003C98  0101               	movlb	1	; () banked
  2652  003C9A  1703               	andwf	(??_rotate+2)& (0+255),f,b
  2653  003C9C  0101               	movlb	1	; () banked
  2654  003C9E  2B01               	incf	??_rotate& (0+255),f,b
  2655  003CA0  D003               	goto	u3034
  2656  003CA2                     u3035:
  2657  003CA2  0101               	movlb	1	; () banked
  2658  003CA4  90D8               	bcf	status,0,c
  2659  003CA6  3703               	rlcf	(??_rotate+2)& (0+255),f,b
  2660  003CA8                     u3034:
  2661  003CA8  0101               	movlb	1	; () banked
  2662  003CAA  2F01               	decfsz	??_rotate& (0+255),f,b
  2663  003CAC  D7FA               	goto	u3035
  2664  003CAE  0101               	movlb	1	; () banked
  2665  003CB0  5103               	movf	(??_rotate+2)& (0+255),w,b
  2666  003CB2  0101               	movlb	1	; () banked
  2667  003CB4  0101               	movlb	1	; () banked
  2668  003CB6  1304               	iorwf	rotate@ret& (0+255),f,b
  2669                           
  2670                           ; BSR set to: 1
  2671  003CB8  0101               	movlb	1	; () banked
  2672  003CBA  0101               	movlb	1	; () banked
  2673  003CBC  0705               	decf	rotate@cnt& (0+255),f,b
  2674  003CBE  D7CB               	goto	L3
  2675  003CC0                     l5505:
  2676                           
  2677                           ; BSR set to: 1
  2678                           ;disp.c: 212: }
  2679                           ;disp.c: 213: return ret;
  2680  003CC0  0101               	movlb	1	; () banked
  2681  003CC2  0101               	movlb	1	; () banked
  2682  003CC4  5104               	movf	rotate@ret& (0+255),w,b
  2683                           
  2684                           ; BSR set to: 1
  2685                           
  2686                           ; BSR set to: 1
  2687  003CC6  0012               	return	
  2688  003CC8                     __end_of_rotate:
  2689                           	opt stack 0
  2690                           tblptru	equ	0xFF8
  2691                           tblptrh	equ	0xFF7
  2692                           tblptrl	equ	0xFF6
  2693                           tablat	equ	0xFF5
  2694                           prodh	equ	0xFF4
  2695                           prodl	equ	0xFF3
  2696                           postinc0	equ	0xFEE
  2697                           wreg	equ	0xFE8
  2698                           postdec1	equ	0xFE5
  2699                           fsr1l	equ	0xFE1
  2700                           indf2	equ	0xFDF
  2701                           fsr2h	equ	0xFDA
  2702                           fsr2l	equ	0xFD9
  2703                           status	equ	0xFD8
  2704                           
  2705 ;; *************** function _log2 *****************
  2706 ;; Defined at:
  2707 ;;		line 48 in file "defs.c"
  2708 ;; Parameters:    Size  Location     Type
  2709 ;;  num             4    0[BANK1 ] unsigned long 
  2710 ;; Auto vars:     Size  Location     Type
  2711 ;;  log2Val         4    4[BANK1 ] unsigned long 
  2712 ;; Return value:  Size  Location     Type
  2713 ;;                  4    0[BANK1 ] unsigned long 
  2714 ;; Registers used:
  2715 ;;		wreg, status,2, status,0
  2716 ;; Tracked objects:
  2717 ;;		On entry : 0/0
  2718 ;;		On exit  : 0/0
  2719 ;;		Unchanged: 0/0
  2720 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2721 ;;      Params:         0       0       4       0       0       0       0       0       0
  2722 ;;      Locals:         0       0       4       0       0       0       0       0       0
  2723 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2724 ;;      Totals:         0       0       8       0       0       0       0       0       0
  2725 ;;Total ram usage:        8 bytes
  2726 ;; Hardware stack levels used:    1
  2727 ;; Hardware stack levels required when called:    8
  2728 ;; This function calls:
  2729 ;;		Nothing
  2730 ;; This function is called by:
  2731 ;;		_writeDigit
  2732 ;; This function uses a non-reentrant model
  2733 ;;
  2734                           
  2735                           	psect	text4
  2736  00414E                     __ptext4:
  2737                           	opt stack 0
  2738  00414E                     _log2:
  2739                           	opt stack 20
  2740                           
  2741                           ;defs.c: 49: uint32_t log2Val = 0;
  2742                           
  2743                           ; BSR set to: 1
  2744                           ;incstack = 0
  2745                           ;incstack = 0
  2746  00414E  0E00               	movlw	0
  2747  004150  0101               	movlb	1	; () banked
  2748  004152  0101               	movlb	1	; () banked
  2749  004154  6F04               	movwf	log2@log2Val& (0+255),b
  2750  004156  0E00               	movlw	0
  2751  004158  0101               	movlb	1	; () banked
  2752  00415A  6F05               	movwf	(log2@log2Val+1)& (0+255),b
  2753  00415C  0E00               	movlw	0
  2754  00415E  0101               	movlb	1	; () banked
  2755  004160  6F06               	movwf	(log2@log2Val+2)& (0+255),b
  2756  004162  0E00               	movlw	0
  2757  004164  0101               	movlb	1	; () banked
  2758  004166  6F07               	movwf	(log2@log2Val+3)& (0+255),b
  2759                           
  2760                           ;defs.c: 50: while (num >>= 1) log2Val++;
  2761  004168  D00D               	goto	l523
  2762  00416A                     l5491:
  2763                           
  2764                           ; BSR set to: 1
  2765  00416A  0E01               	movlw	1
  2766  00416C  0101               	movlb	1	; () banked
  2767  00416E  0101               	movlb	1	; () banked
  2768  004170  2704               	addwf	log2@log2Val& (0+255),f,b
  2769  004172  0E00               	movlw	0
  2770  004174  0101               	movlb	1	; () banked
  2771  004176  2305               	addwfc	(log2@log2Val+1)& (0+255),f,b
  2772  004178  0E00               	movlw	0
  2773  00417A  0101               	movlb	1	; () banked
  2774  00417C  2306               	addwfc	(log2@log2Val+2)& (0+255),f,b
  2775  00417E  0E00               	movlw	0
  2776  004180  0101               	movlb	1	; () banked
  2777  004182  2307               	addwfc	(log2@log2Val+3)& (0+255),f,b
  2778  004184                     l523:
  2779                           
  2780                           ; BSR set to: 1
  2781  004184  0101               	movlb	1	; () banked
  2782  004186  90D8               	bcf	status,0,c
  2783  004188  0101               	movlb	1	; () banked
  2784  00418A  3303               	rrcf	(log2@num+3)& (0+255),f,b
  2785  00418C  0101               	movlb	1	; () banked
  2786  00418E  3302               	rrcf	(log2@num+2)& (0+255),f,b
  2787  004190  0101               	movlb	1	; () banked
  2788  004192  3301               	rrcf	(log2@num+1)& (0+255),f,b
  2789  004194  0101               	movlb	1	; () banked
  2790  004196  3300               	rrcf	log2@num& (0+255),f,b
  2791  004198  0101               	movlb	1	; () banked
  2792  00419A  5103               	movf	(log2@num+3)& (0+255),w,b
  2793  00419C  1100               	iorwf	log2@num& (0+255),w,b
  2794  00419E  1101               	iorwf	(log2@num+1)& (0+255),w,b
  2795  0041A0  1102               	iorwf	(log2@num+2)& (0+255),w,b
  2796  0041A2  A4D8               	btfss	status,2,c
  2797  0041A4  D7E2               	goto	l5491
  2798                           
  2799                           ; BSR set to: 1
  2800                           ;defs.c: 51: return log2Val;
  2801  0041A6  C104  F100         	movff	log2@log2Val,?_log2
  2802  0041AA  C105  F101         	movff	log2@log2Val+1,?_log2+1
  2803  0041AE  C106  F102         	movff	log2@log2Val+2,?_log2+2
  2804  0041B2  C107  F103         	movff	log2@log2Val+3,?_log2+3
  2805                           
  2806                           ; BSR set to: 1
  2807  0041B6  0012               	return	
  2808  0041B8                     __end_of_log2:
  2809                           	opt stack 0
  2810                           tblptru	equ	0xFF8
  2811                           tblptrh	equ	0xFF7
  2812                           tblptrl	equ	0xFF6
  2813                           tablat	equ	0xFF5
  2814                           prodh	equ	0xFF4
  2815                           prodl	equ	0xFF3
  2816                           postinc0	equ	0xFEE
  2817                           wreg	equ	0xFE8
  2818                           postdec1	equ	0xFE5
  2819                           fsr1l	equ	0xFE1
  2820                           indf2	equ	0xFDF
  2821                           fsr2h	equ	0xFDA
  2822                           fsr2l	equ	0xFD9
  2823                           status	equ	0xFD8
  2824                           
  2825 ;; *************** function _spi *****************
  2826 ;; Defined at:
  2827 ;;		line 87 in file "disp.c"
  2828 ;; Parameters:    Size  Location     Type
  2829 ;;  addr            1    6[BANK1 ] unsigned char 
  2830 ;;  data            1    7[BANK1 ] unsigned char 
  2831 ;; Auto vars:     Size  Location     Type
  2832 ;;  send            2   11[BANK1 ] unsigned int 
  2833 ;;  cnt             1   13[BANK1 ] char 
  2834 ;; Return value:  Size  Location     Type
  2835 ;;		None               void
  2836 ;; Registers used:
  2837 ;;		wreg, status,2, status,0, cstack
  2838 ;; Tracked objects:
  2839 ;;		On entry : 0/0
  2840 ;;		On exit  : 0/0
  2841 ;;		Unchanged: 0/0
  2842 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2843 ;;      Params:         0       0       2       0       0       0       0       0       0
  2844 ;;      Locals:         0       0       3       0       0       0       0       0       0
  2845 ;;      Temps:          0       0       3       0       0       0       0       0       0
  2846 ;;      Totals:         0       0       8       0       0       0       0       0       0
  2847 ;;Total ram usage:        8 bytes
  2848 ;; Hardware stack levels used:    1
  2849 ;; Hardware stack levels required when called:    9
  2850 ;; This function calls:
  2851 ;;		_wait
  2852 ;; This function is called by:
  2853 ;;		_update
  2854 ;;		_writeDigit
  2855 ;; This function uses a non-reentrant model
  2856 ;;
  2857                           
  2858                           	psect	text5
  2859  00365A                     __ptext5:
  2860                           	opt stack 0
  2861  00365A                     _spi:
  2862                           	opt stack 20
  2863                           
  2864                           ;disp.c: 88: uint16_t send = (addr << 8) | data;
  2865                           
  2866                           ; BSR set to: 1
  2867                           ;incstack = 0
  2868                           ;incstack = 0
  2869  00365A  0101               	movlb	1	; () banked
  2870  00365C  0101               	movlb	1	; () banked
  2871  00365E  5107               	movf	spi@data& (0+255),w,b
  2872  003660  0101               	movlb	1	; () banked
  2873  003662  C106  F108         	movff	spi@addr,??_spi
  2874  003666  0101               	movlb	1	; () banked
  2875  003668  6B09               	clrf	(??_spi+1)& (0+255),b
  2876  00366A  C108  F109         	movff	??_spi,??_spi+1
  2877  00366E  0101               	movlb	1	; () banked
  2878  003670  6B08               	clrf	??_spi& (0+255),b
  2879  003672  0101               	movlb	1	; () banked
  2880  003674  1108               	iorwf	??_spi& (0+255),w,b
  2881  003676  0101               	movlb	1	; () banked
  2882  003678  0101               	movlb	1	; () banked
  2883  00367A  6F0B               	movwf	spi@send& (0+255),b
  2884  00367C  0101               	movlb	1	; () banked
  2885  00367E  5109               	movf	(??_spi+1)& (0+255),w,b
  2886  003680  0101               	movlb	1	; () banked
  2887  003682  6F0C               	movwf	(spi@send+1)& (0+255),b
  2888                           
  2889                           ; BSR set to: 1
  2890                           ;disp.c: 89: LATA4 = 0;
  2891  003684  9889               	bcf	3977,4,c	;volatile
  2892                           
  2893                           ; BSR set to: 1
  2894                           ;disp.c: 90: LATA1 = 0;
  2895  003686  9289               	bcf	3977,1,c	;volatile
  2896                           
  2897                           ; BSR set to: 1
  2898                           ;disp.c: 91: LATA3 = 0;
  2899  003688  9689               	bcf	3977,3,c	;volatile
  2900                           
  2901                           ; BSR set to: 1
  2902                           ;disp.c: 92: int8_t cnt;
  2903                           ;disp.c: 93: for (cnt = 15; cnt >= 0; cnt--)
  2904  00368A  0101               	movlb	1	; () banked
  2905  00368C  6F08               	movwf	??_spi& (0+255),b
  2906  00368E  0E0F               	movlw	15
  2907  003690  0101               	movlb	1	; () banked
  2908  003692  0101               	movlb	1	; () banked
  2909  003694  6F0D               	movwf	spi@cnt& (0+255),b
  2910  003696  0101               	movlb	1	; () banked
  2911  003698  5108               	movf	??_spi& (0+255),w,b
  2912  00369A                     
  2913                           ; BSR set to: 1
  2914  00369A  0101               	movlb	1	; () banked
  2915  00369C  0101               	movlb	1	; () banked
  2916  00369E  BF0D               	btfsc	spi@cnt& (0+255),7,b
  2917  0036A0  D041               	goto	l164
  2918                           
  2919                           ; BSR set to: 1
  2920                           ;disp.c: 94: {
  2921                           ;disp.c: 95: LATA1 = 0x1 & (send >> cnt);
  2922                           
  2923                           ; BSR set to: 1
  2924                           
  2925                           ; BSR set to: 1
  2926  0036A2  C10D  F108         	movff	spi@cnt,??_spi
  2927  0036A6  0101               	movlb	1	; () banked
  2928  0036A8  C10B  F109         	movff	spi@send,??_spi+1
  2929  0036AC  0101               	movlb	1	; () banked
  2930  0036AE  C10C  F10A         	movff	spi@send+1,??_spi+2
  2931  0036B2  0101               	movlb	1	; () banked
  2932  0036B4  2B08               	incf	??_spi& (0+255),f,b
  2933  0036B6  D004               	goto	u2954
  2934  0036B8                     u2955:
  2935  0036B8  0101               	movlb	1	; () banked
  2936  0036BA  90D8               	bcf	status,0,c
  2937  0036BC  330A               	rrcf	(??_spi+2)& (0+255),f,b
  2938  0036BE  3309               	rrcf	(??_spi+1)& (0+255),f,b
  2939  0036C0                     u2954:
  2940  0036C0  0101               	movlb	1	; () banked
  2941  0036C2  2F08               	decfsz	??_spi& (0+255),f,b
  2942  0036C4  D7F9               	goto	u2955
  2943  0036C6  0101               	movlb	1	; () banked
  2944  0036C8  3109               	rrcf	(??_spi+1)& (0+255),w,b
  2945  0036CA  0101               	movlb	1	; () banked
  2946  0036CC  A0D8               	btfss	status,0,c
  2947  0036CE  D001               	bra	u2965
  2948  0036D0  8289               	bsf	3977,1,c	;volatile
  2949  0036D2                     u2965:
  2950  0036D2  0101               	movlb	1	; () banked
  2951  0036D4  B0D8               	btfsc	status,0,c
  2952  0036D6  D001               	bra	u2966
  2953  0036D8  9289               	bcf	3977,1,c	;volatile
  2954  0036DA                     u2966:
  2955                           
  2956                           ; BSR set to: 1
  2957                           ;disp.c: 96: wait(0);
  2958  0036DA  0E00               	movlw	0
  2959  0036DC  0101               	movlb	1	; () banked
  2960  0036DE  0101               	movlb	1	; () banked
  2961  0036E0  6F00               	movwf	?_wait& (0+255),b
  2962  0036E2  0E00               	movlw	0
  2963  0036E4  0101               	movlb	1	; () banked
  2964  0036E6  6F01               	movwf	(?_wait+1)& (0+255),b
  2965  0036E8  0E00               	movlw	0
  2966  0036EA  0101               	movlb	1	; () banked
  2967  0036EC  6F02               	movwf	(?_wait+2)& (0+255),b
  2968  0036EE  0E00               	movlw	0
  2969  0036F0  0101               	movlb	1	; () banked
  2970  0036F2  6F03               	movwf	(?_wait+3)& (0+255),b
  2971  0036F4  EC7A  F023         	call	_wait	;wreg free
  2972                           
  2973                           ;disp.c: 97: LATA3 = 1;
  2974  0036F8  8689               	bsf	3977,3,c	;volatile
  2975                           
  2976                           ;disp.c: 98: wait(0);
  2977  0036FA  0E00               	movlw	0
  2978  0036FC  0101               	movlb	1	; () banked
  2979  0036FE  0101               	movlb	1	; () banked
  2980  003700  6F00               	movwf	?_wait& (0+255),b
  2981  003702  0E00               	movlw	0
  2982  003704  0101               	movlb	1	; () banked
  2983  003706  6F01               	movwf	(?_wait+1)& (0+255),b
  2984  003708  0E00               	movlw	0
  2985  00370A  0101               	movlb	1	; () banked
  2986  00370C  6F02               	movwf	(?_wait+2)& (0+255),b
  2987  00370E  0E00               	movlw	0
  2988  003710  0101               	movlb	1	; () banked
  2989  003712  6F03               	movwf	(?_wait+3)& (0+255),b
  2990  003714  EC7A  F023         	call	_wait	;wreg free
  2991                           
  2992                           ;disp.c: 99: LATA3 = 0;
  2993  003718  9689               	bcf	3977,3,c	;volatile
  2994                           
  2995                           ;disp.c: 100: LATA1 = 0;
  2996  00371A  9289               	bcf	3977,1,c	;volatile
  2997  00371C  0101               	movlb	1	; () banked
  2998  00371E  0101               	movlb	1	; () banked
  2999  003720  070D               	decf	spi@cnt& (0+255),f,b
  3000  003722  D7BB               	goto	L4
  3001  003724                     l164:
  3002                           
  3003                           ; BSR set to: 1
  3004                           ;disp.c: 101: }
  3005                           ;disp.c: 102: LATA4 = 1;
  3006  003724  8889               	bsf	3977,4,c	;volatile
  3007                           
  3008                           ;disp.c: 103: LATA3 = 0;
  3009  003726  9689               	bcf	3977,3,c	;volatile
  3010                           
  3011                           ;disp.c: 104: LATA1 = 0;
  3012  003728  9289               	bcf	3977,1,c	;volatile
  3013                           
  3014                           ; BSR set to: 1
  3015                           ;disp.c: 105: wait(0);
  3016  00372A  0E00               	movlw	0
  3017  00372C  0101               	movlb	1	; () banked
  3018  00372E  0101               	movlb	1	; () banked
  3019  003730  6F00               	movwf	?_wait& (0+255),b
  3020  003732  0E00               	movlw	0
  3021  003734  0101               	movlb	1	; () banked
  3022  003736  6F01               	movwf	(?_wait+1)& (0+255),b
  3023  003738  0E00               	movlw	0
  3024  00373A  0101               	movlb	1	; () banked
  3025  00373C  6F02               	movwf	(?_wait+2)& (0+255),b
  3026  00373E  0E00               	movlw	0
  3027  003740  0101               	movlb	1	; () banked
  3028  003742  6F03               	movwf	(?_wait+3)& (0+255),b
  3029  003744  EC7A  F023         	call	_wait	;wreg free
  3030  003748  0012               	return	
  3031  00374A                     __end_of_spi:
  3032                           	opt stack 0
  3033                           tblptru	equ	0xFF8
  3034                           tblptrh	equ	0xFF7
  3035                           tblptrl	equ	0xFF6
  3036                           tablat	equ	0xFF5
  3037                           prodh	equ	0xFF4
  3038                           prodl	equ	0xFF3
  3039                           postinc0	equ	0xFEE
  3040                           wreg	equ	0xFE8
  3041                           postdec1	equ	0xFE5
  3042                           fsr1l	equ	0xFE1
  3043                           indf2	equ	0xFDF
  3044                           fsr2h	equ	0xFDA
  3045                           fsr2l	equ	0xFD9
  3046                           status	equ	0xFD8
  3047                           
  3048 ;; *************** function _wait *****************
  3049 ;; Defined at:
  3050 ;;		line 4 in file "defs.c"
  3051 ;; Parameters:    Size  Location     Type
  3052 ;;  count           4    0[BANK1 ] unsigned long 
  3053 ;; Auto vars:     Size  Location     Type
  3054 ;;		None
  3055 ;; Return value:  Size  Location     Type
  3056 ;;		None               void
  3057 ;; Registers used:
  3058 ;;		wreg, status,2, status,0
  3059 ;; Tracked objects:
  3060 ;;		On entry : 0/0
  3061 ;;		On exit  : 0/0
  3062 ;;		Unchanged: 0/0
  3063 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3064 ;;      Params:         0       0       4       0       0       0       0       0       0
  3065 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3066 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3067 ;;      Totals:         0       0       4       0       0       0       0       0       0
  3068 ;;Total ram usage:        4 bytes
  3069 ;; Hardware stack levels used:    1
  3070 ;; Hardware stack levels required when called:    8
  3071 ;; This function calls:
  3072 ;;		Nothing
  3073 ;; This function is called by:
  3074 ;;		_spi
  3075 ;; This function uses a non-reentrant model
  3076 ;;
  3077                           
  3078                           	psect	text6
  3079  0046F4                     __ptext6:
  3080                           	opt stack 0
  3081  0046F4                     _wait:
  3082                           	opt stack 20
  3083  0046F4                     l5487:
  3084  0046F4  0101               	movlb	1	; () banked
  3085  0046F6  0101               	movlb	1	; () banked
  3086  0046F8  0700               	decf	wait@count& (0+255),f,b
  3087  0046FA  0E00               	movlw	0
  3088  0046FC  0101               	movlb	1	; () banked
  3089  0046FE  5B01               	subwfb	(wait@count+1)& (0+255),f,b
  3090  004700  0101               	movlb	1	; () banked
  3091  004702  5B02               	subwfb	(wait@count+2)& (0+255),f,b
  3092  004704  0101               	movlb	1	; () banked
  3093  004706  5B03               	subwfb	(wait@count+3)& (0+255),f,b
  3094  004708  0101               	movlb	1	; () banked
  3095  00470A  2900               	incf	wait@count& (0+255),w,b
  3096  00470C  B4D8               	btfsc	status,2,c
  3097  00470E  2901               	incf	(wait@count+1)& (0+255),w,b
  3098  004710  B4D8               	btfsc	status,2,c
  3099  004712  2902               	incf	(wait@count+2)& (0+255),w,b
  3100  004714  B4D8               	btfsc	status,2,c
  3101  004716  2903               	incf	(wait@count+3)& (0+255),w,b
  3102  004718  B4D8               	btfsc	status,2,c
  3103                           
  3104                           ; BSR set to: 1
  3105                           
  3106                           ; BSR set to: 1
  3107  00471A  0012               	return	
  3108  00471C  D7EB               	goto	l5487
  3109  00471E                     __end_of_wait:
  3110                           	opt stack 0
  3111                           tblptru	equ	0xFF8
  3112                           tblptrh	equ	0xFF7
  3113                           tblptrl	equ	0xFF6
  3114                           tablat	equ	0xFF5
  3115                           prodh	equ	0xFF4
  3116                           prodl	equ	0xFF3
  3117                           postinc0	equ	0xFEE
  3118                           wreg	equ	0xFE8
  3119                           postdec1	equ	0xFE5
  3120                           fsr1l	equ	0xFE1
  3121                           indf2	equ	0xFDF
  3122                           fsr2h	equ	0xFDA
  3123                           fsr2l	equ	0xFD9
  3124                           status	equ	0xFD8
  3125                           
  3126 ;; *************** function _setup *****************
  3127 ;; Defined at:
  3128 ;;		line 62 in file "main.c"
  3129 ;; Parameters:    Size  Location     Type
  3130 ;;		None
  3131 ;; Auto vars:     Size  Location     Type
  3132 ;;		None
  3133 ;; Return value:  Size  Location     Type
  3134 ;;		None               void
  3135 ;; Registers used:
  3136 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  3137 ;; Tracked objects:
  3138 ;;		On entry : 0/0
  3139 ;;		On exit  : 0/0
  3140 ;;		Unchanged: 0/0
  3141 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3142 ;;      Params:         0       0       0       0       0       0       0       0       0
  3143 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3144 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3145 ;;      Totals:         0       0       0       0       0       0       0       0       0
  3146 ;;Total ram usage:        0 bytes
  3147 ;; Hardware stack levels used:    1
  3148 ;; Hardware stack levels required when called:   10
  3149 ;; This function calls:
  3150 ;;		_startDisp
  3151 ;;		_initRTC
  3152 ;;		_initTemp
  3153 ;;		_setupButtons
  3154 ;; This function is called by:
  3155 ;;		_main
  3156 ;; This function uses a non-reentrant model
  3157 ;;
  3158                           
  3159                           	psect	text7
  3160  004698                     __ptext7:
  3161                           	opt stack 0
  3162  004698                     _setup:
  3163                           	opt stack 20
  3164                           
  3165                           ;main.c: 64: GIE = 1;
  3166                           
  3167                           ; BSR set to: 1
  3168                           ;incstack = 0
  3169                           ;incstack = 0
  3170  004698  8EF2               	bsf	intcon,7,c	;volatile
  3171                           
  3172                           ;main.c: 65: PEIE = 1;
  3173  00469A  8CF2               	bsf	intcon,6,c	;volatile
  3174                           
  3175                           ;main.c: 67: startDisp();
  3176  00469C  EC2E  F01D         	call	_startDisp	;wreg free
  3177                           
  3178                           ;main.c: 69: initRTC();
  3179  0046A0  ECF7  F01F         	call	_initRTC	;wreg free
  3180                           
  3181                           ;main.c: 73: initTemp();
  3182  0046A4  ECF1  F021         	call	_initTemp	;wreg free
  3183                           
  3184                           ;main.c: 75: setupButtons();
  3185  0046A8  ECDA  F022         	call	_setupButtons	;wreg free
  3186                           
  3187                           ;main.c: 78: menu = &tempMenu;
  3188  0046AC  0101               	movlb	1	; () banked
  3189  0046AE  0E01               	movlw	high _tempMenu
  3190  0046B0  0100               	movlb	0	; () banked
  3191  0046B2  0100               	movlb	0	; () banked
  3192  0046B4  6FF5               	movwf	(_menu+1)& (0+255),b
  3193  0046B6  0101               	movlb	1	; () banked
  3194  0046B8  0E38               	movlw	low _tempMenu
  3195  0046BA  0100               	movlb	0	; () banked
  3196  0046BC  6FF4               	movwf	_menu& (0+255),b
  3197                           
  3198                           ; BSR set to: 0
  3199                           ;main.c: 82: TRISA5 = 0;
  3200  0046BE  9A92               	bcf	3986,5,c	;volatile
  3201                           
  3202                           ; BSR set to: 0
  3203                           ;main.c: 83: LATA5 = 0;
  3204  0046C0  9A89               	bcf	3977,5,c	;volatile
  3205                           
  3206                           ; BSR set to: 0
  3207                           ;main.c: 85: TRISC = 0;
  3208  0046C2  0E00               	movlw	0
  3209  0046C4  6E94               	movwf	3988,c	;volatile
  3210                           
  3211                           ; BSR set to: 0
  3212  0046C6  0012               	return	
  3213  0046C8                     __end_of_setup:
  3214                           	opt stack 0
  3215                           tblptru	equ	0xFF8
  3216                           tblptrh	equ	0xFF7
  3217                           tblptrl	equ	0xFF6
  3218                           tablat	equ	0xFF5
  3219                           prodh	equ	0xFF4
  3220                           prodl	equ	0xFF3
  3221                           intcon	equ	0xFF2
  3222                           postinc0	equ	0xFEE
  3223                           wreg	equ	0xFE8
  3224                           postdec1	equ	0xFE5
  3225                           fsr1l	equ	0xFE1
  3226                           indf2	equ	0xFDF
  3227                           fsr2h	equ	0xFDA
  3228                           fsr2l	equ	0xFD9
  3229                           status	equ	0xFD8
  3230                           
  3231 ;; *************** function _setupButtons *****************
  3232 ;; Defined at:
  3233 ;;		line 9 in file "buttons.c"
  3234 ;; Parameters:    Size  Location     Type
  3235 ;;		None
  3236 ;; Auto vars:     Size  Location     Type
  3237 ;;		None
  3238 ;; Return value:  Size  Location     Type
  3239 ;;		None               void
  3240 ;; Registers used:
  3241 ;;		wreg, status,2
  3242 ;; Tracked objects:
  3243 ;;		On entry : 0/0
  3244 ;;		On exit  : 0/0
  3245 ;;		Unchanged: 0/0
  3246 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3247 ;;      Params:         0       0       0       0       0       0       0       0       0
  3248 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3249 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3250 ;;      Totals:         0       0       0       0       0       0       0       0       0
  3251 ;;Total ram usage:        0 bytes
  3252 ;; Hardware stack levels used:    1
  3253 ;; Hardware stack levels required when called:    8
  3254 ;; This function calls:
  3255 ;;		Nothing
  3256 ;; This function is called by:
  3257 ;;		_setup
  3258 ;; This function uses a non-reentrant model
  3259 ;;
  3260                           
  3261                           	psect	text8
  3262  0045B4                     __ptext8:
  3263                           	opt stack 0
  3264  0045B4                     _setupButtons:
  3265                           	opt stack 21
  3266                           
  3267                           ;buttons.c: 10: LATC = 0;
  3268                           
  3269                           ; BSR set to: 0
  3270                           ;incstack = 0
  3271                           ;incstack = 0
  3272  0045B4  0E00               	movlw	0
  3273  0045B6  6E8B               	movwf	3979,c	;volatile
  3274                           
  3275                           ;buttons.c: 11: LATB = 0;
  3276  0045B8  0E00               	movlw	0
  3277  0045BA  6E8A               	movwf	3978,c	;volatile
  3278                           
  3279                           ;buttons.c: 14: TRISB = 0b11111111;
  3280  0045BC  6893               	setf	3987,c	;volatile
  3281                           
  3282                           ;buttons.c: 16: nRBPU = !0;
  3283  0045BE  8EF1               	bsf	intcon2,7,c	;volatile
  3284                           
  3285                           ;buttons.c: 17: tmr0BigCounts = 0;
  3286  0045C0  0E00               	movlw	0
  3287  0045C2  0100               	movlb	0	; () banked
  3288  0045C4  0100               	movlb	0	; () banked
  3289  0045C6  6FD5               	movwf	_tmr0BigCounts& (0+255),b
  3290  0045C8  0E00               	movlw	0
  3291  0045CA  0100               	movlb	0	; () banked
  3292  0045CC  6FD6               	movwf	(_tmr0BigCounts+1)& (0+255),b
  3293  0045CE  0E00               	movlw	0
  3294  0045D0  0100               	movlb	0	; () banked
  3295  0045D2  6FD7               	movwf	(_tmr0BigCounts+2)& (0+255),b
  3296  0045D4  0E00               	movlw	0
  3297  0045D6  0100               	movlb	0	; () banked
  3298  0045D8  6FD8               	movwf	(_tmr0BigCounts+3)& (0+255),b
  3299                           
  3300                           ;buttons.c: 19: T0CON = (0b00001000);
  3301  0045DA  0E08               	movlw	8
  3302  0045DC  6ED5               	movwf	4053,c	;volatile
  3303                           
  3304                           ;buttons.c: 20: TMR0 = (65536-32767);
  3305  0045DE  0E80               	movlw	128
  3306  0045E0  6ED7               	movwf	4055,c	;volatile
  3307  0045E2  0E01               	movlw	1
  3308  0045E4  6ED6               	movwf	4054,c	;volatile
  3309                           
  3310                           ; BSR set to: 0
  3311                           ;buttons.c: 21: TMR0IE = 1;
  3312  0045E6  8AF2               	bsf	intcon,5,c	;volatile
  3313                           
  3314                           ; BSR set to: 0
  3315                           ;buttons.c: 22: TMR0IF = CLEAR;
  3316  0045E8  94F2               	bcf	intcon,2,c	;volatile
  3317                           
  3318                           ; BSR set to: 0
  3319                           ;buttons.c: 23: TMR0ON = 1;
  3320  0045EA  8ED5               	bsf	4053,7,c	;volatile
  3321                           
  3322                           ; BSR set to: 0
  3323  0045EC  0012               	return	
  3324  0045EE                     __end_of_setupButtons:
  3325                           	opt stack 0
  3326                           tblptru	equ	0xFF8
  3327                           tblptrh	equ	0xFF7
  3328                           tblptrl	equ	0xFF6
  3329                           tablat	equ	0xFF5
  3330                           prodh	equ	0xFF4
  3331                           prodl	equ	0xFF3
  3332                           intcon	equ	0xFF2
  3333                           intcon2	equ	0xFF1
  3334                           postinc0	equ	0xFEE
  3335                           wreg	equ	0xFE8
  3336                           postdec1	equ	0xFE5
  3337                           fsr1l	equ	0xFE1
  3338                           indf2	equ	0xFDF
  3339                           fsr2h	equ	0xFDA
  3340                           fsr2l	equ	0xFD9
  3341                           status	equ	0xFD8
  3342                           
  3343 ;; *************** function _initTemp *****************
  3344 ;; Defined at:
  3345 ;;		line 10 in file "temp.c"
  3346 ;; Parameters:    Size  Location     Type
  3347 ;;		None
  3348 ;; Auto vars:     Size  Location     Type
  3349 ;;		None
  3350 ;; Return value:  Size  Location     Type
  3351 ;;		None               void
  3352 ;; Registers used:
  3353 ;;		wreg, status,2
  3354 ;; Tracked objects:
  3355 ;;		On entry : 0/0
  3356 ;;		On exit  : 0/0
  3357 ;;		Unchanged: 0/0
  3358 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3359 ;;      Params:         0       0       0       0       0       0       0       0       0
  3360 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3361 ;;      Temps:          0       0       1       0       0       0       0       0       0
  3362 ;;      Totals:         0       0       1       0       0       0       0       0       0
  3363 ;;Total ram usage:        1 bytes
  3364 ;; Hardware stack levels used:    1
  3365 ;; Hardware stack levels required when called:    8
  3366 ;; This function calls:
  3367 ;;		Nothing
  3368 ;; This function is called by:
  3369 ;;		_setup
  3370 ;; This function uses a non-reentrant model
  3371 ;;
  3372                           
  3373                           	psect	text9
  3374  0043E2                     __ptext9:
  3375                           	opt stack 0
  3376  0043E2                     _initTemp:
  3377                           	opt stack 21
  3378                           
  3379                           ;temp.c: 18: ADCON0 = 0b00000001;
  3380                           
  3381                           ; BSR set to: 0
  3382                           ;incstack = 0
  3383                           ;incstack = 0
  3384  0043E2  0E01               	movlw	1
  3385  0043E4  6EC2               	movwf	4034,c	;volatile
  3386                           
  3387                           ;temp.c: 25: ADCON1 = 0b00001110;
  3388  0043E6  0E0E               	movlw	14
  3389  0043E8  6EC1               	movwf	4033,c	;volatile
  3390                           
  3391                           ;temp.c: 34: ADCON2 = 0b10001101;
  3392  0043EA  0E8D               	movlw	141
  3393  0043EC  6EC0               	movwf	4032,c	;volatile
  3394                           
  3395                           ;temp.c: 36: tempMenu.digits = 0b00011111;
  3396  0043EE  0101               	movlb	1	; () banked
  3397  0043F0  6F00               	movwf	??_initTemp& (0+255),b
  3398  0043F2  0E1F               	movlw	31
  3399  0043F4  0101               	movlb	1	; () banked
  3400  0043F6  0101               	movlb	1	; () banked
  3401  0043F8  6F39               	movwf	(_tempMenu+1)& (0+255),b
  3402  0043FA  0101               	movlb	1	; () banked
  3403  0043FC  5100               	movf	??_initTemp& (0+255),w,b
  3404                           
  3405                           ; BSR set to: 1
  3406                           ;temp.c: 37: tempMenu.printFn = &printTemp;
  3407  0043FE  0E3B               	movlw	high _printTemp
  3408  004400  0101               	movlb	1	; () banked
  3409  004402  0101               	movlb	1	; () banked
  3410  004404  6F3C               	movwf	(_tempMenu+4)& (0+255),b
  3411  004406  0E9C               	movlw	low _printTemp
  3412  004408  0101               	movlb	1	; () banked
  3413  00440A  6F3B               	movwf	(_tempMenu+3)& (0+255),b
  3414                           
  3415                           ;temp.c: 38: tempMenu.state = 0;
  3416  00440C  0101               	movlb	1	; () banked
  3417  00440E  6F00               	movwf	??_initTemp& (0+255),b
  3418  004410  0E00               	movlw	0
  3419  004412  0101               	movlb	1	; () banked
  3420  004414  0101               	movlb	1	; () banked
  3421  004416  6F38               	movwf	_tempMenu& (0+255),b
  3422  004418  0101               	movlb	1	; () banked
  3423  00441A  5100               	movf	??_initTemp& (0+255),w,b
  3424                           
  3425                           ;temp.c: 39: tempMenu.num_states = 2;
  3426  00441C  0101               	movlb	1	; () banked
  3427  00441E  6F00               	movwf	??_initTemp& (0+255),b
  3428  004420  0E02               	movlw	2
  3429  004422  0101               	movlb	1	; () banked
  3430  004424  0101               	movlb	1	; () banked
  3431  004426  6F3A               	movwf	(_tempMenu+2)& (0+255),b
  3432  004428  0101               	movlb	1	; () banked
  3433  00442A  5100               	movf	??_initTemp& (0+255),w,b
  3434                           
  3435                           ; BSR set to: 1
  3436  00442C  0012               	return	
  3437  00442E                     __end_of_initTemp:
  3438                           	opt stack 0
  3439                           tblptru	equ	0xFF8
  3440                           tblptrh	equ	0xFF7
  3441                           tblptrl	equ	0xFF6
  3442                           tablat	equ	0xFF5
  3443                           prodh	equ	0xFF4
  3444                           prodl	equ	0xFF3
  3445                           intcon	equ	0xFF2
  3446                           intcon2	equ	0xFF1
  3447                           postinc0	equ	0xFEE
  3448                           wreg	equ	0xFE8
  3449                           postdec1	equ	0xFE5
  3450                           fsr1l	equ	0xFE1
  3451                           indf2	equ	0xFDF
  3452                           fsr2h	equ	0xFDA
  3453                           fsr2l	equ	0xFD9
  3454                           status	equ	0xFD8
  3455                           
  3456 ;; *************** function _initRTC *****************
  3457 ;; Defined at:
  3458 ;;		line 10 in file "RTC.c"
  3459 ;; Parameters:    Size  Location     Type
  3460 ;;		None
  3461 ;; Auto vars:     Size  Location     Type
  3462 ;;		None
  3463 ;; Return value:  Size  Location     Type
  3464 ;;		None               void
  3465 ;; Registers used:
  3466 ;;		wreg, status,2, cstack
  3467 ;; Tracked objects:
  3468 ;;		On entry : 0/0
  3469 ;;		On exit  : 0/0
  3470 ;;		Unchanged: 0/0
  3471 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3472 ;;      Params:         0       0       0       0       0       0       0       0       0
  3473 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3474 ;;      Temps:          0       0       1       0       0       0       0       0       0
  3475 ;;      Totals:         0       0       1       0       0       0       0       0       0
  3476 ;;Total ram usage:        1 bytes
  3477 ;; Hardware stack levels used:    1
  3478 ;; Hardware stack levels required when called:    9
  3479 ;; This function calls:
  3480 ;;		_loadTime
  3481 ;; This function is called by:
  3482 ;;		_setup
  3483 ;; This function uses a non-reentrant model
  3484 ;;
  3485                           
  3486                           	psect	text10
  3487  003FEE                     __ptext10:
  3488                           	opt stack 0
  3489  003FEE                     _initRTC:
  3490                           	opt stack 20
  3491                           
  3492                           ;RTC.c: 11: rtcMenu.state = hhmmss;
  3493                           
  3494                           ; BSR set to: 1
  3495                           ;incstack = 0
  3496                           ;incstack = 0
  3497  003FEE  0101               	movlb	1	; () banked
  3498  003FF0  6F09               	movwf	??_initRTC& (0+255),b
  3499  003FF2  0E01               	movlw	1
  3500  003FF4  0101               	movlb	1	; () banked
  3501  003FF6  0101               	movlb	1	; () banked
  3502  003FF8  6F3D               	movwf	_rtcMenu& (0+255),b
  3503  003FFA  0101               	movlb	1	; () banked
  3504  003FFC  5109               	movf	??_initRTC& (0+255),w,b
  3505                           
  3506                           ; BSR set to: 1
  3507                           ;RTC.c: 12: rtcMenu.digits = 0b11111111;
  3508  003FFE  0101               	movlb	1	; () banked
  3509  004000  0101               	movlb	1	; () banked
  3510  004002  693E               	setf	(_rtcMenu+1)& (0+255),b
  3511                           
  3512                           ; BSR set to: 1
  3513                           ;RTC.c: 13: rtcMenu.printFn = &printRTC;
  3514  004004  0E0F               	movlw	high _printRTC
  3515  004006  0101               	movlb	1	; () banked
  3516  004008  0101               	movlb	1	; () banked
  3517  00400A  6F41               	movwf	(_rtcMenu+4)& (0+255),b
  3518  00400C  0EAE               	movlw	low _printRTC
  3519  00400E  0101               	movlb	1	; () banked
  3520  004010  6F40               	movwf	(_rtcMenu+3)& (0+255),b
  3521                           
  3522                           ; BSR set to: 1
  3523                           ;RTC.c: 14: rtcMenu.num_states = 10;
  3524  004012  0101               	movlb	1	; () banked
  3525  004014  6F09               	movwf	??_initRTC& (0+255),b
  3526  004016  0E0A               	movlw	10
  3527  004018  0101               	movlb	1	; () banked
  3528  00401A  0101               	movlb	1	; () banked
  3529  00401C  6F3F               	movwf	(_rtcMenu+2)& (0+255),b
  3530  00401E  0101               	movlb	1	; () banked
  3531  004020  5109               	movf	??_initRTC& (0+255),w,b
  3532                           
  3533                           ; BSR set to: 1
  3534                           ;RTC.c: 15: date.month = 1;
  3535  004022  0101               	movlb	1	; () banked
  3536  004024  6F09               	movwf	??_initRTC& (0+255),b
  3537  004026  0E01               	movlw	1
  3538  004028  0101               	movlb	1	; () banked
  3539  00402A  0101               	movlb	1	; () banked
  3540  00402C  6F27               	movwf	(_date+5)& (0+255),b
  3541  00402E  0101               	movlb	1	; () banked
  3542  004030  5109               	movf	??_initRTC& (0+255),w,b
  3543                           
  3544                           ; BSR set to: 1
  3545                           ;RTC.c: 16: date.day = 1;
  3546  004032  0101               	movlb	1	; () banked
  3547  004034  6F09               	movwf	??_initRTC& (0+255),b
  3548  004036  0E01               	movlw	1
  3549  004038  0101               	movlb	1	; () banked
  3550  00403A  0101               	movlb	1	; () banked
  3551  00403C  6F25               	movwf	(_date+3)& (0+255),b
  3552  00403E  0101               	movlb	1	; () banked
  3553  004040  5109               	movf	??_initRTC& (0+255),w,b
  3554                           
  3555                           ;RTC.c: 17: date.year = 2013;
  3556  004042  0E07               	movlw	7
  3557  004044  0101               	movlb	1	; () banked
  3558  004046  0101               	movlb	1	; () banked
  3559  004048  6F29               	movwf	(_date+7)& (0+255),b
  3560  00404A  0EDD               	movlw	221
  3561  00404C  0101               	movlb	1	; () banked
  3562  00404E  6F28               	movwf	(_date+6)& (0+255),b
  3563                           
  3564                           ; BSR set to: 1
  3565                           ;RTC.c: 19: loadTime();
  3566  004050  EC02  F024         	call	_loadTime	;wreg free
  3567                           
  3568                           ;RTC.c: 22: T1CON = 0b10110000;
  3569  004054  0EB0               	movlw	176
  3570  004056  6ECD               	movwf	4045,c	;volatile
  3571                           
  3572                           ;RTC.c: 23: TMR1 = (65536-63765);
  3573  004058  0E06               	movlw	6
  3574  00405A  6ECF               	movwf	4047,c	;volatile
  3575  00405C  0EEB               	movlw	235
  3576  00405E  6ECE               	movwf	4046,c	;volatile
  3577                           
  3578                           ;RTC.c: 24: TMR1IE = 1;
  3579  004060  809D               	bsf	3997,0,c	;volatile
  3580                           
  3581                           ;RTC.c: 25: TMR1IF = CLEAR;
  3582  004062  909E               	bcf	3998,0,c	;volatile
  3583                           
  3584                           ;RTC.c: 26: TMR1ON = 1;
  3585  004064  80CD               	bsf	4045,0,c	;volatile
  3586  004066  0012               	return	
  3587  004068                     __end_of_initRTC:
  3588                           	opt stack 0
  3589                           tblptru	equ	0xFF8
  3590                           tblptrh	equ	0xFF7
  3591                           tblptrl	equ	0xFF6
  3592                           tablat	equ	0xFF5
  3593                           prodh	equ	0xFF4
  3594                           prodl	equ	0xFF3
  3595                           intcon	equ	0xFF2
  3596                           intcon2	equ	0xFF1
  3597                           postinc0	equ	0xFEE
  3598                           wreg	equ	0xFE8
  3599                           postdec1	equ	0xFE5
  3600                           fsr1l	equ	0xFE1
  3601                           indf2	equ	0xFDF
  3602                           fsr2h	equ	0xFDA
  3603                           fsr2l	equ	0xFD9
  3604                           status	equ	0xFD8
  3605                           
  3606 ;; *************** function _loadTime *****************
  3607 ;; Defined at:
  3608 ;;		line 31 in file "RTC.c"
  3609 ;; Parameters:    Size  Location     Type
  3610 ;;		None
  3611 ;; Auto vars:     Size  Location     Type
  3612 ;;  newDate         9    0[BANK1 ] struct sDate
  3613 ;; Return value:  Size  Location     Type
  3614 ;;                  9  201[COMRAM] struct sDate
  3615 ;; Registers used:
  3616 ;;		None
  3617 ;; Tracked objects:
  3618 ;;		On entry : 0/0
  3619 ;;		On exit  : 0/0
  3620 ;;		Unchanged: 0/0
  3621 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3622 ;;      Params:         0       0       0       0       0       0       0       0       0
  3623 ;;      Locals:         0       0       9       0       0       0       0       0       0
  3624 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3625 ;;      Totals:         0       0       9       0       0       0       0       0       0
  3626 ;;Total ram usage:        9 bytes
  3627 ;; Hardware stack levels used:    1
  3628 ;; Hardware stack levels required when called:    8
  3629 ;; This function calls:
  3630 ;;		Nothing
  3631 ;; This function is called by:
  3632 ;;		_initRTC
  3633 ;; This function uses a non-reentrant model
  3634 ;;
  3635                           
  3636                           	psect	text11
  3637  004804                     __ptext11:
  3638                           	opt stack 0
  3639  004804                     _loadTime:
  3640                           	opt stack 20
  3641                           
  3642                           ;RTC.c: 32: struct sDate newDate;
  3643                           ;RTC.c: 33: return newDate;
  3644                           ;	Return value of _loadTime is never used
  3645                           
  3646                           ;incstack = 0
  3647                           ;incstack = 0
  3648  004804  0012               	return	
  3649  004806                     __end_of_loadTime:
  3650                           	opt stack 0
  3651                           tblptru	equ	0xFF8
  3652                           tblptrh	equ	0xFF7
  3653                           tblptrl	equ	0xFF6
  3654                           tablat	equ	0xFF5
  3655                           prodh	equ	0xFF4
  3656                           prodl	equ	0xFF3
  3657                           intcon	equ	0xFF2
  3658                           intcon2	equ	0xFF1
  3659                           postinc0	equ	0xFEE
  3660                           wreg	equ	0xFE8
  3661                           postdec1	equ	0xFE5
  3662                           fsr1l	equ	0xFE1
  3663                           indf2	equ	0xFDF
  3664                           fsr2h	equ	0xFDA
  3665                           fsr2l	equ	0xFD9
  3666                           status	equ	0xFD8
  3667                           
  3668 ;; *************** function _startDisp *****************
  3669 ;; Defined at:
  3670 ;;		line 62 in file "disp.c"
  3671 ;; Parameters:    Size  Location     Type
  3672 ;;		None
  3673 ;; Auto vars:     Size  Location     Type
  3674 ;;		None
  3675 ;; Return value:  Size  Location     Type
  3676 ;;		None               void
  3677 ;; Registers used:
  3678 ;;		wreg, status,2, status,0, cstack
  3679 ;; Tracked objects:
  3680 ;;		On entry : 0/0
  3681 ;;		On exit  : 0/0
  3682 ;;		Unchanged: 0/0
  3683 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3684 ;;      Params:         0       0       0       0       0       0       0       0       0
  3685 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3686 ;;      Temps:          0       0       1       0       0       0       0       0       0
  3687 ;;      Totals:         0       0       1       0       0       0       0       0       0
  3688 ;;Total ram usage:        1 bytes
  3689 ;; Hardware stack levels used:    1
  3690 ;; Hardware stack levels required when called:    9
  3691 ;; This function calls:
  3692 ;;		_setBrightness
  3693 ;;		_setTest
  3694 ;; This function is called by:
  3695 ;;		_setup
  3696 ;; This function uses a non-reentrant model
  3697 ;;
  3698                           
  3699                           	psect	text12
  3700  003A5C                     __ptext12:
  3701                           	opt stack 0
  3702  003A5C                     _startDisp:
  3703                           	opt stack 20
  3704                           
  3705                           ;disp.c: 64: TRISA1 = 0;
  3706                           
  3707                           ;incstack = 0
  3708                           ;incstack = 0
  3709  003A5C  9292               	bcf	3986,1,c	;volatile
  3710                           
  3711                           ;disp.c: 65: TRISA3 = 0;
  3712  003A5E  9692               	bcf	3986,3,c	;volatile
  3713                           
  3714                           ;disp.c: 66: TRISA4 = 0;
  3715  003A60  9892               	bcf	3986,4,c	;volatile
  3716                           
  3717                           ;disp.c: 67: TRISA2 = 1;
  3718  003A62  8492               	bsf	3986,2,c	;volatile
  3719                           
  3720                           ;disp.c: 70: screen.digits.bits[0] = 0;
  3721  003A64  0E00               	movlw	0
  3722  003A66  0101               	movlb	1	; () banked
  3723  003A68  0101               	movlb	1	; () banked
  3724  003A6A  6F2B               	movwf	_screen& (0+255),b
  3725  003A6C  0E00               	movlw	0
  3726  003A6E  0101               	movlb	1	; () banked
  3727  003A70  6F2C               	movwf	(_screen+1)& (0+255),b
  3728  003A72  0E00               	movlw	0
  3729  003A74  0101               	movlb	1	; () banked
  3730  003A76  6F2D               	movwf	(_screen+2)& (0+255),b
  3731  003A78  0E00               	movlw	0
  3732  003A7A  0101               	movlb	1	; () banked
  3733  003A7C  6F2E               	movwf	(_screen+3)& (0+255),b
  3734                           
  3735                           ;disp.c: 71: screen.digits.bits[1] = 0;
  3736  003A7E  0E00               	movlw	0
  3737  003A80  0101               	movlb	1	; () banked
  3738  003A82  0101               	movlb	1	; () banked
  3739  003A84  6F2F               	movwf	(_screen+4)& (0+255),b
  3740  003A86  0E00               	movlw	0
  3741  003A88  0101               	movlb	1	; () banked
  3742  003A8A  6F30               	movwf	(_screen+5)& (0+255),b
  3743  003A8C  0E00               	movlw	0
  3744  003A8E  0101               	movlb	1	; () banked
  3745  003A90  6F31               	movwf	(_screen+6)& (0+255),b
  3746  003A92  0E00               	movlw	0
  3747  003A94  0101               	movlb	1	; () banked
  3748  003A96  6F32               	movwf	(_screen+7)& (0+255),b
  3749                           
  3750                           ; BSR set to: 1
  3751                           ;disp.c: 73: setBrightness(0b1111);
  3752  003A98  0101               	movlb	1	; () banked
  3753  003A9A  6F01               	movwf	??_startDisp& (0+255),b
  3754  003A9C  0E0F               	movlw	15
  3755  003A9E  0101               	movlb	1	; () banked
  3756  003AA0  0101               	movlb	1	; () banked
  3757  003AA2  6F00               	movwf	?_setBrightness& (0+255),b
  3758  003AA4  0101               	movlb	1	; () banked
  3759  003AA6  5101               	movf	??_startDisp& (0+255),w,b
  3760  003AA8  ECC8  F023         	call	_setBrightness	;wreg free
  3761                           
  3762                           ;disp.c: 75: screen.decode = 0;
  3763  003AAC  0101               	movlb	1	; () banked
  3764  003AAE  9133               	bcf	(_screen+8)& (0+255),0,b
  3765  003AB0  0101               	movlb	1	; () banked
  3766  003AB2  9333               	bcf	(_screen+8)& (0+255),1,b
  3767  003AB4  0101               	movlb	1	; () banked
  3768  003AB6  9533               	bcf	(_screen+8)& (0+255),2,b
  3769  003AB8  0101               	movlb	1	; () banked
  3770  003ABA  9733               	bcf	(_screen+8)& (0+255),3,b
  3771  003ABC  0101               	movlb	1	; () banked
  3772  003ABE  9933               	bcf	(_screen+8)& (0+255),4,b
  3773  003AC0  0101               	movlb	1	; () banked
  3774  003AC2  9B33               	bcf	(_screen+8)& (0+255),5,b
  3775  003AC4  0101               	movlb	1	; () banked
  3776  003AC6  9D33               	bcf	(_screen+8)& (0+255),6,b
  3777  003AC8  0101               	movlb	1	; () banked
  3778  003ACA  9F33               	bcf	(_screen+8)& (0+255),7,b
  3779                           
  3780                           ; BSR set to: 1
  3781                           ;disp.c: 77: screen.scan = 0b111;
  3782  003ACC  0101               	movlb	1	; () banked
  3783  003ACE  8934               	bsf	(_screen+9)& (0+255),4,b
  3784  003AD0  0101               	movlb	1	; () banked
  3785  003AD2  8B34               	bsf	(_screen+9)& (0+255),5,b
  3786  003AD4  0101               	movlb	1	; () banked
  3787  003AD6  8D34               	bsf	(_screen+9)& (0+255),6,b
  3788                           
  3789                           ; BSR set to: 1
  3790                           ;disp.c: 79: setTest(0);
  3791  003AD8  0101               	movlb	1	; () banked
  3792  003ADA  6F01               	movwf	??_startDisp& (0+255),b
  3793  003ADC  0E00               	movlw	0
  3794  003ADE  0101               	movlb	1	; () banked
  3795  003AE0  0101               	movlb	1	; () banked
  3796  003AE2  6F00               	movwf	?_setTest& (0+255),b
  3797  003AE4  0101               	movlb	1	; () banked
  3798  003AE6  5101               	movf	??_startDisp& (0+255),w,b
  3799  003AE8  ECD8  F023         	call	_setTest	;wreg free
  3800                           
  3801                           ;disp.c: 81: screen.shutdown = 0;
  3802  003AEC  0101               	movlb	1	; () banked
  3803  003AEE  0101               	movlb	1	; () banked
  3804  003AF0  9135               	bcf	(_screen+10)& (0+255),0,b
  3805                           
  3806                           ; BSR set to: 1
  3807                           ;disp.c: 83: screen.changed = 0xFFFF;
  3808  003AF2  0101               	movlb	1	; () banked
  3809  003AF4  0101               	movlb	1	; () banked
  3810  003AF6  6936               	setf	(_screen+11)& (0+255),b
  3811  003AF8  0101               	movlb	1	; () banked
  3812  003AFA  6937               	setf	(_screen+12)& (0+255),b
  3813                           
  3814                           ; BSR set to: 1
  3815  003AFC  0012               	return	
  3816  003AFE                     __end_of_startDisp:
  3817                           	opt stack 0
  3818                           tblptru	equ	0xFF8
  3819                           tblptrh	equ	0xFF7
  3820                           tblptrl	equ	0xFF6
  3821                           tablat	equ	0xFF5
  3822                           prodh	equ	0xFF4
  3823                           prodl	equ	0xFF3
  3824                           intcon	equ	0xFF2
  3825                           intcon2	equ	0xFF1
  3826                           postinc0	equ	0xFEE
  3827                           wreg	equ	0xFE8
  3828                           postdec1	equ	0xFE5
  3829                           fsr1l	equ	0xFE1
  3830                           indf2	equ	0xFDF
  3831                           fsr2h	equ	0xFDA
  3832                           fsr2l	equ	0xFD9
  3833                           status	equ	0xFD8
  3834                           
  3835 ;; *************** function _setTest *****************
  3836 ;; Defined at:
  3837 ;;		line 56 in file "disp.c"
  3838 ;; Parameters:    Size  Location     Type
  3839 ;;  state           1    0[BANK1 ] unsigned char 
  3840 ;; Auto vars:     Size  Location     Type
  3841 ;;		None
  3842 ;; Return value:  Size  Location     Type
  3843 ;;		None               void
  3844 ;; Registers used:
  3845 ;;		status,2, status,0
  3846 ;; Tracked objects:
  3847 ;;		On entry : 0/0
  3848 ;;		On exit  : 0/0
  3849 ;;		Unchanged: 0/0
  3850 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3851 ;;      Params:         0       0       1       0       0       0       0       0       0
  3852 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3853 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3854 ;;      Totals:         0       0       1       0       0       0       0       0       0
  3855 ;;Total ram usage:        1 bytes
  3856 ;; Hardware stack levels used:    1
  3857 ;; Hardware stack levels required when called:    8
  3858 ;; This function calls:
  3859 ;;		Nothing
  3860 ;; This function is called by:
  3861 ;;		_startDisp
  3862 ;; This function uses a non-reentrant model
  3863 ;;
  3864                           
  3865                           	psect	text13
  3866  0047B0                     __ptext13:
  3867                           	opt stack 0
  3868  0047B0                     _setTest:
  3869                           	opt stack 20
  3870                           
  3871                           ;disp.c: 57: screen.test = state;
  3872                           
  3873                           ; BSR set to: 1
  3874                           ;incstack = 0
  3875                           ;incstack = 0
  3876  0047B0  0101               	movlb	1	; () banked
  3877  0047B2  0101               	movlb	1	; () banked
  3878  0047B4  B100               	btfsc	setTest@state& (0+255),0,b
  3879  0047B6  D004               	bra	u2985
  3880  0047B8  0101               	movlb	1	; () banked
  3881  0047BA  0101               	movlb	1	; () banked
  3882  0047BC  9F34               	bcf	(_screen+9)& (0+255),7,b
  3883  0047BE  D003               	bra	u2986
  3884  0047C0                     u2985:
  3885  0047C0  0101               	movlb	1	; () banked
  3886  0047C2  0101               	movlb	1	; () banked
  3887  0047C4  8F34               	bsf	(_screen+9)& (0+255),7,b
  3888  0047C6                     u2986:
  3889                           
  3890                           ; BSR set to: 1
  3891                           ;disp.c: 58: screen.changed |= (1 << 12);
  3892  0047C6  0101               	movlb	1	; () banked
  3893  0047C8  0101               	movlb	1	; () banked
  3894  0047CA  8937               	bsf	(_screen+12)& (0+255),4,b
  3895                           
  3896                           ; BSR set to: 1
  3897  0047CC  0012               	return	
  3898  0047CE                     __end_of_setTest:
  3899                           	opt stack 0
  3900                           tblptru	equ	0xFF8
  3901                           tblptrh	equ	0xFF7
  3902                           tblptrl	equ	0xFF6
  3903                           tablat	equ	0xFF5
  3904                           prodh	equ	0xFF4
  3905                           prodl	equ	0xFF3
  3906                           intcon	equ	0xFF2
  3907                           intcon2	equ	0xFF1
  3908                           postinc0	equ	0xFEE
  3909                           wreg	equ	0xFE8
  3910                           postdec1	equ	0xFE5
  3911                           fsr1l	equ	0xFE1
  3912                           indf2	equ	0xFDF
  3913                           fsr2h	equ	0xFDA
  3914                           fsr2l	equ	0xFD9
  3915                           status	equ	0xFD8
  3916                           
  3917 ;; *************** function _setBrightness *****************
  3918 ;; Defined at:
  3919 ;;		line 49 in file "disp.c"
  3920 ;; Parameters:    Size  Location     Type
  3921 ;;  bright          1    0[BANK1 ] unsigned char 
  3922 ;; Auto vars:     Size  Location     Type
  3923 ;;		None
  3924 ;; Return value:  Size  Location     Type
  3925 ;;		None               void
  3926 ;; Registers used:
  3927 ;;		wreg, status,2, status,0
  3928 ;; Tracked objects:
  3929 ;;		On entry : 0/0
  3930 ;;		On exit  : 0/0
  3931 ;;		Unchanged: 0/0
  3932 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3933 ;;      Params:         0       0       1       0       0       0       0       0       0
  3934 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3935 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3936 ;;      Totals:         0       0       1       0       0       0       0       0       0
  3937 ;;Total ram usage:        1 bytes
  3938 ;; Hardware stack levels used:    1
  3939 ;; Hardware stack levels required when called:    8
  3940 ;; This function calls:
  3941 ;;		Nothing
  3942 ;; This function is called by:
  3943 ;;		_startDisp
  3944 ;; This function uses a non-reentrant model
  3945 ;;
  3946                           
  3947                           	psect	text14
  3948  004790                     __ptext14:
  3949                           	opt stack 0
  3950  004790                     _setBrightness:
  3951                           	opt stack 20
  3952                           
  3953                           ;disp.c: 50: screen.brightness = bright;
  3954                           
  3955                           ; BSR set to: 1
  3956                           ;incstack = 0
  3957                           ;incstack = 0
  3958  004790  0101               	movlb	1	; () banked
  3959  004792  0101               	movlb	1	; () banked
  3960  004794  5134               	movf	(_screen+9)& (0+255),w,b
  3961  004796  0101               	movlb	1	; () banked
  3962  004798  0101               	movlb	1	; () banked
  3963  00479A  1900               	xorwf	setBrightness@bright& (0+255),w,b
  3964  00479C  0BF0               	andlw	-16
  3965  00479E  0101               	movlb	1	; () banked
  3966  0047A0  1900               	xorwf	setBrightness@bright& (0+255),w,b
  3967  0047A2  0101               	movlb	1	; () banked
  3968  0047A4  0101               	movlb	1	; () banked
  3969  0047A6  6F34               	movwf	(_screen+9)& (0+255),b
  3970                           
  3971                           ; BSR set to: 1
  3972                           ;disp.c: 51: screen.changed |= (1 << 10);
  3973  0047A8  0101               	movlb	1	; () banked
  3974  0047AA  0101               	movlb	1	; () banked
  3975  0047AC  8537               	bsf	(_screen+12)& (0+255),2,b
  3976                           
  3977                           ; BSR set to: 1
  3978  0047AE  0012               	return	
  3979  0047B0                     __end_of_setBrightness:
  3980                           	opt stack 0
  3981                           tblptru	equ	0xFF8
  3982                           tblptrh	equ	0xFF7
  3983                           tblptrl	equ	0xFF6
  3984                           tablat	equ	0xFF5
  3985                           prodh	equ	0xFF4
  3986                           prodl	equ	0xFF3
  3987                           intcon	equ	0xFF2
  3988                           intcon2	equ	0xFF1
  3989                           postinc0	equ	0xFEE
  3990                           wreg	equ	0xFE8
  3991                           postdec1	equ	0xFE5
  3992                           fsr1l	equ	0xFE1
  3993                           indf2	equ	0xFDF
  3994                           fsr2h	equ	0xFDA
  3995                           fsr2l	equ	0xFD9
  3996                           status	equ	0xFD8
  3997                           
  3998 ;; *************** function _high_isr *****************
  3999 ;; Defined at:
  4000 ;;		line 89 in file "main.c"
  4001 ;; Parameters:    Size  Location     Type
  4002 ;;		None
  4003 ;; Auto vars:     Size  Location     Type
  4004 ;;		None
  4005 ;; Return value:  Size  Location     Type
  4006 ;;		None               void
  4007 ;; Registers used:
  4008 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  4009 ;; Tracked objects:
  4010 ;;		On entry : 0/0
  4011 ;;		On exit  : 0/0
  4012 ;;		Unchanged: 0/0
  4013 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4014 ;;      Params:         0       0       0       0       0       0       0       0       0
  4015 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4016 ;;      Temps:          0      16       0       0       0       0       0       0       0
  4017 ;;      Totals:         0      16       0       0       0       0       0       0       0
  4018 ;;Total ram usage:       16 bytes
  4019 ;; Hardware stack levels used:    1
  4020 ;; Hardware stack levels required when called:    7
  4021 ;; This function calls:
  4022 ;;		_tick
  4023 ;;		_buttons
  4024 ;;		_printRTC
  4025 ;;		_printTemp
  4026 ;; This function is called by:
  4027 ;;		Interrupt level 2
  4028 ;; This function uses a non-reentrant model
  4029 ;;
  4030                           
  4031                           	psect	intcode
  4032  000008                     __pintcode:
  4033                           	opt stack 0
  4034  000008                     _high_isr:
  4035                           	opt stack 19
  4036                           
  4037                           ; BSR set to: 1
  4038                           ;incstack = 0
  4039  000008  CFFA F0A9          	movff	pclath,??_high_isr+2
  4040  00000C  CFFB F0AA          	movff	pclatu,??_high_isr+3
  4041  000010  CFE9 F0AB          	movff	fsr0l,??_high_isr+4
  4042  000014  EDDD  F016         	call	int_func,f	;refresh shadow registers
  4043                           pclatu	equ	0xFFB
  4044                           pclath	equ	0xFFA
  4045                           tblptru	equ	0xFF8
  4046                           tblptrh	equ	0xFF7
  4047                           tblptrl	equ	0xFF6
  4048                           tablat	equ	0xFF5
  4049                           prodh	equ	0xFF4
  4050                           prodl	equ	0xFF3
  4051                           intcon	equ	0xFF2
  4052                           intcon2	equ	0xFF1
  4053                           postinc0	equ	0xFEE
  4054                           fsr0l	equ	0xFE9
  4055                           wreg	equ	0xFE8
  4056                           postdec1	equ	0xFE5
  4057                           fsr1l	equ	0xFE1
  4058                           indf2	equ	0xFDF
  4059                           fsr2h	equ	0xFDA
  4060                           fsr2l	equ	0xFD9
  4061                           status	equ	0xFD8
  4062                           
  4063                           	psect	intcode_body
  4064  002DBA                     __pintcode_body:
  4065                           	opt stack 19
  4066  002DBA                     int_func:
  4067                           	opt stack 19
  4068  002DBA  0006               	pop		; remove dummy address from shadow register refresh
  4069  002DBC  CFEA F0AC          	movff	fsr0h,??_high_isr+5
  4070  002DC0  CFE1 F0AD          	movff	fsr1l,??_high_isr+6
  4071  002DC4  CFE2 F0AE          	movff	fsr1h,??_high_isr+7
  4072  002DC8  CFD9 F0AF          	movff	fsr2l,??_high_isr+8
  4073  002DCC  CFDA F0B0          	movff	fsr2h,??_high_isr+9
  4074  002DD0  CFF3 F0B1          	movff	prodl,??_high_isr+10
  4075  002DD4  CFF4 F0B2          	movff	prodh,??_high_isr+11
  4076  002DD8  CFF6 F0B3          	movff	tblptrl,??_high_isr+12
  4077  002DDC  CFF7 F0B4          	movff	tblptrh,??_high_isr+13
  4078  002DE0  CFF8 F0B5          	movff	tblptru,??_high_isr+14
  4079  002DE4  CFF5 F0B6          	movff	tablat,??_high_isr+15
  4080  002DE8                     
  4081                           ;main.c: 90: if (TMR1IE && TMR1IF)
  4082  002DE8  A09D               	btfss	3997,0,c	;volatile
  4083  002DEA  D001               	goto	i2u539_41
  4084  002DEC  D001               	goto	i2u539_40
  4085  002DEE                     i2u539_41:
  4086  002DEE  D04E               	goto	i2l7025
  4087  002DF0                     i2u539_40:
  4088  002DF0  A09E               	btfss	3998,0,c	;volatile
  4089  002DF2  D001               	goto	i2u540_41
  4090  002DF4  D001               	goto	i2u540_40
  4091  002DF6                     i2u540_41:
  4092  002DF6  D04A               	goto	i2l7025
  4093  002DF8                     i2u540_40:
  4094  002DF8                     
  4095                           ;main.c: 91: {
  4096                           ;main.c: 92: TMR1IF = CLEAR;
  4097  002DF8  909E               	bcf	3998,0,c	;volatile
  4098                           
  4099                           ;main.c: 93: TMR1ON = 0;
  4100  002DFA  90CD               	bcf	4045,0,c	;volatile
  4101  002DFC                     
  4102                           ;main.c: 94: TMR1 = 0;
  4103  002DFC  0E00               	movlw	0
  4104  002DFE  6ECF               	movwf	4047,c	;volatile
  4105  002E00  0E00               	movlw	0
  4106  002E02  6ECE               	movwf	4046,c	;volatile
  4107  002E04                     
  4108                           ;main.c: 95: if (++rtc_big_ticks > (1+1))
  4109  002E04  0100               	movlb	0	; () banked
  4110  002E06  0100               	movlb	0	; () banked
  4111  002E08  4BD9               	infsnz	_rtc_big_ticks& (0+255),f,b
  4112  002E0A  2BDA               	incf	(_rtc_big_ticks+1)& (0+255),f,b
  4113  002E0C  0E03               	movlw	3
  4114  002E0E  0100               	movlb	0	; () banked
  4115  002E10  5DD9               	subwf	_rtc_big_ticks& (0+255),w,b
  4116  002E12  0E00               	movlw	0
  4117  002E14  0100               	movlb	0	; () banked
  4118  002E16  59DA               	subwfb	(_rtc_big_ticks+1)& (0+255),w,b
  4119  002E18  A0D8               	btfss	status,0,c
  4120  002E1A  D001               	goto	i2u541_41
  4121  002E1C  D001               	goto	i2u541_40
  4122  002E1E                     i2u541_41:
  4123  002E1E  D034               	goto	i2l7023
  4124  002E20                     i2u541_40:
  4125  002E20                     
  4126                           ; BSR set to: 0
  4127                           ;main.c: 96: {
  4128                           ;main.c: 97: rtc_big_ticks = 0;
  4129  002E20  0E00               	movlw	0
  4130  002E22  0100               	movlb	0	; () banked
  4131  002E24  0100               	movlb	0	; () banked
  4132  002E26  6FDA               	movwf	(_rtc_big_ticks+1)& (0+255),b
  4133  002E28  0E00               	movlw	0
  4134  002E2A  0100               	movlb	0	; () banked
  4135  002E2C  6FD9               	movwf	_rtc_big_ticks& (0+255),b
  4136                           
  4137                           ;main.c: 98: TMR1 = (65536-63765);
  4138  002E2E  0E06               	movlw	6
  4139  002E30  6ECF               	movwf	4047,c	;volatile
  4140  002E32  0EEB               	movlw	235
  4141  002E34  6ECE               	movwf	4046,c	;volatile
  4142  002E36                     
  4143                           ; BSR set to: 0
  4144                           ;main.c: 99: tick(second);
  4145  002E36  0100               	movlb	0	; () banked
  4146  002E38  6FA7               	movwf	??_high_isr& (0+255),b
  4147  002E3A  0E00               	movlw	0
  4148  002E3C  6E0D               	movwf	?_tick,c
  4149  002E3E  0100               	movlb	0	; () banked
  4150  002E40  51A7               	movf	??_high_isr& (0+255),w,b
  4151  002E42  EC15  F01C         	call	_tick	;wreg free
  4152  002E46                     
  4153                           ;main.c: 100: menu->printFn(menu->digits);
  4154  002E46  0100               	movlb	0	; () banked
  4155  002E48  EE20 F001          	lfsr	2,1
  4156  002E4C  0100               	movlb	0	; () banked
  4157  002E4E  51F4               	movf	_menu& (0+255),w,b
  4158  002E50  26D9               	addwf	fsr2l,f,c
  4159  002E52  0100               	movlb	0	; () banked
  4160  002E54  51F5               	movf	(_menu+1)& (0+255),w,b
  4161  002E56  22DA               	addwfc	fsr2h,f,c
  4162  002E58  50DF               	movf	indf2,w,c
  4163  002E5A  6E5E               	movwf	?_printTemp,c
  4164  002E5C  0100               	movlb	0	; () banked
  4165  002E5E  EE20 F003          	lfsr	2,3
  4166  002E62  0100               	movlb	0	; () banked
  4167  002E64  51F4               	movf	_menu& (0+255),w,b
  4168  002E66  26D9               	addwf	fsr2l,f,c
  4169  002E68  0100               	movlb	0	; () banked
  4170  002E6A  51F5               	movf	(_menu+1)& (0+255),w,b
  4171  002E6C  22DA               	addwfc	fsr2h,f,c
  4172  002E6E  D801               	call	i2u542_48
  4173  002E70  D00A               	goto	i2u542_49
  4174  002E72                     i2u542_48:
  4175  002E72  0005               	push	
  4176  002E74  6EFA               	movwf	pclath,c
  4177  002E76  50DE               	movf	postinc2,w,c
  4178  002E78  6EFD               	movwf	tosl,c
  4179  002E7A  50DE               	movf	postinc2,w,c
  4180  002E7C  6EFE               	movwf	tosh,c
  4181  002E7E  50F8               	movf	tblptru,w,c
  4182  002E80  6EFF               	movwf	tosu,c
  4183  002E82  50FA               	movf	pclath,w,c
  4184  002E84  0012               	return		;indir
  4185  002E86                     i2u542_49:
  4186  002E86  D000               	goto	i2l7023
  4187  002E88                     i2l7023:
  4188                           
  4189                           ;main.c: 101: }
  4190                           ;main.c: 102: TMR1ON = 1;
  4191  002E88  80CD               	bsf	4045,0,c	;volatile
  4192  002E8A  D000               	goto	i2l7025
  4193  002E8C                     i2l7025:
  4194                           
  4195                           ;main.c: 103: }
  4196                           ;main.c: 104: if (TMR0IE && TMR0IF)
  4197  002E8C  AAF2               	btfss	intcon,5,c	;volatile
  4198  002E8E  D001               	goto	i2u543_41
  4199  002E90  D001               	goto	i2u543_40
  4200  002E92                     i2u543_41:
  4201  002E92  D04D               	goto	i2l83
  4202  002E94                     i2u543_40:
  4203  002E94  A4F2               	btfss	intcon,2,c	;volatile
  4204  002E96  D001               	goto	i2u544_41
  4205  002E98  D001               	goto	i2u544_40
  4206  002E9A                     i2u544_41:
  4207  002E9A  D049               	goto	i2l83
  4208  002E9C                     i2u544_40:
  4209  002E9C                     
  4210                           ;main.c: 105: {
  4211                           ;main.c: 106: TMR0IF = CLEAR;
  4212  002E9C  94F2               	bcf	intcon,2,c	;volatile
  4213                           
  4214                           ;main.c: 107: TMR0ON = 0;
  4215  002E9E  9ED5               	bcf	4053,7,c	;volatile
  4216  002EA0                     
  4217                           ;main.c: 108: TMR0 = 0;
  4218  002EA0  0E00               	movlw	0
  4219  002EA2  6ED7               	movwf	4055,c	;volatile
  4220  002EA4  0E00               	movlw	0
  4221  002EA6  6ED6               	movwf	4054,c	;volatile
  4222  002EA8                     
  4223                           ;main.c: 109: if (++tmr0BigCounts > (0))
  4224  002EA8  0E01               	movlw	1
  4225  002EAA  0100               	movlb	0	; () banked
  4226  002EAC  0100               	movlb	0	; () banked
  4227  002EAE  27D5               	addwf	_tmr0BigCounts& (0+255),f,b
  4228  002EB0  0E00               	movlw	0
  4229  002EB2  0100               	movlb	0	; () banked
  4230  002EB4  23D6               	addwfc	(_tmr0BigCounts+1)& (0+255),f,b
  4231  002EB6  0E00               	movlw	0
  4232  002EB8  0100               	movlb	0	; () banked
  4233  002EBA  23D7               	addwfc	(_tmr0BigCounts+2)& (0+255),f,b
  4234  002EBC  0E00               	movlw	0
  4235  002EBE  0100               	movlb	0	; () banked
  4236  002EC0  23D8               	addwfc	(_tmr0BigCounts+3)& (0+255),f,b
  4237  002EC2  0100               	movlb	0	; () banked
  4238  002EC4  51D8               	movf	(_tmr0BigCounts+3)& (0+255),w,b
  4239  002EC6  11D5               	iorwf	_tmr0BigCounts& (0+255),w,b
  4240  002EC8  11D6               	iorwf	(_tmr0BigCounts+1)& (0+255),w,b
  4241  002ECA  11D7               	iorwf	(_tmr0BigCounts+2)& (0+255),w,b
  4242  002ECC  B4D8               	btfsc	status,2,c
  4243  002ECE  D001               	goto	i2u545_41
  4244  002ED0  D001               	goto	i2u545_40
  4245  002ED2                     i2u545_41:
  4246  002ED2  D02B               	goto	i2l7043
  4247  002ED4                     i2u545_40:
  4248  002ED4                     
  4249                           ; BSR set to: 0
  4250                           ;main.c: 110: {
  4251                           ;main.c: 111: tmr0BigCounts = 0;
  4252  002ED4  0E00               	movlw	0
  4253  002ED6  0100               	movlb	0	; () banked
  4254  002ED8  0100               	movlb	0	; () banked
  4255  002EDA  6FD5               	movwf	_tmr0BigCounts& (0+255),b
  4256  002EDC  0E00               	movlw	0
  4257  002EDE  0100               	movlb	0	; () banked
  4258  002EE0  6FD6               	movwf	(_tmr0BigCounts+1)& (0+255),b
  4259  002EE2  0E00               	movlw	0
  4260  002EE4  0100               	movlb	0	; () banked
  4261  002EE6  6FD7               	movwf	(_tmr0BigCounts+2)& (0+255),b
  4262  002EE8  0E00               	movlw	0
  4263  002EEA  0100               	movlb	0	; () banked
  4264  002EEC  6FD8               	movwf	(_tmr0BigCounts+3)& (0+255),b
  4265                           
  4266                           ;main.c: 112: TMR0 = (65536-32767);
  4267  002EEE  0E80               	movlw	128
  4268  002EF0  6ED7               	movwf	4055,c	;volatile
  4269  002EF2  0E01               	movlw	1
  4270  002EF4  6ED6               	movwf	4054,c	;volatile
  4271  002EF6                     
  4272                           ; BSR set to: 0
  4273                           ;main.c: 114: buttons();
  4274  002EF6  ECA3  F021         	call	_buttons	;wreg free
  4275  002EFA                     
  4276                           ;main.c: 115: LATC2 = ~LATC2;
  4277  002EFA  748B               	btg	3979,2,c	;volatile
  4278  002EFC                     
  4279                           ;main.c: 117: LATA5 = (menu == &tempMenu) ? 0 : 1;
  4280  002EFC  0E38               	movlw	low _tempMenu
  4281  002EFE  0100               	movlb	0	; () banked
  4282  002F00  6FA7               	movwf	??_high_isr& (0+255),b
  4283  002F02  0E01               	movlw	high _tempMenu
  4284  002F04  6FA8               	movwf	(??_high_isr+1)& (0+255),b
  4285  002F06  0100               	movlb	0	; () banked
  4286  002F08  51A8               	movf	(??_high_isr+1)& (0+255),w,b
  4287  002F0A  0100               	movlb	0	; () banked
  4288  002F0C  0100               	movlb	0	; () banked
  4289  002F0E  19F5               	xorwf	(_menu+1)& (0+255),w,b
  4290  002F10  E105               	bnz	i2u546_45
  4291  002F12  0100               	movlb	0	; () banked
  4292  002F14  51A7               	movf	??_high_isr& (0+255),w,b
  4293  002F16  0100               	movlb	0	; () banked
  4294  002F18  0100               	movlb	0	; () banked
  4295  002F1A  19F4               	xorwf	_menu& (0+255),w,b
  4296  002F1C                     i2u546_45:
  4297  002F1C  A4D8               	btfss	status,2,c
  4298  002F1E  D001               	goto	i2u546_41
  4299  002F20  D002               	goto	i2u546_40
  4300  002F22                     i2u546_41:
  4301  002F22  8A89               	bsf	3977,5,c	;volatile
  4302  002F24  D001               	goto	i2u547_45
  4303  002F26                     i2u546_40:
  4304  002F26  9A89               	bcf	3977,5,c	;volatile
  4305  002F28                     i2u547_45:
  4306  002F28  D000               	goto	i2l7043
  4307  002F2A                     i2l7043:
  4308                           
  4309                           ;main.c: 118: }
  4310                           ;main.c: 119: TMR0ON = 1;
  4311  002F2A  8ED5               	bsf	4053,7,c	;volatile
  4312  002F2C  D000               	goto	i2l83
  4313  002F2E                     i2l83:
  4314  002F2E  C0B6  FFF5         	movff	??_high_isr+15,tablat
  4315  002F32  C0B5  FFF8         	movff	??_high_isr+14,tblptru
  4316  002F36  C0B4  FFF7         	movff	??_high_isr+13,tblptrh
  4317  002F3A  C0B3  FFF6         	movff	??_high_isr+12,tblptrl
  4318  002F3E  C0B2  FFF4         	movff	??_high_isr+11,prodh
  4319  002F42  C0B1  FFF3         	movff	??_high_isr+10,prodl
  4320  002F46  C0B0  FFDA         	movff	??_high_isr+9,fsr2h
  4321  002F4A  C0AF  FFD9         	movff	??_high_isr+8,fsr2l
  4322  002F4E  C0AE  FFE2         	movff	??_high_isr+7,fsr1h
  4323  002F52  C0AD  FFE1         	movff	??_high_isr+6,fsr1l
  4324  002F56  C0AC  FFEA         	movff	??_high_isr+5,fsr0h
  4325  002F5A  C0AB  FFE9         	movff	??_high_isr+4,fsr0l
  4326  002F5E  C0AA  FFFB         	movff	??_high_isr+3,pclatu
  4327  002F62  C0A9  FFFA         	movff	??_high_isr+2,pclath
  4328  002F66  0011               	retfie		f
  4329  002F68                     __end_of_high_isr:
  4330                           	opt stack 0
  4331                           tosu	equ	0xFFF
  4332                           tosh	equ	0xFFE
  4333                           tosl	equ	0xFFD
  4334                           pclatu	equ	0xFFB
  4335                           pclath	equ	0xFFA
  4336                           tblptru	equ	0xFF8
  4337                           tblptrh	equ	0xFF7
  4338                           tblptrl	equ	0xFF6
  4339                           tablat	equ	0xFF5
  4340                           prodh	equ	0xFF4
  4341                           prodl	equ	0xFF3
  4342                           intcon	equ	0xFF2
  4343                           intcon2	equ	0xFF1
  4344                           postinc0	equ	0xFEE
  4345                           fsr0h	equ	0xFEA
  4346                           fsr0l	equ	0xFE9
  4347                           wreg	equ	0xFE8
  4348                           postdec1	equ	0xFE5
  4349                           fsr1h	equ	0xFE2
  4350                           fsr1l	equ	0xFE1
  4351                           indf2	equ	0xFDF
  4352                           postinc2	equ	0xFDE
  4353                           fsr2h	equ	0xFDA
  4354                           fsr2l	equ	0xFD9
  4355                           status	equ	0xFD8
  4356                           
  4357 ;; *************** function _printRTC *****************
  4358 ;; Defined at:
  4359 ;;		line 186 in file "RTC.c"
  4360 ;; Parameters:    Size  Location     Type
  4361 ;;  digits          1   93[COMRAM] unsigned char 
  4362 ;; Auto vars:     Size  Location     Type
  4363 ;;  str             9   60[BANK0 ] unsigned char [9]
  4364 ;; Return value:  Size  Location     Type
  4365 ;;                  2   93[COMRAM] PTR void 
  4366 ;; Registers used:
  4367 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4368 ;; Tracked objects:
  4369 ;;		On entry : 0/0
  4370 ;;		On exit  : 0/0
  4371 ;;		Unchanged: 0/0
  4372 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4373 ;;      Params:         1       0       0       0       0       0       0       0       0
  4374 ;;      Locals:         0      11       0       0       0       0       0       0       0
  4375 ;;      Temps:          0       2       0       0       0       0       0       0       0
  4376 ;;      Totals:         1      13       0       0       0       0       0       0       0
  4377 ;;Total ram usage:       14 bytes
  4378 ;; Hardware stack levels used:    1
  4379 ;; Hardware stack levels required when called:    5
  4380 ;; This function calls:
  4381 ;;		_countBits
  4382 ;;		_sprintf
  4383 ;;		_writeString
  4384 ;;		___lwmod
  4385 ;; This function is called by:
  4386 ;;		_initRTC
  4387 ;;		_high_isr
  4388 ;; This function uses a non-reentrant model
  4389 ;;
  4390                           
  4391                           	psect	text16
  4392  000FAE                     __ptext16:
  4393                           	opt stack 0
  4394  000FAE                     _printRTC:
  4395                           	opt stack 20
  4396                           
  4397                           ;RTC.c: 187: char str[9] = "";
  4398                           
  4399                           ;incstack = 0
  4400                           ;incstack = 0
  4401  000FAE  EE20  F0C3         	lfsr	2,printRTC@F5073
  4402  000FB2  EE10  F09C         	lfsr	1,printRTC@str
  4403  000FB6  0E09               	movlw	9
  4404  000FB8                     i2u538_41:
  4405  000FB8  CFDE FFE6          	movff	postinc2,postinc1
  4406  000FBC  2EE8               	decfsz	wreg,f,c
  4407  000FBE  D7FC               	goto	i2u538_41
  4408                           
  4409                           ;RTC.c: 188: switch (countBits(digits))
  4410  000FC0  D2C8               	goto	i2l6985
  4411  000FC2                     i2l6937:
  4412                           
  4413                           ;RTC.c: 194: sprintf(&str, "%s %02d.%02d", (dow[date.dow]), date.hour, date.minute);
  4414  000FC2  0100               	movlb	0	; () banked
  4415  000FC4  0E00               	movlw	high printRTC@str
  4416  000FC6  0100               	movlb	0	; () banked
  4417  000FC8  0100               	movlb	0	; () banked
  4418  000FCA  6F61               	movwf	(?_sprintf+1)& (0+255),b
  4419  000FCC  0100               	movlb	0	; () banked
  4420  000FCE  0E9C               	movlw	low printRTC@str
  4421  000FD0  0100               	movlb	0	; () banked
  4422  000FD2  6F60               	movwf	?_sprintf& (0+255),b
  4423  000FD4  0E7F               	movlw	high STR_17
  4424  000FD6  0100               	movlb	0	; () banked
  4425  000FD8  0100               	movlb	0	; () banked
  4426  000FDA  6F63               	movwf	(?_sprintf+3)& (0+255),b
  4427  000FDC  0EC1               	movlw	low STR_17
  4428  000FDE  0100               	movlb	0	; () banked
  4429  000FE0  6F62               	movwf	(?_sprintf+2)& (0+255),b
  4430  000FE2  0101               	movlb	1	; () banked
  4431  000FE4  0101               	movlb	1	; () banked
  4432  000FE6  5126               	movf	(_date+4)& (0+255),w,b
  4433  000FE8  0D02               	mullw	2
  4434  000FEA  0100               	movlb	0	; () banked
  4435  000FEC  0EDD               	movlw	low _dow
  4436  000FEE  24F3               	addwf	prodl,w,c
  4437  000FF0  6ED9               	movwf	fsr2l,c
  4438  000FF2  0100               	movlb	0	; () banked
  4439  000FF4  0E00               	movlw	high _dow
  4440  000FF6  20F4               	addwfc	prodh,w,c
  4441  000FF8  6EDA               	movwf	fsr2h,c
  4442  000FFA  0100               	movlb	0	; () banked
  4443  000FFC  CFDE F064          	movff	postinc2,?_sprintf+4
  4444  001000  0100               	movlb	0	; () banked
  4445  001002  CFDD F065          	movff	postdec2,?_sprintf+5
  4446  001006  0101               	movlb	1	; () banked
  4447  001008  0100               	movlb	0	; () banked
  4448  00100A  C124  F066         	movff	_date+2,?_sprintf+6
  4449  00100E  0100               	movlb	0	; () banked
  4450  001010  0100               	movlb	0	; () banked
  4451  001012  6B67               	clrf	(?_sprintf+7)& (0+255),b
  4452  001014  0101               	movlb	1	; () banked
  4453  001016  0100               	movlb	0	; () banked
  4454  001018  C123  F068         	movff	_date+1,?_sprintf+8
  4455  00101C  0100               	movlb	0	; () banked
  4456  00101E  0100               	movlb	0	; () banked
  4457  001020  6B69               	clrf	(?_sprintf+9)& (0+255),b
  4458  001022  EC0E  F000         	call	_sprintf	;wreg free
  4459                           
  4460                           ;RTC.c: 195: break;
  4461  001026  D236               	goto	i2l6973
  4462  001028                     i2l6939:
  4463                           
  4464                           ;RTC.c: 197: sprintf(&str, "%02d %02d %02d", date.day, date.month, date.year % 100);
  4465  001028  C128  F001         	movff	_date+6,?___lwmod
  4466  00102C  C129  F002         	movff	_date+7,?___lwmod+1
  4467  001030  0E00               	movlw	0
  4468  001032  6E04               	movwf	?___lwmod+3,c
  4469  001034  0E64               	movlw	100
  4470  001036  6E03               	movwf	?___lwmod+2,c
  4471  001038  EC3C  F022         	call	___lwmod	;wreg free
  4472  00103C  C001  F0A5         	movff	?___lwmod,_printRTC$1392
  4473  001040  C002  F0A6         	movff	?___lwmod+1,_printRTC$1392+1
  4474                           
  4475                           ;RTC.c: 197: sprintf(&str, "%02d %02d %02d", date.day, date.month, date.year % 100);
  4476  001044  0100               	movlb	0	; () banked
  4477  001046  0E00               	movlw	high printRTC@str
  4478  001048  0100               	movlb	0	; () banked
  4479  00104A  0100               	movlb	0	; () banked
  4480  00104C  6F61               	movwf	(?_sprintf+1)& (0+255),b
  4481  00104E  0100               	movlb	0	; () banked
  4482  001050  0E9C               	movlw	low printRTC@str
  4483  001052  0100               	movlb	0	; () banked
  4484  001054  6F60               	movwf	?_sprintf& (0+255),b
  4485  001056  0E7F               	movlw	high STR_18
  4486  001058  0100               	movlb	0	; () banked
  4487  00105A  0100               	movlb	0	; () banked
  4488  00105C  6F63               	movwf	(?_sprintf+3)& (0+255),b
  4489  00105E  0EA4               	movlw	low STR_18
  4490  001060  0100               	movlb	0	; () banked
  4491  001062  6F62               	movwf	(?_sprintf+2)& (0+255),b
  4492  001064  0101               	movlb	1	; () banked
  4493  001066  0100               	movlb	0	; () banked
  4494  001068  C125  F064         	movff	_date+3,?_sprintf+4
  4495  00106C  0100               	movlb	0	; () banked
  4496  00106E  0100               	movlb	0	; () banked
  4497  001070  6B65               	clrf	(?_sprintf+5)& (0+255),b
  4498  001072  0101               	movlb	1	; () banked
  4499  001074  0100               	movlb	0	; () banked
  4500  001076  C127  F066         	movff	_date+5,?_sprintf+6
  4501  00107A  0100               	movlb	0	; () banked
  4502  00107C  0100               	movlb	0	; () banked
  4503  00107E  6B67               	clrf	(?_sprintf+7)& (0+255),b
  4504  001080  C0A5  F068         	movff	_printRTC$1392,?_sprintf+8
  4505  001084  C0A6  F069         	movff	_printRTC$1392+1,?_sprintf+9
  4506  001088  EC0E  F000         	call	_sprintf	;wreg free
  4507                           
  4508                           ;RTC.c: 198: break;
  4509  00108C  D203               	goto	i2l6973
  4510  00108E                     i2l6943:
  4511                           
  4512                           ;RTC.c: 200: sprintf(&str, "  %02d.%02d.%02d", date.hour, date.minute, date.second);
  4513  00108E  0100               	movlb	0	; () banked
  4514  001090  0E00               	movlw	high printRTC@str
  4515  001092  0100               	movlb	0	; () banked
  4516  001094  0100               	movlb	0	; () banked
  4517  001096  6F61               	movwf	(?_sprintf+1)& (0+255),b
  4518  001098  0100               	movlb	0	; () banked
  4519  00109A  0E9C               	movlw	low printRTC@str
  4520  00109C  0100               	movlb	0	; () banked
  4521  00109E  6F60               	movwf	?_sprintf& (0+255),b
  4522  0010A0  0E7F               	movlw	high STR_19
  4523  0010A2  0100               	movlb	0	; () banked
  4524  0010A4  0100               	movlb	0	; () banked
  4525  0010A6  6F63               	movwf	(?_sprintf+3)& (0+255),b
  4526  0010A8  0E83               	movlw	low STR_19
  4527  0010AA  0100               	movlb	0	; () banked
  4528  0010AC  6F62               	movwf	(?_sprintf+2)& (0+255),b
  4529  0010AE  0101               	movlb	1	; () banked
  4530  0010B0  0100               	movlb	0	; () banked
  4531  0010B2  C124  F064         	movff	_date+2,?_sprintf+4
  4532  0010B6  0100               	movlb	0	; () banked
  4533  0010B8  0100               	movlb	0	; () banked
  4534  0010BA  6B65               	clrf	(?_sprintf+5)& (0+255),b
  4535  0010BC  0101               	movlb	1	; () banked
  4536  0010BE  0100               	movlb	0	; () banked
  4537  0010C0  C123  F066         	movff	_date+1,?_sprintf+6
  4538  0010C4  0100               	movlb	0	; () banked
  4539  0010C6  0100               	movlb	0	; () banked
  4540  0010C8  6B67               	clrf	(?_sprintf+7)& (0+255),b
  4541  0010CA  0101               	movlb	1	; () banked
  4542  0010CC  0100               	movlb	0	; () banked
  4543  0010CE  C122  F068         	movff	_date,?_sprintf+8
  4544  0010D2  0100               	movlb	0	; () banked
  4545  0010D4  0100               	movlb	0	; () banked
  4546  0010D6  6B69               	clrf	(?_sprintf+9)& (0+255),b
  4547  0010D8  EC0E  F000         	call	_sprintf	;wreg free
  4548                           
  4549                           ;RTC.c: 201: break;
  4550  0010DC  D1DB               	goto	i2l6973
  4551  0010DE                     i2l6945:
  4552                           
  4553                           ;RTC.c: 203: sprintf(&str, " %c%c %02d.%02d", (dow[date.dow])[0], (dow[date.dow])[1], da
      +                          te.minute, date.second);
  4554  0010DE  0100               	movlb	0	; () banked
  4555  0010E0  0E00               	movlw	high printRTC@str
  4556  0010E2  0100               	movlb	0	; () banked
  4557  0010E4  0100               	movlb	0	; () banked
  4558  0010E6  6F61               	movwf	(?_sprintf+1)& (0+255),b
  4559  0010E8  0100               	movlb	0	; () banked
  4560  0010EA  0E9C               	movlw	low printRTC@str
  4561  0010EC  0100               	movlb	0	; () banked
  4562  0010EE  6F60               	movwf	?_sprintf& (0+255),b
  4563  0010F0  0E7F               	movlw	high STR_20
  4564  0010F2  0100               	movlb	0	; () banked
  4565  0010F4  0100               	movlb	0	; () banked
  4566  0010F6  6F63               	movwf	(?_sprintf+3)& (0+255),b
  4567  0010F8  0E94               	movlw	low STR_20
  4568  0010FA  0100               	movlb	0	; () banked
  4569  0010FC  6F62               	movwf	(?_sprintf+2)& (0+255),b
  4570  0010FE  0101               	movlb	1	; () banked
  4571  001100  0101               	movlb	1	; () banked
  4572  001102  5126               	movf	(_date+4)& (0+255),w,b
  4573  001104  0D02               	mullw	2
  4574  001106  0100               	movlb	0	; () banked
  4575  001108  0EDD               	movlw	low _dow
  4576  00110A  24F3               	addwf	prodl,w,c
  4577  00110C  6ED9               	movwf	fsr2l,c
  4578  00110E  0100               	movlb	0	; () banked
  4579  001110  0E00               	movlw	high _dow
  4580  001112  20F4               	addwfc	prodh,w,c
  4581  001114  6EDA               	movwf	fsr2h,c
  4582  001116  CFDE FFF6          	movff	postinc2,tblptrl
  4583  00111A  CFDD FFF7          	movff	postdec2,tblptrh
  4584  00111E  0008               	tblrd		*
  4585  001120  50F5               	movf	tablat,w,c
  4586  001122  0100               	movlb	0	; () banked
  4587  001124  0100               	movlb	0	; () banked
  4588  001126  6F64               	movwf	(?_sprintf+4)& (0+255),b
  4589  001128  0100               	movlb	0	; () banked
  4590  00112A  6B65               	clrf	(?_sprintf+5)& (0+255),b
  4591  00112C  0101               	movlb	1	; () banked
  4592  00112E  0101               	movlb	1	; () banked
  4593  001130  5126               	movf	(_date+4)& (0+255),w,b
  4594  001132  0D02               	mullw	2
  4595  001134  0100               	movlb	0	; () banked
  4596  001136  0EDD               	movlw	low _dow
  4597  001138  24F3               	addwf	prodl,w,c
  4598  00113A  6ED9               	movwf	fsr2l,c
  4599  00113C  0100               	movlb	0	; () banked
  4600  00113E  0E00               	movlw	high _dow
  4601  001140  20F4               	addwfc	prodh,w,c
  4602  001142  6EDA               	movwf	fsr2h,c
  4603  001144  CFDE F09A          	movff	postinc2,??_printRTC
  4604  001148  CFDD F09B          	movff	postdec2,??_printRTC+1
  4605  00114C  0E01               	movlw	1
  4606  00114E  0100               	movlb	0	; () banked
  4607  001150  279A               	addwf	??_printRTC& (0+255),f,b
  4608  001152  0E00               	movlw	0
  4609  001154  239B               	addwfc	(??_printRTC+1)& (0+255),f,b
  4610  001156  C09A  FFF6         	movff	??_printRTC,tblptrl
  4611  00115A  C09B  FFF7         	movff	??_printRTC+1,tblptrh
  4612  00115E  0008               	tblrd		*
  4613  001160  50F5               	movf	tablat,w,c
  4614  001162  0100               	movlb	0	; () banked
  4615  001164  0100               	movlb	0	; () banked
  4616  001166  6F66               	movwf	(?_sprintf+6)& (0+255),b
  4617  001168  0100               	movlb	0	; () banked
  4618  00116A  6B67               	clrf	(?_sprintf+7)& (0+255),b
  4619  00116C  0101               	movlb	1	; () banked
  4620  00116E  0100               	movlb	0	; () banked
  4621  001170  C123  F068         	movff	_date+1,?_sprintf+8
  4622  001174  0100               	movlb	0	; () banked
  4623  001176  0100               	movlb	0	; () banked
  4624  001178  6B69               	clrf	(?_sprintf+9)& (0+255),b
  4625  00117A  0101               	movlb	1	; () banked
  4626  00117C  0100               	movlb	0	; () banked
  4627  00117E  C122  F06A         	movff	_date,?_sprintf+10
  4628  001182  0100               	movlb	0	; () banked
  4629  001184  0100               	movlb	0	; () banked
  4630  001186  6B6B               	clrf	(?_sprintf+11)& (0+255),b
  4631  001188  EC0E  F000         	call	_sprintf	;wreg free
  4632                           
  4633                           ;RTC.c: 204: break;
  4634  00118C  D183               	goto	i2l6973
  4635  00118E                     i2l6947:
  4636                           
  4637                           ;RTC.c: 206: sprintf(&str, "  %02d.%02d.%02d", date.day, date.month, date.year % 100);
  4638  00118E  C128  F001         	movff	_date+6,?___lwmod
  4639  001192  C129  F002         	movff	_date+7,?___lwmod+1
  4640  001196  0E00               	movlw	0
  4641  001198  6E04               	movwf	?___lwmod+3,c
  4642  00119A  0E64               	movlw	100
  4643  00119C  6E03               	movwf	?___lwmod+2,c
  4644  00119E  EC3C  F022         	call	___lwmod	;wreg free
  4645  0011A2  C001  F0A5         	movff	?___lwmod,_printRTC$1392
  4646  0011A6  C002  F0A6         	movff	?___lwmod+1,_printRTC$1392+1
  4647                           
  4648                           ;RTC.c: 206: sprintf(&str, "  %02d.%02d.%02d", date.day, date.month, date.year % 100);
  4649  0011AA  0100               	movlb	0	; () banked
  4650  0011AC  0E00               	movlw	high printRTC@str
  4651  0011AE  0100               	movlb	0	; () banked
  4652  0011B0  0100               	movlb	0	; () banked
  4653  0011B2  6F61               	movwf	(?_sprintf+1)& (0+255),b
  4654  0011B4  0100               	movlb	0	; () banked
  4655  0011B6  0E9C               	movlw	low printRTC@str
  4656  0011B8  0100               	movlb	0	; () banked
  4657  0011BA  6F60               	movwf	?_sprintf& (0+255),b
  4658  0011BC  0E7F               	movlw	high STR_19
  4659  0011BE  0100               	movlb	0	; () banked
  4660  0011C0  0100               	movlb	0	; () banked
  4661  0011C2  6F63               	movwf	(?_sprintf+3)& (0+255),b
  4662  0011C4  0E83               	movlw	low STR_19
  4663  0011C6  0100               	movlb	0	; () banked
  4664  0011C8  6F62               	movwf	(?_sprintf+2)& (0+255),b
  4665  0011CA  0101               	movlb	1	; () banked
  4666  0011CC  0100               	movlb	0	; () banked
  4667  0011CE  C125  F064         	movff	_date+3,?_sprintf+4
  4668  0011D2  0100               	movlb	0	; () banked
  4669  0011D4  0100               	movlb	0	; () banked
  4670  0011D6  6B65               	clrf	(?_sprintf+5)& (0+255),b
  4671  0011D8  0101               	movlb	1	; () banked
  4672  0011DA  0100               	movlb	0	; () banked
  4673  0011DC  C127  F066         	movff	_date+5,?_sprintf+6
  4674  0011E0  0100               	movlb	0	; () banked
  4675  0011E2  0100               	movlb	0	; () banked
  4676  0011E4  6B67               	clrf	(?_sprintf+7)& (0+255),b
  4677  0011E6  C0A5  F068         	movff	_printRTC$1392,?_sprintf+8
  4678  0011EA  C0A6  F069         	movff	_printRTC$1392+1,?_sprintf+9
  4679  0011EE  EC0E  F000         	call	_sprintf	;wreg free
  4680                           
  4681                           ;RTC.c: 207: break;
  4682  0011F2  D150               	goto	i2l6973
  4683  0011F4                     i2l6951:
  4684                           
  4685                           ;RTC.c: 209: sprintf(&str, "    %02d.%02d", date.hour, date.minute);
  4686  0011F4  0100               	movlb	0	; () banked
  4687  0011F6  0E00               	movlw	high printRTC@str
  4688  0011F8  0100               	movlb	0	; () banked
  4689  0011FA  0100               	movlb	0	; () banked
  4690  0011FC  6F61               	movwf	(?_sprintf+1)& (0+255),b
  4691  0011FE  0100               	movlb	0	; () banked
  4692  001200  0E9C               	movlw	low printRTC@str
  4693  001202  0100               	movlb	0	; () banked
  4694  001204  6F60               	movwf	?_sprintf& (0+255),b
  4695  001206  0E7F               	movlw	high STR_22
  4696  001208  0100               	movlb	0	; () banked
  4697  00120A  0100               	movlb	0	; () banked
  4698  00120C  6F63               	movwf	(?_sprintf+3)& (0+255),b
  4699  00120E  0EB3               	movlw	low STR_22
  4700  001210  0100               	movlb	0	; () banked
  4701  001212  6F62               	movwf	(?_sprintf+2)& (0+255),b
  4702  001214  0101               	movlb	1	; () banked
  4703  001216  0100               	movlb	0	; () banked
  4704  001218  C124  F064         	movff	_date+2,?_sprintf+4
  4705  00121C  0100               	movlb	0	; () banked
  4706  00121E  0100               	movlb	0	; () banked
  4707  001220  6B65               	clrf	(?_sprintf+5)& (0+255),b
  4708  001222  0101               	movlb	1	; () banked
  4709  001224  0100               	movlb	0	; () banked
  4710  001226  C123  F066         	movff	_date+1,?_sprintf+6
  4711  00122A  0100               	movlb	0	; () banked
  4712  00122C  0100               	movlb	0	; () banked
  4713  00122E  6B67               	clrf	(?_sprintf+7)& (0+255),b
  4714  001230  EC0E  F000         	call	_sprintf	;wreg free
  4715                           
  4716                           ;RTC.c: 210: break;
  4717  001234  D12F               	goto	i2l6973
  4718  001236                     i2l6953:
  4719                           
  4720                           ;RTC.c: 212: sprintf(&str, "    %02d.%02d", date.day, date.month);
  4721  001236  0100               	movlb	0	; () banked
  4722  001238  0E00               	movlw	high printRTC@str
  4723  00123A  0100               	movlb	0	; () banked
  4724  00123C  0100               	movlb	0	; () banked
  4725  00123E  6F61               	movwf	(?_sprintf+1)& (0+255),b
  4726  001240  0100               	movlb	0	; () banked
  4727  001242  0E9C               	movlw	low printRTC@str
  4728  001244  0100               	movlb	0	; () banked
  4729  001246  6F60               	movwf	?_sprintf& (0+255),b
  4730  001248  0E7F               	movlw	high STR_22
  4731  00124A  0100               	movlb	0	; () banked
  4732  00124C  0100               	movlb	0	; () banked
  4733  00124E  6F63               	movwf	(?_sprintf+3)& (0+255),b
  4734  001250  0EB3               	movlw	low STR_22
  4735  001252  0100               	movlb	0	; () banked
  4736  001254  6F62               	movwf	(?_sprintf+2)& (0+255),b
  4737  001256  0101               	movlb	1	; () banked
  4738  001258  0100               	movlb	0	; () banked
  4739  00125A  C125  F064         	movff	_date+3,?_sprintf+4
  4740  00125E  0100               	movlb	0	; () banked
  4741  001260  0100               	movlb	0	; () banked
  4742  001262  6B65               	clrf	(?_sprintf+5)& (0+255),b
  4743  001264  0101               	movlb	1	; () banked
  4744  001266  0100               	movlb	0	; () banked
  4745  001268  C127  F066         	movff	_date+5,?_sprintf+6
  4746  00126C  0100               	movlb	0	; () banked
  4747  00126E  0100               	movlb	0	; () banked
  4748  001270  6B67               	clrf	(?_sprintf+7)& (0+255),b
  4749  001272  EC0E  F000         	call	_sprintf	;wreg free
  4750                           
  4751                           ;RTC.c: 213: break;
  4752  001276  D10E               	goto	i2l6973
  4753  001278                     i2l6957:
  4754  001278  0101               	movlb	1	; () banked
  4755  00127A  0101               	movlb	1	; () banked
  4756  00127C  513D               	movf	_rtcMenu& (0+255),w,b
  4757                           
  4758                           ; Switch size 1, requested type "space"
  4759                           ; Number of cases is 7, Range of values is 0 to 9
  4760                           ; switch strategies available:
  4761                           ; Name         Instructions Cycles
  4762                           ; simple_byte           22    12 (average)
  4763                           ;	Chosen strategy is simple_byte
  4764  00127E  0A00               	xorlw	0	; case 0
  4765  001280  B4D8               	btfsc	status,2,c
  4766  001282  D7B8               	goto	i2l6951
  4767  001284  0A01               	xorlw	1	; case 1
  4768  001286  B4D8               	btfsc	status,2,c
  4769  001288  D702               	goto	i2l6943
  4770  00128A  0A03               	xorlw	3	; case 2
  4771  00128C  B4D8               	btfsc	status,2,c
  4772  00128E  D699               	goto	i2l6937
  4773  001290  0A01               	xorlw	1	; case 3
  4774  001292  B4D8               	btfsc	status,2,c
  4775  001294  D724               	goto	i2l6945
  4776  001296  0A05               	xorlw	5	; case 6
  4777  001298  B4D8               	btfsc	status,2,c
  4778  00129A  D7CD               	goto	i2l6953
  4779  00129C  0A0E               	xorlw	14	; case 8
  4780  00129E  B4D8               	btfsc	status,2,c
  4781  0012A0  D776               	goto	i2l6947
  4782  0012A2  0A01               	xorlw	1	; case 9
  4783  0012A4  B4D8               	btfsc	status,2,c
  4784  0012A6  D6C0               	goto	i2l6939
  4785  0012A8  D0F5               	goto	i2l6973
  4786  0012AA                     i2l6959:
  4787                           
  4788                           ; BSR set to: 1
  4789                           ;RTC.c: 219: sprintf(&str, "%02d.%02d.%02d", date.hour, date.minute, date.second);
  4790  0012AA  0100               	movlb	0	; () banked
  4791  0012AC  0E00               	movlw	high printRTC@str
  4792  0012AE  0100               	movlb	0	; () banked
  4793  0012B0  0100               	movlb	0	; () banked
  4794  0012B2  6F61               	movwf	(?_sprintf+1)& (0+255),b
  4795  0012B4  0100               	movlb	0	; () banked
  4796  0012B6  0E9C               	movlw	low printRTC@str
  4797  0012B8  0100               	movlb	0	; () banked
  4798  0012BA  6F60               	movwf	?_sprintf& (0+255),b
  4799  0012BC  0E7F               	movlw	high (STR_19+2)
  4800  0012BE  0100               	movlb	0	; () banked
  4801  0012C0  0100               	movlb	0	; () banked
  4802  0012C2  6F63               	movwf	(?_sprintf+3)& (0+255),b
  4803  0012C4  0E85               	movlw	low (STR_19+2)
  4804  0012C6  0100               	movlb	0	; () banked
  4805  0012C8  6F62               	movwf	(?_sprintf+2)& (0+255),b
  4806  0012CA  0101               	movlb	1	; () banked
  4807  0012CC  0100               	movlb	0	; () banked
  4808  0012CE  C124  F064         	movff	_date+2,?_sprintf+4
  4809  0012D2  0100               	movlb	0	; () banked
  4810  0012D4  0100               	movlb	0	; () banked
  4811  0012D6  6B65               	clrf	(?_sprintf+5)& (0+255),b
  4812  0012D8  0101               	movlb	1	; () banked
  4813  0012DA  0100               	movlb	0	; () banked
  4814  0012DC  C123  F066         	movff	_date+1,?_sprintf+6
  4815  0012E0  0100               	movlb	0	; () banked
  4816  0012E2  0100               	movlb	0	; () banked
  4817  0012E4  6B67               	clrf	(?_sprintf+7)& (0+255),b
  4818  0012E6  0101               	movlb	1	; () banked
  4819  0012E8  0100               	movlb	0	; () banked
  4820  0012EA  C122  F068         	movff	_date,?_sprintf+8
  4821  0012EE  0100               	movlb	0	; () banked
  4822  0012F0  0100               	movlb	0	; () banked
  4823  0012F2  6B69               	clrf	(?_sprintf+9)& (0+255),b
  4824  0012F4  EC0E  F000         	call	_sprintf	;wreg free
  4825                           
  4826                           ;RTC.c: 220: break;
  4827  0012F8  D122               	goto	i2l6981
  4828  0012FA                     i2l6961:
  4829                           
  4830                           ;RTC.c: 222: sprintf(&str, "%c%c %02d.%02d", (dow[date.dow])[0], (dow[date.dow])[1], dat
      +                          e.minute, date.second);
  4831  0012FA  0100               	movlb	0	; () banked
  4832  0012FC  0E00               	movlw	high printRTC@str
  4833  0012FE  0100               	movlb	0	; () banked
  4834  001300  0100               	movlb	0	; () banked
  4835  001302  6F61               	movwf	(?_sprintf+1)& (0+255),b
  4836  001304  0100               	movlb	0	; () banked
  4837  001306  0E9C               	movlw	low printRTC@str
  4838  001308  0100               	movlb	0	; () banked
  4839  00130A  6F60               	movwf	?_sprintf& (0+255),b
  4840  00130C  0E7F               	movlw	high (STR_20+1)
  4841  00130E  0100               	movlb	0	; () banked
  4842  001310  0100               	movlb	0	; () banked
  4843  001312  6F63               	movwf	(?_sprintf+3)& (0+255),b
  4844  001314  0E95               	movlw	low (STR_20+1)
  4845  001316  0100               	movlb	0	; () banked
  4846  001318  6F62               	movwf	(?_sprintf+2)& (0+255),b
  4847  00131A  0101               	movlb	1	; () banked
  4848  00131C  0101               	movlb	1	; () banked
  4849  00131E  5126               	movf	(_date+4)& (0+255),w,b
  4850  001320  0D02               	mullw	2
  4851  001322  0100               	movlb	0	; () banked
  4852  001324  0EDD               	movlw	low _dow
  4853  001326  24F3               	addwf	prodl,w,c
  4854  001328  6ED9               	movwf	fsr2l,c
  4855  00132A  0100               	movlb	0	; () banked
  4856  00132C  0E00               	movlw	high _dow
  4857  00132E  20F4               	addwfc	prodh,w,c
  4858  001330  6EDA               	movwf	fsr2h,c
  4859  001332  CFDE FFF6          	movff	postinc2,tblptrl
  4860  001336  CFDD FFF7          	movff	postdec2,tblptrh
  4861  00133A  0008               	tblrd		*
  4862  00133C  50F5               	movf	tablat,w,c
  4863  00133E  0100               	movlb	0	; () banked
  4864  001340  0100               	movlb	0	; () banked
  4865  001342  6F64               	movwf	(?_sprintf+4)& (0+255),b
  4866  001344  0100               	movlb	0	; () banked
  4867  001346  6B65               	clrf	(?_sprintf+5)& (0+255),b
  4868  001348  0101               	movlb	1	; () banked
  4869  00134A  0101               	movlb	1	; () banked
  4870  00134C  5126               	movf	(_date+4)& (0+255),w,b
  4871  00134E  0D02               	mullw	2
  4872  001350  0100               	movlb	0	; () banked
  4873  001352  0EDD               	movlw	low _dow
  4874  001354  24F3               	addwf	prodl,w,c
  4875  001356  6ED9               	movwf	fsr2l,c
  4876  001358  0100               	movlb	0	; () banked
  4877  00135A  0E00               	movlw	high _dow
  4878  00135C  20F4               	addwfc	prodh,w,c
  4879  00135E  6EDA               	movwf	fsr2h,c
  4880  001360  CFDE F09A          	movff	postinc2,??_printRTC
  4881  001364  CFDD F09B          	movff	postdec2,??_printRTC+1
  4882  001368  0E01               	movlw	1
  4883  00136A  0100               	movlb	0	; () banked
  4884  00136C  279A               	addwf	??_printRTC& (0+255),f,b
  4885  00136E  0E00               	movlw	0
  4886  001370  239B               	addwfc	(??_printRTC+1)& (0+255),f,b
  4887  001372  C09A  FFF6         	movff	??_printRTC,tblptrl
  4888  001376  C09B  FFF7         	movff	??_printRTC+1,tblptrh
  4889  00137A  0008               	tblrd		*
  4890  00137C  50F5               	movf	tablat,w,c
  4891  00137E  0100               	movlb	0	; () banked
  4892  001380  0100               	movlb	0	; () banked
  4893  001382  6F66               	movwf	(?_sprintf+6)& (0+255),b
  4894  001384  0100               	movlb	0	; () banked
  4895  001386  6B67               	clrf	(?_sprintf+7)& (0+255),b
  4896  001388  0101               	movlb	1	; () banked
  4897  00138A  0100               	movlb	0	; () banked
  4898  00138C  C123  F068         	movff	_date+1,?_sprintf+8
  4899  001390  0100               	movlb	0	; () banked
  4900  001392  0100               	movlb	0	; () banked
  4901  001394  6B69               	clrf	(?_sprintf+9)& (0+255),b
  4902  001396  0101               	movlb	1	; () banked
  4903  001398  0100               	movlb	0	; () banked
  4904  00139A  C122  F06A         	movff	_date,?_sprintf+10
  4905  00139E  0100               	movlb	0	; () banked
  4906  0013A0  0100               	movlb	0	; () banked
  4907  0013A2  6B6B               	clrf	(?_sprintf+11)& (0+255),b
  4908  0013A4  EC0E  F000         	call	_sprintf	;wreg free
  4909                           
  4910                           ;RTC.c: 223: break;
  4911  0013A8  D0CA               	goto	i2l6981
  4912  0013AA                     i2l6963:
  4913                           
  4914                           ;RTC.c: 225: sprintf(&str, "%02d.%02d.%02d", date.day, date.month, date.year % 100);
  4915  0013AA  C128  F001         	movff	_date+6,?___lwmod
  4916  0013AE  C129  F002         	movff	_date+7,?___lwmod+1
  4917  0013B2  0E00               	movlw	0
  4918  0013B4  6E04               	movwf	?___lwmod+3,c
  4919  0013B6  0E64               	movlw	100
  4920  0013B8  6E03               	movwf	?___lwmod+2,c
  4921  0013BA  EC3C  F022         	call	___lwmod	;wreg free
  4922  0013BE  C001  F0A5         	movff	?___lwmod,_printRTC$1392
  4923  0013C2  C002  F0A6         	movff	?___lwmod+1,_printRTC$1392+1
  4924                           
  4925                           ;RTC.c: 225: sprintf(&str, "%02d.%02d.%02d", date.day, date.month, date.year % 100);
  4926  0013C6  0100               	movlb	0	; () banked
  4927  0013C8  0E00               	movlw	high printRTC@str
  4928  0013CA  0100               	movlb	0	; () banked
  4929  0013CC  0100               	movlb	0	; () banked
  4930  0013CE  6F61               	movwf	(?_sprintf+1)& (0+255),b
  4931  0013D0  0100               	movlb	0	; () banked
  4932  0013D2  0E9C               	movlw	low printRTC@str
  4933  0013D4  0100               	movlb	0	; () banked
  4934  0013D6  6F60               	movwf	?_sprintf& (0+255),b
  4935  0013D8  0E7F               	movlw	high (STR_19+2)
  4936  0013DA  0100               	movlb	0	; () banked
  4937  0013DC  0100               	movlb	0	; () banked
  4938  0013DE  6F63               	movwf	(?_sprintf+3)& (0+255),b
  4939  0013E0  0E85               	movlw	low (STR_19+2)
  4940  0013E2  0100               	movlb	0	; () banked
  4941  0013E4  6F62               	movwf	(?_sprintf+2)& (0+255),b
  4942  0013E6  0101               	movlb	1	; () banked
  4943  0013E8  0100               	movlb	0	; () banked
  4944  0013EA  C125  F064         	movff	_date+3,?_sprintf+4
  4945  0013EE  0100               	movlb	0	; () banked
  4946  0013F0  0100               	movlb	0	; () banked
  4947  0013F2  6B65               	clrf	(?_sprintf+5)& (0+255),b
  4948  0013F4  0101               	movlb	1	; () banked
  4949  0013F6  0100               	movlb	0	; () banked
  4950  0013F8  C127  F066         	movff	_date+5,?_sprintf+6
  4951  0013FC  0100               	movlb	0	; () banked
  4952  0013FE  0100               	movlb	0	; () banked
  4953  001400  6B67               	clrf	(?_sprintf+7)& (0+255),b
  4954  001402  C0A5  F068         	movff	_printRTC$1392,?_sprintf+8
  4955  001406  C0A6  F069         	movff	_printRTC$1392+1,?_sprintf+9
  4956  00140A  EC0E  F000         	call	_sprintf	;wreg free
  4957                           
  4958                           ;RTC.c: 226: break;
  4959  00140E  D097               	goto	i2l6981
  4960  001410                     i2l6967:
  4961                           
  4962                           ;RTC.c: 228: sprintf(&str, "  %02d.%02d", date.hour, date.minute);
  4963  001410  0100               	movlb	0	; () banked
  4964  001412  0E00               	movlw	high printRTC@str
  4965  001414  0100               	movlb	0	; () banked
  4966  001416  0100               	movlb	0	; () banked
  4967  001418  6F61               	movwf	(?_sprintf+1)& (0+255),b
  4968  00141A  0100               	movlb	0	; () banked
  4969  00141C  0E9C               	movlw	low printRTC@str
  4970  00141E  0100               	movlb	0	; () banked
  4971  001420  6F60               	movwf	?_sprintf& (0+255),b
  4972  001422  0E7F               	movlw	high (STR_22+2)
  4973  001424  0100               	movlb	0	; () banked
  4974  001426  0100               	movlb	0	; () banked
  4975  001428  6F63               	movwf	(?_sprintf+3)& (0+255),b
  4976  00142A  0EB5               	movlw	low (STR_22+2)
  4977  00142C  0100               	movlb	0	; () banked
  4978  00142E  6F62               	movwf	(?_sprintf+2)& (0+255),b
  4979  001430  0101               	movlb	1	; () banked
  4980  001432  0100               	movlb	0	; () banked
  4981  001434  C124  F064         	movff	_date+2,?_sprintf+4
  4982  001438  0100               	movlb	0	; () banked
  4983  00143A  0100               	movlb	0	; () banked
  4984  00143C  6B65               	clrf	(?_sprintf+5)& (0+255),b
  4985  00143E  0101               	movlb	1	; () banked
  4986  001440  0100               	movlb	0	; () banked
  4987  001442  C123  F066         	movff	_date+1,?_sprintf+6
  4988  001446  0100               	movlb	0	; () banked
  4989  001448  0100               	movlb	0	; () banked
  4990  00144A  6B67               	clrf	(?_sprintf+7)& (0+255),b
  4991  00144C  EC0E  F000         	call	_sprintf	;wreg free
  4992                           
  4993                           ;RTC.c: 229: break;
  4994  001450  D076               	goto	i2l6981
  4995  001452                     i2l6969:
  4996                           
  4997                           ;RTC.c: 231: sprintf(&str, "  %02d.%02d", date.day, date.month);
  4998  001452  0100               	movlb	0	; () banked
  4999  001454  0E00               	movlw	high printRTC@str
  5000  001456  0100               	movlb	0	; () banked
  5001  001458  0100               	movlb	0	; () banked
  5002  00145A  6F61               	movwf	(?_sprintf+1)& (0+255),b
  5003  00145C  0100               	movlb	0	; () banked
  5004  00145E  0E9C               	movlw	low printRTC@str
  5005  001460  0100               	movlb	0	; () banked
  5006  001462  6F60               	movwf	?_sprintf& (0+255),b
  5007  001464  0E7F               	movlw	high (STR_22+2)
  5008  001466  0100               	movlb	0	; () banked
  5009  001468  0100               	movlb	0	; () banked
  5010  00146A  6F63               	movwf	(?_sprintf+3)& (0+255),b
  5011  00146C  0EB5               	movlw	low (STR_22+2)
  5012  00146E  0100               	movlb	0	; () banked
  5013  001470  6F62               	movwf	(?_sprintf+2)& (0+255),b
  5014  001472  0101               	movlb	1	; () banked
  5015  001474  0100               	movlb	0	; () banked
  5016  001476  C125  F064         	movff	_date+3,?_sprintf+4
  5017  00147A  0100               	movlb	0	; () banked
  5018  00147C  0100               	movlb	0	; () banked
  5019  00147E  6B65               	clrf	(?_sprintf+5)& (0+255),b
  5020  001480  0101               	movlb	1	; () banked
  5021  001482  0100               	movlb	0	; () banked
  5022  001484  C127  F066         	movff	_date+5,?_sprintf+6
  5023  001488  0100               	movlb	0	; () banked
  5024  00148A  0100               	movlb	0	; () banked
  5025  00148C  6B67               	clrf	(?_sprintf+7)& (0+255),b
  5026  00148E  EC0E  F000         	call	_sprintf	;wreg free
  5027                           
  5028                           ;RTC.c: 232: break;
  5029  001492  D055               	goto	i2l6981
  5030  001494                     i2l6973:
  5031  001494  0101               	movlb	1	; () banked
  5032  001496  0101               	movlb	1	; () banked
  5033  001498  513D               	movf	_rtcMenu& (0+255),w,b
  5034                           
  5035                           ; Switch size 1, requested type "space"
  5036                           ; Number of cases is 5, Range of values is 0 to 8
  5037                           ; switch strategies available:
  5038                           ; Name         Instructions Cycles
  5039                           ; simple_byte           16     9 (average)
  5040                           ;	Chosen strategy is simple_byte
  5041  00149A  0A00               	xorlw	0	; case 0
  5042  00149C  B4D8               	btfsc	status,2,c
  5043  00149E  D7B8               	goto	i2l6967
  5044  0014A0  0A01               	xorlw	1	; case 1
  5045  0014A2  B4D8               	btfsc	status,2,c
  5046  0014A4  D702               	goto	i2l6959
  5047  0014A6  0A02               	xorlw	2	; case 3
  5048  0014A8  B4D8               	btfsc	status,2,c
  5049  0014AA  D727               	goto	i2l6961
  5050  0014AC  0A05               	xorlw	5	; case 6
  5051  0014AE  B4D8               	btfsc	status,2,c
  5052  0014B0  D7D0               	goto	i2l6969
  5053  0014B2  0A0E               	xorlw	14	; case 8
  5054  0014B4  B4D8               	btfsc	status,2,c
  5055  0014B6  D779               	goto	i2l6963
  5056  0014B8  D042               	goto	i2l6981
  5057  0014BA                     i2l6975:
  5058                           
  5059                           ; BSR set to: 1
  5060                           ;RTC.c: 238: sprintf(&str, "%02d.%02d", date.hour, date.minute);
  5061  0014BA  0100               	movlb	0	; () banked
  5062  0014BC  0E00               	movlw	high printRTC@str
  5063  0014BE  0100               	movlb	0	; () banked
  5064  0014C0  0100               	movlb	0	; () banked
  5065  0014C2  6F61               	movwf	(?_sprintf+1)& (0+255),b
  5066  0014C4  0100               	movlb	0	; () banked
  5067  0014C6  0E9C               	movlw	low printRTC@str
  5068  0014C8  0100               	movlb	0	; () banked
  5069  0014CA  6F60               	movwf	?_sprintf& (0+255),b
  5070  0014CC  0E7F               	movlw	high (STR_22+4)
  5071  0014CE  0100               	movlb	0	; () banked
  5072  0014D0  0100               	movlb	0	; () banked
  5073  0014D2  6F63               	movwf	(?_sprintf+3)& (0+255),b
  5074  0014D4  0EB7               	movlw	low (STR_22+4)
  5075  0014D6  0100               	movlb	0	; () banked
  5076  0014D8  6F62               	movwf	(?_sprintf+2)& (0+255),b
  5077  0014DA  0101               	movlb	1	; () banked
  5078  0014DC  0100               	movlb	0	; () banked
  5079  0014DE  C124  F064         	movff	_date+2,?_sprintf+4
  5080  0014E2  0100               	movlb	0	; () banked
  5081  0014E4  0100               	movlb	0	; () banked
  5082  0014E6  6B65               	clrf	(?_sprintf+5)& (0+255),b
  5083  0014E8  0101               	movlb	1	; () banked
  5084  0014EA  0100               	movlb	0	; () banked
  5085  0014EC  C123  F066         	movff	_date+1,?_sprintf+6
  5086  0014F0  0100               	movlb	0	; () banked
  5087  0014F2  0100               	movlb	0	; () banked
  5088  0014F4  6B67               	clrf	(?_sprintf+7)& (0+255),b
  5089  0014F6  EC0E  F000         	call	_sprintf	;wreg free
  5090                           
  5091                           ;RTC.c: 239: break;
  5092  0014FA  D057               	goto	i2l343
  5093  0014FC                     i2l6977:
  5094                           
  5095                           ;RTC.c: 241: sprintf(&str, "%02d.%02d", date.day, date.month);
  5096  0014FC  0100               	movlb	0	; () banked
  5097  0014FE  0E00               	movlw	high printRTC@str
  5098  001500  0100               	movlb	0	; () banked
  5099  001502  0100               	movlb	0	; () banked
  5100  001504  6F61               	movwf	(?_sprintf+1)& (0+255),b
  5101  001506  0100               	movlb	0	; () banked
  5102  001508  0E9C               	movlw	low printRTC@str
  5103  00150A  0100               	movlb	0	; () banked
  5104  00150C  6F60               	movwf	?_sprintf& (0+255),b
  5105  00150E  0E7F               	movlw	high (STR_22+4)
  5106  001510  0100               	movlb	0	; () banked
  5107  001512  0100               	movlb	0	; () banked
  5108  001514  6F63               	movwf	(?_sprintf+3)& (0+255),b
  5109  001516  0EB7               	movlw	low (STR_22+4)
  5110  001518  0100               	movlb	0	; () banked
  5111  00151A  6F62               	movwf	(?_sprintf+2)& (0+255),b
  5112  00151C  0101               	movlb	1	; () banked
  5113  00151E  0100               	movlb	0	; () banked
  5114  001520  C125  F064         	movff	_date+3,?_sprintf+4
  5115  001524  0100               	movlb	0	; () banked
  5116  001526  0100               	movlb	0	; () banked
  5117  001528  6B65               	clrf	(?_sprintf+5)& (0+255),b
  5118  00152A  0101               	movlb	1	; () banked
  5119  00152C  0100               	movlb	0	; () banked
  5120  00152E  C127  F066         	movff	_date+5,?_sprintf+6
  5121  001532  0100               	movlb	0	; () banked
  5122  001534  0100               	movlb	0	; () banked
  5123  001536  6B67               	clrf	(?_sprintf+7)& (0+255),b
  5124  001538  EC0E  F000         	call	_sprintf	;wreg free
  5125                           
  5126                           ;RTC.c: 242: break;
  5127  00153C  D036               	goto	i2l343
  5128  00153E                     i2l6981:
  5129  00153E  0101               	movlb	1	; () banked
  5130  001540  0101               	movlb	1	; () banked
  5131  001542  513D               	movf	_rtcMenu& (0+255),w,b
  5132                           
  5133                           ; Switch size 1, requested type "space"
  5134                           ; Number of cases is 2, Range of values is 0 to 6
  5135                           ; switch strategies available:
  5136                           ; Name         Instructions Cycles
  5137                           ; simple_byte            7     4 (average)
  5138                           ;	Chosen strategy is simple_byte
  5139  001544  0A00               	xorlw	0	; case 0
  5140  001546  B4D8               	btfsc	status,2,c
  5141  001548  D7B8               	goto	i2l6975
  5142  00154A  0A06               	xorlw	6	; case 6
  5143  00154C  B4D8               	btfsc	status,2,c
  5144  00154E  D7D6               	goto	i2l6977
  5145  001550  D02C               	goto	i2l343
  5146  001552                     i2l6985:
  5147  001552  505E               	movf	printRTC@digits,w,c
  5148  001554  6E01               	movwf	?_countBits,c
  5149  001556  6A02               	clrf	?_countBits+1,c
  5150  001558  6A03               	clrf	?_countBits+2,c
  5151  00155A  6A04               	clrf	?_countBits+3,c
  5152  00155C  EC8F  F023         	call	_countBits	;wreg free
  5153                           
  5154                           ; Switch size 1, requested type "space"
  5155                           ; Number of cases is 9, Range of values is 0 to 8
  5156                           ; switch strategies available:
  5157                           ; Name         Instructions Cycles
  5158                           ; simple_byte           28    15 (average)
  5159                           ;	Chosen strategy is simple_byte
  5160  001560  0A00               	xorlw	0	; case 0
  5161  001562  B4D8               	btfsc	status,2,c
  5162  001564  D022               	goto	i2l343
  5163  001566  0A01               	xorlw	1	; case 1
  5164  001568  B4D8               	btfsc	status,2,c
  5165  00156A  D01F               	goto	i2l343
  5166  00156C  0A03               	xorlw	3	; case 2
  5167  00156E  B4D8               	btfsc	status,2,c
  5168  001570  D01C               	goto	i2l343
  5169  001572  0A01               	xorlw	1	; case 3
  5170  001574  B4D8               	btfsc	status,2,c
  5171  001576  D019               	goto	i2l343
  5172  001578  0A07               	xorlw	7	; case 4
  5173  00157A  B4D8               	btfsc	status,2,c
  5174  00157C  D7E0               	goto	i2l6981
  5175  00157E  0A01               	xorlw	1	; case 5
  5176  001580  B4D8               	btfsc	status,2,c
  5177  001582  D7DD               	goto	i2l6981
  5178  001584  0A03               	xorlw	3	; case 6
  5179  001586  B4D8               	btfsc	status,2,c
  5180  001588  D785               	goto	i2l6973
  5181  00158A  0A01               	xorlw	1	; case 7
  5182  00158C  B4D8               	btfsc	status,2,c
  5183  00158E  D782               	goto	i2l6973
  5184  001590  0A0F               	xorlw	15	; case 8
  5185  001592  B4D8               	btfsc	status,2,c
  5186  001594  D671               	goto	i2l6957
  5187                           
  5188                           ;RTC.c: 247: writeString(digits, &str);
  5189  001596  C05E  F022         	movff	printRTC@digits,?_writeString
  5190  00159A  0100               	movlb	0	; () banked
  5191  00159C  0E00               	movlw	high printRTC@str
  5192  00159E  6E24               	movwf	?_writeString+2,c
  5193  0015A0  0100               	movlb	0	; () banked
  5194  0015A2  0E9C               	movlw	low printRTC@str
  5195  0015A4  6E23               	movwf	?_writeString+1,c
  5196  0015A6  ECB4  F017         	call	_writeString	;wreg free
  5197  0015AA                     i2l343:
  5198  0015AA  0012               	return	
  5199  0015AC                     __end_of_printRTC:
  5200                           	opt stack 0
  5201                           tosu	equ	0xFFF
  5202                           tosh	equ	0xFFE
  5203                           tosl	equ	0xFFD
  5204                           pclatu	equ	0xFFB
  5205                           pclath	equ	0xFFA
  5206                           tblptru	equ	0xFF8
  5207                           tblptrh	equ	0xFF7
  5208                           tblptrl	equ	0xFF6
  5209                           tablat	equ	0xFF5
  5210                           prodh	equ	0xFF4
  5211                           prodl	equ	0xFF3
  5212                           intcon	equ	0xFF2
  5213                           intcon2	equ	0xFF1
  5214                           postinc0	equ	0xFEE
  5215                           fsr0h	equ	0xFEA
  5216                           fsr0l	equ	0xFE9
  5217                           wreg	equ	0xFE8
  5218                           postinc1	equ	0xFE6
  5219                           postdec1	equ	0xFE5
  5220                           fsr1h	equ	0xFE2
  5221                           fsr1l	equ	0xFE1
  5222                           indf2	equ	0xFDF
  5223                           postinc2	equ	0xFDE
  5224                           postdec2	equ	0xFDD
  5225                           fsr2h	equ	0xFDA
  5226                           fsr2l	equ	0xFD9
  5227                           status	equ	0xFD8
  5228                           
  5229 ;; *************** function _printTemp *****************
  5230 ;; Defined at:
  5231 ;;		line 74 in file "temp.c"
  5232 ;; Parameters:    Size  Location     Type
  5233 ;;  digits          1   93[COMRAM] unsigned char 
  5234 ;; Auto vars:     Size  Location     Type
  5235 ;;  units           1   62[BANK0 ] unsigned char 
  5236 ;; Return value:  Size  Location     Type
  5237 ;;                  2   93[COMRAM] PTR void 
  5238 ;; Registers used:
  5239 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5240 ;; Tracked objects:
  5241 ;;		On entry : 0/0
  5242 ;;		On exit  : 0/0
  5243 ;;		Unchanged: 0/0
  5244 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5245 ;;      Params:         1       0       0       0       0       0       0       0       0
  5246 ;;      Locals:         0       5       0       0       0       0       0       0       0
  5247 ;;      Temps:          1       0       0       0       0       0       0       0       0
  5248 ;;      Totals:         2       5       0       0       0       0       0       0       0
  5249 ;;Total ram usage:        7 bytes
  5250 ;; Hardware stack levels used:    1
  5251 ;; Hardware stack levels required when called:    6
  5252 ;; This function calls:
  5253 ;;		_writeString
  5254 ;;		_writeFloat
  5255 ;;		_getTemp
  5256 ;;		_lowbit
  5257 ;; This function is called by:
  5258 ;;		_initTemp
  5259 ;;		_high_isr
  5260 ;; This function uses a non-reentrant model
  5261 ;;
  5262                           
  5263                           	psect	text17
  5264  003B9C                     __ptext17:
  5265                           	opt stack 0
  5266  003B9C                     _printTemp:
  5267                           	opt stack 19
  5268                           
  5269                           ;temp.c: 75: uint8_t units = 0;
  5270                           
  5271                           ;incstack = 0
  5272                           ;incstack = 0
  5273  003B9C  6E5F               	movwf	??_printTemp& (0+255),c
  5274  003B9E  0E00               	movlw	0
  5275  003BA0  0100               	movlb	0	; () banked
  5276  003BA2  0100               	movlb	0	; () banked
  5277  003BA4  6F9E               	movwf	printTemp@units& (0+255),b
  5278  003BA6  505F               	movf	??_printTemp& (0+255),w,c
  5279                           
  5280                           ; BSR set to: 0
  5281                           ;temp.c: 76: units |= lowbit(digits);
  5282  003BA8  505E               	movf	printTemp@digits,w,c
  5283  003BAA  6E01               	movwf	?_lowbit,c
  5284  003BAC  6A02               	clrf	?_lowbit+1,c
  5285  003BAE  6A03               	clrf	?_lowbit+2,c
  5286  003BB0  6A04               	clrf	?_lowbit+3,c
  5287  003BB2  EC70  F020         	call	_lowbit	;wreg free
  5288  003BB6  5001               	movf	?_lowbit,w,c
  5289  003BB8  0100               	movlb	0	; () banked
  5290  003BBA  0100               	movlb	0	; () banked
  5291  003BBC  139E               	iorwf	printTemp@units& (0+255),f,b
  5292                           
  5293                           ; BSR set to: 0
  5294                           ;temp.c: 77: units |= lowbit(digits &= (~lowbit(digits)));
  5295  003BBE  505E               	movf	printTemp@digits,w,c
  5296  003BC0  6E01               	movwf	?_lowbit,c
  5297  003BC2  6A02               	clrf	?_lowbit+1,c
  5298  003BC4  6A03               	clrf	?_lowbit+2,c
  5299  003BC6  6A04               	clrf	?_lowbit+3,c
  5300  003BC8  EC70  F020         	call	_lowbit	;wreg free
  5301  003BCC  5001               	movf	?_lowbit,w,c
  5302  003BCE  0AFF               	xorlw	255
  5303  003BD0  165E               	andwf	printTemp@digits,f,c
  5304  003BD2  505E               	movf	printTemp@digits& (0+255),w,c
  5305  003BD4  0100               	movlb	0	; () banked
  5306  003BD6  0100               	movlb	0	; () banked
  5307  003BD8  6F9A               	movwf	_printTemp$1393& (0+255),b
  5308  003BDA  0100               	movlb	0	; () banked
  5309  003BDC  6B9B               	clrf	(_printTemp$1393+1)& (0+255),b
  5310  003BDE  0100               	movlb	0	; () banked
  5311  003BE0  6B9C               	clrf	(_printTemp$1393+2)& (0+255),b
  5312  003BE2  0100               	movlb	0	; () banked
  5313  003BE4  6B9D               	clrf	(_printTemp$1393+3)& (0+255),b
  5314                           
  5315                           ; BSR set to: 0
  5316                           ;temp.c: 77: units |= lowbit(digits &= (~lowbit(digits)));
  5317  003BE6  C09A  F001         	movff	_printTemp$1393,?_lowbit
  5318  003BEA  C09B  F002         	movff	_printTemp$1393+1,?_lowbit+1
  5319  003BEE  C09C  F003         	movff	_printTemp$1393+2,?_lowbit+2
  5320  003BF2  C09D  F004         	movff	_printTemp$1393+3,?_lowbit+3
  5321  003BF6  EC70  F020         	call	_lowbit	;wreg free
  5322  003BFA  5001               	movf	?_lowbit,w,c
  5323  003BFC  0100               	movlb	0	; () banked
  5324  003BFE  0100               	movlb	0	; () banked
  5325  003C00  139E               	iorwf	printTemp@units& (0+255),f,b
  5326                           
  5327                           ; BSR set to: 0
  5328                           ;temp.c: 78: digits &= ~units;
  5329  003C02  0100               	movlb	0	; () banked
  5330  003C04  0100               	movlb	0	; () banked
  5331  003C06  519E               	movf	printTemp@units& (0+255),w,b
  5332  003C08  0AFF               	xorlw	255
  5333  003C0A  165E               	andwf	printTemp@digits,f,c
  5334                           
  5335                           ; BSR set to: 0
  5336                           ;temp.c: 79: writeString(units, (char*) "*C");
  5337  003C0C  C09E  F022         	movff	printTemp@units,?_writeString
  5338  003C10  0E7F               	movlw	high STR_38
  5339  003C12  6E24               	movwf	?_writeString+2,c
  5340  003C14  0EFB               	movlw	low STR_38
  5341  003C16  6E23               	movwf	?_writeString+1,c
  5342  003C18  ECB4  F017         	call	_writeString	;wreg free
  5343                           
  5344                           ;temp.c: 80: writeFloat(digits, getTemp());
  5345  003C1C  C05E  F08C         	movff	printTemp@digits,?_writeFloat
  5346  003C20  EC15  F014         	call	_getTemp	;wreg free
  5347  003C24  C055  F08F         	movff	?_getTemp+2,?_writeFloat+3
  5348  003C28  C054  F08E         	movff	?_getTemp+1,?_writeFloat+2
  5349  003C2C  C053  F08D         	movff	?_getTemp,?_writeFloat+1
  5350  003C30  EC7A  F01F         	call	_writeFloat	;wreg free
  5351                           
  5352                           ;temp.c: 81: return (0);
  5353                           ;	Return value of _printTemp is never used
  5354  003C34  0012               	return	
  5355  003C36                     __end_of_printTemp:
  5356                           	opt stack 0
  5357                           tosu	equ	0xFFF
  5358                           tosh	equ	0xFFE
  5359                           tosl	equ	0xFFD
  5360                           pclatu	equ	0xFFB
  5361                           pclath	equ	0xFFA
  5362                           tblptru	equ	0xFF8
  5363                           tblptrh	equ	0xFF7
  5364                           tblptrl	equ	0xFF6
  5365                           tablat	equ	0xFF5
  5366                           prodh	equ	0xFF4
  5367                           prodl	equ	0xFF3
  5368                           intcon	equ	0xFF2
  5369                           intcon2	equ	0xFF1
  5370                           postinc0	equ	0xFEE
  5371                           fsr0h	equ	0xFEA
  5372                           fsr0l	equ	0xFE9
  5373                           wreg	equ	0xFE8
  5374                           postinc1	equ	0xFE6
  5375                           postdec1	equ	0xFE5
  5376                           fsr1h	equ	0xFE2
  5377                           fsr1l	equ	0xFE1
  5378                           indf2	equ	0xFDF
  5379                           postinc2	equ	0xFDE
  5380                           postdec2	equ	0xFDD
  5381                           fsr2h	equ	0xFDA
  5382                           fsr2l	equ	0xFD9
  5383                           status	equ	0xFD8
  5384                           
  5385 ;; *************** function _lowbit *****************
  5386 ;; Defined at:
  5387 ;;		line 26 in file "defs.c"
  5388 ;; Parameters:    Size  Location     Type
  5389 ;;  x               4    0[COMRAM] unsigned long 
  5390 ;; Auto vars:     Size  Location     Type
  5391 ;;  log2Val         4    7[COMRAM] unsigned long 
  5392 ;; Return value:  Size  Location     Type
  5393 ;;                  4    0[COMRAM] unsigned long 
  5394 ;; Registers used:
  5395 ;;		wreg, status,2, status,0
  5396 ;; Tracked objects:
  5397 ;;		On entry : 0/0
  5398 ;;		On exit  : 0/0
  5399 ;;		Unchanged: 0/0
  5400 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5401 ;;      Params:         4       0       0       0       0       0       0       0       0
  5402 ;;      Locals:         4       0       0       0       0       0       0       0       0
  5403 ;;      Temps:          3       0       0       0       0       0       0       0       0
  5404 ;;      Totals:        11       0       0       0       0       0       0       0       0
  5405 ;;Total ram usage:       11 bytes
  5406 ;; Hardware stack levels used:    1
  5407 ;; This function calls:
  5408 ;;		Nothing
  5409 ;; This function is called by:
  5410 ;;		_printTemp
  5411 ;; This function uses a non-reentrant model
  5412 ;;
  5413                           
  5414                           	psect	text18
  5415  0040E0                     __ptext18:
  5416                           	opt stack 0
  5417  0040E0                     _lowbit:
  5418                           	opt stack 24
  5419                           
  5420                           ;defs.c: 27: uint32_t log2Val = 0;
  5421                           
  5422                           ;incstack = 0
  5423                           ;incstack = 0
  5424  0040E0  0E00               	movlw	0
  5425  0040E2  6E08               	movwf	lowbit@log2Val,c
  5426  0040E4  0E00               	movlw	0
  5427  0040E6  6E09               	movwf	lowbit@log2Val+1,c
  5428  0040E8  0E00               	movlw	0
  5429  0040EA  6E0A               	movwf	lowbit@log2Val+2,c
  5430  0040EC  0E00               	movlw	0
  5431  0040EE  6E0B               	movwf	lowbit@log2Val+3,c
  5432                           
  5433                           ;defs.c: 28: if (x & 1)
  5434  0040F0  A001               	btfss	lowbit@x,0,c
  5435  0040F2  D008               	goto	i2l5543
  5436                           
  5437                           ;defs.c: 29: return 1;
  5438  0040F4  0E01               	movlw	1
  5439  0040F6  6E01               	movwf	?_lowbit,c
  5440  0040F8  0E00               	movlw	0
  5441  0040FA  6E02               	movwf	?_lowbit+1,c
  5442  0040FC  0E00               	movlw	0
  5443  0040FE  6E03               	movwf	?_lowbit+2,c
  5444  004100  0E00               	movlw	0
  5445  004102  D023               	goto	L5
  5446  004104                     i2l5543:
  5447  004104  0E01               	movlw	1
  5448  004106  2608               	addwf	lowbit@log2Val,f,c
  5449  004108  0E00               	movlw	0
  5450  00410A  2209               	addwfc	lowbit@log2Val+1,f,c
  5451  00410C  0E00               	movlw	0
  5452  00410E  220A               	addwfc	lowbit@log2Val+2,f,c
  5453  004110  0E00               	movlw	0
  5454  004112  220B               	addwfc	lowbit@log2Val+3,f,c
  5455  004114  90D8               	bcf	status,0,c
  5456  004116  3204               	rrcf	lowbit@x+3,f,c
  5457  004118  3203               	rrcf	lowbit@x+2,f,c
  5458  00411A  3202               	rrcf	lowbit@x+1,f,c
  5459  00411C  3201               	rrcf	lowbit@x,f,c
  5460  00411E  A001               	btfss	lowbit@x& (0+255),0,c
  5461  004120  D7F1               	goto	i2l5543
  5462                           
  5463                           ;defs.c: 32: return 1 << log2Val;
  5464  004122  C008  F005         	movff	lowbit@log2Val,??_lowbit
  5465  004126  0E01               	movlw	1
  5466  004128  6E06               	movwf	(??_lowbit+1)& (0+255),c
  5467  00412A  6A07               	clrf	(??_lowbit+2)& (0+255),c
  5468  00412C  2A05               	incf	??_lowbit,f,c
  5469  00412E  D003               	goto	i2u311_44
  5470  004130                     i2u311_45:
  5471  004130  90D8               	bcf	status,0,c
  5472  004132  3606               	rlcf	??_lowbit+1,f,c
  5473  004134  3607               	rlcf	??_lowbit+2,f,c
  5474  004136                     i2u311_44:
  5475  004136  2E05               	decfsz	??_lowbit,f,c
  5476  004138  D7FB               	goto	i2u311_45
  5477  00413A  C006  F001         	movff	??_lowbit+1,?_lowbit
  5478  00413E  C007  F002         	movff	??_lowbit+2,?_lowbit+1
  5479  004142  0E00               	movlw	0
  5480  004144  BE02               	btfsc	?_lowbit+1,7,c
  5481  004146  0EFF               	movlw	-1
  5482  004148  6E03               	movwf	?_lowbit+2,c
  5483  00414A                     L5:
  5484  00414A  6E04               	movwf	?_lowbit+3,c
  5485  00414C  0012               	return	
  5486  00414E                     __end_of_lowbit:
  5487                           	opt stack 0
  5488                           tosu	equ	0xFFF
  5489                           tosh	equ	0xFFE
  5490                           tosl	equ	0xFFD
  5491                           pclatu	equ	0xFFB
  5492                           pclath	equ	0xFFA
  5493                           tblptru	equ	0xFF8
  5494                           tblptrh	equ	0xFF7
  5495                           tblptrl	equ	0xFF6
  5496                           tablat	equ	0xFF5
  5497                           prodh	equ	0xFF4
  5498                           prodl	equ	0xFF3
  5499                           intcon	equ	0xFF2
  5500                           intcon2	equ	0xFF1
  5501                           postinc0	equ	0xFEE
  5502                           fsr0h	equ	0xFEA
  5503                           fsr0l	equ	0xFE9
  5504                           wreg	equ	0xFE8
  5505                           postinc1	equ	0xFE6
  5506                           postdec1	equ	0xFE5
  5507                           fsr1h	equ	0xFE2
  5508                           fsr1l	equ	0xFE1
  5509                           indf2	equ	0xFDF
  5510                           postinc2	equ	0xFDE
  5511                           postdec2	equ	0xFDD
  5512                           fsr2h	equ	0xFDA
  5513                           fsr2l	equ	0xFD9
  5514                           status	equ	0xFD8
  5515                           
  5516 ;; *************** function _getTemp *****************
  5517 ;; Defined at:
  5518 ;;		line 43 in file "temp.c"
  5519 ;; Parameters:    Size  Location     Type
  5520 ;;		None
  5521 ;; Auto vars:     Size  Location     Type
  5522 ;;  oldTempsTemp    9    0[BANK0 ] [3]
  5523 ;;  total           3   12[BANK0 ] [3]
  5524 ;;  temp            3    9[BANK0 ] [3]
  5525 ;;  cnt             1   15[BANK0 ] unsigned char 
  5526 ;; Return value:  Size  Location     Type
  5527 ;;                  3   82[COMRAM] unsigned char 
  5528 ;; Registers used:
  5529 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5530 ;; Tracked objects:
  5531 ;;		On entry : 0/0
  5532 ;;		On exit  : 0/0
  5533 ;;		Unchanged: 0/0
  5534 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5535 ;;      Params:         3       0       0       0       0       0       0       0       0
  5536 ;;      Locals:         0      16       0       0       0       0       0       0       0
  5537 ;;      Temps:          1       0       0       0       0       0       0       0       0
  5538 ;;      Totals:         4      16       0       0       0       0       0       0       0
  5539 ;;Total ram usage:       20 bytes
  5540 ;; Hardware stack levels used:    1
  5541 ;; Hardware stack levels required when called:    3
  5542 ;; This function calls:
  5543 ;;		___asftadd
  5544 ;;		___ftadd
  5545 ;;		___ftdiv
  5546 ;;		___ftmul
  5547 ;;		___lwtoft
  5548 ;;		___wmul
  5549 ;; This function is called by:
  5550 ;;		_printTemp
  5551 ;; This function uses a non-reentrant model
  5552 ;;
  5553                           
  5554                           	psect	text19
  5555  00282A                     __ptext19:
  5556                           	opt stack 0
  5557  00282A                     _getTemp:
  5558                           	opt stack 21
  5559                           
  5560                           ;temp.c: 44: double oldTempsTemp[3];
  5561                           ;temp.c: 45: uint8_t cnt;
  5562                           ;temp.c: 46: for (cnt = 3; cnt > 0; cnt--)
  5563                           
  5564                           ;incstack = 0
  5565                           ;incstack = 0
  5566  00282A  6E56               	movwf	??_getTemp& (0+255),c
  5567  00282C  0E03               	movlw	3
  5568  00282E  0100               	movlb	0	; () banked
  5569  002830  0100               	movlb	0	; () banked
  5570  002832  6F6F               	movwf	getTemp@cnt& (0+255),b
  5571  002834  5056               	movf	??_getTemp& (0+255),w,c
  5572  002836  D02C               	goto	L7
  5573  002838                     i2l6493:
  5574                           
  5575                           ; BSR set to: 0
  5576                           ;temp.c: 47: {
  5577                           ;temp.c: 48: oldTempsTemp[cnt - 1] = oldTemps[cnt];
  5578  002838  0100               	movlb	0	; () banked
  5579  00283A  0100               	movlb	0	; () banked
  5580  00283C  516F               	movf	getTemp@cnt& (0+255),w,b
  5581  00283E  0D03               	mullw	3
  5582  002840  0100               	movlb	0	; () banked
  5583  002842  0EB7               	movlw	low _oldTemps
  5584  002844  24F3               	addwf	prodl,w,c
  5585  002846  6ED9               	movwf	fsr2l,c
  5586  002848  0100               	movlb	0	; () banked
  5587  00284A  0E00               	movlw	high _oldTemps
  5588  00284C  20F4               	addwfc	prodh,w,c
  5589  00284E  6EDA               	movwf	fsr2h,c
  5590  002850  0EFF               	movlw	255
  5591  002852  0100               	movlb	0	; () banked
  5592  002854  0100               	movlb	0	; () banked
  5593  002856  256F               	addwf	getTemp@cnt& (0+255),w,b
  5594  002858  6E17               	movwf	?___wmul,c
  5595  00285A  6A18               	clrf	?___wmul+1,c
  5596  00285C  0EFF               	movlw	255
  5597  00285E  2218               	addwfc	?___wmul+1,f,c
  5598  002860  0E00               	movlw	0
  5599  002862  6E1A               	movwf	?___wmul+3,c
  5600  002864  0E03               	movlw	3
  5601  002866  6E19               	movwf	?___wmul+2,c
  5602  002868  EC14  F023         	call	___wmul	;wreg free
  5603  00286C  0100               	movlb	0	; () banked
  5604  00286E  0E60               	movlw	low getTemp@oldTempsTemp
  5605  002870  2417               	addwf	?___wmul,w,c
  5606  002872  6EE1               	movwf	fsr1l,c
  5607  002874  0100               	movlb	0	; () banked
  5608  002876  0E00               	movlw	high getTemp@oldTempsTemp
  5609  002878  2018               	addwfc	?___wmul+1,w,c
  5610  00287A  6EE2               	movwf	fsr1h,c
  5611  00287C  CFDE FFE6          	movff	postinc2,postinc1
  5612  002880  CFDE FFE6          	movff	postinc2,postinc1
  5613  002884  CFDE FFE5          	movff	postinc2,postdec1
  5614  002888  52E5               	movf	postdec1,f,c
  5615                           
  5616                           ; BSR set to: 0
  5617  00288A  0100               	movlb	0	; () banked
  5618  00288C  0100               	movlb	0	; () banked
  5619  00288E  076F               	decf	getTemp@cnt& (0+255),f,b
  5620  002890                     L7:
  5621                           
  5622                           ; BSR set to: 0
  5623  002890  0100               	movlb	0	; () banked
  5624  002892  0100               	movlb	0	; () banked
  5625  002894  676F               	tstfsz	getTemp@cnt& (0+255),b
  5626  002896  D7D0               	goto	i2l6493
  5627                           
  5628                           ; BSR set to: 0
  5629                           ;temp.c: 49: }
  5630                           ;temp.c: 50: GO = 1;
  5631  002898  82C2               	bsf	4034,1,c	;volatile
  5632  00289A                     i2l390:
  5633  00289A  B2C2               	btfsc	4034,1,c	;volatile
  5634  00289C  D7FE               	goto	i2l390
  5635                           
  5636                           ;temp.c: 52: double temp;
  5637                           ;temp.c: 54: if (tempMenu.state == 0)
  5638  00289E  0101               	movlb	1	; () banked
  5639  0028A0  0101               	movlb	1	; () banked
  5640  0028A2  6738               	tstfsz	_tempMenu& (0+255),b
  5641  0028A4  D023               	goto	i2l6501
  5642                           
  5643                           ; BSR set to: 1
  5644                           ;temp.c: 55: {
  5645                           ;temp.c: 56: temp = (((double) ADRES) * ((0.0048828125)/0.0195/(4.0303030303030303030303
      +                          0303)) - (20.5128205128));
  5646  0028A6  0E7B               	movlw	123
  5647  0028A8  6E31               	movwf	?___ftmul+3,c
  5648  0028AA  0E7E               	movlw	126
  5649  0028AC  6E32               	movwf	?___ftmul+4,c
  5650  0028AE  0E3D               	movlw	61
  5651  0028B0  6E33               	movwf	?___ftmul+5,c
  5652  0028B2  CFC3 F009          	movff	4035,?___lwtoft	;volatile
  5653  0028B6  CFC4 F00A          	movff	4036,?___lwtoft+1	;volatile
  5654  0028BA  EC64  F023         	call	___lwtoft	;wreg free
  5655  0028BE  C00B  F030         	movff	?___lwtoft+2,?___ftmul+2
  5656  0028C2  C00A  F02F         	movff	?___lwtoft+1,?___ftmul+1
  5657  0028C6  C009  F02E         	movff	?___lwtoft,?___ftmul
  5658  0028CA  ECAC  F019         	call	___ftmul	;wreg free
  5659  0028CE  C030  F041         	movff	?___ftmul+2,?___ftadd+2
  5660  0028D2  C02F  F040         	movff	?___ftmul+1,?___ftadd+1
  5661  0028D6  C02E  F03F         	movff	?___ftmul,?___ftadd
  5662  0028DA  0E1A               	movlw	26
  5663  0028DC  6E42               	movwf	?___ftadd+3,c
  5664  0028DE  0EA4               	movlw	164
  5665  0028E0  6E43               	movwf	?___ftadd+4,c
  5666  0028E2  0EC1               	movlw	193
  5667  0028E4  6E44               	movwf	?___ftadd+5,c
  5668  0028E6  ECF7  F015         	call	___ftadd	;wreg free
  5669  0028EA  D022               	goto	L6
  5670  0028EC                     i2l6501:
  5671                           
  5672                           ;temp.c: 58: else
  5673                           ;temp.c: 59: {
  5674                           ;temp.c: 60: temp = (((double) ADRES) * ((0.0048828125)/0.0195/(4.0303030303030303030303
      +                          0303)) - (20.5128205128) * 5 / 9 + 32);
  5675  0028EC  0E7B               	movlw	123
  5676  0028EE  6E31               	movwf	?___ftmul+3,c
  5677  0028F0  0E7E               	movlw	126
  5678  0028F2  6E32               	movwf	?___ftmul+4,c
  5679  0028F4  0E3D               	movlw	61
  5680  0028F6  6E33               	movwf	?___ftmul+5,c
  5681  0028F8  CFC3 F009          	movff	4035,?___lwtoft	;volatile
  5682  0028FC  CFC4 F00A          	movff	4036,?___lwtoft+1	;volatile
  5683  002900  EC64  F023         	call	___lwtoft	;wreg free
  5684  002904  C00B  F030         	movff	?___lwtoft+2,?___ftmul+2
  5685  002908  C00A  F02F         	movff	?___lwtoft+1,?___ftmul+1
  5686  00290C  C009  F02E         	movff	?___lwtoft,?___ftmul
  5687  002910  ECAC  F019         	call	___ftmul	;wreg free
  5688  002914  C030  F041         	movff	?___ftmul+2,?___ftadd+2
  5689  002918  C02F  F040         	movff	?___ftmul+1,?___ftadd+1
  5690  00291C  C02E  F03F         	movff	?___ftmul,?___ftadd
  5691  002920  0ED5               	movlw	213
  5692  002922  6E42               	movwf	?___ftadd+3,c
  5693  002924  0EA4               	movlw	164
  5694  002926  6E43               	movwf	?___ftadd+4,c
  5695  002928  0E41               	movlw	65
  5696  00292A  6E44               	movwf	?___ftadd+5,c
  5697  00292C  ECF7  F015         	call	___ftadd	;wreg free
  5698  002930                     L6:
  5699  002930  C041  F06B         	movff	?___ftadd+2,getTemp@temp+2
  5700  002934  C040  F06A         	movff	?___ftadd+1,getTemp@temp+1
  5701  002938  C03F  F069         	movff	?___ftadd,getTemp@temp
  5702                           
  5703                           ;temp.c: 61: }
  5704                           ;temp.c: 62: double total = temp;
  5705  00293C  C069  F06C         	movff	getTemp@temp,getTemp@total
  5706  002940  C06A  F06D         	movff	getTemp@temp+1,getTemp@total+1
  5707  002944  C06B  F06E         	movff	getTemp@temp+2,getTemp@total+2
  5708                           
  5709                           ;temp.c: 63: for (cnt = 0; cnt < 3; cnt++)
  5710  002948  6E56               	movwf	??_getTemp& (0+255),c
  5711  00294A  0E00               	movlw	0
  5712  00294C  0100               	movlb	0	; () banked
  5713  00294E  0100               	movlb	0	; () banked
  5714  002950  6F6F               	movwf	getTemp@cnt& (0+255),b
  5715  002952  5056               	movf	??_getTemp& (0+255),w,c
  5716  002954  D03C               	goto	L8
  5717  002956                     i2l6511:
  5718                           
  5719                           ; BSR set to: 0
  5720                           ;temp.c: 64: {
  5721                           ;temp.c: 65: oldTemps[cnt] = oldTempsTemp[cnt];
  5722  002956  0100               	movlb	0	; () banked
  5723  002958  0100               	movlb	0	; () banked
  5724  00295A  516F               	movf	getTemp@cnt& (0+255),w,b
  5725  00295C  0D03               	mullw	3
  5726  00295E  0100               	movlb	0	; () banked
  5727  002960  0E60               	movlw	low getTemp@oldTempsTemp
  5728  002962  24F3               	addwf	prodl,w,c
  5729  002964  6ED9               	movwf	fsr2l,c
  5730  002966  0100               	movlb	0	; () banked
  5731  002968  0E00               	movlw	high getTemp@oldTempsTemp
  5732  00296A  20F4               	addwfc	prodh,w,c
  5733  00296C  6EDA               	movwf	fsr2h,c
  5734  00296E  0100               	movlb	0	; () banked
  5735  002970  0100               	movlb	0	; () banked
  5736  002972  516F               	movf	getTemp@cnt& (0+255),w,b
  5737  002974  0D03               	mullw	3
  5738  002976  0100               	movlb	0	; () banked
  5739  002978  0EB7               	movlw	low _oldTemps
  5740  00297A  24F3               	addwf	prodl,w,c
  5741  00297C  6EE1               	movwf	fsr1l,c
  5742  00297E  0100               	movlb	0	; () banked
  5743  002980  0E00               	movlw	high _oldTemps
  5744  002982  20F4               	addwfc	prodh,w,c
  5745  002984  6EE2               	movwf	fsr1h,c
  5746  002986  CFDE FFE6          	movff	postinc2,postinc1
  5747  00298A  CFDE FFE6          	movff	postinc2,postinc1
  5748  00298E  CFDE FFE5          	movff	postinc2,postdec1
  5749  002992  52E5               	movf	postdec1,f,c
  5750                           
  5751                           ; BSR set to: 0
  5752                           ;temp.c: 66: total += oldTemps[cnt];
  5753  002994  0100               	movlb	0	; () banked
  5754  002996  0E00               	movlw	high getTemp@total
  5755  002998  6E4F               	movwf	?___asftadd+1,c
  5756  00299A  0100               	movlb	0	; () banked
  5757  00299C  0E6C               	movlw	low getTemp@total
  5758  00299E  6E4E               	movwf	?___asftadd,c
  5759  0029A0  0100               	movlb	0	; () banked
  5760  0029A2  0100               	movlb	0	; () banked
  5761  0029A4  516F               	movf	getTemp@cnt& (0+255),w,b
  5762  0029A6  0D03               	mullw	3
  5763  0029A8  0100               	movlb	0	; () banked
  5764  0029AA  0EB7               	movlw	low _oldTemps
  5765  0029AC  24F3               	addwf	prodl,w,c
  5766  0029AE  6ED9               	movwf	fsr2l,c
  5767  0029B0  0100               	movlb	0	; () banked
  5768  0029B2  0E00               	movlw	high _oldTemps
  5769  0029B4  20F4               	addwfc	prodh,w,c
  5770  0029B6  6EDA               	movwf	fsr2h,c
  5771  0029B8  CFDE F050          	movff	postinc2,?___asftadd+2
  5772  0029BC  CFDE F051          	movff	postinc2,?___asftadd+3
  5773  0029C0  CFDD F052          	movff	postdec2,?___asftadd+4
  5774  0029C4  ECBC  F022         	call	___asftadd	;wreg free
  5775  0029C8  0100               	movlb	0	; () banked
  5776  0029CA  0100               	movlb	0	; () banked
  5777  0029CC  2B6F               	incf	getTemp@cnt& (0+255),f,b
  5778  0029CE                     L8:
  5779                           
  5780                           ; BSR set to: 0
  5781  0029CE  0E02               	movlw	2
  5782  0029D0  0100               	movlb	0	; () banked
  5783  0029D2  0100               	movlb	0	; () banked
  5784  0029D4  656F               	cpfsgt	getTemp@cnt& (0+255),b
  5785  0029D6  D7BF               	goto	i2l6511
  5786                           
  5787                           ; BSR set to: 0
  5788                           ;temp.c: 67: }
  5789                           ;temp.c: 68: oldTemps[3] = temp;
  5790  0029D8  C069  F0C0         	movff	getTemp@temp,_oldTemps+9
  5791  0029DC  C06A  F0C1         	movff	getTemp@temp+1,_oldTemps+10
  5792  0029E0  C06B  F0C2         	movff	getTemp@temp+2,_oldTemps+11
  5793                           
  5794                           ; BSR set to: 0
  5795                           ;temp.c: 70: return total / 4;
  5796  0029E4  C06C  F009         	movff	getTemp@total,?___ftdiv
  5797  0029E8  C06D  F00A         	movff	getTemp@total+1,?___ftdiv+1
  5798  0029EC  C06E  F00B         	movff	getTemp@total+2,?___ftdiv+2
  5799  0029F0  0E00               	movlw	0
  5800  0029F2  6E0C               	movwf	?___ftdiv+3,c
  5801  0029F4  0E80               	movlw	128
  5802  0029F6  6E0D               	movwf	?___ftdiv+4,c
  5803  0029F8  0E40               	movlw	64
  5804  0029FA  6E0E               	movwf	?___ftdiv+5,c
  5805  0029FC  EC34  F01A         	call	___ftdiv	;wreg free
  5806  002A00  C00B  F055         	movff	?___ftdiv+2,?_getTemp+2
  5807  002A04  C00A  F054         	movff	?___ftdiv+1,?_getTemp+1
  5808  002A08  C009  F053         	movff	?___ftdiv,?_getTemp
  5809  002A0C  0012               	return	
  5810  002A0E                     __end_of_getTemp:
  5811                           	opt stack 0
  5812                           tosu	equ	0xFFF
  5813                           tosh	equ	0xFFE
  5814                           tosl	equ	0xFFD
  5815                           pclatu	equ	0xFFB
  5816                           pclath	equ	0xFFA
  5817                           tblptru	equ	0xFF8
  5818                           tblptrh	equ	0xFF7
  5819                           tblptrl	equ	0xFF6
  5820                           tablat	equ	0xFF5
  5821                           prodh	equ	0xFF4
  5822                           prodl	equ	0xFF3
  5823                           intcon	equ	0xFF2
  5824                           intcon2	equ	0xFF1
  5825                           postinc0	equ	0xFEE
  5826                           fsr0h	equ	0xFEA
  5827                           fsr0l	equ	0xFE9
  5828                           wreg	equ	0xFE8
  5829                           postinc1	equ	0xFE6
  5830                           postdec1	equ	0xFE5
  5831                           fsr1h	equ	0xFE2
  5832                           fsr1l	equ	0xFE1
  5833                           indf2	equ	0xFDF
  5834                           postinc2	equ	0xFDE
  5835                           postdec2	equ	0xFDD
  5836                           fsr2h	equ	0xFDA
  5837                           fsr2l	equ	0xFD9
  5838                           status	equ	0xFD8
  5839                           
  5840 ;; *************** function ___lwtoft *****************
  5841 ;; Defined at:
  5842 ;;		line 29 in file "/usr/opt/microchip/xc8/v1.20/sources/common/lwtoft.c"
  5843 ;; Parameters:    Size  Location     Type
  5844 ;;  c               2    8[COMRAM] unsigned int 
  5845 ;; Auto vars:     Size  Location     Type
  5846 ;;		None
  5847 ;; Return value:  Size  Location     Type
  5848 ;;                  3    8[COMRAM] float 
  5849 ;; Registers used:
  5850 ;;		wreg, status,2, status,0, cstack
  5851 ;; Tracked objects:
  5852 ;;		On entry : 0/0
  5853 ;;		On exit  : 0/0
  5854 ;;		Unchanged: 0/0
  5855 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5856 ;;      Params:         3       0       0       0       0       0       0       0       0
  5857 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5858 ;;      Temps:          2       0       0       0       0       0       0       0       0
  5859 ;;      Totals:         5       0       0       0       0       0       0       0       0
  5860 ;;Total ram usage:        5 bytes
  5861 ;; Hardware stack levels used:    1
  5862 ;; Hardware stack levels required when called:    1
  5863 ;; This function calls:
  5864 ;;		___ftpack
  5865 ;; This function is called by:
  5866 ;;		_getTemp
  5867 ;; This function uses a non-reentrant model
  5868 ;;
  5869                           
  5870                           	psect	text20
  5871  0046C8                     __ptext20:
  5872                           	opt stack 0
  5873  0046C8                     ___lwtoft:
  5874                           	opt stack 22
  5875                           
  5876                           ;incstack = 0
  5877                           ;incstack = 0
  5878  0046C8  C009  F001         	movff	___lwtoft@c,?___ftpack
  5879  0046CC  C00A  F002         	movff	___lwtoft@c+1,?___ftpack+1
  5880  0046D0  6A03               	clrf	?___ftpack+2,c
  5881  0046D2  6E0C               	movwf	??___lwtoft& (0+255),c
  5882  0046D4  0E8E               	movlw	142
  5883  0046D6  6E04               	movwf	?___ftpack+3,c
  5884  0046D8  500C               	movf	??___lwtoft& (0+255),w,c
  5885  0046DA  6E0D               	movwf	(??___lwtoft+1)& (0+255),c
  5886  0046DC  0E00               	movlw	0
  5887  0046DE  6E05               	movwf	?___ftpack+4,c
  5888  0046E0  500D               	movf	(??___lwtoft+1)& (0+255),w,c
  5889  0046E2  EC7C  F01C         	call	___ftpack	;wreg free
  5890  0046E6  C003  F00B         	movff	?___ftpack+2,?___lwtoft+2
  5891  0046EA  C002  F00A         	movff	?___ftpack+1,?___lwtoft+1
  5892  0046EE  C001  F009         	movff	?___ftpack,?___lwtoft
  5893  0046F2  0012               	return	
  5894  0046F4                     __end_of___lwtoft:
  5895                           	opt stack 0
  5896                           tosu	equ	0xFFF
  5897                           tosh	equ	0xFFE
  5898                           tosl	equ	0xFFD
  5899                           pclatu	equ	0xFFB
  5900                           pclath	equ	0xFFA
  5901                           tblptru	equ	0xFF8
  5902                           tblptrh	equ	0xFF7
  5903                           tblptrl	equ	0xFF6
  5904                           tablat	equ	0xFF5
  5905                           prodh	equ	0xFF4
  5906                           prodl	equ	0xFF3
  5907                           intcon	equ	0xFF2
  5908                           intcon2	equ	0xFF1
  5909                           postinc0	equ	0xFEE
  5910                           fsr0h	equ	0xFEA
  5911                           fsr0l	equ	0xFE9
  5912                           wreg	equ	0xFE8
  5913                           postinc1	equ	0xFE6
  5914                           postdec1	equ	0xFE5
  5915                           fsr1h	equ	0xFE2
  5916                           fsr1l	equ	0xFE1
  5917                           indf2	equ	0xFDF
  5918                           postinc2	equ	0xFDE
  5919                           postdec2	equ	0xFDD
  5920                           fsr2h	equ	0xFDA
  5921                           fsr2l	equ	0xFD9
  5922                           status	equ	0xFD8
  5923                           
  5924 ;; *************** function ___ftdiv *****************
  5925 ;; Defined at:
  5926 ;;		line 50 in file "/usr/opt/microchip/xc8/v1.20/sources/common/ftdiv.c"
  5927 ;; Parameters:    Size  Location     Type
  5928 ;;  f1              3    8[COMRAM] float 
  5929 ;;  f2              3   11[COMRAM] float 
  5930 ;; Auto vars:     Size  Location     Type
  5931 ;;  f3              3   20[COMRAM] float 
  5932 ;;  sign            1   24[COMRAM] unsigned char 
  5933 ;;  exp             1   23[COMRAM] unsigned char 
  5934 ;;  cntr            1   19[COMRAM] unsigned char 
  5935 ;; Return value:  Size  Location     Type
  5936 ;;                  3    8[COMRAM] float 
  5937 ;; Registers used:
  5938 ;;		wreg, status,2, status,0, cstack
  5939 ;; Tracked objects:
  5940 ;;		On entry : 0/0
  5941 ;;		On exit  : 0/0
  5942 ;;		Unchanged: 0/0
  5943 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5944 ;;      Params:         6       0       0       0       0       0       0       0       0
  5945 ;;      Locals:         6       0       0       0       0       0       0       0       0
  5946 ;;      Temps:          5       0       0       0       0       0       0       0       0
  5947 ;;      Totals:        17       0       0       0       0       0       0       0       0
  5948 ;;Total ram usage:       17 bytes
  5949 ;; Hardware stack levels used:    1
  5950 ;; Hardware stack levels required when called:    1
  5951 ;; This function calls:
  5952 ;;		___ftpack
  5953 ;; This function is called by:
  5954 ;;		_getTemp
  5955 ;; This function uses a non-reentrant model
  5956 ;;
  5957                           
  5958                           	psect	text21
  5959  003468                     __ptext21:
  5960                           	opt stack 0
  5961  003468                     ___ftdiv:
  5962                           	opt stack 22
  5963                           
  5964                           ;incstack = 0
  5965                           ;incstack = 0
  5966  003468  0E0F               	movlw	15
  5967  00346A  6E0F               	movwf	??___ftdiv& (0+255),c
  5968  00346C  C009  F010         	movff	___ftdiv@f1,??___ftdiv+1
  5969  003470  C00A  F011         	movff	___ftdiv@f1+1,??___ftdiv+2
  5970  003474  C00B  F012         	movff	___ftdiv@f1+2,??___ftdiv+3
  5971  003478  280F               	incf	??___ftdiv,w,c
  5972  00347A  6E13               	movwf	(??___ftdiv+4)& (0+255),c
  5973  00347C  D004               	goto	i2u363_40
  5974  00347E                     i2u363_45:
  5975  00347E  90D8               	bcf	status,0,c
  5976  003480  3212               	rrcf	??___ftdiv+3,f,c
  5977  003482  3211               	rrcf	??___ftdiv+2,f,c
  5978  003484  3210               	rrcf	??___ftdiv+1,f,c
  5979  003486                     i2u363_40:
  5980  003486  2E13               	decfsz	(??___ftdiv+4)& (0+255),f,c
  5981  003488  D7FA               	goto	i2u363_45
  5982  00348A  5010               	movf	??___ftdiv+1,w,c
  5983  00348C  6E18               	movwf	___ftdiv@exp,c
  5984  00348E  6618               	tstfsz	___ftdiv@exp& (0+255),c
  5985  003490  D001               	goto	i2l5885
  5986  003492  D015               	goto	i2u366_40
  5987  003494                     i2l5885:
  5988  003494  0E0F               	movlw	15
  5989  003496  6E0F               	movwf	??___ftdiv& (0+255),c
  5990  003498  C00C  F010         	movff	___ftdiv@f2,??___ftdiv+1
  5991  00349C  C00D  F011         	movff	___ftdiv@f2+1,??___ftdiv+2
  5992  0034A0  C00E  F012         	movff	___ftdiv@f2+2,??___ftdiv+3
  5993  0034A4  280F               	incf	??___ftdiv,w,c
  5994  0034A6  6E13               	movwf	(??___ftdiv+4)& (0+255),c
  5995  0034A8  D004               	goto	i2u365_40
  5996  0034AA                     i2u365_45:
  5997  0034AA  90D8               	bcf	status,0,c
  5998  0034AC  3212               	rrcf	??___ftdiv+3,f,c
  5999  0034AE  3211               	rrcf	??___ftdiv+2,f,c
  6000  0034B0  3210               	rrcf	??___ftdiv+1,f,c
  6001  0034B2                     i2u365_40:
  6002  0034B2  2E13               	decfsz	(??___ftdiv+4)& (0+255),f,c
  6003  0034B4  D7FA               	goto	i2u365_45
  6004  0034B6  5010               	movf	??___ftdiv+1,w,c
  6005  0034B8  6E19               	movwf	___ftdiv@sign,c
  6006  0034BA  6619               	tstfsz	___ftdiv@sign& (0+255),c
  6007  0034BC  D007               	goto	i2l5891
  6008  0034BE                     i2u366_40:
  6009  0034BE  0E00               	movlw	0
  6010  0034C0  6E09               	movwf	?___ftdiv,c
  6011  0034C2  0E00               	movlw	0
  6012  0034C4  6E0A               	movwf	?___ftdiv+1,c
  6013  0034C6  0E00               	movlw	0
  6014  0034C8  6E0B               	movwf	?___ftdiv+2,c
  6015  0034CA  D04C               	goto	i2l1066
  6016  0034CC                     i2l5891:
  6017  0034CC  0E00               	movlw	0
  6018  0034CE  6E15               	movwf	___ftdiv@f3,c
  6019  0034D0  0E00               	movlw	0
  6020  0034D2  6E16               	movwf	___ftdiv@f3+1,c
  6021  0034D4  0E00               	movlw	0
  6022  0034D6  6E17               	movwf	___ftdiv@f3+2,c
  6023  0034D8  5019               	movf	___ftdiv@sign,w,c
  6024  0034DA  0F89               	addlw	137
  6025  0034DC  5E18               	subwf	___ftdiv@exp,f,c
  6026  0034DE  C00B  F019         	movff	___ftdiv@f1+2,___ftdiv@sign
  6027  0034E2  500E               	movf	(___ftdiv@f2+2)& (0+255),w,c
  6028  0034E4  1A19               	xorwf	___ftdiv@sign,f,c
  6029  0034E6  0E80               	movlw	128
  6030  0034E8  1619               	andwf	___ftdiv@sign,f,c
  6031  0034EA  8E0A               	bsf	___ftdiv@f1+1,7,c
  6032  0034EC  0EFF               	movlw	255
  6033  0034EE  1609               	andwf	___ftdiv@f1,f,c
  6034  0034F0  0EFF               	movlw	255
  6035  0034F2  160A               	andwf	___ftdiv@f1+1,f,c
  6036  0034F4  0E00               	movlw	0
  6037  0034F6  160B               	andwf	___ftdiv@f1+2,f,c
  6038  0034F8  8E0D               	bsf	___ftdiv@f2+1,7,c
  6039  0034FA  0EFF               	movlw	255
  6040  0034FC  160C               	andwf	___ftdiv@f2,f,c
  6041  0034FE  0EFF               	movlw	255
  6042  003500  160D               	andwf	___ftdiv@f2+1,f,c
  6043  003502  0E00               	movlw	0
  6044  003504  160E               	andwf	___ftdiv@f2+2,f,c
  6045  003506  6E0F               	movwf	??___ftdiv& (0+255),c
  6046  003508  0E18               	movlw	24
  6047  00350A  6E14               	movwf	___ftdiv@cntr,c
  6048  00350C  500F               	movf	??___ftdiv& (0+255),w,c
  6049  00350E                     i2l1068:
  6050  00350E  90D8               	bcf	status,0,c
  6051  003510  3615               	rlcf	___ftdiv@f3,f,c
  6052  003512  3616               	rlcf	___ftdiv@f3+1,f,c
  6053  003514  3617               	rlcf	___ftdiv@f3+2,f,c
  6054  003516  500C               	movf	___ftdiv@f2,w,c
  6055  003518  5C09               	subwf	___ftdiv@f1,w,c
  6056  00351A  500D               	movf	___ftdiv@f2+1,w,c
  6057  00351C  580A               	subwfb	___ftdiv@f1+1,w,c
  6058  00351E  500E               	movf	___ftdiv@f2+2,w,c
  6059  003520  580B               	subwfb	___ftdiv@f1+2,w,c
  6060  003522  A0D8               	btfss	status,0,c
  6061  003524  D007               	goto	i2l1069
  6062  003526  500C               	movf	___ftdiv@f2,w,c
  6063  003528  5E09               	subwf	___ftdiv@f1,f,c
  6064  00352A  500D               	movf	___ftdiv@f2+1,w,c
  6065  00352C  5A0A               	subwfb	___ftdiv@f1+1,f,c
  6066  00352E  500E               	movf	___ftdiv@f2+2,w,c
  6067  003530  5A0B               	subwfb	___ftdiv@f1+2,f,c
  6068  003532  8015               	bsf	___ftdiv@f3,0,c
  6069  003534                     i2l1069:
  6070  003534  90D8               	bcf	status,0,c
  6071  003536  3609               	rlcf	___ftdiv@f1,f,c
  6072  003538  360A               	rlcf	___ftdiv@f1+1,f,c
  6073  00353A  360B               	rlcf	___ftdiv@f1+2,f,c
  6074  00353C  2E14               	decfsz	___ftdiv@cntr,f,c
  6075  00353E  D7E7               	goto	i2l1068
  6076  003540  C015  F001         	movff	___ftdiv@f3,?___ftpack
  6077  003544  C016  F002         	movff	___ftdiv@f3+1,?___ftpack+1
  6078  003548  C017  F003         	movff	___ftdiv@f3+2,?___ftpack+2
  6079  00354C  C018  F004         	movff	___ftdiv@exp,?___ftpack+3
  6080  003550  C019  F005         	movff	___ftdiv@sign,?___ftpack+4
  6081  003554  EC7C  F01C         	call	___ftpack	;wreg free
  6082  003558  C003  F00B         	movff	?___ftpack+2,?___ftdiv+2
  6083  00355C  C002  F00A         	movff	?___ftpack+1,?___ftdiv+1
  6084  003560  C001  F009         	movff	?___ftpack,?___ftdiv
  6085  003564                     i2l1066:
  6086  003564  0012               	return	
  6087  003566                     __end_of___ftdiv:
  6088                           	opt stack 0
  6089                           tosu	equ	0xFFF
  6090                           tosh	equ	0xFFE
  6091                           tosl	equ	0xFFD
  6092                           pclatu	equ	0xFFB
  6093                           pclath	equ	0xFFA
  6094                           tblptru	equ	0xFF8
  6095                           tblptrh	equ	0xFF7
  6096                           tblptrl	equ	0xFF6
  6097                           tablat	equ	0xFF5
  6098                           prodh	equ	0xFF4
  6099                           prodl	equ	0xFF3
  6100                           intcon	equ	0xFF2
  6101                           intcon2	equ	0xFF1
  6102                           postinc0	equ	0xFEE
  6103                           fsr0h	equ	0xFEA
  6104                           fsr0l	equ	0xFE9
  6105                           wreg	equ	0xFE8
  6106                           postinc1	equ	0xFE6
  6107                           postdec1	equ	0xFE5
  6108                           fsr1h	equ	0xFE2
  6109                           fsr1l	equ	0xFE1
  6110                           indf2	equ	0xFDF
  6111                           postinc2	equ	0xFDE
  6112                           postdec2	equ	0xFDD
  6113                           fsr2h	equ	0xFDA
  6114                           fsr2l	equ	0xFD9
  6115                           status	equ	0xFD8
  6116                           
  6117 ;; *************** function _writeFloat *****************
  6118 ;; Defined at:
  6119 ;;		line 165 in file "disp.c"
  6120 ;; Parameters:    Size  Location     Type
  6121 ;;  digits          1   44[BANK0 ] unsigned char 
  6122 ;;  num             3   45[BANK0 ] unsigned char 
  6123 ;; Auto vars:     Size  Location     Type
  6124 ;;  str             9   48[BANK0 ] unsigned char [9]
  6125 ;;  bits            1   57[BANK0 ] unsigned char 
  6126 ;; Return value:  Size  Location     Type
  6127 ;;		None               void
  6128 ;; Registers used:
  6129 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6130 ;; Tracked objects:
  6131 ;;		On entry : 0/0
  6132 ;;		On exit  : 0/0
  6133 ;;		Unchanged: 0/0
  6134 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6135 ;;      Params:         0       4       0       0       0       0       0       0       0
  6136 ;;      Locals:         0      10       0       0       0       0       0       0       0
  6137 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6138 ;;      Totals:         0      14       0       0       0       0       0       0       0
  6139 ;;Total ram usage:       14 bytes
  6140 ;; Hardware stack levels used:    1
  6141 ;; Hardware stack levels required when called:    5
  6142 ;; This function calls:
  6143 ;;		_countBits
  6144 ;;		_sprintf
  6145 ;;		_writeString
  6146 ;; This function is called by:
  6147 ;;		_printTemp
  6148 ;; This function uses a non-reentrant model
  6149 ;;
  6150                           
  6151                           	psect	text22
  6152  003EF4                     __ptext22:
  6153                           	opt stack 0
  6154  003EF4                     _writeFloat:
  6155                           	opt stack 19
  6156                           
  6157                           ;disp.c: 166: char str[9] = "";
  6158                           
  6159                           ;incstack = 0
  6160                           ;incstack = 0
  6161  003EF4  EE20  F0CC         	lfsr	2,writeFloat@F5025
  6162  003EF8  EE10  F090         	lfsr	1,writeFloat@str
  6163  003EFC  0E09               	movlw	9
  6164  003EFE                     i2u537_41:
  6165  003EFE  CFDE FFE6          	movff	postinc2,postinc1
  6166  003F02  2EE8               	decfsz	wreg,f,c
  6167  003F04  D7FC               	goto	i2u537_41
  6168                           
  6169                           ;disp.c: 167: uint8_t bits = countBits(digits);
  6170  003F06  0100               	movlb	0	; () banked
  6171  003F08  0100               	movlb	0	; () banked
  6172  003F0A  518C               	movf	writeFloat@digits& (0+255),w,b
  6173  003F0C  6E01               	movwf	?_countBits,c
  6174  003F0E  6A02               	clrf	?_countBits+1,c
  6175  003F10  6A03               	clrf	?_countBits+2,c
  6176  003F12  6A04               	clrf	?_countBits+3,c
  6177  003F14  EC8F  F023         	call	_countBits	;wreg free
  6178  003F18  0100               	movlb	0	; () banked
  6179  003F1A  0100               	movlb	0	; () banked
  6180  003F1C  6F99               	movwf	writeFloat@bits& (0+255),b
  6181                           
  6182                           ; BSR set to: 0
  6183                           ;disp.c: 168: sprintf(&str, "%.*f", bits, num);
  6184  003F1E  0100               	movlb	0	; () banked
  6185  003F20  0E00               	movlw	high writeFloat@str
  6186  003F22  0100               	movlb	0	; () banked
  6187  003F24  0100               	movlb	0	; () banked
  6188  003F26  6F61               	movwf	(?_sprintf+1)& (0+255),b
  6189  003F28  0100               	movlb	0	; () banked
  6190  003F2A  0E90               	movlw	low writeFloat@str
  6191  003F2C  0100               	movlb	0	; () banked
  6192  003F2E  6F60               	movwf	?_sprintf& (0+255),b
  6193  003F30  0E7F               	movlw	high STR_9
  6194  003F32  0100               	movlb	0	; () banked
  6195  003F34  0100               	movlb	0	; () banked
  6196  003F36  6F63               	movwf	(?_sprintf+3)& (0+255),b
  6197  003F38  0ED5               	movlw	low STR_9
  6198  003F3A  0100               	movlb	0	; () banked
  6199  003F3C  6F62               	movwf	(?_sprintf+2)& (0+255),b
  6200  003F3E  0100               	movlb	0	; () banked
  6201  003F40  0100               	movlb	0	; () banked
  6202  003F42  C099  F064         	movff	writeFloat@bits,?_sprintf+4
  6203  003F46  0100               	movlb	0	; () banked
  6204  003F48  0100               	movlb	0	; () banked
  6205  003F4A  6B65               	clrf	(?_sprintf+5)& (0+255),b
  6206  003F4C  C08D  F066         	movff	writeFloat@num,?_sprintf+6
  6207  003F50  C08E  F067         	movff	writeFloat@num+1,?_sprintf+7
  6208  003F54  C08F  F068         	movff	writeFloat@num+2,?_sprintf+8
  6209  003F58  EC0E  F000         	call	_sprintf	;wreg free
  6210                           
  6211                           ;disp.c: 170: writeString(digits, str);
  6212  003F5C  C08C  F022         	movff	writeFloat@digits,?_writeString
  6213  003F60  0100               	movlb	0	; () banked
  6214  003F62  0E00               	movlw	high writeFloat@str
  6215  003F64  6E24               	movwf	?_writeString+2,c
  6216  003F66  0100               	movlb	0	; () banked
  6217  003F68  0E90               	movlw	low writeFloat@str
  6218  003F6A  6E23               	movwf	?_writeString+1,c
  6219  003F6C  ECB4  F017         	call	_writeString	;wreg free
  6220  003F70  0012               	return	
  6221  003F72                     __end_of_writeFloat:
  6222                           	opt stack 0
  6223                           tosu	equ	0xFFF
  6224                           tosh	equ	0xFFE
  6225                           tosl	equ	0xFFD
  6226                           pclatu	equ	0xFFB
  6227                           pclath	equ	0xFFA
  6228                           tblptru	equ	0xFF8
  6229                           tblptrh	equ	0xFF7
  6230                           tblptrl	equ	0xFF6
  6231                           tablat	equ	0xFF5
  6232                           prodh	equ	0xFF4
  6233                           prodl	equ	0xFF3
  6234                           intcon	equ	0xFF2
  6235                           intcon2	equ	0xFF1
  6236                           postinc0	equ	0xFEE
  6237                           fsr0h	equ	0xFEA
  6238                           fsr0l	equ	0xFE9
  6239                           wreg	equ	0xFE8
  6240                           postinc1	equ	0xFE6
  6241                           postdec1	equ	0xFE5
  6242                           fsr1h	equ	0xFE2
  6243                           fsr1l	equ	0xFE1
  6244                           indf2	equ	0xFDF
  6245                           postinc2	equ	0xFDE
  6246                           postdec2	equ	0xFDD
  6247                           fsr2h	equ	0xFDA
  6248                           fsr2l	equ	0xFD9
  6249                           status	equ	0xFD8
  6250                           
  6251 ;; *************** function _writeString *****************
  6252 ;; Defined at:
  6253 ;;		line 174 in file "disp.c"
  6254 ;; Parameters:    Size  Location     Type
  6255 ;;  digits          1   33[COMRAM] unsigned char 
  6256 ;;  string          2   34[COMRAM] PTR unsigned char 
  6257 ;;		 -> STR_38(3), printRTC@str(9), writeFloat@str(9), writeLong@str(9), 
  6258 ;; Auto vars:     Size  Location     Type
  6259 ;;  cnt             1   42[COMRAM] char 
  6260 ;;  i               1   41[COMRAM] char 
  6261 ;;  bits            1   40[COMRAM] unsigned char 
  6262 ;; Return value:  Size  Location     Type
  6263 ;;		None               void
  6264 ;; Registers used:
  6265 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6266 ;; Tracked objects:
  6267 ;;		On entry : 0/0
  6268 ;;		On exit  : 0/0
  6269 ;;		Unchanged: 0/0
  6270 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6271 ;;      Params:         3       0       0       0       0       0       0       0       0
  6272 ;;      Locals:         3       0       0       0       0       0       0       0       0
  6273 ;;      Temps:          4       0       0       0       0       0       0       0       0
  6274 ;;      Totals:        10       0       0       0       0       0       0       0       0
  6275 ;;Total ram usage:       10 bytes
  6276 ;; Hardware stack levels used:    1
  6277 ;; Hardware stack levels required when called:    2
  6278 ;; This function calls:
  6279 ;;		_writeChar
  6280 ;;		_countBits
  6281 ;;		_hibit
  6282 ;;		___wmul
  6283 ;;		i2_log2
  6284 ;; This function is called by:
  6285 ;;		_writeFloat
  6286 ;;		_printRTC
  6287 ;;		_printTemp
  6288 ;;		_writeLong
  6289 ;; This function uses a non-reentrant model
  6290 ;;
  6291                           
  6292                           	psect	text23
  6293  002F68                     __ptext23:
  6294                           	opt stack 0
  6295  002F68                     _writeString:
  6296                           	opt stack 21
  6297                           
  6298                           ;disp.c: 179: int8_t cnt = 0, i = 0;
  6299                           
  6300                           ;incstack = 0
  6301                           ;incstack = 0
  6302  002F68  6E25               	movwf	??_writeString& (0+255),c
  6303  002F6A  0E00               	movlw	0
  6304  002F6C  6E2B               	movwf	writeString@cnt,c
  6305  002F6E  5025               	movf	??_writeString& (0+255),w,c
  6306  002F70  6E25               	movwf	??_writeString& (0+255),c
  6307  002F72  0E00               	movlw	0
  6308  002F74  6E2A               	movwf	writeString@i,c
  6309  002F76  5025               	movf	??_writeString& (0+255),w,c
  6310                           
  6311                           ;disp.c: 180: uint8_t bits = countBits(digits);
  6312  002F78  5022               	movf	writeString@digits,w,c
  6313  002F7A  6E01               	movwf	?_countBits,c
  6314  002F7C  6A02               	clrf	?_countBits+1,c
  6315  002F7E  6A03               	clrf	?_countBits+2,c
  6316  002F80  6A04               	clrf	?_countBits+3,c
  6317  002F82  EC8F  F023         	call	_countBits	;wreg free
  6318  002F86  6E29               	movwf	writeString@bits,c
  6319                           
  6320                           ;disp.c: 182: bits += 1;
  6321  002F88  2A29               	incf	writeString@bits,f,c
  6322                           
  6323                           ;disp.c: 183: for (cnt = log2(hibit(digits)); --bits; cnt--)
  6324  002F8A  5022               	movf	writeString@digits,w,c
  6325  002F8C  6E01               	movwf	?_hibit,c
  6326  002F8E  6A02               	clrf	?_hibit+1,c
  6327  002F90  6A03               	clrf	?_hibit+2,c
  6328  002F92  6A04               	clrf	?_hibit+3,c
  6329  002F94  EC11  F021         	call	_hibit	;wreg free
  6330  002F98  C004  F00F         	movff	?_hibit+3,?i2_log2+3
  6331  002F9C  C003  F00E         	movff	?_hibit+2,?i2_log2+2
  6332  002FA0  C002  F00D         	movff	?_hibit+1,?i2_log2+1
  6333  002FA4  C001  F00C         	movff	?_hibit,?i2_log2
  6334  002FA8  EC17  F022         	call	i2_log2	;wreg free
  6335  002FAC  500C               	movf	?i2_log2,w,c
  6336  002FAE  6E2B               	movwf	writeString@cnt,c
  6337  002FB0  D0AB               	goto	i2l6447
  6338  002FB2                     i2l6425:
  6339                           
  6340                           ;disp.c: 184: {
  6341                           ;disp.c: 185: if (0x1 & (digits >> cnt))
  6342  002FB2  C02B  F025         	movff	writeString@cnt,??_writeString
  6343  002FB6  C022  F026         	movff	writeString@digits,??_writeString+1
  6344  002FBA  2A25               	incf	??_writeString,f,c
  6345  002FBC  D002               	goto	i2u445_44
  6346  002FBE                     i2u445_45:
  6347  002FBE  90D8               	bcf	status,0,c
  6348  002FC0  3226               	rrcf	??_writeString+1,f,c
  6349  002FC2                     i2u445_44:
  6350  002FC2  2E25               	decfsz	??_writeString,f,c
  6351  002FC4  D7FC               	goto	i2u445_45
  6352  002FC6  A026               	btfss	??_writeString+1,0,c
  6353  002FC8  D09E               	goto	i2l6445
  6354                           
  6355                           ;disp.c: 186: {
  6356                           ;disp.c: 187: if (string[i] == '\0')
  6357  002FCA  502A               	movf	writeString@i,w,c
  6358  002FCC  6E17               	movwf	?___wmul,c
  6359  002FCE  6A18               	clrf	?___wmul+1,c
  6360  002FD0  BE17               	btfsc	?___wmul,7,c
  6361  002FD2  0618               	decf	?___wmul+1,f,c
  6362  002FD4  0E00               	movlw	0
  6363  002FD6  6E1A               	movwf	?___wmul+3,c
  6364  002FD8  0E01               	movlw	1
  6365  002FDA  6E19               	movwf	?___wmul+2,c
  6366  002FDC  EC14  F023         	call	___wmul	;wreg free
  6367  002FE0  5017               	movf	?___wmul,w,c
  6368  002FE2  2423               	addwf	writeString@string,w,c
  6369  002FE4  6E25               	movwf	??_writeString& (0+255),c
  6370  002FE6  5018               	movf	?___wmul+1,w,c
  6371  002FE8  2024               	addwfc	writeString@string+1,w,c
  6372  002FEA  6E26               	movwf	(??_writeString+1)& (0+255),c
  6373  002FEC  5025               	movf	??_writeString,w,c
  6374  002FEE  6EF6               	movwf	tblptrl,c
  6375  002FF0  6EE9               	movwf	fsr0l,c
  6376  002FF2  0E07               	movlw	(high __ramtop+-1)
  6377  002FF4  6EEA               	movwf	fsr0h,c
  6378  002FF6  5026               	movf	??_writeString+1,w,c
  6379  002FF8  64EA               	cpfsgt	fsr0h,c
  6380  002FFA  D003               	bra	i2u447_47
  6381  002FFC  6EEA               	movwf	fsr0h,c
  6382  002FFE  50EF               	movf	indf0,w,c
  6383  003000  D003               	bra	i2u447_40
  6384  003002                     i2u447_47:
  6385  003002  6EF7               	movwf	tblptrh,c
  6386  003004  0008               	tblrd		*
  6387  003006  50F5               	movf	tablat,w,c
  6388  003008                     i2u447_40:
  6389  003008  0900               	iorlw	0
  6390  00300A  B4D8               	btfsc	status,2,c
  6391  00300C  D07F               	goto	i2l192
  6392                           
  6393                           ;disp.c: 190: }
  6394                           ;disp.c: 191: if (string[i] == '.')
  6395                           
  6396                           ;disp.c: 188: {
  6397                           ;disp.c: 189: break;
  6398  00300E  502A               	movf	writeString@i,w,c
  6399  003010  6E17               	movwf	?___wmul,c
  6400  003012  6A18               	clrf	?___wmul+1,c
  6401  003014  BE17               	btfsc	?___wmul,7,c
  6402  003016  0618               	decf	?___wmul+1,f,c
  6403  003018  0E00               	movlw	0
  6404  00301A  6E1A               	movwf	?___wmul+3,c
  6405  00301C  0E01               	movlw	1
  6406  00301E  6E19               	movwf	?___wmul+2,c
  6407  003020  EC14  F023         	call	___wmul	;wreg free
  6408  003024  5017               	movf	?___wmul,w,c
  6409  003026  2423               	addwf	writeString@string,w,c
  6410  003028  6E25               	movwf	??_writeString& (0+255),c
  6411  00302A  5018               	movf	?___wmul+1,w,c
  6412  00302C  2024               	addwfc	writeString@string+1,w,c
  6413  00302E  6E26               	movwf	(??_writeString+1)& (0+255),c
  6414  003030  5025               	movf	??_writeString,w,c
  6415  003032  6EF6               	movwf	tblptrl,c
  6416  003034  6EE9               	movwf	fsr0l,c
  6417  003036  0E07               	movlw	(high __ramtop+-1)
  6418  003038  6EEA               	movwf	fsr0h,c
  6419  00303A  5026               	movf	??_writeString+1,w,c
  6420  00303C  64EA               	cpfsgt	fsr0h,c
  6421  00303E  D003               	bra	i2u449_47
  6422  003040  6EEA               	movwf	fsr0h,c
  6423  003042  50EF               	movf	indf0,w,c
  6424  003044  D003               	bra	i2u449_40
  6425  003046                     i2u449_47:
  6426  003046  6EF7               	movwf	tblptrh,c
  6427  003048  0008               	tblrd		*
  6428  00304A  50F5               	movf	tablat,w,c
  6429  00304C                     i2u449_40:
  6430  00304C  0A2E               	xorlw	46
  6431  00304E  A4D8               	btfss	status,2,c
  6432  003050  D02B               	goto	i2l6441
  6433                           
  6434                           ;disp.c: 192: {
  6435                           ;disp.c: 193: screen.digits.screen[cnt + 1].bits |= 0b10000000;
  6436  003052  C02B  F025         	movff	writeString@cnt,??_writeString
  6437  003056  6A26               	clrf	(??_writeString+1)& (0+255),c
  6438  003058  BE25               	btfsc	??_writeString& (0+255),7,c
  6439  00305A  0626               	decf	(??_writeString+1)& (0+255),f,c
  6440  00305C  0E01               	movlw	1
  6441  00305E  2625               	addwf	??_writeString,f,c
  6442  003060  0E00               	movlw	0
  6443  003062  2226               	addwfc	??_writeString+1,f,c
  6444  003064  0101               	movlb	1	; () banked
  6445  003066  0E2B               	movlw	low _screen
  6446  003068  2425               	addwf	??_writeString,w,c
  6447  00306A  6ED9               	movwf	fsr2l,c
  6448  00306C  0101               	movlb	1	; () banked
  6449  00306E  0E01               	movlw	high _screen
  6450  003070  2026               	addwfc	??_writeString+1,w,c
  6451  003072  6EDA               	movwf	fsr2h,c
  6452  003074  0E00               	movlw	0
  6453  003076  8EDB               	bsf	plusw2,7,c
  6454                           
  6455                           ; BSR set to: 1
  6456                           ;disp.c: 194: screen.changed |= 1 << (cnt + 1);
  6457  003078  C02B  F025         	movff	writeString@cnt,??_writeString
  6458  00307C  0E01               	movlw	1
  6459  00307E  2625               	addwf	??_writeString,f,c
  6460  003080  0E01               	movlw	1
  6461  003082  6E26               	movwf	(??_writeString+1)& (0+255),c
  6462  003084  6A27               	clrf	(??_writeString+2)& (0+255),c
  6463  003086  2A25               	incf	??_writeString,f,c
  6464  003088  D003               	goto	i2u451_44
  6465  00308A                     i2u451_45:
  6466  00308A  90D8               	bcf	status,0,c
  6467  00308C  3626               	rlcf	??_writeString+1,f,c
  6468  00308E  3627               	rlcf	??_writeString+2,f,c
  6469  003090                     i2u451_44:
  6470  003090  2E25               	decfsz	??_writeString,f,c
  6471  003092  D7FB               	goto	i2u451_45
  6472  003094  5026               	movf	??_writeString+1,w,c
  6473  003096  0101               	movlb	1	; () banked
  6474  003098  0101               	movlb	1	; () banked
  6475  00309A  1336               	iorwf	(_screen+11)& (0+255),f,b
  6476  00309C  5027               	movf	??_writeString+2,w,c
  6477  00309E  0101               	movlb	1	; () banked
  6478  0030A0  0101               	movlb	1	; () banked
  6479  0030A2  1337               	iorwf	(_screen+12)& (0+255),f,b
  6480                           
  6481                           ; BSR set to: 1
  6482                           ;disp.c: 195: bits++;
  6483  0030A4  2A29               	incf	writeString@bits,f,c
  6484                           
  6485                           ; BSR set to: 1
  6486                           ;disp.c: 196: i++;
  6487  0030A6  2A2A               	incf	writeString@i,f,c
  6488  0030A8                     i2l6441:
  6489                           
  6490                           ;disp.c: 197: }
  6491                           ;disp.c: 198: writeChar(1 << cnt, string[i]);
  6492  0030A8  C02B  F025         	movff	writeString@cnt,??_writeString
  6493  0030AC  0E01               	movlw	1
  6494  0030AE  6E26               	movwf	(??_writeString+1)& (0+255),c
  6495  0030B0  2A25               	incf	??_writeString,f,c
  6496  0030B2  D002               	goto	i2u452_44
  6497  0030B4                     i2u452_45:
  6498  0030B4  90D8               	bcf	status,0,c
  6499  0030B6  3626               	rlcf	??_writeString+1,f,c
  6500  0030B8                     i2u452_44:
  6501  0030B8  2E25               	decfsz	??_writeString,f,c
  6502  0030BA  D7FC               	goto	i2u452_45
  6503  0030BC  5026               	movf	??_writeString+1,w,c
  6504  0030BE  6E1F               	movwf	?_writeChar,c
  6505  0030C0  502A               	movf	writeString@i,w,c
  6506  0030C2  6E17               	movwf	?___wmul,c
  6507  0030C4  6A18               	clrf	?___wmul+1,c
  6508  0030C6  BE17               	btfsc	?___wmul,7,c
  6509  0030C8  0618               	decf	?___wmul+1,f,c
  6510  0030CA  0E00               	movlw	0
  6511  0030CC  6E1A               	movwf	?___wmul+3,c
  6512  0030CE  0E01               	movlw	1
  6513  0030D0  6E19               	movwf	?___wmul+2,c
  6514  0030D2  EC14  F023         	call	___wmul	;wreg free
  6515  0030D6  5017               	movf	?___wmul,w,c
  6516  0030D8  2423               	addwf	writeString@string,w,c
  6517  0030DA  6E27               	movwf	(??_writeString+2)& (0+255),c
  6518  0030DC  5018               	movf	?___wmul+1,w,c
  6519  0030DE  2024               	addwfc	writeString@string+1,w,c
  6520  0030E0  6E28               	movwf	(??_writeString+3)& (0+255),c
  6521  0030E2  5027               	movf	??_writeString+2,w,c
  6522  0030E4  6EF6               	movwf	tblptrl,c
  6523  0030E6  6EE9               	movwf	fsr0l,c
  6524  0030E8  0E07               	movlw	(high __ramtop+-1)
  6525  0030EA  6EEA               	movwf	fsr0h,c
  6526  0030EC  5028               	movf	??_writeString+3,w,c
  6527  0030EE  64EA               	cpfsgt	fsr0h,c
  6528  0030F0  D003               	bra	i2u453_47
  6529  0030F2  6EEA               	movwf	fsr0h,c
  6530  0030F4  50EF               	movf	indf0,w,c
  6531  0030F6  D003               	bra	i2u453_40
  6532  0030F8                     i2u453_47:
  6533  0030F8  6EF7               	movwf	tblptrh,c
  6534  0030FA  0008               	tblrd		*
  6535  0030FC  50F5               	movf	tablat,w,c
  6536  0030FE                     i2u453_40:
  6537  0030FE  6E20               	movwf	?_writeChar+1,c
  6538  003100  ECF7  F022         	call	_writeChar	;wreg free
  6539                           
  6540                           ;disp.c: 199: i++;
  6541  003104  2A2A               	incf	writeString@i,f,c
  6542  003106                     i2l6445:
  6543  003106  062B               	decf	writeString@cnt,f,c
  6544  003108                     i2l6447:
  6545  003108  2E29               	decfsz	writeString@bits,f,c
  6546  00310A  D753               	goto	i2l6425
  6547  00310C                     i2l192:
  6548  00310C  0012               	return	
  6549  00310E                     __end_of_writeString:
  6550                           	opt stack 0
  6551                           tosu	equ	0xFFF
  6552                           tosh	equ	0xFFE
  6553                           tosl	equ	0xFFD
  6554                           pclatu	equ	0xFFB
  6555                           pclath	equ	0xFFA
  6556                           tblptru	equ	0xFF8
  6557                           tblptrh	equ	0xFF7
  6558                           tblptrl	equ	0xFF6
  6559                           tablat	equ	0xFF5
  6560                           prodh	equ	0xFF4
  6561                           prodl	equ	0xFF3
  6562                           intcon	equ	0xFF2
  6563                           intcon2	equ	0xFF1
  6564                           indf0	equ	0xFEF
  6565                           postinc0	equ	0xFEE
  6566                           fsr0h	equ	0xFEA
  6567                           fsr0l	equ	0xFE9
  6568                           wreg	equ	0xFE8
  6569                           postinc1	equ	0xFE6
  6570                           postdec1	equ	0xFE5
  6571                           fsr1h	equ	0xFE2
  6572                           fsr1l	equ	0xFE1
  6573                           indf2	equ	0xFDF
  6574                           postinc2	equ	0xFDE
  6575                           postdec2	equ	0xFDD
  6576                           plusw2	equ	0xFDB
  6577                           fsr2h	equ	0xFDA
  6578                           fsr2l	equ	0xFD9
  6579                           status	equ	0xFD8
  6580                           
  6581 ;; *************** function _hibit *****************
  6582 ;; Defined at:
  6583 ;;		line 19 in file "defs.c"
  6584 ;; Parameters:    Size  Location     Type
  6585 ;;  x               4    0[COMRAM] unsigned long 
  6586 ;; Auto vars:     Size  Location     Type
  6587 ;;  log2Val         4    7[COMRAM] unsigned long 
  6588 ;; Return value:  Size  Location     Type
  6589 ;;                  4    0[COMRAM] unsigned long 
  6590 ;; Registers used:
  6591 ;;		wreg, status,2, status,0
  6592 ;; Tracked objects:
  6593 ;;		On entry : 0/0
  6594 ;;		On exit  : 0/0
  6595 ;;		Unchanged: 0/0
  6596 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6597 ;;      Params:         4       0       0       0       0       0       0       0       0
  6598 ;;      Locals:         4       0       0       0       0       0       0       0       0
  6599 ;;      Temps:          3       0       0       0       0       0       0       0       0
  6600 ;;      Totals:        11       0       0       0       0       0       0       0       0
  6601 ;;Total ram usage:       11 bytes
  6602 ;; Hardware stack levels used:    1
  6603 ;; This function calls:
  6604 ;;		Nothing
  6605 ;; This function is called by:
  6606 ;;		_writeString
  6607 ;; This function uses a non-reentrant model
  6608 ;;
  6609                           
  6610                           	psect	text24
  6611  004222                     __ptext24:
  6612                           	opt stack 0
  6613  004222                     _hibit:
  6614                           	opt stack 22
  6615                           
  6616                           ;defs.c: 20: uint32_t log2Val = 0;
  6617                           
  6618                           ;incstack = 0
  6619                           ;incstack = 0
  6620  004222  0E00               	movlw	0
  6621  004224  6E08               	movwf	hibit@log2Val,c
  6622  004226  0E00               	movlw	0
  6623  004228  6E09               	movwf	hibit@log2Val+1,c
  6624  00422A  0E00               	movlw	0
  6625  00422C  6E0A               	movwf	hibit@log2Val+2,c
  6626  00422E  0E00               	movlw	0
  6627  004230  6E0B               	movwf	hibit@log2Val+3,c
  6628                           
  6629                           ;defs.c: 21: while (x >>= 1) log2Val++;
  6630  004232  D008               	goto	i2l507
  6631  004234                     i2l5525:
  6632  004234  0E01               	movlw	1
  6633  004236  2608               	addwf	hibit@log2Val,f,c
  6634  004238  0E00               	movlw	0
  6635  00423A  2209               	addwfc	hibit@log2Val+1,f,c
  6636  00423C  0E00               	movlw	0
  6637  00423E  220A               	addwfc	hibit@log2Val+2,f,c
  6638  004240  0E00               	movlw	0
  6639  004242  220B               	addwfc	hibit@log2Val+3,f,c
  6640  004244                     i2l507:
  6641  004244  90D8               	bcf	status,0,c
  6642  004246  3204               	rrcf	hibit@x+3,f,c
  6643  004248  3203               	rrcf	hibit@x+2,f,c
  6644  00424A  3202               	rrcf	hibit@x+1,f,c
  6645  00424C  3201               	rrcf	hibit@x,f,c
  6646  00424E  5004               	movf	(hibit@x+3)& (0+255),w,c
  6647  004250  1001               	iorwf	hibit@x& (0+255),w,c
  6648  004252  1002               	iorwf	(hibit@x+1)& (0+255),w,c
  6649  004254  1003               	iorwf	(hibit@x+2)& (0+255),w,c
  6650  004256  A4D8               	btfss	status,2,c
  6651  004258  D7ED               	goto	i2l5525
  6652                           
  6653                           ;defs.c: 22: return 1 << log2Val;
  6654  00425A  C008  F005         	movff	hibit@log2Val,??_hibit
  6655  00425E  0E01               	movlw	1
  6656  004260  6E06               	movwf	(??_hibit+1)& (0+255),c
  6657  004262  6A07               	clrf	(??_hibit+2)& (0+255),c
  6658  004264  2A05               	incf	??_hibit,f,c
  6659  004266  D003               	goto	i2u308_44
  6660  004268                     i2u308_45:
  6661  004268  90D8               	bcf	status,0,c
  6662  00426A  3606               	rlcf	??_hibit+1,f,c
  6663  00426C  3607               	rlcf	??_hibit+2,f,c
  6664  00426E                     i2u308_44:
  6665  00426E  2E05               	decfsz	??_hibit,f,c
  6666  004270  D7FB               	goto	i2u308_45
  6667  004272  C006  F001         	movff	??_hibit+1,?_hibit
  6668  004276  C007  F002         	movff	??_hibit+2,?_hibit+1
  6669  00427A  0E00               	movlw	0
  6670  00427C  BE02               	btfsc	?_hibit+1,7,c
  6671  00427E  0EFF               	movlw	-1
  6672  004280  6E03               	movwf	?_hibit+2,c
  6673  004282  6E04               	movwf	?_hibit+3,c
  6674  004284  0012               	return	
  6675  004286                     __end_of_hibit:
  6676                           	opt stack 0
  6677                           tosu	equ	0xFFF
  6678                           tosh	equ	0xFFE
  6679                           tosl	equ	0xFFD
  6680                           pclatu	equ	0xFFB
  6681                           pclath	equ	0xFFA
  6682                           tblptru	equ	0xFF8
  6683                           tblptrh	equ	0xFF7
  6684                           tblptrl	equ	0xFF6
  6685                           tablat	equ	0xFF5
  6686                           prodh	equ	0xFF4
  6687                           prodl	equ	0xFF3
  6688                           intcon	equ	0xFF2
  6689                           intcon2	equ	0xFF1
  6690                           indf0	equ	0xFEF
  6691                           postinc0	equ	0xFEE
  6692                           fsr0h	equ	0xFEA
  6693                           fsr0l	equ	0xFE9
  6694                           wreg	equ	0xFE8
  6695                           postinc1	equ	0xFE6
  6696                           postdec1	equ	0xFE5
  6697                           fsr1h	equ	0xFE2
  6698                           fsr1l	equ	0xFE1
  6699                           indf2	equ	0xFDF
  6700                           postinc2	equ	0xFDE
  6701                           postdec2	equ	0xFDD
  6702                           plusw2	equ	0xFDB
  6703                           fsr2h	equ	0xFDA
  6704                           fsr2l	equ	0xFD9
  6705                           status	equ	0xFD8
  6706                           
  6707 ;; *************** function _countBits *****************
  6708 ;; Defined at:
  6709 ;;		line 9 in file "defs.c"
  6710 ;; Parameters:    Size  Location     Type
  6711 ;;  num             4    0[COMRAM] unsigned long 
  6712 ;; Auto vars:     Size  Location     Type
  6713 ;;  ret             1    4[COMRAM] unsigned char 
  6714 ;; Return value:  Size  Location     Type
  6715 ;;                  1    wreg      unsigned char 
  6716 ;; Registers used:
  6717 ;;		wreg, status,2, status,0
  6718 ;; Tracked objects:
  6719 ;;		On entry : 0/0
  6720 ;;		On exit  : 0/0
  6721 ;;		Unchanged: 0/0
  6722 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6723 ;;      Params:         4       0       0       0       0       0       0       0       0
  6724 ;;      Locals:         1       0       0       0       0       0       0       0       0
  6725 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6726 ;;      Totals:         5       0       0       0       0       0       0       0       0
  6727 ;;Total ram usage:        5 bytes
  6728 ;; Hardware stack levels used:    1
  6729 ;; This function calls:
  6730 ;;		Nothing
  6731 ;; This function is called by:
  6732 ;;		_writeFloat
  6733 ;;		_writeString
  6734 ;;		_printRTC
  6735 ;;		_writeLong
  6736 ;;		_maxSize
  6737 ;; This function uses a non-reentrant model
  6738 ;;
  6739                           
  6740                           	psect	text25
  6741  00471E                     __ptext25:
  6742                           	opt stack 0
  6743  00471E                     _countBits:
  6744                           	opt stack 22
  6745                           
  6746                           ;defs.c: 10: uint8_t ret = num & 1;
  6747                           
  6748                           ;incstack = 0
  6749                           ;incstack = 0
  6750  00471E  5001               	movf	countBits@num,w,c
  6751  004720  0B01               	andlw	1
  6752  004722  6E05               	movwf	countBits@ret,c
  6753                           
  6754                           ;defs.c: 11: while (num) ret += (0x1 & (num >>= 1));
  6755  004724  D008               	goto	i2l501
  6756  004726                     i2l5517:
  6757  004726  90D8               	bcf	status,0,c
  6758  004728  3204               	rrcf	countBits@num+3,f,c
  6759  00472A  3203               	rrcf	countBits@num+2,f,c
  6760  00472C  3202               	rrcf	countBits@num+1,f,c
  6761  00472E  3201               	rrcf	countBits@num,f,c
  6762  004730  5001               	movf	countBits@num& (0+255),w,c
  6763  004732  0B01               	andlw	1
  6764  004734  2605               	addwf	countBits@ret,f,c
  6765  004736                     i2l501:
  6766  004736  5004               	movf	countBits@num+3,w,c
  6767  004738  1001               	iorwf	countBits@num,w,c
  6768  00473A  1002               	iorwf	countBits@num+1,w,c
  6769  00473C  1003               	iorwf	countBits@num+2,w,c
  6770  00473E  A4D8               	btfss	status,2,c
  6771  004740  D7F2               	goto	i2l5517
  6772                           
  6773                           ;defs.c: 12: return ret;
  6774  004742  5005               	movf	countBits@ret,w,c
  6775  004744  0012               	return	
  6776  004746                     __end_of_countBits:
  6777                           	opt stack 0
  6778                           tosu	equ	0xFFF
  6779                           tosh	equ	0xFFE
  6780                           tosl	equ	0xFFD
  6781                           pclatu	equ	0xFFB
  6782                           pclath	equ	0xFFA
  6783                           tblptru	equ	0xFF8
  6784                           tblptrh	equ	0xFF7
  6785                           tblptrl	equ	0xFF6
  6786                           tablat	equ	0xFF5
  6787                           prodh	equ	0xFF4
  6788                           prodl	equ	0xFF3
  6789                           intcon	equ	0xFF2
  6790                           intcon2	equ	0xFF1
  6791                           indf0	equ	0xFEF
  6792                           postinc0	equ	0xFEE
  6793                           fsr0h	equ	0xFEA
  6794                           fsr0l	equ	0xFE9
  6795                           wreg	equ	0xFE8
  6796                           postinc1	equ	0xFE6
  6797                           postdec1	equ	0xFE5
  6798                           fsr1h	equ	0xFE2
  6799                           fsr1l	equ	0xFE1
  6800                           indf2	equ	0xFDF
  6801                           postinc2	equ	0xFDE
  6802                           postdec2	equ	0xFDD
  6803                           plusw2	equ	0xFDB
  6804                           fsr2h	equ	0xFDA
  6805                           fsr2l	equ	0xFD9
  6806                           status	equ	0xFD8
  6807                           
  6808 ;; *************** function _writeChar *****************
  6809 ;; Defined at:
  6810 ;;		line 123 in file "disp.c"
  6811 ;; Parameters:    Size  Location     Type
  6812 ;;  digit           1   30[COMRAM] unsigned char 
  6813 ;;  ch              1   31[COMRAM] unsigned char 
  6814 ;; Auto vars:     Size  Location     Type
  6815 ;;  dig             1   32[COMRAM] unsigned char 
  6816 ;; Return value:  Size  Location     Type
  6817 ;;		None               void
  6818 ;; Registers used:
  6819 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6820 ;; Tracked objects:
  6821 ;;		On entry : 0/0
  6822 ;;		On exit  : 0/0
  6823 ;;		Unchanged: 0/0
  6824 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6825 ;;      Params:         2       0       0       0       0       0       0       0       0
  6826 ;;      Locals:         1       0       0       0       0       0       0       0       0
  6827 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6828 ;;      Totals:         3       0       0       0       0       0       0       0       0
  6829 ;;Total ram usage:        3 bytes
  6830 ;; Hardware stack levels used:    1
  6831 ;; Hardware stack levels required when called:    1
  6832 ;; This function calls:
  6833 ;;		_getFontChar
  6834 ;;		i2_log2
  6835 ;; This function is called by:
  6836 ;;		_writeString
  6837 ;; This function uses a non-reentrant model
  6838 ;;
  6839                           
  6840                           	psect	text26
  6841  0045EE                     __ptext26:
  6842                           	opt stack 0
  6843  0045EE                     _writeChar:
  6844                           	opt stack 21
  6845                           
  6846                           ;disp.c: 124: uint8_t dig = (uint8_t) log2(digit);
  6847                           
  6848                           ;incstack = 0
  6849                           ;incstack = 0
  6850  0045EE  501F               	movf	writeChar@digit,w,c
  6851  0045F0  6E0C               	movwf	?i2_log2,c
  6852  0045F2  6A0D               	clrf	?i2_log2+1,c
  6853  0045F4  6A0E               	clrf	?i2_log2+2,c
  6854  0045F6  6A0F               	clrf	?i2_log2+3,c
  6855  0045F8  EC17  F022         	call	i2_log2	;wreg free
  6856  0045FC  500C               	movf	?i2_log2,w,c
  6857  0045FE  6E21               	movwf	writeChar@dig,c
  6858                           
  6859                           ;disp.c: 125: screen.digits.screen[dig].bits = getFontChar(ch);
  6860  004600  5021               	movf	writeChar@dig,w,c
  6861  004602  0D01               	mullw	1
  6862  004604  0101               	movlb	1	; () banked
  6863  004606  0E2B               	movlw	low _screen
  6864  004608  24F3               	addwf	prodl,w,c
  6865  00460A  6ED9               	movwf	fsr2l,c
  6866  00460C  0101               	movlb	1	; () banked
  6867  00460E  0E01               	movlw	high _screen
  6868  004610  20F4               	addwfc	prodh,w,c
  6869  004612  6EDA               	movwf	fsr2h,c
  6870  004614  C020  F001         	movff	writeChar@ch,?_getFontChar
  6871  004618  EC0E  F013         	call	_getFontChar	;wreg free
  6872  00461C  6EDF               	movwf	indf2,c
  6873                           
  6874                           ;disp.c: 126: screen.changed |= digit;
  6875  00461E  501F               	movf	writeChar@digit,w,c
  6876  004620  0101               	movlb	1	; () banked
  6877  004622  0101               	movlb	1	; () banked
  6878  004624  1336               	iorwf	(_screen+11)& (0+255),f,b
  6879                           
  6880                           ; BSR set to: 1
  6881  004626  0012               	return	
  6882  004628                     __end_of_writeChar:
  6883                           	opt stack 0
  6884                           tosu	equ	0xFFF
  6885                           tosh	equ	0xFFE
  6886                           tosl	equ	0xFFD
  6887                           pclatu	equ	0xFFB
  6888                           pclath	equ	0xFFA
  6889                           tblptru	equ	0xFF8
  6890                           tblptrh	equ	0xFF7
  6891                           tblptrl	equ	0xFF6
  6892                           tablat	equ	0xFF5
  6893                           prodh	equ	0xFF4
  6894                           prodl	equ	0xFF3
  6895                           intcon	equ	0xFF2
  6896                           intcon2	equ	0xFF1
  6897                           indf0	equ	0xFEF
  6898                           postinc0	equ	0xFEE
  6899                           fsr0h	equ	0xFEA
  6900                           fsr0l	equ	0xFE9
  6901                           wreg	equ	0xFE8
  6902                           postinc1	equ	0xFE6
  6903                           postdec1	equ	0xFE5
  6904                           fsr1h	equ	0xFE2
  6905                           fsr1l	equ	0xFE1
  6906                           indf2	equ	0xFDF
  6907                           postinc2	equ	0xFDE
  6908                           postdec2	equ	0xFDD
  6909                           plusw2	equ	0xFDB
  6910                           fsr2h	equ	0xFDA
  6911                           fsr2l	equ	0xFD9
  6912                           status	equ	0xFD8
  6913                           
  6914 ;; *************** function _getFontChar *****************
  6915 ;; Defined at:
  6916 ;;		line 117 in file "display1.h"
  6917 ;; Parameters:    Size  Location     Type
  6918 ;;  ch              1    0[COMRAM] unsigned char 
  6919 ;; Auto vars:     Size  Location     Type
  6920 ;;		None
  6921 ;; Return value:  Size  Location     Type
  6922 ;;                  1    wreg      unsigned char 
  6923 ;; Registers used:
  6924 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru
  6925 ;; Tracked objects:
  6926 ;;		On entry : 0/0
  6927 ;;		On exit  : 0/0
  6928 ;;		Unchanged: 0/0
  6929 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6930 ;;      Params:         1       0       0       0       0       0       0       0       0
  6931 ;;      Locals:         0       0       0       0       0       0       0       0       0
  6932 ;;      Temps:          2       0       0       0       0       0       0       0       0
  6933 ;;      Totals:         3       0       0       0       0       0       0       0       0
  6934 ;;Total ram usage:        3 bytes
  6935 ;; Hardware stack levels used:    1
  6936 ;; This function calls:
  6937 ;;		Nothing
  6938 ;; This function is called by:
  6939 ;;		_writeChar
  6940 ;; This function uses a non-reentrant model
  6941 ;;
  6942                           
  6943                           	psect	text27
  6944  00261C                     __ptext27:
  6945                           	opt stack 0
  6946  00261C                     _getFontChar:
  6947                           	opt stack 21
  6948                           
  6949                           ;display1.h: 118: switch (ch)
  6950                           
  6951                           ; BSR set to: 1
  6952                           ;incstack = 0
  6953                           ;incstack = 0
  6954  00261C  D01F               	goto	i2l5427
  6955  00261E                     i2l5389:
  6956                           
  6957                           ;display1.h: 121: return lcd_font[ch - '0'];
  6958  00261E  0ED0               	movlw	208
  6959  002620  D001               	goto	L9
  6960  002622                     i2l5393:
  6961                           
  6962                           ;display1.h: 123: return lcd_font[ch - ('0' + ('a' - 'A'))];
  6963  002622  0EB0               	movlw	176
  6964  002624                     L9:
  6965  002624  2401               	addwf	getFontChar@ch,w,c
  6966  002626  6E02               	movwf	??_getFontChar& (0+255),c
  6967  002628  6A03               	clrf	(??_getFontChar+1)& (0+255),c
  6968  00262A  0EFF               	movlw	255
  6969  00262C  2203               	addwfc	(??_getFontChar+1)& (0+255),f,c
  6970  00262E  0EBA               	movlw	low _lcd_font
  6971  002630  2402               	addwf	??_getFontChar,w,c
  6972  002632  6EF6               	movwf	tblptrl,c
  6973  002634  0E7E               	movlw	high _lcd_font
  6974  002636  2003               	addwfc	??_getFontChar+1,w,c
  6975  002638  6EF7               	movwf	tblptrh,c
  6976  00263A  0008               	tblrd		*
  6977  00263C  50F5               	movf	tablat,w,c
  6978  00263E  D0F4               	goto	i2l126
  6979  002640                     i2l5397:
  6980                           
  6981                           ;display1.h: 125: return 0b01000000;
  6982  002640  0E40               	movlw	64
  6983  002642  D0F2               	goto	i2l126
  6984  002644                     i2l5401:
  6985                           
  6986                           ;display1.h: 127: case ',':
  6987                           ;display1.h: 128: return 0b10000000;
  6988  002644  0E80               	movlw	128
  6989  002646  D0F0               	goto	i2l126
  6990  002648                     i2l5405:
  6991                           
  6992                           ;display1.h: 130: return 0b00000001 + 0b00001000 + 0b00010000 + 0b00100000;
  6993  002648  0E39               	movlw	57
  6994  00264A  D0EE               	goto	i2l126
  6995  00264C                     i2l5409:
  6996                           
  6997                           ;display1.h: 132: return 0b00000001 + 0b00000010 + 0b00000100 + 0b00001000;
  6998  00264C  0E0F               	movlw	15
  6999  00264E  D0EC               	goto	i2l126
  7000  002650                     i2l5413:
  7001                           
  7002                           ;display1.h: 134: return 0b00001000;
  7003  002650  0E08               	movlw	8
  7004  002652  D0EA               	goto	i2l126
  7005  002654                     i2l5417:
  7006                           
  7007                           ;display1.h: 136: return 0b00000001 + 0b00000010 + 0b00100000 + 0b01000000;
  7008  002654  0E63               	movlw	99
  7009  002656  D0E8               	goto	i2l126
  7010  002658                     i2l5421:
  7011                           
  7012                           ;display1.h: 138: return 0;
  7013  002658  0E00               	movlw	0
  7014  00265A  D0E6               	goto	i2l126
  7015  00265C                     i2l5427:
  7016  00265C  5001               	movf	getFontChar@ch,w,c
  7017                           
  7018                           ; Switch size 1, requested type "space"
  7019                           ; Number of cases is 76, Range of values is 42 to 122
  7020                           ; switch strategies available:
  7021                           ; Name         Instructions Cycles
  7022                           ; simple_byte          229   115 (average)
  7023                           ;	Chosen strategy is simple_byte
  7024  00265E  0A2A               	xorlw	42	; case 42
  7025  002660  B4D8               	btfsc	status,2,c
  7026  002662  D7F8               	goto	i2l5417
  7027  002664  0A06               	xorlw	6	; case 44
  7028  002666  B4D8               	btfsc	status,2,c
  7029  002668  D7ED               	goto	i2l5401
  7030  00266A  0A01               	xorlw	1	; case 45
  7031  00266C  B4D8               	btfsc	status,2,c
  7032  00266E  D7E8               	goto	i2l5397
  7033  002670  0A03               	xorlw	3	; case 46
  7034  002672  B4D8               	btfsc	status,2,c
  7035  002674  D7E7               	goto	i2l5401
  7036  002676  0A1E               	xorlw	30	; case 48
  7037  002678  B4D8               	btfsc	status,2,c
  7038  00267A  D7D1               	goto	i2l5389
  7039  00267C  0A01               	xorlw	1	; case 49
  7040  00267E  B4D8               	btfsc	status,2,c
  7041  002680  D7CE               	goto	i2l5389
  7042  002682  0A03               	xorlw	3	; case 50
  7043  002684  B4D8               	btfsc	status,2,c
  7044  002686  D7CB               	goto	i2l5389
  7045  002688  0A01               	xorlw	1	; case 51
  7046  00268A  B4D8               	btfsc	status,2,c
  7047  00268C  D7C8               	goto	i2l5389
  7048  00268E  0A07               	xorlw	7	; case 52
  7049  002690  B4D8               	btfsc	status,2,c
  7050  002692  D7C5               	goto	i2l5389
  7051  002694  0A01               	xorlw	1	; case 53
  7052  002696  B4D8               	btfsc	status,2,c
  7053  002698  D7C2               	goto	i2l5389
  7054  00269A  0A03               	xorlw	3	; case 54
  7055  00269C  B4D8               	btfsc	status,2,c
  7056  00269E  D7BF               	goto	i2l5389
  7057  0026A0  0A01               	xorlw	1	; case 55
  7058  0026A2  B4D8               	btfsc	status,2,c
  7059  0026A4  D7BC               	goto	i2l5389
  7060  0026A6  0A0F               	xorlw	15	; case 56
  7061  0026A8  B4D8               	btfsc	status,2,c
  7062  0026AA  D7B9               	goto	i2l5389
  7063  0026AC  0A01               	xorlw	1	; case 57
  7064  0026AE  B4D8               	btfsc	status,2,c
  7065  0026B0  D7B6               	goto	i2l5389
  7066  0026B2  0A03               	xorlw	3	; case 58
  7067  0026B4  B4D8               	btfsc	status,2,c
  7068  0026B6  D7B3               	goto	i2l5389
  7069  0026B8  0A01               	xorlw	1	; case 59
  7070  0026BA  B4D8               	btfsc	status,2,c
  7071  0026BC  D7B0               	goto	i2l5389
  7072  0026BE  0A07               	xorlw	7	; case 60
  7073  0026C0  B4D8               	btfsc	status,2,c
  7074  0026C2  D7AD               	goto	i2l5389
  7075  0026C4  0A01               	xorlw	1	; case 61
  7076  0026C6  B4D8               	btfsc	status,2,c
  7077  0026C8  D7AA               	goto	i2l5389
  7078  0026CA  0A03               	xorlw	3	; case 62
  7079  0026CC  B4D8               	btfsc	status,2,c
  7080  0026CE  D7A7               	goto	i2l5389
  7081  0026D0  0A01               	xorlw	1	; case 63
  7082  0026D2  B4D8               	btfsc	status,2,c
  7083  0026D4  D7A4               	goto	i2l5389
  7084  0026D6  0A7F               	xorlw	127	; case 64
  7085  0026D8  B4D8               	btfsc	status,2,c
  7086  0026DA  D7A1               	goto	i2l5389
  7087  0026DC  0A01               	xorlw	1	; case 65
  7088  0026DE  B4D8               	btfsc	status,2,c
  7089  0026E0  D79E               	goto	i2l5389
  7090  0026E2  0A03               	xorlw	3	; case 66
  7091  0026E4  B4D8               	btfsc	status,2,c
  7092  0026E6  D79B               	goto	i2l5389
  7093  0026E8  0A01               	xorlw	1	; case 67
  7094  0026EA  B4D8               	btfsc	status,2,c
  7095  0026EC  D798               	goto	i2l5389
  7096  0026EE  0A07               	xorlw	7	; case 68
  7097  0026F0  B4D8               	btfsc	status,2,c
  7098  0026F2  D795               	goto	i2l5389
  7099  0026F4  0A01               	xorlw	1	; case 69
  7100  0026F6  B4D8               	btfsc	status,2,c
  7101  0026F8  D792               	goto	i2l5389
  7102  0026FA  0A03               	xorlw	3	; case 70
  7103  0026FC  B4D8               	btfsc	status,2,c
  7104  0026FE  D78F               	goto	i2l5389
  7105  002700  0A01               	xorlw	1	; case 71
  7106  002702  B4D8               	btfsc	status,2,c
  7107  002704  D78C               	goto	i2l5389
  7108  002706  0A0F               	xorlw	15	; case 72
  7109  002708  B4D8               	btfsc	status,2,c
  7110  00270A  D789               	goto	i2l5389
  7111  00270C  0A01               	xorlw	1	; case 73
  7112  00270E  B4D8               	btfsc	status,2,c
  7113  002710  D786               	goto	i2l5389
  7114  002712  0A03               	xorlw	3	; case 74
  7115  002714  B4D8               	btfsc	status,2,c
  7116  002716  D783               	goto	i2l5389
  7117  002718  0A01               	xorlw	1	; case 75
  7118  00271A  B4D8               	btfsc	status,2,c
  7119  00271C  D780               	goto	i2l5389
  7120  00271E  0A07               	xorlw	7	; case 76
  7121  002720  B4D8               	btfsc	status,2,c
  7122  002722  D77D               	goto	i2l5389
  7123  002724  0A01               	xorlw	1	; case 77
  7124  002726  B4D8               	btfsc	status,2,c
  7125  002728  D77A               	goto	i2l5389
  7126  00272A  0A03               	xorlw	3	; case 78
  7127  00272C  B4D8               	btfsc	status,2,c
  7128  00272E  D777               	goto	i2l5389
  7129  002730  0A01               	xorlw	1	; case 79
  7130  002732  B4D8               	btfsc	status,2,c
  7131  002734  D774               	goto	i2l5389
  7132  002736  0A1F               	xorlw	31	; case 80
  7133  002738  B4D8               	btfsc	status,2,c
  7134  00273A  D771               	goto	i2l5389
  7135  00273C  0A01               	xorlw	1	; case 81
  7136  00273E  B4D8               	btfsc	status,2,c
  7137  002740  D76E               	goto	i2l5389
  7138  002742  0A03               	xorlw	3	; case 82
  7139  002744  B4D8               	btfsc	status,2,c
  7140  002746  D76B               	goto	i2l5389
  7141  002748  0A01               	xorlw	1	; case 83
  7142  00274A  B4D8               	btfsc	status,2,c
  7143  00274C  D768               	goto	i2l5389
  7144  00274E  0A07               	xorlw	7	; case 84
  7145  002750  B4D8               	btfsc	status,2,c
  7146  002752  D765               	goto	i2l5389
  7147  002754  0A01               	xorlw	1	; case 85
  7148  002756  B4D8               	btfsc	status,2,c
  7149  002758  D762               	goto	i2l5389
  7150  00275A  0A03               	xorlw	3	; case 86
  7151  00275C  B4D8               	btfsc	status,2,c
  7152  00275E  D75F               	goto	i2l5389
  7153  002760  0A01               	xorlw	1	; case 87
  7154  002762  B4D8               	btfsc	status,2,c
  7155  002764  D75C               	goto	i2l5389
  7156  002766  0A0F               	xorlw	15	; case 88
  7157  002768  B4D8               	btfsc	status,2,c
  7158  00276A  D759               	goto	i2l5389
  7159  00276C  0A01               	xorlw	1	; case 89
  7160  00276E  B4D8               	btfsc	status,2,c
  7161  002770  D756               	goto	i2l5389
  7162  002772  0A03               	xorlw	3	; case 90
  7163  002774  B4D8               	btfsc	status,2,c
  7164  002776  D753               	goto	i2l5389
  7165  002778  0A01               	xorlw	1	; case 91
  7166  00277A  B4D8               	btfsc	status,2,c
  7167  00277C  D765               	goto	i2l5405
  7168  00277E  0A06               	xorlw	6	; case 93
  7169  002780  B4D8               	btfsc	status,2,c
  7170  002782  D764               	goto	i2l5409
  7171  002784  0A02               	xorlw	2	; case 95
  7172  002786  B4D8               	btfsc	status,2,c
  7173  002788  D763               	goto	i2l5413
  7174  00278A  0A3E               	xorlw	62	; case 97
  7175  00278C  B4D8               	btfsc	status,2,c
  7176  00278E  D749               	goto	i2l5393
  7177  002790  0A03               	xorlw	3	; case 98
  7178  002792  B4D8               	btfsc	status,2,c
  7179  002794  D746               	goto	i2l5393
  7180  002796  0A01               	xorlw	1	; case 99
  7181  002798  B4D8               	btfsc	status,2,c
  7182  00279A  D743               	goto	i2l5393
  7183  00279C  0A07               	xorlw	7	; case 100
  7184  00279E  B4D8               	btfsc	status,2,c
  7185  0027A0  D740               	goto	i2l5393
  7186  0027A2  0A01               	xorlw	1	; case 101
  7187  0027A4  B4D8               	btfsc	status,2,c
  7188  0027A6  D73D               	goto	i2l5393
  7189  0027A8  0A03               	xorlw	3	; case 102
  7190  0027AA  B4D8               	btfsc	status,2,c
  7191  0027AC  D73A               	goto	i2l5393
  7192  0027AE  0A01               	xorlw	1	; case 103
  7193  0027B0  B4D8               	btfsc	status,2,c
  7194  0027B2  D737               	goto	i2l5393
  7195  0027B4  0A0F               	xorlw	15	; case 104
  7196  0027B6  B4D8               	btfsc	status,2,c
  7197  0027B8  D734               	goto	i2l5393
  7198  0027BA  0A01               	xorlw	1	; case 105
  7199  0027BC  B4D8               	btfsc	status,2,c
  7200  0027BE  D731               	goto	i2l5393
  7201  0027C0  0A03               	xorlw	3	; case 106
  7202  0027C2  B4D8               	btfsc	status,2,c
  7203  0027C4  D72E               	goto	i2l5393
  7204  0027C6  0A01               	xorlw	1	; case 107
  7205  0027C8  B4D8               	btfsc	status,2,c
  7206  0027CA  D72B               	goto	i2l5393
  7207  0027CC  0A07               	xorlw	7	; case 108
  7208  0027CE  B4D8               	btfsc	status,2,c
  7209  0027D0  D728               	goto	i2l5393
  7210  0027D2  0A01               	xorlw	1	; case 109
  7211  0027D4  B4D8               	btfsc	status,2,c
  7212  0027D6  D725               	goto	i2l5393
  7213  0027D8  0A03               	xorlw	3	; case 110
  7214  0027DA  B4D8               	btfsc	status,2,c
  7215  0027DC  D722               	goto	i2l5393
  7216  0027DE  0A01               	xorlw	1	; case 111
  7217  0027E0  B4D8               	btfsc	status,2,c
  7218  0027E2  D71F               	goto	i2l5393
  7219  0027E4  0A1F               	xorlw	31	; case 112
  7220  0027E6  B4D8               	btfsc	status,2,c
  7221  0027E8  D71C               	goto	i2l5393
  7222  0027EA  0A01               	xorlw	1	; case 113
  7223  0027EC  B4D8               	btfsc	status,2,c
  7224  0027EE  D719               	goto	i2l5393
  7225  0027F0  0A03               	xorlw	3	; case 114
  7226  0027F2  B4D8               	btfsc	status,2,c
  7227  0027F4  D716               	goto	i2l5393
  7228  0027F6  0A01               	xorlw	1	; case 115
  7229  0027F8  B4D8               	btfsc	status,2,c
  7230  0027FA  D713               	goto	i2l5393
  7231  0027FC  0A07               	xorlw	7	; case 116
  7232  0027FE  B4D8               	btfsc	status,2,c
  7233  002800  D710               	goto	i2l5393
  7234  002802  0A01               	xorlw	1	; case 117
  7235  002804  B4D8               	btfsc	status,2,c
  7236  002806  D70D               	goto	i2l5393
  7237  002808  0A03               	xorlw	3	; case 118
  7238  00280A  B4D8               	btfsc	status,2,c
  7239  00280C  D70A               	goto	i2l5393
  7240  00280E  0A01               	xorlw	1	; case 119
  7241  002810  B4D8               	btfsc	status,2,c
  7242  002812  D707               	goto	i2l5393
  7243  002814  0A0F               	xorlw	15	; case 120
  7244  002816  B4D8               	btfsc	status,2,c
  7245  002818  D704               	goto	i2l5393
  7246  00281A  0A01               	xorlw	1	; case 121
  7247  00281C  B4D8               	btfsc	status,2,c
  7248  00281E  D701               	goto	i2l5393
  7249  002820  0A03               	xorlw	3	; case 122
  7250  002822  B4D8               	btfsc	status,2,c
  7251  002824  D6FE               	goto	i2l5393
  7252  002826  D718               	goto	i2l5421
  7253  002828                     i2l126:
  7254  002828  0012               	return	
  7255  00282A                     __end_of_getFontChar:
  7256                           	opt stack 0
  7257                           tosu	equ	0xFFF
  7258                           tosh	equ	0xFFE
  7259                           tosl	equ	0xFFD
  7260                           pclatu	equ	0xFFB
  7261                           pclath	equ	0xFFA
  7262                           tblptru	equ	0xFF8
  7263                           tblptrh	equ	0xFF7
  7264                           tblptrl	equ	0xFF6
  7265                           tablat	equ	0xFF5
  7266                           prodh	equ	0xFF4
  7267                           prodl	equ	0xFF3
  7268                           intcon	equ	0xFF2
  7269                           intcon2	equ	0xFF1
  7270                           indf0	equ	0xFEF
  7271                           postinc0	equ	0xFEE
  7272                           fsr0h	equ	0xFEA
  7273                           fsr0l	equ	0xFE9
  7274                           wreg	equ	0xFE8
  7275                           postinc1	equ	0xFE6
  7276                           postdec1	equ	0xFE5
  7277                           fsr1h	equ	0xFE2
  7278                           fsr1l	equ	0xFE1
  7279                           indf2	equ	0xFDF
  7280                           postinc2	equ	0xFDE
  7281                           postdec2	equ	0xFDD
  7282                           plusw2	equ	0xFDB
  7283                           fsr2h	equ	0xFDA
  7284                           fsr2l	equ	0xFD9
  7285                           status	equ	0xFD8
  7286                           
  7287 ;; *************** function _sprintf *****************
  7288 ;; Defined at:
  7289 ;;		line 493 in file "/usr/opt/microchip/xc8/v1.20/sources/common/doprnt.c"
  7290 ;; Parameters:    Size  Location     Type
  7291 ;;  sp              2    0[BANK0 ] PTR unsigned char 
  7292 ;;		 -> printRTC@str(9), writeFloat@str(9), writeLong@str(9), 
  7293 ;;  f               2    2[BANK0 ] PTR const unsigned char 
  7294 ;;		 -> STR_30(10), STR_29(10), STR_28(12), STR_27(12), 
  7295 ;;		 -> STR_26(15), STR_25(15), STR_24(15), STR_23(14), 
  7296 ;;		 -> STR_22(14), STR_21(17), STR_20(16), STR_19(17), 
  7297 ;;		 -> STR_18(15), STR_17(13), STR_9(5), STR_8(5), 
  7298 ;; Auto vars:     Size  Location     Type
  7299 ;;  vd              2   19[BANK0 ] unsigned int 
  7300 ;;  vd              2   21[BANK0 ] unsigned int 
  7301 ;;  _val            4   40[BANK0 ] struct .
  7302 ;;  fval            3   32[BANK0 ] struct .
  7303 ;;  integ           3   23[BANK0 ] struct .
  7304 ;;  ival            3    0        struct .
  7305 ;;  prec            2   37[BANK0 ] int 
  7306 ;;  width           2   35[BANK0 ] int 
  7307 ;;  flag            2   30[BANK0 ] unsigned short 
  7308 ;;  exp             2   28[BANK0 ] int 
  7309 ;;  ap              2   26[BANK0 ] PTR void [1]
  7310 ;;		 -> ?_sprintf(2), 
  7311 ;;  c               1   39[BANK0 ] char 
  7312 ;;  d               1    0        unsigned char 
  7313 ;; Return value:  Size  Location     Type
  7314 ;;                  2    0[BANK0 ] int 
  7315 ;; Registers used:
  7316 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7317 ;; Tracked objects:
  7318 ;;		On entry : 0/0
  7319 ;;		On exit  : 0/0
  7320 ;;		Unchanged: 0/0
  7321 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7322 ;;      Params:         0      12       0       0       0       0       0       0       0
  7323 ;;      Locals:         0      32       0       0       0       0       0       0       0
  7324 ;;      Temps:          6       0       0       0       0       0       0       0       0
  7325 ;;      Totals:         6      44       0       0       0       0       0       0       0
  7326 ;;Total ram usage:       50 bytes
  7327 ;; Hardware stack levels used:    1
  7328 ;; Hardware stack levels required when called:    4
  7329 ;; This function calls:
  7330 ;;		_fround
  7331 ;;		_scale
  7332 ;;		_isdigit
  7333 ;;		__tdiv_to_l_
  7334 ;;		__div_to_l_
  7335 ;;		___asftadd
  7336 ;;		___asftmul
  7337 ;;		___ftmul
  7338 ;;		___asftsub
  7339 ;;		___awdiv
  7340 ;;		___ftge
  7341 ;;		___ftneg
  7342 ;;		___fttol
  7343 ;;		___lldiv
  7344 ;;		___llmod
  7345 ;;		___lltoft
  7346 ;;		___lwmod
  7347 ;;		___wmul
  7348 ;; This function is called by:
  7349 ;;		_writeFloat
  7350 ;;		_printRTC
  7351 ;;		_writeLong
  7352 ;; This function uses a non-reentrant model
  7353 ;;
  7354                           
  7355                           	psect	text28
  7356  00001C                     __ptext28:
  7357                           	opt stack 0
  7358  00001C                     _sprintf:
  7359                           	opt stack 19
  7360                           
  7361                           ;doprnt.c: 494: va_list ap;
  7362                           ;doprnt.c: 499: signed char c;
  7363                           ;doprnt.c: 501: int width;
  7364                           ;doprnt.c: 504: int prec;
  7365                           ;doprnt.c: 508: unsigned short flag;
  7366                           ;doprnt.c: 515: char d;
  7367                           ;doprnt.c: 516: double fval, integ;
  7368                           ;doprnt.c: 517: int exp;
  7369                           ;doprnt.c: 518: double ival;
  7370                           ;doprnt.c: 519: union {
  7371                           ;doprnt.c: 520: unsigned long _val;
  7372                           ;doprnt.c: 521: struct {
  7373                           ;doprnt.c: 522: const char * _cp;
  7374                           ;doprnt.c: 523: unsigned _len;
  7375                           ;doprnt.c: 524: } _str;
  7376                           ;doprnt.c: 525: } _val;
  7377                           ;doprnt.c: 542: *ap = __va_start();
  7378                           
  7379                           ;incstack = 0
  7380                           ;incstack = 0
  7381  00001C  0100               	movlb	0	; () banked
  7382  00001E  0E00               	movlw	high (?_sprintf+4)
  7383  000020  0100               	movlb	0	; () banked
  7384  000022  0100               	movlb	0	; () banked
  7385  000024  6F7B               	movwf	(sprintf@ap+1)& (0+255),b
  7386  000026  0100               	movlb	0	; () banked
  7387  000028  0E64               	movlw	low (?_sprintf+4)
  7388  00002A  0100               	movlb	0	; () banked
  7389  00002C  6F7A               	movwf	sprintf@ap& (0+255),b
  7390                           
  7391                           ;doprnt.c: 545: while(c = *f++) {
  7392  00002E  EFBE  F007         	goto	i2l6921
  7393  000032                     i2l6529:
  7394                           
  7395                           ; BSR set to: 0
  7396                           ;doprnt.c: 547: if(c != '%')
  7397  000032  0100               	movlb	0	; () banked
  7398  000034  0100               	movlb	0	; () banked
  7399  000036  5187               	movf	sprintf@c& (0+255),w,b
  7400  000038  0A25               	xorlw	37
  7401  00003A  B4D8               	btfsc	status,2,c
  7402  00003C  D00D               	goto	i2l6535
  7403                           
  7404                           ; BSR set to: 0
  7405                           ;doprnt.c: 549: {
  7406                           ;doprnt.c: 550: ((*sp++ = (c)));
  7407  00003E  C060  FFD9         	movff	sprintf@sp,fsr2l
  7408  000042  C061  FFDA         	movff	sprintf@sp+1,fsr2h
  7409  000046  0100               	movlb	0	; () banked
  7410  000048  C087  FFDF         	movff	sprintf@c,indf2
  7411                           
  7412                           ; BSR set to: 0
  7413  00004C  0100               	movlb	0	; () banked
  7414  00004E  0100               	movlb	0	; () banked
  7415  000050  4B60               	infsnz	sprintf@sp& (0+255),f,b
  7416  000052  2B61               	incf	(sprintf@sp+1)& (0+255),f,b
  7417                           
  7418                           ;doprnt.c: 551: continue;
  7419  000054  EFBE  F007         	goto	i2l6921
  7420  000058                     i2l6535:
  7421                           
  7422                           ; BSR set to: 0
  7423                           ;doprnt.c: 552: }
  7424                           ;doprnt.c: 555: width = 0;
  7425  000058  0E00               	movlw	0
  7426  00005A  0100               	movlb	0	; () banked
  7427  00005C  0100               	movlb	0	; () banked
  7428  00005E  6F84               	movwf	(sprintf@width+1)& (0+255),b
  7429  000060  0E00               	movlw	0
  7430  000062  0100               	movlb	0	; () banked
  7431  000064  6F83               	movwf	sprintf@width& (0+255),b
  7432                           
  7433                           ;doprnt.c: 557: flag = 0;
  7434  000066  0E00               	movlw	0
  7435  000068  0100               	movlb	0	; () banked
  7436  00006A  0100               	movlb	0	; () banked
  7437  00006C  6F7F               	movwf	(sprintf@flag+1)& (0+255),b
  7438  00006E  0E00               	movlw	0
  7439  000070  0100               	movlb	0	; () banked
  7440  000072  6F7E               	movwf	sprintf@flag& (0+255),b
  7441  000074  D007               	goto	i2l6541
  7442  000076                     i2l6537:
  7443                           
  7444                           ; BSR set to: 0
  7445                           ;doprnt.c: 589: flag |= 0x04;
  7446  000076  0100               	movlb	0	; () banked
  7447  000078  0100               	movlb	0	; () banked
  7448  00007A  857E               	bsf	sprintf@flag& (0+255),2,b
  7449                           
  7450                           ;doprnt.c: 590: f++;
  7451  00007C  0100               	movlb	0	; () banked
  7452  00007E  0100               	movlb	0	; () banked
  7453  000080  4B62               	infsnz	sprintf@f& (0+255),f,b
  7454  000082  2B63               	incf	(sprintf@f+1)& (0+255),f,b
  7455  000084                     i2l6541:
  7456                           
  7457                           ; BSR set to: 0
  7458  000084  0100               	movlb	0	; () banked
  7459  000086  C062  FFF6         	movff	sprintf@f,tblptrl
  7460  00008A  0100               	movlb	0	; () banked
  7461  00008C  C063  FFF7         	movff	sprintf@f+1,tblptrh
  7462  000090  0008               	tblrd		*
  7463  000092  50F5               	movf	tablat,w,c
  7464                           
  7465                           ; Switch size 1, requested type "space"
  7466                           ; Number of cases is 1, Range of values is 48 to 48
  7467                           ; switch strategies available:
  7468                           ; Name         Instructions Cycles
  7469                           ; simple_byte            4     3 (average)
  7470                           ;	Chosen strategy is simple_byte
  7471  000094  0A30               	xorlw	48	; case 48
  7472  000096  B4D8               	btfsc	status,2,c
  7473  000098  D7EE               	goto	i2l6537
  7474                           
  7475                           ; BSR set to: 0
  7476                           ;doprnt.c: 606: if(isdigit((unsigned)*f)) {
  7477                           
  7478                           ; BSR set to: 0
  7479                           
  7480                           ; BSR set to: 0
  7481                           ;doprnt.c: 595: }
  7482                           
  7483                           ; BSR set to: 0
  7484                           ;doprnt.c: 594: break;
  7485  00009A  0100               	movlb	0	; () banked
  7486  00009C  C062  FFF6         	movff	sprintf@f,tblptrl
  7487  0000A0  0100               	movlb	0	; () banked
  7488  0000A2  C063  FFF7         	movff	sprintf@f+1,tblptrh
  7489  0000A6  0008               	tblrd		*
  7490  0000A8  CFF5 F001          	movff	tablat,?_isdigit
  7491  0000AC  ECB6  F023         	call	_isdigit	;wreg free
  7492  0000B0  A0D8               	btfss	status,0,c
  7493  0000B2  D03E               	goto	i2l6555
  7494                           
  7495                           ;doprnt.c: 607: width = 0;
  7496  0000B4  0E00               	movlw	0
  7497  0000B6  0100               	movlb	0	; () banked
  7498  0000B8  0100               	movlb	0	; () banked
  7499  0000BA  6F84               	movwf	(sprintf@width+1)& (0+255),b
  7500  0000BC  0E00               	movlw	0
  7501  0000BE  0100               	movlb	0	; () banked
  7502  0000C0  6F83               	movwf	sprintf@width& (0+255),b
  7503  0000C2                     i2l6547:
  7504                           
  7505                           ;doprnt.c: 609: width *= 10;
  7506  0000C2  C083  F017         	movff	sprintf@width,?___wmul
  7507  0000C6  C084  F018         	movff	sprintf@width+1,?___wmul+1
  7508  0000CA  0E00               	movlw	0
  7509  0000CC  6E1A               	movwf	?___wmul+3,c
  7510  0000CE  0E0A               	movlw	10
  7511  0000D0  6E19               	movwf	?___wmul+2,c
  7512  0000D2  EC14  F023         	call	___wmul	;wreg free
  7513  0000D6  C017  F083         	movff	?___wmul,sprintf@width
  7514  0000DA  C018  F084         	movff	?___wmul+1,sprintf@width+1
  7515                           
  7516                           ;doprnt.c: 610: width += *f++ - '0';
  7517  0000DE  0100               	movlb	0	; () banked
  7518  0000E0  C062  FFF6         	movff	sprintf@f,tblptrl
  7519  0000E4  0100               	movlb	0	; () banked
  7520  0000E6  C063  FFF7         	movff	sprintf@f+1,tblptrh
  7521  0000EA  0008               	tblrd		*
  7522  0000EC  CFF5 F058          	movff	tablat,??_sprintf
  7523  0000F0  0ED0               	movlw	208
  7524  0000F2  2458               	addwf	??_sprintf,w,c
  7525  0000F4  6E59               	movwf	(??_sprintf+1)& (0+255),c
  7526  0000F6  6A5A               	clrf	(??_sprintf+2)& (0+255),c
  7527  0000F8  0EFF               	movlw	255
  7528  0000FA  225A               	addwfc	(??_sprintf+2)& (0+255),f,c
  7529  0000FC  5059               	movf	??_sprintf+1,w,c
  7530  0000FE  0100               	movlb	0	; () banked
  7531  000100  0100               	movlb	0	; () banked
  7532  000102  2783               	addwf	sprintf@width& (0+255),f,b
  7533  000104  505A               	movf	??_sprintf+2,w,c
  7534  000106  0100               	movlb	0	; () banked
  7535  000108  0100               	movlb	0	; () banked
  7536  00010A  2384               	addwfc	(sprintf@width+1)& (0+255),f,b
  7537                           
  7538                           ; BSR set to: 0
  7539  00010C  0100               	movlb	0	; () banked
  7540  00010E  0100               	movlb	0	; () banked
  7541  000110  4B62               	infsnz	sprintf@f& (0+255),f,b
  7542  000112  2B63               	incf	(sprintf@f+1)& (0+255),f,b
  7543                           
  7544                           ; BSR set to: 0
  7545                           ;doprnt.c: 611: } while(isdigit((unsigned)*f));
  7546  000114  0100               	movlb	0	; () banked
  7547  000116  C062  FFF6         	movff	sprintf@f,tblptrl
  7548  00011A  0100               	movlb	0	; () banked
  7549  00011C  C063  FFF7         	movff	sprintf@f+1,tblptrh
  7550  000120  0008               	tblrd		*
  7551  000122  CFF5 F001          	movff	tablat,?_isdigit
  7552  000126  ECB6  F023         	call	_isdigit	;wreg free
  7553  00012A  A0D8               	btfss	status,0,c
  7554  00012C  D021               	goto	i2l6563
  7555  00012E  D7C9               	goto	i2l6547
  7556  000130                     i2l6555:
  7557  000130  0100               	movlb	0	; () banked
  7558  000132  C062  FFF6         	movff	sprintf@f,tblptrl
  7559  000136  0100               	movlb	0	; () banked
  7560  000138  C063  FFF7         	movff	sprintf@f+1,tblptrh
  7561  00013C  0008               	tblrd		*
  7562  00013E  50F5               	movf	tablat,w,c
  7563  000140  0A2A               	xorlw	42
  7564  000142  A4D8               	btfss	status,2,c
  7565  000144  D015               	goto	i2l6563
  7566                           
  7567                           ; BSR set to: 0
  7568                           ;doprnt.c: 614: width = (*(int *)__va_arg((*(int **)ap), (int)0));
  7569  000146  C07A  FFD9         	movff	sprintf@ap,fsr2l
  7570  00014A  C07B  FFDA         	movff	sprintf@ap+1,fsr2h
  7571  00014E  0100               	movlb	0	; () banked
  7572  000150  CFDE F083          	movff	postinc2,sprintf@width
  7573  000154  0100               	movlb	0	; () banked
  7574  000156  CFDD F084          	movff	postdec2,sprintf@width+1
  7575                           
  7576                           ; BSR set to: 0
  7577  00015A  0E02               	movlw	2
  7578  00015C  0100               	movlb	0	; () banked
  7579  00015E  0100               	movlb	0	; () banked
  7580  000160  277A               	addwf	sprintf@ap& (0+255),f,b
  7581  000162  0E00               	movlw	0
  7582  000164  0100               	movlb	0	; () banked
  7583  000166  237B               	addwfc	(sprintf@ap+1)& (0+255),f,b
  7584                           
  7585                           ; BSR set to: 0
  7586                           ;doprnt.c: 615: f++;
  7587  000168  0100               	movlb	0	; () banked
  7588  00016A  0100               	movlb	0	; () banked
  7589  00016C  4B62               	infsnz	sprintf@f& (0+255),f,b
  7590  00016E  2B63               	incf	(sprintf@f+1)& (0+255),f,b
  7591  000170                     i2l6563:
  7592                           
  7593                           ;doprnt.c: 617: }
  7594                           ;doprnt.c: 620: if(*f == '.') {
  7595  000170  0100               	movlb	0	; () banked
  7596  000172  C062  FFF6         	movff	sprintf@f,tblptrl
  7597  000176  0100               	movlb	0	; () banked
  7598  000178  C063  FFF7         	movff	sprintf@f+1,tblptrh
  7599  00017C  0008               	tblrd		*
  7600  00017E  50F5               	movf	tablat,w,c
  7601  000180  0A2E               	xorlw	46
  7602  000182  A4D8               	btfss	status,2,c
  7603  000184  D060               	goto	i2l6583
  7604                           
  7605                           ; BSR set to: 0
  7606                           ;doprnt.c: 621: flag |= 0x4000;
  7607  000186  0100               	movlb	0	; () banked
  7608  000188  0100               	movlb	0	; () banked
  7609  00018A  8D7F               	bsf	(sprintf@flag+1)& (0+255),6,b
  7610                           
  7611                           ;doprnt.c: 622: f++;
  7612  00018C  0100               	movlb	0	; () banked
  7613  00018E  0100               	movlb	0	; () banked
  7614  000190  4B62               	infsnz	sprintf@f& (0+255),f,b
  7615  000192  2B63               	incf	(sprintf@f+1)& (0+255),f,b
  7616                           
  7617                           ; BSR set to: 0
  7618                           ;doprnt.c: 624: if(*f == '*') {
  7619  000194  0100               	movlb	0	; () banked
  7620  000196  C062  FFF6         	movff	sprintf@f,tblptrl
  7621  00019A  0100               	movlb	0	; () banked
  7622  00019C  C063  FFF7         	movff	sprintf@f+1,tblptrh
  7623  0001A0  0008               	tblrd		*
  7624  0001A2  50F5               	movf	tablat,w,c
  7625  0001A4  0A2A               	xorlw	42
  7626  0001A6  A4D8               	btfss	status,2,c
  7627  0001A8  D016               	goto	i2l6575
  7628                           
  7629                           ; BSR set to: 0
  7630                           ;doprnt.c: 625: prec = (*(int *)__va_arg((*(int **)ap), (int)0));
  7631  0001AA  C07A  FFD9         	movff	sprintf@ap,fsr2l
  7632  0001AE  C07B  FFDA         	movff	sprintf@ap+1,fsr2h
  7633  0001B2  0100               	movlb	0	; () banked
  7634  0001B4  CFDE F085          	movff	postinc2,sprintf@prec
  7635  0001B8  0100               	movlb	0	; () banked
  7636  0001BA  CFDD F086          	movff	postdec2,sprintf@prec+1
  7637                           
  7638                           ; BSR set to: 0
  7639  0001BE  0E02               	movlw	2
  7640  0001C0  0100               	movlb	0	; () banked
  7641  0001C2  0100               	movlb	0	; () banked
  7642  0001C4  277A               	addwf	sprintf@ap& (0+255),f,b
  7643  0001C6  0E00               	movlw	0
  7644  0001C8  0100               	movlb	0	; () banked
  7645  0001CA  237B               	addwfc	(sprintf@ap+1)& (0+255),f,b
  7646                           
  7647                           ; BSR set to: 0
  7648                           ;doprnt.c: 626: f++;
  7649  0001CC  0100               	movlb	0	; () banked
  7650  0001CE  0100               	movlb	0	; () banked
  7651  0001D0  4B62               	infsnz	sprintf@f& (0+255),f,b
  7652  0001D2  2B63               	incf	(sprintf@f+1)& (0+255),f,b
  7653                           
  7654                           ;doprnt.c: 627: } else
  7655  0001D4  D130               	goto	i2l6639
  7656  0001D6                     i2l6575:
  7657                           
  7658                           ; BSR set to: 0
  7659                           ;doprnt.c: 629: {
  7660                           ;doprnt.c: 630: prec = 0;
  7661  0001D6  0E00               	movlw	0
  7662  0001D8  0100               	movlb	0	; () banked
  7663  0001DA  0100               	movlb	0	; () banked
  7664  0001DC  6F86               	movwf	(sprintf@prec+1)& (0+255),b
  7665  0001DE  0E00               	movlw	0
  7666  0001E0  0100               	movlb	0	; () banked
  7667  0001E2  6F85               	movwf	sprintf@prec& (0+255),b
  7668                           
  7669                           ;doprnt.c: 631: while(isdigit((unsigned)*f))
  7670  0001E4  D022               	goto	i2l6581
  7671  0001E6                     i2l6577:
  7672                           
  7673                           ;doprnt.c: 632: prec = prec*10 + *f++ - '0';
  7674  0001E6  C085  F017         	movff	sprintf@prec,?___wmul
  7675  0001EA  C086  F018         	movff	sprintf@prec+1,?___wmul+1
  7676  0001EE  0E00               	movlw	0
  7677  0001F0  6E1A               	movwf	?___wmul+3,c
  7678  0001F2  0E0A               	movlw	10
  7679  0001F4  6E19               	movwf	?___wmul+2,c
  7680  0001F6  EC14  F023         	call	___wmul	;wreg free
  7681  0001FA  0100               	movlb	0	; () banked
  7682  0001FC  C062  FFF6         	movff	sprintf@f,tblptrl
  7683  000200  0100               	movlb	0	; () banked
  7684  000202  C063  FFF7         	movff	sprintf@f+1,tblptrh
  7685  000206  0008               	tblrd		*
  7686  000208  50F5               	movf	tablat,w,c
  7687  00020A  2617               	addwf	?___wmul,f,c
  7688  00020C  0E00               	movlw	0
  7689  00020E  2218               	addwfc	?___wmul+1,f,c
  7690  000210  0ED0               	movlw	208
  7691  000212  2417               	addwf	?___wmul,w,c
  7692  000214  0100               	movlb	0	; () banked
  7693  000216  0100               	movlb	0	; () banked
  7694  000218  6F85               	movwf	sprintf@prec& (0+255),b
  7695  00021A  0EFF               	movlw	255
  7696  00021C  2018               	addwfc	?___wmul+1,w,c
  7697  00021E  0100               	movlb	0	; () banked
  7698  000220  6F86               	movwf	(sprintf@prec+1)& (0+255),b
  7699                           
  7700                           ; BSR set to: 0
  7701  000222  0100               	movlb	0	; () banked
  7702  000224  0100               	movlb	0	; () banked
  7703  000226  4B62               	infsnz	sprintf@f& (0+255),f,b
  7704  000228  2B63               	incf	(sprintf@f+1)& (0+255),f,b
  7705  00022A                     i2l6581:
  7706                           
  7707                           ; BSR set to: 0
  7708  00022A  0100               	movlb	0	; () banked
  7709  00022C  C062  FFF6         	movff	sprintf@f,tblptrl
  7710  000230  0100               	movlb	0	; () banked
  7711  000232  C063  FFF7         	movff	sprintf@f+1,tblptrh
  7712  000236  0008               	tblrd		*
  7713  000238  CFF5 F001          	movff	tablat,?_isdigit
  7714  00023C  ECB6  F023         	call	_isdigit	;wreg free
  7715  000240  A0D8               	btfss	status,0,c
  7716  000242  D0F9               	goto	i2l6639
  7717  000244  D7D0               	goto	i2l6577
  7718  000246                     i2l6583:
  7719                           
  7720                           ;doprnt.c: 635: prec = 0;
  7721  000246  0E00               	movlw	0
  7722  000248  0100               	movlb	0	; () banked
  7723  00024A  0100               	movlb	0	; () banked
  7724  00024C  6F86               	movwf	(sprintf@prec+1)& (0+255),b
  7725  00024E  0E00               	movlw	0
  7726  000250  0100               	movlb	0	; () banked
  7727  000252  6F85               	movwf	sprintf@prec& (0+255),b
  7728                           
  7729                           ; BSR set to: 0
  7730                           ;doprnt.c: 637: flag |= 0x1000;
  7731  000254  0100               	movlb	0	; () banked
  7732  000256  0100               	movlb	0	; () banked
  7733  000258  897F               	bsf	(sprintf@flag+1)& (0+255),4,b
  7734  00025A  D0ED               	goto	i2l6639
  7735  00025C                     i2l6587:
  7736                           
  7737                           ; BSR set to: 0
  7738                           ;doprnt.c: 652: flag |= 0x10;
  7739  00025C  0100               	movlb	0	; () banked
  7740  00025E  0100               	movlb	0	; () banked
  7741  000260  897E               	bsf	sprintf@flag& (0+255),4,b
  7742                           
  7743                           ;doprnt.c: 653: goto loop;
  7744  000262  D0E9               	goto	i2l6639
  7745  000264                     i2l6589:
  7746                           
  7747                           ; BSR set to: 0
  7748                           ;doprnt.c: 672: flag |= 0x400;
  7749  000264  0100               	movlb	0	; () banked
  7750  000266  0100               	movlb	0	; () banked
  7751  000268  857F               	bsf	(sprintf@flag+1)& (0+255),2,b
  7752                           
  7753                           ;doprnt.c: 673: break;
  7754  00026A  D10C               	goto	i2l6641
  7755  00026C                     i2l6591:
  7756                           
  7757                           ; BSR set to: 0
  7758                           ;doprnt.c: 743: _val._str._cp = (*(const char * *)__va_arg((*(const char * **)ap), (cons
      +                          t char *)0));
  7759  00026C  C07A  FFD9         	movff	sprintf@ap,fsr2l
  7760  000270  C07B  FFDA         	movff	sprintf@ap+1,fsr2h
  7761  000274  0100               	movlb	0	; () banked
  7762  000276  CFDE F088          	movff	postinc2,sprintf@_val
  7763  00027A  0100               	movlb	0	; () banked
  7764  00027C  CFDD F089          	movff	postdec2,sprintf@_val+1
  7765                           
  7766                           ; BSR set to: 0
  7767  000280  0E02               	movlw	2
  7768  000282  0100               	movlb	0	; () banked
  7769  000284  0100               	movlb	0	; () banked
  7770  000286  277A               	addwf	sprintf@ap& (0+255),f,b
  7771  000288  0E00               	movlw	0
  7772  00028A  0100               	movlb	0	; () banked
  7773  00028C  237B               	addwfc	(sprintf@ap+1)& (0+255),f,b
  7774                           
  7775                           ; BSR set to: 0
  7776                           ;doprnt.c: 749: if(!_val._str._cp)
  7777  00028E  0100               	movlb	0	; () banked
  7778  000290  0100               	movlb	0	; () banked
  7779  000292  5189               	movf	(sprintf@_val+1)& (0+255),w,b
  7780  000294  1188               	iorwf	sprintf@_val& (0+255),w,b
  7781  000296  A4D8               	btfss	status,2,c
  7782  000298  D007               	goto	i2l592
  7783                           
  7784                           ; BSR set to: 0
  7785                           ;doprnt.c: 750: _val._str._cp = "(null)";
  7786  00029A  0E7F               	movlw	high STR_53
  7787  00029C  0100               	movlb	0	; () banked
  7788  00029E  0100               	movlb	0	; () banked
  7789  0002A0  6F89               	movwf	(sprintf@_val+1)& (0+255),b
  7790  0002A2  0ECE               	movlw	low STR_53
  7791  0002A4  0100               	movlb	0	; () banked
  7792  0002A6  6F88               	movwf	sprintf@_val& (0+255),b
  7793  0002A8                     i2l592:
  7794                           
  7795                           ; BSR set to: 0
  7796                           ;doprnt.c: 754: _val._str._len = 0;
  7797  0002A8  0E00               	movlw	0
  7798  0002AA  0100               	movlb	0	; () banked
  7799  0002AC  0100               	movlb	0	; () banked
  7800  0002AE  6F8B               	movwf	(sprintf@_val+3)& (0+255),b
  7801  0002B0  0E00               	movlw	0
  7802  0002B2  0100               	movlb	0	; () banked
  7803  0002B4  6F8A               	movwf	(sprintf@_val+2)& (0+255),b
  7804                           
  7805                           ;doprnt.c: 755: while(_val._str._cp[_val._str._len])
  7806  0002B6  D004               	goto	i2l6601
  7807  0002B8                     i2l6599:
  7808                           
  7809                           ;doprnt.c: 756: _val._str._len++;
  7810  0002B8  0100               	movlb	0	; () banked
  7811  0002BA  0100               	movlb	0	; () banked
  7812  0002BC  4B8A               	infsnz	(sprintf@_val+2)& (0+255),f,b
  7813  0002BE  2B8B               	incf	(sprintf@_val+3)& (0+255),f,b
  7814  0002C0                     i2l6601:
  7815                           
  7816                           ; BSR set to: 0
  7817  0002C0  0100               	movlb	0	; () banked
  7818  0002C2  C088  F058         	movff	sprintf@_val,??_sprintf
  7819  0002C6  0100               	movlb	0	; () banked
  7820  0002C8  C089  F059         	movff	sprintf@_val+1,??_sprintf+1
  7821  0002CC  0100               	movlb	0	; () banked
  7822  0002CE  0100               	movlb	0	; () banked
  7823  0002D0  518A               	movf	(sprintf@_val+2)& (0+255),w,b
  7824  0002D2  2658               	addwf	??_sprintf,f,c
  7825  0002D4  0100               	movlb	0	; () banked
  7826  0002D6  0100               	movlb	0	; () banked
  7827  0002D8  518B               	movf	(sprintf@_val+3)& (0+255),w,b
  7828  0002DA  2259               	addwfc	??_sprintf+1,f,c
  7829  0002DC  5058               	movf	??_sprintf,w,c
  7830  0002DE  6EF6               	movwf	tblptrl,c
  7831  0002E0  6EE9               	movwf	fsr0l,c
  7832  0002E2  0E07               	movlw	(high __ramtop+-1)
  7833  0002E4  6EEA               	movwf	fsr0h,c
  7834  0002E6  5059               	movf	??_sprintf+1,w,c
  7835  0002E8  64EA               	cpfsgt	fsr0h,c
  7836  0002EA  D003               	bra	i2u477_47
  7837  0002EC  6EEA               	movwf	fsr0h,c
  7838  0002EE  50EF               	movf	indf0,w,c
  7839  0002F0  D003               	bra	i2u477_40
  7840  0002F2                     i2u477_47:
  7841  0002F2  6EF7               	movwf	tblptrh,c
  7842  0002F4  0008               	tblrd		*
  7843  0002F6  50F5               	movf	tablat,w,c
  7844  0002F8                     i2u477_40:
  7845  0002F8  0900               	iorlw	0
  7846  0002FA  A4D8               	btfss	status,2,c
  7847  0002FC  D7DD               	goto	i2l6599
  7848  0002FE                     i2l6603:
  7849                           
  7850                           ;doprnt.c: 762: if(prec && prec < _val._str._len)
  7851  0002FE  0100               	movlb	0	; () banked
  7852  000300  0100               	movlb	0	; () banked
  7853  000302  5186               	movf	(sprintf@prec+1)& (0+255),w,b
  7854  000304  1185               	iorwf	sprintf@prec& (0+255),w,b
  7855  000306  B4D8               	btfsc	status,2,c
  7856  000308  D012               	goto	i2l6609
  7857                           
  7858                           ; BSR set to: 0
  7859  00030A  0100               	movlb	0	; () banked
  7860  00030C  0100               	movlb	0	; () banked
  7861  00030E  518A               	movf	(sprintf@_val+2)& (0+255),w,b
  7862  000310  0100               	movlb	0	; () banked
  7863  000312  0100               	movlb	0	; () banked
  7864  000314  5D85               	subwf	sprintf@prec& (0+255),w,b
  7865  000316  0100               	movlb	0	; () banked
  7866  000318  0100               	movlb	0	; () banked
  7867  00031A  518B               	movf	(sprintf@_val+3)& (0+255),w,b
  7868  00031C  0100               	movlb	0	; () banked
  7869  00031E  0100               	movlb	0	; () banked
  7870  000320  5986               	subwfb	(sprintf@prec+1)& (0+255),w,b
  7871  000322  B0D8               	btfsc	status,0,c
  7872  000324  D004               	goto	i2l6609
  7873                           
  7874                           ; BSR set to: 0
  7875                           ;doprnt.c: 763: _val._str._len = prec;
  7876  000326  C085  F08A         	movff	sprintf@prec,sprintf@_val+2
  7877  00032A  C086  F08B         	movff	sprintf@prec+1,sprintf@_val+3
  7878  00032E                     i2l6609:
  7879                           
  7880                           ; BSR set to: 0
  7881                           ;doprnt.c: 766: if(width > _val._str._len)
  7882  00032E  0100               	movlb	0	; () banked
  7883  000330  0100               	movlb	0	; () banked
  7884  000332  5183               	movf	sprintf@width& (0+255),w,b
  7885  000334  0100               	movlb	0	; () banked
  7886  000336  0100               	movlb	0	; () banked
  7887  000338  5D8A               	subwf	(sprintf@_val+2)& (0+255),w,b
  7888  00033A  0100               	movlb	0	; () banked
  7889  00033C  0100               	movlb	0	; () banked
  7890  00033E  5184               	movf	(sprintf@width+1)& (0+255),w,b
  7891  000340  0100               	movlb	0	; () banked
  7892  000342  0100               	movlb	0	; () banked
  7893  000344  598B               	subwfb	(sprintf@_val+3)& (0+255),w,b
  7894  000346  B0D8               	btfsc	status,0,c
  7895  000348  D00C               	goto	i2l6613
  7896                           
  7897                           ; BSR set to: 0
  7898                           ;doprnt.c: 767: width -= _val._str._len;
  7899  00034A  0100               	movlb	0	; () banked
  7900  00034C  EE20  F08A         	lfsr	2,sprintf@_val+2
  7901  000350  50DE               	movf	postinc2,w,c
  7902  000352  0100               	movlb	0	; () banked
  7903  000354  0100               	movlb	0	; () banked
  7904  000356  5F83               	subwf	sprintf@width& (0+255),f,b
  7905  000358  50DD               	movf	postdec2,w,c
  7906  00035A  0100               	movlb	0	; () banked
  7907  00035C  0100               	movlb	0	; () banked
  7908  00035E  5B84               	subwfb	(sprintf@width+1)& (0+255),f,b
  7909  000360  D012               	goto	i2l6619
  7910  000362                     i2l6613:
  7911                           
  7912                           ; BSR set to: 0
  7913                           ;doprnt.c: 768: else
  7914                           ;doprnt.c: 769: width = 0;
  7915  000362  0E00               	movlw	0
  7916  000364  0100               	movlb	0	; () banked
  7917  000366  0100               	movlb	0	; () banked
  7918  000368  6F84               	movwf	(sprintf@width+1)& (0+255),b
  7919  00036A  0E00               	movlw	0
  7920  00036C  0100               	movlb	0	; () banked
  7921  00036E  6F83               	movwf	sprintf@width& (0+255),b
  7922  000370  D00A               	goto	i2l6619
  7923  000372                     i2l6615:
  7924                           
  7925                           ; BSR set to: 0
  7926                           ;doprnt.c: 774: ((*sp++ = (' ')));
  7927  000372  C060  FFD9         	movff	sprintf@sp,fsr2l
  7928  000376  C061  FFDA         	movff	sprintf@sp+1,fsr2h
  7929  00037A  0E20               	movlw	32
  7930  00037C  6EDF               	movwf	indf2,c
  7931                           
  7932                           ; BSR set to: 0
  7933  00037E  0100               	movlb	0	; () banked
  7934  000380  0100               	movlb	0	; () banked
  7935  000382  4B60               	infsnz	sprintf@sp& (0+255),f,b
  7936  000384  2B61               	incf	(sprintf@sp+1)& (0+255),f,b
  7937  000386                     i2l6619:
  7938                           
  7939                           ; BSR set to: 0
  7940  000386  0100               	movlb	0	; () banked
  7941  000388  0100               	movlb	0	; () banked
  7942  00038A  0783               	decf	sprintf@width& (0+255),f,b
  7943  00038C  A0D8               	btfss	status,0,c
  7944  00038E  0784               	decf	(sprintf@width+1)& (0+255),f,b
  7945  000390  0100               	movlb	0	; () banked
  7946  000392  2983               	incf	sprintf@width& (0+255),w,b
  7947  000394  B4D8               	btfsc	status,2,c
  7948  000396  2984               	incf	(sprintf@width+1)& (0+255),w,b
  7949  000398  B4D8               	btfsc	status,2,c
  7950  00039A  D020               	goto	i2l6627
  7951  00039C  D7EA               	goto	i2l6615
  7952  00039E                     i2l6621:
  7953                           
  7954                           ; BSR set to: 0
  7955                           ;doprnt.c: 777: ((*sp++ = (*_val._str._cp++)));
  7956  00039E  0100               	movlb	0	; () banked
  7957  0003A0  C088  FFF6         	movff	sprintf@_val,tblptrl
  7958  0003A4  0100               	movlb	0	; () banked
  7959  0003A6  C089  FFF7         	movff	sprintf@_val+1,tblptrh
  7960  0003AA  6AF8               	clrf	tblptru,c
  7961  0003AC  C060  FFD9         	movff	sprintf@sp,fsr2l
  7962  0003B0  C061  FFDA         	movff	sprintf@sp+1,fsr2h
  7963  0003B4  0E07               	movlw	(high __ramtop+-1)
  7964  0003B6  64F7               	cpfsgt	tblptrh,c
  7965  0003B8  D003               	bra	i2u483_47
  7966  0003BA  0008               	tblrd		*
  7967  0003BC  50F5               	movf	tablat,w,c
  7968  0003BE  D005               	bra	i2u483_40
  7969  0003C0                     i2u483_47:
  7970  0003C0  CFF6 FFE9          	movff	tblptrl,fsr0l
  7971  0003C4  CFF7 FFEA          	movff	tblptrh,fsr0h
  7972  0003C8  50EF               	movf	indf0,w,c
  7973  0003CA                     i2u483_40:
  7974  0003CA  6EDF               	movwf	indf2,c
  7975  0003CC  0100               	movlb	0	; () banked
  7976  0003CE  0100               	movlb	0	; () banked
  7977  0003D0  4B88               	infsnz	sprintf@_val& (0+255),f,b
  7978  0003D2  2B89               	incf	(sprintf@_val+1)& (0+255),f,b
  7979                           
  7980                           ; BSR set to: 0
  7981  0003D4  0100               	movlb	0	; () banked
  7982  0003D6  0100               	movlb	0	; () banked
  7983  0003D8  4B60               	infsnz	sprintf@sp& (0+255),f,b
  7984  0003DA  2B61               	incf	(sprintf@sp+1)& (0+255),f,b
  7985  0003DC                     i2l6627:
  7986                           
  7987                           ; BSR set to: 0
  7988  0003DC  0100               	movlb	0	; () banked
  7989  0003DE  0100               	movlb	0	; () banked
  7990  0003E0  078A               	decf	(sprintf@_val+2)& (0+255),f,b
  7991  0003E2  A0D8               	btfss	status,0,c
  7992  0003E4  078B               	decf	(sprintf@_val+3)& (0+255),f,b
  7993  0003E6  0100               	movlb	0	; () banked
  7994  0003E8  298A               	incf	(sprintf@_val+2)& (0+255),w,b
  7995  0003EA  B4D8               	btfsc	status,2,c
  7996  0003EC  298B               	incf	(sprintf@_val+3)& (0+255),w,b
  7997  0003EE  B4D8               	btfsc	status,2,c
  7998  0003F0  EFBE  F007         	goto	i2l6921
  7999  0003F4  D7D4               	goto	i2l6621
  8000  0003F6                     i2l6629:
  8001                           
  8002                           ; BSR set to: 0
  8003                           ;doprnt.c: 808: c = (*(int *)__va_arg((*(int **)ap), (int)0));
  8004  0003F6  C07A  FFD9         	movff	sprintf@ap,fsr2l
  8005  0003FA  C07B  FFDA         	movff	sprintf@ap+1,fsr2h
  8006  0003FE  50DF               	movf	indf2,w,c
  8007  000400  0100               	movlb	0	; () banked
  8008  000402  0100               	movlb	0	; () banked
  8009  000404  6F87               	movwf	sprintf@c& (0+255),b
  8010                           
  8011                           ; BSR set to: 0
  8012  000406  0E02               	movlw	2
  8013  000408  0100               	movlb	0	; () banked
  8014  00040A  0100               	movlb	0	; () banked
  8015  00040C  277A               	addwf	sprintf@ap& (0+255),f,b
  8016  00040E  0E00               	movlw	0
  8017  000410  0100               	movlb	0	; () banked
  8018  000412  237B               	addwfc	(sprintf@ap+1)& (0+255),f,b
  8019  000414                     i2l6633:
  8020                           
  8021                           ; BSR set to: 0
  8022                           ;doprnt.c: 814: _val._str._cp = (char *)&c;
  8023  000414  0100               	movlb	0	; () banked
  8024  000416  0E00               	movlw	high sprintf@c
  8025  000418  0100               	movlb	0	; () banked
  8026  00041A  0100               	movlb	0	; () banked
  8027  00041C  6F89               	movwf	(sprintf@_val+1)& (0+255),b
  8028  00041E  0100               	movlb	0	; () banked
  8029  000420  0E87               	movlw	low sprintf@c
  8030  000422  0100               	movlb	0	; () banked
  8031  000424  6F88               	movwf	sprintf@_val& (0+255),b
  8032                           
  8033                           ; BSR set to: 0
  8034                           ;doprnt.c: 815: _val._str._len = 1;
  8035  000426  0E00               	movlw	0
  8036  000428  0100               	movlb	0	; () banked
  8037  00042A  0100               	movlb	0	; () banked
  8038  00042C  6F8B               	movwf	(sprintf@_val+3)& (0+255),b
  8039  00042E  0E01               	movlw	1
  8040  000430  0100               	movlb	0	; () banked
  8041  000432  6F8A               	movwf	(sprintf@_val+2)& (0+255),b
  8042                           
  8043                           ;doprnt.c: 816: goto dostring;
  8044  000434  D764               	goto	i2l6603
  8045  000436                     i2l6639:
  8046  000436  0100               	movlb	0	; () banked
  8047  000438  C062  FFF6         	movff	sprintf@f,tblptrl
  8048  00043C  0100               	movlb	0	; () banked
  8049  00043E  C063  FFF7         	movff	sprintf@f+1,tblptrh
  8050  000442  0100               	movlb	0	; () banked
  8051  000444  0100               	movlb	0	; () banked
  8052  000446  4B62               	infsnz	sprintf@f& (0+255),f,b
  8053  000448  2B63               	incf	(sprintf@f+1)& (0+255),f,b
  8054  00044A  0008               	tblrd		*
  8055  00044C  0100               	movlb	0	; () banked
  8056  00044E  CFF5 F087          	movff	tablat,sprintf@c
  8057  000452  0100               	movlb	0	; () banked
  8058  000454  5187               	movf	sprintf@c& (0+255),w,b
  8059                           
  8060                           ; Switch size 1, requested type "space"
  8061                           ; Number of cases is 7, Range of values is 0 to 115
  8062                           ; switch strategies available:
  8063                           ; Name         Instructions Cycles
  8064                           ; simple_byte           22    12 (average)
  8065                           ;	Chosen strategy is simple_byte
  8066  000456  0A00               	xorlw	0	; case 0
  8067  000458  B4D8               	btfsc	status,2,c
  8068  00045A  EFD0  F007         	goto	i2l6923
  8069  00045E  0A63               	xorlw	99	; case 99
  8070  000460  B4D8               	btfsc	status,2,c
  8071  000462  D7C9               	goto	i2l6629
  8072  000464  0A07               	xorlw	7	; case 100
  8073  000466  B4D8               	btfsc	status,2,c
  8074  000468  D00D               	goto	i2l6641
  8075  00046A  0A02               	xorlw	2	; case 102
  8076  00046C  B4D8               	btfsc	status,2,c
  8077  00046E  D6FA               	goto	i2l6589
  8078  000470  0A0F               	xorlw	15	; case 105
  8079  000472  B4D8               	btfsc	status,2,c
  8080  000474  D007               	goto	i2l6641
  8081  000476  0A05               	xorlw	5	; case 108
  8082  000478  B4D8               	btfsc	status,2,c
  8083  00047A  D6F0               	goto	i2l6587
  8084  00047C  0A1F               	xorlw	31	; case 115
  8085  00047E  B4D8               	btfsc	status,2,c
  8086  000480  D6F5               	goto	i2l6591
  8087  000482  D7C8               	goto	i2l6633
  8088  000484                     i2l6641:
  8089                           
  8090                           ; BSR set to: 0
  8091                           ;doprnt.c: 834: if(flag & (0x700)) {
  8092  000484  0E07               	movlw	7
  8093  000486  0100               	movlb	0	; () banked
  8094  000488  0100               	movlb	0	; () banked
  8095  00048A  157F               	andwf	(sprintf@flag+1)& (0+255),w,b
  8096  00048C  B4D8               	btfsc	status,2,c
  8097  00048E  D39A               	goto	i2l608
  8098                           
  8099                           ; BSR set to: 0
  8100                           ;doprnt.c: 836: if(flag & 0x1000)
  8101  000490  0100               	movlb	0	; () banked
  8102  000492  0100               	movlb	0	; () banked
  8103  000494  A97F               	btfss	(sprintf@flag+1)& (0+255),4,b
  8104  000496  D007               	goto	i2l6647
  8105                           
  8106                           ; BSR set to: 0
  8107                           ;doprnt.c: 838: prec = 6;
  8108  000498  0E00               	movlw	0
  8109  00049A  0100               	movlb	0	; () banked
  8110  00049C  0100               	movlb	0	; () banked
  8111  00049E  6F86               	movwf	(sprintf@prec+1)& (0+255),b
  8112  0004A0  0E06               	movlw	6
  8113  0004A2  0100               	movlb	0	; () banked
  8114  0004A4  6F85               	movwf	sprintf@prec& (0+255),b
  8115  0004A6                     i2l6647:
  8116                           
  8117                           ; BSR set to: 0
  8118                           ;doprnt.c: 839: fval = (*(double *)__va_arg((*(double **)ap), (double)0));
  8119  0004A6  C07A  FFD9         	movff	sprintf@ap,fsr2l
  8120  0004AA  C07B  FFDA         	movff	sprintf@ap+1,fsr2h
  8121  0004AE  0100               	movlb	0	; () banked
  8122  0004B0  CFDE F080          	movff	postinc2,sprintf@fval
  8123  0004B4  0100               	movlb	0	; () banked
  8124  0004B6  CFDE F081          	movff	postinc2,sprintf@fval+1
  8125  0004BA  0100               	movlb	0	; () banked
  8126  0004BC  CFDD F082          	movff	postdec2,sprintf@fval+2
  8127                           
  8128                           ; BSR set to: 0
  8129  0004C0  0E03               	movlw	3
  8130  0004C2  0100               	movlb	0	; () banked
  8131  0004C4  0100               	movlb	0	; () banked
  8132  0004C6  277A               	addwf	sprintf@ap& (0+255),f,b
  8133  0004C8  0E00               	movlw	0
  8134  0004CA  0100               	movlb	0	; () banked
  8135  0004CC  237B               	addwfc	(sprintf@ap+1)& (0+255),f,b
  8136                           
  8137                           ; BSR set to: 0
  8138                           ;doprnt.c: 840: if(fval < 0.0) {
  8139  0004CE  0100               	movlb	0	; () banked
  8140  0004D0  0100               	movlb	0	; () banked
  8141  0004D2  5182               	movf	(sprintf@fval+2)& (0+255),w,b
  8142  0004D4  0A80               	xorlw	128
  8143  0004D6  0F80               	addlw	128
  8144  0004D8  E107               	bnz	i2u487_45
  8145  0004DA  0E00               	movlw	0
  8146  0004DC  0100               	movlb	0	; () banked
  8147  0004DE  5D81               	subwf	(sprintf@fval+1)& (0+255),w,b
  8148  0004E0  E103               	bnz	i2u487_45
  8149  0004E2  0E00               	movlw	0
  8150  0004E4  0100               	movlb	0	; () banked
  8151  0004E6  5D80               	subwf	sprintf@fval& (0+255),w,b
  8152  0004E8                     i2u487_45:
  8153  0004E8  B0D8               	btfsc	status,0,c
  8154  0004EA  D012               	goto	i2l6657
  8155                           
  8156                           ; BSR set to: 0
  8157                           ;doprnt.c: 841: fval = -fval;
  8158  0004EC  C080  F001         	movff	sprintf@fval,?___ftneg
  8159  0004F0  C081  F002         	movff	sprintf@fval+1,?___ftneg+1
  8160  0004F4  C082  F003         	movff	sprintf@fval+2,?___ftneg+2
  8161  0004F8  ECA3  F023         	call	___ftneg	;wreg free
  8162  0004FC  C003  F082         	movff	?___ftneg+2,sprintf@fval+2
  8163  000500  C002  F081         	movff	?___ftneg+1,sprintf@fval+1
  8164  000504  C001  F080         	movff	?___ftneg,sprintf@fval
  8165                           
  8166                           ;doprnt.c: 842: flag |= 0x03;
  8167  000508  0E03               	movlw	3
  8168  00050A  0100               	movlb	0	; () banked
  8169  00050C  0100               	movlb	0	; () banked
  8170  00050E  137E               	iorwf	sprintf@flag& (0+255),f,b
  8171  000510                     i2l6657:
  8172                           
  8173                           ; BSR set to: 0
  8174                           ;doprnt.c: 843: }
  8175                           ;doprnt.c: 844: exp = 0;
  8176  000510  0E00               	movlw	0
  8177  000512  0100               	movlb	0	; () banked
  8178  000514  0100               	movlb	0	; () banked
  8179  000516  6F7D               	movwf	(sprintf@exp+1)& (0+255),b
  8180  000518  0E00               	movlw	0
  8181  00051A  0100               	movlb	0	; () banked
  8182  00051C  6F7C               	movwf	sprintf@exp& (0+255),b
  8183                           
  8184                           ; BSR set to: 0
  8185                           ;doprnt.c: 845: if( fval!=0) {
  8186  00051E  0E7F               	movlw	127
  8187  000520  0100               	movlb	0	; () banked
  8188  000522  0100               	movlb	0	; () banked
  8189  000524  1582               	andwf	(sprintf@fval+2)& (0+255),w,b
  8190  000526  0100               	movlb	0	; () banked
  8191  000528  1181               	iorwf	(sprintf@fval+1)& (0+255),w,b
  8192  00052A  0100               	movlb	0	; () banked
  8193  00052C  1180               	iorwf	sprintf@fval& (0+255),w,b
  8194  00052E  B4D8               	btfsc	status,2,c
  8195  000530  D091               	goto	i2l6685
  8196                           
  8197                           ; BSR set to: 0
  8198                           ;doprnt.c: 846: (void)(*(&exp) = ((*(unsigned long *)&fval >> 15) & 255) - 126);
  8199  000532  0E82               	movlw	130
  8200  000534  6E58               	movwf	??_sprintf& (0+255),c
  8201  000536  0EFF               	movlw	255
  8202  000538  6E59               	movwf	(??_sprintf+1)& (0+255),c
  8203  00053A  0100               	movlb	0	; () banked
  8204  00053C  C080  F05A         	movff	sprintf@fval,??_sprintf+2
  8205  000540  0100               	movlb	0	; () banked
  8206  000542  C081  F05B         	movff	sprintf@fval+1,??_sprintf+3
  8207  000546  0100               	movlb	0	; () banked
  8208  000548  C082  F05C         	movff	sprintf@fval+2,??_sprintf+4
  8209  00054C  0100               	movlb	0	; () banked
  8210  00054E  C083  F05D         	movff	sprintf@fval+3,??_sprintf+5
  8211  000552  0E10               	movlw	16
  8212  000554  D005               	goto	i2u489_40
  8213  000556                     i2u489_45:
  8214  000556  90D8               	bcf	status,0,c
  8215  000558  325D               	rrcf	??_sprintf+5,f,c
  8216  00055A  325C               	rrcf	??_sprintf+4,f,c
  8217  00055C  325B               	rrcf	??_sprintf+3,f,c
  8218  00055E  325A               	rrcf	??_sprintf+2,f,c
  8219  000560                     i2u489_40:
  8220  000560  2EE8               	decfsz	wreg,f,c
  8221  000562  D7F9               	goto	i2u489_45
  8222  000564  505A               	movf	??_sprintf+2,w,c
  8223  000566  2458               	addwf	??_sprintf,w,c
  8224  000568  0100               	movlb	0	; () banked
  8225  00056A  0100               	movlb	0	; () banked
  8226  00056C  6F7C               	movwf	sprintf@exp& (0+255),b
  8227  00056E  0100               	movlb	0	; () banked
  8228  000570  0E00               	movlw	0
  8229  000572  2059               	addwfc	??_sprintf+1,w,c
  8230  000574  6F7D               	movwf	(sprintf@exp+1)& (0+255),b
  8231                           
  8232                           ; BSR set to: 0
  8233                           ;doprnt.c: 847: exp--;
  8234  000576  0100               	movlb	0	; () banked
  8235  000578  0100               	movlb	0	; () banked
  8236  00057A  077C               	decf	sprintf@exp& (0+255),f,b
  8237  00057C  A0D8               	btfss	status,0,c
  8238  00057E  077D               	decf	(sprintf@exp+1)& (0+255),f,b
  8239                           
  8240                           ; BSR set to: 0
  8241                           ;doprnt.c: 848: exp *= 3;
  8242  000580  C07C  F017         	movff	sprintf@exp,?___wmul
  8243  000584  C07D  F018         	movff	sprintf@exp+1,?___wmul+1
  8244  000588  0E00               	movlw	0
  8245  00058A  6E1A               	movwf	?___wmul+3,c
  8246  00058C  0E03               	movlw	3
  8247  00058E  6E19               	movwf	?___wmul+2,c
  8248  000590  EC14  F023         	call	___wmul	;wreg free
  8249  000594  C017  F07C         	movff	?___wmul,sprintf@exp
  8250  000598  C018  F07D         	movff	?___wmul+1,sprintf@exp+1
  8251                           
  8252                           ;doprnt.c: 849: exp /= 10;
  8253  00059C  C07C  F00A         	movff	sprintf@exp,?___awdiv
  8254  0005A0  C07D  F00B         	movff	sprintf@exp+1,?___awdiv+1
  8255  0005A4  0E00               	movlw	0
  8256  0005A6  6E0D               	movwf	?___awdiv+3,c
  8257  0005A8  0E0A               	movlw	10
  8258  0005AA  6E0C               	movwf	?___awdiv+2,c
  8259  0005AC  ECAC  F01E         	call	___awdiv	;wreg free
  8260  0005B0  C00A  F07C         	movff	?___awdiv,sprintf@exp
  8261  0005B4  C00B  F07D         	movff	?___awdiv+1,sprintf@exp+1
  8262                           
  8263                           ;doprnt.c: 850: if(exp < 0)
  8264  0005B8  0100               	movlb	0	; () banked
  8265  0005BA  0100               	movlb	0	; () banked
  8266  0005BC  AF7D               	btfss	(sprintf@exp+1)& (0+255),7,b
  8267  0005BE  D005               	goto	i2l6673
  8268                           
  8269                           ; BSR set to: 0
  8270                           ;doprnt.c: 851: exp--;
  8271  0005C0  0100               	movlb	0	; () banked
  8272  0005C2  0100               	movlb	0	; () banked
  8273  0005C4  077C               	decf	sprintf@exp& (0+255),f,b
  8274  0005C6  A0D8               	btfss	status,0,c
  8275  0005C8  077D               	decf	(sprintf@exp+1)& (0+255),f,b
  8276  0005CA                     i2l6673:
  8277                           
  8278                           ; BSR set to: 0
  8279                           ;doprnt.c: 855: integ = scale(-exp);
  8280  0005CA  0100               	movlb	0	; () banked
  8281  0005CC  0100               	movlb	0	; () banked
  8282  0005CE  517C               	movf	sprintf@exp& (0+255),w,b
  8283  0005D0  0800               	sublw	0
  8284  0005D2  6E3F               	movwf	?_scale,c
  8285  0005D4  ECA6  F00F         	call	_scale	;wreg free
  8286  0005D8  C041  F079         	movff	?_scale+2,sprintf@integ+2
  8287  0005DC  C040  F078         	movff	?_scale+1,sprintf@integ+1
  8288  0005E0  C03F  F077         	movff	?_scale,sprintf@integ
  8289                           
  8290                           ;doprnt.c: 856: integ *= fval;
  8291  0005E4  0100               	movlb	0	; () banked
  8292  0005E6  0E00               	movlw	high sprintf@integ
  8293  0005E8  6E40               	movwf	?___asftmul+1,c
  8294  0005EA  0100               	movlb	0	; () banked
  8295  0005EC  0E77               	movlw	low sprintf@integ
  8296  0005EE  6E3F               	movwf	?___asftmul,c
  8297  0005F0  C080  F041         	movff	sprintf@fval,?___asftmul+2
  8298  0005F4  C081  F042         	movff	sprintf@fval+1,?___asftmul+3
  8299  0005F8  C082  F043         	movff	sprintf@fval+2,?___asftmul+4
  8300  0005FC  EC9E  F022         	call	___asftmul	;wreg free
  8301                           
  8302                           ;doprnt.c: 857: if(integ < 1.0)
  8303  000600  C077  F001         	movff	sprintf@integ,?___ftge
  8304  000604  C078  F002         	movff	sprintf@integ+1,?___ftge+1
  8305  000608  C079  F003         	movff	sprintf@integ+2,?___ftge+2
  8306  00060C  0E00               	movlw	0
  8307  00060E  6E04               	movwf	?___ftge+3,c
  8308  000610  0E80               	movlw	128
  8309  000612  6E05               	movwf	?___ftge+4,c
  8310  000614  0E3F               	movlw	63
  8311  000616  6E06               	movwf	?___ftge+5,c
  8312  000618  EC64  F01E         	call	___ftge	;wreg free
  8313  00061C  B0D8               	btfsc	status,0,c
  8314  00061E  D006               	goto	i2l6681
  8315                           
  8316                           ;doprnt.c: 858: exp--;
  8317  000620  0100               	movlb	0	; () banked
  8318  000622  0100               	movlb	0	; () banked
  8319  000624  077C               	decf	sprintf@exp& (0+255),f,b
  8320  000626  A0D8               	btfss	status,0,c
  8321  000628  077D               	decf	(sprintf@exp+1)& (0+255),f,b
  8322  00062A  D014               	goto	i2l6685
  8323  00062C                     i2l6681:
  8324                           
  8325                           ;doprnt.c: 859: else if(integ >= 10.0)
  8326  00062C  C077  F001         	movff	sprintf@integ,?___ftge
  8327  000630  C078  F002         	movff	sprintf@integ+1,?___ftge+1
  8328  000634  C079  F003         	movff	sprintf@integ+2,?___ftge+2
  8329  000638  0E00               	movlw	0
  8330  00063A  6E04               	movwf	?___ftge+3,c
  8331  00063C  0E20               	movlw	32
  8332  00063E  6E05               	movwf	?___ftge+4,c
  8333  000640  0E41               	movlw	65
  8334  000642  6E06               	movwf	?___ftge+5,c
  8335  000644  EC64  F01E         	call	___ftge	;wreg free
  8336  000648  A0D8               	btfss	status,0,c
  8337  00064A  D004               	goto	i2l6685
  8338                           
  8339                           ;doprnt.c: 860: exp++;
  8340  00064C  0100               	movlb	0	; () banked
  8341  00064E  0100               	movlb	0	; () banked
  8342  000650  4B7C               	infsnz	sprintf@exp& (0+255),f,b
  8343  000652  2B7D               	incf	(sprintf@exp+1)& (0+255),f,b
  8344  000654                     i2l6685:
  8345                           
  8346                           ;doprnt.c: 861: }
  8347                           ;doprnt.c: 1121: if(prec <= 12)
  8348  000654  0100               	movlb	0	; () banked
  8349  000656  0100               	movlb	0	; () banked
  8350  000658  5186               	movf	(sprintf@prec+1)& (0+255),w,b
  8351  00065A  0A80               	xorlw	128
  8352  00065C  0F80               	addlw	-128
  8353  00065E  0E0D               	movlw	13
  8354  000660  B4D8               	btfsc	status,2,c
  8355  000662  5D85               	subwf	sprintf@prec& (0+255),w,b
  8356  000664  B0D8               	btfsc	status,0,c
  8357  000666  D012               	goto	i2l6689
  8358                           
  8359                           ; BSR set to: 0
  8360                           ;doprnt.c: 1122: fval += fround(prec);
  8361  000668  0100               	movlb	0	; () banked
  8362  00066A  0E00               	movlw	high sprintf@fval
  8363  00066C  6E4F               	movwf	?___asftadd+1,c
  8364  00066E  0100               	movlb	0	; () banked
  8365  000670  0E80               	movlw	low sprintf@fval
  8366  000672  6E4E               	movwf	?___asftadd,c
  8367  000674  C085  F03F         	movff	sprintf@prec,?_fround
  8368  000678  ECCE  F011         	call	_fround	;wreg free
  8369  00067C  C041  F052         	movff	?_fround+2,?___asftadd+4
  8370  000680  C040  F051         	movff	?_fround+1,?___asftadd+3
  8371  000684  C03F  F050         	movff	?_fround,?___asftadd+2
  8372  000688  ECBC  F022         	call	___asftadd	;wreg free
  8373  00068C                     i2l6689:
  8374                           
  8375                           ;doprnt.c: 1125: if((exp > 9)||(fval != 0 && (unsigned long)fval == 0 && exp > 1)) {
  8376  00068C  0100               	movlb	0	; () banked
  8377  00068E  0100               	movlb	0	; () banked
  8378  000690  517D               	movf	(sprintf@exp+1)& (0+255),w,b
  8379  000692  0A80               	xorlw	128
  8380  000694  0F80               	addlw	-128
  8381  000696  0E0A               	movlw	10
  8382  000698  B4D8               	btfsc	status,2,c
  8383  00069A  5D7C               	subwf	sprintf@exp& (0+255),w,b
  8384  00069C  B0D8               	btfsc	status,0,c
  8385  00069E  D022               	goto	i2l6697
  8386                           
  8387                           ; BSR set to: 0
  8388  0006A0  0E7F               	movlw	127
  8389  0006A2  0100               	movlb	0	; () banked
  8390  0006A4  0100               	movlb	0	; () banked
  8391  0006A6  1582               	andwf	(sprintf@fval+2)& (0+255),w,b
  8392  0006A8  0100               	movlb	0	; () banked
  8393  0006AA  1181               	iorwf	(sprintf@fval+1)& (0+255),w,b
  8394  0006AC  0100               	movlb	0	; () banked
  8395  0006AE  1180               	iorwf	sprintf@fval& (0+255),w,b
  8396  0006B0  B4D8               	btfsc	status,2,c
  8397  0006B2  D067               	goto	i2l6713
  8398                           
  8399                           ; BSR set to: 0
  8400  0006B4  C080  F01F         	movff	sprintf@fval,?___fttol
  8401  0006B8  C081  F020         	movff	sprintf@fval+1,?___fttol+1
  8402  0006BC  C082  F021         	movff	sprintf@fval+2,?___fttol+2
  8403  0006C0  ECA5  F01B         	call	___fttol	;wreg free
  8404  0006C4  5022               	movf	?___fttol+3,w,c
  8405  0006C6  101F               	iorwf	?___fttol,w,c
  8406  0006C8  1020               	iorwf	?___fttol+1,w,c
  8407  0006CA  1021               	iorwf	?___fttol+2,w,c
  8408  0006CC  A4D8               	btfss	status,2,c
  8409  0006CE  D059               	goto	i2l6713
  8410  0006D0  0100               	movlb	0	; () banked
  8411  0006D2  0100               	movlb	0	; () banked
  8412  0006D4  517D               	movf	(sprintf@exp+1)& (0+255),w,b
  8413  0006D6  0A80               	xorlw	128
  8414  0006D8  0F80               	addlw	-128
  8415  0006DA  0E02               	movlw	2
  8416  0006DC  B4D8               	btfsc	status,2,c
  8417  0006DE  5D7C               	subwf	sprintf@exp& (0+255),w,b
  8418  0006E0  A0D8               	btfss	status,0,c
  8419  0006E2  D04F               	goto	i2l6713
  8420  0006E4                     i2l6697:
  8421                           
  8422                           ; BSR set to: 0
  8423                           ;doprnt.c: 1129: if(integ < 4.294967296){
  8424  0006E4  C077  F001         	movff	sprintf@integ,?___ftge
  8425  0006E8  C078  F002         	movff	sprintf@integ+1,?___ftge+1
  8426  0006EC  C079  F003         	movff	sprintf@integ+2,?___ftge+2
  8427  0006F0  0E70               	movlw	112
  8428  0006F2  6E04               	movwf	?___ftge+3,c
  8429  0006F4  0E89               	movlw	137
  8430  0006F6  6E05               	movwf	?___ftge+4,c
  8431  0006F8  0E40               	movlw	64
  8432  0006FA  6E06               	movwf	?___ftge+5,c
  8433  0006FC  EC64  F01E         	call	___ftge	;wreg free
  8434  000700  B0D8               	btfsc	status,0,c
  8435  000702  D003               	goto	i2l6701
  8436                           
  8437                           ;doprnt.c: 1130: exp -= (sizeof dpowers/sizeof dpowers[0])-1;
  8438  000704  0100               	movlb	0	; () banked
  8439  000706  0EF7               	movlw	247
  8440  000708  D002               	goto	L10
  8441  00070A                     i2l6701:
  8442                           
  8443                           ;doprnt.c: 1132: exp -= (sizeof dpowers/sizeof dpowers[0])-2;
  8444  00070A  0100               	movlb	0	; () banked
  8445  00070C  0EF8               	movlw	248
  8446  00070E                     L10:
  8447  00070E  0100               	movlb	0	; () banked
  8448  000710  277C               	addwf	sprintf@exp& (0+255),f,b
  8449  000712  0EFF               	movlw	255
  8450  000714  0100               	movlb	0	; () banked
  8451  000716  237D               	addwfc	(sprintf@exp+1)& (0+255),f,b
  8452                           
  8453                           ; BSR set to: 0
  8454                           ;doprnt.c: 1133: }
  8455                           ;doprnt.c: 1134: integ = scale(exp);
  8456                           
  8457                           ; BSR set to: 0
  8458  000718  C07C  F03F         	movff	sprintf@exp,?_scale
  8459  00071C  ECA6  F00F         	call	_scale	;wreg free
  8460  000720  C041  F079         	movff	?_scale+2,sprintf@integ+2
  8461  000724  C040  F078         	movff	?_scale+1,sprintf@integ+1
  8462  000728  C03F  F077         	movff	?_scale,sprintf@integ
  8463                           
  8464                           ;doprnt.c: 1135: _val._val = ((sizeof(double)== 3) ? _tdiv_to_l_(fval,integ) : _div_to_l
      +                          _(fval,integ));
  8465  00072C  C080  F001         	movff	sprintf@fval,?__tdiv_to_l_
  8466  000730  C081  F002         	movff	sprintf@fval+1,?__tdiv_to_l_+1
  8467  000734  C082  F003         	movff	sprintf@fval+2,?__tdiv_to_l_+2
  8468  000738  C077  F004         	movff	sprintf@integ,?__tdiv_to_l_+3
  8469  00073C  C078  F005         	movff	sprintf@integ+1,?__tdiv_to_l_+4
  8470  000740  C079  F006         	movff	sprintf@integ+2,?__tdiv_to_l_+5
  8471  000744  EC1B  F019         	call	__tdiv_to_l_	;wreg free
  8472  000748  C004  F072         	movff	?__tdiv_to_l_+3,_sprintf$751+3
  8473  00074C  C003  F071         	movff	?__tdiv_to_l_+2,_sprintf$751+2
  8474  000750  C002  F070         	movff	?__tdiv_to_l_+1,_sprintf$751+1
  8475  000754  C001  F06F         	movff	?__tdiv_to_l_,_sprintf$751
  8476  000758  C06F  F088         	movff	_sprintf$751,sprintf@_val
  8477  00075C  C070  F089         	movff	_sprintf$751+1,sprintf@_val+1
  8478  000760  C071  F08A         	movff	_sprintf$751+2,sprintf@_val+2
  8479  000764  C072  F08B         	movff	_sprintf$751+3,sprintf@_val+3
  8480                           
  8481                           ;doprnt.c: 1138: fval = 0.0;
  8482  000768  0E00               	movlw	0
  8483  00076A  0100               	movlb	0	; () banked
  8484  00076C  0100               	movlb	0	; () banked
  8485  00076E  6F80               	movwf	sprintf@fval& (0+255),b
  8486  000770  0E00               	movlw	0
  8487  000772  0100               	movlb	0	; () banked
  8488  000774  0100               	movlb	0	; () banked
  8489  000776  6F81               	movwf	(sprintf@fval+1)& (0+255),b
  8490  000778  0E00               	movlw	0
  8491  00077A  0100               	movlb	0	; () banked
  8492  00077C  0100               	movlb	0	; () banked
  8493  00077E  6F82               	movwf	(sprintf@fval+2)& (0+255),b
  8494                           
  8495                           ;doprnt.c: 1139: } else {
  8496  000780  D02F               	goto	i2l6719
  8497  000782                     i2l6713:
  8498                           
  8499                           ;doprnt.c: 1140: _val._val = (unsigned long)fval;
  8500  000782  C080  F01F         	movff	sprintf@fval,?___fttol
  8501  000786  C081  F020         	movff	sprintf@fval+1,?___fttol+1
  8502  00078A  C082  F021         	movff	sprintf@fval+2,?___fttol+2
  8503  00078E  ECA5  F01B         	call	___fttol	;wreg free
  8504  000792  C022  F08B         	movff	?___fttol+3,sprintf@_val+3
  8505  000796  C021  F08A         	movff	?___fttol+2,sprintf@_val+2
  8506  00079A  C020  F089         	movff	?___fttol+1,sprintf@_val+1
  8507  00079E  C01F  F088         	movff	?___fttol,sprintf@_val
  8508                           
  8509                           ;doprnt.c: 1141: fval -= (double)_val._val;
  8510  0007A2  0100               	movlb	0	; () banked
  8511  0007A4  0E00               	movlw	high sprintf@fval
  8512  0007A6  6E54               	movwf	?___asftsub+1,c
  8513  0007A8  0100               	movlb	0	; () banked
  8514  0007AA  0E80               	movlw	low sprintf@fval
  8515  0007AC  6E53               	movwf	?___asftsub,c
  8516  0007AE  C088  F009         	movff	sprintf@_val,?___lltoft
  8517  0007B2  C089  F00A         	movff	sprintf@_val+1,?___lltoft+1
  8518  0007B6  C08A  F00B         	movff	sprintf@_val+2,?___lltoft+2
  8519  0007BA  C08B  F00C         	movff	sprintf@_val+3,?___lltoft+3
  8520  0007BE  EC43  F021         	call	___lltoft	;wreg free
  8521  0007C2  C00B  F057         	movff	?___lltoft+2,?___asftsub+4
  8522  0007C6  C00A  F056         	movff	?___lltoft+1,?___asftsub+3
  8523  0007CA  C009  F055         	movff	?___lltoft,?___asftsub+2
  8524  0007CE  EC80  F022         	call	___asftsub	;wreg free
  8525                           
  8526                           ;doprnt.c: 1142: exp = 0;
  8527  0007D2  0E00               	movlw	0
  8528  0007D4  0100               	movlb	0	; () banked
  8529  0007D6  0100               	movlb	0	; () banked
  8530  0007D8  6F7D               	movwf	(sprintf@exp+1)& (0+255),b
  8531  0007DA  0E00               	movlw	0
  8532  0007DC  0100               	movlb	0	; () banked
  8533  0007DE  6F7C               	movwf	sprintf@exp& (0+255),b
  8534  0007E0                     i2l6719:
  8535                           
  8536                           ; BSR set to: 0
  8537                           ;doprnt.c: 1143: }
  8538                           ;doprnt.c: 1145: for(c = 1 ; c != (sizeof dpowers/sizeof dpowers[0]) ; c++)
  8539  0007E0  6E58               	movwf	??_sprintf& (0+255),c
  8540  0007E2  0E01               	movlw	1
  8541  0007E4  0100               	movlb	0	; () banked
  8542  0007E6  0100               	movlb	0	; () banked
  8543  0007E8  6F87               	movwf	sprintf@c& (0+255),b
  8544  0007EA  5058               	movf	??_sprintf& (0+255),w,c
  8545  0007EC                     
  8546                           ; BSR set to: 0
  8547  0007EC  0100               	movlb	0	; () banked
  8548  0007EE  0100               	movlb	0	; () banked
  8549  0007F0  5187               	movf	sprintf@c& (0+255),w,b
  8550  0007F2  0A0A               	xorlw	10
  8551  0007F4  B4D8               	btfsc	status,2,c
  8552  0007F6  D021               	goto	i2l6733
  8553                           
  8554                           ; BSR set to: 0
  8555                           ;doprnt.c: 1146: if(_val._val < dpowers[c])
  8556                           
  8557                           ; BSR set to: 0
  8558                           
  8559                           ; BSR set to: 0
  8560  0007F8  0100               	movlb	0	; () banked
  8561  0007FA  0100               	movlb	0	; () banked
  8562  0007FC  5187               	movf	sprintf@c& (0+255),w,b
  8563  0007FE  0D04               	mullw	4
  8564  000800  0EE5               	movlw	low _dpowers
  8565  000802  24F3               	addwf	prodl,w,c
  8566  000804  6EF6               	movwf	tblptrl,c
  8567  000806  0E7E               	movlw	high _dpowers
  8568  000808  20F4               	addwfc	prodh,w,c
  8569  00080A  6EF7               	movwf	tblptrh,c
  8570  00080C  0009               	tblrd		*+
  8571  00080E  50F5               	movf	tablat,w,c
  8572  000810  0100               	movlb	0	; () banked
  8573  000812  0100               	movlb	0	; () banked
  8574  000814  5D88               	subwf	sprintf@_val& (0+255),w,b
  8575  000816  0009               	tblrd		*+
  8576  000818  50F5               	movf	tablat,w,c
  8577  00081A  0100               	movlb	0	; () banked
  8578  00081C  5989               	subwfb	(sprintf@_val+1)& (0+255),w,b
  8579  00081E  0009               	tblrd		*+
  8580  000820  50F5               	movf	tablat,w,c
  8581  000822  0100               	movlb	0	; () banked
  8582  000824  598A               	subwfb	(sprintf@_val+2)& (0+255),w,b
  8583  000826  0009               	tblrd		*+
  8584  000828  50F5               	movf	tablat,w,c
  8585  00082A  0100               	movlb	0	; () banked
  8586  00082C  598B               	subwfb	(sprintf@_val+3)& (0+255),w,b
  8587  00082E  A0D8               	btfss	status,0,c
  8588  000830  D004               	goto	i2l6733
  8589                           
  8590                           ; BSR set to: 0
  8591                           
  8592                           ; BSR set to: 0
  8593                           
  8594                           ; BSR set to: 0
  8595                           ;doprnt.c: 1147: break;
  8596  000832  0100               	movlb	0	; () banked
  8597  000834  0100               	movlb	0	; () banked
  8598  000836  2B87               	incf	sprintf@c& (0+255),f,b
  8599  000838  D7D9               	goto	L11
  8600  00083A                     i2l6733:
  8601                           
  8602                           ; BSR set to: 0
  8603                           ;doprnt.c: 1151: width -= prec + c + exp;
  8604  00083A  0100               	movlb	0	; () banked
  8605  00083C  C087  F058         	movff	sprintf@c,??_sprintf
  8606  000840  6A59               	clrf	(??_sprintf+1)& (0+255),c
  8607  000842  BE58               	btfsc	??_sprintf& (0+255),7,c
  8608  000844  0659               	decf	(??_sprintf+1)& (0+255),f,c
  8609  000846  0100               	movlb	0	; () banked
  8610  000848  0100               	movlb	0	; () banked
  8611  00084A  5185               	movf	sprintf@prec& (0+255),w,b
  8612  00084C  2658               	addwf	??_sprintf,f,c
  8613  00084E  0100               	movlb	0	; () banked
  8614  000850  0100               	movlb	0	; () banked
  8615  000852  5186               	movf	(sprintf@prec+1)& (0+255),w,b
  8616  000854  2259               	addwfc	??_sprintf+1,f,c
  8617  000856  0100               	movlb	0	; () banked
  8618  000858  0100               	movlb	0	; () banked
  8619  00085A  517C               	movf	sprintf@exp& (0+255),w,b
  8620  00085C  2658               	addwf	??_sprintf,f,c
  8621  00085E  0100               	movlb	0	; () banked
  8622  000860  0100               	movlb	0	; () banked
  8623  000862  517D               	movf	(sprintf@exp+1)& (0+255),w,b
  8624  000864  2259               	addwfc	??_sprintf+1,f,c
  8625  000866  5058               	movf	??_sprintf,w,c
  8626  000868  0100               	movlb	0	; () banked
  8627  00086A  0100               	movlb	0	; () banked
  8628  00086C  5F83               	subwf	sprintf@width& (0+255),f,b
  8629  00086E  5059               	movf	??_sprintf+1,w,c
  8630  000870  0100               	movlb	0	; () banked
  8631  000872  0100               	movlb	0	; () banked
  8632  000874  5B84               	subwfb	(sprintf@width+1)& (0+255),f,b
  8633                           
  8634                           ;doprnt.c: 1152: if(
  8635                           ;doprnt.c: 1156: prec)
  8636  000876  0100               	movlb	0	; () banked
  8637  000878  0100               	movlb	0	; () banked
  8638  00087A  5186               	movf	(sprintf@prec+1)& (0+255),w,b
  8639  00087C  1185               	iorwf	sprintf@prec& (0+255),w,b
  8640  00087E  B4D8               	btfsc	status,2,c
  8641  000880  D005               	goto	i2l6737
  8642                           
  8643                           ; BSR set to: 0
  8644                           ;doprnt.c: 1157: width--;
  8645  000882  0100               	movlb	0	; () banked
  8646  000884  0100               	movlb	0	; () banked
  8647  000886  0783               	decf	sprintf@width& (0+255),f,b
  8648  000888  A0D8               	btfss	status,0,c
  8649  00088A  0784               	decf	(sprintf@width+1)& (0+255),f,b
  8650  00088C                     i2l6737:
  8651                           
  8652                           ; BSR set to: 0
  8653                           ;doprnt.c: 1158: if(flag & 0x03)
  8654  00088C  0E03               	movlw	3
  8655  00088E  0100               	movlb	0	; () banked
  8656  000890  0100               	movlb	0	; () banked
  8657  000892  157E               	andwf	sprintf@flag& (0+255),w,b
  8658  000894  6E58               	movwf	??_sprintf& (0+255),c
  8659  000896  0E00               	movlw	0
  8660  000898  0100               	movlb	0	; () banked
  8661  00089A  0100               	movlb	0	; () banked
  8662  00089C  157F               	andwf	(sprintf@flag+1)& (0+255),w,b
  8663  00089E  6E59               	movwf	(??_sprintf+1)& (0+255),c
  8664  0008A0  5059               	movf	??_sprintf+1,w,c
  8665  0008A2  1058               	iorwf	??_sprintf,w,c
  8666  0008A4  B4D8               	btfsc	status,2,c
  8667  0008A6  D005               	goto	i2l6741
  8668                           
  8669                           ; BSR set to: 0
  8670                           ;doprnt.c: 1159: width--;
  8671  0008A8  0100               	movlb	0	; () banked
  8672  0008AA  0100               	movlb	0	; () banked
  8673  0008AC  0783               	decf	sprintf@width& (0+255),f,b
  8674  0008AE  A0D8               	btfss	status,0,c
  8675  0008B0  0784               	decf	(sprintf@width+1)& (0+255),f,b
  8676  0008B2                     i2l6741:
  8677                           
  8678                           ; BSR set to: 0
  8679                           ;doprnt.c: 1162: if(flag & 0x04) {
  8680  0008B2  0100               	movlb	0	; () banked
  8681  0008B4  0100               	movlb	0	; () banked
  8682  0008B6  B57E               	btfsc	sprintf@flag& (0+255),2,b
  8683  0008B8  D010               	goto	i2l6751
  8684  0008BA  D029               	goto	i2l6759
  8685  0008BC                     i2l6745:
  8686                           
  8687                           ; BSR set to: 0
  8688                           ;doprnt.c: 1176: ((*sp++ = ('0')));
  8689  0008BC  C060  FFD9         	movff	sprintf@sp,fsr2l
  8690  0008C0  C061  FFDA         	movff	sprintf@sp+1,fsr2h
  8691  0008C4  0E30               	movlw	48
  8692  0008C6  6EDF               	movwf	indf2,c
  8693                           
  8694                           ; BSR set to: 0
  8695  0008C8  0100               	movlb	0	; () banked
  8696  0008CA  0100               	movlb	0	; () banked
  8697  0008CC  4B60               	infsnz	sprintf@sp& (0+255),f,b
  8698  0008CE  2B61               	incf	(sprintf@sp+1)& (0+255),f,b
  8699                           
  8700                           ; BSR set to: 0
  8701                           ;doprnt.c: 1177: width--;
  8702  0008D0  0100               	movlb	0	; () banked
  8703  0008D2  0100               	movlb	0	; () banked
  8704  0008D4  0783               	decf	sprintf@width& (0+255),f,b
  8705  0008D6  A0D8               	btfss	status,0,c
  8706  0008D8  0784               	decf	(sprintf@width+1)& (0+255),f,b
  8707  0008DA                     i2l6751:
  8708                           
  8709                           ; BSR set to: 0
  8710  0008DA  0100               	movlb	0	; () banked
  8711  0008DC  0100               	movlb	0	; () banked
  8712  0008DE  5184               	movf	(sprintf@width+1)& (0+255),w,b
  8713  0008E0  0A80               	xorlw	128
  8714  0008E2  0F80               	addlw	-128
  8715  0008E4  0E01               	movlw	1
  8716  0008E6  B4D8               	btfsc	status,2,c
  8717  0008E8  5D83               	subwf	sprintf@width& (0+255),w,b
  8718  0008EA  A0D8               	btfss	status,0,c
  8719  0008EC  D06D               	goto	i2l6775
  8720  0008EE  D7E6               	goto	i2l6745
  8721  0008F0                     i2l6753:
  8722                           
  8723                           ; BSR set to: 0
  8724                           ;doprnt.c: 1188: ((*sp++ = (' ')));
  8725  0008F0  C060  FFD9         	movff	sprintf@sp,fsr2l
  8726  0008F4  C061  FFDA         	movff	sprintf@sp+1,fsr2h
  8727  0008F8  0E20               	movlw	32
  8728  0008FA  6EDF               	movwf	indf2,c
  8729                           
  8730                           ; BSR set to: 0
  8731  0008FC  0100               	movlb	0	; () banked
  8732  0008FE  0100               	movlb	0	; () banked
  8733  000900  4B60               	infsnz	sprintf@sp& (0+255),f,b
  8734  000902  2B61               	incf	(sprintf@sp+1)& (0+255),f,b
  8735                           
  8736                           ; BSR set to: 0
  8737                           ;doprnt.c: 1189: width--;
  8738  000904  0100               	movlb	0	; () banked
  8739  000906  0100               	movlb	0	; () banked
  8740  000908  0783               	decf	sprintf@width& (0+255),f,b
  8741  00090A  A0D8               	btfss	status,0,c
  8742  00090C  0784               	decf	(sprintf@width+1)& (0+255),f,b
  8743  00090E                     i2l6759:
  8744                           
  8745                           ; BSR set to: 0
  8746  00090E  0100               	movlb	0	; () banked
  8747  000910  0100               	movlb	0	; () banked
  8748  000912  5184               	movf	(sprintf@width+1)& (0+255),w,b
  8749  000914  0A80               	xorlw	128
  8750  000916  0F80               	addlw	-128
  8751  000918  0E01               	movlw	1
  8752  00091A  B4D8               	btfsc	status,2,c
  8753  00091C  5D83               	subwf	sprintf@width& (0+255),w,b
  8754  00091E  B0D8               	btfsc	status,0,c
  8755  000920  D7E7               	goto	i2l6753
  8756                           
  8757                           ; BSR set to: 0
  8758                           ;doprnt.c: 1190: }
  8759                           ;doprnt.c: 1195: if(flag & 0x03)
  8760                           
  8761                           ; BSR set to: 0
  8762  000922  0E03               	movlw	3
  8763  000924  0100               	movlb	0	; () banked
  8764  000926  0100               	movlb	0	; () banked
  8765  000928  157E               	andwf	sprintf@flag& (0+255),w,b
  8766  00092A  6E58               	movwf	??_sprintf& (0+255),c
  8767  00092C  0E00               	movlw	0
  8768  00092E  0100               	movlb	0	; () banked
  8769  000930  0100               	movlb	0	; () banked
  8770  000932  157F               	andwf	(sprintf@flag+1)& (0+255),w,b
  8771  000934  6E59               	movwf	(??_sprintf+1)& (0+255),c
  8772  000936  5059               	movf	??_sprintf+1,w,c
  8773  000938  1058               	iorwf	??_sprintf,w,c
  8774  00093A  B4D8               	btfsc	status,2,c
  8775  00093C  D045               	goto	i2l6775
  8776                           
  8777                           ; BSR set to: 0
  8778                           ;doprnt.c: 1197: ((*sp++ = ('-')));
  8779  00093E  C060  FFD9         	movff	sprintf@sp,fsr2l
  8780  000942  C061  FFDA         	movff	sprintf@sp+1,fsr2h
  8781  000946  0E2D               	movlw	45
  8782  000948  D03A               	goto	L12
  8783  00094A                     i2l6767:
  8784                           
  8785                           ; BSR set to: 0
  8786                           ;doprnt.c: 1207: {
  8787                           ;doprnt.c: 1208: unsigned vd = _val._val/dpowers[c];
  8788  00094A  C088  F001         	movff	sprintf@_val,?___lldiv
  8789  00094E  C089  F002         	movff	sprintf@_val+1,?___lldiv+1
  8790  000952  C08A  F003         	movff	sprintf@_val+2,?___lldiv+2
  8791  000956  C08B  F004         	movff	sprintf@_val+3,?___lldiv+3
  8792  00095A  0100               	movlb	0	; () banked
  8793  00095C  0100               	movlb	0	; () banked
  8794  00095E  5187               	movf	sprintf@c& (0+255),w,b
  8795  000960  0D04               	mullw	4
  8796  000962  0EE5               	movlw	low _dpowers
  8797  000964  24F3               	addwf	prodl,w,c
  8798  000966  6EF6               	movwf	tblptrl,c
  8799  000968  0E7E               	movlw	high _dpowers
  8800  00096A  20F4               	addwfc	prodh,w,c
  8801  00096C  6EF7               	movwf	tblptrh,c
  8802  00096E  0009               	tblrd		*+
  8803  000970  CFF5 F005          	movff	tablat,?___lldiv+4
  8804  000974  0009               	tblrd		*+
  8805  000976  CFF5 F006          	movff	tablat,?___lldiv+5
  8806  00097A  0009               	tblrd		*+
  8807  00097C  CFF5 F007          	movff	tablat,?___lldiv+6
  8808  000980  000A               	tblrd		*-
  8809  000982  CFF5 F008          	movff	tablat,?___lldiv+7
  8810  000986  EC37  F01F         	call	___lldiv	;wreg free
  8811  00098A  C001  F073         	movff	?___lldiv,sprintf@vd
  8812  00098E  C002  F074         	movff	?___lldiv+1,sprintf@vd+1
  8813                           
  8814                           ;doprnt.c: 1209: vd %= 10;
  8815  000992  C073  F001         	movff	sprintf@vd,?___lwmod
  8816  000996  C074  F002         	movff	sprintf@vd+1,?___lwmod+1
  8817  00099A  0E00               	movlw	0
  8818  00099C  6E04               	movwf	?___lwmod+3,c
  8819  00099E  0E0A               	movlw	10
  8820  0009A0  6E03               	movwf	?___lwmod+2,c
  8821  0009A2  EC3C  F022         	call	___lwmod	;wreg free
  8822  0009A6  C001  F073         	movff	?___lwmod,sprintf@vd
  8823  0009AA  C002  F074         	movff	?___lwmod+1,sprintf@vd+1
  8824                           
  8825                           ;doprnt.c: 1210: ((*sp++ = ('0' + vd)));
  8826  0009AE  0100               	movlb	0	; () banked
  8827  0009B0  0100               	movlb	0	; () banked
  8828  0009B2  5173               	movf	sprintf@vd& (0+255),w,b
  8829  0009B4  0F30               	addlw	48
  8830  0009B6  C060  FFD9         	movff	sprintf@sp,fsr2l
  8831  0009BA  C061  FFDA         	movff	sprintf@sp+1,fsr2h
  8832  0009BE                     L12:
  8833  0009BE  6EDF               	movwf	indf2,c
  8834                           
  8835                           ; BSR set to: 0
  8836  0009C0  0100               	movlb	0	; () banked
  8837  0009C2  0100               	movlb	0	; () banked
  8838  0009C4  4B60               	infsnz	sprintf@sp& (0+255),f,b
  8839  0009C6  2B61               	incf	(sprintf@sp+1)& (0+255),f,b
  8840  0009C8                     i2l6775:
  8841                           
  8842                           ; BSR set to: 0
  8843  0009C8  0100               	movlb	0	; () banked
  8844  0009CA  0100               	movlb	0	; () banked
  8845  0009CC  0787               	decf	sprintf@c& (0+255),f,b
  8846  0009CE  0100               	movlb	0	; () banked
  8847  0009D0  2987               	incf	sprintf@c& (0+255),w,b
  8848  0009D2  B4D8               	btfsc	status,2,c
  8849  0009D4  D010               	goto	i2l6783
  8850  0009D6  D7B9               	goto	i2l6767
  8851  0009D8                     i2l6777:
  8852                           
  8853                           ; BSR set to: 0
  8854                           ;doprnt.c: 1215: ((*sp++ = ('0')));
  8855  0009D8  C060  FFD9         	movff	sprintf@sp,fsr2l
  8856  0009DC  C061  FFDA         	movff	sprintf@sp+1,fsr2h
  8857  0009E0  0E30               	movlw	48
  8858  0009E2  6EDF               	movwf	indf2,c
  8859                           
  8860                           ; BSR set to: 0
  8861  0009E4  0100               	movlb	0	; () banked
  8862  0009E6  0100               	movlb	0	; () banked
  8863  0009E8  4B60               	infsnz	sprintf@sp& (0+255),f,b
  8864  0009EA  2B61               	incf	(sprintf@sp+1)& (0+255),f,b
  8865                           
  8866                           ; BSR set to: 0
  8867                           ;doprnt.c: 1216: exp--;
  8868  0009EC  0100               	movlb	0	; () banked
  8869  0009EE  0100               	movlb	0	; () banked
  8870  0009F0  077C               	decf	sprintf@exp& (0+255),f,b
  8871  0009F2  A0D8               	btfss	status,0,c
  8872  0009F4  077D               	decf	(sprintf@exp+1)& (0+255),f,b
  8873  0009F6                     i2l6783:
  8874                           
  8875                           ; BSR set to: 0
  8876  0009F6  0100               	movlb	0	; () banked
  8877  0009F8  0100               	movlb	0	; () banked
  8878  0009FA  517D               	movf	(sprintf@exp+1)& (0+255),w,b
  8879  0009FC  0A80               	xorlw	128
  8880  0009FE  0F80               	addlw	-128
  8881  000A00  0E01               	movlw	1
  8882  000A02  B4D8               	btfsc	status,2,c
  8883  000A04  5D7C               	subwf	sprintf@exp& (0+255),w,b
  8884  000A06  B0D8               	btfsc	status,0,c
  8885  000A08  D7E7               	goto	i2l6777
  8886                           
  8887                           ; BSR set to: 0
  8888                           ;doprnt.c: 1217: }
  8889                           ;doprnt.c: 1218: if(prec > (int)((sizeof dpowers/sizeof dpowers[0])-2))
  8890                           
  8891                           ; BSR set to: 0
  8892  000A0A  0100               	movlb	0	; () banked
  8893  000A0C  0100               	movlb	0	; () banked
  8894  000A0E  5186               	movf	(sprintf@prec+1)& (0+255),w,b
  8895  000A10  0A80               	xorlw	128
  8896  000A12  0F80               	addlw	-128
  8897  000A14  0E09               	movlw	9
  8898  000A16  B4D8               	btfsc	status,2,c
  8899  000A18  5D85               	subwf	sprintf@prec& (0+255),w,b
  8900  000A1A  A0D8               	btfss	status,0,c
  8901  000A1C  D007               	goto	i2l647
  8902                           
  8903                           ; BSR set to: 0
  8904                           ;doprnt.c: 1219: c = (sizeof dpowers/sizeof dpowers[0])-2;
  8905  000A1E  6E58               	movwf	??_sprintf& (0+255),c
  8906  000A20  0E08               	movlw	8
  8907  000A22  0100               	movlb	0	; () banked
  8908  000A24  0100               	movlb	0	; () banked
  8909  000A26  6F87               	movwf	sprintf@c& (0+255),b
  8910  000A28  5058               	movf	??_sprintf& (0+255),w,c
  8911  000A2A  D002               	goto	i2l6789
  8912  000A2C                     i2l647:
  8913                           
  8914                           ; BSR set to: 0
  8915                           ;doprnt.c: 1220: else
  8916                           ;doprnt.c: 1221: c = prec;
  8917  000A2C  C085  F087         	movff	sprintf@prec,sprintf@c
  8918  000A30                     i2l6789:
  8919                           
  8920                           ; BSR set to: 0
  8921                           ;doprnt.c: 1222: prec -= c;
  8922  000A30  0100               	movlb	0	; () banked
  8923  000A32  0100               	movlb	0	; () banked
  8924  000A34  5187               	movf	sprintf@c& (0+255),w,b
  8925  000A36  0100               	movlb	0	; () banked
  8926  000A38  0100               	movlb	0	; () banked
  8927  000A3A  5F85               	subwf	sprintf@prec& (0+255),f,b
  8928  000A3C  0E00               	movlw	0
  8929  000A3E  0100               	movlb	0	; () banked
  8930  000A40  BF87               	btfsc	sprintf@c& (0+255),7,b
  8931  000A42  0EFF               	movlw	255
  8932  000A44  0100               	movlb	0	; () banked
  8933  000A46  0100               	movlb	0	; () banked
  8934  000A48  5B86               	subwfb	(sprintf@prec+1)& (0+255),f,b
  8935                           
  8936                           ; BSR set to: 0
  8937                           ;doprnt.c: 1226: if(c)
  8938  000A4A  0100               	movlb	0	; () banked
  8939  000A4C  0100               	movlb	0	; () banked
  8940  000A4E  5187               	movf	sprintf@c& (0+255),w,b
  8941  000A50  B4D8               	btfsc	status,2,c
  8942  000A52  D00A               	goto	i2l6797
  8943                           
  8944                           ; BSR set to: 0
  8945                           ;doprnt.c: 1228: ((*sp++ = ('.')));
  8946  000A54  C060  FFD9         	movff	sprintf@sp,fsr2l
  8947  000A58  C061  FFDA         	movff	sprintf@sp+1,fsr2h
  8948  000A5C  0E2E               	movlw	46
  8949  000A5E  6EDF               	movwf	indf2,c
  8950                           
  8951                           ; BSR set to: 0
  8952  000A60  0100               	movlb	0	; () banked
  8953  000A62  0100               	movlb	0	; () banked
  8954  000A64  4B60               	infsnz	sprintf@sp& (0+255),f,b
  8955  000A66  2B61               	incf	(sprintf@sp+1)& (0+255),f,b
  8956  000A68                     i2l6797:
  8957                           
  8958                           ; BSR set to: 0
  8959                           ;doprnt.c: 1234: _val._val = (long)(fval * scale(c));
  8960  000A68  C087  F03F         	movff	sprintf@c,?_scale
  8961  000A6C  ECA6  F00F         	call	_scale	;wreg free
  8962  000A70  C041  F06E         	movff	?_scale+2,_sprintf$1397+2
  8963  000A74  C040  F06D         	movff	?_scale+1,_sprintf$1397+1
  8964  000A78  C03F  F06C         	movff	?_scale,_sprintf$1397
  8965                           
  8966                           ;doprnt.c: 1234: _val._val = (long)(fval * scale(c));
  8967  000A7C  C080  F031         	movff	sprintf@fval,?___ftmul+3
  8968  000A80  C081  F032         	movff	sprintf@fval+1,?___ftmul+4
  8969  000A84  C082  F033         	movff	sprintf@fval+2,?___ftmul+5
  8970  000A88  C06C  F02E         	movff	_sprintf$1397,?___ftmul
  8971  000A8C  C06D  F02F         	movff	_sprintf$1397+1,?___ftmul+1
  8972  000A90  C06E  F030         	movff	_sprintf$1397+2,?___ftmul+2
  8973  000A94  ECAC  F019         	call	___ftmul	;wreg free
  8974  000A98  C030  F021         	movff	?___ftmul+2,?___fttol+2
  8975  000A9C  C02F  F020         	movff	?___ftmul+1,?___fttol+1
  8976  000AA0  C02E  F01F         	movff	?___ftmul,?___fttol
  8977  000AA4  ECA5  F01B         	call	___fttol	;wreg free
  8978  000AA8  C022  F08B         	movff	?___fttol+3,sprintf@_val+3
  8979  000AAC  C021  F08A         	movff	?___fttol+2,sprintf@_val+2
  8980  000AB0  C020  F089         	movff	?___fttol+1,sprintf@_val+1
  8981  000AB4  C01F  F088         	movff	?___fttol,sprintf@_val
  8982                           
  8983                           ;doprnt.c: 1235: while(c--) {
  8984  000AB8  D067               	goto	i2l6811
  8985  000ABA                     i2l6801:
  8986                           
  8987                           ;doprnt.c: 1236: unsigned vd = _val._val/dpowers[c];
  8988  000ABA  C088  F001         	movff	sprintf@_val,?___lldiv
  8989  000ABE  C089  F002         	movff	sprintf@_val+1,?___lldiv+1
  8990  000AC2  C08A  F003         	movff	sprintf@_val+2,?___lldiv+2
  8991  000AC6  C08B  F004         	movff	sprintf@_val+3,?___lldiv+3
  8992  000ACA  0100               	movlb	0	; () banked
  8993  000ACC  0100               	movlb	0	; () banked
  8994  000ACE  5187               	movf	sprintf@c& (0+255),w,b
  8995  000AD0  0D04               	mullw	4
  8996  000AD2  0EE5               	movlw	low _dpowers
  8997  000AD4  24F3               	addwf	prodl,w,c
  8998  000AD6  6EF6               	movwf	tblptrl,c
  8999  000AD8  0E7E               	movlw	high _dpowers
  9000  000ADA  20F4               	addwfc	prodh,w,c
  9001  000ADC  6EF7               	movwf	tblptrh,c
  9002  000ADE  0009               	tblrd		*+
  9003  000AE0  CFF5 F005          	movff	tablat,?___lldiv+4
  9004  000AE4  0009               	tblrd		*+
  9005  000AE6  CFF5 F006          	movff	tablat,?___lldiv+5
  9006  000AEA  0009               	tblrd		*+
  9007  000AEC  CFF5 F007          	movff	tablat,?___lldiv+6
  9008  000AF0  000A               	tblrd		*-
  9009  000AF2  CFF5 F008          	movff	tablat,?___lldiv+7
  9010  000AF6  EC37  F01F         	call	___lldiv	;wreg free
  9011  000AFA  C001  F075         	movff	?___lldiv,sprintf@vd_753
  9012  000AFE  C002  F076         	movff	?___lldiv+1,sprintf@vd_753+1
  9013                           
  9014                           ;doprnt.c: 1237: vd %= 10;
  9015  000B02  C075  F001         	movff	sprintf@vd_753,?___lwmod
  9016  000B06  C076  F002         	movff	sprintf@vd_753+1,?___lwmod+1
  9017  000B0A  0E00               	movlw	0
  9018  000B0C  6E04               	movwf	?___lwmod+3,c
  9019  000B0E  0E0A               	movlw	10
  9020  000B10  6E03               	movwf	?___lwmod+2,c
  9021  000B12  EC3C  F022         	call	___lwmod	;wreg free
  9022  000B16  C001  F075         	movff	?___lwmod,sprintf@vd_753
  9023  000B1A  C002  F076         	movff	?___lwmod+1,sprintf@vd_753+1
  9024                           
  9025                           ;doprnt.c: 1238: ((*sp++ = ('0' + vd)));
  9026  000B1E  0100               	movlb	0	; () banked
  9027  000B20  0100               	movlb	0	; () banked
  9028  000B22  5175               	movf	sprintf@vd_753& (0+255),w,b
  9029  000B24  0F30               	addlw	48
  9030  000B26  C060  FFD9         	movff	sprintf@sp,fsr2l
  9031  000B2A  C061  FFDA         	movff	sprintf@sp+1,fsr2h
  9032  000B2E  6EDF               	movwf	indf2,c
  9033                           
  9034                           ; BSR set to: 0
  9035  000B30  0100               	movlb	0	; () banked
  9036  000B32  0100               	movlb	0	; () banked
  9037  000B34  4B60               	infsnz	sprintf@sp& (0+255),f,b
  9038  000B36  2B61               	incf	(sprintf@sp+1)& (0+255),f,b
  9039                           
  9040                           ; BSR set to: 0
  9041                           ;doprnt.c: 1239: _val._val %= dpowers[c];
  9042  000B38  C088  F014         	movff	sprintf@_val,?___llmod
  9043  000B3C  C089  F015         	movff	sprintf@_val+1,?___llmod+1
  9044  000B40  C08A  F016         	movff	sprintf@_val+2,?___llmod+2
  9045  000B44  C08B  F017         	movff	sprintf@_val+3,?___llmod+3
  9046  000B48  0100               	movlb	0	; () banked
  9047  000B4A  0100               	movlb	0	; () banked
  9048  000B4C  5187               	movf	sprintf@c& (0+255),w,b
  9049  000B4E  0D04               	mullw	4
  9050  000B50  0EE5               	movlw	low _dpowers
  9051  000B52  24F3               	addwf	prodl,w,c
  9052  000B54  6EF6               	movwf	tblptrl,c
  9053  000B56  0E7E               	movlw	high _dpowers
  9054  000B58  20F4               	addwfc	prodh,w,c
  9055  000B5A  6EF7               	movwf	tblptrh,c
  9056  000B5C  0009               	tblrd		*+
  9057  000B5E  CFF5 F018          	movff	tablat,?___llmod+4
  9058  000B62  0009               	tblrd		*+
  9059  000B64  CFF5 F019          	movff	tablat,?___llmod+5
  9060  000B68  0009               	tblrd		*+
  9061  000B6A  CFF5 F01A          	movff	tablat,?___llmod+6
  9062  000B6E  000A               	tblrd		*-
  9063  000B70  CFF5 F01B          	movff	tablat,?___llmod+7
  9064  000B74  ECDC  F020         	call	___llmod	;wreg free
  9065  000B78  C017  F08B         	movff	?___llmod+3,sprintf@_val+3
  9066  000B7C  C016  F08A         	movff	?___llmod+2,sprintf@_val+2
  9067  000B80  C015  F089         	movff	?___llmod+1,sprintf@_val+1
  9068  000B84  C014  F088         	movff	?___llmod,sprintf@_val
  9069  000B88                     i2l6811:
  9070  000B88  0100               	movlb	0	; () banked
  9071  000B8A  0100               	movlb	0	; () banked
  9072  000B8C  0787               	decf	sprintf@c& (0+255),f,b
  9073  000B8E  0100               	movlb	0	; () banked
  9074  000B90  2987               	incf	sprintf@c& (0+255),w,b
  9075  000B92  B4D8               	btfsc	status,2,c
  9076  000B94  D010               	goto	i2l6819
  9077  000B96  D791               	goto	i2l6801
  9078  000B98                     i2l6813:
  9079                           
  9080                           ; BSR set to: 0
  9081                           ;doprnt.c: 1243: ((*sp++ = ('0')));
  9082  000B98  C060  FFD9         	movff	sprintf@sp,fsr2l
  9083  000B9C  C061  FFDA         	movff	sprintf@sp+1,fsr2h
  9084  000BA0  0E30               	movlw	48
  9085  000BA2  6EDF               	movwf	indf2,c
  9086                           
  9087                           ; BSR set to: 0
  9088  000BA4  0100               	movlb	0	; () banked
  9089  000BA6  0100               	movlb	0	; () banked
  9090  000BA8  4B60               	infsnz	sprintf@sp& (0+255),f,b
  9091  000BAA  2B61               	incf	(sprintf@sp+1)& (0+255),f,b
  9092                           
  9093                           ; BSR set to: 0
  9094                           ;doprnt.c: 1244: prec--;
  9095  000BAC  0100               	movlb	0	; () banked
  9096  000BAE  0100               	movlb	0	; () banked
  9097  000BB0  0785               	decf	sprintf@prec& (0+255),f,b
  9098  000BB2  A0D8               	btfss	status,0,c
  9099  000BB4  0786               	decf	(sprintf@prec+1)& (0+255),f,b
  9100  000BB6                     i2l6819:
  9101                           
  9102                           ; BSR set to: 0
  9103  000BB6  0100               	movlb	0	; () banked
  9104  000BB8  0100               	movlb	0	; () banked
  9105  000BBA  5186               	movf	(sprintf@prec+1)& (0+255),w,b
  9106  000BBC  1185               	iorwf	sprintf@prec& (0+255),w,b
  9107  000BBE  B4D8               	btfsc	status,2,c
  9108  000BC0  D1DD               	goto	i2l6921
  9109  000BC2  D7EA               	goto	i2l6813
  9110  000BC4                     i2l608:
  9111                           
  9112                           ; BSR set to: 0
  9113                           ;doprnt.c: 1253: }
  9114                           ;doprnt.c: 1260: {
  9115                           ;doprnt.c: 1262: if(flag & 0x10)
  9116  000BC4  0100               	movlb	0	; () banked
  9117  000BC6  0100               	movlb	0	; () banked
  9118  000BC8  A97E               	btfss	sprintf@flag& (0+255),4,b
  9119  000BCA  D012               	goto	i2l6825
  9120                           
  9121                           ; BSR set to: 0
  9122                           ;doprnt.c: 1263: _val._val = (*(long *)__va_arg((*(long **)ap), (long)0));
  9123  000BCC  C07A  FFD9         	movff	sprintf@ap,fsr2l
  9124  000BD0  C07B  FFDA         	movff	sprintf@ap+1,fsr2h
  9125  000BD4  0100               	movlb	0	; () banked
  9126  000BD6  CFDE F088          	movff	postinc2,sprintf@_val
  9127  000BDA  0100               	movlb	0	; () banked
  9128  000BDC  CFDE F089          	movff	postinc2,sprintf@_val+1
  9129  000BE0  0100               	movlb	0	; () banked
  9130  000BE2  CFDE F08A          	movff	postinc2,sprintf@_val+2
  9131  000BE6  0100               	movlb	0	; () banked
  9132  000BE8  CFDE F08B          	movff	postinc2,sprintf@_val+3
  9133                           
  9134                           ; BSR set to: 0
  9135  000BEC  0E04               	movlw	4
  9136  000BEE  D014               	goto	L13
  9137  000BF0                     i2l6825:
  9138                           
  9139                           ; BSR set to: 0
  9140                           ;doprnt.c: 1264: else
  9141                           ;doprnt.c: 1266: _val._val = (long)(*(int *)__va_arg((*(int **)ap), (int)0));
  9142  000BF0  C07A  FFD9         	movff	sprintf@ap,fsr2l
  9143  000BF4  C07B  FFDA         	movff	sprintf@ap+1,fsr2h
  9144  000BF8  0100               	movlb	0	; () banked
  9145  000BFA  CFDE F088          	movff	postinc2,sprintf@_val
  9146  000BFE  0100               	movlb	0	; () banked
  9147  000C00  CFDD F089          	movff	postdec2,sprintf@_val+1
  9148  000C04  0100               	movlb	0	; () banked
  9149  000C06  0E00               	movlw	0
  9150  000C08  0100               	movlb	0	; () banked
  9151  000C0A  BF89               	btfsc	(sprintf@_val+1)& (0+255),7,b
  9152  000C0C  0EFF               	movlw	-1
  9153  000C0E  0100               	movlb	0	; () banked
  9154  000C10  6F8A               	movwf	(sprintf@_val+2)& (0+255),b
  9155  000C12  0100               	movlb	0	; () banked
  9156  000C14  6F8B               	movwf	(sprintf@_val+3)& (0+255),b
  9157                           
  9158                           ; BSR set to: 0
  9159  000C16  0E02               	movlw	2
  9160  000C18                     L13:
  9161  000C18  0100               	movlb	0	; () banked
  9162  000C1A  0100               	movlb	0	; () banked
  9163  000C1C  277A               	addwf	sprintf@ap& (0+255),f,b
  9164  000C1E  0E00               	movlw	0
  9165  000C20  0100               	movlb	0	; () banked
  9166  000C22  237B               	addwfc	(sprintf@ap+1)& (0+255),f,b
  9167                           
  9168                           ; BSR set to: 0
  9169                           ;doprnt.c: 1268: if((long)_val._val < 0) {
  9170                           
  9171                           ; BSR set to: 0
  9172  000C24  0100               	movlb	0	; () banked
  9173  000C26  0100               	movlb	0	; () banked
  9174  000C28  AF8B               	btfss	(sprintf@_val+3)& (0+255),7,b
  9175  000C2A  D014               	goto	i2l6835
  9176                           
  9177                           ; BSR set to: 0
  9178                           ;doprnt.c: 1269: flag |= 0x03;
  9179  000C2C  0E03               	movlw	3
  9180  000C2E  0100               	movlb	0	; () banked
  9181  000C30  0100               	movlb	0	; () banked
  9182  000C32  137E               	iorwf	sprintf@flag& (0+255),f,b
  9183                           
  9184                           ; BSR set to: 0
  9185                           ;doprnt.c: 1270: _val._val = -_val._val;
  9186  000C34  0100               	movlb	0	; () banked
  9187  000C36  0100               	movlb	0	; () banked
  9188  000C38  1F8B               	comf	(sprintf@_val+3)& (0+255),f,b
  9189  000C3A  0100               	movlb	0	; () banked
  9190  000C3C  1F8A               	comf	(sprintf@_val+2)& (0+255),f,b
  9191  000C3E  0100               	movlb	0	; () banked
  9192  000C40  1F89               	comf	(sprintf@_val+1)& (0+255),f,b
  9193  000C42  0100               	movlb	0	; () banked
  9194  000C44  6D88               	negf	sprintf@_val& (0+255),b
  9195  000C46  0E00               	movlw	0
  9196  000C48  0100               	movlb	0	; () banked
  9197  000C4A  2389               	addwfc	(sprintf@_val+1)& (0+255),f,b
  9198  000C4C  0100               	movlb	0	; () banked
  9199  000C4E  238A               	addwfc	(sprintf@_val+2)& (0+255),f,b
  9200  000C50  0100               	movlb	0	; () banked
  9201  000C52  238B               	addwfc	(sprintf@_val+3)& (0+255),f,b
  9202  000C54                     i2l6835:
  9203                           
  9204                           ; BSR set to: 0
  9205                           ;doprnt.c: 1271: }
  9206                           ;doprnt.c: 1273: }
  9207                           ;doprnt.c: 1297: if(prec == 0 && _val._val == 0)
  9208  000C54  0100               	movlb	0	; () banked
  9209  000C56  0100               	movlb	0	; () banked
  9210  000C58  5186               	movf	(sprintf@prec+1)& (0+255),w,b
  9211  000C5A  1185               	iorwf	sprintf@prec& (0+255),w,b
  9212  000C5C  A4D8               	btfss	status,2,c
  9213  000C5E  D00C               	goto	i2l6841
  9214                           
  9215                           ; BSR set to: 0
  9216  000C60  0100               	movlb	0	; () banked
  9217  000C62  0100               	movlb	0	; () banked
  9218  000C64  518B               	movf	(sprintf@_val+3)& (0+255),w,b
  9219  000C66  1188               	iorwf	sprintf@_val& (0+255),w,b
  9220  000C68  1189               	iorwf	(sprintf@_val+1)& (0+255),w,b
  9221  000C6A  118A               	iorwf	(sprintf@_val+2)& (0+255),w,b
  9222  000C6C  A4D8               	btfss	status,2,c
  9223  000C6E  D004               	goto	i2l6841
  9224                           
  9225                           ; BSR set to: 0
  9226                           ;doprnt.c: 1298: prec++;
  9227  000C70  0100               	movlb	0	; () banked
  9228  000C72  0100               	movlb	0	; () banked
  9229  000C74  4B85               	infsnz	sprintf@prec& (0+255),f,b
  9230  000C76  2B86               	incf	(sprintf@prec+1)& (0+255),f,b
  9231  000C78                     i2l6841:
  9232                           
  9233                           ; BSR set to: 0
  9234                           ;doprnt.c: 1312: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  9235  000C78  6E58               	movwf	??_sprintf& (0+255),c
  9236  000C7A  0E01               	movlw	1
  9237  000C7C  0100               	movlb	0	; () banked
  9238  000C7E  0100               	movlb	0	; () banked
  9239  000C80  6F87               	movwf	sprintf@c& (0+255),b
  9240  000C82  5058               	movf	??_sprintf& (0+255),w,c
  9241  000C84                     
  9242                           ; BSR set to: 0
  9243  000C84  0100               	movlb	0	; () banked
  9244  000C86  0100               	movlb	0	; () banked
  9245  000C88  5187               	movf	sprintf@c& (0+255),w,b
  9246  000C8A  0A0A               	xorlw	10
  9247  000C8C  B4D8               	btfsc	status,2,c
  9248  000C8E  D021               	goto	i2l6855
  9249                           
  9250                           ; BSR set to: 0
  9251                           ;doprnt.c: 1313: if(_val._val < dpowers[c])
  9252                           
  9253                           ; BSR set to: 0
  9254                           
  9255                           ; BSR set to: 0
  9256  000C90  0100               	movlb	0	; () banked
  9257  000C92  0100               	movlb	0	; () banked
  9258  000C94  5187               	movf	sprintf@c& (0+255),w,b
  9259  000C96  0D04               	mullw	4
  9260  000C98  0EE5               	movlw	low _dpowers
  9261  000C9A  24F3               	addwf	prodl,w,c
  9262  000C9C  6EF6               	movwf	tblptrl,c
  9263  000C9E  0E7E               	movlw	high _dpowers
  9264  000CA0  20F4               	addwfc	prodh,w,c
  9265  000CA2  6EF7               	movwf	tblptrh,c
  9266  000CA4  0009               	tblrd		*+
  9267  000CA6  50F5               	movf	tablat,w,c
  9268  000CA8  0100               	movlb	0	; () banked
  9269  000CAA  0100               	movlb	0	; () banked
  9270  000CAC  5D88               	subwf	sprintf@_val& (0+255),w,b
  9271  000CAE  0009               	tblrd		*+
  9272  000CB0  50F5               	movf	tablat,w,c
  9273  000CB2  0100               	movlb	0	; () banked
  9274  000CB4  5989               	subwfb	(sprintf@_val+1)& (0+255),w,b
  9275  000CB6  0009               	tblrd		*+
  9276  000CB8  50F5               	movf	tablat,w,c
  9277  000CBA  0100               	movlb	0	; () banked
  9278  000CBC  598A               	subwfb	(sprintf@_val+2)& (0+255),w,b
  9279  000CBE  0009               	tblrd		*+
  9280  000CC0  50F5               	movf	tablat,w,c
  9281  000CC2  0100               	movlb	0	; () banked
  9282  000CC4  598B               	subwfb	(sprintf@_val+3)& (0+255),w,b
  9283  000CC6  A0D8               	btfss	status,0,c
  9284  000CC8  D004               	goto	i2l6855
  9285                           
  9286                           ; BSR set to: 0
  9287                           
  9288                           ; BSR set to: 0
  9289                           
  9290                           ; BSR set to: 0
  9291                           ;doprnt.c: 1314: break;
  9292  000CCA  0100               	movlb	0	; () banked
  9293  000CCC  0100               	movlb	0	; () banked
  9294  000CCE  2B87               	incf	sprintf@c& (0+255),f,b
  9295  000CD0  D7D9               	goto	L14
  9296  000CD2                     i2l6855:
  9297                           
  9298                           ; BSR set to: 0
  9299                           ;doprnt.c: 1346: if(c < prec)
  9300  000CD2  0E80               	movlw	128
  9301  000CD4  0100               	movlb	0	; () banked
  9302  000CD6  0100               	movlb	0	; () banked
  9303  000CD8  BF87               	btfsc	sprintf@c& (0+255),7,b
  9304  000CDA  0E7F               	movlw	127
  9305  000CDC  6E58               	movwf	??_sprintf& (0+255),c
  9306  000CDE  0100               	movlb	0	; () banked
  9307  000CE0  0100               	movlb	0	; () banked
  9308  000CE2  5185               	movf	sprintf@prec& (0+255),w,b
  9309  000CE4  0100               	movlb	0	; () banked
  9310  000CE6  0100               	movlb	0	; () banked
  9311  000CE8  5D87               	subwf	sprintf@c& (0+255),w,b
  9312  000CEA  0100               	movlb	0	; () banked
  9313  000CEC  0100               	movlb	0	; () banked
  9314  000CEE  5186               	movf	(sprintf@prec+1)& (0+255),w,b
  9315  000CF0  0A80               	xorlw	128
  9316  000CF2  5858               	subwfb	??_sprintf& (0+255),w,c
  9317  000CF4  B0D8               	btfsc	status,0,c
  9318  000CF6  D003               	goto	i2l6859
  9319                           
  9320                           ; BSR set to: 0
  9321                           ;doprnt.c: 1347: c = prec;
  9322  000CF8  C085  F087         	movff	sprintf@prec,sprintf@c
  9323  000CFC  D01E               	goto	i2l6863
  9324  000CFE                     i2l6859:
  9325                           
  9326                           ; BSR set to: 0
  9327                           ;doprnt.c: 1348: else if(prec < c)
  9328  000CFE  0100               	movlb	0	; () banked
  9329  000D00  0100               	movlb	0	; () banked
  9330  000D02  5186               	movf	(sprintf@prec+1)& (0+255),w,b
  9331  000D04  0A80               	xorlw	128
  9332  000D06  6E58               	movwf	??_sprintf& (0+255),c
  9333  000D08  0100               	movlb	0	; () banked
  9334  000D0A  0100               	movlb	0	; () banked
  9335  000D0C  5187               	movf	sprintf@c& (0+255),w,b
  9336  000D0E  0100               	movlb	0	; () banked
  9337  000D10  0100               	movlb	0	; () banked
  9338  000D12  5D85               	subwf	sprintf@prec& (0+255),w,b
  9339  000D14  0E80               	movlw	128
  9340  000D16  0100               	movlb	0	; () banked
  9341  000D18  0100               	movlb	0	; () banked
  9342  000D1A  BF87               	btfsc	sprintf@c& (0+255),7,b
  9343  000D1C  0E7F               	movlw	127
  9344  000D1E  5858               	subwfb	??_sprintf& (0+255),w,c
  9345  000D20  B0D8               	btfsc	status,0,c
  9346  000D22  D00B               	goto	i2l6863
  9347                           
  9348                           ; BSR set to: 0
  9349                           ;doprnt.c: 1349: prec = c;
  9350  000D24  0100               	movlb	0	; () banked
  9351  000D26  0100               	movlb	0	; () banked
  9352  000D28  5187               	movf	sprintf@c& (0+255),w,b
  9353  000D2A  0100               	movlb	0	; () banked
  9354  000D2C  0100               	movlb	0	; () banked
  9355  000D2E  6F85               	movwf	sprintf@prec& (0+255),b
  9356  000D30  0100               	movlb	0	; () banked
  9357  000D32  6B86               	clrf	(sprintf@prec+1)& (0+255),b
  9358  000D34  0100               	movlb	0	; () banked
  9359  000D36  BF85               	btfsc	sprintf@prec& (0+255),7,b
  9360  000D38  0786               	decf	(sprintf@prec+1)& (0+255),f,b
  9361  000D3A                     i2l6863:
  9362                           
  9363                           ; BSR set to: 0
  9364                           ;doprnt.c: 1352: if(width && flag & 0x03)
  9365  000D3A  0100               	movlb	0	; () banked
  9366  000D3C  0100               	movlb	0	; () banked
  9367  000D3E  5184               	movf	(sprintf@width+1)& (0+255),w,b
  9368  000D40  1183               	iorwf	sprintf@width& (0+255),w,b
  9369  000D42  B4D8               	btfsc	status,2,c
  9370  000D44  D013               	goto	i2l6869
  9371                           
  9372                           ; BSR set to: 0
  9373  000D46  0E03               	movlw	3
  9374  000D48  0100               	movlb	0	; () banked
  9375  000D4A  0100               	movlb	0	; () banked
  9376  000D4C  157E               	andwf	sprintf@flag& (0+255),w,b
  9377  000D4E  6E58               	movwf	??_sprintf& (0+255),c
  9378  000D50  0E00               	movlw	0
  9379  000D52  0100               	movlb	0	; () banked
  9380  000D54  0100               	movlb	0	; () banked
  9381  000D56  157F               	andwf	(sprintf@flag+1)& (0+255),w,b
  9382  000D58  6E59               	movwf	(??_sprintf+1)& (0+255),c
  9383  000D5A  5059               	movf	??_sprintf+1,w,c
  9384  000D5C  1058               	iorwf	??_sprintf,w,c
  9385  000D5E  B4D8               	btfsc	status,2,c
  9386  000D60  D005               	goto	i2l6869
  9387                           
  9388                           ; BSR set to: 0
  9389                           ;doprnt.c: 1353: width--;
  9390  000D62  0100               	movlb	0	; () banked
  9391  000D64  0100               	movlb	0	; () banked
  9392  000D66  0783               	decf	sprintf@width& (0+255),f,b
  9393  000D68  A0D8               	btfss	status,0,c
  9394  000D6A  0784               	decf	(sprintf@width+1)& (0+255),f,b
  9395  000D6C                     i2l6869:
  9396                           
  9397                           ; BSR set to: 0
  9398                           ;doprnt.c: 1355: if(flag & 0x4000) {
  9399  000D6C  0100               	movlb	0	; () banked
  9400  000D6E  0100               	movlb	0	; () banked
  9401  000D70  AD7F               	btfss	(sprintf@flag+1)& (0+255),6,b
  9402  000D72  D026               	goto	i2l6877
  9403                           
  9404                           ; BSR set to: 0
  9405                           ;doprnt.c: 1356: if(width > prec)
  9406  000D74  0100               	movlb	0	; () banked
  9407  000D76  0100               	movlb	0	; () banked
  9408  000D78  5186               	movf	(sprintf@prec+1)& (0+255),w,b
  9409  000D7A  0A80               	xorlw	128
  9410  000D7C  6E58               	movwf	??_sprintf& (0+255),c
  9411  000D7E  0100               	movlb	0	; () banked
  9412  000D80  0100               	movlb	0	; () banked
  9413  000D82  5183               	movf	sprintf@width& (0+255),w,b
  9414  000D84  0100               	movlb	0	; () banked
  9415  000D86  0100               	movlb	0	; () banked
  9416  000D88  5D85               	subwf	sprintf@prec& (0+255),w,b
  9417  000D8A  0100               	movlb	0	; () banked
  9418  000D8C  0100               	movlb	0	; () banked
  9419  000D8E  5184               	movf	(sprintf@width+1)& (0+255),w,b
  9420  000D90  0A80               	xorlw	128
  9421  000D92  5858               	subwfb	??_sprintf& (0+255),w,c
  9422  000D94  B0D8               	btfsc	status,0,c
  9423  000D96  D00D               	goto	i2l6875
  9424                           
  9425                           ; BSR set to: 0
  9426                           ;doprnt.c: 1357: width -= prec;
  9427  000D98  0100               	movlb	0	; () banked
  9428  000D9A  0100               	movlb	0	; () banked
  9429  000D9C  5185               	movf	sprintf@prec& (0+255),w,b
  9430  000D9E  0100               	movlb	0	; () banked
  9431  000DA0  0100               	movlb	0	; () banked
  9432  000DA2  5F83               	subwf	sprintf@width& (0+255),f,b
  9433  000DA4  0100               	movlb	0	; () banked
  9434  000DA6  0100               	movlb	0	; () banked
  9435  000DA8  5186               	movf	(sprintf@prec+1)& (0+255),w,b
  9436  000DAA  0100               	movlb	0	; () banked
  9437  000DAC  0100               	movlb	0	; () banked
  9438  000DAE  5B84               	subwfb	(sprintf@width+1)& (0+255),f,b
  9439  000DB0  D007               	goto	i2l6877
  9440  000DB2                     i2l6875:
  9441                           
  9442                           ; BSR set to: 0
  9443                           ;doprnt.c: 1358: else
  9444                           ;doprnt.c: 1359: width = 0;
  9445  000DB2  0E00               	movlw	0
  9446  000DB4  0100               	movlb	0	; () banked
  9447  000DB6  0100               	movlb	0	; () banked
  9448  000DB8  6F84               	movwf	(sprintf@width+1)& (0+255),b
  9449  000DBA  0E00               	movlw	0
  9450  000DBC  0100               	movlb	0	; () banked
  9451  000DBE  6F83               	movwf	sprintf@width& (0+255),b
  9452  000DC0                     i2l6877:
  9453                           
  9454                           ; BSR set to: 0
  9455                           ;doprnt.c: 1360: }
  9456                           ;doprnt.c: 1388: if(width > c)
  9457  000DC0  0E80               	movlw	128
  9458  000DC2  0100               	movlb	0	; () banked
  9459  000DC4  0100               	movlb	0	; () banked
  9460  000DC6  BF87               	btfsc	sprintf@c& (0+255),7,b
  9461  000DC8  0E7F               	movlw	127
  9462  000DCA  6E58               	movwf	??_sprintf& (0+255),c
  9463  000DCC  0100               	movlb	0	; () banked
  9464  000DCE  0100               	movlb	0	; () banked
  9465  000DD0  5183               	movf	sprintf@width& (0+255),w,b
  9466  000DD2  0100               	movlb	0	; () banked
  9467  000DD4  0100               	movlb	0	; () banked
  9468  000DD6  5D87               	subwf	sprintf@c& (0+255),w,b
  9469  000DD8  0100               	movlb	0	; () banked
  9470  000DDA  0100               	movlb	0	; () banked
  9471  000DDC  5184               	movf	(sprintf@width+1)& (0+255),w,b
  9472  000DDE  0A80               	xorlw	128
  9473  000DE0  5858               	subwfb	??_sprintf& (0+255),w,c
  9474  000DE2  B0D8               	btfsc	status,0,c
  9475  000DE4  D00E               	goto	i2l6881
  9476                           
  9477                           ; BSR set to: 0
  9478                           ;doprnt.c: 1389: width -= c;
  9479  000DE6  0100               	movlb	0	; () banked
  9480  000DE8  0100               	movlb	0	; () banked
  9481  000DEA  5187               	movf	sprintf@c& (0+255),w,b
  9482  000DEC  0100               	movlb	0	; () banked
  9483  000DEE  0100               	movlb	0	; () banked
  9484  000DF0  5F83               	subwf	sprintf@width& (0+255),f,b
  9485  000DF2  0E00               	movlw	0
  9486  000DF4  0100               	movlb	0	; () banked
  9487  000DF6  BF87               	btfsc	sprintf@c& (0+255),7,b
  9488  000DF8  0EFF               	movlw	255
  9489  000DFA  0100               	movlb	0	; () banked
  9490  000DFC  0100               	movlb	0	; () banked
  9491  000DFE  5B84               	subwfb	(sprintf@width+1)& (0+255),f,b
  9492  000E00  D007               	goto	i2l6883
  9493  000E02                     i2l6881:
  9494                           
  9495                           ; BSR set to: 0
  9496                           ;doprnt.c: 1390: else
  9497                           ;doprnt.c: 1391: width = 0;
  9498  000E02  0E00               	movlw	0
  9499  000E04  0100               	movlb	0	; () banked
  9500  000E06  0100               	movlb	0	; () banked
  9501  000E08  6F84               	movwf	(sprintf@width+1)& (0+255),b
  9502  000E0A  0E00               	movlw	0
  9503  000E0C  0100               	movlb	0	; () banked
  9504  000E0E  6F83               	movwf	sprintf@width& (0+255),b
  9505  000E10                     i2l6883:
  9506                           
  9507                           ; BSR set to: 0
  9508                           ;doprnt.c: 1394: if(flag & 0x04) {
  9509  000E10  0100               	movlb	0	; () banked
  9510  000E12  0100               	movlb	0	; () banked
  9511  000E14  A57E               	btfss	sprintf@flag& (0+255),2,b
  9512  000E16  D02E               	goto	i2l6899
  9513                           
  9514                           ; BSR set to: 0
  9515                           ;doprnt.c: 1399: if(flag & 0x03)
  9516  000E18  0E03               	movlw	3
  9517  000E1A  0100               	movlb	0	; () banked
  9518  000E1C  0100               	movlb	0	; () banked
  9519  000E1E  157E               	andwf	sprintf@flag& (0+255),w,b
  9520  000E20  6E58               	movwf	??_sprintf& (0+255),c
  9521  000E22  0E00               	movlw	0
  9522  000E24  0100               	movlb	0	; () banked
  9523  000E26  0100               	movlb	0	; () banked
  9524  000E28  157F               	andwf	(sprintf@flag+1)& (0+255),w,b
  9525  000E2A  6E59               	movwf	(??_sprintf+1)& (0+255),c
  9526  000E2C  5059               	movf	??_sprintf+1,w,c
  9527  000E2E  1058               	iorwf	??_sprintf,w,c
  9528  000E30  B4D8               	btfsc	status,2,c
  9529  000E32  D00A               	goto	i2l6891
  9530                           
  9531                           ; BSR set to: 0
  9532                           ;doprnt.c: 1400: ((*sp++ = ('-')));
  9533  000E34  C060  FFD9         	movff	sprintf@sp,fsr2l
  9534  000E38  C061  FFDA         	movff	sprintf@sp+1,fsr2h
  9535  000E3C  0E2D               	movlw	45
  9536  000E3E  6EDF               	movwf	indf2,c
  9537                           
  9538                           ; BSR set to: 0
  9539  000E40  0100               	movlb	0	; () banked
  9540  000E42  0100               	movlb	0	; () banked
  9541  000E44  4B60               	infsnz	sprintf@sp& (0+255),f,b
  9542  000E46  2B61               	incf	(sprintf@sp+1)& (0+255),f,b
  9543  000E48                     i2l6891:
  9544                           
  9545                           ; BSR set to: 0
  9546                           ;doprnt.c: 1422: if(width)
  9547  000E48  0100               	movlb	0	; () banked
  9548  000E4A  0100               	movlb	0	; () banked
  9549  000E4C  5184               	movf	(sprintf@width+1)& (0+255),w,b
  9550  000E4E  1183               	iorwf	sprintf@width& (0+255),w,b
  9551  000E50  B4D8               	btfsc	status,2,c
  9552  000E52  D089               	goto	i2l6919
  9553                           
  9554                           ; BSR set to: 0
  9555                           ;doprnt.c: 1424: ((*sp++ = ('0')));
  9556                           
  9557                           ; BSR set to: 0
  9558                           
  9559                           ;doprnt.c: 1423: do
  9560  000E54  C060  FFD9         	movff	sprintf@sp,fsr2l
  9561  000E58  C061  FFDA         	movff	sprintf@sp+1,fsr2h
  9562  000E5C  0E30               	movlw	48
  9563  000E5E  6EDF               	movwf	indf2,c
  9564                           
  9565                           ; BSR set to: 0
  9566  000E60  0100               	movlb	0	; () banked
  9567  000E62  0100               	movlb	0	; () banked
  9568  000E64  4B60               	infsnz	sprintf@sp& (0+255),f,b
  9569  000E66  2B61               	incf	(sprintf@sp+1)& (0+255),f,b
  9570                           
  9571                           ; BSR set to: 0
  9572                           ;doprnt.c: 1425: while(--width);
  9573  000E68  0100               	movlb	0	; () banked
  9574  000E6A  0100               	movlb	0	; () banked
  9575  000E6C  0783               	decf	sprintf@width& (0+255),f,b
  9576  000E6E  A0D8               	btfss	status,0,c
  9577  000E70  0784               	decf	(sprintf@width+1)& (0+255),f,b
  9578  000E72  D7EB               	goto	L16
  9579  000E74                     i2l6899:
  9580                           
  9581                           ; BSR set to: 0
  9582                           ;doprnt.c: 1429: {
  9583                           ;doprnt.c: 1431: if(width
  9584                           ;doprnt.c: 1435: )
  9585  000E74  0100               	movlb	0	; () banked
  9586  000E76  0100               	movlb	0	; () banked
  9587  000E78  5184               	movf	(sprintf@width+1)& (0+255),w,b
  9588  000E7A  1183               	iorwf	sprintf@width& (0+255),w,b
  9589  000E7C  B4D8               	btfsc	status,2,c
  9590  000E7E  D014               	goto	i2l6907
  9591  000E80                     i2l6901:
  9592                           
  9593                           ; BSR set to: 0
  9594                           ;doprnt.c: 1437: ((*sp++ = (' ')));
  9595  000E80  C060  FFD9         	movff	sprintf@sp,fsr2l
  9596  000E84  C061  FFDA         	movff	sprintf@sp+1,fsr2h
  9597  000E88  0E20               	movlw	32
  9598  000E8A  6EDF               	movwf	indf2,c
  9599                           
  9600                           ; BSR set to: 0
  9601  000E8C  0100               	movlb	0	; () banked
  9602  000E8E  0100               	movlb	0	; () banked
  9603  000E90  4B60               	infsnz	sprintf@sp& (0+255),f,b
  9604  000E92  2B61               	incf	(sprintf@sp+1)& (0+255),f,b
  9605                           
  9606                           ; BSR set to: 0
  9607                           ;doprnt.c: 1438: while(--width);
  9608  000E94  0100               	movlb	0	; () banked
  9609  000E96  0100               	movlb	0	; () banked
  9610  000E98  0783               	decf	sprintf@width& (0+255),f,b
  9611  000E9A  A0D8               	btfss	status,0,c
  9612  000E9C  0784               	decf	(sprintf@width+1)& (0+255),f,b
  9613  000E9E  0100               	movlb	0	; () banked
  9614  000EA0  5184               	movf	(sprintf@width+1)& (0+255),w,b
  9615  000EA2  1183               	iorwf	sprintf@width& (0+255),w,b
  9616  000EA4  A4D8               	btfss	status,2,c
  9617  000EA6  D7EC               	goto	i2l6901
  9618  000EA8                     i2l6907:
  9619                           
  9620                           ; BSR set to: 0
  9621                           ;doprnt.c: 1445: if(flag & 0x03)
  9622  000EA8  0E03               	movlw	3
  9623  000EAA  0100               	movlb	0	; () banked
  9624  000EAC  0100               	movlb	0	; () banked
  9625  000EAE  157E               	andwf	sprintf@flag& (0+255),w,b
  9626  000EB0  6E58               	movwf	??_sprintf& (0+255),c
  9627  000EB2  0E00               	movlw	0
  9628  000EB4  0100               	movlb	0	; () banked
  9629  000EB6  0100               	movlb	0	; () banked
  9630  000EB8  157F               	andwf	(sprintf@flag+1)& (0+255),w,b
  9631  000EBA  6E59               	movwf	(??_sprintf+1)& (0+255),c
  9632  000EBC  5059               	movf	??_sprintf+1,w,c
  9633  000EBE  1058               	iorwf	??_sprintf,w,c
  9634  000EC0  B4D8               	btfsc	status,2,c
  9635  000EC2  D051               	goto	i2l6919
  9636                           
  9637                           ; BSR set to: 0
  9638                           ;doprnt.c: 1446: ((*sp++ = ('-')));
  9639  000EC4  C060  FFD9         	movff	sprintf@sp,fsr2l
  9640  000EC8  C061  FFDA         	movff	sprintf@sp+1,fsr2h
  9641  000ECC  0E2D               	movlw	45
  9642  000ECE  6EDF               	movwf	indf2,c
  9643  000ED0  D046               	goto	L15
  9644  000ED2                     i2l6913:
  9645                           
  9646                           ; BSR set to: 0
  9647                           ;doprnt.c: 1485: {
  9648                           ;doprnt.c: 1496: c = (_val._val / dpowers[prec]) % 10 + '0';
  9649  000ED2  0100               	movlb	0	; () banked
  9650  000ED4  C085  F058         	movff	sprintf@prec,??_sprintf
  9651  000ED8  0100               	movlb	0	; () banked
  9652  000EDA  C086  F059         	movff	sprintf@prec+1,??_sprintf+1
  9653  000EDE  90D8               	bcf	status,0,c
  9654  000EE0  3658               	rlcf	??_sprintf,f,c
  9655  000EE2  3659               	rlcf	??_sprintf+1,f,c
  9656  000EE4  90D8               	bcf	status,0,c
  9657  000EE6  3658               	rlcf	??_sprintf,f,c
  9658  000EE8  3659               	rlcf	??_sprintf+1,f,c
  9659  000EEA  0EE5               	movlw	low _dpowers
  9660  000EEC  2458               	addwf	??_sprintf,w,c
  9661  000EEE  6EF6               	movwf	tblptrl,c
  9662  000EF0  0E7E               	movlw	high _dpowers
  9663  000EF2  2059               	addwfc	??_sprintf+1,w,c
  9664  000EF4  6EF7               	movwf	tblptrh,c
  9665  000EF6  0009               	tblrd		*+
  9666  000EF8  CFF5 F005          	movff	tablat,?___lldiv+4
  9667  000EFC  0009               	tblrd		*+
  9668  000EFE  CFF5 F006          	movff	tablat,?___lldiv+5
  9669  000F02  0009               	tblrd		*+
  9670  000F04  CFF5 F007          	movff	tablat,?___lldiv+6
  9671  000F08  000A               	tblrd		*-
  9672  000F0A  CFF5 F008          	movff	tablat,?___lldiv+7
  9673  000F0E  C088  F001         	movff	sprintf@_val,?___lldiv
  9674  000F12  C089  F002         	movff	sprintf@_val+1,?___lldiv+1
  9675  000F16  C08A  F003         	movff	sprintf@_val+2,?___lldiv+2
  9676  000F1A  C08B  F004         	movff	sprintf@_val+3,?___lldiv+3
  9677  000F1E  EC37  F01F         	call	___lldiv	;wreg free
  9678  000F22  C004  F017         	movff	?___lldiv+3,?___llmod+3
  9679  000F26  C003  F016         	movff	?___lldiv+2,?___llmod+2
  9680  000F2A  C002  F015         	movff	?___lldiv+1,?___llmod+1
  9681  000F2E  C001  F014         	movff	?___lldiv,?___llmod
  9682  000F32  0E0A               	movlw	10
  9683  000F34  6E18               	movwf	?___llmod+4,c
  9684  000F36  0E00               	movlw	0
  9685  000F38  6E19               	movwf	?___llmod+5,c
  9686  000F3A  0E00               	movlw	0
  9687  000F3C  6E1A               	movwf	?___llmod+6,c
  9688  000F3E  0E00               	movlw	0
  9689  000F40  6E1B               	movwf	?___llmod+7,c
  9690  000F42  ECDC  F020         	call	___llmod	;wreg free
  9691  000F46  5014               	movf	?___llmod,w,c
  9692  000F48  0F30               	addlw	48
  9693  000F4A  0100               	movlb	0	; () banked
  9694  000F4C  0100               	movlb	0	; () banked
  9695  000F4E  6F87               	movwf	sprintf@c& (0+255),b
  9696                           
  9697                           ; BSR set to: 0
  9698                           ;doprnt.c: 1530: }
  9699                           ;doprnt.c: 1531: ((*sp++ = (c)));
  9700  000F50  C060  FFD9         	movff	sprintf@sp,fsr2l
  9701  000F54  C061  FFDA         	movff	sprintf@sp+1,fsr2h
  9702  000F58  0100               	movlb	0	; () banked
  9703  000F5A  C087  FFDF         	movff	sprintf@c,indf2
  9704  000F5E                     L15:
  9705                           
  9706                           ; BSR set to: 0
  9707  000F5E  0100               	movlb	0	; () banked
  9708  000F60  0100               	movlb	0	; () banked
  9709  000F62  4B60               	infsnz	sprintf@sp& (0+255),f,b
  9710  000F64  2B61               	incf	(sprintf@sp+1)& (0+255),f,b
  9711  000F66                     i2l6919:
  9712                           
  9713                           ; BSR set to: 0
  9714  000F66  0100               	movlb	0	; () banked
  9715  000F68  0100               	movlb	0	; () banked
  9716  000F6A  0785               	decf	sprintf@prec& (0+255),f,b
  9717  000F6C  A0D8               	btfss	status,0,c
  9718  000F6E  0786               	decf	(sprintf@prec+1)& (0+255),f,b
  9719  000F70  0100               	movlb	0	; () banked
  9720  000F72  2985               	incf	sprintf@prec& (0+255),w,b
  9721  000F74  B4D8               	btfsc	status,2,c
  9722  000F76  2986               	incf	(sprintf@prec+1)& (0+255),w,b
  9723  000F78  A4D8               	btfss	status,2,c
  9724  000F7A  D7AB               	goto	i2l6913
  9725  000F7C                     i2l6921:
  9726                           
  9727                           ; BSR set to: 0
  9728  000F7C  0100               	movlb	0	; () banked
  9729  000F7E  C062  FFF6         	movff	sprintf@f,tblptrl
  9730  000F82  0100               	movlb	0	; () banked
  9731  000F84  C063  FFF7         	movff	sprintf@f+1,tblptrh
  9732  000F88  0100               	movlb	0	; () banked
  9733  000F8A  0100               	movlb	0	; () banked
  9734  000F8C  4B62               	infsnz	sprintf@f& (0+255),f,b
  9735  000F8E  2B63               	incf	(sprintf@f+1)& (0+255),f,b
  9736  000F90  0008               	tblrd		*
  9737  000F92  0100               	movlb	0	; () banked
  9738  000F94  CFF5 F087          	movff	tablat,sprintf@c
  9739  000F98  0100               	movlb	0	; () banked
  9740  000F9A  6787               	tstfsz	sprintf@c& (0+255),b
  9741  000F9C  EF19  F000         	goto	i2l6529
  9742  000FA0                     i2l6923:
  9743                           
  9744                           ; BSR set to: 0
  9745                           ;doprnt.c: 1545: *sp = 0;
  9746  000FA0  C060  FFD9         	movff	sprintf@sp,fsr2l
  9747  000FA4  C061  FFDA         	movff	sprintf@sp+1,fsr2h
  9748  000FA8  0E00               	movlw	0
  9749  000FAA  6EDF               	movwf	indf2,c
  9750                           
  9751                           ; BSR set to: 0
  9752                           
  9753                           ; BSR set to: 0
  9754                           ;doprnt.c: 1547: return 0;
  9755                           ;	Return value of _sprintf is never used
  9756  000FAC  0012               	return	
  9757  000FAE                     __end_of_sprintf:
  9758                           	opt stack 0
  9759                           tosu	equ	0xFFF
  9760                           tosh	equ	0xFFE
  9761                           tosl	equ	0xFFD
  9762                           pclatu	equ	0xFFB
  9763                           pclath	equ	0xFFA
  9764                           tblptru	equ	0xFF8
  9765                           tblptrh	equ	0xFF7
  9766                           tblptrl	equ	0xFF6
  9767                           tablat	equ	0xFF5
  9768                           prodh	equ	0xFF4
  9769                           prodl	equ	0xFF3
  9770                           intcon	equ	0xFF2
  9771                           intcon2	equ	0xFF1
  9772                           indf0	equ	0xFEF
  9773                           postinc0	equ	0xFEE
  9774                           fsr0h	equ	0xFEA
  9775                           fsr0l	equ	0xFE9
  9776                           wreg	equ	0xFE8
  9777                           postinc1	equ	0xFE6
  9778                           postdec1	equ	0xFE5
  9779                           fsr1h	equ	0xFE2
  9780                           fsr1l	equ	0xFE1
  9781                           indf2	equ	0xFDF
  9782                           postinc2	equ	0xFDE
  9783                           postdec2	equ	0xFDD
  9784                           plusw2	equ	0xFDB
  9785                           fsr2h	equ	0xFDA
  9786                           fsr2l	equ	0xFD9
  9787                           status	equ	0xFD8
  9788                           
  9789 ;; *************** function ___lltoft *****************
  9790 ;; Defined at:
  9791 ;;		line 36 in file "/usr/opt/microchip/xc8/v1.20/sources/common/lltoft.c"
  9792 ;; Parameters:    Size  Location     Type
  9793 ;;  c               4    8[COMRAM] unsigned long 
  9794 ;; Auto vars:     Size  Location     Type
  9795 ;;  exp             1   16[COMRAM] unsigned char 
  9796 ;; Return value:  Size  Location     Type
  9797 ;;                  3    8[COMRAM] float 
  9798 ;; Registers used:
  9799 ;;		wreg, status,2, status,0, cstack
  9800 ;; Tracked objects:
  9801 ;;		On entry : 0/0
  9802 ;;		On exit  : 0/0
  9803 ;;		Unchanged: 0/0
  9804 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9805 ;;      Params:         4       0       0       0       0       0       0       0       0
  9806 ;;      Locals:         1       0       0       0       0       0       0       0       0
  9807 ;;      Temps:          4       0       0       0       0       0       0       0       0
  9808 ;;      Totals:         9       0       0       0       0       0       0       0       0
  9809 ;;Total ram usage:        9 bytes
  9810 ;; Hardware stack levels used:    1
  9811 ;; Hardware stack levels required when called:    1
  9812 ;; This function calls:
  9813 ;;		___ftpack
  9814 ;; This function is called by:
  9815 ;;		_sprintf
  9816 ;; This function uses a non-reentrant model
  9817 ;;
  9818                           
  9819                           	psect	text29
  9820  004286                     __ptext29:
  9821                           	opt stack 0
  9822  004286                     ___lltoft:
  9823                           	opt stack 21
  9824                           
  9825                           ; BSR set to: 0
  9826                           ;incstack = 0
  9827                           ;incstack = 0
  9828  004286  6E0D               	movwf	??___lltoft& (0+255),c
  9829  004288  0E8E               	movlw	142
  9830  00428A  6E11               	movwf	___lltoft@exp,c
  9831  00428C  500D               	movf	??___lltoft& (0+255),w,c
  9832  00428E  D006               	goto	i2l5987
  9833  004290                     i2l5985:
  9834  004290  90D8               	bcf	status,0,c
  9835  004292  320C               	rrcf	___lltoft@c+3,f,c
  9836  004294  320B               	rrcf	___lltoft@c+2,f,c
  9837  004296  320A               	rrcf	___lltoft@c+1,f,c
  9838  004298  3209               	rrcf	___lltoft@c,f,c
  9839  00429A  2A11               	incf	___lltoft@exp,f,c
  9840  00429C                     i2l5987:
  9841  00429C  0E00               	movlw	0
  9842  00429E  1409               	andwf	___lltoft@c,w,c
  9843  0042A0  6E0D               	movwf	??___lltoft& (0+255),c
  9844  0042A2  0E00               	movlw	0
  9845  0042A4  140A               	andwf	___lltoft@c+1,w,c
  9846  0042A6  6E0E               	movwf	(??___lltoft+1)& (0+255),c
  9847  0042A8  0E00               	movlw	0
  9848  0042AA  140B               	andwf	___lltoft@c+2,w,c
  9849  0042AC  6E0F               	movwf	(??___lltoft+2)& (0+255),c
  9850  0042AE  0EFF               	movlw	255
  9851  0042B0  140C               	andwf	___lltoft@c+3,w,c
  9852  0042B2  6E10               	movwf	(??___lltoft+3)& (0+255),c
  9853  0042B4  5010               	movf	??___lltoft+3,w,c
  9854  0042B6  100D               	iorwf	??___lltoft,w,c
  9855  0042B8  100E               	iorwf	??___lltoft+1,w,c
  9856  0042BA  100F               	iorwf	??___lltoft+2,w,c
  9857  0042BC  A4D8               	btfss	status,2,c
  9858  0042BE  D7E8               	goto	i2l5985
  9859  0042C0  C009  F001         	movff	___lltoft@c,?___ftpack
  9860  0042C4  C00A  F002         	movff	___lltoft@c+1,?___ftpack+1
  9861  0042C8  C00B  F003         	movff	___lltoft@c+2,?___ftpack+2
  9862  0042CC  C011  F004         	movff	___lltoft@exp,?___ftpack+3
  9863  0042D0  6E0D               	movwf	??___lltoft& (0+255),c
  9864  0042D2  0E00               	movlw	0
  9865  0042D4  6E05               	movwf	?___ftpack+4,c
  9866  0042D6  500D               	movf	??___lltoft& (0+255),w,c
  9867  0042D8  EC7C  F01C         	call	___ftpack	;wreg free
  9868  0042DC  C003  F00B         	movff	?___ftpack+2,?___lltoft+2
  9869  0042E0  C002  F00A         	movff	?___ftpack+1,?___lltoft+1
  9870  0042E4  C001  F009         	movff	?___ftpack,?___lltoft
  9871  0042E8  0012               	return	
  9872  0042EA                     __end_of___lltoft:
  9873                           	opt stack 0
  9874                           tosu	equ	0xFFF
  9875                           tosh	equ	0xFFE
  9876                           tosl	equ	0xFFD
  9877                           pclatu	equ	0xFFB
  9878                           pclath	equ	0xFFA
  9879                           tblptru	equ	0xFF8
  9880                           tblptrh	equ	0xFF7
  9881                           tblptrl	equ	0xFF6
  9882                           tablat	equ	0xFF5
  9883                           prodh	equ	0xFF4
  9884                           prodl	equ	0xFF3
  9885                           intcon	equ	0xFF2
  9886                           intcon2	equ	0xFF1
  9887                           indf0	equ	0xFEF
  9888                           postinc0	equ	0xFEE
  9889                           fsr0h	equ	0xFEA
  9890                           fsr0l	equ	0xFE9
  9891                           wreg	equ	0xFE8
  9892                           postinc1	equ	0xFE6
  9893                           postdec1	equ	0xFE5
  9894                           fsr1h	equ	0xFE2
  9895                           fsr1l	equ	0xFE1
  9896                           indf2	equ	0xFDF
  9897                           postinc2	equ	0xFDE
  9898                           postdec2	equ	0xFDD
  9899                           plusw2	equ	0xFDB
  9900                           fsr2h	equ	0xFDA
  9901                           fsr2l	equ	0xFD9
  9902                           status	equ	0xFD8
  9903                           
  9904 ;; *************** function ___lldiv *****************
  9905 ;; Defined at:
  9906 ;;		line 10 in file "/usr/opt/microchip/xc8/v1.20/sources/common/lldiv.c"
  9907 ;; Parameters:    Size  Location     Type
  9908 ;;  dividend        4    0[COMRAM] unsigned long 
  9909 ;;  divisor         4    4[COMRAM] unsigned long 
  9910 ;; Auto vars:     Size  Location     Type
  9911 ;;  quotient        4   14[COMRAM] unsigned long 
  9912 ;;  counter         1   18[COMRAM] unsigned char 
  9913 ;; Return value:  Size  Location     Type
  9914 ;;                  4    0[COMRAM] unsigned long 
  9915 ;; Registers used:
  9916 ;;		wreg, status,2, status,0
  9917 ;; Tracked objects:
  9918 ;;		On entry : 0/0
  9919 ;;		On exit  : 0/0
  9920 ;;		Unchanged: 0/0
  9921 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9922 ;;      Params:         8       0       0       0       0       0       0       0       0
  9923 ;;      Locals:        10       0       0       0       0       0       0       0       0
  9924 ;;      Temps:          1       0       0       0       0       0       0       0       0
  9925 ;;      Totals:        19       0       0       0       0       0       0       0       0
  9926 ;;Total ram usage:       19 bytes
  9927 ;; Hardware stack levels used:    1
  9928 ;; This function calls:
  9929 ;;		Nothing
  9930 ;; This function is called by:
  9931 ;;		_sprintf
  9932 ;; This function uses a non-reentrant model
  9933 ;;
  9934                           
  9935                           	psect	text30
  9936  003E6E                     __ptext30:
  9937                           	opt stack 0
  9938  003E6E                     ___lldiv:
  9939                           	opt stack 22
  9940                           
  9941                           ;incstack = 0
  9942                           ;incstack = 0
  9943  003E6E  0E00               	movlw	0
  9944  003E70  6E0F               	movwf	___lldiv@quotient,c
  9945  003E72  0E00               	movlw	0
  9946  003E74  6E10               	movwf	___lldiv@quotient+1,c
  9947  003E76  0E00               	movlw	0
  9948  003E78  6E11               	movwf	___lldiv@quotient+2,c
  9949  003E7A  0E00               	movlw	0
  9950  003E7C  6E12               	movwf	___lldiv@quotient+3,c
  9951  003E7E  5008               	movf	___lldiv@divisor+3,w,c
  9952  003E80  1005               	iorwf	___lldiv@divisor,w,c
  9953  003E82  1006               	iorwf	___lldiv@divisor+1,w,c
  9954  003E84  1007               	iorwf	___lldiv@divisor+2,w,c
  9955  003E86  B4D8               	btfsc	status,2,c
  9956  003E88  D02C               	goto	i2l1162
  9957  003E8A  6E09               	movwf	??___lldiv& (0+255),c
  9958  003E8C  0E01               	movlw	1
  9959  003E8E  6E13               	movwf	___lldiv@counter,c
  9960  003E90  5009               	movf	??___lldiv& (0+255),w,c
  9961  003E92  D006               	goto	i2l5797
  9962  003E94                     i2l5795:
  9963  003E94  90D8               	bcf	status,0,c
  9964  003E96  3605               	rlcf	___lldiv@divisor,f,c
  9965  003E98  3606               	rlcf	___lldiv@divisor+1,f,c
  9966  003E9A  3607               	rlcf	___lldiv@divisor+2,f,c
  9967  003E9C  3608               	rlcf	___lldiv@divisor+3,f,c
  9968  003E9E  2A13               	incf	___lldiv@counter,f,c
  9969  003EA0                     i2l5797:
  9970  003EA0  AE08               	btfss	___lldiv@divisor+3,7,c
  9971  003EA2  D7F8               	goto	i2l5795
  9972  003EA4                     i2l5799:
  9973  003EA4  90D8               	bcf	status,0,c
  9974  003EA6  360F               	rlcf	___lldiv@quotient,f,c
  9975  003EA8  3610               	rlcf	___lldiv@quotient+1,f,c
  9976  003EAA  3611               	rlcf	___lldiv@quotient+2,f,c
  9977  003EAC  3612               	rlcf	___lldiv@quotient+3,f,c
  9978  003EAE  5005               	movf	___lldiv@divisor,w,c
  9979  003EB0  5C01               	subwf	___lldiv@dividend,w,c
  9980  003EB2  5006               	movf	___lldiv@divisor+1,w,c
  9981  003EB4  5802               	subwfb	___lldiv@dividend+1,w,c
  9982  003EB6  5007               	movf	___lldiv@divisor+2,w,c
  9983  003EB8  5803               	subwfb	___lldiv@dividend+2,w,c
  9984  003EBA  5008               	movf	___lldiv@divisor+3,w,c
  9985  003EBC  5804               	subwfb	___lldiv@dividend+3,w,c
  9986  003EBE  A0D8               	btfss	status,0,c
  9987  003EC0  D009               	goto	i2l5807
  9988  003EC2  5005               	movf	___lldiv@divisor,w,c
  9989  003EC4  5E01               	subwf	___lldiv@dividend,f,c
  9990  003EC6  5006               	movf	___lldiv@divisor+1,w,c
  9991  003EC8  5A02               	subwfb	___lldiv@dividend+1,f,c
  9992  003ECA  5007               	movf	___lldiv@divisor+2,w,c
  9993  003ECC  5A03               	subwfb	___lldiv@dividend+2,f,c
  9994  003ECE  5008               	movf	___lldiv@divisor+3,w,c
  9995  003ED0  5A04               	subwfb	___lldiv@dividend+3,f,c
  9996  003ED2  800F               	bsf	___lldiv@quotient,0,c
  9997  003ED4                     i2l5807:
  9998  003ED4  90D8               	bcf	status,0,c
  9999  003ED6  3208               	rrcf	___lldiv@divisor+3,f,c
 10000  003ED8  3207               	rrcf	___lldiv@divisor+2,f,c
 10001  003EDA  3206               	rrcf	___lldiv@divisor+1,f,c
 10002  003EDC  3205               	rrcf	___lldiv@divisor,f,c
 10003  003EDE  2E13               	decfsz	___lldiv@counter,f,c
 10004  003EE0  D7E1               	goto	i2l5799
 10005  003EE2                     i2l1162:
 10006  003EE2  C00F  F001         	movff	___lldiv@quotient,?___lldiv
 10007  003EE6  C010  F002         	movff	___lldiv@quotient+1,?___lldiv+1
 10008  003EEA  C011  F003         	movff	___lldiv@quotient+2,?___lldiv+2
 10009  003EEE  C012  F004         	movff	___lldiv@quotient+3,?___lldiv+3
 10010  003EF2  0012               	return	
 10011  003EF4                     __end_of___lldiv:
 10012                           	opt stack 0
 10013                           tosu	equ	0xFFF
 10014                           tosh	equ	0xFFE
 10015                           tosl	equ	0xFFD
 10016                           pclatu	equ	0xFFB
 10017                           pclath	equ	0xFFA
 10018                           tblptru	equ	0xFF8
 10019                           tblptrh	equ	0xFF7
 10020                           tblptrl	equ	0xFF6
 10021                           tablat	equ	0xFF5
 10022                           prodh	equ	0xFF4
 10023                           prodl	equ	0xFF3
 10024                           intcon	equ	0xFF2
 10025                           intcon2	equ	0xFF1
 10026                           indf0	equ	0xFEF
 10027                           postinc0	equ	0xFEE
 10028                           fsr0h	equ	0xFEA
 10029                           fsr0l	equ	0xFE9
 10030                           wreg	equ	0xFE8
 10031                           postinc1	equ	0xFE6
 10032                           postdec1	equ	0xFE5
 10033                           fsr1h	equ	0xFE2
 10034                           fsr1l	equ	0xFE1
 10035                           indf2	equ	0xFDF
 10036                           postinc2	equ	0xFDE
 10037                           postdec2	equ	0xFDD
 10038                           plusw2	equ	0xFDB
 10039                           fsr2h	equ	0xFDA
 10040                           fsr2l	equ	0xFD9
 10041                           status	equ	0xFD8
 10042                           
 10043 ;; *************** function ___fttol *****************
 10044 ;; Defined at:
 10045 ;;		line 45 in file "/usr/opt/microchip/xc8/v1.20/sources/common/fttol.c"
 10046 ;; Parameters:    Size  Location     Type
 10047 ;;  f1              3   30[COMRAM] float 
 10048 ;; Auto vars:     Size  Location     Type
 10049 ;;  lval            4   40[COMRAM] unsigned long 
 10050 ;;  exp1            1   44[COMRAM] unsigned char 
 10051 ;;  sign1           1   39[COMRAM] unsigned char 
 10052 ;; Return value:  Size  Location     Type
 10053 ;;                  4   30[COMRAM] long 
 10054 ;; Registers used:
 10055 ;;		wreg, status,2, status,0
 10056 ;; Tracked objects:
 10057 ;;		On entry : 0/0
 10058 ;;		On exit  : 0/0
 10059 ;;		Unchanged: 0/0
 10060 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10061 ;;      Params:         4       0       0       0       0       0       0       0       0
 10062 ;;      Locals:         6       0       0       0       0       0       0       0       0
 10063 ;;      Temps:          5       0       0       0       0       0       0       0       0
 10064 ;;      Totals:        15       0       0       0       0       0       0       0       0
 10065 ;;Total ram usage:       15 bytes
 10066 ;; Hardware stack levels used:    1
 10067 ;; This function calls:
 10068 ;;		Nothing
 10069 ;; This function is called by:
 10070 ;;		_sprintf
 10071 ;; This function uses a non-reentrant model
 10072 ;;
 10073                           
 10074                           	psect	text31
 10075  00374A                     __ptext31:
 10076                           	opt stack 0
 10077  00374A                     ___fttol:
 10078                           	opt stack 22
 10079                           
 10080                           ;incstack = 0
 10081                           ;incstack = 0
 10082  00374A  0E0F               	movlw	15
 10083  00374C  6E23               	movwf	??___fttol& (0+255),c
 10084  00374E  C01F  F024         	movff	___fttol@f1,??___fttol+1
 10085  003752  C020  F025         	movff	___fttol@f1+1,??___fttol+2
 10086  003756  C021  F026         	movff	___fttol@f1+2,??___fttol+3
 10087  00375A  2823               	incf	??___fttol,w,c
 10088  00375C  6E27               	movwf	(??___fttol+4)& (0+255),c
 10089  00375E  D004               	goto	i2u425_40
 10090  003760                     i2u425_45:
 10091  003760  90D8               	bcf	status,0,c
 10092  003762  3226               	rrcf	??___fttol+3,f,c
 10093  003764  3225               	rrcf	??___fttol+2,f,c
 10094  003766  3224               	rrcf	??___fttol+1,f,c
 10095  003768                     i2u425_40:
 10096  003768  2E27               	decfsz	(??___fttol+4)& (0+255),f,c
 10097  00376A  D7FA               	goto	i2u425_45
 10098  00376C  5024               	movf	??___fttol+1,w,c
 10099  00376E  6E2D               	movwf	___fttol@exp1,c
 10100  003770  662D               	tstfsz	___fttol@exp1& (0+255),c
 10101  003772  D001               	goto	i2l6299
 10102  003774  D035               	goto	i2u430_40
 10103  003776                     i2l6299:
 10104  003776  0E17               	movlw	23
 10105  003778  6E23               	movwf	??___fttol& (0+255),c
 10106  00377A  C01F  F024         	movff	___fttol@f1,??___fttol+1
 10107  00377E  C020  F025         	movff	___fttol@f1+1,??___fttol+2
 10108  003782  C021  F026         	movff	___fttol@f1+2,??___fttol+3
 10109  003786  2823               	incf	??___fttol,w,c
 10110  003788  6E27               	movwf	(??___fttol+4)& (0+255),c
 10111  00378A  D004               	goto	i2u427_40
 10112  00378C                     i2u427_45:
 10113  00378C  90D8               	bcf	status,0,c
 10114  00378E  3226               	rrcf	??___fttol+3,f,c
 10115  003790  3225               	rrcf	??___fttol+2,f,c
 10116  003792  3224               	rrcf	??___fttol+1,f,c
 10117  003794                     i2u427_40:
 10118  003794  2E27               	decfsz	(??___fttol+4)& (0+255),f,c
 10119  003796  D7FA               	goto	i2u427_45
 10120  003798  5024               	movf	??___fttol+1,w,c
 10121  00379A  6E28               	movwf	___fttol@sign1,c
 10122  00379C  8E20               	bsf	___fttol@f1+1,7,c
 10123  00379E  0EFF               	movlw	255
 10124  0037A0  161F               	andwf	___fttol@f1,f,c
 10125  0037A2  0EFF               	movlw	255
 10126  0037A4  1620               	andwf	___fttol@f1+1,f,c
 10127  0037A6  0E00               	movlw	0
 10128  0037A8  1621               	andwf	___fttol@f1+2,f,c
 10129  0037AA  501F               	movf	___fttol@f1,w,c
 10130  0037AC  6E29               	movwf	___fttol@lval,c
 10131  0037AE  5020               	movf	___fttol@f1+1,w,c
 10132  0037B0  6E2A               	movwf	___fttol@lval+1,c
 10133  0037B2  5021               	movf	___fttol@f1+2,w,c
 10134  0037B4  6E2B               	movwf	___fttol@lval+2,c
 10135  0037B6  6A2C               	clrf	___fttol@lval+3,c
 10136  0037B8  0E8E               	movlw	142
 10137  0037BA  5E2D               	subwf	___fttol@exp1,f,c
 10138  0037BC  AE2D               	btfss	___fttol@exp1,7,c
 10139  0037BE  D00D               	goto	i2l6321
 10140  0037C0  502D               	movf	___fttol@exp1,w,c
 10141  0037C2  0A80               	xorlw	128
 10142  0037C4  0F8F               	addlw	143
 10143  0037C6  A0D8               	btfss	status,0,c
 10144  0037C8  D00B               	goto	i2u430_40
 10145  0037CA                     i2l6317:
 10146  0037CA  90D8               	bcf	status,0,c
 10147  0037CC  322C               	rrcf	___fttol@lval+3,f,c
 10148  0037CE  322B               	rrcf	___fttol@lval+2,f,c
 10149  0037D0  322A               	rrcf	___fttol@lval+1,f,c
 10150  0037D2  3229               	rrcf	___fttol@lval,f,c
 10151  0037D4  3E2D               	incfsz	___fttol@exp1,f,c
 10152  0037D6  D7F9               	goto	i2l6317
 10153  0037D8  D014               	goto	i2l6331
 10154  0037DA                     i2l6321:
 10155  0037DA  0E17               	movlw	23
 10156  0037DC  642D               	cpfsgt	___fttol@exp1,c
 10157  0037DE  D00F               	goto	i2l6329
 10158  0037E0                     i2u430_40:
 10159  0037E0  0E00               	movlw	0
 10160  0037E2  6E1F               	movwf	?___fttol,c
 10161  0037E4  0E00               	movlw	0
 10162  0037E6  6E20               	movwf	?___fttol+1,c
 10163  0037E8  0E00               	movlw	0
 10164  0037EA  6E21               	movwf	?___fttol+2,c
 10165  0037EC  0E00               	movlw	0
 10166  0037EE  6E22               	movwf	?___fttol+3,c
 10167  0037F0  D01B               	goto	i2l1118
 10168  0037F2                     i2l6327:
 10169  0037F2  90D8               	bcf	status,0,c
 10170  0037F4  3629               	rlcf	___fttol@lval,f,c
 10171  0037F6  362A               	rlcf	___fttol@lval+1,f,c
 10172  0037F8  362B               	rlcf	___fttol@lval+2,f,c
 10173  0037FA  362C               	rlcf	___fttol@lval+3,f,c
 10174  0037FC  062D               	decf	___fttol@exp1,f,c
 10175  0037FE                     i2l6329:
 10176  0037FE  662D               	tstfsz	___fttol@exp1,c
 10177  003800  D7F8               	goto	i2l6327
 10178  003802                     i2l6331:
 10179  003802  5028               	movf	___fttol@sign1,w,c
 10180  003804  B4D8               	btfsc	status,2,c
 10181  003806  D008               	goto	i2l6335
 10182  003808  1E2C               	comf	___fttol@lval+3,f,c
 10183  00380A  1E2B               	comf	___fttol@lval+2,f,c
 10184  00380C  1E2A               	comf	___fttol@lval+1,f,c
 10185  00380E  6C29               	negf	___fttol@lval,c
 10186  003810  0E00               	movlw	0
 10187  003812  222A               	addwfc	___fttol@lval+1,f,c
 10188  003814  222B               	addwfc	___fttol@lval+2,f,c
 10189  003816  222C               	addwfc	___fttol@lval+3,f,c
 10190  003818                     i2l6335:
 10191  003818  C029  F01F         	movff	___fttol@lval,?___fttol
 10192  00381C  C02A  F020         	movff	___fttol@lval+1,?___fttol+1
 10193  003820  C02B  F021         	movff	___fttol@lval+2,?___fttol+2
 10194  003824  C02C  F022         	movff	___fttol@lval+3,?___fttol+3
 10195  003828                     i2l1118:
 10196  003828  0012               	return	
 10197  00382A                     __end_of___fttol:
 10198                           	opt stack 0
 10199                           tosu	equ	0xFFF
 10200                           tosh	equ	0xFFE
 10201                           tosl	equ	0xFFD
 10202                           pclatu	equ	0xFFB
 10203                           pclath	equ	0xFFA
 10204                           tblptru	equ	0xFF8
 10205                           tblptrh	equ	0xFF7
 10206                           tblptrl	equ	0xFF6
 10207                           tablat	equ	0xFF5
 10208                           prodh	equ	0xFF4
 10209                           prodl	equ	0xFF3
 10210                           intcon	equ	0xFF2
 10211                           intcon2	equ	0xFF1
 10212                           indf0	equ	0xFEF
 10213                           postinc0	equ	0xFEE
 10214                           fsr0h	equ	0xFEA
 10215                           fsr0l	equ	0xFE9
 10216                           wreg	equ	0xFE8
 10217                           postinc1	equ	0xFE6
 10218                           postdec1	equ	0xFE5
 10219                           fsr1h	equ	0xFE2
 10220                           fsr1l	equ	0xFE1
 10221                           indf2	equ	0xFDF
 10222                           postinc2	equ	0xFDE
 10223                           postdec2	equ	0xFDD
 10224                           plusw2	equ	0xFDB
 10225                           fsr2h	equ	0xFDA
 10226                           fsr2l	equ	0xFD9
 10227                           status	equ	0xFD8
 10228                           
 10229 ;; *************** function ___ftneg *****************
 10230 ;; Defined at:
 10231 ;;		line 16 in file "/usr/opt/microchip/xc8/v1.20/sources/common/ftneg.c"
 10232 ;; Parameters:    Size  Location     Type
 10233 ;;  f1              3    0[COMRAM] float 
 10234 ;; Auto vars:     Size  Location     Type
 10235 ;;		None
 10236 ;; Return value:  Size  Location     Type
 10237 ;;                  3    0[COMRAM] float 
 10238 ;; Registers used:
 10239 ;;		wreg, status,2, status,0
 10240 ;; Tracked objects:
 10241 ;;		On entry : 0/0
 10242 ;;		On exit  : 0/0
 10243 ;;		Unchanged: 0/0
 10244 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10245 ;;      Params:         3       0       0       0       0       0       0       0       0
 10246 ;;      Locals:         0       0       0       0       0       0       0       0       0
 10247 ;;      Temps:          0       0       0       0       0       0       0       0       0
 10248 ;;      Totals:         3       0       0       0       0       0       0       0       0
 10249 ;;Total ram usage:        3 bytes
 10250 ;; Hardware stack levels used:    1
 10251 ;; This function calls:
 10252 ;;		Nothing
 10253 ;; This function is called by:
 10254 ;;		_sprintf
 10255 ;; This function uses a non-reentrant model
 10256 ;;
 10257                           
 10258                           	psect	text32
 10259  004746                     __ptext32:
 10260                           	opt stack 0
 10261  004746                     ___ftneg:
 10262                           	opt stack 22
 10263                           
 10264                           ;incstack = 0
 10265                           ;incstack = 0
 10266  004746  0E7F               	movlw	127
 10267  004748  1403               	andwf	___ftneg@f1+2,w,c
 10268  00474A  1002               	iorwf	___ftneg@f1+1,w,c
 10269  00474C  1001               	iorwf	___ftneg@f1,w,c
 10270  00474E  B4D8               	btfsc	status,2,c
 10271  004750  D006               	goto	i2l1108
 10272  004752  0E00               	movlw	0
 10273  004754  1A01               	xorwf	___ftneg@f1,f,c
 10274  004756  0E00               	movlw	0
 10275  004758  1A02               	xorwf	___ftneg@f1+1,f,c
 10276  00475A  0E80               	movlw	128
 10277  00475C  1A03               	xorwf	___ftneg@f1+2,f,c
 10278  00475E                     i2l1108:
 10279  00475E  C001  F001         	movff	___ftneg@f1,?___ftneg
 10280  004762  C002  F002         	movff	___ftneg@f1+1,?___ftneg+1
 10281  004766  C003  F003         	movff	___ftneg@f1+2,?___ftneg+2
 10282  00476A  0012               	return	
 10283  00476C                     __end_of___ftneg:
 10284                           	opt stack 0
 10285                           tosu	equ	0xFFF
 10286                           tosh	equ	0xFFE
 10287                           tosl	equ	0xFFD
 10288                           pclatu	equ	0xFFB
 10289                           pclath	equ	0xFFA
 10290                           tblptru	equ	0xFF8
 10291                           tblptrh	equ	0xFF7
 10292                           tblptrl	equ	0xFF6
 10293                           tablat	equ	0xFF5
 10294                           prodh	equ	0xFF4
 10295                           prodl	equ	0xFF3
 10296                           intcon	equ	0xFF2
 10297                           intcon2	equ	0xFF1
 10298                           indf0	equ	0xFEF
 10299                           postinc0	equ	0xFEE
 10300                           fsr0h	equ	0xFEA
 10301                           fsr0l	equ	0xFE9
 10302                           wreg	equ	0xFE8
 10303                           postinc1	equ	0xFE6
 10304                           postdec1	equ	0xFE5
 10305                           fsr1h	equ	0xFE2
 10306                           fsr1l	equ	0xFE1
 10307                           indf2	equ	0xFDF
 10308                           postinc2	equ	0xFDE
 10309                           postdec2	equ	0xFDD
 10310                           plusw2	equ	0xFDB
 10311                           fsr2h	equ	0xFDA
 10312                           fsr2l	equ	0xFD9
 10313                           status	equ	0xFD8
 10314                           
 10315 ;; *************** function ___ftge *****************
 10316 ;; Defined at:
 10317 ;;		line 5 in file "/usr/opt/microchip/xc8/v1.20/sources/common/ftge.c"
 10318 ;; Parameters:    Size  Location     Type
 10319 ;;  ff1             3    0[COMRAM] float 
 10320 ;;  ff2             3    3[COMRAM] float 
 10321 ;; Auto vars:     Size  Location     Type
 10322 ;;		None
 10323 ;; Return value:  Size  Location     Type
 10324 ;;		None               void
 10325 ;; Registers used:
 10326 ;;		wreg, status,2, status,0
 10327 ;; Tracked objects:
 10328 ;;		On entry : 0/0
 10329 ;;		On exit  : 0/0
 10330 ;;		Unchanged: 0/0
 10331 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10332 ;;      Params:         6       0       0       0       0       0       0       0       0
 10333 ;;      Locals:         0       0       0       0       0       0       0       0       0
 10334 ;;      Temps:          3       0       0       0       0       0       0       0       0
 10335 ;;      Totals:         9       0       0       0       0       0       0       0       0
 10336 ;;Total ram usage:        9 bytes
 10337 ;; Hardware stack levels used:    1
 10338 ;; This function calls:
 10339 ;;		Nothing
 10340 ;; This function is called by:
 10341 ;;		_sprintf
 10342 ;; This function uses a non-reentrant model
 10343 ;;
 10344                           
 10345                           	psect	text33
 10346  003CC8                     __ptext33:
 10347                           	opt stack 0
 10348  003CC8                     ___ftge:
 10349                           	opt stack 22
 10350                           
 10351                           ;incstack = 0
 10352                           ;incstack = 0
 10353  003CC8  AE03               	btfss	___ftge@ff1+2,7,c
 10354  003CCA  D016               	goto	i2l5771
 10355  003CCC  C001  F007         	movff	___ftge@ff1,??___ftge
 10356  003CD0  C002  F008         	movff	___ftge@ff1+1,??___ftge+1
 10357  003CD4  C003  F009         	movff	___ftge@ff1+2,??___ftge+2
 10358  003CD8  1E07               	comf	??___ftge,f,c
 10359  003CDA  1E08               	comf	??___ftge+1,f,c
 10360  003CDC  1E09               	comf	??___ftge+2,f,c
 10361  003CDE  2A07               	incf	??___ftge,f,c
 10362  003CE0  0E00               	movlw	0
 10363  003CE2  2208               	addwfc	??___ftge+1,f,c
 10364  003CE4  2209               	addwfc	??___ftge+2,f,c
 10365  003CE6  0E00               	movlw	0
 10366  003CE8  2407               	addwf	??___ftge,w,c
 10367  003CEA  6E01               	movwf	___ftge@ff1,c
 10368  003CEC  0E00               	movlw	0
 10369  003CEE  2008               	addwfc	??___ftge+1,w,c
 10370  003CF0  6E02               	movwf	___ftge@ff1+1,c
 10371  003CF2  0E80               	movlw	128
 10372  003CF4  2009               	addwfc	??___ftge+2,w,c
 10373  003CF6  6E03               	movwf	___ftge@ff1+2,c
 10374  003CF8                     i2l5771:
 10375  003CF8  AE06               	btfss	___ftge@ff2+2,7,c
 10376  003CFA  D016               	goto	i2l5775
 10377  003CFC  C004  F007         	movff	___ftge@ff2,??___ftge
 10378  003D00  C005  F008         	movff	___ftge@ff2+1,??___ftge+1
 10379  003D04  C006  F009         	movff	___ftge@ff2+2,??___ftge+2
 10380  003D08  1E07               	comf	??___ftge,f,c
 10381  003D0A  1E08               	comf	??___ftge+1,f,c
 10382  003D0C  1E09               	comf	??___ftge+2,f,c
 10383  003D0E  2A07               	incf	??___ftge,f,c
 10384  003D10  0E00               	movlw	0
 10385  003D12  2208               	addwfc	??___ftge+1,f,c
 10386  003D14  2209               	addwfc	??___ftge+2,f,c
 10387  003D16  0E00               	movlw	0
 10388  003D18  2407               	addwf	??___ftge,w,c
 10389  003D1A  6E04               	movwf	___ftge@ff2,c
 10390  003D1C  0E00               	movlw	0
 10391  003D1E  2008               	addwfc	??___ftge+1,w,c
 10392  003D20  6E05               	movwf	___ftge@ff2+1,c
 10393  003D22  0E80               	movlw	128
 10394  003D24  2009               	addwfc	??___ftge+2,w,c
 10395  003D26  6E06               	movwf	___ftge@ff2+2,c
 10396  003D28                     i2l5775:
 10397  003D28  0E00               	movlw	0
 10398  003D2A  1A01               	xorwf	___ftge@ff1,f,c
 10399  003D2C  0E00               	movlw	0
 10400  003D2E  1A02               	xorwf	___ftge@ff1+1,f,c
 10401  003D30  0E80               	movlw	128
 10402  003D32  1A03               	xorwf	___ftge@ff1+2,f,c
 10403  003D34  0E00               	movlw	0
 10404  003D36  1A04               	xorwf	___ftge@ff2,f,c
 10405  003D38  0E00               	movlw	0
 10406  003D3A  1A05               	xorwf	___ftge@ff2+1,f,c
 10407  003D3C  0E80               	movlw	128
 10408  003D3E  1A06               	xorwf	___ftge@ff2+2,f,c
 10409  003D40  5004               	movf	___ftge@ff2,w,c
 10410  003D42  5C01               	subwf	___ftge@ff1,w,c
 10411  003D44  5005               	movf	___ftge@ff2+1,w,c
 10412  003D46  5802               	subwfb	___ftge@ff1+1,w,c
 10413  003D48  5006               	movf	___ftge@ff2+2,w,c
 10414  003D4A  5803               	subwfb	___ftge@ff1+2,w,c
 10415  003D4C  B0D8               	btfsc	status,0,c
 10416  003D4E  D002               	goto	i2l5781
 10417  003D50  90D8               	bcf	status,0,c
 10418  003D52  D001               	goto	i2l1092
 10419  003D54                     i2l5781:
 10420  003D54  80D8               	bsf	status,0,c
 10421  003D56                     i2l1092:
 10422  003D56  0012               	return	
 10423  003D58                     __end_of___ftge:
 10424                           	opt stack 0
 10425                           tosu	equ	0xFFF
 10426                           tosh	equ	0xFFE
 10427                           tosl	equ	0xFFD
 10428                           pclatu	equ	0xFFB
 10429                           pclath	equ	0xFFA
 10430                           tblptru	equ	0xFF8
 10431                           tblptrh	equ	0xFF7
 10432                           tblptrl	equ	0xFF6
 10433                           tablat	equ	0xFF5
 10434                           prodh	equ	0xFF4
 10435                           prodl	equ	0xFF3
 10436                           intcon	equ	0xFF2
 10437                           intcon2	equ	0xFF1
 10438                           indf0	equ	0xFEF
 10439                           postinc0	equ	0xFEE
 10440                           fsr0h	equ	0xFEA
 10441                           fsr0l	equ	0xFE9
 10442                           wreg	equ	0xFE8
 10443                           postinc1	equ	0xFE6
 10444                           postdec1	equ	0xFE5
 10445                           fsr1h	equ	0xFE2
 10446                           fsr1l	equ	0xFE1
 10447                           indf2	equ	0xFDF
 10448                           postinc2	equ	0xFDE
 10449                           postdec2	equ	0xFDD
 10450                           plusw2	equ	0xFDB
 10451                           fsr2h	equ	0xFDA
 10452                           fsr2l	equ	0xFD9
 10453                           status	equ	0xFD8
 10454                           
 10455 ;; *************** function ___asftsub *****************
 10456 ;; Defined at:
 10457 ;;		line 5 in file "/usr/opt/microchip/xc8/v1.20/sources/pic18/asftsub.c"
 10458 ;; Parameters:    Size  Location     Type
 10459 ;;  f1p             2   82[COMRAM] PTR float 
 10460 ;;		 -> sprintf@fval(3), 
 10461 ;;  f2              3   84[COMRAM] float 
 10462 ;; Auto vars:     Size  Location     Type
 10463 ;;		None
 10464 ;; Return value:  Size  Location     Type
 10465 ;;                  3   82[COMRAM] float 
 10466 ;; Registers used:
 10467 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 10468 ;; Tracked objects:
 10469 ;;		On entry : 0/0
 10470 ;;		On exit  : 0/0
 10471 ;;		Unchanged: 0/0
 10472 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10473 ;;      Params:         5       0       0       0       0       0       0       0       0
 10474 ;;      Locals:         0       0       0       0       0       0       0       0       0
 10475 ;;      Temps:          0       0       0       0       0       0       0       0       0
 10476 ;;      Totals:         5       0       0       0       0       0       0       0       0
 10477 ;;Total ram usage:        5 bytes
 10478 ;; Hardware stack levels used:    1
 10479 ;; Hardware stack levels required when called:    3
 10480 ;; This function calls:
 10481 ;;		___ftsub
 10482 ;; This function is called by:
 10483 ;;		_sprintf
 10484 ;; This function uses a non-reentrant model
 10485 ;;
 10486                           
 10487                           	psect	text34
 10488  004500                     __ptext34:
 10489                           	opt stack 0
 10490  004500                     ___asftsub:
 10491                           	opt stack 19
 10492                           
 10493                           ;	Return value of ___asftsub is never used
 10494                           
 10495                           ;incstack = 0
 10496                           ;incstack = 0
 10497  004500  C053  FFD9         	movff	___asftsub@f1p,fsr2l
 10498  004504  C054  FFDA         	movff	___asftsub@f1p+1,fsr2h
 10499  004508  CFDE F04D          	movff	postinc2,?___ftsub
 10500  00450C  CFDE F04E          	movff	postinc2,?___ftsub+1
 10501  004510  CFDD F04F          	movff	postdec2,?___ftsub+2
 10502  004514  C055  F050         	movff	___asftsub@f2,?___ftsub+3
 10503  004518  C056  F051         	movff	___asftsub@f2+1,?___ftsub+4
 10504  00451C  C057  F052         	movff	___asftsub@f2+2,?___ftsub+5
 10505  004520  EC31  F023         	call	___ftsub	;wreg free
 10506  004524  C053  FFD9         	movff	___asftsub@f1p,fsr2l
 10507  004528  C054  FFDA         	movff	___asftsub@f1p+1,fsr2h
 10508  00452C  C04D  FFDE         	movff	?___ftsub,postinc2
 10509  004530  C04E  FFDE         	movff	?___ftsub+1,postinc2
 10510  004534  C04F  FFDD         	movff	?___ftsub+2,postdec2
 10511  004538  52DD               	movf	postdec2,f,c
 10512  00453A  0012               	return	
 10513  00453C                     __end_of___asftsub:
 10514                           	opt stack 0
 10515                           tosu	equ	0xFFF
 10516                           tosh	equ	0xFFE
 10517                           tosl	equ	0xFFD
 10518                           pclatu	equ	0xFFB
 10519                           pclath	equ	0xFFA
 10520                           tblptru	equ	0xFF8
 10521                           tblptrh	equ	0xFF7
 10522                           tblptrl	equ	0xFF6
 10523                           tablat	equ	0xFF5
 10524                           prodh	equ	0xFF4
 10525                           prodl	equ	0xFF3
 10526                           intcon	equ	0xFF2
 10527                           intcon2	equ	0xFF1
 10528                           indf0	equ	0xFEF
 10529                           postinc0	equ	0xFEE
 10530                           fsr0h	equ	0xFEA
 10531                           fsr0l	equ	0xFE9
 10532                           wreg	equ	0xFE8
 10533                           postinc1	equ	0xFE6
 10534                           postdec1	equ	0xFE5
 10535                           fsr1h	equ	0xFE2
 10536                           fsr1l	equ	0xFE1
 10537                           indf2	equ	0xFDF
 10538                           postinc2	equ	0xFDE
 10539                           postdec2	equ	0xFDD
 10540                           plusw2	equ	0xFDB
 10541                           fsr2h	equ	0xFDA
 10542                           fsr2l	equ	0xFD9
 10543                           status	equ	0xFD8
 10544                           
 10545 ;; *************** function ___ftsub *****************
 10546 ;; Defined at:
 10547 ;;		line 22 in file "/usr/opt/microchip/xc8/v1.20/sources/common/ftsub.c"
 10548 ;; Parameters:    Size  Location     Type
 10549 ;;  f1              3   76[COMRAM] float 
 10550 ;;  f2              3   79[COMRAM] float 
 10551 ;; Auto vars:     Size  Location     Type
 10552 ;;		None
 10553 ;; Return value:  Size  Location     Type
 10554 ;;                  3   76[COMRAM] float 
 10555 ;; Registers used:
 10556 ;;		wreg, status,2, status,0, cstack
 10557 ;; Tracked objects:
 10558 ;;		On entry : 0/0
 10559 ;;		On exit  : 0/0
 10560 ;;		Unchanged: 0/0
 10561 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10562 ;;      Params:         6       0       0       0       0       0       0       0       0
 10563 ;;      Locals:         0       0       0       0       0       0       0       0       0
 10564 ;;      Temps:          0       0       0       0       0       0       0       0       0
 10565 ;;      Totals:         6       0       0       0       0       0       0       0       0
 10566 ;;Total ram usage:        6 bytes
 10567 ;; Hardware stack levels used:    1
 10568 ;; Hardware stack levels required when called:    2
 10569 ;; This function calls:
 10570 ;;		___ftadd
 10571 ;; This function is called by:
 10572 ;;		___asftsub
 10573 ;; This function uses a non-reentrant model
 10574 ;;
 10575                           
 10576                           	psect	text35
 10577  004662                     __ptext35:
 10578                           	opt stack 0
 10579  004662                     ___ftsub:
 10580                           	opt stack 19
 10581                           
 10582                           ;incstack = 0
 10583                           ;incstack = 0
 10584  004662  0E00               	movlw	0
 10585  004664  1A50               	xorwf	___ftsub@f2,f,c
 10586  004666  0E00               	movlw	0
 10587  004668  1A51               	xorwf	___ftsub@f2+1,f,c
 10588  00466A  0E80               	movlw	128
 10589  00466C  1A52               	xorwf	___ftsub@f2+2,f,c
 10590  00466E  C04D  F03F         	movff	___ftsub@f1,?___ftadd
 10591  004672  C04E  F040         	movff	___ftsub@f1+1,?___ftadd+1
 10592  004676  C04F  F041         	movff	___ftsub@f1+2,?___ftadd+2
 10593  00467A  C050  F042         	movff	___ftsub@f2,?___ftadd+3
 10594  00467E  C051  F043         	movff	___ftsub@f2+1,?___ftadd+4
 10595  004682  C052  F044         	movff	___ftsub@f2+2,?___ftadd+5
 10596  004686  ECF7  F015         	call	___ftadd	;wreg free
 10597  00468A  C041  F04F         	movff	?___ftadd+2,?___ftsub+2
 10598  00468E  C040  F04E         	movff	?___ftadd+1,?___ftsub+1
 10599  004692  C03F  F04D         	movff	?___ftadd,?___ftsub
 10600  004696  0012               	return	
 10601  004698                     __end_of___ftsub:
 10602                           	opt stack 0
 10603                           tosu	equ	0xFFF
 10604                           tosh	equ	0xFFE
 10605                           tosl	equ	0xFFD
 10606                           pclatu	equ	0xFFB
 10607                           pclath	equ	0xFFA
 10608                           tblptru	equ	0xFF8
 10609                           tblptrh	equ	0xFF7
 10610                           tblptrl	equ	0xFF6
 10611                           tablat	equ	0xFF5
 10612                           prodh	equ	0xFF4
 10613                           prodl	equ	0xFF3
 10614                           intcon	equ	0xFF2
 10615                           intcon2	equ	0xFF1
 10616                           indf0	equ	0xFEF
 10617                           postinc0	equ	0xFEE
 10618                           fsr0h	equ	0xFEA
 10619                           fsr0l	equ	0xFE9
 10620                           wreg	equ	0xFE8
 10621                           postinc1	equ	0xFE6
 10622                           postdec1	equ	0xFE5
 10623                           fsr1h	equ	0xFE2
 10624                           fsr1l	equ	0xFE1
 10625                           indf2	equ	0xFDF
 10626                           postinc2	equ	0xFDE
 10627                           postdec2	equ	0xFDD
 10628                           plusw2	equ	0xFDB
 10629                           fsr2h	equ	0xFDA
 10630                           fsr2l	equ	0xFD9
 10631                           status	equ	0xFD8
 10632                           
 10633 ;; *************** function ___asftmul *****************
 10634 ;; Defined at:
 10635 ;;		line 5 in file "/usr/opt/microchip/xc8/v1.20/sources/pic18/asftmul.c"
 10636 ;; Parameters:    Size  Location     Type
 10637 ;;  f1p             2   62[COMRAM] PTR float 
 10638 ;;		 -> sprintf@integ(3), 
 10639 ;;  f2              3   64[COMRAM] float 
 10640 ;; Auto vars:     Size  Location     Type
 10641 ;;		None
 10642 ;; Return value:  Size  Location     Type
 10643 ;;                  3   62[COMRAM] float 
 10644 ;; Registers used:
 10645 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 10646 ;; Tracked objects:
 10647 ;;		On entry : 0/0
 10648 ;;		On exit  : 0/0
 10649 ;;		Unchanged: 0/0
 10650 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10651 ;;      Params:         5       0       0       0       0       0       0       0       0
 10652 ;;      Locals:         0       0       0       0       0       0       0       0       0
 10653 ;;      Temps:          0       0       0       0       0       0       0       0       0
 10654 ;;      Totals:         5       0       0       0       0       0       0       0       0
 10655 ;;Total ram usage:        5 bytes
 10656 ;; Hardware stack levels used:    1
 10657 ;; Hardware stack levels required when called:    2
 10658 ;; This function calls:
 10659 ;;		___ftmul
 10660 ;; This function is called by:
 10661 ;;		_sprintf
 10662 ;; This function uses a non-reentrant model
 10663 ;;
 10664                           
 10665                           	psect	text36
 10666  00453C                     __ptext36:
 10667                           	opt stack 0
 10668  00453C                     ___asftmul:
 10669                           	opt stack 20
 10670                           
 10671                           ;	Return value of ___asftmul is never used
 10672                           
 10673                           ;incstack = 0
 10674                           ;incstack = 0
 10675  00453C  C03F  FFD9         	movff	___asftmul@f1p,fsr2l
 10676  004540  C040  FFDA         	movff	___asftmul@f1p+1,fsr2h
 10677  004544  CFDE F02E          	movff	postinc2,?___ftmul
 10678  004548  CFDE F02F          	movff	postinc2,?___ftmul+1
 10679  00454C  CFDD F030          	movff	postdec2,?___ftmul+2
 10680  004550  C041  F031         	movff	___asftmul@f2,?___ftmul+3
 10681  004554  C042  F032         	movff	___asftmul@f2+1,?___ftmul+4
 10682  004558  C043  F033         	movff	___asftmul@f2+2,?___ftmul+5
 10683  00455C  ECAC  F019         	call	___ftmul	;wreg free
 10684  004560  C03F  FFD9         	movff	___asftmul@f1p,fsr2l
 10685  004564  C040  FFDA         	movff	___asftmul@f1p+1,fsr2h
 10686  004568  C02E  FFDE         	movff	?___ftmul,postinc2
 10687  00456C  C02F  FFDE         	movff	?___ftmul+1,postinc2
 10688  004570  C030  FFDD         	movff	?___ftmul+2,postdec2
 10689  004574  52DD               	movf	postdec2,f,c
 10690  004576  0012               	return	
 10691  004578                     __end_of___asftmul:
 10692                           	opt stack 0
 10693                           tosu	equ	0xFFF
 10694                           tosh	equ	0xFFE
 10695                           tosl	equ	0xFFD
 10696                           pclatu	equ	0xFFB
 10697                           pclath	equ	0xFFA
 10698                           tblptru	equ	0xFF8
 10699                           tblptrh	equ	0xFF7
 10700                           tblptrl	equ	0xFF6
 10701                           tablat	equ	0xFF5
 10702                           prodh	equ	0xFF4
 10703                           prodl	equ	0xFF3
 10704                           intcon	equ	0xFF2
 10705                           intcon2	equ	0xFF1
 10706                           indf0	equ	0xFEF
 10707                           postinc0	equ	0xFEE
 10708                           fsr0h	equ	0xFEA
 10709                           fsr0l	equ	0xFE9
 10710                           wreg	equ	0xFE8
 10711                           postinc1	equ	0xFE6
 10712                           postdec1	equ	0xFE5
 10713                           fsr1h	equ	0xFE2
 10714                           fsr1l	equ	0xFE1
 10715                           indf2	equ	0xFDF
 10716                           postinc2	equ	0xFDE
 10717                           postdec2	equ	0xFDD
 10718                           plusw2	equ	0xFDB
 10719                           fsr2h	equ	0xFDA
 10720                           fsr2l	equ	0xFD9
 10721                           status	equ	0xFD8
 10722                           
 10723 ;; *************** function ___asftadd *****************
 10724 ;; Defined at:
 10725 ;;		line 5 in file "/usr/opt/microchip/xc8/v1.20/sources/pic18/asftadd.c"
 10726 ;; Parameters:    Size  Location     Type
 10727 ;;  f1p             2   77[COMRAM] PTR float 
 10728 ;;		 -> sprintf@fval(3), getTemp@total(3), 
 10729 ;;  f2              3   79[COMRAM] float 
 10730 ;; Auto vars:     Size  Location     Type
 10731 ;;		None
 10732 ;; Return value:  Size  Location     Type
 10733 ;;                  3   77[COMRAM] float 
 10734 ;; Registers used:
 10735 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 10736 ;; Tracked objects:
 10737 ;;		On entry : 0/0
 10738 ;;		On exit  : 0/0
 10739 ;;		Unchanged: 0/0
 10740 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10741 ;;      Params:         5       0       0       0       0       0       0       0       0
 10742 ;;      Locals:         0       0       0       0       0       0       0       0       0
 10743 ;;      Temps:          0       0       0       0       0       0       0       0       0
 10744 ;;      Totals:         5       0       0       0       0       0       0       0       0
 10745 ;;Total ram usage:        5 bytes
 10746 ;; Hardware stack levels used:    1
 10747 ;; Hardware stack levels required when called:    2
 10748 ;; This function calls:
 10749 ;;		___ftadd
 10750 ;; This function is called by:
 10751 ;;		_getTemp
 10752 ;;		_sprintf
 10753 ;; This function uses a non-reentrant model
 10754 ;;
 10755                           
 10756                           	psect	text37
 10757  004578                     __ptext37:
 10758                           	opt stack 0
 10759  004578                     ___asftadd:
 10760                           	opt stack 21
 10761                           
 10762                           ;	Return value of ___asftadd is never used
 10763                           
 10764                           ;incstack = 0
 10765                           ;incstack = 0
 10766  004578  C04E  FFD9         	movff	___asftadd@f1p,fsr2l
 10767  00457C  C04F  FFDA         	movff	___asftadd@f1p+1,fsr2h
 10768  004580  CFDE F03F          	movff	postinc2,?___ftadd
 10769  004584  CFDE F040          	movff	postinc2,?___ftadd+1
 10770  004588  CFDD F041          	movff	postdec2,?___ftadd+2
 10771  00458C  C050  F042         	movff	___asftadd@f2,?___ftadd+3
 10772  004590  C051  F043         	movff	___asftadd@f2+1,?___ftadd+4
 10773  004594  C052  F044         	movff	___asftadd@f2+2,?___ftadd+5
 10774  004598  ECF7  F015         	call	___ftadd	;wreg free
 10775  00459C  C04E  FFD9         	movff	___asftadd@f1p,fsr2l
 10776  0045A0  C04F  FFDA         	movff	___asftadd@f1p+1,fsr2h
 10777  0045A4  C03F  FFDE         	movff	?___ftadd,postinc2
 10778  0045A8  C040  FFDE         	movff	?___ftadd+1,postinc2
 10779  0045AC  C041  FFDD         	movff	?___ftadd+2,postdec2
 10780  0045B0  52DD               	movf	postdec2,f,c
 10781  0045B2  0012               	return	
 10782  0045B4                     __end_of___asftadd:
 10783                           	opt stack 0
 10784                           tosu	equ	0xFFF
 10785                           tosh	equ	0xFFE
 10786                           tosl	equ	0xFFD
 10787                           pclatu	equ	0xFFB
 10788                           pclath	equ	0xFFA
 10789                           tblptru	equ	0xFF8
 10790                           tblptrh	equ	0xFF7
 10791                           tblptrl	equ	0xFF6
 10792                           tablat	equ	0xFF5
 10793                           prodh	equ	0xFF4
 10794                           prodl	equ	0xFF3
 10795                           intcon	equ	0xFF2
 10796                           intcon2	equ	0xFF1
 10797                           indf0	equ	0xFEF
 10798                           postinc0	equ	0xFEE
 10799                           fsr0h	equ	0xFEA
 10800                           fsr0l	equ	0xFE9
 10801                           wreg	equ	0xFE8
 10802                           postinc1	equ	0xFE6
 10803                           postdec1	equ	0xFE5
 10804                           fsr1h	equ	0xFE2
 10805                           fsr1l	equ	0xFE1
 10806                           indf2	equ	0xFDF
 10807                           postinc2	equ	0xFDE
 10808                           postdec2	equ	0xFDD
 10809                           plusw2	equ	0xFDB
 10810                           fsr2h	equ	0xFDA
 10811                           fsr2l	equ	0xFD9
 10812                           status	equ	0xFD8
 10813                           
 10814 ;; *************** function ___ftadd *****************
 10815 ;; Defined at:
 10816 ;;		line 87 in file "/usr/opt/microchip/xc8/v1.20/sources/common/ftadd.c"
 10817 ;; Parameters:    Size  Location     Type
 10818 ;;  f1              3   62[COMRAM] float 
 10819 ;;  f2              3   65[COMRAM] float 
 10820 ;; Auto vars:     Size  Location     Type
 10821 ;;  exp1            1   75[COMRAM] unsigned char 
 10822 ;;  exp2            1   74[COMRAM] unsigned char 
 10823 ;;  sign            1   73[COMRAM] unsigned char 
 10824 ;; Return value:  Size  Location     Type
 10825 ;;                  3   62[COMRAM] float 
 10826 ;; Registers used:
 10827 ;;		wreg, status,2, status,0, cstack
 10828 ;; Tracked objects:
 10829 ;;		On entry : 0/0
 10830 ;;		On exit  : 0/0
 10831 ;;		Unchanged: 0/0
 10832 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10833 ;;      Params:         6       0       0       0       0       0       0       0       0
 10834 ;;      Locals:         3       0       0       0       0       0       0       0       0
 10835 ;;      Temps:          5       0       0       0       0       0       0       0       0
 10836 ;;      Totals:        14       0       0       0       0       0       0       0       0
 10837 ;;Total ram usage:       14 bytes
 10838 ;; Hardware stack levels used:    1
 10839 ;; Hardware stack levels required when called:    1
 10840 ;; This function calls:
 10841 ;;		___ftpack
 10842 ;; This function is called by:
 10843 ;;		_getTemp
 10844 ;;		___asftadd
 10845 ;;		___ftsub
 10846 ;; This function uses a non-reentrant model
 10847 ;;
 10848                           
 10849                           	psect	text38
 10850  002BEE                     __ptext38:
 10851                           	opt stack 0
 10852  002BEE                     ___ftadd:
 10853                           	opt stack 22
 10854                           
 10855                           ;incstack = 0
 10856                           ;incstack = 0
 10857  002BEE  0E0F               	movlw	15
 10858  002BF0  6E45               	movwf	??___ftadd& (0+255),c
 10859  002BF2  C03F  F046         	movff	___ftadd@f1,??___ftadd+1
 10860  002BF6  C040  F047         	movff	___ftadd@f1+1,??___ftadd+2
 10861  002BFA  C041  F048         	movff	___ftadd@f1+2,??___ftadd+3
 10862  002BFE  2845               	incf	??___ftadd,w,c
 10863  002C00  6E49               	movwf	(??___ftadd+4)& (0+255),c
 10864  002C02  D004               	goto	i2u404_40
 10865  002C04                     i2u404_45:
 10866  002C04  90D8               	bcf	status,0,c
 10867  002C06  3248               	rrcf	??___ftadd+3,f,c
 10868  002C08  3247               	rrcf	??___ftadd+2,f,c
 10869  002C0A  3246               	rrcf	??___ftadd+1,f,c
 10870  002C0C                     i2u404_40:
 10871  002C0C  2E49               	decfsz	(??___ftadd+4)& (0+255),f,c
 10872  002C0E  D7FA               	goto	i2u404_45
 10873  002C10  5046               	movf	??___ftadd+1,w,c
 10874  002C12  6E4C               	movwf	___ftadd@exp1,c
 10875  002C14  0E0F               	movlw	15
 10876  002C16  6E45               	movwf	??___ftadd& (0+255),c
 10877  002C18  C042  F046         	movff	___ftadd@f2,??___ftadd+1
 10878  002C1C  C043  F047         	movff	___ftadd@f2+1,??___ftadd+2
 10879  002C20  C044  F048         	movff	___ftadd@f2+2,??___ftadd+3
 10880  002C24  2845               	incf	??___ftadd,w,c
 10881  002C26  6E49               	movwf	(??___ftadd+4)& (0+255),c
 10882  002C28  D004               	goto	i2u405_40
 10883  002C2A                     i2u405_45:
 10884  002C2A  90D8               	bcf	status,0,c
 10885  002C2C  3248               	rrcf	??___ftadd+3,f,c
 10886  002C2E  3247               	rrcf	??___ftadd+2,f,c
 10887  002C30  3246               	rrcf	??___ftadd+1,f,c
 10888  002C32                     i2u405_40:
 10889  002C32  2E49               	decfsz	(??___ftadd+4)& (0+255),f,c
 10890  002C34  D7FA               	goto	i2u405_45
 10891  002C36  5046               	movf	??___ftadd+1,w,c
 10892  002C38  6E4B               	movwf	___ftadd@exp2,c
 10893  002C3A  504C               	movf	___ftadd@exp1,w,c
 10894  002C3C  B4D8               	btfsc	status,2,c
 10895  002C3E  D00B               	goto	i2l1034
 10896  002C40  504B               	movf	___ftadd@exp2,w,c
 10897  002C42  604C               	cpfslt	___ftadd@exp1,c
 10898  002C44  D00F               	goto	i2l6227
 10899  002C46  504C               	movf	___ftadd@exp1,w,c
 10900  002C48  0800               	sublw	0
 10901  002C4A  244B               	addwf	___ftadd@exp2,w,c
 10902  002C4C  6E45               	movwf	??___ftadd& (0+255),c
 10903  002C4E  0E19               	movlw	25
 10904  002C50  5C45               	subwf	??___ftadd,w,c
 10905  002C52  A0D8               	btfss	status,0,c
 10906  002C54  D007               	goto	i2l6227
 10907  002C56                     i2l1034:
 10908  002C56  C042  F03F         	movff	___ftadd@f2,?___ftadd
 10909  002C5A  C043  F040         	movff	___ftadd@f2+1,?___ftadd+1
 10910  002C5E  C044  F041         	movff	___ftadd@f2+2,?___ftadd+2
 10911  002C62  D0AA               	goto	i2l1035
 10912  002C64                     i2l6227:
 10913  002C64  504B               	movf	___ftadd@exp2,w,c
 10914  002C66  B4D8               	btfsc	status,2,c
 10915  002C68  D00B               	goto	i2l1038
 10916  002C6A  504C               	movf	___ftadd@exp1,w,c
 10917  002C6C  604B               	cpfslt	___ftadd@exp2,c
 10918  002C6E  D00F               	goto	i2l6233
 10919  002C70  504B               	movf	___ftadd@exp2,w,c
 10920  002C72  0800               	sublw	0
 10921  002C74  244C               	addwf	___ftadd@exp1,w,c
 10922  002C76  6E45               	movwf	??___ftadd& (0+255),c
 10923  002C78  0E19               	movlw	25
 10924  002C7A  5C45               	subwf	??___ftadd,w,c
 10925  002C7C  A0D8               	btfss	status,0,c
 10926  002C7E  D007               	goto	i2l6233
 10927  002C80                     i2l1038:
 10928  002C80  C03F  F03F         	movff	___ftadd@f1,?___ftadd
 10929  002C84  C040  F040         	movff	___ftadd@f1+1,?___ftadd+1
 10930  002C88  C041  F041         	movff	___ftadd@f1+2,?___ftadd+2
 10931  002C8C  D095               	goto	i2l1035
 10932  002C8E                     i2l6233:
 10933  002C8E  6E45               	movwf	??___ftadd& (0+255),c
 10934  002C90  0E06               	movlw	6
 10935  002C92  6E4A               	movwf	___ftadd@sign,c
 10936  002C94  5045               	movf	??___ftadd& (0+255),w,c
 10937  002C96  BE41               	btfsc	___ftadd@f1+2,7,c
 10938  002C98  8E4A               	bsf	___ftadd@sign,7,c
 10939  002C9A  BE44               	btfsc	___ftadd@f2+2,7,c
 10940  002C9C  8C4A               	bsf	___ftadd@sign,6,c
 10941  002C9E  8E40               	bsf	___ftadd@f1+1,7,c
 10942  002CA0  0EFF               	movlw	255
 10943  002CA2  163F               	andwf	___ftadd@f1,f,c
 10944  002CA4  0EFF               	movlw	255
 10945  002CA6  1640               	andwf	___ftadd@f1+1,f,c
 10946  002CA8  0E00               	movlw	0
 10947  002CAA  1641               	andwf	___ftadd@f1+2,f,c
 10948  002CAC  8E43               	bsf	___ftadd@f2+1,7,c
 10949  002CAE  0EFF               	movlw	255
 10950  002CB0  1642               	andwf	___ftadd@f2,f,c
 10951  002CB2  0EFF               	movlw	255
 10952  002CB4  1643               	andwf	___ftadd@f2+1,f,c
 10953  002CB6  0E00               	movlw	0
 10954  002CB8  1644               	andwf	___ftadd@f2+2,f,c
 10955  002CBA  504B               	movf	___ftadd@exp2,w,c
 10956  002CBC  604C               	cpfslt	___ftadd@exp1,c
 10957  002CBE  D018               	goto	i2l6259
 10958  002CC0                     i2l6249:
 10959  002CC0  90D8               	bcf	status,0,c
 10960  002CC2  3642               	rlcf	___ftadd@f2,f,c
 10961  002CC4  3643               	rlcf	___ftadd@f2+1,f,c
 10962  002CC6  3644               	rlcf	___ftadd@f2+2,f,c
 10963  002CC8  064B               	decf	___ftadd@exp2,f,c
 10964  002CCA  504B               	movf	___ftadd@exp2,w,c
 10965  002CCC  184C               	xorwf	___ftadd@exp1,w,c
 10966  002CCE  B4D8               	btfsc	status,2,c
 10967  002CD0  D00B               	goto	i2l6257
 10968  002CD2  064A               	decf	___ftadd@sign,f,c
 10969  002CD4  504A               	movf	___ftadd@sign& (0+255),w,c
 10970  002CD6  0B07               	andlw	7
 10971  002CD8  B4D8               	btfsc	status,2,c
 10972  002CDA  D006               	goto	i2l6257
 10973  002CDC  D7F1               	goto	i2l6249
 10974  002CDE                     i2l6255:
 10975  002CDE  90D8               	bcf	status,0,c
 10976  002CE0  3241               	rrcf	___ftadd@f1+2,f,c
 10977  002CE2  3240               	rrcf	___ftadd@f1+1,f,c
 10978  002CE4  323F               	rrcf	___ftadd@f1,f,c
 10979  002CE6  2A4C               	incf	___ftadd@exp1,f,c
 10980  002CE8                     i2l6257:
 10981  002CE8  504B               	movf	___ftadd@exp2,w,c
 10982  002CEA  624C               	cpfseq	___ftadd@exp1,c
 10983  002CEC  D7F8               	goto	i2l6255
 10984  002CEE  D01A               	goto	i2l1049
 10985  002CF0                     i2l6259:
 10986  002CF0  504C               	movf	___ftadd@exp1,w,c
 10987  002CF2  604B               	cpfslt	___ftadd@exp2,c
 10988  002CF4  D017               	goto	i2l1049
 10989  002CF6                     i2l6261:
 10990  002CF6  90D8               	bcf	status,0,c
 10991  002CF8  363F               	rlcf	___ftadd@f1,f,c
 10992  002CFA  3640               	rlcf	___ftadd@f1+1,f,c
 10993  002CFC  3641               	rlcf	___ftadd@f1+2,f,c
 10994  002CFE  064C               	decf	___ftadd@exp1,f,c
 10995  002D00  504B               	movf	___ftadd@exp2,w,c
 10996  002D02  184C               	xorwf	___ftadd@exp1,w,c
 10997  002D04  B4D8               	btfsc	status,2,c
 10998  002D06  D00B               	goto	i2l6269
 10999  002D08  064A               	decf	___ftadd@sign,f,c
 11000  002D0A  504A               	movf	___ftadd@sign& (0+255),w,c
 11001  002D0C  0B07               	andlw	7
 11002  002D0E  B4D8               	btfsc	status,2,c
 11003  002D10  D006               	goto	i2l6269
 11004  002D12  D7F1               	goto	i2l6261
 11005  002D14                     i2l6267:
 11006  002D14  90D8               	bcf	status,0,c
 11007  002D16  3244               	rrcf	___ftadd@f2+2,f,c
 11008  002D18  3243               	rrcf	___ftadd@f2+1,f,c
 11009  002D1A  3242               	rrcf	___ftadd@f2,f,c
 11010  002D1C  2A4B               	incf	___ftadd@exp2,f,c
 11011  002D1E                     i2l6269:
 11012  002D1E  504B               	movf	___ftadd@exp2,w,c
 11013  002D20  624C               	cpfseq	___ftadd@exp1,c
 11014  002D22  D7F8               	goto	i2l6267
 11015  002D24                     i2l1049:
 11016  002D24  AE4A               	btfss	___ftadd@sign,7,c
 11017  002D26  D00C               	goto	i2l1058
 11018  002D28  0EFF               	movlw	255
 11019  002D2A  1A3F               	xorwf	___ftadd@f1,f,c
 11020  002D2C  0EFF               	movlw	255
 11021  002D2E  1A40               	xorwf	___ftadd@f1+1,f,c
 11022  002D30  0EFF               	movlw	255
 11023  002D32  1A41               	xorwf	___ftadd@f1+2,f,c
 11024  002D34  0E01               	movlw	1
 11025  002D36  263F               	addwf	___ftadd@f1,f,c
 11026  002D38  0E00               	movlw	0
 11027  002D3A  2240               	addwfc	___ftadd@f1+1,f,c
 11028  002D3C  0E00               	movlw	0
 11029  002D3E  2241               	addwfc	___ftadd@f1+2,f,c
 11030  002D40                     i2l1058:
 11031  002D40  AC4A               	btfss	___ftadd@sign,6,c
 11032  002D42  D00C               	goto	i2l6275
 11033  002D44  0EFF               	movlw	255
 11034  002D46  1A42               	xorwf	___ftadd@f2,f,c
 11035  002D48  0EFF               	movlw	255
 11036  002D4A  1A43               	xorwf	___ftadd@f2+1,f,c
 11037  002D4C  0EFF               	movlw	255
 11038  002D4E  1A44               	xorwf	___ftadd@f2+2,f,c
 11039  002D50  0E01               	movlw	1
 11040  002D52  2642               	addwf	___ftadd@f2,f,c
 11041  002D54  0E00               	movlw	0
 11042  002D56  2243               	addwfc	___ftadd@f2+1,f,c
 11043  002D58  0E00               	movlw	0
 11044  002D5A  2244               	addwfc	___ftadd@f2+2,f,c
 11045  002D5C                     i2l6275:
 11046  002D5C  6E45               	movwf	??___ftadd& (0+255),c
 11047  002D5E  0E00               	movlw	0
 11048  002D60  6E4A               	movwf	___ftadd@sign,c
 11049  002D62  5045               	movf	??___ftadd& (0+255),w,c
 11050  002D64  503F               	movf	___ftadd@f1,w,c
 11051  002D66  2642               	addwf	___ftadd@f2,f,c
 11052  002D68  5040               	movf	___ftadd@f1+1,w,c
 11053  002D6A  2243               	addwfc	___ftadd@f2+1,f,c
 11054  002D6C  5041               	movf	___ftadd@f1+2,w,c
 11055  002D6E  2244               	addwfc	___ftadd@f2+2,f,c
 11056  002D70  AE44               	btfss	___ftadd@f2+2,7,c
 11057  002D72  D010               	goto	i2l6285
 11058  002D74  0EFF               	movlw	255
 11059  002D76  1A42               	xorwf	___ftadd@f2,f,c
 11060  002D78  0EFF               	movlw	255
 11061  002D7A  1A43               	xorwf	___ftadd@f2+1,f,c
 11062  002D7C  0EFF               	movlw	255
 11063  002D7E  1A44               	xorwf	___ftadd@f2+2,f,c
 11064  002D80  0E01               	movlw	1
 11065  002D82  2642               	addwf	___ftadd@f2,f,c
 11066  002D84  0E00               	movlw	0
 11067  002D86  2243               	addwfc	___ftadd@f2+1,f,c
 11068  002D88  0E00               	movlw	0
 11069  002D8A  2244               	addwfc	___ftadd@f2+2,f,c
 11070  002D8C  6E45               	movwf	??___ftadd& (0+255),c
 11071  002D8E  0E01               	movlw	1
 11072  002D90  6E4A               	movwf	___ftadd@sign,c
 11073  002D92  5045               	movf	??___ftadd& (0+255),w,c
 11074  002D94                     i2l6285:
 11075  002D94  C042  F001         	movff	___ftadd@f2,?___ftpack
 11076  002D98  C043  F002         	movff	___ftadd@f2+1,?___ftpack+1
 11077  002D9C  C044  F003         	movff	___ftadd@f2+2,?___ftpack+2
 11078  002DA0  C04C  F004         	movff	___ftadd@exp1,?___ftpack+3
 11079  002DA4  C04A  F005         	movff	___ftadd@sign,?___ftpack+4
 11080  002DA8  EC7C  F01C         	call	___ftpack	;wreg free
 11081  002DAC  C003  F041         	movff	?___ftpack+2,?___ftadd+2
 11082  002DB0  C002  F040         	movff	?___ftpack+1,?___ftadd+1
 11083  002DB4  C001  F03F         	movff	?___ftpack,?___ftadd
 11084  002DB8                     i2l1035:
 11085  002DB8  0012               	return	
 11086  002DBA                     __end_of___ftadd:
 11087                           	opt stack 0
 11088                           tosu	equ	0xFFF
 11089                           tosh	equ	0xFFE
 11090                           tosl	equ	0xFFD
 11091                           pclatu	equ	0xFFB
 11092                           pclath	equ	0xFFA
 11093                           tblptru	equ	0xFF8
 11094                           tblptrh	equ	0xFF7
 11095                           tblptrl	equ	0xFF6
 11096                           tablat	equ	0xFF5
 11097                           prodh	equ	0xFF4
 11098                           prodl	equ	0xFF3
 11099                           intcon	equ	0xFF2
 11100                           intcon2	equ	0xFF1
 11101                           indf0	equ	0xFEF
 11102                           postinc0	equ	0xFEE
 11103                           fsr0h	equ	0xFEA
 11104                           fsr0l	equ	0xFE9
 11105                           wreg	equ	0xFE8
 11106                           postinc1	equ	0xFE6
 11107                           postdec1	equ	0xFE5
 11108                           fsr1h	equ	0xFE2
 11109                           fsr1l	equ	0xFE1
 11110                           indf2	equ	0xFDF
 11111                           postinc2	equ	0xFDE
 11112                           postdec2	equ	0xFDD
 11113                           plusw2	equ	0xFDB
 11114                           fsr2h	equ	0xFDA
 11115                           fsr2l	equ	0xFD9
 11116                           status	equ	0xFD8
 11117                           
 11118 ;; *************** function ___ftpack *****************
 11119 ;; Defined at:
 11120 ;;		line 63 in file "/usr/opt/microchip/xc8/v1.20/sources/common/float.c"
 11121 ;; Parameters:    Size  Location     Type
 11122 ;;  arg             3    0[COMRAM] unsigned um
 11123 ;;  exp             1    3[COMRAM] unsigned char 
 11124 ;;  sign            1    4[COMRAM] unsigned char 
 11125 ;; Auto vars:     Size  Location     Type
 11126 ;;		None
 11127 ;; Return value:  Size  Location     Type
 11128 ;;                  3    0[COMRAM] float 
 11129 ;; Registers used:
 11130 ;;		wreg, status,2, status,0
 11131 ;; Tracked objects:
 11132 ;;		On entry : 0/0
 11133 ;;		On exit  : 0/0
 11134 ;;		Unchanged: 0/0
 11135 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11136 ;;      Params:         5       0       0       0       0       0       0       0       0
 11137 ;;      Locals:         0       0       0       0       0       0       0       0       0
 11138 ;;      Temps:          3       0       0       0       0       0       0       0       0
 11139 ;;      Totals:         8       0       0       0       0       0       0       0       0
 11140 ;;Total ram usage:        8 bytes
 11141 ;; Hardware stack levels used:    1
 11142 ;; This function calls:
 11143 ;;		Nothing
 11144 ;; This function is called by:
 11145 ;;		___ftadd
 11146 ;;		___ftdiv
 11147 ;;		___ftmul
 11148 ;;		___lltoft
 11149 ;;		___lwtoft
 11150 ;; This function uses a non-reentrant model
 11151 ;;
 11152                           
 11153                           	psect	text39
 11154  0038F8                     __ptext39:
 11155                           	opt stack 0
 11156  0038F8                     ___ftpack:
 11157                           	opt stack 22
 11158                           
 11159                           ;incstack = 0
 11160                           ;incstack = 0
 11161  0038F8  5004               	movf	___ftpack@exp,w,c
 11162  0038FA  B4D8               	btfsc	status,2,c
 11163  0038FC  D005               	goto	i2l5701
 11164  0038FE  5001               	movf	___ftpack@arg,w,c
 11165  003900  1002               	iorwf	___ftpack@arg+1,w,c
 11166  003902  1003               	iorwf	___ftpack@arg+2,w,c
 11167  003904  A4D8               	btfss	status,2,c
 11168  003906  D00C               	goto	i2l5707
 11169  003908                     i2l5701:
 11170  003908  0E00               	movlw	0
 11171  00390A  6E01               	movwf	?___ftpack,c
 11172  00390C  0E00               	movlw	0
 11173  00390E  6E02               	movwf	?___ftpack+1,c
 11174  003910  0E00               	movlw	0
 11175  003912  6E03               	movwf	?___ftpack+2,c
 11176  003914  D04C               	goto	i2l997
 11177  003916                     i2l5705:
 11178  003916  2A04               	incf	___ftpack@exp,f,c
 11179  003918  90D8               	bcf	status,0,c
 11180  00391A  3203               	rrcf	___ftpack@arg+2,f,c
 11181  00391C  3202               	rrcf	___ftpack@arg+1,f,c
 11182  00391E  3201               	rrcf	___ftpack@arg,f,c
 11183  003920                     i2l5707:
 11184  003920  0E00               	movlw	0
 11185  003922  1401               	andwf	___ftpack@arg,w,c
 11186  003924  6E06               	movwf	??___ftpack& (0+255),c
 11187  003926  0E00               	movlw	0
 11188  003928  1402               	andwf	___ftpack@arg+1,w,c
 11189  00392A  6E07               	movwf	(??___ftpack+1)& (0+255),c
 11190  00392C  0EFE               	movlw	254
 11191  00392E  1403               	andwf	___ftpack@arg+2,w,c
 11192  003930  6E08               	movwf	(??___ftpack+2)& (0+255),c
 11193  003932  5006               	movf	??___ftpack,w,c
 11194  003934  1007               	iorwf	??___ftpack+1,w,c
 11195  003936  1008               	iorwf	??___ftpack+2,w,c
 11196  003938  B4D8               	btfsc	status,2,c
 11197  00393A  D00C               	goto	i2l5713
 11198  00393C  D7EC               	goto	i2l5705
 11199  00393E                     i2l5709:
 11200  00393E  2A04               	incf	___ftpack@exp,f,c
 11201  003940  0E01               	movlw	1
 11202  003942  2601               	addwf	___ftpack@arg,f,c
 11203  003944  0E00               	movlw	0
 11204  003946  2202               	addwfc	___ftpack@arg+1,f,c
 11205  003948  0E00               	movlw	0
 11206  00394A  2203               	addwfc	___ftpack@arg+2,f,c
 11207  00394C  90D8               	bcf	status,0,c
 11208  00394E  3203               	rrcf	___ftpack@arg+2,f,c
 11209  003950  3202               	rrcf	___ftpack@arg+1,f,c
 11210  003952  3201               	rrcf	___ftpack@arg,f,c
 11211  003954                     i2l5713:
 11212  003954  0E00               	movlw	0
 11213  003956  1401               	andwf	___ftpack@arg,w,c
 11214  003958  6E06               	movwf	??___ftpack& (0+255),c
 11215  00395A  0E00               	movlw	0
 11216  00395C  1402               	andwf	___ftpack@arg+1,w,c
 11217  00395E  6E07               	movwf	(??___ftpack+1)& (0+255),c
 11218  003960  0EFF               	movlw	255
 11219  003962  1403               	andwf	___ftpack@arg+2,w,c
 11220  003964  6E08               	movwf	(??___ftpack+2)& (0+255),c
 11221  003966  5006               	movf	??___ftpack,w,c
 11222  003968  1007               	iorwf	??___ftpack+1,w,c
 11223  00396A  1008               	iorwf	??___ftpack+2,w,c
 11224  00396C  B4D8               	btfsc	status,2,c
 11225  00396E  D006               	goto	i2l5717
 11226  003970  D7E6               	goto	i2l5709
 11227  003972                     i2l5715:
 11228  003972  0604               	decf	___ftpack@exp,f,c
 11229  003974  90D8               	bcf	status,0,c
 11230  003976  3601               	rlcf	___ftpack@arg,f,c
 11231  003978  3602               	rlcf	___ftpack@arg+1,f,c
 11232  00397A  3603               	rlcf	___ftpack@arg+2,f,c
 11233  00397C                     i2l5717:
 11234  00397C  AE02               	btfss	___ftpack@arg+1,7,c
 11235  00397E  D7F9               	goto	i2l5715
 11236  003980  A004               	btfss	___ftpack@exp,0,c
 11237  003982  9E02               	bcf	___ftpack@arg+1,7,c
 11238  003984  90D8               	bcf	status,0,c
 11239  003986  3204               	rrcf	___ftpack@exp,f,c
 11240  003988  5004               	movf	___ftpack@exp,w,c
 11241  00398A  6E08               	movwf	(??___ftpack+2)& (0+255),c
 11242  00398C  6A07               	clrf	(??___ftpack+1)& (0+255),c
 11243  00398E  6A06               	clrf	??___ftpack& (0+255),c
 11244  003990  5006               	movf	??___ftpack,w,c
 11245  003992  1201               	iorwf	___ftpack@arg,f,c
 11246  003994  5007               	movf	??___ftpack+1,w,c
 11247  003996  1202               	iorwf	___ftpack@arg+1,f,c
 11248  003998  5008               	movf	??___ftpack+2,w,c
 11249  00399A  1203               	iorwf	___ftpack@arg+2,f,c
 11250  00399C  5005               	movf	___ftpack@sign,w,c
 11251  00399E  A4D8               	btfss	status,2,c
 11252  0039A0  8E03               	bsf	___ftpack@arg+2,7,c
 11253  0039A2  C001  F001         	movff	___ftpack@arg,?___ftpack
 11254  0039A6  C002  F002         	movff	___ftpack@arg+1,?___ftpack+1
 11255  0039AA  C003  F003         	movff	___ftpack@arg+2,?___ftpack+2
 11256  0039AE                     i2l997:
 11257  0039AE  0012               	return	
 11258  0039B0                     __end_of___ftpack:
 11259                           	opt stack 0
 11260                           tosu	equ	0xFFF
 11261                           tosh	equ	0xFFE
 11262                           tosl	equ	0xFFD
 11263                           pclatu	equ	0xFFB
 11264                           pclath	equ	0xFFA
 11265                           tblptru	equ	0xFF8
 11266                           tblptrh	equ	0xFF7
 11267                           tblptrl	equ	0xFF6
 11268                           tablat	equ	0xFF5
 11269                           prodh	equ	0xFF4
 11270                           prodl	equ	0xFF3
 11271                           intcon	equ	0xFF2
 11272                           intcon2	equ	0xFF1
 11273                           indf0	equ	0xFEF
 11274                           postinc0	equ	0xFEE
 11275                           fsr0h	equ	0xFEA
 11276                           fsr0l	equ	0xFE9
 11277                           wreg	equ	0xFE8
 11278                           postinc1	equ	0xFE6
 11279                           postdec1	equ	0xFE5
 11280                           fsr1h	equ	0xFE2
 11281                           fsr1l	equ	0xFE1
 11282                           indf2	equ	0xFDF
 11283                           postinc2	equ	0xFDE
 11284                           postdec2	equ	0xFDD
 11285                           plusw2	equ	0xFDB
 11286                           fsr2h	equ	0xFDA
 11287                           fsr2l	equ	0xFD9
 11288                           status	equ	0xFD8
 11289                           
 11290 ;; *************** function __div_to_l_ *****************
 11291 ;; Defined at:
 11292 ;;		line 61 in file "/usr/opt/microchip/xc8/v1.20/sources/common/fldivl.c"
 11293 ;; Parameters:    Size  Location     Type
 11294 ;;  f1              3    0[COMRAM] float 
 11295 ;;  f2              3    3[COMRAM] float 
 11296 ;; Auto vars:     Size  Location     Type
 11297 ;;  quot            4    7[COMRAM] unsigned long 
 11298 ;;  exp1            1   12[COMRAM] unsigned char 
 11299 ;;  cntr            1   11[COMRAM] unsigned char 
 11300 ;; Return value:  Size  Location     Type
 11301 ;;                  4    0[COMRAM] unsigned long 
 11302 ;; Registers used:
 11303 ;;		wreg, status,2, status,0
 11304 ;; Tracked objects:
 11305 ;;		On entry : 0/0
 11306 ;;		On exit  : 0/0
 11307 ;;		Unchanged: 0/0
 11308 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11309 ;;      Params:         6       0       0       0       0       0       0       0       0
 11310 ;;      Locals:         6       0       0       0       0       0       0       0       0
 11311 ;;      Temps:          1       0       0       0       0       0       0       0       0
 11312 ;;      Totals:        13       0       0       0       0       0       0       0       0
 11313 ;;Total ram usage:       13 bytes
 11314 ;; Hardware stack levels used:    1
 11315 ;; This function calls:
 11316 ;;		Nothing
 11317 ;; This function is called by:
 11318 ;;		_sprintf
 11319 ;; This function uses a non-reentrant model
 11320 ;;
 11321                           
 11322                           	psect	text40
 11323  003566                     __ptext40:
 11324                           	opt stack 0
 11325  003566                     __div_to_l_:
 11326                           	opt stack 22
 11327                           
 11328                           ;incstack = 0
 11329                           ;incstack = 0
 11330  003566  3403               	rlcf	(__div_to_l_@f1+2)& (0+255),w,c
 11331  003568  3404               	rlcf	(__div_to_l_@f1+3)& (0+255),w,c
 11332  00356A  6E0D               	movwf	__div_to_l_@exp1,c
 11333  00356C  660D               	tstfsz	__div_to_l_@exp1& (0+255),c
 11334  00356E  D001               	goto	i2l5647
 11335  003570  D05A               	goto	i2u330_40
 11336  003572                     i2l5647:
 11337  003572  3406               	rlcf	(__div_to_l_@f2+2)& (0+255),w,c
 11338  003574  3407               	rlcf	(__div_to_l_@f2+3)& (0+255),w,c
 11339  003576  6E0C               	movwf	__div_to_l_@cntr,c
 11340  003578  660C               	tstfsz	__div_to_l_@cntr& (0+255),c
 11341  00357A  D001               	goto	i2l5653
 11342  00357C  D054               	goto	i2u330_40
 11343  00357E                     i2l5653:
 11344  00357E  8E03               	bsf	__div_to_l_@f1+2,7,c
 11345  003580  0EFF               	movlw	255
 11346  003582  1601               	andwf	__div_to_l_@f1,f,c
 11347  003584  0EFF               	movlw	255
 11348  003586  1602               	andwf	__div_to_l_@f1+1,f,c
 11349  003588  0EFF               	movlw	255
 11350  00358A  1603               	andwf	__div_to_l_@f1+2,f,c
 11351  00358C  0E00               	movlw	0
 11352  00358E  1604               	andwf	__div_to_l_@f1+3,f,c
 11353  003590  8E06               	bsf	__div_to_l_@f2+2,7,c
 11354  003592  0EFF               	movlw	255
 11355  003594  1604               	andwf	__div_to_l_@f2,f,c
 11356  003596  0EFF               	movlw	255
 11357  003598  1605               	andwf	__div_to_l_@f2+1,f,c
 11358  00359A  0EFF               	movlw	255
 11359  00359C  1606               	andwf	__div_to_l_@f2+2,f,c
 11360  00359E  0E00               	movlw	0
 11361  0035A0  1607               	andwf	__div_to_l_@f2+3,f,c
 11362  0035A2  0E00               	movlw	0
 11363  0035A4  6E08               	movwf	__div_to_l_@quot,c
 11364  0035A6  0E00               	movlw	0
 11365  0035A8  6E09               	movwf	__div_to_l_@quot+1,c
 11366  0035AA  0E00               	movlw	0
 11367  0035AC  6E0A               	movwf	__div_to_l_@quot+2,c
 11368  0035AE  0E00               	movlw	0
 11369  0035B0  6E0B               	movwf	__div_to_l_@quot+3,c
 11370  0035B2  0E7F               	movlw	127
 11371  0035B4  5E0D               	subwf	__div_to_l_@exp1,f,c
 11372  0035B6  500C               	movf	__div_to_l_@cntr,w,c
 11373  0035B8  0FA0               	addlw	160
 11374  0035BA  5E0D               	subwf	__div_to_l_@exp1,f,c
 11375  0035BC  6E07               	movwf	??__div_to_l_& (0+255),c
 11376  0035BE  0E20               	movlw	32
 11377  0035C0  6E0C               	movwf	__div_to_l_@cntr,c
 11378  0035C2  5007               	movf	??__div_to_l_& (0+255),w,c
 11379  0035C4                     i2l958:
 11380  0035C4  90D8               	bcf	status,0,c
 11381  0035C6  3608               	rlcf	__div_to_l_@quot,f,c
 11382  0035C8  3609               	rlcf	__div_to_l_@quot+1,f,c
 11383  0035CA  360A               	rlcf	__div_to_l_@quot+2,f,c
 11384  0035CC  360B               	rlcf	__div_to_l_@quot+3,f,c
 11385  0035CE  5004               	movf	__div_to_l_@f2,w,c
 11386  0035D0  5C01               	subwf	__div_to_l_@f1,w,c
 11387  0035D2  5005               	movf	__div_to_l_@f2+1,w,c
 11388  0035D4  5802               	subwfb	__div_to_l_@f1+1,w,c
 11389  0035D6  5006               	movf	__div_to_l_@f2+2,w,c
 11390  0035D8  5803               	subwfb	__div_to_l_@f1+2,w,c
 11391  0035DA  5007               	movf	__div_to_l_@f2+3,w,c
 11392  0035DC  5804               	subwfb	__div_to_l_@f1+3,w,c
 11393  0035DE  A0D8               	btfss	status,0,c
 11394  0035E0  D009               	goto	i2l5673
 11395  0035E2  5004               	movf	__div_to_l_@f2,w,c
 11396  0035E4  5E01               	subwf	__div_to_l_@f1,f,c
 11397  0035E6  5005               	movf	__div_to_l_@f2+1,w,c
 11398  0035E8  5A02               	subwfb	__div_to_l_@f1+1,f,c
 11399  0035EA  5006               	movf	__div_to_l_@f2+2,w,c
 11400  0035EC  5A03               	subwfb	__div_to_l_@f1+2,f,c
 11401  0035EE  5007               	movf	__div_to_l_@f2+3,w,c
 11402  0035F0  5A04               	subwfb	__div_to_l_@f1+3,f,c
 11403  0035F2  8008               	bsf	__div_to_l_@quot,0,c
 11404  0035F4                     i2l5673:
 11405  0035F4  90D8               	bcf	status,0,c
 11406  0035F6  3601               	rlcf	__div_to_l_@f1,f,c
 11407  0035F8  3602               	rlcf	__div_to_l_@f1+1,f,c
 11408  0035FA  3603               	rlcf	__div_to_l_@f1+2,f,c
 11409  0035FC  3604               	rlcf	__div_to_l_@f1+3,f,c
 11410  0035FE  2E0C               	decfsz	__div_to_l_@cntr,f,c
 11411  003600  D7E1               	goto	i2l958
 11412  003602  AE0D               	btfss	__div_to_l_@exp1,7,c
 11413  003604  D00D               	goto	i2l5687
 11414  003606  500D               	movf	__div_to_l_@exp1,w,c
 11415  003608  0A80               	xorlw	128
 11416  00360A  0F9F               	addlw	159
 11417  00360C  A0D8               	btfss	status,0,c
 11418  00360E  D00B               	goto	i2u330_40
 11419  003610                     i2l5683:
 11420  003610  90D8               	bcf	status,0,c
 11421  003612  320B               	rrcf	__div_to_l_@quot+3,f,c
 11422  003614  320A               	rrcf	__div_to_l_@quot+2,f,c
 11423  003616  3209               	rrcf	__div_to_l_@quot+1,f,c
 11424  003618  3208               	rrcf	__div_to_l_@quot,f,c
 11425  00361A  3E0D               	incfsz	__div_to_l_@exp1,f,c
 11426  00361C  D7F9               	goto	i2l5683
 11427  00361E  D014               	goto	i2l965
 11428  003620                     i2l5687:
 11429  003620  0E1F               	movlw	31
 11430  003622  640D               	cpfsgt	__div_to_l_@exp1,c
 11431  003624  D00F               	goto	i2l5695
 11432  003626                     i2u330_40:
 11433  003626  0E00               	movlw	0
 11434  003628  6E01               	movwf	?__div_to_l_,c
 11435  00362A  0E00               	movlw	0
 11436  00362C  6E02               	movwf	?__div_to_l_+1,c
 11437  00362E  0E00               	movlw	0
 11438  003630  6E03               	movwf	?__div_to_l_+2,c
 11439  003632  0E00               	movlw	0
 11440  003634  6E04               	movwf	?__div_to_l_+3,c
 11441  003636  D010               	goto	i2l956
 11442  003638                     i2l5693:
 11443  003638  90D8               	bcf	status,0,c
 11444  00363A  3608               	rlcf	__div_to_l_@quot,f,c
 11445  00363C  3609               	rlcf	__div_to_l_@quot+1,f,c
 11446  00363E  360A               	rlcf	__div_to_l_@quot+2,f,c
 11447  003640  360B               	rlcf	__div_to_l_@quot+3,f,c
 11448  003642  060D               	decf	__div_to_l_@exp1,f,c
 11449  003644                     i2l5695:
 11450  003644  660D               	tstfsz	__div_to_l_@exp1,c
 11451  003646  D7F8               	goto	i2l5693
 11452  003648                     i2l965:
 11453  003648  C008  F001         	movff	__div_to_l_@quot,?__div_to_l_
 11454  00364C  C009  F002         	movff	__div_to_l_@quot+1,?__div_to_l_+1
 11455  003650  C00A  F003         	movff	__div_to_l_@quot+2,?__div_to_l_+2
 11456  003654  C00B  F004         	movff	__div_to_l_@quot+3,?__div_to_l_+3
 11457  003658                     i2l956:
 11458  003658  0012               	return	
 11459  00365A                     __end_of__div_to_l_:
 11460                           	opt stack 0
 11461                           tosu	equ	0xFFF
 11462                           tosh	equ	0xFFE
 11463                           tosl	equ	0xFFD
 11464                           pclatu	equ	0xFFB
 11465                           pclath	equ	0xFFA
 11466                           tblptru	equ	0xFF8
 11467                           tblptrh	equ	0xFF7
 11468                           tblptrl	equ	0xFF6
 11469                           tablat	equ	0xFF5
 11470                           prodh	equ	0xFF4
 11471                           prodl	equ	0xFF3
 11472                           intcon	equ	0xFF2
 11473                           intcon2	equ	0xFF1
 11474                           indf0	equ	0xFEF
 11475                           postinc0	equ	0xFEE
 11476                           fsr0h	equ	0xFEA
 11477                           fsr0l	equ	0xFE9
 11478                           wreg	equ	0xFE8
 11479                           postinc1	equ	0xFE6
 11480                           postdec1	equ	0xFE5
 11481                           fsr1h	equ	0xFE2
 11482                           fsr1l	equ	0xFE1
 11483                           indf2	equ	0xFDF
 11484                           postinc2	equ	0xFDE
 11485                           postdec2	equ	0xFDD
 11486                           plusw2	equ	0xFDB
 11487                           fsr2h	equ	0xFDA
 11488                           fsr2l	equ	0xFD9
 11489                           status	equ	0xFD8
 11490                           
 11491 ;; *************** function __tdiv_to_l_ *****************
 11492 ;; Defined at:
 11493 ;;		line 61 in file "/usr/opt/microchip/xc8/v1.20/sources/common/ftdivl.c"
 11494 ;; Parameters:    Size  Location     Type
 11495 ;;  f1              3    0[COMRAM] float 
 11496 ;;  f2              3    3[COMRAM] float 
 11497 ;; Auto vars:     Size  Location     Type
 11498 ;;  quot            4   11[COMRAM] unsigned long 
 11499 ;;  exp1            1   16[COMRAM] unsigned char 
 11500 ;;  cntr            1   15[COMRAM] unsigned char 
 11501 ;; Return value:  Size  Location     Type
 11502 ;;                  4    0[COMRAM] unsigned long 
 11503 ;; Registers used:
 11504 ;;		wreg, status,2, status,0
 11505 ;; Tracked objects:
 11506 ;;		On entry : 0/0
 11507 ;;		On exit  : 0/0
 11508 ;;		Unchanged: 0/0
 11509 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11510 ;;      Params:         6       0       0       0       0       0       0       0       0
 11511 ;;      Locals:         6       0       0       0       0       0       0       0       0
 11512 ;;      Temps:          5       0       0       0       0       0       0       0       0
 11513 ;;      Totals:        17       0       0       0       0       0       0       0       0
 11514 ;;Total ram usage:       17 bytes
 11515 ;; Hardware stack levels used:    1
 11516 ;; This function calls:
 11517 ;;		Nothing
 11518 ;; This function is called by:
 11519 ;;		_sprintf
 11520 ;; This function uses a non-reentrant model
 11521 ;;
 11522                           
 11523                           	psect	text41
 11524  003236                     __ptext41:
 11525                           	opt stack 0
 11526  003236                     __tdiv_to_l_:
 11527                           	opt stack 22
 11528                           
 11529                           ;incstack = 0
 11530                           ;incstack = 0
 11531  003236  0E0F               	movlw	15
 11532  003238  6E07               	movwf	??__tdiv_to_l_& (0+255),c
 11533  00323A  C001  F008         	movff	__tdiv_to_l_@f1,??__tdiv_to_l_+1
 11534  00323E  C002  F009         	movff	__tdiv_to_l_@f1+1,??__tdiv_to_l_+2
 11535  003242  C003  F00A         	movff	__tdiv_to_l_@f1+2,??__tdiv_to_l_+3
 11536  003246  2807               	incf	??__tdiv_to_l_,w,c
 11537  003248  6E0B               	movwf	(??__tdiv_to_l_+4)& (0+255),c
 11538  00324A  D004               	goto	i2u316_40
 11539  00324C                     i2u316_45:
 11540  00324C  90D8               	bcf	status,0,c
 11541  00324E  320A               	rrcf	??__tdiv_to_l_+3,f,c
 11542  003250  3209               	rrcf	??__tdiv_to_l_+2,f,c
 11543  003252  3208               	rrcf	??__tdiv_to_l_+1,f,c
 11544  003254                     i2u316_40:
 11545  003254  2E0B               	decfsz	(??__tdiv_to_l_+4)& (0+255),f,c
 11546  003256  D7FA               	goto	i2u316_45
 11547  003258  5008               	movf	??__tdiv_to_l_+1,w,c
 11548  00325A  6E11               	movwf	__tdiv_to_l_@exp1,c
 11549  00325C  6611               	tstfsz	__tdiv_to_l_@exp1& (0+255),c
 11550  00325E  D001               	goto	i2l5591
 11551  003260  D061               	goto	i2u323_40
 11552  003262                     i2l5591:
 11553  003262  0E0F               	movlw	15
 11554  003264  6E07               	movwf	??__tdiv_to_l_& (0+255),c
 11555  003266  C004  F008         	movff	__tdiv_to_l_@f2,??__tdiv_to_l_+1
 11556  00326A  C005  F009         	movff	__tdiv_to_l_@f2+1,??__tdiv_to_l_+2
 11557  00326E  C006  F00A         	movff	__tdiv_to_l_@f2+2,??__tdiv_to_l_+3
 11558  003272  2807               	incf	??__tdiv_to_l_,w,c
 11559  003274  6E0B               	movwf	(??__tdiv_to_l_+4)& (0+255),c
 11560  003276  D004               	goto	i2u318_40
 11561  003278                     i2u318_45:
 11562  003278  90D8               	bcf	status,0,c
 11563  00327A  320A               	rrcf	??__tdiv_to_l_+3,f,c
 11564  00327C  3209               	rrcf	??__tdiv_to_l_+2,f,c
 11565  00327E  3208               	rrcf	??__tdiv_to_l_+1,f,c
 11566  003280                     i2u318_40:
 11567  003280  2E0B               	decfsz	(??__tdiv_to_l_+4)& (0+255),f,c
 11568  003282  D7FA               	goto	i2u318_45
 11569  003284  5008               	movf	??__tdiv_to_l_+1,w,c
 11570  003286  6E10               	movwf	__tdiv_to_l_@cntr,c
 11571  003288  6610               	tstfsz	__tdiv_to_l_@cntr& (0+255),c
 11572  00328A  D001               	goto	i2l5597
 11573  00328C  D04B               	goto	i2u323_40
 11574  00328E                     i2l5597:
 11575  00328E  8E02               	bsf	__tdiv_to_l_@f1+1,7,c
 11576  003290  0EFF               	movlw	255
 11577  003292  1601               	andwf	__tdiv_to_l_@f1,f,c
 11578  003294  0EFF               	movlw	255
 11579  003296  1602               	andwf	__tdiv_to_l_@f1+1,f,c
 11580  003298  0E00               	movlw	0
 11581  00329A  1603               	andwf	__tdiv_to_l_@f1+2,f,c
 11582  00329C  8E05               	bsf	__tdiv_to_l_@f2+1,7,c
 11583  00329E  0EFF               	movlw	255
 11584  0032A0  1604               	andwf	__tdiv_to_l_@f2,f,c
 11585  0032A2  0EFF               	movlw	255
 11586  0032A4  1605               	andwf	__tdiv_to_l_@f2+1,f,c
 11587  0032A6  0E00               	movlw	0
 11588  0032A8  1606               	andwf	__tdiv_to_l_@f2+2,f,c
 11589  0032AA  0E00               	movlw	0
 11590  0032AC  6E0C               	movwf	__tdiv_to_l_@quot,c
 11591  0032AE  0E00               	movlw	0
 11592  0032B0  6E0D               	movwf	__tdiv_to_l_@quot+1,c
 11593  0032B2  0E00               	movlw	0
 11594  0032B4  6E0E               	movwf	__tdiv_to_l_@quot+2,c
 11595  0032B6  0E00               	movlw	0
 11596  0032B8  6E0F               	movwf	__tdiv_to_l_@quot+3,c
 11597  0032BA  0E7F               	movlw	127
 11598  0032BC  5E11               	subwf	__tdiv_to_l_@exp1,f,c
 11599  0032BE  5010               	movf	__tdiv_to_l_@cntr,w,c
 11600  0032C0  0F98               	addlw	152
 11601  0032C2  5E11               	subwf	__tdiv_to_l_@exp1,f,c
 11602  0032C4  6E07               	movwf	??__tdiv_to_l_& (0+255),c
 11603  0032C6  0E18               	movlw	24
 11604  0032C8  6E10               	movwf	__tdiv_to_l_@cntr,c
 11605  0032CA  5007               	movf	??__tdiv_to_l_& (0+255),w,c
 11606  0032CC                     i2l5611:
 11607  0032CC  90D8               	bcf	status,0,c
 11608  0032CE  360C               	rlcf	__tdiv_to_l_@quot,f,c
 11609  0032D0  360D               	rlcf	__tdiv_to_l_@quot+1,f,c
 11610  0032D2  360E               	rlcf	__tdiv_to_l_@quot+2,f,c
 11611  0032D4  360F               	rlcf	__tdiv_to_l_@quot+3,f,c
 11612  0032D6  5004               	movf	__tdiv_to_l_@f2,w,c
 11613  0032D8  5C01               	subwf	__tdiv_to_l_@f1,w,c
 11614  0032DA  5005               	movf	__tdiv_to_l_@f2+1,w,c
 11615  0032DC  5802               	subwfb	__tdiv_to_l_@f1+1,w,c
 11616  0032DE  5006               	movf	__tdiv_to_l_@f2+2,w,c
 11617  0032E0  5803               	subwfb	__tdiv_to_l_@f1+2,w,c
 11618  0032E2  A0D8               	btfss	status,0,c
 11619  0032E4  D007               	goto	i2l1077
 11620  0032E6  5004               	movf	__tdiv_to_l_@f2,w,c
 11621  0032E8  5E01               	subwf	__tdiv_to_l_@f1,f,c
 11622  0032EA  5005               	movf	__tdiv_to_l_@f2+1,w,c
 11623  0032EC  5A02               	subwfb	__tdiv_to_l_@f1+1,f,c
 11624  0032EE  5006               	movf	__tdiv_to_l_@f2+2,w,c
 11625  0032F0  5A03               	subwfb	__tdiv_to_l_@f1+2,f,c
 11626  0032F2  800C               	bsf	__tdiv_to_l_@quot,0,c
 11627  0032F4                     i2l1077:
 11628  0032F4  90D8               	bcf	status,0,c
 11629  0032F6  3601               	rlcf	__tdiv_to_l_@f1,f,c
 11630  0032F8  3602               	rlcf	__tdiv_to_l_@f1+1,f,c
 11631  0032FA  3603               	rlcf	__tdiv_to_l_@f1+2,f,c
 11632  0032FC  2E10               	decfsz	__tdiv_to_l_@cntr,f,c
 11633  0032FE  D7E6               	goto	i2l5611
 11634  003300  AE11               	btfss	__tdiv_to_l_@exp1,7,c
 11635  003302  D00D               	goto	i2l5631
 11636  003304  5011               	movf	__tdiv_to_l_@exp1,w,c
 11637  003306  0A80               	xorlw	128
 11638  003308  0F97               	addlw	151
 11639  00330A  A0D8               	btfss	status,0,c
 11640  00330C  D00B               	goto	i2u323_40
 11641  00330E                     i2l5627:
 11642  00330E  90D8               	bcf	status,0,c
 11643  003310  320F               	rrcf	__tdiv_to_l_@quot+3,f,c
 11644  003312  320E               	rrcf	__tdiv_to_l_@quot+2,f,c
 11645  003314  320D               	rrcf	__tdiv_to_l_@quot+1,f,c
 11646  003316  320C               	rrcf	__tdiv_to_l_@quot,f,c
 11647  003318  3E11               	incfsz	__tdiv_to_l_@exp1,f,c
 11648  00331A  D7F9               	goto	i2l5627
 11649  00331C  D014               	goto	i2l1083
 11650  00331E                     i2l5631:
 11651  00331E  0E17               	movlw	23
 11652  003320  6411               	cpfsgt	__tdiv_to_l_@exp1,c
 11653  003322  D00F               	goto	i2l5639
 11654  003324                     i2u323_40:
 11655  003324  0E00               	movlw	0
 11656  003326  6E01               	movwf	?__tdiv_to_l_,c
 11657  003328  0E00               	movlw	0
 11658  00332A  6E02               	movwf	?__tdiv_to_l_+1,c
 11659  00332C  0E00               	movlw	0
 11660  00332E  6E03               	movwf	?__tdiv_to_l_+2,c
 11661  003330  0E00               	movlw	0
 11662  003332  6E04               	movwf	?__tdiv_to_l_+3,c
 11663  003334  D010               	goto	i2l1074
 11664  003336                     i2l5637:
 11665  003336  90D8               	bcf	status,0,c
 11666  003338  360C               	rlcf	__tdiv_to_l_@quot,f,c
 11667  00333A  360D               	rlcf	__tdiv_to_l_@quot+1,f,c
 11668  00333C  360E               	rlcf	__tdiv_to_l_@quot+2,f,c
 11669  00333E  360F               	rlcf	__tdiv_to_l_@quot+3,f,c
 11670  003340  0611               	decf	__tdiv_to_l_@exp1,f,c
 11671  003342                     i2l5639:
 11672  003342  6611               	tstfsz	__tdiv_to_l_@exp1,c
 11673  003344  D7F8               	goto	i2l5637
 11674  003346                     i2l1083:
 11675  003346  C00C  F001         	movff	__tdiv_to_l_@quot,?__tdiv_to_l_
 11676  00334A  C00D  F002         	movff	__tdiv_to_l_@quot+1,?__tdiv_to_l_+1
 11677  00334E  C00E  F003         	movff	__tdiv_to_l_@quot+2,?__tdiv_to_l_+2
 11678  003352  C00F  F004         	movff	__tdiv_to_l_@quot+3,?__tdiv_to_l_+3
 11679  003356                     i2l1074:
 11680  003356  0012               	return	
 11681  003358                     __end_of__tdiv_to_l_:
 11682                           	opt stack 0
 11683                           tosu	equ	0xFFF
 11684                           tosh	equ	0xFFE
 11685                           tosl	equ	0xFFD
 11686                           pclatu	equ	0xFFB
 11687                           pclath	equ	0xFFA
 11688                           tblptru	equ	0xFF8
 11689                           tblptrh	equ	0xFF7
 11690                           tblptrl	equ	0xFF6
 11691                           tablat	equ	0xFF5
 11692                           prodh	equ	0xFF4
 11693                           prodl	equ	0xFF3
 11694                           intcon	equ	0xFF2
 11695                           intcon2	equ	0xFF1
 11696                           indf0	equ	0xFEF
 11697                           postinc0	equ	0xFEE
 11698                           fsr0h	equ	0xFEA
 11699                           fsr0l	equ	0xFE9
 11700                           wreg	equ	0xFE8
 11701                           postinc1	equ	0xFE6
 11702                           postdec1	equ	0xFE5
 11703                           fsr1h	equ	0xFE2
 11704                           fsr1l	equ	0xFE1
 11705                           indf2	equ	0xFDF
 11706                           postinc2	equ	0xFDE
 11707                           postdec2	equ	0xFDD
 11708                           plusw2	equ	0xFDB
 11709                           fsr2h	equ	0xFDA
 11710                           fsr2l	equ	0xFD9
 11711                           status	equ	0xFD8
 11712                           
 11713 ;; *************** function _isdigit *****************
 11714 ;; Defined at:
 11715 ;;		line 13 in file "/usr/opt/microchip/xc8/v1.20/sources/common/isdigit.c"
 11716 ;; Parameters:    Size  Location     Type
 11717 ;;  c               1    0[COMRAM] unsigned char 
 11718 ;; Auto vars:     Size  Location     Type
 11719 ;;		None
 11720 ;; Return value:  Size  Location     Type
 11721 ;;		None               void
 11722 ;; Registers used:
 11723 ;;		wreg, status,2, status,0
 11724 ;; Tracked objects:
 11725 ;;		On entry : 0/0
 11726 ;;		On exit  : 0/0
 11727 ;;		Unchanged: 0/0
 11728 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11729 ;;      Params:         1       0       0       0       0       0       0       0       0
 11730 ;;      Locals:         1       0       0       0       0       0       0       0       0
 11731 ;;      Temps:          1       0       0       0       0       0       0       0       0
 11732 ;;      Totals:         3       0       0       0       0       0       0       0       0
 11733 ;;Total ram usage:        3 bytes
 11734 ;; Hardware stack levels used:    1
 11735 ;; This function calls:
 11736 ;;		Nothing
 11737 ;; This function is called by:
 11738 ;;		_sprintf
 11739 ;; This function uses a non-reentrant model
 11740 ;;
 11741                           
 11742                           	psect	text42
 11743  00476C                     __ptext42:
 11744                           	opt stack 0
 11745  00476C                     _isdigit:
 11746                           	opt stack 22
 11747                           
 11748                           ;incstack = 0
 11749                           ;incstack = 0
 11750  00476C  6E02               	movwf	??_isdigit& (0+255),c
 11751  00476E  0E00               	movlw	0
 11752  004770  6E03               	movwf	_isdigit$1026,c
 11753  004772  5002               	movf	??_isdigit& (0+255),w,c
 11754  004774  0E3A               	movlw	58
 11755  004776  6001               	cpfslt	isdigit@c,c
 11756  004778  D007               	goto	i2l5581
 11757  00477A  0E2F               	movlw	47
 11758  00477C  6401               	cpfsgt	isdigit@c,c
 11759  00477E  D004               	goto	i2l5581
 11760  004780  6E02               	movwf	??_isdigit& (0+255),c
 11761  004782  0E01               	movlw	1
 11762  004784  6E03               	movwf	_isdigit$1026,c
 11763  004786  5002               	movf	??_isdigit& (0+255),w,c
 11764  004788                     i2l5581:
 11765  004788  C003  F002         	movff	_isdigit$1026,??_isdigit
 11766  00478C  3002               	rrcf	??_isdigit,w,c
 11767  00478E  0012               	return	
 11768  004790                     __end_of_isdigit:
 11769                           	opt stack 0
 11770                           tosu	equ	0xFFF
 11771                           tosh	equ	0xFFE
 11772                           tosl	equ	0xFFD
 11773                           pclatu	equ	0xFFB
 11774                           pclath	equ	0xFFA
 11775                           tblptru	equ	0xFF8
 11776                           tblptrh	equ	0xFF7
 11777                           tblptrl	equ	0xFF6
 11778                           tablat	equ	0xFF5
 11779                           prodh	equ	0xFF4
 11780                           prodl	equ	0xFF3
 11781                           intcon	equ	0xFF2
 11782                           intcon2	equ	0xFF1
 11783                           indf0	equ	0xFEF
 11784                           postinc0	equ	0xFEE
 11785                           fsr0h	equ	0xFEA
 11786                           fsr0l	equ	0xFE9
 11787                           wreg	equ	0xFE8
 11788                           postinc1	equ	0xFE6
 11789                           postdec1	equ	0xFE5
 11790                           fsr1h	equ	0xFE2
 11791                           fsr1l	equ	0xFE1
 11792                           indf2	equ	0xFDF
 11793                           postinc2	equ	0xFDE
 11794                           postdec2	equ	0xFDD
 11795                           plusw2	equ	0xFDB
 11796                           fsr2h	equ	0xFDA
 11797                           fsr2l	equ	0xFD9
 11798                           status	equ	0xFD8
 11799                           
 11800 ;; *************** function _scale *****************
 11801 ;; Defined at:
 11802 ;;		line 426 in file "/usr/opt/microchip/xc8/v1.20/sources/common/doprnt.c"
 11803 ;; Parameters:    Size  Location     Type
 11804 ;;  scl             1   62[COMRAM] char 
 11805 ;; Auto vars:     Size  Location     Type
 11806 ;;		None
 11807 ;; Return value:  Size  Location     Type
 11808 ;;                  3   62[COMRAM] char 
 11809 ;; Registers used:
 11810 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11811 ;; Tracked objects:
 11812 ;;		On entry : 0/0
 11813 ;;		On exit  : 0/0
 11814 ;;		Unchanged: 0/0
 11815 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11816 ;;      Params:         3       0       0       0       0       0       0       0       0
 11817 ;;      Locals:         3       0       0       0       0       0       0       0       0
 11818 ;;      Temps:          6       0       0       0       0       0       0       0       0
 11819 ;;      Totals:        12       0       0       0       0       0       0       0       0
 11820 ;;Total ram usage:       12 bytes
 11821 ;; Hardware stack levels used:    1
 11822 ;; Hardware stack levels required when called:    2
 11823 ;; This function calls:
 11824 ;;		___ftmul
 11825 ;;		___awdiv
 11826 ;;		___awmod
 11827 ;;		___wmul
 11828 ;; This function is called by:
 11829 ;;		_sprintf
 11830 ;; This function uses a non-reentrant model
 11831 ;;
 11832                           
 11833                           	psect	text43
 11834  001F4C                     __ptext43:
 11835                           	opt stack 0
 11836  001F4C                     _scale:
 11837                           	opt stack 20
 11838                           
 11839                           ;doprnt.c: 428: if(scl < 0) {
 11840                           
 11841                           ;incstack = 0
 11842                           ;incstack = 0
 11843  001F4C  AE3F               	btfss	scale@scl,7,c
 11844  001F4E  D108               	goto	i2l6201
 11845                           
 11846                           ;doprnt.c: 429: scl = -scl;
 11847  001F50  6C3F               	negf	scale@scl,c
 11848                           
 11849                           ;doprnt.c: 430: if(scl>=110)
 11850  001F52  503F               	movf	scale@scl,w,c
 11851  001F54  0A80               	xorlw	128
 11852  001F56  0F12               	addlw	-238
 11853  001F58  A0D8               	btfss	status,0,c
 11854  001F5A  D09D               	goto	i2l6191
 11855                           
 11856                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
 11857  001F5C  0E00               	movlw	0
 11858  001F5E  6E1A               	movwf	?___wmul+3,c
 11859  001F60  0E03               	movlw	3
 11860  001F62  6E19               	movwf	?___wmul+2,c
 11861  001F64  0E00               	movlw	0
 11862  001F66  6E0D               	movwf	?___awdiv+3,c
 11863  001F68  0E0A               	movlw	10
 11864  001F6A  6E0C               	movwf	?___awdiv+2,c
 11865  001F6C  0E00               	movlw	0
 11866  001F6E  6E04               	movwf	?___awmod+3,c
 11867  001F70  0E64               	movlw	100
 11868  001F72  6E03               	movwf	?___awmod+2,c
 11869  001F74  503F               	movf	scale@scl,w,c
 11870  001F76  6E01               	movwf	?___awmod,c
 11871  001F78  6A02               	clrf	?___awmod+1,c
 11872  001F7A  BE01               	btfsc	?___awmod,7,c
 11873  001F7C  0602               	decf	?___awmod+1,f,c
 11874  001F7E  ECB9  F01F         	call	___awmod	;wreg free
 11875  001F82  C001  F00A         	movff	?___awmod,?___awdiv
 11876  001F86  C002  F00B         	movff	?___awmod+1,?___awdiv+1
 11877  001F8A  ECAC  F01E         	call	___awdiv	;wreg free
 11878  001F8E  0E09               	movlw	9
 11879  001F90  240A               	addwf	?___awdiv,w,c
 11880  001F92  6E17               	movwf	?___wmul,c
 11881  001F94  0E00               	movlw	0
 11882  001F96  200B               	addwfc	?___awdiv+1,w,c
 11883  001F98  6E18               	movwf	?___wmul+1,c
 11884  001F9A  EC14  F023         	call	___wmul	;wreg free
 11885  001F9E  0E35               	movlw	low __npowers_
 11886  001FA0  2417               	addwf	?___wmul,w,c
 11887  001FA2  6EF6               	movwf	tblptrl,c
 11888  001FA4  0E7F               	movlw	high __npowers_
 11889  001FA6  2018               	addwfc	?___wmul+1,w,c
 11890  001FA8  6EF7               	movwf	tblptrh,c
 11891  001FAA  0009               	tblrd		*+
 11892  001FAC  CFF5 F042          	movff	tablat,??_scale
 11893  001FB0  0009               	tblrd		*+
 11894  001FB2  CFF5 F043          	movff	tablat,??_scale+1
 11895  001FB6  0009               	tblrd		*+
 11896  001FB8  CFF5 F044          	movff	tablat,??_scale+2
 11897  001FBC  C044  F033         	movff	??_scale+2,?___ftmul+5
 11898  001FC0  C043  F032         	movff	??_scale+1,?___ftmul+4
 11899  001FC4  C042  F031         	movff	??_scale,?___ftmul+3
 11900  001FC8  0E00               	movlw	0
 11901  001FCA  6E1A               	movwf	?___wmul+3,c
 11902  001FCC  0E03               	movlw	3
 11903  001FCE  6E19               	movwf	?___wmul+2,c
 11904  001FD0  0E00               	movlw	0
 11905  001FD2  6E0D               	movwf	?___awdiv+3,c
 11906  001FD4  0E64               	movlw	100
 11907  001FD6  6E0C               	movwf	?___awdiv+2,c
 11908  001FD8  503F               	movf	scale@scl,w,c
 11909  001FDA  6E0A               	movwf	?___awdiv,c
 11910  001FDC  6A0B               	clrf	?___awdiv+1,c
 11911  001FDE  BE0A               	btfsc	?___awdiv,7,c
 11912  001FE0  060B               	decf	?___awdiv+1,f,c
 11913  001FE2  ECAC  F01E         	call	___awdiv	;wreg free
 11914  001FE6  0E12               	movlw	18
 11915  001FE8  240A               	addwf	?___awdiv,w,c
 11916  001FEA  6E17               	movwf	?___wmul,c
 11917  001FEC  0E00               	movlw	0
 11918  001FEE  200B               	addwfc	?___awdiv+1,w,c
 11919  001FF0  6E18               	movwf	?___wmul+1,c
 11920  001FF2  EC14  F023         	call	___wmul	;wreg free
 11921  001FF6  0E35               	movlw	low __npowers_
 11922  001FF8  2417               	addwf	?___wmul,w,c
 11923  001FFA  6EF6               	movwf	tblptrl,c
 11924  001FFC  0E7F               	movlw	high __npowers_
 11925  001FFE  2018               	addwfc	?___wmul+1,w,c
 11926  002000  6EF7               	movwf	tblptrh,c
 11927  002002  0009               	tblrd		*+
 11928  002004  CFF5 F045          	movff	tablat,??_scale+3
 11929  002008  0009               	tblrd		*+
 11930  00200A  CFF5 F046          	movff	tablat,??_scale+4
 11931  00200E  0009               	tblrd		*+
 11932  002010  CFF5 F047          	movff	tablat,??_scale+5
 11933  002014  C047  F030         	movff	??_scale+5,?___ftmul+2
 11934  002018  C046  F02F         	movff	??_scale+4,?___ftmul+1
 11935  00201C  C045  F02E         	movff	??_scale+3,?___ftmul
 11936  002020  ECAC  F019         	call	___ftmul	;wreg free
 11937  002024  C030  F04A         	movff	?___ftmul+2,_scale$1396+2
 11938  002028  C02F  F049         	movff	?___ftmul+1,_scale$1396+1
 11939  00202C  C02E  F048         	movff	?___ftmul,_scale$1396
 11940                           
 11941                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
 11942  002030  C048  F02E         	movff	_scale$1396,?___ftmul
 11943  002034  C049  F02F         	movff	_scale$1396+1,?___ftmul+1
 11944  002038  C04A  F030         	movff	_scale$1396+2,?___ftmul+2
 11945  00203C  0E00               	movlw	0
 11946  00203E  6E1A               	movwf	?___wmul+3,c
 11947  002040  0E03               	movlw	3
 11948  002042  6E19               	movwf	?___wmul+2,c
 11949  002044  0E00               	movlw	0
 11950  002046  6E04               	movwf	?___awmod+3,c
 11951  002048  0E0A               	movlw	10
 11952  00204A  6E03               	movwf	?___awmod+2,c
 11953  00204C  503F               	movf	scale@scl,w,c
 11954  00204E  6E01               	movwf	?___awmod,c
 11955  002050  6A02               	clrf	?___awmod+1,c
 11956  002052  BE01               	btfsc	?___awmod,7,c
 11957  002054  0602               	decf	?___awmod+1,f,c
 11958  002056  ECB9  F01F         	call	___awmod	;wreg free
 11959  00205A  C001  F017         	movff	?___awmod,?___wmul
 11960  00205E  C002  F018         	movff	?___awmod+1,?___wmul+1
 11961  002062  EC14  F023         	call	___wmul	;wreg free
 11962  002066  0E35               	movlw	low __npowers_
 11963  002068  2417               	addwf	?___wmul,w,c
 11964  00206A  6EF6               	movwf	tblptrl,c
 11965  00206C  0E7F               	movlw	high __npowers_
 11966  00206E  2018               	addwfc	?___wmul+1,w,c
 11967  002070  6EF7               	movwf	tblptrh,c
 11968  002072  0009               	tblrd		*+
 11969  002074  CFF5 F042          	movff	tablat,??_scale
 11970  002078  0009               	tblrd		*+
 11971  00207A  CFF5 F043          	movff	tablat,??_scale+1
 11972  00207E  0009               	tblrd		*+
 11973  002080  CFF5 F044          	movff	tablat,??_scale+2
 11974  002084  C044  F033         	movff	??_scale+2,?___ftmul+5
 11975  002088  C043  F032         	movff	??_scale+1,?___ftmul+4
 11976  00208C  C042  F031         	movff	??_scale,?___ftmul+3
 11977  002090  ECAC  F019         	call	___ftmul	;wreg free
 11978  002094  D164               	goto	L21
 11979  002096                     i2l6191:
 11980                           
 11981                           ;doprnt.c: 432: else if(scl > 10)
 11982  002096  503F               	movf	scale@scl,w,c
 11983  002098  0A80               	xorlw	128
 11984  00209A  0F75               	addlw	-139
 11985  00209C  A0D8               	btfss	status,0,c
 11986  00209E  D059               	goto	i2l6197
 11987                           
 11988                           ;doprnt.c: 433: return _npowers_[scl/10+9] * _npowers_[scl%10];
 11989  0020A0  0E00               	movlw	0
 11990  0020A2  6E1A               	movwf	?___wmul+3,c
 11991  0020A4  0E03               	movlw	3
 11992  0020A6  6E19               	movwf	?___wmul+2,c
 11993  0020A8  0E00               	movlw	0
 11994  0020AA  6E0D               	movwf	?___awdiv+3,c
 11995  0020AC  0E0A               	movlw	10
 11996  0020AE  6E0C               	movwf	?___awdiv+2,c
 11997  0020B0  503F               	movf	scale@scl,w,c
 11998  0020B2  6E0A               	movwf	?___awdiv,c
 11999  0020B4  6A0B               	clrf	?___awdiv+1,c
 12000  0020B6  BE0A               	btfsc	?___awdiv,7,c
 12001  0020B8  060B               	decf	?___awdiv+1,f,c
 12002  0020BA  ECAC  F01E         	call	___awdiv	;wreg free
 12003  0020BE  0E09               	movlw	9
 12004  0020C0  240A               	addwf	?___awdiv,w,c
 12005  0020C2  6E17               	movwf	?___wmul,c
 12006  0020C4  0E00               	movlw	0
 12007  0020C6  200B               	addwfc	?___awdiv+1,w,c
 12008  0020C8  6E18               	movwf	?___wmul+1,c
 12009  0020CA  EC14  F023         	call	___wmul	;wreg free
 12010  0020CE  0E35               	movlw	low __npowers_
 12011  0020D0  2417               	addwf	?___wmul,w,c
 12012  0020D2  6EF6               	movwf	tblptrl,c
 12013  0020D4  0E7F               	movlw	high __npowers_
 12014  0020D6  2018               	addwfc	?___wmul+1,w,c
 12015  0020D8  6EF7               	movwf	tblptrh,c
 12016  0020DA  0009               	tblrd		*+
 12017  0020DC  CFF5 F042          	movff	tablat,??_scale
 12018  0020E0  0009               	tblrd		*+
 12019  0020E2  CFF5 F043          	movff	tablat,??_scale+1
 12020  0020E6  0009               	tblrd		*+
 12021  0020E8  CFF5 F044          	movff	tablat,??_scale+2
 12022  0020EC  C044  F030         	movff	??_scale+2,?___ftmul+2
 12023  0020F0  C043  F02F         	movff	??_scale+1,?___ftmul+1
 12024  0020F4  C042  F02E         	movff	??_scale,?___ftmul
 12025  0020F8  0E00               	movlw	0
 12026  0020FA  6E1A               	movwf	?___wmul+3,c
 12027  0020FC  0E03               	movlw	3
 12028  0020FE  6E19               	movwf	?___wmul+2,c
 12029  002100  0E00               	movlw	0
 12030  002102  6E04               	movwf	?___awmod+3,c
 12031  002104  0E0A               	movlw	10
 12032  002106  6E03               	movwf	?___awmod+2,c
 12033  002108  503F               	movf	scale@scl,w,c
 12034  00210A  6E01               	movwf	?___awmod,c
 12035  00210C  6A02               	clrf	?___awmod+1,c
 12036  00210E  BE01               	btfsc	?___awmod,7,c
 12037  002110  0602               	decf	?___awmod+1,f,c
 12038  002112  ECB9  F01F         	call	___awmod	;wreg free
 12039  002116  C001  F017         	movff	?___awmod,?___wmul
 12040  00211A  C002  F018         	movff	?___awmod+1,?___wmul+1
 12041  00211E  EC14  F023         	call	___wmul	;wreg free
 12042  002122  0E35               	movlw	low __npowers_
 12043  002124  2417               	addwf	?___wmul,w,c
 12044  002126  6EF6               	movwf	tblptrl,c
 12045  002128  0E7F               	movlw	high __npowers_
 12046  00212A  2018               	addwfc	?___wmul+1,w,c
 12047  00212C  6EF7               	movwf	tblptrh,c
 12048  00212E  0009               	tblrd		*+
 12049  002130  CFF5 F045          	movff	tablat,??_scale+3
 12050  002134  0009               	tblrd		*+
 12051  002136  CFF5 F046          	movff	tablat,??_scale+4
 12052  00213A  0009               	tblrd		*+
 12053  00213C  CFF5 F047          	movff	tablat,??_scale+5
 12054  002140  C047  F033         	movff	??_scale+5,?___ftmul+5
 12055  002144  C046  F032         	movff	??_scale+4,?___ftmul+4
 12056  002148  C045  F031         	movff	??_scale+3,?___ftmul+3
 12057  00214C  ECAC  F019         	call	___ftmul	;wreg free
 12058  002150  D106               	goto	L21
 12059  002152                     i2l6197:
 12060                           
 12061                           ;doprnt.c: 434: return _npowers_[scl];
 12062  002152  503F               	movf	scale@scl,w,c
 12063  002154  0D03               	mullw	3
 12064  002156  0E35               	movlw	low __npowers_
 12065  002158  24F3               	addwf	prodl,w,c
 12066  00215A  6EF6               	movwf	tblptrl,c
 12067  00215C  0E7F               	movlw	high __npowers_
 12068  00215E  D10C               	goto	L20
 12069  002160                     i2l6201:
 12070                           
 12071                           ;doprnt.c: 435: }
 12072                           ;doprnt.c: 436: if(scl>=110)
 12073  002160  503F               	movf	scale@scl,w,c
 12074  002162  0A80               	xorlw	128
 12075  002164  0F12               	addlw	-238
 12076  002166  A0D8               	btfss	status,0,c
 12077  002168  D09D               	goto	i2l6209
 12078                           
 12079                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
 12080  00216A  0E00               	movlw	0
 12081  00216C  6E1A               	movwf	?___wmul+3,c
 12082  00216E  0E03               	movlw	3
 12083  002170  6E19               	movwf	?___wmul+2,c
 12084  002172  0E00               	movlw	0
 12085  002174  6E0D               	movwf	?___awdiv+3,c
 12086  002176  0E0A               	movlw	10
 12087  002178  6E0C               	movwf	?___awdiv+2,c
 12088  00217A  0E00               	movlw	0
 12089  00217C  6E04               	movwf	?___awmod+3,c
 12090  00217E  0E64               	movlw	100
 12091  002180  6E03               	movwf	?___awmod+2,c
 12092  002182  503F               	movf	scale@scl,w,c
 12093  002184  6E01               	movwf	?___awmod,c
 12094  002186  6A02               	clrf	?___awmod+1,c
 12095  002188  BE01               	btfsc	?___awmod,7,c
 12096  00218A  0602               	decf	?___awmod+1,f,c
 12097  00218C  ECB9  F01F         	call	___awmod	;wreg free
 12098  002190  C001  F00A         	movff	?___awmod,?___awdiv
 12099  002194  C002  F00B         	movff	?___awmod+1,?___awdiv+1
 12100  002198  ECAC  F01E         	call	___awdiv	;wreg free
 12101  00219C  0E09               	movlw	9
 12102  00219E  240A               	addwf	?___awdiv,w,c
 12103  0021A0  6E17               	movwf	?___wmul,c
 12104  0021A2  0E00               	movlw	0
 12105  0021A4  200B               	addwfc	?___awdiv+1,w,c
 12106  0021A6  6E18               	movwf	?___wmul+1,c
 12107  0021A8  EC14  F023         	call	___wmul	;wreg free
 12108  0021AC  0E5C               	movlw	low __powers_
 12109  0021AE  2417               	addwf	?___wmul,w,c
 12110  0021B0  6EF6               	movwf	tblptrl,c
 12111  0021B2  0E7F               	movlw	high __powers_
 12112  0021B4  2018               	addwfc	?___wmul+1,w,c
 12113  0021B6  6EF7               	movwf	tblptrh,c
 12114  0021B8  0009               	tblrd		*+
 12115  0021BA  CFF5 F042          	movff	tablat,??_scale
 12116  0021BE  0009               	tblrd		*+
 12117  0021C0  CFF5 F043          	movff	tablat,??_scale+1
 12118  0021C4  0009               	tblrd		*+
 12119  0021C6  CFF5 F044          	movff	tablat,??_scale+2
 12120  0021CA  C044  F033         	movff	??_scale+2,?___ftmul+5
 12121  0021CE  C043  F032         	movff	??_scale+1,?___ftmul+4
 12122  0021D2  C042  F031         	movff	??_scale,?___ftmul+3
 12123  0021D6  0E00               	movlw	0
 12124  0021D8  6E1A               	movwf	?___wmul+3,c
 12125  0021DA  0E03               	movlw	3
 12126  0021DC  6E19               	movwf	?___wmul+2,c
 12127  0021DE  0E00               	movlw	0
 12128  0021E0  6E0D               	movwf	?___awdiv+3,c
 12129  0021E2  0E64               	movlw	100
 12130  0021E4  6E0C               	movwf	?___awdiv+2,c
 12131  0021E6  503F               	movf	scale@scl,w,c
 12132  0021E8  6E0A               	movwf	?___awdiv,c
 12133  0021EA  6A0B               	clrf	?___awdiv+1,c
 12134  0021EC  BE0A               	btfsc	?___awdiv,7,c
 12135  0021EE  060B               	decf	?___awdiv+1,f,c
 12136  0021F0  ECAC  F01E         	call	___awdiv	;wreg free
 12137  0021F4  0E12               	movlw	18
 12138  0021F6  240A               	addwf	?___awdiv,w,c
 12139  0021F8  6E17               	movwf	?___wmul,c
 12140  0021FA  0E00               	movlw	0
 12141  0021FC  200B               	addwfc	?___awdiv+1,w,c
 12142  0021FE  6E18               	movwf	?___wmul+1,c
 12143  002200  EC14  F023         	call	___wmul	;wreg free
 12144  002204  0E5C               	movlw	low __powers_
 12145  002206  2417               	addwf	?___wmul,w,c
 12146  002208  6EF6               	movwf	tblptrl,c
 12147  00220A  0E7F               	movlw	high __powers_
 12148  00220C  2018               	addwfc	?___wmul+1,w,c
 12149  00220E  6EF7               	movwf	tblptrh,c
 12150  002210  0009               	tblrd		*+
 12151  002212  CFF5 F045          	movff	tablat,??_scale+3
 12152  002216  0009               	tblrd		*+
 12153  002218  CFF5 F046          	movff	tablat,??_scale+4
 12154  00221C  0009               	tblrd		*+
 12155  00221E  CFF5 F047          	movff	tablat,??_scale+5
 12156  002222  C047  F030         	movff	??_scale+5,?___ftmul+2
 12157  002226  C046  F02F         	movff	??_scale+4,?___ftmul+1
 12158  00222A  C045  F02E         	movff	??_scale+3,?___ftmul
 12159  00222E  ECAC  F019         	call	___ftmul	;wreg free
 12160  002232  C030  F04A         	movff	?___ftmul+2,_scale$1396+2
 12161  002236  C02F  F049         	movff	?___ftmul+1,_scale$1396+1
 12162  00223A  C02E  F048         	movff	?___ftmul,_scale$1396
 12163                           
 12164                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
 12165  00223E  C048  F02E         	movff	_scale$1396,?___ftmul
 12166  002242  C049  F02F         	movff	_scale$1396+1,?___ftmul+1
 12167  002246  C04A  F030         	movff	_scale$1396+2,?___ftmul+2
 12168  00224A  0E00               	movlw	0
 12169  00224C  6E1A               	movwf	?___wmul+3,c
 12170  00224E  0E03               	movlw	3
 12171  002250  6E19               	movwf	?___wmul+2,c
 12172  002252  0E00               	movlw	0
 12173  002254  6E04               	movwf	?___awmod+3,c
 12174  002256  0E0A               	movlw	10
 12175  002258  6E03               	movwf	?___awmod+2,c
 12176  00225A  503F               	movf	scale@scl,w,c
 12177  00225C  6E01               	movwf	?___awmod,c
 12178  00225E  6A02               	clrf	?___awmod+1,c
 12179  002260  BE01               	btfsc	?___awmod,7,c
 12180  002262  0602               	decf	?___awmod+1,f,c
 12181  002264  ECB9  F01F         	call	___awmod	;wreg free
 12182  002268  C001  F017         	movff	?___awmod,?___wmul
 12183  00226C  C002  F018         	movff	?___awmod+1,?___wmul+1
 12184  002270  EC14  F023         	call	___wmul	;wreg free
 12185  002274  0E5C               	movlw	low __powers_
 12186  002276  2417               	addwf	?___wmul,w,c
 12187  002278  6EF6               	movwf	tblptrl,c
 12188  00227A  0E7F               	movlw	high __powers_
 12189  00227C  2018               	addwfc	?___wmul+1,w,c
 12190  00227E  6EF7               	movwf	tblptrh,c
 12191  002280  0009               	tblrd		*+
 12192  002282  CFF5 F042          	movff	tablat,??_scale
 12193  002286  0009               	tblrd		*+
 12194  002288  CFF5 F043          	movff	tablat,??_scale+1
 12195  00228C  0009               	tblrd		*+
 12196  00228E  CFF5 F044          	movff	tablat,??_scale+2
 12197  002292  C044  F033         	movff	??_scale+2,?___ftmul+5
 12198  002296  C043  F032         	movff	??_scale+1,?___ftmul+4
 12199  00229A  C042  F031         	movff	??_scale,?___ftmul+3
 12200  00229E  ECAC  F019         	call	___ftmul	;wreg free
 12201  0022A2  D05D               	goto	L21
 12202  0022A4                     i2l6209:
 12203                           
 12204                           ;doprnt.c: 438: else if(scl > 10)
 12205  0022A4  503F               	movf	scale@scl,w,c
 12206  0022A6  0A80               	xorlw	128
 12207  0022A8  0F75               	addlw	-139
 12208  0022AA  A0D8               	btfss	status,0,c
 12209  0022AC  D05F               	goto	i2l6215
 12210                           
 12211                           ;doprnt.c: 439: return _powers_[scl/10+9] * _powers_[scl%10];
 12212  0022AE  0E00               	movlw	0
 12213  0022B0  6E1A               	movwf	?___wmul+3,c
 12214  0022B2  0E03               	movlw	3
 12215  0022B4  6E19               	movwf	?___wmul+2,c
 12216  0022B6  0E00               	movlw	0
 12217  0022B8  6E0D               	movwf	?___awdiv+3,c
 12218  0022BA  0E0A               	movlw	10
 12219  0022BC  6E0C               	movwf	?___awdiv+2,c
 12220  0022BE  503F               	movf	scale@scl,w,c
 12221  0022C0  6E0A               	movwf	?___awdiv,c
 12222  0022C2  6A0B               	clrf	?___awdiv+1,c
 12223  0022C4  BE0A               	btfsc	?___awdiv,7,c
 12224  0022C6  060B               	decf	?___awdiv+1,f,c
 12225  0022C8  ECAC  F01E         	call	___awdiv	;wreg free
 12226  0022CC  0E09               	movlw	9
 12227  0022CE  240A               	addwf	?___awdiv,w,c
 12228  0022D0  6E17               	movwf	?___wmul,c
 12229  0022D2  0E00               	movlw	0
 12230  0022D4  200B               	addwfc	?___awdiv+1,w,c
 12231  0022D6  6E18               	movwf	?___wmul+1,c
 12232  0022D8  EC14  F023         	call	___wmul	;wreg free
 12233  0022DC  0E5C               	movlw	low __powers_
 12234  0022DE  2417               	addwf	?___wmul,w,c
 12235  0022E0  6EF6               	movwf	tblptrl,c
 12236  0022E2  0E7F               	movlw	high __powers_
 12237  0022E4  2018               	addwfc	?___wmul+1,w,c
 12238  0022E6  6EF7               	movwf	tblptrh,c
 12239  0022E8  0009               	tblrd		*+
 12240  0022EA  CFF5 F042          	movff	tablat,??_scale
 12241  0022EE  0009               	tblrd		*+
 12242  0022F0  CFF5 F043          	movff	tablat,??_scale+1
 12243  0022F4  0009               	tblrd		*+
 12244  0022F6  CFF5 F044          	movff	tablat,??_scale+2
 12245  0022FA  C044  F030         	movff	??_scale+2,?___ftmul+2
 12246  0022FE  C043  F02F         	movff	??_scale+1,?___ftmul+1
 12247  002302  C042  F02E         	movff	??_scale,?___ftmul
 12248  002306  0E00               	movlw	0
 12249  002308  6E1A               	movwf	?___wmul+3,c
 12250  00230A  0E03               	movlw	3
 12251  00230C  6E19               	movwf	?___wmul+2,c
 12252  00230E  0E00               	movlw	0
 12253  002310  6E04               	movwf	?___awmod+3,c
 12254  002312  0E0A               	movlw	10
 12255  002314  6E03               	movwf	?___awmod+2,c
 12256  002316  503F               	movf	scale@scl,w,c
 12257  002318  6E01               	movwf	?___awmod,c
 12258  00231A  6A02               	clrf	?___awmod+1,c
 12259  00231C  BE01               	btfsc	?___awmod,7,c
 12260  00231E  0602               	decf	?___awmod+1,f,c
 12261  002320  ECB9  F01F         	call	___awmod	;wreg free
 12262  002324  C001  F017         	movff	?___awmod,?___wmul
 12263  002328  C002  F018         	movff	?___awmod+1,?___wmul+1
 12264  00232C  EC14  F023         	call	___wmul	;wreg free
 12265  002330  0E5C               	movlw	low __powers_
 12266  002332  2417               	addwf	?___wmul,w,c
 12267  002334  6EF6               	movwf	tblptrl,c
 12268  002336  0E7F               	movlw	high __powers_
 12269  002338  2018               	addwfc	?___wmul+1,w,c
 12270  00233A  6EF7               	movwf	tblptrh,c
 12271  00233C  0009               	tblrd		*+
 12272  00233E  CFF5 F045          	movff	tablat,??_scale+3
 12273  002342  0009               	tblrd		*+
 12274  002344  CFF5 F046          	movff	tablat,??_scale+4
 12275  002348  0009               	tblrd		*+
 12276  00234A  CFF5 F047          	movff	tablat,??_scale+5
 12277  00234E  C047  F033         	movff	??_scale+5,?___ftmul+5
 12278  002352  C046  F032         	movff	??_scale+4,?___ftmul+4
 12279  002356  C045  F031         	movff	??_scale+3,?___ftmul+3
 12280  00235A  ECAC  F019         	call	___ftmul	;wreg free
 12281  00235E                     L21:
 12282  00235E  C030  F041         	movff	?___ftmul+2,?_scale+2
 12283  002362  C02F  F040         	movff	?___ftmul+1,?_scale+1
 12284  002366  C02E  F03F         	movff	?___ftmul,?_scale
 12285  00236A  D017               	goto	i2l553
 12286  00236C                     i2l6215:
 12287                           
 12288                           ;doprnt.c: 440: return _powers_[scl];
 12289  00236C  503F               	movf	scale@scl,w,c
 12290  00236E  0D03               	mullw	3
 12291  002370  0E5C               	movlw	low __powers_
 12292  002372  24F3               	addwf	prodl,w,c
 12293  002374  6EF6               	movwf	tblptrl,c
 12294  002376  0E7F               	movlw	high __powers_
 12295  002378                     L20:
 12296  002378  20F4               	addwfc	prodh,w,c
 12297  00237A  6EF7               	movwf	tblptrh,c
 12298  00237C  0009               	tblrd		*+
 12299  00237E  CFF5 F042          	movff	tablat,??_scale
 12300  002382  0009               	tblrd		*+
 12301  002384  CFF5 F043          	movff	tablat,??_scale+1
 12302  002388  0009               	tblrd		*+
 12303  00238A  CFF5 F044          	movff	tablat,??_scale+2
 12304  00238E  C044  F041         	movff	??_scale+2,?_scale+2
 12305  002392  C043  F040         	movff	??_scale+1,?_scale+1
 12306  002396  C042  F03F         	movff	??_scale,?_scale
 12307  00239A                     i2l553:
 12308  00239A  0012               	return	
 12309  00239C                     __end_of_scale:
 12310                           	opt stack 0
 12311                           tosu	equ	0xFFF
 12312                           tosh	equ	0xFFE
 12313                           tosl	equ	0xFFD
 12314                           pclatu	equ	0xFFB
 12315                           pclath	equ	0xFFA
 12316                           tblptru	equ	0xFF8
 12317                           tblptrh	equ	0xFF7
 12318                           tblptrl	equ	0xFF6
 12319                           tablat	equ	0xFF5
 12320                           prodh	equ	0xFF4
 12321                           prodl	equ	0xFF3
 12322                           intcon	equ	0xFF2
 12323                           intcon2	equ	0xFF1
 12324                           indf0	equ	0xFEF
 12325                           postinc0	equ	0xFEE
 12326                           fsr0h	equ	0xFEA
 12327                           fsr0l	equ	0xFE9
 12328                           wreg	equ	0xFE8
 12329                           postinc1	equ	0xFE6
 12330                           postdec1	equ	0xFE5
 12331                           fsr1h	equ	0xFE2
 12332                           fsr1l	equ	0xFE1
 12333                           indf2	equ	0xFDF
 12334                           postinc2	equ	0xFDE
 12335                           postdec2	equ	0xFDD
 12336                           plusw2	equ	0xFDB
 12337                           fsr2h	equ	0xFDA
 12338                           fsr2l	equ	0xFD9
 12339                           status	equ	0xFD8
 12340                           
 12341 ;; *************** function ___wmul *****************
 12342 ;; Defined at:
 12343 ;;		line 5 in file "/usr/opt/microchip/xc8/v1.20/sources/common/wmul.c"
 12344 ;; Parameters:    Size  Location     Type
 12345 ;;  multiplier      2   22[COMRAM] unsigned int 
 12346 ;;  multiplicand    2   24[COMRAM] unsigned int 
 12347 ;; Auto vars:     Size  Location     Type
 12348 ;;  product         2   28[COMRAM] unsigned int 
 12349 ;; Return value:  Size  Location     Type
 12350 ;;                  2   22[COMRAM] unsigned int 
 12351 ;; Registers used:
 12352 ;;		wreg, status,2, status,0, prodl, prodh
 12353 ;; Tracked objects:
 12354 ;;		On entry : 0/0
 12355 ;;		On exit  : 0/0
 12356 ;;		Unchanged: 0/0
 12357 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12358 ;;      Params:         4       0       0       0       0       0       0       0       0
 12359 ;;      Locals:         4       0       0       0       0       0       0       0       0
 12360 ;;      Temps:          0       0       0       0       0       0       0       0       0
 12361 ;;      Totals:         8       0       0       0       0       0       0       0       0
 12362 ;;Total ram usage:        8 bytes
 12363 ;; Hardware stack levels used:    1
 12364 ;; This function calls:
 12365 ;;		Nothing
 12366 ;; This function is called by:
 12367 ;;		_writeString
 12368 ;;		_dayOfWeek
 12369 ;;		_getTemp
 12370 ;;		_fround
 12371 ;;		_scale
 12372 ;;		_sprintf
 12373 ;; This function uses a non-reentrant model
 12374 ;;
 12375                           
 12376                           	psect	text44
 12377  004628                     __ptext44:
 12378                           	opt stack 0
 12379  004628                     ___wmul:
 12380                           	opt stack 23
 12381                           
 12382                           ;incstack = 0
 12383                           ;incstack = 0
 12384  004628  5017               	movf	___wmul@multiplier,w,c
 12385  00462A  0219               	mulwf	___wmul@multiplicand,c
 12386  00462C  CFF3 F01D          	movff	prodl,___wmul@product
 12387  004630  CFF4 F01E          	movff	prodh,___wmul@product+1
 12388  004634  5017               	movf	___wmul@multiplier,w,c
 12389  004636  021A               	mulwf	___wmul@multiplicand+1,c
 12390  004638  CFF3 FFF4          	movff	prodl,prodh
 12391  00463C  6AF3               	clrf	prodl,c
 12392  00463E  50F3               	movf	prodl,w,c
 12393  004640  261D               	addwf	___wmul@product,f,c
 12394  004642  50F4               	movf	prodh,w,c
 12395  004644  221E               	addwfc	___wmul@product+1,f,c
 12396  004646  5018               	movf	___wmul@multiplier+1,w,c
 12397  004648  0219               	mulwf	___wmul@multiplicand,c
 12398  00464A  CFF3 FFF4          	movff	prodl,prodh
 12399  00464E  6AF3               	clrf	prodl,c
 12400  004650  50F3               	movf	prodl,w,c
 12401  004652  261D               	addwf	___wmul@product,f,c
 12402  004654  50F4               	movf	prodh,w,c
 12403  004656  221E               	addwfc	___wmul@product+1,f,c
 12404  004658  C01D  F017         	movff	___wmul@product,?___wmul
 12405  00465C  C01E  F018         	movff	___wmul@product+1,?___wmul+1
 12406  004660  0012               	return	
 12407  004662                     __end_of___wmul:
 12408                           	opt stack 0
 12409                           tosu	equ	0xFFF
 12410                           tosh	equ	0xFFE
 12411                           tosl	equ	0xFFD
 12412                           pclatu	equ	0xFFB
 12413                           pclath	equ	0xFFA
 12414                           tblptru	equ	0xFF8
 12415                           tblptrh	equ	0xFF7
 12416                           tblptrl	equ	0xFF6
 12417                           tablat	equ	0xFF5
 12418                           prodh	equ	0xFF4
 12419                           prodl	equ	0xFF3
 12420                           intcon	equ	0xFF2
 12421                           intcon2	equ	0xFF1
 12422                           indf0	equ	0xFEF
 12423                           postinc0	equ	0xFEE
 12424                           fsr0h	equ	0xFEA
 12425                           fsr0l	equ	0xFE9
 12426                           wreg	equ	0xFE8
 12427                           postinc1	equ	0xFE6
 12428                           postdec1	equ	0xFE5
 12429                           fsr1h	equ	0xFE2
 12430                           fsr1l	equ	0xFE1
 12431                           indf2	equ	0xFDF
 12432                           postinc2	equ	0xFDE
 12433                           postdec2	equ	0xFDD
 12434                           plusw2	equ	0xFDB
 12435                           fsr2h	equ	0xFDA
 12436                           fsr2l	equ	0xFD9
 12437                           status	equ	0xFD8
 12438                           
 12439 ;; *************** function ___ftmul *****************
 12440 ;; Defined at:
 12441 ;;		line 52 in file "/usr/opt/microchip/xc8/v1.20/sources/common/ftmul.c"
 12442 ;; Parameters:    Size  Location     Type
 12443 ;;  f1              3   45[COMRAM] float 
 12444 ;;  f2              3   48[COMRAM] float 
 12445 ;; Auto vars:     Size  Location     Type
 12446 ;;  f3_as_produc    3   57[COMRAM] unsigned um
 12447 ;;  sign            1   61[COMRAM] unsigned char 
 12448 ;;  cntr            1   60[COMRAM] unsigned char 
 12449 ;;  exp             1   56[COMRAM] unsigned char 
 12450 ;; Return value:  Size  Location     Type
 12451 ;;                  3   45[COMRAM] float 
 12452 ;; Registers used:
 12453 ;;		wreg, status,2, status,0, cstack
 12454 ;; Tracked objects:
 12455 ;;		On entry : 0/0
 12456 ;;		On exit  : 0/0
 12457 ;;		Unchanged: 0/0
 12458 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12459 ;;      Params:         6       0       0       0       0       0       0       0       0
 12460 ;;      Locals:         6       0       0       0       0       0       0       0       0
 12461 ;;      Temps:          5       0       0       0       0       0       0       0       0
 12462 ;;      Totals:        17       0       0       0       0       0       0       0       0
 12463 ;;Total ram usage:       17 bytes
 12464 ;; Hardware stack levels used:    1
 12465 ;; Hardware stack levels required when called:    1
 12466 ;; This function calls:
 12467 ;;		___ftpack
 12468 ;; This function is called by:
 12469 ;;		_getTemp
 12470 ;;		_fround
 12471 ;;		_scale
 12472 ;;		_sprintf
 12473 ;;		___asftmul
 12474 ;; This function uses a non-reentrant model
 12475 ;;
 12476                           
 12477                           	psect	text45
 12478  003358                     __ptext45:
 12479                           	opt stack 0
 12480  003358                     ___ftmul:
 12481                           	opt stack 22
 12482                           
 12483                           ;incstack = 0
 12484                           ;incstack = 0
 12485  003358  0E0F               	movlw	15
 12486  00335A  6E34               	movwf	??___ftmul& (0+255),c
 12487  00335C  C02E  F035         	movff	___ftmul@f1,??___ftmul+1
 12488  003360  C02F  F036         	movff	___ftmul@f1+1,??___ftmul+2
 12489  003364  C030  F037         	movff	___ftmul@f1+2,??___ftmul+3
 12490  003368  2834               	incf	??___ftmul,w,c
 12491  00336A  6E38               	movwf	(??___ftmul+4)& (0+255),c
 12492  00336C  D004               	goto	i2u386_40
 12493  00336E                     i2u386_45:
 12494  00336E  90D8               	bcf	status,0,c
 12495  003370  3237               	rrcf	??___ftmul+3,f,c
 12496  003372  3236               	rrcf	??___ftmul+2,f,c
 12497  003374  3235               	rrcf	??___ftmul+1,f,c
 12498  003376                     i2u386_40:
 12499  003376  2E38               	decfsz	(??___ftmul+4)& (0+255),f,c
 12500  003378  D7FA               	goto	i2u386_45
 12501  00337A  5035               	movf	??___ftmul+1,w,c
 12502  00337C  6E39               	movwf	___ftmul@exp,c
 12503  00337E  6639               	tstfsz	___ftmul@exp& (0+255),c
 12504  003380  D001               	goto	i2l6079
 12505  003382  D015               	goto	i2u389_40
 12506  003384                     i2l6079:
 12507  003384  0E0F               	movlw	15
 12508  003386  6E34               	movwf	??___ftmul& (0+255),c
 12509  003388  C031  F035         	movff	___ftmul@f2,??___ftmul+1
 12510  00338C  C032  F036         	movff	___ftmul@f2+1,??___ftmul+2
 12511  003390  C033  F037         	movff	___ftmul@f2+2,??___ftmul+3
 12512  003394  2834               	incf	??___ftmul,w,c
 12513  003396  6E38               	movwf	(??___ftmul+4)& (0+255),c
 12514  003398  D004               	goto	i2u388_40
 12515  00339A                     i2u388_45:
 12516  00339A  90D8               	bcf	status,0,c
 12517  00339C  3237               	rrcf	??___ftmul+3,f,c
 12518  00339E  3236               	rrcf	??___ftmul+2,f,c
 12519  0033A0  3235               	rrcf	??___ftmul+1,f,c
 12520  0033A2                     i2u388_40:
 12521  0033A2  2E38               	decfsz	(??___ftmul+4)& (0+255),f,c
 12522  0033A4  D7FA               	goto	i2u388_45
 12523  0033A6  5035               	movf	??___ftmul+1,w,c
 12524  0033A8  6E3E               	movwf	___ftmul@sign,c
 12525  0033AA  663E               	tstfsz	___ftmul@sign& (0+255),c
 12526  0033AC  D007               	goto	i2l6085
 12527  0033AE                     i2u389_40:
 12528  0033AE  0E00               	movlw	0
 12529  0033B0  6E2E               	movwf	?___ftmul,c
 12530  0033B2  0E00               	movlw	0
 12531  0033B4  6E2F               	movwf	?___ftmul+1,c
 12532  0033B6  0E00               	movlw	0
 12533  0033B8  6E30               	movwf	?___ftmul+2,c
 12534  0033BA  D055               	goto	i2l1098
 12535  0033BC                     i2l6085:
 12536  0033BC  503E               	movf	___ftmul@sign,w,c
 12537  0033BE  0F7B               	addlw	123
 12538  0033C0  2639               	addwf	___ftmul@exp,f,c
 12539  0033C2  C030  F03E         	movff	___ftmul@f1+2,___ftmul@sign
 12540  0033C6  5033               	movf	(___ftmul@f2+2)& (0+255),w,c
 12541  0033C8  1A3E               	xorwf	___ftmul@sign,f,c
 12542  0033CA  0E80               	movlw	128
 12543  0033CC  163E               	andwf	___ftmul@sign,f,c
 12544  0033CE  8E2F               	bsf	___ftmul@f1+1,7,c
 12545  0033D0  8E32               	bsf	___ftmul@f2+1,7,c
 12546  0033D2  0EFF               	movlw	255
 12547  0033D4  1631               	andwf	___ftmul@f2,f,c
 12548  0033D6  0EFF               	movlw	255
 12549  0033D8  1632               	andwf	___ftmul@f2+1,f,c
 12550  0033DA  0E00               	movlw	0
 12551  0033DC  1633               	andwf	___ftmul@f2+2,f,c
 12552  0033DE  0E00               	movlw	0
 12553  0033E0  6E3A               	movwf	___ftmul@f3_as_product,c
 12554  0033E2  0E00               	movlw	0
 12555  0033E4  6E3B               	movwf	___ftmul@f3_as_product+1,c
 12556  0033E6  0E00               	movlw	0
 12557  0033E8  6E3C               	movwf	___ftmul@f3_as_product+2,c
 12558  0033EA  6E34               	movwf	??___ftmul& (0+255),c
 12559  0033EC  0E07               	movlw	7
 12560  0033EE  6E3D               	movwf	___ftmul@cntr,c
 12561  0033F0  5034               	movf	??___ftmul& (0+255),w,c
 12562  0033F2                     i2l6099:
 12563  0033F2  A02E               	btfss	___ftmul@f1,0,c
 12564  0033F4  D006               	goto	i2l6103
 12565  0033F6  5031               	movf	___ftmul@f2,w,c
 12566  0033F8  263A               	addwf	___ftmul@f3_as_product,f,c
 12567  0033FA  5032               	movf	___ftmul@f2+1,w,c
 12568  0033FC  223B               	addwfc	___ftmul@f3_as_product+1,f,c
 12569  0033FE  5033               	movf	___ftmul@f2+2,w,c
 12570  003400  223C               	addwfc	___ftmul@f3_as_product+2,f,c
 12571  003402                     i2l6103:
 12572  003402  90D8               	bcf	status,0,c
 12573  003404  3230               	rrcf	___ftmul@f1+2,f,c
 12574  003406  322F               	rrcf	___ftmul@f1+1,f,c
 12575  003408  322E               	rrcf	___ftmul@f1,f,c
 12576  00340A  90D8               	bcf	status,0,c
 12577  00340C  3631               	rlcf	___ftmul@f2,f,c
 12578  00340E  3632               	rlcf	___ftmul@f2+1,f,c
 12579  003410  3633               	rlcf	___ftmul@f2+2,f,c
 12580  003412  2E3D               	decfsz	___ftmul@cntr,f,c
 12581  003414  D7EE               	goto	i2l6099
 12582  003416  6E34               	movwf	??___ftmul& (0+255),c
 12583  003418  0E09               	movlw	9
 12584  00341A  6E3D               	movwf	___ftmul@cntr,c
 12585  00341C  5034               	movf	??___ftmul& (0+255),w,c
 12586  00341E                     i2l6109:
 12587  00341E  A02E               	btfss	___ftmul@f1,0,c
 12588  003420  D006               	goto	i2l6113
 12589  003422  5031               	movf	___ftmul@f2,w,c
 12590  003424  263A               	addwf	___ftmul@f3_as_product,f,c
 12591  003426  5032               	movf	___ftmul@f2+1,w,c
 12592  003428  223B               	addwfc	___ftmul@f3_as_product+1,f,c
 12593  00342A  5033               	movf	___ftmul@f2+2,w,c
 12594  00342C  223C               	addwfc	___ftmul@f3_as_product+2,f,c
 12595  00342E                     i2l6113:
 12596  00342E  90D8               	bcf	status,0,c
 12597  003430  3230               	rrcf	___ftmul@f1+2,f,c
 12598  003432  322F               	rrcf	___ftmul@f1+1,f,c
 12599  003434  322E               	rrcf	___ftmul@f1,f,c
 12600  003436  90D8               	bcf	status,0,c
 12601  003438  323C               	rrcf	___ftmul@f3_as_product+2,f,c
 12602  00343A  323B               	rrcf	___ftmul@f3_as_product+1,f,c
 12603  00343C  323A               	rrcf	___ftmul@f3_as_product,f,c
 12604  00343E  2E3D               	decfsz	___ftmul@cntr,f,c
 12605  003440  D7EE               	goto	i2l6109
 12606  003442  C03A  F001         	movff	___ftmul@f3_as_product,?___ftpack
 12607  003446  C03B  F002         	movff	___ftmul@f3_as_product+1,?___ftpack+1
 12608  00344A  C03C  F003         	movff	___ftmul@f3_as_product+2,?___ftpack+2
 12609  00344E  C039  F004         	movff	___ftmul@exp,?___ftpack+3
 12610  003452  C03E  F005         	movff	___ftmul@sign,?___ftpack+4
 12611  003456  EC7C  F01C         	call	___ftpack	;wreg free
 12612  00345A  C003  F030         	movff	?___ftpack+2,?___ftmul+2
 12613  00345E  C002  F02F         	movff	?___ftpack+1,?___ftmul+1
 12614  003462  C001  F02E         	movff	?___ftpack,?___ftmul
 12615  003466                     i2l1098:
 12616  003466  0012               	return	
 12617  003468                     __end_of___ftmul:
 12618                           	opt stack 0
 12619                           tosu	equ	0xFFF
 12620                           tosh	equ	0xFFE
 12621                           tosl	equ	0xFFD
 12622                           pclatu	equ	0xFFB
 12623                           pclath	equ	0xFFA
 12624                           tblptru	equ	0xFF8
 12625                           tblptrh	equ	0xFF7
 12626                           tblptrl	equ	0xFF6
 12627                           tablat	equ	0xFF5
 12628                           prodh	equ	0xFF4
 12629                           prodl	equ	0xFF3
 12630                           intcon	equ	0xFF2
 12631                           intcon2	equ	0xFF1
 12632                           indf0	equ	0xFEF
 12633                           postinc0	equ	0xFEE
 12634                           fsr0h	equ	0xFEA
 12635                           fsr0l	equ	0xFE9
 12636                           wreg	equ	0xFE8
 12637                           postinc1	equ	0xFE6
 12638                           postdec1	equ	0xFE5
 12639                           fsr1h	equ	0xFE2
 12640                           fsr1l	equ	0xFE1
 12641                           indf2	equ	0xFDF
 12642                           postinc2	equ	0xFDE
 12643                           postdec2	equ	0xFDD
 12644                           plusw2	equ	0xFDB
 12645                           fsr2h	equ	0xFDA
 12646                           fsr2l	equ	0xFD9
 12647                           status	equ	0xFD8
 12648                           
 12649 ;; *************** function _fround *****************
 12650 ;; Defined at:
 12651 ;;		line 410 in file "/usr/opt/microchip/xc8/v1.20/sources/common/doprnt.c"
 12652 ;; Parameters:    Size  Location     Type
 12653 ;;  prec            1   62[COMRAM] unsigned char 
 12654 ;; Auto vars:     Size  Location     Type
 12655 ;;		None
 12656 ;; Return value:  Size  Location     Type
 12657 ;;                  3   62[COMRAM] unsigned char 
 12658 ;; Registers used:
 12659 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12660 ;; Tracked objects:
 12661 ;;		On entry : 0/0
 12662 ;;		On exit  : 0/0
 12663 ;;		Unchanged: 0/0
 12664 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12665 ;;      Params:         3       0       0       0       0       0       0       0       0
 12666 ;;      Locals:         6       0       0       0       0       0       0       0       0
 12667 ;;      Temps:          6       0       0       0       0       0       0       0       0
 12668 ;;      Totals:        15       0       0       0       0       0       0       0       0
 12669 ;;Total ram usage:       15 bytes
 12670 ;; Hardware stack levels used:    1
 12671 ;; Hardware stack levels required when called:    2
 12672 ;; This function calls:
 12673 ;;		___ftmul
 12674 ;;		___awdiv
 12675 ;;		___awmod
 12676 ;;		___wmul
 12677 ;; This function is called by:
 12678 ;;		_sprintf
 12679 ;; This function uses a non-reentrant model
 12680 ;;
 12681                           
 12682                           	psect	text46
 12683  00239C                     __ptext46:
 12684                           	opt stack 0
 12685  00239C                     _fround:
 12686                           	opt stack 20
 12687                           
 12688                           ;doprnt.c: 413: if(prec>=110)
 12689                           
 12690                           ;incstack = 0
 12691                           ;incstack = 0
 12692  00239C  0E6D               	movlw	109
 12693  00239E  643F               	cpfsgt	fround@prec,c
 12694  0023A0  D0AB               	goto	i2l6061
 12695                           
 12696                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
 12697  0023A2  0E00               	movlw	0
 12698  0023A4  6E1A               	movwf	?___wmul+3,c
 12699  0023A6  0E03               	movlw	3
 12700  0023A8  6E19               	movwf	?___wmul+2,c
 12701  0023AA  0E00               	movlw	0
 12702  0023AC  6E0D               	movwf	?___awdiv+3,c
 12703  0023AE  0E0A               	movlw	10
 12704  0023B0  6E0C               	movwf	?___awdiv+2,c
 12705  0023B2  0E00               	movlw	0
 12706  0023B4  6E04               	movwf	?___awmod+3,c
 12707  0023B6  0E64               	movlw	100
 12708  0023B8  6E03               	movwf	?___awmod+2,c
 12709  0023BA  C03F  F001         	movff	fround@prec,?___awmod
 12710  0023BE  6A02               	clrf	?___awmod+1,c
 12711  0023C0  ECB9  F01F         	call	___awmod	;wreg free
 12712  0023C4  C001  F00A         	movff	?___awmod,?___awdiv
 12713  0023C8  C002  F00B         	movff	?___awmod+1,?___awdiv+1
 12714  0023CC  ECAC  F01E         	call	___awdiv	;wreg free
 12715  0023D0  0E09               	movlw	9
 12716  0023D2  240A               	addwf	?___awdiv,w,c
 12717  0023D4  6E17               	movwf	?___wmul,c
 12718  0023D6  0E00               	movlw	0
 12719  0023D8  200B               	addwfc	?___awdiv+1,w,c
 12720  0023DA  6E18               	movwf	?___wmul+1,c
 12721  0023DC  EC14  F023         	call	___wmul	;wreg free
 12722  0023E0  0E35               	movlw	low __npowers_
 12723  0023E2  2417               	addwf	?___wmul,w,c
 12724  0023E4  6EF6               	movwf	tblptrl,c
 12725  0023E6  0E7F               	movlw	high __npowers_
 12726  0023E8  2018               	addwfc	?___wmul+1,w,c
 12727  0023EA  6EF7               	movwf	tblptrh,c
 12728  0023EC  0009               	tblrd		*+
 12729  0023EE  CFF5 F042          	movff	tablat,??_fround
 12730  0023F2  0009               	tblrd		*+
 12731  0023F4  CFF5 F043          	movff	tablat,??_fround+1
 12732  0023F8  0009               	tblrd		*+
 12733  0023FA  CFF5 F044          	movff	tablat,??_fround+2
 12734  0023FE  C044  F033         	movff	??_fround+2,?___ftmul+5
 12735  002402  C043  F032         	movff	??_fround+1,?___ftmul+4
 12736  002406  C042  F031         	movff	??_fround,?___ftmul+3
 12737  00240A  0E00               	movlw	0
 12738  00240C  6E1A               	movwf	?___wmul+3,c
 12739  00240E  0E03               	movlw	3
 12740  002410  6E19               	movwf	?___wmul+2,c
 12741  002412  0E00               	movlw	0
 12742  002414  6E0D               	movwf	?___awdiv+3,c
 12743  002416  0E64               	movlw	100
 12744  002418  6E0C               	movwf	?___awdiv+2,c
 12745  00241A  C03F  F00A         	movff	fround@prec,?___awdiv
 12746  00241E  6A0B               	clrf	?___awdiv+1,c
 12747  002420  ECAC  F01E         	call	___awdiv	;wreg free
 12748  002424  0E12               	movlw	18
 12749  002426  240A               	addwf	?___awdiv,w,c
 12750  002428  6E17               	movwf	?___wmul,c
 12751  00242A  0E00               	movlw	0
 12752  00242C  200B               	addwfc	?___awdiv+1,w,c
 12753  00242E  6E18               	movwf	?___wmul+1,c
 12754  002430  EC14  F023         	call	___wmul	;wreg free
 12755  002434  0E35               	movlw	low __npowers_
 12756  002436  2417               	addwf	?___wmul,w,c
 12757  002438  6EF6               	movwf	tblptrl,c
 12758  00243A  0E7F               	movlw	high __npowers_
 12759  00243C  2018               	addwfc	?___wmul+1,w,c
 12760  00243E  6EF7               	movwf	tblptrh,c
 12761  002440  0009               	tblrd		*+
 12762  002442  CFF5 F045          	movff	tablat,??_fround+3
 12763  002446  0009               	tblrd		*+
 12764  002448  CFF5 F046          	movff	tablat,??_fround+4
 12765  00244C  0009               	tblrd		*+
 12766  00244E  CFF5 F047          	movff	tablat,??_fround+5
 12767  002452  C047  F030         	movff	??_fround+5,?___ftmul+2
 12768  002456  C046  F02F         	movff	??_fround+4,?___ftmul+1
 12769  00245A  C045  F02E         	movff	??_fround+3,?___ftmul
 12770  00245E  ECAC  F019         	call	___ftmul	;wreg free
 12771  002462  C030  F04D         	movff	?___ftmul+2,_fround$1394+2
 12772  002466  C02F  F04C         	movff	?___ftmul+1,_fround$1394+1
 12773  00246A  C02E  F04B         	movff	?___ftmul,_fround$1394
 12774                           
 12775                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
 12776  00246E  0E00               	movlw	0
 12777  002470  6E1A               	movwf	?___wmul+3,c
 12778  002472  0E03               	movlw	3
 12779  002474  6E19               	movwf	?___wmul+2,c
 12780  002476  0E00               	movlw	0
 12781  002478  6E04               	movwf	?___awmod+3,c
 12782  00247A  0E0A               	movlw	10
 12783  00247C  6E03               	movwf	?___awmod+2,c
 12784  00247E  C03F  F001         	movff	fround@prec,?___awmod
 12785  002482  6A02               	clrf	?___awmod+1,c
 12786  002484  ECB9  F01F         	call	___awmod	;wreg free
 12787  002488  C001  F017         	movff	?___awmod,?___wmul
 12788  00248C  C002  F018         	movff	?___awmod+1,?___wmul+1
 12789  002490  EC14  F023         	call	___wmul	;wreg free
 12790  002494  0E35               	movlw	low __npowers_
 12791  002496  2417               	addwf	?___wmul,w,c
 12792  002498  6EF6               	movwf	tblptrl,c
 12793  00249A  0E7F               	movlw	high __npowers_
 12794  00249C  2018               	addwfc	?___wmul+1,w,c
 12795  00249E  6EF7               	movwf	tblptrh,c
 12796  0024A0  0009               	tblrd		*+
 12797  0024A2  CFF5 F042          	movff	tablat,??_fround
 12798  0024A6  0009               	tblrd		*+
 12799  0024A8  CFF5 F043          	movff	tablat,??_fround+1
 12800  0024AC  0009               	tblrd		*+
 12801  0024AE  CFF5 F044          	movff	tablat,??_fround+2
 12802  0024B2  C044  F033         	movff	??_fround+2,?___ftmul+5
 12803  0024B6  C043  F032         	movff	??_fround+1,?___ftmul+4
 12804  0024BA  C042  F031         	movff	??_fround,?___ftmul+3
 12805  0024BE  C04B  F02E         	movff	_fround$1394,?___ftmul
 12806  0024C2  C04C  F02F         	movff	_fround$1394+1,?___ftmul+1
 12807  0024C6  C04D  F030         	movff	_fround$1394+2,?___ftmul+2
 12808  0024CA  ECAC  F019         	call	___ftmul	;wreg free
 12809  0024CE  C030  F04A         	movff	?___ftmul+2,_fround$1395+2
 12810  0024D2  C02F  F049         	movff	?___ftmul+1,_fround$1395+1
 12811  0024D6  C02E  F048         	movff	?___ftmul,_fround$1395
 12812                           
 12813                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
 12814  0024DA  C048  F02E         	movff	_fround$1395,?___ftmul
 12815  0024DE  C049  F02F         	movff	_fround$1395+1,?___ftmul+1
 12816  0024E2  C04A  F030         	movff	_fround$1395+2,?___ftmul+2
 12817  0024E6  0E00               	movlw	0
 12818  0024E8  6E31               	movwf	?___ftmul+3,c
 12819  0024EA  0E00               	movlw	0
 12820  0024EC  6E32               	movwf	?___ftmul+4,c
 12821  0024EE  0E3F               	movlw	63
 12822  0024F0  6E33               	movwf	?___ftmul+5,c
 12823  0024F2  ECAC  F019         	call	___ftmul	;wreg free
 12824  0024F6  D08B               	goto	L23
 12825  0024F8                     i2l6061:
 12826                           
 12827                           ;doprnt.c: 415: else if(prec > 10)
 12828  0024F8  0E0A               	movlw	10
 12829  0024FA  643F               	cpfsgt	fround@prec,c
 12830  0024FC  D069               	goto	i2l6069
 12831                           
 12832                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
 12833  0024FE  0E00               	movlw	0
 12834  002500  6E1A               	movwf	?___wmul+3,c
 12835  002502  0E03               	movlw	3
 12836  002504  6E19               	movwf	?___wmul+2,c
 12837  002506  0E00               	movlw	0
 12838  002508  6E04               	movwf	?___awmod+3,c
 12839  00250A  0E0A               	movlw	10
 12840  00250C  6E03               	movwf	?___awmod+2,c
 12841  00250E  C03F  F001         	movff	fround@prec,?___awmod
 12842  002512  6A02               	clrf	?___awmod+1,c
 12843  002514  ECB9  F01F         	call	___awmod	;wreg free
 12844  002518  C001  F017         	movff	?___awmod,?___wmul
 12845  00251C  C002  F018         	movff	?___awmod+1,?___wmul+1
 12846  002520  EC14  F023         	call	___wmul	;wreg free
 12847  002524  0E35               	movlw	low __npowers_
 12848  002526  2417               	addwf	?___wmul,w,c
 12849  002528  6EF6               	movwf	tblptrl,c
 12850  00252A  0E7F               	movlw	high __npowers_
 12851  00252C  2018               	addwfc	?___wmul+1,w,c
 12852  00252E  6EF7               	movwf	tblptrh,c
 12853  002530  0009               	tblrd		*+
 12854  002532  CFF5 F042          	movff	tablat,??_fround
 12855  002536  0009               	tblrd		*+
 12856  002538  CFF5 F043          	movff	tablat,??_fround+1
 12857  00253C  0009               	tblrd		*+
 12858  00253E  CFF5 F044          	movff	tablat,??_fround+2
 12859  002542  C044  F033         	movff	??_fround+2,?___ftmul+5
 12860  002546  C043  F032         	movff	??_fround+1,?___ftmul+4
 12861  00254A  C042  F031         	movff	??_fround,?___ftmul+3
 12862  00254E  0E00               	movlw	0
 12863  002550  6E1A               	movwf	?___wmul+3,c
 12864  002552  0E03               	movlw	3
 12865  002554  6E19               	movwf	?___wmul+2,c
 12866  002556  0E00               	movlw	0
 12867  002558  6E0D               	movwf	?___awdiv+3,c
 12868  00255A  0E0A               	movlw	10
 12869  00255C  6E0C               	movwf	?___awdiv+2,c
 12870  00255E  C03F  F00A         	movff	fround@prec,?___awdiv
 12871  002562  6A0B               	clrf	?___awdiv+1,c
 12872  002564  ECAC  F01E         	call	___awdiv	;wreg free
 12873  002568  0E09               	movlw	9
 12874  00256A  240A               	addwf	?___awdiv,w,c
 12875  00256C  6E17               	movwf	?___wmul,c
 12876  00256E  0E00               	movlw	0
 12877  002570  200B               	addwfc	?___awdiv+1,w,c
 12878  002572  6E18               	movwf	?___wmul+1,c
 12879  002574  EC14  F023         	call	___wmul	;wreg free
 12880  002578  0E35               	movlw	low __npowers_
 12881  00257A  2417               	addwf	?___wmul,w,c
 12882  00257C  6EF6               	movwf	tblptrl,c
 12883  00257E  0E7F               	movlw	high __npowers_
 12884  002580  2018               	addwfc	?___wmul+1,w,c
 12885  002582  6EF7               	movwf	tblptrh,c
 12886  002584  0009               	tblrd		*+
 12887  002586  CFF5 F045          	movff	tablat,??_fround+3
 12888  00258A  0009               	tblrd		*+
 12889  00258C  CFF5 F046          	movff	tablat,??_fround+4
 12890  002590  0009               	tblrd		*+
 12891  002592  CFF5 F047          	movff	tablat,??_fround+5
 12892  002596  C047  F030         	movff	??_fround+5,?___ftmul+2
 12893  00259A  C046  F02F         	movff	??_fround+4,?___ftmul+1
 12894  00259E  C045  F02E         	movff	??_fround+3,?___ftmul
 12895  0025A2  ECAC  F019         	call	___ftmul	;wreg free
 12896  0025A6  C030  F04D         	movff	?___ftmul+2,_fround$1394+2
 12897  0025AA  C02F  F04C         	movff	?___ftmul+1,_fround$1394+1
 12898  0025AE  C02E  F04B         	movff	?___ftmul,_fround$1394
 12899                           
 12900                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
 12901  0025B2  C04B  F02E         	movff	_fround$1394,?___ftmul
 12902  0025B6  C04C  F02F         	movff	_fround$1394+1,?___ftmul+1
 12903  0025BA  C04D  F030         	movff	_fround$1394+2,?___ftmul+2
 12904  0025BE  0E00               	movlw	0
 12905  0025C0  6E31               	movwf	?___ftmul+3,c
 12906  0025C2  0E00               	movlw	0
 12907  0025C4  6E32               	movwf	?___ftmul+4,c
 12908  0025C6  0E3F               	movlw	63
 12909  0025C8  6E33               	movwf	?___ftmul+5,c
 12910  0025CA  ECAC  F019         	call	___ftmul	;wreg free
 12911  0025CE  D01F               	goto	L23
 12912  0025D0                     i2l6069:
 12913                           
 12914                           ;doprnt.c: 417: return 0.5 * _npowers_[prec];
 12915  0025D0  503F               	movf	fround@prec,w,c
 12916  0025D2  0D03               	mullw	3
 12917  0025D4  0E35               	movlw	low __npowers_
 12918  0025D6  24F3               	addwf	prodl,w,c
 12919  0025D8  6EF6               	movwf	tblptrl,c
 12920  0025DA  0E7F               	movlw	high __npowers_
 12921  0025DC  20F4               	addwfc	prodh,w,c
 12922  0025DE  6EF7               	movwf	tblptrh,c
 12923  0025E0  0009               	tblrd		*+
 12924  0025E2  CFF5 F042          	movff	tablat,??_fround
 12925  0025E6  0009               	tblrd		*+
 12926  0025E8  CFF5 F043          	movff	tablat,??_fround+1
 12927  0025EC  0009               	tblrd		*+
 12928  0025EE  CFF5 F044          	movff	tablat,??_fround+2
 12929  0025F2  C044  F030         	movff	??_fround+2,?___ftmul+2
 12930  0025F6  C043  F02F         	movff	??_fround+1,?___ftmul+1
 12931  0025FA  C042  F02E         	movff	??_fround,?___ftmul
 12932  0025FE  0E00               	movlw	0
 12933  002600  6E31               	movwf	?___ftmul+3,c
 12934  002602  0E00               	movlw	0
 12935  002604  6E32               	movwf	?___ftmul+4,c
 12936  002606  0E3F               	movlw	63
 12937  002608  6E33               	movwf	?___ftmul+5,c
 12938  00260A  ECAC  F019         	call	___ftmul	;wreg free
 12939  00260E                     L23:
 12940  00260E  C030  F041         	movff	?___ftmul+2,?_fround+2
 12941  002612  C02F  F040         	movff	?___ftmul+1,?_fround+1
 12942  002616  C02E  F03F         	movff	?___ftmul,?_fround
 12943  00261A  0012               	return	
 12944  00261C                     __end_of_fround:
 12945                           	opt stack 0
 12946                           tosu	equ	0xFFF
 12947                           tosh	equ	0xFFE
 12948                           tosl	equ	0xFFD
 12949                           pclatu	equ	0xFFB
 12950                           pclath	equ	0xFFA
 12951                           tblptru	equ	0xFF8
 12952                           tblptrh	equ	0xFF7
 12953                           tblptrl	equ	0xFF6
 12954                           tablat	equ	0xFF5
 12955                           prodh	equ	0xFF4
 12956                           prodl	equ	0xFF3
 12957                           intcon	equ	0xFF2
 12958                           intcon2	equ	0xFF1
 12959                           indf0	equ	0xFEF
 12960                           postinc0	equ	0xFEE
 12961                           fsr0h	equ	0xFEA
 12962                           fsr0l	equ	0xFE9
 12963                           wreg	equ	0xFE8
 12964                           postinc1	equ	0xFE6
 12965                           postdec1	equ	0xFE5
 12966                           fsr1h	equ	0xFE2
 12967                           fsr1l	equ	0xFE1
 12968                           indf2	equ	0xFDF
 12969                           postinc2	equ	0xFDE
 12970                           postdec2	equ	0xFDD
 12971                           plusw2	equ	0xFDB
 12972                           fsr2h	equ	0xFDA
 12973                           fsr2l	equ	0xFD9
 12974                           status	equ	0xFD8
 12975                           
 12976 ;; *************** function _buttons *****************
 12977 ;; Defined at:
 12978 ;;		line 27 in file "buttons.c"
 12979 ;; Parameters:    Size  Location     Type
 12980 ;;		None
 12981 ;; Auto vars:     Size  Location     Type
 12982 ;;		None
 12983 ;; Return value:  Size  Location     Type
 12984 ;;		None               void
 12985 ;; Registers used:
 12986 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 12987 ;; Tracked objects:
 12988 ;;		On entry : 0/0
 12989 ;;		On exit  : 0/0
 12990 ;;		Unchanged: 0/0
 12991 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12992 ;;      Params:         0       0       0       0       0       0       0       0       0
 12993 ;;      Locals:         0       0       0       0       0       0       0       0       0
 12994 ;;      Temps:          0       0       0       0       0       0       0       0       0
 12995 ;;      Totals:         0       0       0       0       0       0       0       0       0
 12996 ;;Total ram usage:        0 bytes
 12997 ;; Hardware stack levels used:    1
 12998 ;; Hardware stack levels required when called:    4
 12999 ;; This function calls:
 13000 ;;		i2_update
 13001 ;; This function is called by:
 13002 ;;		_high_isr
 13003 ;; This function uses a non-reentrant model
 13004 ;;
 13005                           
 13006                           	psect	text47
 13007  004346                     __ptext47:
 13008                           	opt stack 0
 13009  004346                     _buttons:
 13010                           	opt stack 21
 13011                           
 13012                           ;buttons.c: 29: if (( LATB) & (1 << 0))
 13013                           
 13014                           ;incstack = 0
 13015                           ;incstack = 0
 13016  004346  508A               	movf	3978,w,c	;volatile
 13017                           
 13018                           ;buttons.c: 32: }
 13019                           ;buttons.c: 33: if (( LATB) & (1 << 1))
 13020                           
 13021                           ;buttons.c: 30: {
 13022  004348  A28A               	btfss	3978,1,c	;volatile
 13023  00434A  D00B               	goto	i2l6401
 13024                           
 13025                           ;buttons.c: 34: {
 13026                           ;buttons.c: 35: screen.brightness = 0xF;
 13027  00434C  0101               	movlb	1	; () banked
 13028  00434E  8134               	bsf	(_screen+9)& (0+255),0,b
 13029  004350  0101               	movlb	1	; () banked
 13030  004352  8334               	bsf	(_screen+9)& (0+255),1,b
 13031  004354  0101               	movlb	1	; () banked
 13032  004356  8534               	bsf	(_screen+9)& (0+255),2,b
 13033  004358  0101               	movlb	1	; () banked
 13034  00435A  8734               	bsf	(_screen+9)& (0+255),3,b
 13035                           
 13036                           ; BSR set to: 1
 13037                           ;buttons.c: 36: screen.changed |= (1 << 10);
 13038  00435C  0101               	movlb	1	; () banked
 13039  00435E  0101               	movlb	1	; () banked
 13040  004360  8537               	bsf	(_screen+12)& (0+255),2,b
 13041  004362                     i2l6401:
 13042                           
 13043                           ;buttons.c: 37: }
 13044                           ;buttons.c: 38: if (( LATB) & (1 << 2))
 13045  004362  508A               	movf	3978,w,c	;volatile
 13046                           
 13047                           ;buttons.c: 41: }
 13048                           ;buttons.c: 42: if (( LATB) & (1 << 3))
 13049                           
 13050                           ;buttons.c: 39: {
 13051  004364  A68A               	btfss	3978,3,c	;volatile
 13052  004366  D00B               	goto	i2l6407
 13053                           
 13054                           ;buttons.c: 43: {
 13055                           ;buttons.c: 44: screen.brightness = 0;
 13056  004368  0101               	movlb	1	; () banked
 13057  00436A  9134               	bcf	(_screen+9)& (0+255),0,b
 13058  00436C  0101               	movlb	1	; () banked
 13059  00436E  9334               	bcf	(_screen+9)& (0+255),1,b
 13060  004370  0101               	movlb	1	; () banked
 13061  004372  9534               	bcf	(_screen+9)& (0+255),2,b
 13062  004374  0101               	movlb	1	; () banked
 13063  004376  9734               	bcf	(_screen+9)& (0+255),3,b
 13064                           
 13065                           ; BSR set to: 1
 13066                           ;buttons.c: 45: screen.changed |= (1 << 10);
 13067  004378  0101               	movlb	1	; () banked
 13068  00437A  0101               	movlb	1	; () banked
 13069  00437C  8537               	bsf	(_screen+12)& (0+255),2,b
 13070  00437E                     i2l6407:
 13071                           
 13072                           ;buttons.c: 46: }
 13073                           ;buttons.c: 48: if (( LATB) & (1 << 4))
 13074  00437E  B88A               	btfsc	3978,4,c	;volatile
 13075                           
 13076                           ;buttons.c: 49: {
 13077                           ;buttons.c: 50: LATC0 = 1;
 13078  004380  808B               	bsf	3979,0,c	;volatile
 13079                           
 13080                           ;buttons.c: 51: }
 13081                           ;buttons.c: 53: if (( LATB) & (1 << 5))
 13082  004382  BA8A               	btfsc	3978,5,c	;volatile
 13083                           
 13084                           ;buttons.c: 54: {
 13085                           ;buttons.c: 55: LATC1 = 1;
 13086  004384  828B               	bsf	3979,1,c	;volatile
 13087                           
 13088                           ;buttons.c: 56: }
 13089                           ;buttons.c: 57: if (( LATB) & (1 << 6))
 13090  004386  508A               	movf	3978,w,c	;volatile
 13091                           
 13092                           ;buttons.c: 59: }
 13093                           ;buttons.c: 60: if (( LATB) & (1 << 7))
 13094                           
 13095                           ;buttons.c: 58: {
 13096  004388  508A               	movf	3978,w,c	;volatile
 13097                           
 13098                           ;buttons.c: 62: }
 13099                           ;buttons.c: 63: if (( LATB) != 0)
 13100                           
 13101                           ;buttons.c: 61: {
 13102  00438A  508A               	movf	3978,w,c	;volatile
 13103  00438C  A4D8               	btfss	status,2,c
 13104                           
 13105                           ;buttons.c: 64: {
 13106                           ;buttons.c: 65: update();
 13107  00438E  EC62  F00D         	call	i2_update	;wreg free
 13108  004392  0012               	return	
 13109  004394                     __end_of_buttons:
 13110                           	opt stack 0
 13111                           tosu	equ	0xFFF
 13112                           tosh	equ	0xFFE
 13113                           tosl	equ	0xFFD
 13114                           pclatu	equ	0xFFB
 13115                           pclath	equ	0xFFA
 13116                           tblptru	equ	0xFF8
 13117                           tblptrh	equ	0xFF7
 13118                           tblptrl	equ	0xFF6
 13119                           tablat	equ	0xFF5
 13120                           prodh	equ	0xFF4
 13121                           prodl	equ	0xFF3
 13122                           intcon	equ	0xFF2
 13123                           intcon2	equ	0xFF1
 13124                           indf0	equ	0xFEF
 13125                           postinc0	equ	0xFEE
 13126                           fsr0h	equ	0xFEA
 13127                           fsr0l	equ	0xFE9
 13128                           wreg	equ	0xFE8
 13129                           postinc1	equ	0xFE6
 13130                           postdec1	equ	0xFE5
 13131                           fsr1h	equ	0xFE2
 13132                           fsr1l	equ	0xFE1
 13133                           indf2	equ	0xFDF
 13134                           postinc2	equ	0xFDE
 13135                           postdec2	equ	0xFDD
 13136                           plusw2	equ	0xFDB
 13137                           fsr2h	equ	0xFDA
 13138                           fsr2l	equ	0xFD9
 13139                           status	equ	0xFD8
 13140                           
 13141 ;; *************** function i2_update *****************
 13142 ;; Defined at:
 13143 ;;		line 13 in file "disp.c"
 13144 ;; Parameters:    Size  Location     Type
 13145 ;;		None
 13146 ;; Auto vars:     Size  Location     Type
 13147 ;;  update          1   29[COMRAM] char 
 13148 ;; Return value:  Size  Location     Type
 13149 ;;		None               void
 13150 ;; Registers used:
 13151 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 13152 ;; Tracked objects:
 13153 ;;		On entry : 0/0
 13154 ;;		On exit  : 0/0
 13155 ;;		Unchanged: 0/0
 13156 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13157 ;;      Params:         0       0       0       0       0       0       0       0       0
 13158 ;;      Locals:         1       0       0       0       0       0       0       0       0
 13159 ;;      Temps:          5       0       0       0       0       0       0       0       0
 13160 ;;      Totals:         6       0       0       0       0       0       0       0       0
 13161 ;;Total ram usage:        6 bytes
 13162 ;; Hardware stack levels used:    1
 13163 ;; Hardware stack levels required when called:    3
 13164 ;; This function calls:
 13165 ;;		i2_spi
 13166 ;;		i2_writeDigit
 13167 ;; This function is called by:
 13168 ;;		_buttons
 13169 ;; This function uses a non-reentrant model
 13170 ;;
 13171                           
 13172                           	psect	text48
 13173  001AC4                     __ptext48:
 13174                           	opt stack 0
 13175  001AC4                     i2_update:
 13176                           	opt stack 21
 13177                           
 13178                           ;disp.c: 14: if (screen.changed == 0)
 13179                           
 13180                           ;incstack = 0
 13181                           ;incstack = 0
 13182  001AC4  0101               	movlb	1	; () banked
 13183  001AC6  0101               	movlb	1	; () banked
 13184  001AC8  5137               	movf	(_screen+12)& (0+255),w,b
 13185  001ACA  1136               	iorwf	(_screen+11)& (0+255),w,b
 13186  001ACC  B4D8               	btfsc	status,2,c
 13187  001ACE  D23D               	goto	i2l140
 13188                           
 13189                           ; BSR set to: 1
 13190                           ;disp.c: 17: }
 13191                           ;disp.c: 18: int8_t cnt;
 13192                           ;disp.c: 19: for (cnt = 15; cnt >= 0; cnt--)
 13193                           
 13194                           ; BSR set to: 1
 13195                           
 13196                           ; BSR set to: 1
 13197                           ;disp.c: 15: {
 13198                           ;disp.c: 16: return;
 13199  001AD0  6E19               	movwf	??i2_update& (0+255),c
 13200  001AD2  0E0F               	movlw	15
 13201  001AD4  6E1E               	movwf	i2update@cnt,c
 13202  001AD6  5019               	movf	??i2_update& (0+255),w,c
 13203  001AD8                     
 13204                           ; BSR set to: 1
 13205  001AD8  BE1E               	btfsc	i2update@cnt,7,c
 13206  001ADA  D237               	goto	i2l140
 13207  001ADC  D05A               	goto	i2l6363
 13208  001ADE                     i2l6349:
 13209                           
 13210                           ; BSR set to: 1
 13211                           ;disp.c: 24: writeDigit(1 << cnt, screen.digits.screen[cnt].bits);
 13212  001ADE  C01E  F019         	movff	i2update@cnt,??i2_update
 13213  001AE2  0E01               	movlw	1
 13214  001AE4  6E1A               	movwf	(??i2_update+1)& (0+255),c
 13215  001AE6  2A19               	incf	??i2_update,f,c
 13216  001AE8  D002               	goto	i2u435_44
 13217  001AEA                     i2u435_45:
 13218  001AEA  90D8               	bcf	status,0,c
 13219  001AEC  361A               	rlcf	??i2_update+1,f,c
 13220  001AEE                     i2u435_44:
 13221  001AEE  2E19               	decfsz	??i2_update,f,c
 13222  001AF0  D7FC               	goto	i2u435_45
 13223  001AF2  501A               	movf	??i2_update+1,w,c
 13224  001AF4  6E14               	movwf	?i2_writeDigit,c
 13225  001AF6  501E               	movf	i2update@cnt,w,c
 13226  001AF8  0D01               	mullw	1
 13227  001AFA  0101               	movlb	1	; () banked
 13228  001AFC  0E2B               	movlw	low _screen
 13229  001AFE  24F3               	addwf	prodl,w,c
 13230  001B00  6ED9               	movwf	fsr2l,c
 13231  001B02  0101               	movlb	1	; () banked
 13232  001B04  0E01               	movlw	high _screen
 13233  001B06  20F4               	addwfc	prodh,w,c
 13234  001B08  6EDA               	movwf	fsr2h,c
 13235  001B0A  50DF               	movf	indf2,w,c
 13236  001B0C  6E15               	movwf	?i2_writeDigit+1,c
 13237  001B0E  ECCA  F021         	call	i2_writeDigit	;wreg free
 13238                           
 13239                           ;disp.c: 25: break;
 13240  001B12  D201               	goto	i2l6365
 13241  001B14                     i2l6351:
 13242                           
 13243                           ;disp.c: 27: spi(0b1001, screen.decode);
 13244  001B14  6E19               	movwf	??i2_update& (0+255),c
 13245  001B16  0E09               	movlw	9
 13246  001B18  6E07               	movwf	?i2_spi,c
 13247  001B1A  5019               	movf	??i2_update& (0+255),w,c
 13248  001B1C  0101               	movlb	1	; () banked
 13249  001B1E  0101               	movlb	1	; () banked
 13250  001B20  5133               	movf	(_screen+8)& (0+255),w,b
 13251  001B22  0BFF               	andlw	255
 13252  001B24  6E08               	movwf	?i2_spi+1,c
 13253  001B26  EC7F  F01D         	call	i2_spi	;wreg free
 13254                           
 13255                           ;disp.c: 28: break;
 13256  001B2A  D1F5               	goto	i2l6365
 13257  001B2C                     i2l6353:
 13258                           
 13259                           ;disp.c: 30: spi(0b1010, screen.brightness);
 13260  001B2C  6E19               	movwf	??i2_update& (0+255),c
 13261  001B2E  0E0A               	movlw	10
 13262  001B30  6E07               	movwf	?i2_spi,c
 13263  001B32  5019               	movf	??i2_update& (0+255),w,c
 13264  001B34  0101               	movlb	1	; () banked
 13265  001B36  0101               	movlb	1	; () banked
 13266  001B38  5134               	movf	(_screen+9)& (0+255),w,b
 13267  001B3A  0B0F               	andlw	15
 13268  001B3C  6E08               	movwf	?i2_spi+1,c
 13269  001B3E  EC7F  F01D         	call	i2_spi	;wreg free
 13270                           
 13271                           ;disp.c: 31: break;
 13272  001B42  D1E9               	goto	i2l6365
 13273  001B44                     i2l6355:
 13274                           
 13275                           ;disp.c: 33: spi(0b1011, screen.scan);
 13276  001B44  6E19               	movwf	??i2_update& (0+255),c
 13277  001B46  0E0B               	movlw	11
 13278  001B48  6E07               	movwf	?i2_spi,c
 13279  001B4A  5019               	movf	??i2_update& (0+255),w,c
 13280  001B4C  0101               	movlb	1	; () banked
 13281  001B4E  0101               	movlb	1	; () banked
 13282  001B50  3934               	swapf	(_screen+9)& (0+255),w,b
 13283  001B52  0B07               	andlw	7
 13284  001B54  6E08               	movwf	?i2_spi+1,c
 13285  001B56  EC7F  F01D         	call	i2_spi	;wreg free
 13286                           
 13287                           ;disp.c: 34: break;
 13288  001B5A  D1DD               	goto	i2l6365
 13289  001B5C                     i2l6357:
 13290                           
 13291                           ;disp.c: 36: spi(0b1111, screen.test);
 13292  001B5C  6E19               	movwf	??i2_update& (0+255),c
 13293  001B5E  0E0F               	movlw	15
 13294  001B60  6E07               	movwf	?i2_spi,c
 13295  001B62  5019               	movf	??i2_update& (0+255),w,c
 13296  001B64  0E00               	movlw	0
 13297  001B66  0101               	movlb	1	; () banked
 13298  001B68  BF34               	btfsc	(_screen+9)& (0+255),7,b
 13299  001B6A  0E01               	movlw	1
 13300  001B6C  6E08               	movwf	?i2_spi+1,c
 13301  001B6E  EC7F  F01D         	call	i2_spi	;wreg free
 13302                           
 13303                           ;disp.c: 37: break;
 13304  001B72  D1D1               	goto	i2l6365
 13305  001B74                     i2l6359:
 13306                           
 13307                           ;disp.c: 39: spi(0b1100, !screen.shutdown);
 13308  001B74  6E19               	movwf	??i2_update& (0+255),c
 13309  001B76  0E0C               	movlw	12
 13310  001B78  6E07               	movwf	?i2_spi,c
 13311  001B7A  5019               	movf	??i2_update& (0+255),w,c
 13312  001B7C  0101               	movlb	1	; () banked
 13313  001B7E  0101               	movlb	1	; () banked
 13314  001B80  B135               	btfsc	(_screen+10)& (0+255),0,b
 13315  001B82  D002               	goto	i2u436_40
 13316  001B84  0E01               	movlw	1
 13317  001B86  D001               	goto	i2u436_46
 13318  001B88                     i2u436_40:
 13319  001B88  0E00               	movlw	0
 13320  001B8A                     i2u436_46:
 13321  001B8A  6E08               	movwf	?i2_spi+1,c
 13322  001B8C  EC7F  F01D         	call	i2_spi	;wreg free
 13323                           
 13324                           ;disp.c: 40: break;
 13325  001B90  D1C2               	goto	i2l6365
 13326  001B92                     i2l6363:
 13327  001B92  C01E  F019         	movff	i2update@cnt,??i2_update
 13328  001B96  0E01               	movlw	1
 13329  001B98  6E1A               	movwf	(??i2_update+1)& (0+255),c
 13330  001B9A  6A1B               	clrf	(??i2_update+2)& (0+255),c
 13331  001B9C  2A19               	incf	??i2_update,f,c
 13332  001B9E  D003               	goto	i2u437_44
 13333  001BA0                     i2u437_45:
 13334  001BA0  90D8               	bcf	status,0,c
 13335  001BA2  361A               	rlcf	??i2_update+1,f,c
 13336  001BA4  361B               	rlcf	??i2_update+2,f,c
 13337  001BA6                     i2u437_44:
 13338  001BA6  2E19               	decfsz	??i2_update,f,c
 13339  001BA8  D7FB               	goto	i2u437_45
 13340  001BAA  0101               	movlb	1	; () banked
 13341  001BAC  0101               	movlb	1	; () banked
 13342  001BAE  5136               	movf	(_screen+11)& (0+255),w,b
 13343  001BB0  161A               	andwf	??i2_update+1,f,c
 13344  001BB2  0101               	movlb	1	; () banked
 13345  001BB4  0101               	movlb	1	; () banked
 13346  001BB6  5137               	movf	(_screen+12)& (0+255),w,b
 13347  001BB8  161B               	andwf	??i2_update+2,f,c
 13348                           
 13349                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 6 sub-sw
      +                          itches
 13350                           ; Switch size 1, requested type "space"
 13351                           ; Number of cases is 6, Range of values is 0 to 32
 13352                           ; switch strategies available:
 13353                           ; Name         Instructions Cycles
 13354                           ; simple_byte           19    10 (average)
 13355                           ;	Chosen strategy is simple_byte
 13356  001BBA  501B               	movf	??i2_update+2,w,c
 13357  001BBC  0A00               	xorlw	0	; case 0
 13358  001BBE  B4D8               	btfsc	status,2,c
 13359  001BC0  D010               	goto	i2l7297
 13360  001BC2  0A02               	xorlw	2	; case 2
 13361  001BC4  B4D8               	btfsc	status,2,c
 13362  001BC6  D18F               	goto	i2l7299
 13363  001BC8  0A06               	xorlw	6	; case 4
 13364  001BCA  B4D8               	btfsc	status,2,c
 13365  001BCC  D191               	goto	i2l7301
 13366  001BCE  0A0C               	xorlw	12	; case 8
 13367  001BD0  B4D8               	btfsc	status,2,c
 13368  001BD2  D193               	goto	i2l7303
 13369  001BD4  0A18               	xorlw	24	; case 16
 13370  001BD6  B4D8               	btfsc	status,2,c
 13371  001BD8  D195               	goto	i2l7305
 13372  001BDA  0A30               	xorlw	48	; case 32
 13373  001BDC  B4D8               	btfsc	status,2,c
 13374  001BDE  D197               	goto	i2l7307
 13375  001BE0  D19A               	goto	i2l6365
 13376  001BE2                     i2l7297:
 13377                           
 13378                           ; BSR set to: 1
 13379                           ; Switch size 1, requested type "space"
 13380                           ; Number of cases is 128, Range of values is 1 to 128
 13381                           ; switch strategies available:
 13382                           ; Name         Instructions Cycles
 13383                           ; simple_byte          385   193 (average)
 13384                           ;	Chosen strategy is simple_byte
 13385  001BE2  501A               	movf	??i2_update+1,w,c
 13386  001BE4  0A01               	xorlw	1	; case 1
 13387  001BE6  B4D8               	btfsc	status,2,c
 13388  001BE8  D77A               	goto	i2l6349
 13389  001BEA  0A03               	xorlw	3	; case 2
 13390  001BEC  B4D8               	btfsc	status,2,c
 13391  001BEE  D777               	goto	i2l6349
 13392  001BF0  0A01               	xorlw	1	; case 3
 13393  001BF2  B4D8               	btfsc	status,2,c
 13394  001BF4  D774               	goto	i2l6349
 13395  001BF6  0A07               	xorlw	7	; case 4
 13396  001BF8  B4D8               	btfsc	status,2,c
 13397  001BFA  D771               	goto	i2l6349
 13398  001BFC  0A01               	xorlw	1	; case 5
 13399  001BFE  B4D8               	btfsc	status,2,c
 13400  001C00  D76E               	goto	i2l6349
 13401  001C02  0A03               	xorlw	3	; case 6
 13402  001C04  B4D8               	btfsc	status,2,c
 13403  001C06  D76B               	goto	i2l6349
 13404  001C08  0A01               	xorlw	1	; case 7
 13405  001C0A  B4D8               	btfsc	status,2,c
 13406  001C0C  D768               	goto	i2l6349
 13407  001C0E  0A0F               	xorlw	15	; case 8
 13408  001C10  B4D8               	btfsc	status,2,c
 13409  001C12  D765               	goto	i2l6349
 13410  001C14  0A01               	xorlw	1	; case 9
 13411  001C16  B4D8               	btfsc	status,2,c
 13412  001C18  D762               	goto	i2l6349
 13413  001C1A  0A03               	xorlw	3	; case 10
 13414  001C1C  B4D8               	btfsc	status,2,c
 13415  001C1E  D75F               	goto	i2l6349
 13416  001C20  0A01               	xorlw	1	; case 11
 13417  001C22  B4D8               	btfsc	status,2,c
 13418  001C24  D75C               	goto	i2l6349
 13419  001C26  0A07               	xorlw	7	; case 12
 13420  001C28  B4D8               	btfsc	status,2,c
 13421  001C2A  D759               	goto	i2l6349
 13422  001C2C  0A01               	xorlw	1	; case 13
 13423  001C2E  B4D8               	btfsc	status,2,c
 13424  001C30  D756               	goto	i2l6349
 13425  001C32  0A03               	xorlw	3	; case 14
 13426  001C34  B4D8               	btfsc	status,2,c
 13427  001C36  D753               	goto	i2l6349
 13428  001C38  0A01               	xorlw	1	; case 15
 13429  001C3A  B4D8               	btfsc	status,2,c
 13430  001C3C  D750               	goto	i2l6349
 13431  001C3E  0A1F               	xorlw	31	; case 16
 13432  001C40  B4D8               	btfsc	status,2,c
 13433  001C42  D74D               	goto	i2l6349
 13434  001C44  0A01               	xorlw	1	; case 17
 13435  001C46  B4D8               	btfsc	status,2,c
 13436  001C48  D74A               	goto	i2l6349
 13437  001C4A  0A03               	xorlw	3	; case 18
 13438  001C4C  B4D8               	btfsc	status,2,c
 13439  001C4E  D747               	goto	i2l6349
 13440  001C50  0A01               	xorlw	1	; case 19
 13441  001C52  B4D8               	btfsc	status,2,c
 13442  001C54  D744               	goto	i2l6349
 13443  001C56  0A07               	xorlw	7	; case 20
 13444  001C58  B4D8               	btfsc	status,2,c
 13445  001C5A  D741               	goto	i2l6349
 13446  001C5C  0A01               	xorlw	1	; case 21
 13447  001C5E  B4D8               	btfsc	status,2,c
 13448  001C60  D73E               	goto	i2l6349
 13449  001C62  0A03               	xorlw	3	; case 22
 13450  001C64  B4D8               	btfsc	status,2,c
 13451  001C66  D73B               	goto	i2l6349
 13452  001C68  0A01               	xorlw	1	; case 23
 13453  001C6A  B4D8               	btfsc	status,2,c
 13454  001C6C  D738               	goto	i2l6349
 13455  001C6E  0A0F               	xorlw	15	; case 24
 13456  001C70  B4D8               	btfsc	status,2,c
 13457  001C72  D735               	goto	i2l6349
 13458  001C74  0A01               	xorlw	1	; case 25
 13459  001C76  B4D8               	btfsc	status,2,c
 13460  001C78  D732               	goto	i2l6349
 13461  001C7A  0A03               	xorlw	3	; case 26
 13462  001C7C  B4D8               	btfsc	status,2,c
 13463  001C7E  D72F               	goto	i2l6349
 13464  001C80  0A01               	xorlw	1	; case 27
 13465  001C82  B4D8               	btfsc	status,2,c
 13466  001C84  D72C               	goto	i2l6349
 13467  001C86  0A07               	xorlw	7	; case 28
 13468  001C88  B4D8               	btfsc	status,2,c
 13469  001C8A  D729               	goto	i2l6349
 13470  001C8C  0A01               	xorlw	1	; case 29
 13471  001C8E  B4D8               	btfsc	status,2,c
 13472  001C90  D726               	goto	i2l6349
 13473  001C92  0A03               	xorlw	3	; case 30
 13474  001C94  B4D8               	btfsc	status,2,c
 13475  001C96  D723               	goto	i2l6349
 13476  001C98  0A01               	xorlw	1	; case 31
 13477  001C9A  B4D8               	btfsc	status,2,c
 13478  001C9C  D720               	goto	i2l6349
 13479  001C9E  0A3F               	xorlw	63	; case 32
 13480  001CA0  B4D8               	btfsc	status,2,c
 13481  001CA2  D71D               	goto	i2l6349
 13482  001CA4  0A01               	xorlw	1	; case 33
 13483  001CA6  B4D8               	btfsc	status,2,c
 13484  001CA8  D71A               	goto	i2l6349
 13485  001CAA  0A03               	xorlw	3	; case 34
 13486  001CAC  B4D8               	btfsc	status,2,c
 13487  001CAE  D717               	goto	i2l6349
 13488  001CB0  0A01               	xorlw	1	; case 35
 13489  001CB2  B4D8               	btfsc	status,2,c
 13490  001CB4  D714               	goto	i2l6349
 13491  001CB6  0A07               	xorlw	7	; case 36
 13492  001CB8  B4D8               	btfsc	status,2,c
 13493  001CBA  D711               	goto	i2l6349
 13494  001CBC  0A01               	xorlw	1	; case 37
 13495  001CBE  B4D8               	btfsc	status,2,c
 13496  001CC0  D70E               	goto	i2l6349
 13497  001CC2  0A03               	xorlw	3	; case 38
 13498  001CC4  B4D8               	btfsc	status,2,c
 13499  001CC6  D70B               	goto	i2l6349
 13500  001CC8  0A01               	xorlw	1	; case 39
 13501  001CCA  B4D8               	btfsc	status,2,c
 13502  001CCC  D708               	goto	i2l6349
 13503  001CCE  0A0F               	xorlw	15	; case 40
 13504  001CD0  B4D8               	btfsc	status,2,c
 13505  001CD2  D705               	goto	i2l6349
 13506  001CD4  0A01               	xorlw	1	; case 41
 13507  001CD6  B4D8               	btfsc	status,2,c
 13508  001CD8  D702               	goto	i2l6349
 13509  001CDA  0A03               	xorlw	3	; case 42
 13510  001CDC  B4D8               	btfsc	status,2,c
 13511  001CDE  D6FF               	goto	i2l6349
 13512  001CE0  0A01               	xorlw	1	; case 43
 13513  001CE2  B4D8               	btfsc	status,2,c
 13514  001CE4  D6FC               	goto	i2l6349
 13515  001CE6  0A07               	xorlw	7	; case 44
 13516  001CE8  B4D8               	btfsc	status,2,c
 13517  001CEA  D6F9               	goto	i2l6349
 13518  001CEC  0A01               	xorlw	1	; case 45
 13519  001CEE  B4D8               	btfsc	status,2,c
 13520  001CF0  D6F6               	goto	i2l6349
 13521  001CF2  0A03               	xorlw	3	; case 46
 13522  001CF4  B4D8               	btfsc	status,2,c
 13523  001CF6  D6F3               	goto	i2l6349
 13524  001CF8  0A01               	xorlw	1	; case 47
 13525  001CFA  B4D8               	btfsc	status,2,c
 13526  001CFC  D6F0               	goto	i2l6349
 13527  001CFE  0A1F               	xorlw	31	; case 48
 13528  001D00  B4D8               	btfsc	status,2,c
 13529  001D02  D6ED               	goto	i2l6349
 13530  001D04  0A01               	xorlw	1	; case 49
 13531  001D06  B4D8               	btfsc	status,2,c
 13532  001D08  D6EA               	goto	i2l6349
 13533  001D0A  0A03               	xorlw	3	; case 50
 13534  001D0C  B4D8               	btfsc	status,2,c
 13535  001D0E  D6E7               	goto	i2l6349
 13536  001D10  0A01               	xorlw	1	; case 51
 13537  001D12  B4D8               	btfsc	status,2,c
 13538  001D14  D6E4               	goto	i2l6349
 13539  001D16  0A07               	xorlw	7	; case 52
 13540  001D18  B4D8               	btfsc	status,2,c
 13541  001D1A  D6E1               	goto	i2l6349
 13542  001D1C  0A01               	xorlw	1	; case 53
 13543  001D1E  B4D8               	btfsc	status,2,c
 13544  001D20  D6DE               	goto	i2l6349
 13545  001D22  0A03               	xorlw	3	; case 54
 13546  001D24  B4D8               	btfsc	status,2,c
 13547  001D26  D6DB               	goto	i2l6349
 13548  001D28  0A01               	xorlw	1	; case 55
 13549  001D2A  B4D8               	btfsc	status,2,c
 13550  001D2C  D6D8               	goto	i2l6349
 13551  001D2E  0A0F               	xorlw	15	; case 56
 13552  001D30  B4D8               	btfsc	status,2,c
 13553  001D32  D6D5               	goto	i2l6349
 13554  001D34  0A01               	xorlw	1	; case 57
 13555  001D36  B4D8               	btfsc	status,2,c
 13556  001D38  D6D2               	goto	i2l6349
 13557  001D3A  0A03               	xorlw	3	; case 58
 13558  001D3C  B4D8               	btfsc	status,2,c
 13559  001D3E  D6CF               	goto	i2l6349
 13560  001D40  0A01               	xorlw	1	; case 59
 13561  001D42  B4D8               	btfsc	status,2,c
 13562  001D44  D6CC               	goto	i2l6349
 13563  001D46  0A07               	xorlw	7	; case 60
 13564  001D48  B4D8               	btfsc	status,2,c
 13565  001D4A  D6C9               	goto	i2l6349
 13566  001D4C  0A01               	xorlw	1	; case 61
 13567  001D4E  B4D8               	btfsc	status,2,c
 13568  001D50  D6C6               	goto	i2l6349
 13569  001D52  0A03               	xorlw	3	; case 62
 13570  001D54  B4D8               	btfsc	status,2,c
 13571  001D56  D6C3               	goto	i2l6349
 13572  001D58  0A01               	xorlw	1	; case 63
 13573  001D5A  B4D8               	btfsc	status,2,c
 13574  001D5C  D6C0               	goto	i2l6349
 13575  001D5E  0A7F               	xorlw	127	; case 64
 13576  001D60  B4D8               	btfsc	status,2,c
 13577  001D62  D6BD               	goto	i2l6349
 13578  001D64  0A01               	xorlw	1	; case 65
 13579  001D66  B4D8               	btfsc	status,2,c
 13580  001D68  D6BA               	goto	i2l6349
 13581  001D6A  0A03               	xorlw	3	; case 66
 13582  001D6C  B4D8               	btfsc	status,2,c
 13583  001D6E  D6B7               	goto	i2l6349
 13584  001D70  0A01               	xorlw	1	; case 67
 13585  001D72  B4D8               	btfsc	status,2,c
 13586  001D74  D6B4               	goto	i2l6349
 13587  001D76  0A07               	xorlw	7	; case 68
 13588  001D78  B4D8               	btfsc	status,2,c
 13589  001D7A  D6B1               	goto	i2l6349
 13590  001D7C  0A01               	xorlw	1	; case 69
 13591  001D7E  B4D8               	btfsc	status,2,c
 13592  001D80  D6AE               	goto	i2l6349
 13593  001D82  0A03               	xorlw	3	; case 70
 13594  001D84  B4D8               	btfsc	status,2,c
 13595  001D86  D6AB               	goto	i2l6349
 13596  001D88  0A01               	xorlw	1	; case 71
 13597  001D8A  B4D8               	btfsc	status,2,c
 13598  001D8C  D6A8               	goto	i2l6349
 13599  001D8E  0A0F               	xorlw	15	; case 72
 13600  001D90  B4D8               	btfsc	status,2,c
 13601  001D92  D6A5               	goto	i2l6349
 13602  001D94  0A01               	xorlw	1	; case 73
 13603  001D96  B4D8               	btfsc	status,2,c
 13604  001D98  D6A2               	goto	i2l6349
 13605  001D9A  0A03               	xorlw	3	; case 74
 13606  001D9C  B4D8               	btfsc	status,2,c
 13607  001D9E  D69F               	goto	i2l6349
 13608  001DA0  0A01               	xorlw	1	; case 75
 13609  001DA2  B4D8               	btfsc	status,2,c
 13610  001DA4  D69C               	goto	i2l6349
 13611  001DA6  0A07               	xorlw	7	; case 76
 13612  001DA8  B4D8               	btfsc	status,2,c
 13613  001DAA  D699               	goto	i2l6349
 13614  001DAC  0A01               	xorlw	1	; case 77
 13615  001DAE  B4D8               	btfsc	status,2,c
 13616  001DB0  D696               	goto	i2l6349
 13617  001DB2  0A03               	xorlw	3	; case 78
 13618  001DB4  B4D8               	btfsc	status,2,c
 13619  001DB6  D693               	goto	i2l6349
 13620  001DB8  0A01               	xorlw	1	; case 79
 13621  001DBA  B4D8               	btfsc	status,2,c
 13622  001DBC  D690               	goto	i2l6349
 13623  001DBE  0A1F               	xorlw	31	; case 80
 13624  001DC0  B4D8               	btfsc	status,2,c
 13625  001DC2  D68D               	goto	i2l6349
 13626  001DC4  0A01               	xorlw	1	; case 81
 13627  001DC6  B4D8               	btfsc	status,2,c
 13628  001DC8  D68A               	goto	i2l6349
 13629  001DCA  0A03               	xorlw	3	; case 82
 13630  001DCC  B4D8               	btfsc	status,2,c
 13631  001DCE  D687               	goto	i2l6349
 13632  001DD0  0A01               	xorlw	1	; case 83
 13633  001DD2  B4D8               	btfsc	status,2,c
 13634  001DD4  D684               	goto	i2l6349
 13635  001DD6  0A07               	xorlw	7	; case 84
 13636  001DD8  B4D8               	btfsc	status,2,c
 13637  001DDA  D681               	goto	i2l6349
 13638  001DDC  0A01               	xorlw	1	; case 85
 13639  001DDE  B4D8               	btfsc	status,2,c
 13640  001DE0  D67E               	goto	i2l6349
 13641  001DE2  0A03               	xorlw	3	; case 86
 13642  001DE4  B4D8               	btfsc	status,2,c
 13643  001DE6  D67B               	goto	i2l6349
 13644  001DE8  0A01               	xorlw	1	; case 87
 13645  001DEA  B4D8               	btfsc	status,2,c
 13646  001DEC  D678               	goto	i2l6349
 13647  001DEE  0A0F               	xorlw	15	; case 88
 13648  001DF0  B4D8               	btfsc	status,2,c
 13649  001DF2  D675               	goto	i2l6349
 13650  001DF4  0A01               	xorlw	1	; case 89
 13651  001DF6  B4D8               	btfsc	status,2,c
 13652  001DF8  D672               	goto	i2l6349
 13653  001DFA  0A03               	xorlw	3	; case 90
 13654  001DFC  B4D8               	btfsc	status,2,c
 13655  001DFE  D66F               	goto	i2l6349
 13656  001E00  0A01               	xorlw	1	; case 91
 13657  001E02  B4D8               	btfsc	status,2,c
 13658  001E04  D66C               	goto	i2l6349
 13659  001E06  0A07               	xorlw	7	; case 92
 13660  001E08  B4D8               	btfsc	status,2,c
 13661  001E0A  D669               	goto	i2l6349
 13662  001E0C  0A01               	xorlw	1	; case 93
 13663  001E0E  B4D8               	btfsc	status,2,c
 13664  001E10  D666               	goto	i2l6349
 13665  001E12  0A03               	xorlw	3	; case 94
 13666  001E14  B4D8               	btfsc	status,2,c
 13667  001E16  D663               	goto	i2l6349
 13668  001E18  0A01               	xorlw	1	; case 95
 13669  001E1A  B4D8               	btfsc	status,2,c
 13670  001E1C  D660               	goto	i2l6349
 13671  001E1E  0A3F               	xorlw	63	; case 96
 13672  001E20  B4D8               	btfsc	status,2,c
 13673  001E22  D65D               	goto	i2l6349
 13674  001E24  0A01               	xorlw	1	; case 97
 13675  001E26  B4D8               	btfsc	status,2,c
 13676  001E28  D65A               	goto	i2l6349
 13677  001E2A  0A03               	xorlw	3	; case 98
 13678  001E2C  B4D8               	btfsc	status,2,c
 13679  001E2E  D657               	goto	i2l6349
 13680  001E30  0A01               	xorlw	1	; case 99
 13681  001E32  B4D8               	btfsc	status,2,c
 13682  001E34  D654               	goto	i2l6349
 13683  001E36  0A07               	xorlw	7	; case 100
 13684  001E38  B4D8               	btfsc	status,2,c
 13685  001E3A  D651               	goto	i2l6349
 13686  001E3C  0A01               	xorlw	1	; case 101
 13687  001E3E  B4D8               	btfsc	status,2,c
 13688  001E40  D64E               	goto	i2l6349
 13689  001E42  0A03               	xorlw	3	; case 102
 13690  001E44  B4D8               	btfsc	status,2,c
 13691  001E46  D64B               	goto	i2l6349
 13692  001E48  0A01               	xorlw	1	; case 103
 13693  001E4A  B4D8               	btfsc	status,2,c
 13694  001E4C  D648               	goto	i2l6349
 13695  001E4E  0A0F               	xorlw	15	; case 104
 13696  001E50  B4D8               	btfsc	status,2,c
 13697  001E52  D645               	goto	i2l6349
 13698  001E54  0A01               	xorlw	1	; case 105
 13699  001E56  B4D8               	btfsc	status,2,c
 13700  001E58  D642               	goto	i2l6349
 13701  001E5A  0A03               	xorlw	3	; case 106
 13702  001E5C  B4D8               	btfsc	status,2,c
 13703  001E5E  D63F               	goto	i2l6349
 13704  001E60  0A01               	xorlw	1	; case 107
 13705  001E62  B4D8               	btfsc	status,2,c
 13706  001E64  D63C               	goto	i2l6349
 13707  001E66  0A07               	xorlw	7	; case 108
 13708  001E68  B4D8               	btfsc	status,2,c
 13709  001E6A  D639               	goto	i2l6349
 13710  001E6C  0A01               	xorlw	1	; case 109
 13711  001E6E  B4D8               	btfsc	status,2,c
 13712  001E70  D636               	goto	i2l6349
 13713  001E72  0A03               	xorlw	3	; case 110
 13714  001E74  B4D8               	btfsc	status,2,c
 13715  001E76  D633               	goto	i2l6349
 13716  001E78  0A01               	xorlw	1	; case 111
 13717  001E7A  B4D8               	btfsc	status,2,c
 13718  001E7C  D630               	goto	i2l6349
 13719  001E7E  0A1F               	xorlw	31	; case 112
 13720  001E80  B4D8               	btfsc	status,2,c
 13721  001E82  D62D               	goto	i2l6349
 13722  001E84  0A01               	xorlw	1	; case 113
 13723  001E86  B4D8               	btfsc	status,2,c
 13724  001E88  D62A               	goto	i2l6349
 13725  001E8A  0A03               	xorlw	3	; case 114
 13726  001E8C  B4D8               	btfsc	status,2,c
 13727  001E8E  D627               	goto	i2l6349
 13728  001E90  0A01               	xorlw	1	; case 115
 13729  001E92  B4D8               	btfsc	status,2,c
 13730  001E94  D624               	goto	i2l6349
 13731  001E96  0A07               	xorlw	7	; case 116
 13732  001E98  B4D8               	btfsc	status,2,c
 13733  001E9A  D621               	goto	i2l6349
 13734  001E9C  0A01               	xorlw	1	; case 117
 13735  001E9E  B4D8               	btfsc	status,2,c
 13736  001EA0  D61E               	goto	i2l6349
 13737  001EA2  0A03               	xorlw	3	; case 118
 13738  001EA4  B4D8               	btfsc	status,2,c
 13739  001EA6  D61B               	goto	i2l6349
 13740  001EA8  0A01               	xorlw	1	; case 119
 13741  001EAA  B4D8               	btfsc	status,2,c
 13742  001EAC  D618               	goto	i2l6349
 13743  001EAE  0A0F               	xorlw	15	; case 120
 13744  001EB0  B4D8               	btfsc	status,2,c
 13745  001EB2  D615               	goto	i2l6349
 13746  001EB4  0A01               	xorlw	1	; case 121
 13747  001EB6  B4D8               	btfsc	status,2,c
 13748  001EB8  D612               	goto	i2l6349
 13749  001EBA  0A03               	xorlw	3	; case 122
 13750  001EBC  B4D8               	btfsc	status,2,c
 13751  001EBE  D60F               	goto	i2l6349
 13752  001EC0  0A01               	xorlw	1	; case 123
 13753  001EC2  B4D8               	btfsc	status,2,c
 13754  001EC4  D60C               	goto	i2l6349
 13755  001EC6  0A07               	xorlw	7	; case 124
 13756  001EC8  B4D8               	btfsc	status,2,c
 13757  001ECA  D609               	goto	i2l6349
 13758  001ECC  0A01               	xorlw	1	; case 125
 13759  001ECE  B4D8               	btfsc	status,2,c
 13760  001ED0  D606               	goto	i2l6349
 13761  001ED2  0A03               	xorlw	3	; case 126
 13762  001ED4  B4D8               	btfsc	status,2,c
 13763  001ED6  D603               	goto	i2l6349
 13764  001ED8  0A01               	xorlw	1	; case 127
 13765  001EDA  B4D8               	btfsc	status,2,c
 13766  001EDC  D600               	goto	i2l6349
 13767  001EDE  0AFF               	xorlw	255	; case 128
 13768  001EE0  B4D8               	btfsc	status,2,c
 13769  001EE2  D5FD               	goto	i2l6349
 13770  001EE4  D018               	goto	i2l6365
 13771  001EE6                     i2l7299:
 13772                           
 13773                           ; BSR set to: 1
 13774                           ; Switch size 1, requested type "space"
 13775                           ; Number of cases is 1, Range of values is 0 to 0
 13776                           ; switch strategies available:
 13777                           ; Name         Instructions Cycles
 13778                           ; simple_byte            4     3 (average)
 13779                           ;	Chosen strategy is simple_byte
 13780  001EE6  501A               	movf	??i2_update+1,w,c
 13781  001EE8  0A00               	xorlw	0	; case 0
 13782  001EEA  B4D8               	btfsc	status,2,c
 13783  001EEC  D613               	goto	i2l6351
 13784  001EEE  D013               	goto	i2l6365
 13785  001EF0                     i2l7301:
 13786                           
 13787                           ; BSR set to: 1
 13788                           ; Switch size 1, requested type "space"
 13789                           ; Number of cases is 1, Range of values is 0 to 0
 13790                           ; switch strategies available:
 13791                           ; Name         Instructions Cycles
 13792                           ; simple_byte            4     3 (average)
 13793                           ;	Chosen strategy is simple_byte
 13794  001EF0  501A               	movf	??i2_update+1,w,c
 13795  001EF2  0A00               	xorlw	0	; case 0
 13796  001EF4  B4D8               	btfsc	status,2,c
 13797  001EF6  D61A               	goto	i2l6353
 13798  001EF8  D00E               	goto	i2l6365
 13799  001EFA                     i2l7303:
 13800                           
 13801                           ; BSR set to: 1
 13802                           ; Switch size 1, requested type "space"
 13803                           ; Number of cases is 1, Range of values is 0 to 0
 13804                           ; switch strategies available:
 13805                           ; Name         Instructions Cycles
 13806                           ; simple_byte            4     3 (average)
 13807                           ;	Chosen strategy is simple_byte
 13808  001EFA  501A               	movf	??i2_update+1,w,c
 13809  001EFC  0A00               	xorlw	0	; case 0
 13810  001EFE  B4D8               	btfsc	status,2,c
 13811  001F00  D621               	goto	i2l6355
 13812  001F02  D009               	goto	i2l6365
 13813  001F04                     i2l7305:
 13814                           
 13815                           ; BSR set to: 1
 13816                           ; Switch size 1, requested type "space"
 13817                           ; Number of cases is 1, Range of values is 0 to 0
 13818                           ; switch strategies available:
 13819                           ; Name         Instructions Cycles
 13820                           ; simple_byte            4     3 (average)
 13821                           ;	Chosen strategy is simple_byte
 13822  001F04  501A               	movf	??i2_update+1,w,c
 13823  001F06  0A00               	xorlw	0	; case 0
 13824  001F08  B4D8               	btfsc	status,2,c
 13825  001F0A  D628               	goto	i2l6357
 13826  001F0C  D004               	goto	i2l6365
 13827  001F0E                     i2l7307:
 13828                           
 13829                           ; BSR set to: 1
 13830                           ; Switch size 1, requested type "space"
 13831                           ; Number of cases is 1, Range of values is 0 to 0
 13832                           ; switch strategies available:
 13833                           ; Name         Instructions Cycles
 13834                           ; simple_byte            4     3 (average)
 13835                           ;	Chosen strategy is simple_byte
 13836  001F0E  501A               	movf	??i2_update+1,w,c
 13837  001F10  0A00               	xorlw	0	; case 0
 13838  001F12  B4D8               	btfsc	status,2,c
 13839  001F14  D62F               	goto	i2l6359
 13840  001F16                     i2l6365:
 13841                           
 13842                           ;disp.c: 44: screen.changed &= ~(1 << cnt);
 13843  001F16  C01E  F019         	movff	i2update@cnt,??i2_update
 13844  001F1A  0E01               	movlw	1
 13845  001F1C  6E1A               	movwf	(??i2_update+1)& (0+255),c
 13846  001F1E  6A1B               	clrf	(??i2_update+2)& (0+255),c
 13847  001F20  2A19               	incf	??i2_update,f,c
 13848  001F22  D003               	goto	i2u438_44
 13849  001F24                     i2u438_45:
 13850  001F24  90D8               	bcf	status,0,c
 13851  001F26  361A               	rlcf	??i2_update+1,f,c
 13852  001F28  361B               	rlcf	??i2_update+2,f,c
 13853  001F2A                     i2u438_44:
 13854  001F2A  2E19               	decfsz	??i2_update,f,c
 13855  001F2C  D7FB               	goto	i2u438_45
 13856  001F2E  1C1A               	comf	??i2_update+1,w,c
 13857  001F30  6E1C               	movwf	(??i2_update+3)& (0+255),c
 13858  001F32  1C1B               	comf	??i2_update+2,w,c
 13859  001F34  6E1D               	movwf	(??i2_update+4)& (0+255),c
 13860  001F36  501C               	movf	??i2_update+3,w,c
 13861  001F38  0101               	movlb	1	; () banked
 13862  001F3A  0101               	movlb	1	; () banked
 13863  001F3C  1736               	andwf	(_screen+11)& (0+255),f,b
 13864  001F3E  501D               	movf	??i2_update+4,w,c
 13865  001F40  0101               	movlb	1	; () banked
 13866  001F42  0101               	movlb	1	; () banked
 13867  001F44  1737               	andwf	(_screen+12)& (0+255),f,b
 13868                           
 13869                           ; BSR set to: 1
 13870  001F46  061E               	decf	i2update@cnt,f,c
 13871  001F48  D5C7               	goto	L24
 13872  001F4A                     i2l140:
 13873                           
 13874                           ; BSR set to: 1
 13875  001F4A  0012               	return	
 13876  001F4C                     __end_ofi2_update:
 13877                           	opt stack 0
 13878                           tosu	equ	0xFFF
 13879                           tosh	equ	0xFFE
 13880                           tosl	equ	0xFFD
 13881                           pclatu	equ	0xFFB
 13882                           pclath	equ	0xFFA
 13883                           tblptru	equ	0xFF8
 13884                           tblptrh	equ	0xFF7
 13885                           tblptrl	equ	0xFF6
 13886                           tablat	equ	0xFF5
 13887                           prodh	equ	0xFF4
 13888                           prodl	equ	0xFF3
 13889                           intcon	equ	0xFF2
 13890                           intcon2	equ	0xFF1
 13891                           indf0	equ	0xFEF
 13892                           postinc0	equ	0xFEE
 13893                           fsr0h	equ	0xFEA
 13894                           fsr0l	equ	0xFE9
 13895                           wreg	equ	0xFE8
 13896                           postinc1	equ	0xFE6
 13897                           postdec1	equ	0xFE5
 13898                           fsr1h	equ	0xFE2
 13899                           fsr1l	equ	0xFE1
 13900                           indf2	equ	0xFDF
 13901                           postinc2	equ	0xFDE
 13902                           postdec2	equ	0xFDD
 13903                           plusw2	equ	0xFDB
 13904                           fsr2h	equ	0xFDA
 13905                           fsr2l	equ	0xFD9
 13906                           status	equ	0xFD8
 13907                           
 13908 ;; *************** function i2_writeDigit *****************
 13909 ;; Defined at:
 13910 ;;		line 109 in file "disp.c"
 13911 ;; Parameters:    Size  Location     Type
 13912 ;;  writeDigit      1   19[COMRAM] unsigned char 
 13913 ;;  writeDigit      1   20[COMRAM] unsigned char 
 13914 ;; Auto vars:     Size  Location     Type
 13915 ;;  writeDigit      1   23[COMRAM] char 
 13916 ;;  writeDigit      1   22[COMRAM] unsigned char 
 13917 ;; Return value:  Size  Location     Type
 13918 ;;		None               void
 13919 ;; Registers used:
 13920 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 13921 ;; Tracked objects:
 13922 ;;		On entry : 0/0
 13923 ;;		On exit  : 0/0
 13924 ;;		Unchanged: 0/0
 13925 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13926 ;;      Params:         2       0       0       0       0       0       0       0       0
 13927 ;;      Locals:         2       0       0       0       0       0       0       0       0
 13928 ;;      Temps:          1       0       0       0       0       0       0       0       0
 13929 ;;      Totals:         5       0       0       0       0       0       0       0       0
 13930 ;;Total ram usage:        5 bytes
 13931 ;; Hardware stack levels used:    1
 13932 ;; Hardware stack levels required when called:    2
 13933 ;; This function calls:
 13934 ;;		i2_spi
 13935 ;;		i2_rotate
 13936 ;;		i2_log2
 13937 ;; This function is called by:
 13938 ;;		i2_update
 13939 ;; This function uses a non-reentrant model
 13940 ;;
 13941                           
 13942                           	psect	text49
 13943  004394                     __ptext49:
 13944                           	opt stack 0
 13945  004394                     i2_writeDigit:
 13946                           	opt stack 21
 13947                           
 13948                           ;disp.c: 110: uint8_t dig = (uint8_t) log2(digit);
 13949                           
 13950                           ; BSR set to: 1
 13951                           ;incstack = 0
 13952                           ;incstack = 0
 13953  004394  5014               	movf	i2writeDigit@digit,w,c
 13954  004396  6E0C               	movwf	?i2_log2,c
 13955  004398  6A0D               	clrf	?i2_log2+1,c
 13956  00439A  6A0E               	clrf	?i2_log2+2,c
 13957  00439C  6A0F               	clrf	?i2_log2+3,c
 13958  00439E  EC17  F022         	call	i2_log2	;wreg free
 13959  0043A2  500C               	movf	?i2_log2,w,c
 13960  0043A4  6E17               	movwf	i2writeDigit@dig,c
 13961                           
 13962                           ;disp.c: 111: screen.digits.screen[dig].bits = segs;
 13963  0043A6  5017               	movf	i2writeDigit@dig,w,c
 13964  0043A8  0D01               	mullw	1
 13965  0043AA  0101               	movlb	1	; () banked
 13966  0043AC  0E2B               	movlw	low _screen
 13967  0043AE  24F3               	addwf	prodl,w,c
 13968  0043B0  6ED9               	movwf	fsr2l,c
 13969  0043B2  0101               	movlb	1	; () banked
 13970  0043B4  0E01               	movlw	high _screen
 13971  0043B6  20F4               	addwfc	prodh,w,c
 13972  0043B8  6EDA               	movwf	fsr2h,c
 13973  0043BA  C015  FFDF         	movff	i2writeDigit@segs,indf2
 13974                           
 13975                           ; BSR set to: 1
 13976                           ;disp.c: 114: int8_t cnt;
 13977                           ;disp.c: 115: for (cnt = 7; cnt >= 0; cnt--)
 13978  0043BE  6E16               	movwf	??i2_writeDigit& (0+255),c
 13979  0043C0  0E07               	movlw	7
 13980  0043C2  6E18               	movwf	i2writeDigit@cnt,c
 13981  0043C4  5016               	movf	??i2_writeDigit& (0+255),w,c
 13982  0043C6                     
 13983                           ; BSR set to: 1
 13984  0043C6  BE18               	btfsc	i2writeDigit@cnt,7,c
 13985  0043C8  D00B               	goto	i2l170
 13986                           
 13987                           ;disp.c: 116: {
 13988                           ;disp.c: 118: spi(cnt + 1, rotate(cnt));
 13989                           
 13990                           ; BSR set to: 1
 13991                           
 13992                           ; BSR set to: 1
 13993  0043CA  2818               	incf	i2writeDigit@cnt,w,c
 13994  0043CC  6E07               	movwf	?i2_spi,c
 13995  0043CE  C018  F001         	movff	i2writeDigit@cnt,?i2_rotate
 13996  0043D2  EC75  F021         	call	i2_rotate	;wreg free
 13997  0043D6  6E08               	movwf	?i2_spi+1,c
 13998  0043D8  EC7F  F01D         	call	i2_spi	;wreg free
 13999  0043DC  0618               	decf	i2writeDigit@cnt,f,c
 14000  0043DE  D7F3               	goto	L25
 14001  0043E0                     i2l170:
 14002  0043E0  0012               	return	
 14003  0043E2                     __end_ofi2_writeDigit:
 14004                           	opt stack 0
 14005                           tosu	equ	0xFFF
 14006                           tosh	equ	0xFFE
 14007                           tosl	equ	0xFFD
 14008                           pclatu	equ	0xFFB
 14009                           pclath	equ	0xFFA
 14010                           tblptru	equ	0xFF8
 14011                           tblptrh	equ	0xFF7
 14012                           tblptrl	equ	0xFF6
 14013                           tablat	equ	0xFF5
 14014                           prodh	equ	0xFF4
 14015                           prodl	equ	0xFF3
 14016                           intcon	equ	0xFF2
 14017                           intcon2	equ	0xFF1
 14018                           indf0	equ	0xFEF
 14019                           postinc0	equ	0xFEE
 14020                           fsr0h	equ	0xFEA
 14021                           fsr0l	equ	0xFE9
 14022                           wreg	equ	0xFE8
 14023                           postinc1	equ	0xFE6
 14024                           postdec1	equ	0xFE5
 14025                           fsr1h	equ	0xFE2
 14026                           fsr1l	equ	0xFE1
 14027                           indf2	equ	0xFDF
 14028                           postinc2	equ	0xFDE
 14029                           postdec2	equ	0xFDD
 14030                           plusw2	equ	0xFDB
 14031                           fsr2h	equ	0xFDA
 14032                           fsr2l	equ	0xFD9
 14033                           status	equ	0xFD8
 14034                           
 14035 ;; *************** function i2_log2 *****************
 14036 ;; Defined at:
 14037 ;;		line 48 in file "defs.c"
 14038 ;; Parameters:    Size  Location     Type
 14039 ;;  log2            4   11[COMRAM] unsigned long 
 14040 ;; Auto vars:     Size  Location     Type
 14041 ;;  log2            4   15[COMRAM] unsigned long 
 14042 ;; Return value:  Size  Location     Type
 14043 ;;                  4   11[COMRAM] unsigned long 
 14044 ;; Registers used:
 14045 ;;		wreg, status,2, status,0
 14046 ;; Tracked objects:
 14047 ;;		On entry : 0/0
 14048 ;;		On exit  : 0/0
 14049 ;;		Unchanged: 0/0
 14050 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 14051 ;;      Params:         4       0       0       0       0       0       0       0       0
 14052 ;;      Locals:         4       0       0       0       0       0       0       0       0
 14053 ;;      Temps:          0       0       0       0       0       0       0       0       0
 14054 ;;      Totals:         8       0       0       0       0       0       0       0       0
 14055 ;;Total ram usage:        8 bytes
 14056 ;; Hardware stack levels used:    1
 14057 ;; This function calls:
 14058 ;;		Nothing
 14059 ;; This function is called by:
 14060 ;;		_writeChar
 14061 ;;		_writeString
 14062 ;;		i2_writeDigit
 14063 ;; This function uses a non-reentrant model
 14064 ;;
 14065                           
 14066                           	psect	text50
 14067  00442E                     __ptext50:
 14068                           	opt stack 0
 14069  00442E                     i2_log2:
 14070                           	opt stack 22
 14071                           
 14072                           ;defs.c: 49: uint32_t log2Val = 0;
 14073                           
 14074                           ;incstack = 0
 14075                           ;incstack = 0
 14076  00442E  0E00               	movlw	0
 14077  004430  6E10               	movwf	i2log2@log2Val,c
 14078  004432  0E00               	movlw	0
 14079  004434  6E11               	movwf	i2log2@log2Val+1,c
 14080  004436  0E00               	movlw	0
 14081  004438  6E12               	movwf	i2log2@log2Val+2,c
 14082  00443A  0E00               	movlw	0
 14083  00443C  6E13               	movwf	i2log2@log2Val+3,c
 14084                           
 14085                           ;defs.c: 50: while (num >>= 1) log2Val++;
 14086  00443E  D008               	goto	i2l523
 14087  004440                     i2l6031:
 14088  004440  0E01               	movlw	1
 14089  004442  2610               	addwf	i2log2@log2Val,f,c
 14090  004444  0E00               	movlw	0
 14091  004446  2211               	addwfc	i2log2@log2Val+1,f,c
 14092  004448  0E00               	movlw	0
 14093  00444A  2212               	addwfc	i2log2@log2Val+2,f,c
 14094  00444C  0E00               	movlw	0
 14095  00444E  2213               	addwfc	i2log2@log2Val+3,f,c
 14096  004450                     i2l523:
 14097  004450  90D8               	bcf	status,0,c
 14098  004452  320F               	rrcf	i2log2@num+3,f,c
 14099  004454  320E               	rrcf	i2log2@num+2,f,c
 14100  004456  320D               	rrcf	i2log2@num+1,f,c
 14101  004458  320C               	rrcf	i2log2@num,f,c
 14102  00445A  500F               	movf	(i2log2@num+3)& (0+255),w,c
 14103  00445C  100C               	iorwf	i2log2@num& (0+255),w,c
 14104  00445E  100D               	iorwf	(i2log2@num+1)& (0+255),w,c
 14105  004460  100E               	iorwf	(i2log2@num+2)& (0+255),w,c
 14106  004462  A4D8               	btfss	status,2,c
 14107  004464  D7ED               	goto	i2l6031
 14108                           
 14109                           ;defs.c: 51: return log2Val;
 14110  004466  C010  F00C         	movff	i2log2@log2Val,?i2_log2
 14111  00446A  C011  F00D         	movff	i2log2@log2Val+1,?i2_log2+1
 14112  00446E  C012  F00E         	movff	i2log2@log2Val+2,?i2_log2+2
 14113  004472  C013  F00F         	movff	i2log2@log2Val+3,?i2_log2+3
 14114  004476  0012               	return	
 14115  004478                     __end_ofi2_log2:
 14116                           	opt stack 0
 14117                           tosu	equ	0xFFF
 14118                           tosh	equ	0xFFE
 14119                           tosl	equ	0xFFD
 14120                           pclatu	equ	0xFFB
 14121                           pclath	equ	0xFFA
 14122                           tblptru	equ	0xFF8
 14123                           tblptrh	equ	0xFF7
 14124                           tblptrl	equ	0xFF6
 14125                           tablat	equ	0xFF5
 14126                           prodh	equ	0xFF4
 14127                           prodl	equ	0xFF3
 14128                           intcon	equ	0xFF2
 14129                           intcon2	equ	0xFF1
 14130                           indf0	equ	0xFEF
 14131                           postinc0	equ	0xFEE
 14132                           fsr0h	equ	0xFEA
 14133                           fsr0l	equ	0xFE9
 14134                           wreg	equ	0xFE8
 14135                           postinc1	equ	0xFE6
 14136                           postdec1	equ	0xFE5
 14137                           fsr1h	equ	0xFE2
 14138                           fsr1l	equ	0xFE1
 14139                           indf2	equ	0xFDF
 14140                           postinc2	equ	0xFDE
 14141                           postdec2	equ	0xFDD
 14142                           plusw2	equ	0xFDB
 14143                           fsr2h	equ	0xFDA
 14144                           fsr2l	equ	0xFD9
 14145                           status	equ	0xFD8
 14146                           
 14147 ;; *************** function i2_rotate *****************
 14148 ;; Defined at:
 14149 ;;		line 206 in file "disp.c"
 14150 ;; Parameters:    Size  Location     Type
 14151 ;;  rotate          1    0[COMRAM] unsigned char 
 14152 ;; Auto vars:     Size  Location     Type
 14153 ;;  rotate          1    5[COMRAM] char 
 14154 ;;  rotate          1    4[COMRAM] unsigned char 
 14155 ;; Return value:  Size  Location     Type
 14156 ;;                  1    wreg      unsigned char 
 14157 ;; Registers used:
 14158 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 14159 ;; Tracked objects:
 14160 ;;		On entry : 0/0
 14161 ;;		On exit  : 0/0
 14162 ;;		Unchanged: 0/0
 14163 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 14164 ;;      Params:         1       0       0       0       0       0       0       0       0
 14165 ;;      Locals:         2       0       0       0       0       0       0       0       0
 14166 ;;      Temps:          3       0       0       0       0       0       0       0       0
 14167 ;;      Totals:         6       0       0       0       0       0       0       0       0
 14168 ;;Total ram usage:        6 bytes
 14169 ;; Hardware stack levels used:    1
 14170 ;; This function calls:
 14171 ;;		Nothing
 14172 ;; This function is called by:
 14173 ;;		i2_writeDigit
 14174 ;; This function uses a non-reentrant model
 14175 ;;
 14176                           
 14177                           	psect	text51
 14178  0042EA                     __ptext51:
 14179                           	opt stack 0
 14180  0042EA                     i2_rotate:
 14181                           	opt stack 22
 14182                           
 14183                           ;disp.c: 207: uint8_t ret = 0;
 14184                           
 14185                           ;incstack = 0
 14186                           ;incstack = 0
 14187  0042EA  6E02               	movwf	??i2_rotate& (0+255),c
 14188  0042EC  0E00               	movlw	0
 14189  0042EE  6E05               	movwf	i2rotate@ret,c
 14190  0042F0  5002               	movf	??i2_rotate& (0+255),w,c
 14191                           
 14192                           ;disp.c: 208: int8_t cnt;
 14193                           ;disp.c: 209: for (cnt = 7; cnt >= 0; cnt--)
 14194  0042F2  6E02               	movwf	??i2_rotate& (0+255),c
 14195  0042F4  0E07               	movlw	7
 14196  0042F6  6E06               	movwf	i2rotate@cnt,c
 14197  0042F8  5002               	movf	??i2_rotate& (0+255),w,c
 14198  0042FA  BE06               	btfsc	i2rotate@cnt,7,c
 14199  0042FC  D022               	goto	i2l5839
 14200                           
 14201                           ;disp.c: 210: {
 14202                           ;disp.c: 211: ret |= ((screen.digits.screen[cnt].bits >> seg) & 1) << cnt;
 14203  0042FE  C006  F002         	movff	i2rotate@cnt,??i2_rotate
 14204  004302  C001  F003         	movff	i2rotate@seg,??i2_rotate+1
 14205  004306  5006               	movf	i2rotate@cnt,w,c
 14206  004308  0D01               	mullw	1
 14207  00430A  0101               	movlb	1	; () banked
 14208  00430C  0E2B               	movlw	low _screen
 14209  00430E  24F3               	addwf	prodl,w,c
 14210  004310  6ED9               	movwf	fsr2l,c
 14211  004312  0101               	movlb	1	; () banked
 14212  004314  0E01               	movlw	high _screen
 14213  004316  20F4               	addwfc	prodh,w,c
 14214  004318  6EDA               	movwf	fsr2h,c
 14215  00431A  50DF               	movf	indf2,w,c
 14216  00431C  6E04               	movwf	(??i2_rotate+2)& (0+255),c
 14217  00431E  2A03               	incf	??i2_rotate+1,f,c
 14218  004320  D002               	goto	i2u356_44
 14219  004322                     i2u356_45:
 14220  004322  90D8               	bcf	status,0,c
 14221  004324  3204               	rrcf	??i2_rotate+2,f,c
 14222  004326                     i2u356_44:
 14223  004326  2E03               	decfsz	??i2_rotate+1,f,c
 14224  004328  D7FC               	goto	i2u356_45
 14225  00432A  0E01               	movlw	1
 14226  00432C  1604               	andwf	??i2_rotate+2,f,c
 14227  00432E  2A02               	incf	??i2_rotate,f,c
 14228  004330  D002               	goto	i2u357_44
 14229  004332                     i2u357_45:
 14230  004332  90D8               	bcf	status,0,c
 14231  004334  3604               	rlcf	??i2_rotate+2,f,c
 14232  004336                     i2u357_44:
 14233  004336  2E02               	decfsz	??i2_rotate,f,c
 14234  004338  D7FC               	goto	i2u357_45
 14235  00433A  5004               	movf	??i2_rotate+2,w,c
 14236  00433C  1205               	iorwf	i2rotate@ret,f,c
 14237                           
 14238                           ; BSR set to: 1
 14239  00433E  0606               	decf	i2rotate@cnt,f,c
 14240  004340  D7DC               	goto	L26
 14241  004342                     i2l5839:
 14242                           
 14243                           ;disp.c: 212: }
 14244                           ;disp.c: 213: return ret;
 14245  004342  5005               	movf	i2rotate@ret,w,c
 14246  004344  0012               	return	
 14247  004346                     __end_ofi2_rotate:
 14248                           	opt stack 0
 14249                           tosu	equ	0xFFF
 14250                           tosh	equ	0xFFE
 14251                           tosl	equ	0xFFD
 14252                           pclatu	equ	0xFFB
 14253                           pclath	equ	0xFFA
 14254                           tblptru	equ	0xFF8
 14255                           tblptrh	equ	0xFF7
 14256                           tblptrl	equ	0xFF6
 14257                           tablat	equ	0xFF5
 14258                           prodh	equ	0xFF4
 14259                           prodl	equ	0xFF3
 14260                           intcon	equ	0xFF2
 14261                           intcon2	equ	0xFF1
 14262                           indf0	equ	0xFEF
 14263                           postinc0	equ	0xFEE
 14264                           fsr0h	equ	0xFEA
 14265                           fsr0l	equ	0xFE9
 14266                           wreg	equ	0xFE8
 14267                           postinc1	equ	0xFE6
 14268                           postdec1	equ	0xFE5
 14269                           fsr1h	equ	0xFE2
 14270                           fsr1l	equ	0xFE1
 14271                           indf2	equ	0xFDF
 14272                           postinc2	equ	0xFDE
 14273                           postdec2	equ	0xFDD
 14274                           plusw2	equ	0xFDB
 14275                           fsr2h	equ	0xFDA
 14276                           fsr2l	equ	0xFD9
 14277                           status	equ	0xFD8
 14278                           
 14279 ;; *************** function i2_spi *****************
 14280 ;; Defined at:
 14281 ;;		line 87 in file "disp.c"
 14282 ;; Parameters:    Size  Location     Type
 14283 ;;  spi             1    6[COMRAM] unsigned char 
 14284 ;;  spi             1    7[COMRAM] unsigned char 
 14285 ;; Auto vars:     Size  Location     Type
 14286 ;;  spi             2   11[COMRAM] unsigned int 
 14287 ;;  spi             1   13[COMRAM] char 
 14288 ;; Return value:  Size  Location     Type
 14289 ;;		None               void
 14290 ;; Registers used:
 14291 ;;		wreg, status,2, status,0, cstack
 14292 ;; Tracked objects:
 14293 ;;		On entry : 0/0
 14294 ;;		On exit  : 0/0
 14295 ;;		Unchanged: 0/0
 14296 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 14297 ;;      Params:         2       0       0       0       0       0       0       0       0
 14298 ;;      Locals:         3       0       0       0       0       0       0       0       0
 14299 ;;      Temps:          3       0       0       0       0       0       0       0       0
 14300 ;;      Totals:         8       0       0       0       0       0       0       0       0
 14301 ;;Total ram usage:        8 bytes
 14302 ;; Hardware stack levels used:    1
 14303 ;; Hardware stack levels required when called:    1
 14304 ;; This function calls:
 14305 ;;		i2_wait
 14306 ;; This function is called by:
 14307 ;;		i2_update
 14308 ;;		i2_writeDigit
 14309 ;; This function uses a non-reentrant model
 14310 ;;
 14311                           
 14312                           	psect	text52
 14313  003AFE                     __ptext52:
 14314                           	opt stack 0
 14315  003AFE                     i2_spi:
 14316                           	opt stack 21
 14317                           
 14318                           ;disp.c: 88: uint16_t send = (addr << 8) | data;
 14319                           
 14320                           ;incstack = 0
 14321                           ;incstack = 0
 14322  003AFE  5008               	movf	i2spi@data,w,c
 14323  003B00  C007  F009         	movff	i2spi@addr,??i2_spi
 14324  003B04  6A0A               	clrf	(??i2_spi+1)& (0+255),c
 14325  003B06  C009  F00A         	movff	??i2_spi,??i2_spi+1
 14326  003B0A  6A09               	clrf	??i2_spi,c
 14327  003B0C  1009               	iorwf	??i2_spi,w,c
 14328  003B0E  6E0C               	movwf	i2spi@send,c
 14329  003B10  500A               	movf	??i2_spi+1,w,c
 14330  003B12  6E0D               	movwf	i2spi@send+1,c
 14331                           
 14332                           ;disp.c: 89: LATA4 = 0;
 14333  003B14  9889               	bcf	3977,4,c	;volatile
 14334                           
 14335                           ;disp.c: 90: LATA1 = 0;
 14336  003B16  9289               	bcf	3977,1,c	;volatile
 14337                           
 14338                           ;disp.c: 91: LATA3 = 0;
 14339  003B18  9689               	bcf	3977,3,c	;volatile
 14340                           
 14341                           ;disp.c: 92: int8_t cnt;
 14342                           ;disp.c: 93: for (cnt = 15; cnt >= 0; cnt--)
 14343  003B1A  6E09               	movwf	??i2_spi& (0+255),c
 14344  003B1C  0E0F               	movlw	15
 14345  003B1E  6E0E               	movwf	i2spi@cnt,c
 14346  003B20  5009               	movf	??i2_spi& (0+255),w,c
 14347  003B22  BE0E               	btfsc	i2spi@cnt,7,c
 14348  003B24  D02D               	goto	i2l164
 14349                           
 14350                           ;disp.c: 94: {
 14351                           ;disp.c: 95: LATA1 = 0x1 & (send >> cnt);
 14352  003B26  C00E  F009         	movff	i2spi@cnt,??i2_spi
 14353  003B2A  C00C  F00A         	movff	i2spi@send,??i2_spi+1
 14354  003B2E  C00D  F00B         	movff	i2spi@send+1,??i2_spi+2
 14355  003B32  2A09               	incf	??i2_spi,f,c
 14356  003B34  D003               	goto	i2u379_44
 14357  003B36                     i2u379_45:
 14358  003B36  90D8               	bcf	status,0,c
 14359  003B38  320B               	rrcf	??i2_spi+2,f,c
 14360  003B3A  320A               	rrcf	??i2_spi+1,f,c
 14361  003B3C                     i2u379_44:
 14362  003B3C  2E09               	decfsz	??i2_spi,f,c
 14363  003B3E  D7FB               	goto	i2u379_45
 14364  003B40  300A               	rrcf	??i2_spi+1,w,c
 14365  003B42  A0D8               	btfss	status,0,c
 14366  003B44  D001               	bra	i2u380_45
 14367  003B46  8289               	bsf	3977,1,c	;volatile
 14368  003B48                     i2u380_45:
 14369  003B48  B0D8               	btfsc	status,0,c
 14370  003B4A  D001               	bra	i2u380_46
 14371  003B4C  9289               	bcf	3977,1,c	;volatile
 14372  003B4E                     i2u380_46:
 14373                           
 14374                           ;disp.c: 96: wait(0);
 14375  003B4E  0E00               	movlw	0
 14376  003B50  6E01               	movwf	?i2_wait,c
 14377  003B52  0E00               	movlw	0
 14378  003B54  6E02               	movwf	?i2_wait+1,c
 14379  003B56  0E00               	movlw	0
 14380  003B58  6E03               	movwf	?i2_wait+2,c
 14381  003B5A  0E00               	movlw	0
 14382  003B5C  6E04               	movwf	?i2_wait+3,c
 14383  003B5E  ECE7  F023         	call	i2_wait	;wreg free
 14384                           
 14385                           ;disp.c: 97: LATA3 = 1;
 14386  003B62  8689               	bsf	3977,3,c	;volatile
 14387                           
 14388                           ;disp.c: 98: wait(0);
 14389  003B64  0E00               	movlw	0
 14390  003B66  6E01               	movwf	?i2_wait,c
 14391  003B68  0E00               	movlw	0
 14392  003B6A  6E02               	movwf	?i2_wait+1,c
 14393  003B6C  0E00               	movlw	0
 14394  003B6E  6E03               	movwf	?i2_wait+2,c
 14395  003B70  0E00               	movlw	0
 14396  003B72  6E04               	movwf	?i2_wait+3,c
 14397  003B74  ECE7  F023         	call	i2_wait	;wreg free
 14398                           
 14399                           ;disp.c: 99: LATA3 = 0;
 14400  003B78  9689               	bcf	3977,3,c	;volatile
 14401                           
 14402                           ;disp.c: 100: LATA1 = 0;
 14403  003B7A  9289               	bcf	3977,1,c	;volatile
 14404  003B7C  060E               	decf	i2spi@cnt,f,c
 14405  003B7E  D7D1               	goto	L27
 14406  003B80                     i2l164:
 14407                           
 14408                           ;disp.c: 101: }
 14409                           ;disp.c: 102: LATA4 = 1;
 14410  003B80  8889               	bsf	3977,4,c	;volatile
 14411                           
 14412                           ;disp.c: 103: LATA3 = 0;
 14413  003B82  9689               	bcf	3977,3,c	;volatile
 14414                           
 14415                           ;disp.c: 104: LATA1 = 0;
 14416  003B84  9289               	bcf	3977,1,c	;volatile
 14417                           
 14418                           ;disp.c: 105: wait(0);
 14419  003B86  0E00               	movlw	0
 14420  003B88  6E01               	movwf	?i2_wait,c
 14421  003B8A  0E00               	movlw	0
 14422  003B8C  6E02               	movwf	?i2_wait+1,c
 14423  003B8E  0E00               	movlw	0
 14424  003B90  6E03               	movwf	?i2_wait+2,c
 14425  003B92  0E00               	movlw	0
 14426  003B94  6E04               	movwf	?i2_wait+3,c
 14427  003B96  ECE7  F023         	call	i2_wait	;wreg free
 14428  003B9A  0012               	return	
 14429  003B9C                     __end_ofi2_spi:
 14430                           	opt stack 0
 14431                           tosu	equ	0xFFF
 14432                           tosh	equ	0xFFE
 14433                           tosl	equ	0xFFD
 14434                           pclatu	equ	0xFFB
 14435                           pclath	equ	0xFFA
 14436                           tblptru	equ	0xFF8
 14437                           tblptrh	equ	0xFF7
 14438                           tblptrl	equ	0xFF6
 14439                           tablat	equ	0xFF5
 14440                           prodh	equ	0xFF4
 14441                           prodl	equ	0xFF3
 14442                           intcon	equ	0xFF2
 14443                           intcon2	equ	0xFF1
 14444                           indf0	equ	0xFEF
 14445                           postinc0	equ	0xFEE
 14446                           fsr0h	equ	0xFEA
 14447                           fsr0l	equ	0xFE9
 14448                           wreg	equ	0xFE8
 14449                           postinc1	equ	0xFE6
 14450                           postdec1	equ	0xFE5
 14451                           fsr1h	equ	0xFE2
 14452                           fsr1l	equ	0xFE1
 14453                           indf2	equ	0xFDF
 14454                           postinc2	equ	0xFDE
 14455                           postdec2	equ	0xFDD
 14456                           plusw2	equ	0xFDB
 14457                           fsr2h	equ	0xFDA
 14458                           fsr2l	equ	0xFD9
 14459                           status	equ	0xFD8
 14460                           
 14461 ;; *************** function i2_wait *****************
 14462 ;; Defined at:
 14463 ;;		line 4 in file "defs.c"
 14464 ;; Parameters:    Size  Location     Type
 14465 ;;  wait            4    0[COMRAM] unsigned long 
 14466 ;; Auto vars:     Size  Location     Type
 14467 ;;		None
 14468 ;; Return value:  Size  Location     Type
 14469 ;;		None               void
 14470 ;; Registers used:
 14471 ;;		wreg, status,2, status,0
 14472 ;; Tracked objects:
 14473 ;;		On entry : 0/0
 14474 ;;		On exit  : 0/0
 14475 ;;		Unchanged: 0/0
 14476 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 14477 ;;      Params:         4       0       0       0       0       0       0       0       0
 14478 ;;      Locals:         0       0       0       0       0       0       0       0       0
 14479 ;;      Temps:          0       0       0       0       0       0       0       0       0
 14480 ;;      Totals:         4       0       0       0       0       0       0       0       0
 14481 ;;Total ram usage:        4 bytes
 14482 ;; Hardware stack levels used:    1
 14483 ;; This function calls:
 14484 ;;		Nothing
 14485 ;; This function is called by:
 14486 ;;		i2_spi
 14487 ;; This function uses a non-reentrant model
 14488 ;;
 14489                           
 14490                           	psect	text53
 14491  0047CE                     __ptext53:
 14492                           	opt stack 0
 14493  0047CE                     i2_wait:
 14494                           	opt stack 21
 14495  0047CE                     i2l5845:
 14496  0047CE  0601               	decf	i2wait@count,f,c
 14497  0047D0  0E00               	movlw	0
 14498  0047D2  5A02               	subwfb	i2wait@count+1,f,c
 14499  0047D4  5A03               	subwfb	i2wait@count+2,f,c
 14500  0047D6  5A04               	subwfb	i2wait@count+3,f,c
 14501  0047D8  2801               	incf	i2wait@count& (0+255),w,c
 14502  0047DA  B4D8               	btfsc	status,2,c
 14503  0047DC  2802               	incf	(i2wait@count+1)& (0+255),w,c
 14504  0047DE  B4D8               	btfsc	status,2,c
 14505  0047E0  2803               	incf	(i2wait@count+2)& (0+255),w,c
 14506  0047E2  B4D8               	btfsc	status,2,c
 14507  0047E4  2804               	incf	(i2wait@count+3)& (0+255),w,c
 14508  0047E6  B4D8               	btfsc	status,2,c
 14509  0047E8  0012               	return	
 14510  0047EA  D7F1               	goto	i2l5845
 14511  0047EC                     __end_ofi2_wait:
 14512                           	opt stack 0
 14513                           tosu	equ	0xFFF
 14514                           tosh	equ	0xFFE
 14515                           tosl	equ	0xFFD
 14516                           pclatu	equ	0xFFB
 14517                           pclath	equ	0xFFA
 14518                           tblptru	equ	0xFF8
 14519                           tblptrh	equ	0xFF7
 14520                           tblptrl	equ	0xFF6
 14521                           tablat	equ	0xFF5
 14522                           prodh	equ	0xFF4
 14523                           prodl	equ	0xFF3
 14524                           intcon	equ	0xFF2
 14525                           intcon2	equ	0xFF1
 14526                           indf0	equ	0xFEF
 14527                           postinc0	equ	0xFEE
 14528                           fsr0h	equ	0xFEA
 14529                           fsr0l	equ	0xFE9
 14530                           wreg	equ	0xFE8
 14531                           postinc1	equ	0xFE6
 14532                           postdec1	equ	0xFE5
 14533                           fsr1h	equ	0xFE2
 14534                           fsr1l	equ	0xFE1
 14535                           indf2	equ	0xFDF
 14536                           postinc2	equ	0xFDE
 14537                           postdec2	equ	0xFDD
 14538                           plusw2	equ	0xFDB
 14539                           fsr2h	equ	0xFDA
 14540                           fsr2l	equ	0xFD9
 14541                           status	equ	0xFD8
 14542                           
 14543 ;; *************** function ___lwmod *****************
 14544 ;; Defined at:
 14545 ;;		line 10 in file "/usr/opt/microchip/xc8/v1.20/sources/common/lwmod.c"
 14546 ;; Parameters:    Size  Location     Type
 14547 ;;  dividend        2    0[COMRAM] unsigned int 
 14548 ;;  divisor         2    2[COMRAM] unsigned int 
 14549 ;; Auto vars:     Size  Location     Type
 14550 ;;  counter         1    6[COMRAM] unsigned char 
 14551 ;; Return value:  Size  Location     Type
 14552 ;;                  2    0[COMRAM] unsigned int 
 14553 ;; Registers used:
 14554 ;;		wreg, status,2, status,0
 14555 ;; Tracked objects:
 14556 ;;		On entry : 0/0
 14557 ;;		On exit  : 0/0
 14558 ;;		Unchanged: 0/0
 14559 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 14560 ;;      Params:         4       0       0       0       0       0       0       0       0
 14561 ;;      Locals:         2       0       0       0       0       0       0       0       0
 14562 ;;      Temps:          1       0       0       0       0       0       0       0       0
 14563 ;;      Totals:         7       0       0       0       0       0       0       0       0
 14564 ;;Total ram usage:        7 bytes
 14565 ;; Hardware stack levels used:    1
 14566 ;; This function calls:
 14567 ;;		Nothing
 14568 ;; This function is called by:
 14569 ;;		_daysOfMonth
 14570 ;;		_printRTC
 14571 ;;		_sprintf
 14572 ;; This function uses a non-reentrant model
 14573 ;;
 14574                           
 14575                           	psect	text54
 14576  004478                     __ptext54:
 14577                           	opt stack 0
 14578  004478                     ___lwmod:
 14579                           	opt stack 22
 14580                           
 14581                           ;incstack = 0
 14582                           ;incstack = 0
 14583  004478  5004               	movf	___lwmod@divisor+1,w,c
 14584  00447A  1003               	iorwf	___lwmod@divisor,w,c
 14585  00447C  B4D8               	btfsc	status,2,c
 14586  00447E  D01A               	goto	i2l1241
 14587  004480  6E05               	movwf	??___lwmod& (0+255),c
 14588  004482  0E01               	movlw	1
 14589  004484  6E07               	movwf	___lwmod@counter,c
 14590  004486  5005               	movf	??___lwmod& (0+255),w,c
 14591  004488  D004               	goto	i2l5817
 14592  00448A                     i2l5815:
 14593  00448A  90D8               	bcf	status,0,c
 14594  00448C  3603               	rlcf	___lwmod@divisor,f,c
 14595  00448E  3604               	rlcf	___lwmod@divisor+1,f,c
 14596  004490  2A07               	incf	___lwmod@counter,f,c
 14597  004492                     i2l5817:
 14598  004492  AE04               	btfss	___lwmod@divisor+1,7,c
 14599  004494  D7FA               	goto	i2l5815
 14600  004496                     i2l5819:
 14601  004496  5003               	movf	___lwmod@divisor,w,c
 14602  004498  5C01               	subwf	___lwmod@dividend,w,c
 14603  00449A  5004               	movf	___lwmod@divisor+1,w,c
 14604  00449C  5802               	subwfb	___lwmod@dividend+1,w,c
 14605  00449E  A0D8               	btfss	status,0,c
 14606  0044A0  D004               	goto	i2l5823
 14607  0044A2  5003               	movf	___lwmod@divisor,w,c
 14608  0044A4  5E01               	subwf	___lwmod@dividend,f,c
 14609  0044A6  5004               	movf	___lwmod@divisor+1,w,c
 14610  0044A8  5A02               	subwfb	___lwmod@dividend+1,f,c
 14611  0044AA                     i2l5823:
 14612  0044AA  90D8               	bcf	status,0,c
 14613  0044AC  3204               	rrcf	___lwmod@divisor+1,f,c
 14614  0044AE  3203               	rrcf	___lwmod@divisor,f,c
 14615  0044B0  2E07               	decfsz	___lwmod@counter,f,c
 14616  0044B2  D7F1               	goto	i2l5819
 14617  0044B4                     i2l1241:
 14618  0044B4  C001  F001         	movff	___lwmod@dividend,?___lwmod
 14619  0044B8  C002  F002         	movff	___lwmod@dividend+1,?___lwmod+1
 14620  0044BC  0012               	return	
 14621  0044BE                     __end_of___lwmod:
 14622                           	opt stack 0
 14623                           tosu	equ	0xFFF
 14624                           tosh	equ	0xFFE
 14625                           tosl	equ	0xFFD
 14626                           pclatu	equ	0xFFB
 14627                           pclath	equ	0xFFA
 14628                           tblptru	equ	0xFF8
 14629                           tblptrh	equ	0xFF7
 14630                           tblptrl	equ	0xFF6
 14631                           tablat	equ	0xFF5
 14632                           prodh	equ	0xFF4
 14633                           prodl	equ	0xFF3
 14634                           intcon	equ	0xFF2
 14635                           intcon2	equ	0xFF1
 14636                           indf0	equ	0xFEF
 14637                           postinc0	equ	0xFEE
 14638                           fsr0h	equ	0xFEA
 14639                           fsr0l	equ	0xFE9
 14640                           wreg	equ	0xFE8
 14641                           postinc1	equ	0xFE6
 14642                           postdec1	equ	0xFE5
 14643                           fsr1h	equ	0xFE2
 14644                           fsr1l	equ	0xFE1
 14645                           indf2	equ	0xFDF
 14646                           postinc2	equ	0xFDE
 14647                           postdec2	equ	0xFDD
 14648                           plusw2	equ	0xFDB
 14649                           fsr2h	equ	0xFDA
 14650                           fsr2l	equ	0xFD9
 14651                           status	equ	0xFD8
 14652                           
 14653 ;; *************** function ___llmod *****************
 14654 ;; Defined at:
 14655 ;;		line 10 in file "/usr/opt/microchip/xc8/v1.20/sources/common/llmod.c"
 14656 ;; Parameters:    Size  Location     Type
 14657 ;;  dividend        4   19[COMRAM] unsigned long 
 14658 ;;  divisor         4   23[COMRAM] unsigned long 
 14659 ;; Auto vars:     Size  Location     Type
 14660 ;;  counter         1   29[COMRAM] unsigned char 
 14661 ;; Return value:  Size  Location     Type
 14662 ;;                  4   19[COMRAM] unsigned long 
 14663 ;; Registers used:
 14664 ;;		wreg, status,2, status,0
 14665 ;; Tracked objects:
 14666 ;;		On entry : 0/0
 14667 ;;		On exit  : 0/0
 14668 ;;		Unchanged: 0/0
 14669 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 14670 ;;      Params:         8       0       0       0       0       0       0       0       0
 14671 ;;      Locals:         2       0       0       0       0       0       0       0       0
 14672 ;;      Temps:          1       0       0       0       0       0       0       0       0
 14673 ;;      Totals:        11       0       0       0       0       0       0       0       0
 14674 ;;Total ram usage:       11 bytes
 14675 ;; Hardware stack levels used:    1
 14676 ;; This function calls:
 14677 ;;		Nothing
 14678 ;; This function is called by:
 14679 ;;		_dayOfWeek
 14680 ;;		_sprintf
 14681 ;; This function uses a non-reentrant model
 14682 ;;
 14683                           
 14684                           	psect	text55
 14685  0041B8                     __ptext55:
 14686                           	opt stack 0
 14687  0041B8                     ___llmod:
 14688                           	opt stack 22
 14689                           
 14690                           ;incstack = 0
 14691                           ;incstack = 0
 14692  0041B8  501B               	movf	___llmod@divisor+3,w,c
 14693  0041BA  1018               	iorwf	___llmod@divisor,w,c
 14694  0041BC  1019               	iorwf	___llmod@divisor+1,w,c
 14695  0041BE  101A               	iorwf	___llmod@divisor+2,w,c
 14696  0041C0  B4D8               	btfsc	status,2,c
 14697  0041C2  D026               	goto	i2l1172
 14698  0041C4  6E1C               	movwf	??___llmod& (0+255),c
 14699  0041C6  0E01               	movlw	1
 14700  0041C8  6E1E               	movwf	___llmod@counter,c
 14701  0041CA  501C               	movf	??___llmod& (0+255),w,c
 14702  0041CC  D006               	goto	i2l5973
 14703  0041CE                     i2l5971:
 14704  0041CE  90D8               	bcf	status,0,c
 14705  0041D0  3618               	rlcf	___llmod@divisor,f,c
 14706  0041D2  3619               	rlcf	___llmod@divisor+1,f,c
 14707  0041D4  361A               	rlcf	___llmod@divisor+2,f,c
 14708  0041D6  361B               	rlcf	___llmod@divisor+3,f,c
 14709  0041D8  2A1E               	incf	___llmod@counter,f,c
 14710  0041DA                     i2l5973:
 14711  0041DA  AE1B               	btfss	___llmod@divisor+3,7,c
 14712  0041DC  D7F8               	goto	i2l5971
 14713  0041DE                     i2l5975:
 14714  0041DE  5018               	movf	___llmod@divisor,w,c
 14715  0041E0  5C14               	subwf	___llmod@dividend,w,c
 14716  0041E2  5019               	movf	___llmod@divisor+1,w,c
 14717  0041E4  5815               	subwfb	___llmod@dividend+1,w,c
 14718  0041E6  501A               	movf	___llmod@divisor+2,w,c
 14719  0041E8  5816               	subwfb	___llmod@dividend+2,w,c
 14720  0041EA  501B               	movf	___llmod@divisor+3,w,c
 14721  0041EC  5817               	subwfb	___llmod@dividend+3,w,c
 14722  0041EE  A0D8               	btfss	status,0,c
 14723  0041F0  D008               	goto	i2l5979
 14724  0041F2  5018               	movf	___llmod@divisor,w,c
 14725  0041F4  5E14               	subwf	___llmod@dividend,f,c
 14726  0041F6  5019               	movf	___llmod@divisor+1,w,c
 14727  0041F8  5A15               	subwfb	___llmod@dividend+1,f,c
 14728  0041FA  501A               	movf	___llmod@divisor+2,w,c
 14729  0041FC  5A16               	subwfb	___llmod@dividend+2,f,c
 14730  0041FE  501B               	movf	___llmod@divisor+3,w,c
 14731  004200  5A17               	subwfb	___llmod@dividend+3,f,c
 14732  004202                     i2l5979:
 14733  004202  90D8               	bcf	status,0,c
 14734  004204  321B               	rrcf	___llmod@divisor+3,f,c
 14735  004206  321A               	rrcf	___llmod@divisor+2,f,c
 14736  004208  3219               	rrcf	___llmod@divisor+1,f,c
 14737  00420A  3218               	rrcf	___llmod@divisor,f,c
 14738  00420C  2E1E               	decfsz	___llmod@counter,f,c
 14739  00420E  D7E7               	goto	i2l5975
 14740  004210                     i2l1172:
 14741  004210  C014  F014         	movff	___llmod@dividend,?___llmod
 14742  004214  C015  F015         	movff	___llmod@dividend+1,?___llmod+1
 14743  004218  C016  F016         	movff	___llmod@dividend+2,?___llmod+2
 14744  00421C  C017  F017         	movff	___llmod@dividend+3,?___llmod+3
 14745  004220  0012               	return	
 14746  004222                     __end_of___llmod:
 14747                           	opt stack 0
 14748                           tosu	equ	0xFFF
 14749                           tosh	equ	0xFFE
 14750                           tosl	equ	0xFFD
 14751                           pclatu	equ	0xFFB
 14752                           pclath	equ	0xFFA
 14753                           tblptru	equ	0xFF8
 14754                           tblptrh	equ	0xFF7
 14755                           tblptrl	equ	0xFF6
 14756                           tablat	equ	0xFF5
 14757                           prodh	equ	0xFF4
 14758                           prodl	equ	0xFF3
 14759                           intcon	equ	0xFF2
 14760                           intcon2	equ	0xFF1
 14761                           indf0	equ	0xFEF
 14762                           postinc0	equ	0xFEE
 14763                           fsr0h	equ	0xFEA
 14764                           fsr0l	equ	0xFE9
 14765                           wreg	equ	0xFE8
 14766                           postinc1	equ	0xFE6
 14767                           postdec1	equ	0xFE5
 14768                           fsr1h	equ	0xFE2
 14769                           fsr1l	equ	0xFE1
 14770                           indf2	equ	0xFDF
 14771                           postinc2	equ	0xFDE
 14772                           postdec2	equ	0xFDD
 14773                           plusw2	equ	0xFDB
 14774                           fsr2h	equ	0xFDA
 14775                           fsr2l	equ	0xFD9
 14776                           status	equ	0xFD8
 14777                           
 14778 ;; *************** function ___awmod *****************
 14779 ;; Defined at:
 14780 ;;		line 10 in file "/usr/opt/microchip/xc8/v1.20/sources/common/awmod.c"
 14781 ;; Parameters:    Size  Location     Type
 14782 ;;  dividend        2    0[COMRAM] int 
 14783 ;;  divisor         2    2[COMRAM] int 
 14784 ;; Auto vars:     Size  Location     Type
 14785 ;;  sign            1    8[COMRAM] unsigned char 
 14786 ;;  counter         1    7[COMRAM] unsigned char 
 14787 ;; Return value:  Size  Location     Type
 14788 ;;                  2    0[COMRAM] int 
 14789 ;; Registers used:
 14790 ;;		wreg, status,2, status,0
 14791 ;; Tracked objects:
 14792 ;;		On entry : 0/0
 14793 ;;		On exit  : 0/0
 14794 ;;		Unchanged: 0/0
 14795 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 14796 ;;      Params:         4       0       0       0       0       0       0       0       0
 14797 ;;      Locals:         4       0       0       0       0       0       0       0       0
 14798 ;;      Temps:          1       0       0       0       0       0       0       0       0
 14799 ;;      Totals:         9       0       0       0       0       0       0       0       0
 14800 ;;Total ram usage:        9 bytes
 14801 ;; Hardware stack levels used:    1
 14802 ;; This function calls:
 14803 ;;		Nothing
 14804 ;; This function is called by:
 14805 ;;		_dayOfWeek
 14806 ;;		_fround
 14807 ;;		_scale
 14808 ;;		_advState
 14809 ;; This function uses a non-reentrant model
 14810 ;;
 14811                           
 14812                           	psect	text56
 14813  003F72                     __ptext56:
 14814                           	opt stack 0
 14815  003F72                     ___awmod:
 14816                           	opt stack 21
 14817                           
 14818                           ;incstack = 0
 14819                           ;incstack = 0
 14820  003F72  6E05               	movwf	??___awmod& (0+255),c
 14821  003F74  0E00               	movlw	0
 14822  003F76  6E09               	movwf	___awmod@sign,c
 14823  003F78  5005               	movf	??___awmod& (0+255),w,c
 14824  003F7A  AE02               	btfss	___awmod@dividend+1,7,c
 14825  003F7C  D008               	goto	i2l5739
 14826  003F7E  6C01               	negf	___awmod@dividend,c
 14827  003F80  1E02               	comf	___awmod@dividend+1,f,c
 14828  003F82  B0D8               	btfsc	status,0,c
 14829  003F84  2A02               	incf	___awmod@dividend+1,f,c
 14830  003F86  6E05               	movwf	??___awmod& (0+255),c
 14831  003F88  0E01               	movlw	1
 14832  003F8A  6E09               	movwf	___awmod@sign,c
 14833  003F8C  5005               	movf	??___awmod& (0+255),w,c
 14834  003F8E                     i2l5739:
 14835  003F8E  AE04               	btfss	___awmod@divisor+1,7,c
 14836  003F90  D004               	goto	i2l5743
 14837  003F92  6C03               	negf	___awmod@divisor,c
 14838  003F94  1E04               	comf	___awmod@divisor+1,f,c
 14839  003F96  B0D8               	btfsc	status,0,c
 14840  003F98  2A04               	incf	___awmod@divisor+1,f,c
 14841  003F9A                     i2l5743:
 14842  003F9A  5004               	movf	___awmod@divisor+1,w,c
 14843  003F9C  1003               	iorwf	___awmod@divisor,w,c
 14844  003F9E  B4D8               	btfsc	status,2,c
 14845  003FA0  D01A               	goto	i2l5759
 14846  003FA2  6E05               	movwf	??___awmod& (0+255),c
 14847  003FA4  0E01               	movlw	1
 14848  003FA6  6E08               	movwf	___awmod@counter,c
 14849  003FA8  5005               	movf	??___awmod& (0+255),w,c
 14850  003FAA  D004               	goto	i2l5749
 14851  003FAC                     i2l5747:
 14852  003FAC  90D8               	bcf	status,0,c
 14853  003FAE  3603               	rlcf	___awmod@divisor,f,c
 14854  003FB0  3604               	rlcf	___awmod@divisor+1,f,c
 14855  003FB2  2A08               	incf	___awmod@counter,f,c
 14856  003FB4                     i2l5749:
 14857  003FB4  AE04               	btfss	___awmod@divisor+1,7,c
 14858  003FB6  D7FA               	goto	i2l5747
 14859  003FB8                     i2l5751:
 14860  003FB8  5003               	movf	___awmod@divisor,w,c
 14861  003FBA  5C01               	subwf	___awmod@dividend,w,c
 14862  003FBC  5004               	movf	___awmod@divisor+1,w,c
 14863  003FBE  5802               	subwfb	___awmod@dividend+1,w,c
 14864  003FC0  A0D8               	btfss	status,0,c
 14865  003FC2  D004               	goto	i2l5755
 14866  003FC4  5003               	movf	___awmod@divisor,w,c
 14867  003FC6  5E01               	subwf	___awmod@dividend,f,c
 14868  003FC8  5004               	movf	___awmod@divisor+1,w,c
 14869  003FCA  5A02               	subwfb	___awmod@dividend+1,f,c
 14870  003FCC                     i2l5755:
 14871  003FCC  90D8               	bcf	status,0,c
 14872  003FCE  3204               	rrcf	___awmod@divisor+1,f,c
 14873  003FD0  3203               	rrcf	___awmod@divisor,f,c
 14874  003FD2  2E08               	decfsz	___awmod@counter,f,c
 14875  003FD4  D7F1               	goto	i2l5751
 14876  003FD6                     i2l5759:
 14877  003FD6  5009               	movf	___awmod@sign,w,c
 14878  003FD8  B4D8               	btfsc	status,2,c
 14879  003FDA  D004               	goto	i2l5763
 14880  003FDC  6C01               	negf	___awmod@dividend,c
 14881  003FDE  1E02               	comf	___awmod@dividend+1,f,c
 14882  003FE0  B0D8               	btfsc	status,0,c
 14883  003FE2  2A02               	incf	___awmod@dividend+1,f,c
 14884  003FE4                     i2l5763:
 14885  003FE4  C001  F001         	movff	___awmod@dividend,?___awmod
 14886  003FE8  C002  F002         	movff	___awmod@dividend+1,?___awmod+1
 14887  003FEC  0012               	return	
 14888  003FEE                     __end_of___awmod:
 14889                           	opt stack 0
 14890                           tosu	equ	0xFFF
 14891                           tosh	equ	0xFFE
 14892                           tosl	equ	0xFFD
 14893                           pclatu	equ	0xFFB
 14894                           pclath	equ	0xFFA
 14895                           tblptru	equ	0xFF8
 14896                           tblptrh	equ	0xFF7
 14897                           tblptrl	equ	0xFF6
 14898                           tablat	equ	0xFF5
 14899                           prodh	equ	0xFF4
 14900                           prodl	equ	0xFF3
 14901                           intcon	equ	0xFF2
 14902                           intcon2	equ	0xFF1
 14903                           indf0	equ	0xFEF
 14904                           postinc0	equ	0xFEE
 14905                           fsr0h	equ	0xFEA
 14906                           fsr0l	equ	0xFE9
 14907                           wreg	equ	0xFE8
 14908                           postinc1	equ	0xFE6
 14909                           postdec1	equ	0xFE5
 14910                           fsr1h	equ	0xFE2
 14911                           fsr1l	equ	0xFE1
 14912                           indf2	equ	0xFDF
 14913                           postinc2	equ	0xFDE
 14914                           postdec2	equ	0xFDD
 14915                           plusw2	equ	0xFDB
 14916                           fsr2h	equ	0xFDA
 14917                           fsr2l	equ	0xFD9
 14918                           status	equ	0xFD8
 14919                           
 14920 ;; *************** function ___awdiv *****************
 14921 ;; Defined at:
 14922 ;;		line 10 in file "/usr/opt/microchip/xc8/v1.20/sources/common/awdiv.c"
 14923 ;; Parameters:    Size  Location     Type
 14924 ;;  dividend        2    9[COMRAM] int 
 14925 ;;  divisor         2   11[COMRAM] int 
 14926 ;; Auto vars:     Size  Location     Type
 14927 ;;  quotient        2   20[COMRAM] int 
 14928 ;;  sign            1   19[COMRAM] unsigned char 
 14929 ;;  counter         1   18[COMRAM] unsigned char 
 14930 ;; Return value:  Size  Location     Type
 14931 ;;                  2    9[COMRAM] int 
 14932 ;; Registers used:
 14933 ;;		wreg, status,2, status,0
 14934 ;; Tracked objects:
 14935 ;;		On entry : 0/0
 14936 ;;		On exit  : 0/0
 14937 ;;		Unchanged: 0/0
 14938 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 14939 ;;      Params:         4       0       0       0       0       0       0       0       0
 14940 ;;      Locals:         8       0       0       0       0       0       0       0       0
 14941 ;;      Temps:          1       0       0       0       0       0       0       0       0
 14942 ;;      Totals:        13       0       0       0       0       0       0       0       0
 14943 ;;Total ram usage:       13 bytes
 14944 ;; Hardware stack levels used:    1
 14945 ;; This function calls:
 14946 ;;		Nothing
 14947 ;; This function is called by:
 14948 ;;		_dayOfWeek
 14949 ;;		_fround
 14950 ;;		_scale
 14951 ;;		_sprintf
 14952 ;; This function uses a non-reentrant model
 14953 ;;
 14954                           
 14955                           	psect	text57
 14956  003D58                     __ptext57:
 14957                           	opt stack 0
 14958  003D58                     ___awdiv:
 14959                           	opt stack 22
 14960                           
 14961                           ;incstack = 0
 14962                           ;incstack = 0
 14963  003D58  6E0E               	movwf	??___awdiv& (0+255),c
 14964  003D5A  0E00               	movlw	0
 14965  003D5C  6E14               	movwf	___awdiv@sign,c
 14966  003D5E  500E               	movf	??___awdiv& (0+255),w,c
 14967  003D60  AE0D               	btfss	___awdiv@divisor+1,7,c
 14968  003D62  D008               	goto	i2l5931
 14969  003D64  6C0C               	negf	___awdiv@divisor,c
 14970  003D66  1E0D               	comf	___awdiv@divisor+1,f,c
 14971  003D68  B0D8               	btfsc	status,0,c
 14972  003D6A  2A0D               	incf	___awdiv@divisor+1,f,c
 14973  003D6C  6E0E               	movwf	??___awdiv& (0+255),c
 14974  003D6E  0E01               	movlw	1
 14975  003D70  6E14               	movwf	___awdiv@sign,c
 14976  003D72  500E               	movf	??___awdiv& (0+255),w,c
 14977  003D74                     i2l5931:
 14978  003D74  AE0B               	btfss	___awdiv@dividend+1,7,c
 14979  003D76  D006               	goto	i2l5937
 14980  003D78  6C0A               	negf	___awdiv@dividend,c
 14981  003D7A  1E0B               	comf	___awdiv@dividend+1,f,c
 14982  003D7C  B0D8               	btfsc	status,0,c
 14983  003D7E  2A0B               	incf	___awdiv@dividend+1,f,c
 14984  003D80  0E01               	movlw	1
 14985  003D82  1A14               	xorwf	___awdiv@sign,f,c
 14986  003D84                     i2l5937:
 14987  003D84  0E00               	movlw	0
 14988  003D86  6E16               	movwf	___awdiv@quotient+1,c
 14989  003D88  0E00               	movlw	0
 14990  003D8A  6E15               	movwf	___awdiv@quotient,c
 14991  003D8C  500D               	movf	___awdiv@divisor+1,w,c
 14992  003D8E  100C               	iorwf	___awdiv@divisor,w,c
 14993  003D90  B4D8               	btfsc	status,2,c
 14994  003D92  D01E               	goto	i2l5959
 14995  003D94  6E0E               	movwf	??___awdiv& (0+255),c
 14996  003D96  0E01               	movlw	1
 14997  003D98  6E13               	movwf	___awdiv@counter,c
 14998  003D9A  500E               	movf	??___awdiv& (0+255),w,c
 14999  003D9C  D004               	goto	i2l5945
 15000  003D9E                     i2l5943:
 15001  003D9E  90D8               	bcf	status,0,c
 15002  003DA0  360C               	rlcf	___awdiv@divisor,f,c
 15003  003DA2  360D               	rlcf	___awdiv@divisor+1,f,c
 15004  003DA4  2A13               	incf	___awdiv@counter,f,c
 15005  003DA6                     i2l5945:
 15006  003DA6  AE0D               	btfss	___awdiv@divisor+1,7,c
 15007  003DA8  D7FA               	goto	i2l5943
 15008  003DAA                     i2l5947:
 15009  003DAA  90D8               	bcf	status,0,c
 15010  003DAC  3615               	rlcf	___awdiv@quotient,f,c
 15011  003DAE  3616               	rlcf	___awdiv@quotient+1,f,c
 15012  003DB0  500C               	movf	___awdiv@divisor,w,c
 15013  003DB2  5C0A               	subwf	___awdiv@dividend,w,c
 15014  003DB4  500D               	movf	___awdiv@divisor+1,w,c
 15015  003DB6  580B               	subwfb	___awdiv@dividend+1,w,c
 15016  003DB8  A0D8               	btfss	status,0,c
 15017  003DBA  D005               	goto	i2l5955
 15018  003DBC  500C               	movf	___awdiv@divisor,w,c
 15019  003DBE  5E0A               	subwf	___awdiv@dividend,f,c
 15020  003DC0  500D               	movf	___awdiv@divisor+1,w,c
 15021  003DC2  5A0B               	subwfb	___awdiv@dividend+1,f,c
 15022  003DC4  8015               	bsf	___awdiv@quotient,0,c
 15023  003DC6                     i2l5955:
 15024  003DC6  90D8               	bcf	status,0,c
 15025  003DC8  320D               	rrcf	___awdiv@divisor+1,f,c
 15026  003DCA  320C               	rrcf	___awdiv@divisor,f,c
 15027  003DCC  2E13               	decfsz	___awdiv@counter,f,c
 15028  003DCE  D7ED               	goto	i2l5947
 15029  003DD0                     i2l5959:
 15030  003DD0  5014               	movf	___awdiv@sign,w,c
 15031  003DD2  B4D8               	btfsc	status,2,c
 15032  003DD4  D004               	goto	i2l5963
 15033  003DD6  6C15               	negf	___awdiv@quotient,c
 15034  003DD8  1E16               	comf	___awdiv@quotient+1,f,c
 15035  003DDA  B0D8               	btfsc	status,0,c
 15036  003DDC  2A16               	incf	___awdiv@quotient+1,f,c
 15037  003DDE                     i2l5963:
 15038  003DDE  C015  F00A         	movff	___awdiv@quotient,?___awdiv
 15039  003DE2  C016  F00B         	movff	___awdiv@quotient+1,?___awdiv+1
 15040  003DE6  0012               	return	
 15041  003DE8                     __end_of___awdiv:
 15042                           	opt stack 0
 15043                           tosu	equ	0xFFF
 15044                           tosh	equ	0xFFE
 15045                           tosl	equ	0xFFD
 15046                           pclatu	equ	0xFFB
 15047                           pclath	equ	0xFFA
 15048                           tblptru	equ	0xFF8
 15049                           tblptrh	equ	0xFF7
 15050                           tblptrl	equ	0xFF6
 15051                           tablat	equ	0xFF5
 15052                           prodh	equ	0xFF4
 15053                           prodl	equ	0xFF3
 15054                           intcon	equ	0xFF2
 15055                           intcon2	equ	0xFF1
 15056                           indf0	equ	0xFEF
 15057                           postinc0	equ	0xFEE
 15058                           fsr0h	equ	0xFEA
 15059                           fsr0l	equ	0xFE9
 15060                           wreg	equ	0xFE8
 15061                           postinc1	equ	0xFE6
 15062                           postdec1	equ	0xFE5
 15063                           fsr1h	equ	0xFE2
 15064                           fsr1l	equ	0xFE1
 15065                           indf2	equ	0xFDF
 15066                           postinc2	equ	0xFDE
 15067                           postdec2	equ	0xFDD
 15068                           plusw2	equ	0xFDB
 15069                           fsr2h	equ	0xFDA
 15070                           fsr2l	equ	0xFD9
 15071                           status	equ	0xFD8
 15072                           
 15073 ;; *************** function _dayOfWeek *****************
 15074 ;; Defined at:
 15075 ;;		line 127 in file "RTC.c"
 15076 ;; Parameters:    Size  Location     Type
 15077 ;;  year            1   30[COMRAM] unsigned char 
 15078 ;;  month           1   31[COMRAM] unsigned char 
 15079 ;;  day             1   32[COMRAM] unsigned char 
 15080 ;; Auto vars:     Size  Location     Type
 15081 ;;  tmp             4   41[COMRAM] unsigned long 
 15082 ;; Return value:  Size  Location     Type
 15083 ;;                  1    wreg      unsigned char 
 15084 ;; Registers used:
 15085 ;;		wreg, status,2, status,0, prodl, prodh, cstack
 15086 ;; Tracked objects:
 15087 ;;		On entry : 0/0
 15088 ;;		On exit  : 0/0
 15089 ;;		Unchanged: 0/0
 15090 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 15091 ;;      Params:         3       0       0       0       0       0       0       0       0
 15092 ;;      Locals:         8       0       0       0       0       0       0       0       0
 15093 ;;      Temps:          4       0       0       0       0       0       0       0       0
 15094 ;;      Totals:        15       0       0       0       0       0       0       0       0
 15095 ;;Total ram usage:       15 bytes
 15096 ;; Hardware stack levels used:    1
 15097 ;; Hardware stack levels required when called:    1
 15098 ;; This function calls:
 15099 ;;		___awdiv
 15100 ;;		___awmod
 15101 ;;		___llmod
 15102 ;;		___wmul
 15103 ;; This function is called by:
 15104 ;;		_checkDST
 15105 ;; This function uses a non-reentrant model
 15106 ;;
 15107                           
 15108                           	psect	text58
 15109  002A0E                     __ptext58:
 15110                           	opt stack 0
 15111  002A0E                     _dayOfWeek:
 15112                           	opt stack 22
 15113                           
 15114                           ;RTC.c: 129: uint32_t tmp = (year % 200) * 365;
 15115                           
 15116                           ;incstack = 0
 15117                           ;incstack = 0
 15118  002A0E  0E00               	movlw	0
 15119  002A10  6E04               	movwf	?___awmod+3,c
 15120  002A12  0EC8               	movlw	200
 15121  002A14  6E03               	movwf	?___awmod+2,c
 15122  002A16  C01F  F001         	movff	dayOfWeek@year,?___awmod
 15123  002A1A  6A02               	clrf	?___awmod+1,c
 15124  002A1C  ECB9  F01F         	call	___awmod	;wreg free
 15125  002A20  C001  F017         	movff	?___awmod,?___wmul
 15126  002A24  C002  F018         	movff	?___awmod+1,?___wmul+1
 15127  002A28  0E01               	movlw	1
 15128  002A2A  6E1A               	movwf	?___wmul+3,c
 15129  002A2C  0E6D               	movlw	109
 15130  002A2E  6E19               	movwf	?___wmul+2,c
 15131  002A30  EC14  F023         	call	___wmul	;wreg free
 15132  002A34  C017  F02A         	movff	?___wmul,dayOfWeek@tmp
 15133  002A38  C018  F02B         	movff	?___wmul+1,dayOfWeek@tmp+1
 15134  002A3C  0E00               	movlw	0
 15135  002A3E  BE2B               	btfsc	dayOfWeek@tmp+1,7,c
 15136  002A40  0EFF               	movlw	-1
 15137  002A42  6E2C               	movwf	dayOfWeek@tmp+2,c
 15138  002A44  6E2D               	movwf	dayOfWeek@tmp+3,c
 15139                           
 15140                           ;RTC.c: 130: tmp += (((year % 200) + 3) / 4);
 15141  002A46  0E00               	movlw	0
 15142  002A48  6E04               	movwf	?___awmod+3,c
 15143  002A4A  0EC8               	movlw	200
 15144  002A4C  6E03               	movwf	?___awmod+2,c
 15145  002A4E  C01F  F001         	movff	dayOfWeek@year,?___awmod
 15146  002A52  6A02               	clrf	?___awmod+1,c
 15147  002A54  ECB9  F01F         	call	___awmod	;wreg free
 15148  002A58  0E03               	movlw	3
 15149  002A5A  2401               	addwf	?___awmod,w,c
 15150  002A5C  6E0A               	movwf	?___awdiv,c
 15151  002A5E  0E00               	movlw	0
 15152  002A60  2002               	addwfc	?___awmod+1,w,c
 15153  002A62  6E0B               	movwf	?___awdiv+1,c
 15154  002A64  0E00               	movlw	0
 15155  002A66  6E0D               	movwf	?___awdiv+3,c
 15156  002A68  0E04               	movlw	4
 15157  002A6A  6E0C               	movwf	?___awdiv+2,c
 15158  002A6C  ECAC  F01E         	call	___awdiv	;wreg free
 15159  002A70  C00A  F022         	movff	?___awdiv,??_dayOfWeek
 15160  002A74  C00B  F023         	movff	?___awdiv+1,??_dayOfWeek+1
 15161  002A78  0E00               	movlw	0
 15162  002A7A  BE23               	btfsc	(??_dayOfWeek+1)& (0+255),7,c
 15163  002A7C  0EFF               	movlw	255
 15164  002A7E  6E24               	movwf	(??_dayOfWeek+2)& (0+255),c
 15165  002A80  6E25               	movwf	(??_dayOfWeek+3)& (0+255),c
 15166  002A82  5022               	movf	??_dayOfWeek,w,c
 15167  002A84  262A               	addwf	dayOfWeek@tmp,f,c
 15168  002A86  5023               	movf	??_dayOfWeek+1,w,c
 15169  002A88  222B               	addwfc	dayOfWeek@tmp+1,f,c
 15170  002A8A  5024               	movf	??_dayOfWeek+2,w,c
 15171  002A8C  222C               	addwfc	dayOfWeek@tmp+2,f,c
 15172  002A8E  5025               	movf	??_dayOfWeek+3,w,c
 15173  002A90  222D               	addwfc	dayOfWeek@tmp+3,f,c
 15174                           
 15175                           ;RTC.c: 132: switch (month)
 15176  002A92  D065               	goto	i2l6043
 15177  002A94                     i2l6037:
 15178                           
 15179                           ;RTC.c: 135: tmp += 30;
 15180  002A94  0E1E               	movlw	30
 15181  002A96  262A               	addwf	dayOfWeek@tmp,f,c
 15182  002A98  0E00               	movlw	0
 15183  002A9A  222B               	addwfc	dayOfWeek@tmp+1,f,c
 15184  002A9C  0E00               	movlw	0
 15185  002A9E  222C               	addwfc	dayOfWeek@tmp+2,f,c
 15186  002AA0  0E00               	movlw	0
 15187  002AA2  222D               	addwfc	dayOfWeek@tmp+3,f,c
 15188  002AA4                     i2l299:
 15189                           
 15190                           ;RTC.c: 138: tmp += 31;
 15191  002AA4  0E1F               	movlw	31
 15192  002AA6  262A               	addwf	dayOfWeek@tmp,f,c
 15193  002AA8  0E00               	movlw	0
 15194  002AAA  222B               	addwfc	dayOfWeek@tmp+1,f,c
 15195  002AAC  0E00               	movlw	0
 15196  002AAE  222C               	addwfc	dayOfWeek@tmp+2,f,c
 15197  002AB0  0E00               	movlw	0
 15198  002AB2  222D               	addwfc	dayOfWeek@tmp+3,f,c
 15199  002AB4                     i2l300:
 15200                           
 15201                           ;RTC.c: 141: tmp += 30;
 15202  002AB4  0E1E               	movlw	30
 15203  002AB6  262A               	addwf	dayOfWeek@tmp,f,c
 15204  002AB8  0E00               	movlw	0
 15205  002ABA  222B               	addwfc	dayOfWeek@tmp+1,f,c
 15206  002ABC  0E00               	movlw	0
 15207  002ABE  222C               	addwfc	dayOfWeek@tmp+2,f,c
 15208  002AC0  0E00               	movlw	0
 15209  002AC2  222D               	addwfc	dayOfWeek@tmp+3,f,c
 15210  002AC4                     i2l301:
 15211                           
 15212                           ;RTC.c: 144: tmp += 31;
 15213  002AC4  0E1F               	movlw	31
 15214  002AC6  262A               	addwf	dayOfWeek@tmp,f,c
 15215  002AC8  0E00               	movlw	0
 15216  002ACA  222B               	addwfc	dayOfWeek@tmp+1,f,c
 15217  002ACC  0E00               	movlw	0
 15218  002ACE  222C               	addwfc	dayOfWeek@tmp+2,f,c
 15219  002AD0  0E00               	movlw	0
 15220  002AD2  222D               	addwfc	dayOfWeek@tmp+3,f,c
 15221  002AD4                     i2l302:
 15222                           
 15223                           ;RTC.c: 147: tmp += 31;
 15224  002AD4  0E1F               	movlw	31
 15225  002AD6  262A               	addwf	dayOfWeek@tmp,f,c
 15226  002AD8  0E00               	movlw	0
 15227  002ADA  222B               	addwfc	dayOfWeek@tmp+1,f,c
 15228  002ADC  0E00               	movlw	0
 15229  002ADE  222C               	addwfc	dayOfWeek@tmp+2,f,c
 15230  002AE0  0E00               	movlw	0
 15231  002AE2  222D               	addwfc	dayOfWeek@tmp+3,f,c
 15232  002AE4                     i2l303:
 15233                           
 15234                           ;RTC.c: 150: tmp += 30;
 15235  002AE4  0E1E               	movlw	30
 15236  002AE6  262A               	addwf	dayOfWeek@tmp,f,c
 15237  002AE8  0E00               	movlw	0
 15238  002AEA  222B               	addwfc	dayOfWeek@tmp+1,f,c
 15239  002AEC  0E00               	movlw	0
 15240  002AEE  222C               	addwfc	dayOfWeek@tmp+2,f,c
 15241  002AF0  0E00               	movlw	0
 15242  002AF2  222D               	addwfc	dayOfWeek@tmp+3,f,c
 15243  002AF4                     i2l304:
 15244                           
 15245                           ;RTC.c: 153: tmp += 31;
 15246  002AF4  0E1F               	movlw	31
 15247  002AF6  262A               	addwf	dayOfWeek@tmp,f,c
 15248  002AF8  0E00               	movlw	0
 15249  002AFA  222B               	addwfc	dayOfWeek@tmp+1,f,c
 15250  002AFC  0E00               	movlw	0
 15251  002AFE  222C               	addwfc	dayOfWeek@tmp+2,f,c
 15252  002B00  0E00               	movlw	0
 15253  002B02  222D               	addwfc	dayOfWeek@tmp+3,f,c
 15254  002B04                     i2l305:
 15255                           
 15256                           ;RTC.c: 156: tmp += 30;
 15257  002B04  0E1E               	movlw	30
 15258  002B06  262A               	addwf	dayOfWeek@tmp,f,c
 15259  002B08  0E00               	movlw	0
 15260  002B0A  222B               	addwfc	dayOfWeek@tmp+1,f,c
 15261  002B0C  0E00               	movlw	0
 15262  002B0E  222C               	addwfc	dayOfWeek@tmp+2,f,c
 15263  002B10  0E00               	movlw	0
 15264  002B12  222D               	addwfc	dayOfWeek@tmp+3,f,c
 15265  002B14                     i2l306:
 15266                           
 15267                           ;RTC.c: 159: tmp += 31;
 15268  002B14  0E1F               	movlw	31
 15269  002B16  262A               	addwf	dayOfWeek@tmp,f,c
 15270  002B18  0E00               	movlw	0
 15271  002B1A  222B               	addwfc	dayOfWeek@tmp+1,f,c
 15272  002B1C  0E00               	movlw	0
 15273  002B1E  222C               	addwfc	dayOfWeek@tmp+2,f,c
 15274  002B20  0E00               	movlw	0
 15275  002B22  222D               	addwfc	dayOfWeek@tmp+3,f,c
 15276  002B24                     i2l307:
 15277                           
 15278                           ;RTC.c: 162: tmp += 28;
 15279  002B24  0E1C               	movlw	28
 15280  002B26  262A               	addwf	dayOfWeek@tmp,f,c
 15281  002B28  0E00               	movlw	0
 15282  002B2A  222B               	addwfc	dayOfWeek@tmp+1,f,c
 15283  002B2C  0E00               	movlw	0
 15284  002B2E  222C               	addwfc	dayOfWeek@tmp+2,f,c
 15285  002B30  0E00               	movlw	0
 15286  002B32  222D               	addwfc	dayOfWeek@tmp+3,f,c
 15287                           
 15288                           ;RTC.c: 164: if ((year % 4) == 0)
 15289  002B34  501F               	movf	dayOfWeek@year,w,c
 15290  002B36  0B03               	andlw	3
 15291  002B38  A4D8               	btfss	status,2,c
 15292  002B3A  D008               	goto	i2l309
 15293                           
 15294                           ;RTC.c: 165: {
 15295                           ;RTC.c: 166: tmp++;
 15296  002B3C  0E01               	movlw	1
 15297  002B3E  262A               	addwf	dayOfWeek@tmp,f,c
 15298  002B40  0E00               	movlw	0
 15299  002B42  222B               	addwfc	dayOfWeek@tmp+1,f,c
 15300  002B44  0E00               	movlw	0
 15301  002B46  222C               	addwfc	dayOfWeek@tmp+2,f,c
 15302  002B48  0E00               	movlw	0
 15303  002B4A  222D               	addwfc	dayOfWeek@tmp+3,f,c
 15304  002B4C                     i2l309:
 15305                           
 15306                           ;RTC.c: 170: tmp += 31;
 15307  002B4C  0E1F               	movlw	31
 15308  002B4E  262A               	addwf	dayOfWeek@tmp,f,c
 15309  002B50  0E00               	movlw	0
 15310  002B52  222B               	addwfc	dayOfWeek@tmp+1,f,c
 15311  002B54  0E00               	movlw	0
 15312  002B56  222C               	addwfc	dayOfWeek@tmp+2,f,c
 15313  002B58  0E00               	movlw	0
 15314  002B5A  222D               	addwfc	dayOfWeek@tmp+3,f,c
 15315  002B5C  D025               	goto	i2l6045
 15316  002B5E                     i2l6043:
 15317  002B5E  5020               	movf	dayOfWeek@month,w,c
 15318                           
 15319                           ; Switch size 1, requested type "space"
 15320                           ; Number of cases is 12, Range of values is 1 to 12
 15321                           ; switch strategies available:
 15322                           ; Name         Instructions Cycles
 15323                           ; simple_byte           37    19 (average)
 15324                           ;	Chosen strategy is simple_byte
 15325  002B60  0A01               	xorlw	1	; case 1
 15326  002B62  B4D8               	btfsc	status,2,c
 15327  002B64  D021               	goto	i2l6045
 15328  002B66  0A03               	xorlw	3	; case 2
 15329  002B68  B4D8               	btfsc	status,2,c
 15330  002B6A  D7F0               	goto	i2l309
 15331  002B6C  0A01               	xorlw	1	; case 3
 15332  002B6E  B4D8               	btfsc	status,2,c
 15333  002B70  D7D9               	goto	i2l307
 15334  002B72  0A07               	xorlw	7	; case 4
 15335  002B74  B4D8               	btfsc	status,2,c
 15336  002B76  D7CE               	goto	i2l306
 15337  002B78  0A01               	xorlw	1	; case 5
 15338  002B7A  B4D8               	btfsc	status,2,c
 15339  002B7C  D7C3               	goto	i2l305
 15340  002B7E  0A03               	xorlw	3	; case 6
 15341  002B80  B4D8               	btfsc	status,2,c
 15342  002B82  D7B8               	goto	i2l304
 15343  002B84  0A01               	xorlw	1	; case 7
 15344  002B86  B4D8               	btfsc	status,2,c
 15345  002B88  D7AD               	goto	i2l303
 15346  002B8A  0A0F               	xorlw	15	; case 8
 15347  002B8C  B4D8               	btfsc	status,2,c
 15348  002B8E  D7A2               	goto	i2l302
 15349  002B90  0A01               	xorlw	1	; case 9
 15350  002B92  B4D8               	btfsc	status,2,c
 15351  002B94  D797               	goto	i2l301
 15352  002B96  0A03               	xorlw	3	; case 10
 15353  002B98  B4D8               	btfsc	status,2,c
 15354  002B9A  D78C               	goto	i2l300
 15355  002B9C  0A01               	xorlw	1	; case 11
 15356  002B9E  B4D8               	btfsc	status,2,c
 15357  002BA0  D781               	goto	i2l299
 15358  002BA2  0A07               	xorlw	7	; case 12
 15359  002BA4  B4D8               	btfsc	status,2,c
 15360  002BA6  D776               	goto	i2l6037
 15361  002BA8                     i2l6045:
 15362                           
 15363                           ;RTC.c: 178: tmp += day;
 15364  002BA8  5021               	movf	dayOfWeek@day,w,c
 15365  002BAA  262A               	addwf	dayOfWeek@tmp,f,c
 15366  002BAC  0E00               	movlw	0
 15367  002BAE  222B               	addwfc	dayOfWeek@tmp+1,f,c
 15368  002BB0  222C               	addwfc	dayOfWeek@tmp+2,f,c
 15369  002BB2  222D               	addwfc	dayOfWeek@tmp+3,f,c
 15370                           
 15371                           ;RTC.c: 179: tmp--;
 15372  002BB4  062A               	decf	dayOfWeek@tmp,f,c
 15373  002BB6  0E00               	movlw	0
 15374  002BB8  5A2B               	subwfb	dayOfWeek@tmp+1,f,c
 15375  002BBA  5A2C               	subwfb	dayOfWeek@tmp+2,f,c
 15376  002BBC  5A2D               	subwfb	dayOfWeek@tmp+3,f,c
 15377                           
 15378                           ;RTC.c: 182: return (uint8_t) ((tmp + 6) % 7);
 15379  002BBE  0E06               	movlw	6
 15380  002BC0  242A               	addwf	dayOfWeek@tmp,w,c
 15381  002BC2  6E14               	movwf	?___llmod,c
 15382  002BC4  0E00               	movlw	0
 15383  002BC6  202B               	addwfc	dayOfWeek@tmp+1,w,c
 15384  002BC8  6E15               	movwf	?___llmod+1,c
 15385  002BCA  0E00               	movlw	0
 15386  002BCC  202C               	addwfc	dayOfWeek@tmp+2,w,c
 15387  002BCE  6E16               	movwf	?___llmod+2,c
 15388  002BD0  0E00               	movlw	0
 15389  002BD2  202D               	addwfc	dayOfWeek@tmp+3,w,c
 15390  002BD4  6E17               	movwf	?___llmod+3,c
 15391  002BD6  0E07               	movlw	7
 15392  002BD8  6E18               	movwf	?___llmod+4,c
 15393  002BDA  0E00               	movlw	0
 15394  002BDC  6E19               	movwf	?___llmod+5,c
 15395  002BDE  0E00               	movlw	0
 15396  002BE0  6E1A               	movwf	?___llmod+6,c
 15397  002BE2  0E00               	movlw	0
 15398  002BE4  6E1B               	movwf	?___llmod+7,c
 15399  002BE6  ECDC  F020         	call	___llmod	;wreg free
 15400  002BEA  5014               	movf	?___llmod,w,c
 15401  002BEC  0012               	return	
 15402  002BEE                     __end_of_dayOfWeek:
 15403                           	opt stack 0
 15404                           tosu	equ	0xFFF
 15405                           tosh	equ	0xFFE
 15406                           tosl	equ	0xFFD
 15407                           pclatu	equ	0xFFB
 15408                           pclath	equ	0xFFA
 15409                           tblptru	equ	0xFF8
 15410                           tblptrh	equ	0xFF7
 15411                           tblptrl	equ	0xFF6
 15412                           tablat	equ	0xFF5
 15413                           prodh	equ	0xFF4
 15414                           prodl	equ	0xFF3
 15415                           intcon	equ	0xFF2
 15416                           intcon2	equ	0xFF1
 15417                           indf0	equ	0xFEF
 15418                           postinc0	equ	0xFEE
 15419                           fsr0h	equ	0xFEA
 15420                           fsr0l	equ	0xFE9
 15421                           wreg	equ	0xFE8
 15422                           postinc1	equ	0xFE6
 15423                           postdec1	equ	0xFE5
 15424                           fsr1h	equ	0xFE2
 15425                           fsr1l	equ	0xFE1
 15426                           indf2	equ	0xFDF
 15427                           postinc2	equ	0xFDE
 15428                           postdec2	equ	0xFDD
 15429                           plusw2	equ	0xFDB
 15430                           fsr2h	equ	0xFDA
 15431                           fsr2l	equ	0xFD9
 15432                           status	equ	0xFD8
 15433                           
 15434 ;; *************** function _checkDST *****************
 15435 ;; Defined at:
 15436 ;;		line 66 in file "RTC.c"
 15437 ;; Parameters:    Size  Location     Type
 15438 ;;		None
 15439 ;; Auto vars:     Size  Location     Type
 15440 ;;		None
 15441 ;; Return value:  Size  Location     Type
 15442 ;;		None               void
 15443 ;; Registers used:
 15444 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
 15445 ;; Tracked objects:
 15446 ;;		On entry : 0/0
 15447 ;;		On exit  : 0/0
 15448 ;;		Unchanged: 0/0
 15449 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 15450 ;;      Params:         0       0       0       0       0       0       0       0       0
 15451 ;;      Locals:         2       0       0       0       0       0       0       0       0
 15452 ;;      Temps:          7       0       0       0       0       0       0       0       0
 15453 ;;      Totals:         9       0       0       0       0       0       0       0       0
 15454 ;;Total ram usage:        9 bytes
 15455 ;; Hardware stack levels used:    1
 15456 ;; Hardware stack levels required when called:    2
 15457 ;; This function calls:
 15458 ;;		_tick
 15459 ;;		_dayOfWeek
 15460 ;; This function is called by:
 15461 ;;		_tick
 15462 ;; This function uses a non-reentrant model
 15463 ;;
 15464                           
 15465                           	psect	text59
 15466  00310E                     __ptext59:
 15467                           	opt stack 0
 15468  00310E                     _checkDST:
 15469                           	opt stack 22
 15470                           
 15471                           ;RTC.c: 67: if ((date.dst ^ (1 & ((date.day >= ((((2)*7)-dayOfWeek((date.year),(3),((2)*
      +                          7)))) && date.month >= 3) && (date.day < ((((1)*7)-dayOfWeek((date.year),(11),((1)*7))))
      +                           && date.month < 11)))) && date.hour == 1)
 15472                           
 15473                           ;incstack = 0
 15474                           ;incstack = 0
 15475  00310E  6E2E               	movwf	??_checkDST& (0+255),c
 15476  003110  0E00               	movlw	0
 15477  003112  6E36               	movwf	_checkDST$422,c
 15478  003114  502E               	movf	??_checkDST& (0+255),w,c
 15479  003116  C128  F01F         	movff	_date+6,?_dayOfWeek
 15480  00311A  6E2E               	movwf	??_checkDST& (0+255),c
 15481  00311C  0E03               	movlw	3
 15482  00311E  6E20               	movwf	?_dayOfWeek+1,c
 15483  003120  502E               	movf	??_checkDST& (0+255),w,c
 15484  003122  6E2F               	movwf	(??_checkDST+1)& (0+255),c
 15485  003124  0E0E               	movlw	14
 15486  003126  6E21               	movwf	?_dayOfWeek+2,c
 15487  003128  502F               	movf	(??_checkDST+1)& (0+255),w,c
 15488  00312A  EC07  F015         	call	_dayOfWeek	;wreg free
 15489  00312E  6E30               	movwf	(??_checkDST+2)& (0+255),c
 15490  003130  6A31               	clrf	(??_checkDST+3)& (0+255),c
 15491  003132  1E30               	comf	??_checkDST+2,f,c
 15492  003134  1E31               	comf	??_checkDST+3,f,c
 15493  003136  4A30               	infsnz	??_checkDST+2,f,c
 15494  003138  2A31               	incf	??_checkDST+3,f,c
 15495  00313A  0E0E               	movlw	14
 15496  00313C  2630               	addwf	??_checkDST+2,f,c
 15497  00313E  0E00               	movlw	0
 15498  003140  2231               	addwfc	??_checkDST+3,f,c
 15499  003142  0101               	movlb	1	; () banked
 15500  003144  0101               	movlb	1	; () banked
 15501  003146  5125               	movf	(_date+3)& (0+255),w,b
 15502  003148  6E32               	movwf	(??_checkDST+4)& (0+255),c
 15503  00314A  6A33               	clrf	(??_checkDST+5)& (0+255),c
 15504  00314C  5033               	movf	??_checkDST+5,w,c
 15505  00314E  0A80               	xorlw	128
 15506  003150  6E34               	movwf	(??_checkDST+6)& (0+255),c
 15507  003152  5030               	movf	??_checkDST+2,w,c
 15508  003154  5C32               	subwf	??_checkDST+4,w,c
 15509  003156  5031               	movf	??_checkDST+3,w,c
 15510  003158  0A80               	xorlw	128
 15511  00315A  5834               	subwfb	(??_checkDST+6)& (0+255),w,c
 15512  00315C  A0D8               	btfss	status,0,c
 15513  00315E  D034               	goto	i2l6461
 15514                           
 15515                           ; BSR set to: 1
 15516  003160  0101               	movlb	1	; () banked
 15517  003162  EE21  F027         	lfsr	2,_date+5
 15518  003166  0E02               	movlw	2
 15519  003168  64DF               	cpfsgt	indf2,c
 15520  00316A  D02E               	goto	i2l6461
 15521                           
 15522                           ; BSR set to: 1
 15523  00316C  C128  F01F         	movff	_date+6,?_dayOfWeek
 15524  003170  6E2E               	movwf	??_checkDST& (0+255),c
 15525  003172  0E0B               	movlw	11
 15526  003174  6E20               	movwf	?_dayOfWeek+1,c
 15527  003176  502E               	movf	??_checkDST& (0+255),w,c
 15528  003178  6E2F               	movwf	(??_checkDST+1)& (0+255),c
 15529  00317A  0E07               	movlw	7
 15530  00317C  6E21               	movwf	?_dayOfWeek+2,c
 15531  00317E  502F               	movf	(??_checkDST+1)& (0+255),w,c
 15532  003180  EC07  F015         	call	_dayOfWeek	;wreg free
 15533  003184  6E30               	movwf	(??_checkDST+2)& (0+255),c
 15534  003186  6A31               	clrf	(??_checkDST+3)& (0+255),c
 15535  003188  1E30               	comf	??_checkDST+2,f,c
 15536  00318A  1E31               	comf	??_checkDST+3,f,c
 15537  00318C  4A30               	infsnz	??_checkDST+2,f,c
 15538  00318E  2A31               	incf	??_checkDST+3,f,c
 15539  003190  0E07               	movlw	7
 15540  003192  2630               	addwf	??_checkDST+2,f,c
 15541  003194  0E00               	movlw	0
 15542  003196  2231               	addwfc	??_checkDST+3,f,c
 15543  003198  0101               	movlb	1	; () banked
 15544  00319A  0101               	movlb	1	; () banked
 15545  00319C  5125               	movf	(_date+3)& (0+255),w,b
 15546  00319E  6E32               	movwf	(??_checkDST+4)& (0+255),c
 15547  0031A0  6A33               	clrf	(??_checkDST+5)& (0+255),c
 15548  0031A2  5033               	movf	??_checkDST+5,w,c
 15549  0031A4  0A80               	xorlw	128
 15550  0031A6  6E34               	movwf	(??_checkDST+6)& (0+255),c
 15551  0031A8  5030               	movf	??_checkDST+2,w,c
 15552  0031AA  5C32               	subwf	??_checkDST+4,w,c
 15553  0031AC  5031               	movf	??_checkDST+3,w,c
 15554  0031AE  0A80               	xorlw	128
 15555  0031B0  5834               	subwfb	(??_checkDST+6)& (0+255),w,c
 15556  0031B2  B0D8               	btfsc	status,0,c
 15557  0031B4  D009               	goto	i2l6461
 15558                           
 15559                           ; BSR set to: 1
 15560  0031B6  0E0B               	movlw	11
 15561  0031B8  0101               	movlb	1	; () banked
 15562  0031BA  0101               	movlb	1	; () banked
 15563  0031BC  6127               	cpfslt	(_date+5)& (0+255),b
 15564  0031BE  D004               	goto	i2l6461
 15565                           
 15566                           ; BSR set to: 1
 15567  0031C0  6E2E               	movwf	??_checkDST& (0+255),c
 15568  0031C2  0E01               	movlw	1
 15569  0031C4  6E36               	movwf	_checkDST$422,c
 15570  0031C6  502E               	movf	??_checkDST& (0+255),w,c
 15571  0031C8                     i2l6461:
 15572                           
 15573                           ; BSR set to: 1
 15574  0031C8  5036               	movf	_checkDST$422,w,c
 15575  0031CA  0B01               	andlw	1
 15576  0031CC  0101               	movlb	1	; () banked
 15577  0031CE  0101               	movlb	1	; () banked
 15578  0031D0  192A               	xorwf	(_date+8)& (0+255),w,b
 15579  0031D2  0900               	iorlw	0
 15580  0031D4  B4D8               	btfsc	status,2,c
 15581  0031D6  D02E               	goto	i2l278
 15582                           
 15583                           ; BSR set to: 1
 15584  0031D8  0101               	movlb	1	; () banked
 15585  0031DA  0101               	movlb	1	; () banked
 15586  0031DC  0524               	decf	(_date+2)& (0+255),w,b
 15587  0031DE  A4D8               	btfss	status,2,c
 15588  0031E0  D029               	goto	i2l278
 15589                           
 15590                           ; BSR set to: 1
 15591                           ;RTC.c: 68: {
 15592                           ;RTC.c: 69: date.dst = !date.dst;
 15593  0031E2  0101               	movlb	1	; () banked
 15594  0031E4  0101               	movlb	1	; () banked
 15595  0031E6  512A               	movf	(_date+8)& (0+255),w,b
 15596  0031E8  A4D8               	btfss	status,2,c
 15597  0031EA  D002               	goto	i2u460_40
 15598  0031EC  0E01               	movlw	1
 15599  0031EE  D001               	goto	i2u460_46
 15600  0031F0                     i2u460_40:
 15601  0031F0  0E00               	movlw	0
 15602  0031F2                     i2u460_46:
 15603  0031F2  0101               	movlb	1	; () banked
 15604  0031F4  0101               	movlb	1	; () banked
 15605  0031F6  6F2A               	movwf	(_date+8)& (0+255),b
 15606                           
 15607                           ;RTC.c: 70: if (date.dst)
 15608  0031F8  0101               	movlb	1	; () banked
 15609  0031FA  0101               	movlb	1	; () banked
 15610  0031FC  512A               	movf	(_date+8)& (0+255),w,b
 15611  0031FE  B4D8               	btfsc	status,2,c
 15612  003200  D007               	goto	i2l6469
 15613                           
 15614                           ; BSR set to: 1
 15615                           ;RTC.c: 71: {
 15616                           ;RTC.c: 72: tick(hour);
 15617  003202  6E2E               	movwf	??_checkDST& (0+255),c
 15618  003204  0E02               	movlw	2
 15619  003206  6E0D               	movwf	?_tick,c
 15620  003208  502E               	movf	??_checkDST& (0+255),w,c
 15621  00320A  EC15  F01C         	call	_tick	;wreg free
 15622                           
 15623                           ;RTC.c: 73: }
 15624  00320E  D012               	goto	i2l278
 15625  003210                     i2l6469:
 15626                           
 15627                           ;RTC.c: 74: else
 15628                           ;RTC.c: 75: {
 15629                           ;RTC.c: 76: if (date.hour > 0)
 15630  003210  0101               	movlb	1	; () banked
 15631  003212  0101               	movlb	1	; () banked
 15632  003214  5124               	movf	(_date+2)& (0+255),w,b
 15633  003216  B4D8               	btfsc	status,2,c
 15634  003218  D004               	goto	i2l6473
 15635                           
 15636                           ; BSR set to: 1
 15637                           ;RTC.c: 77: {
 15638                           ;RTC.c: 78: date.hour--;
 15639  00321A  0101               	movlb	1	; () banked
 15640  00321C  0101               	movlb	1	; () banked
 15641  00321E  0724               	decf	(_date+2)& (0+255),f,b
 15642                           
 15643                           ;RTC.c: 79: }
 15644  003220  D009               	goto	i2l278
 15645  003222                     i2l6473:
 15646                           
 15647                           ; BSR set to: 1
 15648                           ;RTC.c: 80: else
 15649                           ;RTC.c: 81: {
 15650                           ;RTC.c: 82: date.hour = 0;
 15651  003222  6E2E               	movwf	??_checkDST& (0+255),c
 15652  003224  0E00               	movlw	0
 15653  003226  0101               	movlb	1	; () banked
 15654  003228  0101               	movlb	1	; () banked
 15655  00322A  6F24               	movwf	(_date+2)& (0+255),b
 15656  00322C  502E               	movf	??_checkDST& (0+255),w,c
 15657                           
 15658                           ; BSR set to: 1
 15659                           ;RTC.c: 83: date.day--;
 15660  00322E  0101               	movlb	1	; () banked
 15661  003230  0101               	movlb	1	; () banked
 15662  003232  0725               	decf	(_date+3)& (0+255),f,b
 15663  003234                     i2l278:
 15664  003234  0012               	return	
 15665  003236                     __end_of_checkDST:
 15666                           	opt stack 0
 15667                           tosu	equ	0xFFF
 15668                           tosh	equ	0xFFE
 15669                           tosl	equ	0xFFD
 15670                           pclatu	equ	0xFFB
 15671                           pclath	equ	0xFFA
 15672                           tblptru	equ	0xFF8
 15673                           tblptrh	equ	0xFF7
 15674                           tblptrl	equ	0xFF6
 15675                           tablat	equ	0xFF5
 15676                           prodh	equ	0xFF4
 15677                           prodl	equ	0xFF3
 15678                           intcon	equ	0xFF2
 15679                           intcon2	equ	0xFF1
 15680                           indf0	equ	0xFEF
 15681                           postinc0	equ	0xFEE
 15682                           fsr0h	equ	0xFEA
 15683                           fsr0l	equ	0xFE9
 15684                           wreg	equ	0xFE8
 15685                           postinc1	equ	0xFE6
 15686                           postdec1	equ	0xFE5
 15687                           fsr1h	equ	0xFE2
 15688                           fsr1l	equ	0xFE1
 15689                           indf2	equ	0xFDF
 15690                           postinc2	equ	0xFDE
 15691                           postdec2	equ	0xFDD
 15692                           plusw2	equ	0xFDB
 15693                           fsr2h	equ	0xFDA
 15694                           fsr2l	equ	0xFD9
 15695                           status	equ	0xFD8
 15696                           
 15697 ;; *************** function _tick *****************
 15698 ;; Defined at:
 15699 ;;		line 90 in file "RTC.c"
 15700 ;; Parameters:    Size  Location     Type
 15701 ;;  val             1   12[COMRAM] unsigned char 
 15702 ;; Auto vars:     Size  Location     Type
 15703 ;;		None
 15704 ;; Return value:  Size  Location     Type
 15705 ;;                  1    wreg      unsigned char 
 15706 ;; Registers used:
 15707 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
 15708 ;; Tracked objects:
 15709 ;;		On entry : 0/0
 15710 ;;		On exit  : 0/0
 15711 ;;		Unchanged: 0/0
 15712 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 15713 ;;      Params:         1       0       0       0       0       0       0       0       0
 15714 ;;      Locals:         0       0       0       0       0       0       0       0       0
 15715 ;;      Temps:          1       0       0       0       0       0       0       0       0
 15716 ;;      Totals:         2       0       0       0       0       0       0       0       0
 15717 ;;Total ram usage:        2 bytes
 15718 ;; Hardware stack levels used:    1
 15719 ;; Hardware stack levels required when called:    3
 15720 ;; This function calls:
 15721 ;;		_daysOfMonth
 15722 ;;		_checkDST
 15723 ;; This function is called by:
 15724 ;;		_high_isr
 15725 ;;		_checkDST
 15726 ;; This function uses a non-reentrant model
 15727 ;;
 15728                           
 15729                           	psect	text60
 15730  00382A                     __ptext60:
 15731                           	opt stack 0
 15732  00382A                     _tick:
 15733                           	opt stack 22
 15734                           
 15735                           ;RTC.c: 91: switch (val)
 15736                           
 15737                           ;incstack = 0
 15738                           ;incstack = 0
 15739  00382A  D052               	goto	i2l6171
 15740  00382C                     i2l6145:
 15741                           
 15742                           ;RTC.c: 94: if (++date.second >= 60)
 15743  00382C  0101               	movlb	1	; () banked
 15744  00382E  0101               	movlb	1	; () banked
 15745  003830  2B22               	incf	_date& (0+255),f,b
 15746  003832  0E3B               	movlw	59
 15747  003834  0101               	movlb	1	; () banked
 15748  003836  6522               	cpfsgt	_date& (0+255),b
 15749  003838  D05E               	goto	i2l294
 15750                           
 15751                           ; BSR set to: 1
 15752                           ;RTC.c: 95: {
 15753                           ;RTC.c: 96: date.second = 0;
 15754  00383A  6E0E               	movwf	??_tick& (0+255),c
 15755  00383C  0E00               	movlw	0
 15756  00383E  0101               	movlb	1	; () banked
 15757  003840  0101               	movlb	1	; () banked
 15758  003842  6F22               	movwf	_date& (0+255),b
 15759  003844  500E               	movf	??_tick& (0+255),w,c
 15760  003846                     i2l6149:
 15761                           
 15762                           ;RTC.c: 98: if (++date.minute >= 60)
 15763  003846  0101               	movlb	1	; () banked
 15764  003848  EE21  F023         	lfsr	2,_date+1
 15765  00384C  2ADF               	incf	indf2,f,c
 15766  00384E  0E3B               	movlw	59
 15767  003850  64DF               	cpfsgt	indf2,c
 15768  003852  D051               	goto	i2l294
 15769                           
 15770                           ; BSR set to: 1
 15771                           ;RTC.c: 99: {
 15772                           ;RTC.c: 100: date.minute = 0;
 15773  003854  6E0E               	movwf	??_tick& (0+255),c
 15774  003856  0E00               	movlw	0
 15775  003858  0101               	movlb	1	; () banked
 15776  00385A  0101               	movlb	1	; () banked
 15777  00385C  6F23               	movwf	(_date+1)& (0+255),b
 15778  00385E  500E               	movf	??_tick& (0+255),w,c
 15779  003860                     i2l6153:
 15780                           
 15781                           ;RTC.c: 102: date.hour++;
 15782  003860  0101               	movlb	1	; () banked
 15783  003862  0101               	movlb	1	; () banked
 15784  003864  2B24               	incf	(_date+2)& (0+255),f,b
 15785                           
 15786                           ; BSR set to: 1
 15787                           ;RTC.c: 103: checkDST();
 15788  003866  EC87  F018         	call	_checkDST	;wreg free
 15789                           
 15790                           ;RTC.c: 104: if (date.hour >= 24)
 15791  00386A  0101               	movlb	1	; () banked
 15792  00386C  EE21  F024         	lfsr	2,_date+2
 15793  003870  0E17               	movlw	23
 15794  003872  64DF               	cpfsgt	indf2,c
 15795  003874  D040               	goto	i2l294
 15796                           
 15797                           ; BSR set to: 1
 15798                           ;RTC.c: 105: {
 15799                           ;RTC.c: 106: date.hour = 0;
 15800  003876  6E0E               	movwf	??_tick& (0+255),c
 15801  003878  0E00               	movlw	0
 15802  00387A  0101               	movlb	1	; () banked
 15803  00387C  0101               	movlb	1	; () banked
 15804  00387E  6F24               	movwf	(_date+2)& (0+255),b
 15805  003880  500E               	movf	??_tick& (0+255),w,c
 15806  003882                     i2l6161:
 15807                           
 15808                           ;RTC.c: 108: if (++date.day >= daysOfMonth(date.month, date.year))
 15809  003882  C127  F008         	movff	_date+5,?_daysOfMonth
 15810  003886  C128  F009         	movff	_date+6,?_daysOfMonth+1
 15811  00388A  C129  F00A         	movff	_date+7,?_daysOfMonth+2
 15812  00388E  ECD8  F01C         	call	_daysOfMonth	;wreg free
 15813  003892  0101               	movlb	1	; () banked
 15814  003894  0101               	movlb	1	; () banked
 15815  003896  2B25               	incf	(_date+3)& (0+255),f,b
 15816  003898  0101               	movlb	1	; () banked
 15817  00389A  5D25               	subwf	(_date+3)& (0+255),w,b
 15818  00389C  A0D8               	btfss	status,0,c
 15819  00389E  D02B               	goto	i2l294
 15820                           
 15821                           ; BSR set to: 1
 15822                           ;RTC.c: 109: {
 15823                           ;RTC.c: 110: date.day = 1;
 15824  0038A0  6E0E               	movwf	??_tick& (0+255),c
 15825  0038A2  0E01               	movlw	1
 15826  0038A4  0101               	movlb	1	; () banked
 15827  0038A6  0101               	movlb	1	; () banked
 15828  0038A8  6F25               	movwf	(_date+3)& (0+255),b
 15829  0038AA  500E               	movf	??_tick& (0+255),w,c
 15830  0038AC                     i2l6165:
 15831                           
 15832                           ;RTC.c: 112: if (++date.month > 12)
 15833  0038AC  0101               	movlb	1	; () banked
 15834  0038AE  EE21  F027         	lfsr	2,_date+5
 15835  0038B2  2ADF               	incf	indf2,f,c
 15836  0038B4  0E0C               	movlw	12
 15837  0038B6  64DF               	cpfsgt	indf2,c
 15838  0038B8  D01E               	goto	i2l294
 15839                           
 15840                           ; BSR set to: 1
 15841                           ;RTC.c: 113: {
 15842                           ;RTC.c: 114: date.month = 1;
 15843  0038BA  6E0E               	movwf	??_tick& (0+255),c
 15844  0038BC  0E01               	movlw	1
 15845  0038BE  0101               	movlb	1	; () banked
 15846  0038C0  0101               	movlb	1	; () banked
 15847  0038C2  6F27               	movwf	(_date+5)& (0+255),b
 15848  0038C4  500E               	movf	??_tick& (0+255),w,c
 15849  0038C6                     i2l6169:
 15850                           
 15851                           ;RTC.c: 116: ++date.year;
 15852  0038C6  0101               	movlb	1	; () banked
 15853  0038C8  0101               	movlb	1	; () banked
 15854  0038CA  4B28               	infsnz	(_date+6)& (0+255),f,b
 15855  0038CC  2B29               	incf	(_date+7)& (0+255),f,b
 15856  0038CE  D013               	goto	i2l294
 15857  0038D0                     i2l6171:
 15858  0038D0  500D               	movf	tick@val,w,c
 15859                           
 15860                           ; Switch size 1, requested type "space"
 15861                           ; Number of cases is 6, Range of values is 0 to 5
 15862                           ; switch strategies available:
 15863                           ; Name         Instructions Cycles
 15864                           ; simple_byte           19    10 (average)
 15865                           ;	Chosen strategy is simple_byte
 15866  0038D2  0A00               	xorlw	0	; case 0
 15867  0038D4  B4D8               	btfsc	status,2,c
 15868  0038D6  D7AA               	goto	i2l6145
 15869  0038D8  0A01               	xorlw	1	; case 1
 15870  0038DA  B4D8               	btfsc	status,2,c
 15871  0038DC  D7B4               	goto	i2l6149
 15872  0038DE  0A03               	xorlw	3	; case 2
 15873  0038E0  B4D8               	btfsc	status,2,c
 15874  0038E2  D7BE               	goto	i2l6153
 15875  0038E4  0A01               	xorlw	1	; case 3
 15876  0038E6  B4D8               	btfsc	status,2,c
 15877  0038E8  D7CC               	goto	i2l6161
 15878  0038EA  0A07               	xorlw	7	; case 4
 15879  0038EC  B4D8               	btfsc	status,2,c
 15880  0038EE  D7DE               	goto	i2l6165
 15881  0038F0  0A01               	xorlw	1	; case 5
 15882  0038F2  B4D8               	btfsc	status,2,c
 15883  0038F4  D7E8               	goto	i2l6169
 15884  0038F6                     i2l294:
 15885  0038F6  0012               	return	
 15886  0038F8                     __end_of_tick:
 15887                           	opt stack 0
 15888                           tosu	equ	0xFFF
 15889                           tosh	equ	0xFFE
 15890                           tosl	equ	0xFFD
 15891                           pclatu	equ	0xFFB
 15892                           pclath	equ	0xFFA
 15893                           tblptru	equ	0xFF8
 15894                           tblptrh	equ	0xFF7
 15895                           tblptrl	equ	0xFF6
 15896                           tablat	equ	0xFF5
 15897                           prodh	equ	0xFF4
 15898                           prodl	equ	0xFF3
 15899                           intcon	equ	0xFF2
 15900                           intcon2	equ	0xFF1
 15901                           indf0	equ	0xFEF
 15902                           postinc0	equ	0xFEE
 15903                           fsr0h	equ	0xFEA
 15904                           fsr0l	equ	0xFE9
 15905                           wreg	equ	0xFE8
 15906                           postinc1	equ	0xFE6
 15907                           postdec1	equ	0xFE5
 15908                           fsr1h	equ	0xFE2
 15909                           fsr1l	equ	0xFE1
 15910                           indf2	equ	0xFDF
 15911                           postinc2	equ	0xFDE
 15912                           postdec2	equ	0xFDD
 15913                           plusw2	equ	0xFDB
 15914                           fsr2h	equ	0xFDA
 15915                           fsr2l	equ	0xFD9
 15916                           status	equ	0xFD8
 15917                           
 15918 ;; *************** function _daysOfMonth *****************
 15919 ;; Defined at:
 15920 ;;		line 37 in file "RTC.c"
 15921 ;; Parameters:    Size  Location     Type
 15922 ;;  month           1    7[COMRAM] unsigned char 
 15923 ;;  year            2    8[COMRAM] unsigned int 
 15924 ;; Auto vars:     Size  Location     Type
 15925 ;;		None
 15926 ;; Return value:  Size  Location     Type
 15927 ;;                  1    wreg      unsigned char 
 15928 ;; Registers used:
 15929 ;;		wreg, status,2, status,0, cstack
 15930 ;; Tracked objects:
 15931 ;;		On entry : 0/0
 15932 ;;		On exit  : 0/0
 15933 ;;		Unchanged: 0/0
 15934 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 15935 ;;      Params:         3       0       0       0       0       0       0       0       0
 15936 ;;      Locals:         0       0       0       0       0       0       0       0       0
 15937 ;;      Temps:          2       0       0       0       0       0       0       0       0
 15938 ;;      Totals:         5       0       0       0       0       0       0       0       0
 15939 ;;Total ram usage:        5 bytes
 15940 ;; Hardware stack levels used:    1
 15941 ;; Hardware stack levels required when called:    1
 15942 ;; This function calls:
 15943 ;;		___lwmod
 15944 ;; This function is called by:
 15945 ;;		_tick
 15946 ;; This function uses a non-reentrant model
 15947 ;;
 15948                           
 15949                           	psect	text61
 15950  0039B0                     __ptext61:
 15951                           	opt stack 0
 15952  0039B0                     _daysOfMonth:
 15953                           	opt stack 23
 15954                           
 15955                           ;RTC.c: 38: switch (month)
 15956                           
 15957                           ;incstack = 0
 15958                           ;incstack = 0
 15959  0039B0  D02E               	goto	i2l5873
 15960  0039B2                     i2l5849:
 15961                           
 15962                           ;RTC.c: 41: case 3:
 15963                           ;RTC.c: 42: case 5:
 15964                           ;RTC.c: 43: case 7:
 15965                           ;RTC.c: 44: case 8:
 15966                           ;RTC.c: 45: case 10:
 15967                           ;RTC.c: 46: case 12:
 15968                           ;RTC.c: 47: return 31;
 15969  0039B2  0E1F               	movlw	31
 15970  0039B4  D052               	goto	i2l258
 15971  0039B6                     i2l5853:
 15972                           
 15973                           ;RTC.c: 50: case 6:
 15974                           ;RTC.c: 51: case 9:
 15975                           ;RTC.c: 52: case 11:
 15976                           ;RTC.c: 53: return 30;
 15977  0039B6  0E1E               	movlw	30
 15978  0039B8  D050               	goto	i2l258
 15979  0039BA                     i2l5857:
 15980                           
 15981                           ;RTC.c: 56: if ((((year)%4 == 0) && (((year)%100 != 0) || ((year)%400 == 0))))
 15982  0039BA  0E03               	movlw	3
 15983  0039BC  1409               	andwf	daysOfMonth@year,w,c
 15984  0039BE  6E0B               	movwf	??_daysOfMonth& (0+255),c
 15985  0039C0  0E00               	movlw	0
 15986  0039C2  140A               	andwf	daysOfMonth@year+1,w,c
 15987  0039C4  6E0C               	movwf	(??_daysOfMonth+1)& (0+255),c
 15988  0039C6  500C               	movf	??_daysOfMonth+1,w,c
 15989  0039C8  100B               	iorwf	??_daysOfMonth,w,c
 15990  0039CA  A4D8               	btfss	status,2,c
 15991  0039CC  D01E               	goto	i2l5869
 15992  0039CE  C009  F001         	movff	daysOfMonth@year,?___lwmod
 15993  0039D2  C00A  F002         	movff	daysOfMonth@year+1,?___lwmod+1
 15994  0039D6  0E00               	movlw	0
 15995  0039D8  6E04               	movwf	?___lwmod+3,c
 15996  0039DA  0E64               	movlw	100
 15997  0039DC  6E03               	movwf	?___lwmod+2,c
 15998  0039DE  EC3C  F022         	call	___lwmod	;wreg free
 15999  0039E2  5002               	movf	?___lwmod+1,w,c
 16000  0039E4  1001               	iorwf	?___lwmod,w,c
 16001  0039E6  A4D8               	btfss	status,2,c
 16002  0039E8  D00E               	goto	i2l5863
 16003  0039EA  C009  F001         	movff	daysOfMonth@year,?___lwmod
 16004  0039EE  C00A  F002         	movff	daysOfMonth@year+1,?___lwmod+1
 16005  0039F2  0E01               	movlw	1
 16006  0039F4  6E04               	movwf	?___lwmod+3,c
 16007  0039F6  0E90               	movlw	144
 16008  0039F8  6E03               	movwf	?___lwmod+2,c
 16009  0039FA  EC3C  F022         	call	___lwmod	;wreg free
 16010  0039FE  5002               	movf	?___lwmod+1,w,c
 16011  003A00  1001               	iorwf	?___lwmod,w,c
 16012  003A02  A4D8               	btfss	status,2,c
 16013  003A04  D002               	goto	i2l5869
 16014  003A06                     i2l5863:
 16015                           
 16016                           ;RTC.c: 57: return 29;
 16017  003A06  0E1D               	movlw	29
 16018  003A08  D028               	goto	i2l258
 16019  003A0A                     i2l5869:
 16020                           
 16021                           ;RTC.c: 58: else
 16022                           ;RTC.c: 59: return 28;
 16023  003A0A  0E1C               	movlw	28
 16024  003A0C  D026               	goto	i2l258
 16025  003A0E                     i2l5873:
 16026  003A0E  5008               	movf	daysOfMonth@month,w,c
 16027                           
 16028                           ; Switch size 1, requested type "space"
 16029                           ; Number of cases is 12, Range of values is 1 to 12
 16030                           ; switch strategies available:
 16031                           ; Name         Instructions Cycles
 16032                           ; simple_byte           37    19 (average)
 16033                           ;	Chosen strategy is simple_byte
 16034  003A10  0A01               	xorlw	1	; case 1
 16035  003A12  B4D8               	btfsc	status,2,c
 16036  003A14  D7CE               	goto	i2l5849
 16037  003A16  0A03               	xorlw	3	; case 2
 16038  003A18  B4D8               	btfsc	status,2,c
 16039  003A1A  D7CF               	goto	i2l5857
 16040  003A1C  0A01               	xorlw	1	; case 3
 16041  003A1E  B4D8               	btfsc	status,2,c
 16042  003A20  D7C8               	goto	i2l5849
 16043  003A22  0A07               	xorlw	7	; case 4
 16044  003A24  B4D8               	btfsc	status,2,c
 16045  003A26  D7C7               	goto	i2l5853
 16046  003A28  0A01               	xorlw	1	; case 5
 16047  003A2A  B4D8               	btfsc	status,2,c
 16048  003A2C  D7C2               	goto	i2l5849
 16049  003A2E  0A03               	xorlw	3	; case 6
 16050  003A30  B4D8               	btfsc	status,2,c
 16051  003A32  D7C1               	goto	i2l5853
 16052  003A34  0A01               	xorlw	1	; case 7
 16053  003A36  B4D8               	btfsc	status,2,c
 16054  003A38  D7BC               	goto	i2l5849
 16055  003A3A  0A0F               	xorlw	15	; case 8
 16056  003A3C  B4D8               	btfsc	status,2,c
 16057  003A3E  D7B9               	goto	i2l5849
 16058  003A40  0A01               	xorlw	1	; case 9
 16059  003A42  B4D8               	btfsc	status,2,c
 16060  003A44  D7B8               	goto	i2l5853
 16061  003A46  0A03               	xorlw	3	; case 10
 16062  003A48  B4D8               	btfsc	status,2,c
 16063  003A4A  D7B3               	goto	i2l5849
 16064  003A4C  0A01               	xorlw	1	; case 11
 16065  003A4E  B4D8               	btfsc	status,2,c
 16066  003A50  D7B2               	goto	i2l5853
 16067  003A52  0A07               	xorlw	7	; case 12
 16068  003A54  B4D8               	btfsc	status,2,c
 16069  003A56  D7AD               	goto	i2l5849
 16070                           
 16071                           ;RTC.c: 62: return 0;
 16072  003A58  0E00               	movlw	0
 16073  003A5A                     i2l258:
 16074  003A5A  0012               	return	
 16075  003A5C                     __end_of_daysOfMonth:
 16076                           	opt stack 0
 16077                           tosu	equ	0xFFF
 16078                           tosh	equ	0xFFE
 16079                           tosl	equ	0xFFD
 16080                           pclatu	equ	0xFFB
 16081                           pclath	equ	0xFFA
 16082                           tblptru	equ	0xFF8
 16083                           tblptrh	equ	0xFF7
 16084                           tblptrl	equ	0xFF6
 16085                           tablat	equ	0xFF5
 16086                           prodh	equ	0xFF4
 16087                           prodl	equ	0xFF3
 16088                           intcon	equ	0xFF2
 16089                           intcon2	equ	0xFF1
 16090                           indf0	equ	0xFEF
 16091                           postinc0	equ	0xFEE
 16092                           fsr0h	equ	0xFEA
 16093                           fsr0l	equ	0xFE9
 16094                           wreg	equ	0xFE8
 16095                           postinc1	equ	0xFE6
 16096                           postdec1	equ	0xFE5
 16097                           fsr1h	equ	0xFE2
 16098                           fsr1l	equ	0xFE1
 16099                           indf2	equ	0xFDF
 16100                           postinc2	equ	0xFDE
 16101                           postdec2	equ	0xFDD
 16102                           plusw2	equ	0xFDB
 16103                           fsr2h	equ	0xFDA
 16104                           fsr2l	equ	0xFD9
 16105                           status	equ	0xFD8
 16106                           tosu	equ	0xFFF
 16107                           tosh	equ	0xFFE
 16108                           tosl	equ	0xFFD
 16109                           pclatu	equ	0xFFB
 16110                           pclath	equ	0xFFA
 16111                           tblptru	equ	0xFF8
 16112                           tblptrh	equ	0xFF7
 16113                           tblptrl	equ	0xFF6
 16114                           tablat	equ	0xFF5
 16115                           prodh	equ	0xFF4
 16116                           prodl	equ	0xFF3
 16117                           intcon	equ	0xFF2
 16118                           intcon2	equ	0xFF1
 16119                           indf0	equ	0xFEF
 16120                           postinc0	equ	0xFEE
 16121                           fsr0h	equ	0xFEA
 16122                           fsr0l	equ	0xFE9
 16123                           wreg	equ	0xFE8
 16124                           postinc1	equ	0xFE6
 16125                           postdec1	equ	0xFE5
 16126                           fsr1h	equ	0xFE2
 16127                           fsr1l	equ	0xFE1
 16128                           indf2	equ	0xFDF
 16129                           postinc2	equ	0xFDE
 16130                           postdec2	equ	0xFDD
 16131                           plusw2	equ	0xFDB
 16132                           fsr2h	equ	0xFDA
 16133                           fsr2l	equ	0xFD9
 16134                           status	equ	0xFD8
 16135                           
 16136                           	psect	text62
 16137  000000                     __ptext62:
 16138                           	opt stack 0
 16139                           tosu	equ	0xFFF
 16140                           tosh	equ	0xFFE
 16141                           tosl	equ	0xFFD
 16142                           pclatu	equ	0xFFB
 16143                           pclath	equ	0xFFA
 16144                           tblptru	equ	0xFF8
 16145                           tblptrh	equ	0xFF7
 16146                           tblptrl	equ	0xFF6
 16147                           tablat	equ	0xFF5
 16148                           prodh	equ	0xFF4
 16149                           prodl	equ	0xFF3
 16150                           intcon	equ	0xFF2
 16151                           intcon2	equ	0xFF1
 16152                           indf0	equ	0xFEF
 16153                           postinc0	equ	0xFEE
 16154                           fsr0h	equ	0xFEA
 16155                           fsr0l	equ	0xFE9
 16156                           wreg	equ	0xFE8
 16157                           postinc1	equ	0xFE6
 16158                           postdec1	equ	0xFE5
 16159                           fsr1h	equ	0xFE2
 16160                           fsr1l	equ	0xFE1
 16161                           indf2	equ	0xFDF
 16162                           postinc2	equ	0xFDE
 16163                           postdec2	equ	0xFDD
 16164                           plusw2	equ	0xFDB
 16165                           fsr2h	equ	0xFDA
 16166                           fsr2l	equ	0xFD9
 16167                           status	equ	0xFD8
 16168                           
 16169                           	psect	rparam
 16170  0000                     tosu	equ	0xFFF
 16171                           tosh	equ	0xFFE
 16172                           tosl	equ	0xFFD
 16173                           pclatu	equ	0xFFB
 16174                           pclath	equ	0xFFA
 16175                           tblptru	equ	0xFF8
 16176                           tblptrh	equ	0xFF7
 16177                           tblptrl	equ	0xFF6
 16178                           tablat	equ	0xFF5
 16179                           prodh	equ	0xFF4
 16180                           prodl	equ	0xFF3
 16181                           intcon	equ	0xFF2
 16182                           intcon2	equ	0xFF1
 16183                           indf0	equ	0xFEF
 16184                           postinc0	equ	0xFEE
 16185                           fsr0h	equ	0xFEA
 16186                           fsr0l	equ	0xFE9
 16187                           wreg	equ	0xFE8
 16188                           postinc1	equ	0xFE6
 16189                           postdec1	equ	0xFE5
 16190                           fsr1h	equ	0xFE2
 16191                           fsr1l	equ	0xFE1
 16192                           indf2	equ	0xFDF
 16193                           postinc2	equ	0xFDE
 16194                           postdec2	equ	0xFDD
 16195                           plusw2	equ	0xFDB
 16196                           fsr2h	equ	0xFDA
 16197                           fsr2l	equ	0xFD9
 16198                           status	equ	0xFD8


Data Sizes:
    Strings     123
    Constant    201
    Data        23
    BSS         65
    Persistent  7
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     95      95
    BANK0           160     87     150
    BANK1           256     34      66
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    NULL.printFn	PTR FTN(unsigned char ,)PTR void  size(2) Largest target is 0

    ?___ftsub	float  size(2) Largest target is 0

    ?___ftpack	float  size(2) Largest target is 4
		 -> STR_52(CODE[4]), STR_51(CODE[4]), STR_50(CODE[4]), STR_49(CODE[4]), 
		 -> STR_48(CODE[4]), STR_47(CODE[4]), STR_46(CODE[4]), STR_45(CODE[4]), 
		 -> STR_44(CODE[4]), STR_43(CODE[4]), STR_42(CODE[4]), STR_41(CODE[4]), 
		 -> STR_40(CODE[4]), STR_39(CODE[4]), ADRES(DATA[2]), STR_37(CODE[4]), 
		 -> STR_36(CODE[4]), STR_35(CODE[4]), STR_34(CODE[4]), STR_33(CODE[4]), 
		 -> STR_32(CODE[4]), STR_31(CODE[4]), STR_16(CODE[4]), STR_15(CODE[4]), 
		 -> STR_14(CODE[4]), STR_13(CODE[4]), STR_12(CODE[4]), STR_11(CODE[4]), 
		 -> STR_10(CODE[4]), STR_7(CODE[4]), STR_6(CODE[4]), STR_5(CODE[4]), 
		 -> STR_4(CODE[4]), STR_3(CODE[4]), STR_2(CODE[4]), STR_1(CODE[4]), 

    ?___lldiv	unsigned long  size(2) Largest target is 0

    ?___asftsub	float  size(2) Largest target is 4
		 -> STR_52(CODE[4]), STR_51(CODE[4]), STR_50(CODE[4]), STR_49(CODE[4]), 
		 -> STR_48(CODE[4]), STR_47(CODE[4]), STR_46(CODE[4]), STR_45(CODE[4]), 
		 -> STR_44(CODE[4]), STR_43(CODE[4]), STR_42(CODE[4]), STR_41(CODE[4]), 
		 -> STR_40(CODE[4]), STR_39(CODE[4]), STR_37(CODE[4]), STR_36(CODE[4]), 
		 -> STR_35(CODE[4]), STR_34(CODE[4]), STR_33(CODE[4]), STR_32(CODE[4]), 
		 -> STR_31(CODE[4]), STR_16(CODE[4]), STR_15(CODE[4]), STR_14(CODE[4]), 
		 -> STR_13(CODE[4]), STR_12(CODE[4]), STR_11(CODE[4]), STR_10(CODE[4]), 
		 -> STR_7(CODE[4]), STR_6(CODE[4]), STR_5(CODE[4]), STR_4(CODE[4]), 
		 -> STR_3(CODE[4]), STR_2(CODE[4]), STR_1(CODE[4]), 

    ?___lltoft	float  size(2) Largest target is 0

    ?__tdiv_to_l_	unsigned long  size(2) Largest target is 0

    ?__div_to_l_	unsigned long  size(2) Largest target is 0

    ?___fttol	long  size(2) Largest target is 4
		 -> STR_52(CODE[4]), STR_51(CODE[4]), STR_50(CODE[4]), STR_49(CODE[4]), 
		 -> STR_48(CODE[4]), STR_47(CODE[4]), STR_46(CODE[4]), STR_45(CODE[4]), 
		 -> STR_44(CODE[4]), STR_43(CODE[4]), STR_42(CODE[4]), STR_41(CODE[4]), 
		 -> STR_40(CODE[4]), STR_39(CODE[4]), STR_37(CODE[4]), STR_36(CODE[4]), 
		 -> STR_35(CODE[4]), STR_34(CODE[4]), STR_33(CODE[4]), STR_32(CODE[4]), 
		 -> STR_31(CODE[4]), STR_16(CODE[4]), STR_15(CODE[4]), STR_14(CODE[4]), 
		 -> STR_13(CODE[4]), STR_12(CODE[4]), STR_11(CODE[4]), STR_10(CODE[4]), 
		 -> STR_7(CODE[4]), STR_6(CODE[4]), STR_5(CODE[4]), STR_4(CODE[4]), 
		 -> STR_3(CODE[4]), STR_2(CODE[4]), STR_1(CODE[4]), 

    ?___asftmul	float  size(2) Largest target is 0

    ?___ftneg	float  size(2) Largest target is 4
		 -> STR_52(CODE[4]), STR_51(CODE[4]), STR_50(CODE[4]), STR_49(CODE[4]), 
		 -> STR_48(CODE[4]), STR_47(CODE[4]), STR_46(CODE[4]), STR_45(CODE[4]), 
		 -> STR_44(CODE[4]), STR_43(CODE[4]), STR_42(CODE[4]), STR_41(CODE[4]), 
		 -> STR_40(CODE[4]), STR_39(CODE[4]), STR_37(CODE[4]), STR_36(CODE[4]), 
		 -> STR_35(CODE[4]), STR_34(CODE[4]), STR_33(CODE[4]), STR_32(CODE[4]), 
		 -> STR_31(CODE[4]), STR_16(CODE[4]), STR_15(CODE[4]), STR_14(CODE[4]), 
		 -> STR_13(CODE[4]), STR_12(CODE[4]), STR_11(CODE[4]), STR_10(CODE[4]), 
		 -> STR_7(CODE[4]), STR_6(CODE[4]), STR_5(CODE[4]), STR_4(CODE[4]), 
		 -> STR_3(CODE[4]), STR_2(CODE[4]), STR_1(CODE[4]), 

    ?_scale	float  size(2) Largest target is 0

    ?_fround	float  size(2) Largest target is 0

    ?_printTemp	PTR void  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    ?_lowbit	unsigned long  size(2) Largest target is 4
		 -> lowbit@log2Val(COMRAM[4]), 

    ?_getTemp	unsigned long  size(2) Largest target is 0

    ?___ftdiv	float  size(2) Largest target is 0

    ?___asftadd	float  size(2) Largest target is 4
		 -> STR_52(CODE[4]), STR_51(CODE[4]), STR_50(CODE[4]), STR_49(CODE[4]), 
		 -> STR_48(CODE[4]), STR_47(CODE[4]), STR_46(CODE[4]), STR_45(CODE[4]), 
		 -> STR_44(CODE[4]), STR_43(CODE[4]), STR_42(CODE[4]), STR_41(CODE[4]), 
		 -> STR_40(CODE[4]), STR_39(CODE[4]), STR_37(CODE[4]), STR_36(CODE[4]), 
		 -> STR_35(CODE[4]), STR_34(CODE[4]), STR_33(CODE[4]), STR_32(CODE[4]), 
		 -> STR_31(CODE[4]), STR_16(CODE[4]), STR_15(CODE[4]), STR_14(CODE[4]), 
		 -> STR_13(CODE[4]), STR_12(CODE[4]), STR_11(CODE[4]), STR_10(CODE[4]), 
		 -> STR_7(CODE[4]), STR_6(CODE[4]), STR_5(CODE[4]), STR_4(CODE[4]), 
		 -> STR_3(CODE[4]), STR_2(CODE[4]), STR_1(CODE[4]), 

    ?___ftadd	float  size(2) Largest target is 4
		 -> STR_52(CODE[4]), STR_51(CODE[4]), STR_50(CODE[4]), STR_49(CODE[4]), 
		 -> STR_48(CODE[4]), STR_47(CODE[4]), STR_46(CODE[4]), STR_45(CODE[4]), 
		 -> STR_44(CODE[4]), STR_43(CODE[4]), STR_42(CODE[4]), STR_41(CODE[4]), 
		 -> STR_40(CODE[4]), STR_39(CODE[4]), ADRES(DATA[2]), STR_37(CODE[4]), 
		 -> STR_36(CODE[4]), STR_35(CODE[4]), STR_34(CODE[4]), STR_33(CODE[4]), 
		 -> STR_32(CODE[4]), STR_31(CODE[4]), STR_16(CODE[4]), STR_15(CODE[4]), 
		 -> STR_14(CODE[4]), STR_13(CODE[4]), STR_12(CODE[4]), STR_11(CODE[4]), 
		 -> STR_10(CODE[4]), STR_7(CODE[4]), STR_6(CODE[4]), STR_5(CODE[4]), 
		 -> STR_4(CODE[4]), STR_3(CODE[4]), STR_2(CODE[4]), STR_1(CODE[4]), 

    ?___ftmul	float  size(2) Largest target is 0

    ?___lwtoft	float  size(2) Largest target is 0

    ?_printRTC	PTR void  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    ?___llmod	unsigned long  size(2) Largest target is 4
		 -> STR_52(CODE[4]), STR_51(CODE[4]), STR_50(CODE[4]), STR_49(CODE[4]), 
		 -> STR_48(CODE[4]), STR_47(CODE[4]), STR_46(CODE[4]), STR_45(CODE[4]), 
		 -> STR_44(CODE[4]), STR_43(CODE[4]), STR_42(CODE[4]), STR_41(CODE[4]), 
		 -> STR_40(CODE[4]), STR_39(CODE[4]), STR_37(CODE[4]), STR_36(CODE[4]), 
		 -> STR_35(CODE[4]), STR_34(CODE[4]), STR_33(CODE[4]), STR_32(CODE[4]), 
		 -> STR_31(CODE[4]), STR_16(CODE[4]), STR_15(CODE[4]), STR_14(CODE[4]), 
		 -> STR_13(CODE[4]), STR_12(CODE[4]), STR_11(CODE[4]), STR_10(CODE[4]), 
		 -> STR_7(CODE[4]), STR_6(CODE[4]), STR_5(CODE[4]), STR_4(CODE[4]), 
		 -> STR_3(CODE[4]), STR_2(CODE[4]), STR_1(CODE[4]), 

    ?___awdiv	int  size(2) Largest target is 0

    ?___awmod	int  size(2) Largest target is 4
		 -> STR_52(CODE[4]), STR_51(CODE[4]), STR_50(CODE[4]), STR_49(CODE[4]), 
		 -> STR_48(CODE[4]), STR_47(CODE[4]), STR_46(CODE[4]), STR_45(CODE[4]), 
		 -> STR_44(CODE[4]), STR_43(CODE[4]), STR_42(CODE[4]), STR_41(CODE[4]), 
		 -> STR_40(CODE[4]), STR_39(CODE[4]), STR_37(CODE[4]), STR_36(CODE[4]), 
		 -> STR_35(CODE[4]), STR_34(CODE[4]), STR_33(CODE[4]), STR_32(CODE[4]), 
		 -> STR_31(CODE[4]), STR_16(CODE[4]), STR_15(CODE[4]), STR_14(CODE[4]), 
		 -> STR_13(CODE[4]), STR_12(CODE[4]), STR_11(CODE[4]), STR_10(CODE[4]), 
		 -> STR_7(CODE[4]), STR_6(CODE[4]), STR_5(CODE[4]), STR_4(CODE[4]), 
		 -> STR_3(CODE[4]), STR_2(CODE[4]), STR_1(CODE[4]), 

    ?___lwmod	unsigned int  size(2) Largest target is 4
		 -> STR_52(CODE[4]), STR_51(CODE[4]), STR_50(CODE[4]), STR_49(CODE[4]), 
		 -> STR_48(CODE[4]), STR_47(CODE[4]), STR_46(CODE[4]), STR_45(CODE[4]), 
		 -> STR_44(CODE[4]), STR_43(CODE[4]), STR_42(CODE[4]), STR_41(CODE[4]), 
		 -> STR_40(CODE[4]), STR_39(CODE[4]), STR_37(CODE[4]), STR_36(CODE[4]), 
		 -> STR_35(CODE[4]), STR_34(CODE[4]), STR_33(CODE[4]), STR_32(CODE[4]), 
		 -> STR_31(CODE[4]), STR_16(CODE[4]), STR_15(CODE[4]), STR_14(CODE[4]), 
		 -> STR_13(CODE[4]), STR_12(CODE[4]), STR_11(CODE[4]), STR_10(CODE[4]), 
		 -> STR_7(CODE[4]), STR_6(CODE[4]), STR_5(CODE[4]), STR_4(CODE[4]), 
		 -> STR_3(CODE[4]), STR_2(CODE[4]), STR_1(CODE[4]), 

    ?_loadTime	struct sDate size(2) Largest target is 0

    ?___wmul	unsigned int  size(2) Largest target is 4
		 -> STR_52(CODE[4]), STR_51(CODE[4]), STR_50(CODE[4]), STR_49(CODE[4]), 
		 -> STR_48(CODE[4]), STR_47(CODE[4]), STR_46(CODE[4]), STR_45(CODE[4]), 
		 -> STR_44(CODE[4]), STR_43(CODE[4]), STR_42(CODE[4]), STR_41(CODE[4]), 
		 -> STR_40(CODE[4]), STR_39(CODE[4]), STR_37(CODE[4]), STR_36(CODE[4]), 
		 -> STR_35(CODE[4]), STR_34(CODE[4]), STR_33(CODE[4]), STR_32(CODE[4]), 
		 -> STR_31(CODE[4]), STR_16(CODE[4]), STR_15(CODE[4]), STR_14(CODE[4]), 
		 -> STR_13(CODE[4]), STR_12(CODE[4]), STR_11(CODE[4]), STR_10(CODE[4]), 
		 -> STR_7(CODE[4]), STR_6(CODE[4]), STR_5(CODE[4]), STR_4(CODE[4]), 
		 -> STR_3(CODE[4]), STR_2(CODE[4]), STR_1(CODE[4]), 

    ?_hibit	unsigned long  size(2) Largest target is 4
		 -> hibit@log2Val(COMRAM[4]), 

    ?_log2	unsigned long  size(2) Largest target is 0

    __asftsub@f1p	PTR float  size(2) Largest target is 3
		 -> sprintf@fval(BANK0[3]), 

    __asftmul@f1p	PTR float  size(2) Largest target is 3
		 -> sprintf@integ(BANK0[3]), 

    __asftadd@f1p	PTR float  size(2) Largest target is 3
		 -> sprintf@fval(BANK0[3]), getTemp@total(BANK0[3]), 

    sprintf@_val._cp	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_53(CODE[7]), sprintf@c(BANK0[1]), STR_52(CODE[4]), STR_51(CODE[4]), 
		 -> STR_50(CODE[4]), STR_49(CODE[4]), STR_48(CODE[4]), STR_47(CODE[4]), 
		 -> STR_46(CODE[4]), STR_45(CODE[4]), STR_44(CODE[4]), STR_43(CODE[4]), 
		 -> STR_42(CODE[4]), STR_41(CODE[4]), STR_40(CODE[4]), STR_39(CODE[4]), 
		 -> STR_37(CODE[4]), STR_36(CODE[4]), STR_35(CODE[4]), STR_34(CODE[4]), 
		 -> STR_33(CODE[4]), STR_32(CODE[4]), STR_31(CODE[4]), STR_16(CODE[4]), 
		 -> STR_15(CODE[4]), STR_14(CODE[4]), STR_13(CODE[4]), STR_12(CODE[4]), 
		 -> STR_11(CODE[4]), STR_10(CODE[4]), STR_7(CODE[4]), STR_6(CODE[4]), 
		 -> STR_5(CODE[4]), STR_4(CODE[4]), STR_3(CODE[4]), STR_2(CODE[4]), 
		 -> STR_1(CODE[4]), 

    sprintf@f	PTR const unsigned char  size(2) Largest target is 17
		 -> STR_30(CODE[10]), STR_29(CODE[10]), STR_28(CODE[12]), STR_27(CODE[12]), 
		 -> STR_26(CODE[15]), STR_25(CODE[15]), STR_24(CODE[15]), STR_23(CODE[14]), 
		 -> STR_22(CODE[14]), STR_21(CODE[17]), STR_20(CODE[16]), STR_19(CODE[17]), 
		 -> STR_18(CODE[15]), STR_17(CODE[13]), STR_9(CODE[5]), STR_8(CODE[5]), 

    sprintf@sp	PTR unsigned char  size(2) Largest target is 9
		 -> printRTC@str(BANK0[9]), writeFloat@str(BANK0[9]), writeLong@str(COMRAM[9]), 

    ?_sprintf	int  size(2) Largest target is 4
		 -> STR_52(CODE[4]), STR_51(CODE[4]), STR_50(CODE[4]), STR_49(CODE[4]), 
		 -> STR_48(CODE[4]), STR_47(CODE[4]), STR_46(CODE[4]), STR_45(CODE[4]), 
		 -> STR_44(CODE[4]), STR_43(CODE[4]), STR_42(CODE[4]), STR_41(CODE[4]), 
		 -> STR_40(CODE[4]), STR_39(CODE[4]), STR_37(CODE[4]), STR_36(CODE[4]), 
		 -> STR_35(CODE[4]), STR_34(CODE[4]), STR_33(CODE[4]), STR_32(CODE[4]), 
		 -> STR_31(CODE[4]), STR_16(CODE[4]), STR_15(CODE[4]), STR_14(CODE[4]), 
		 -> STR_13(CODE[4]), STR_12(CODE[4]), STR_11(CODE[4]), STR_10(CODE[4]), 
		 -> STR_7(CODE[4]), STR_6(CODE[4]), STR_5(CODE[4]), STR_4(CODE[4]), 
		 -> STR_3(CODE[4]), STR_2(CODE[4]), STR_1(CODE[4]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    S736$_cp	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_53(CODE[7]), sprintf@c(BANK0[1]), STR_52(CODE[4]), STR_51(CODE[4]), 
		 -> STR_50(CODE[4]), STR_49(CODE[4]), STR_48(CODE[4]), STR_47(CODE[4]), 
		 -> STR_46(CODE[4]), STR_45(CODE[4]), STR_44(CODE[4]), STR_43(CODE[4]), 
		 -> STR_42(CODE[4]), STR_41(CODE[4]), STR_40(CODE[4]), STR_39(CODE[4]), 
		 -> STR_37(CODE[4]), STR_36(CODE[4]), STR_35(CODE[4]), STR_34(CODE[4]), 
		 -> STR_33(CODE[4]), STR_32(CODE[4]), STR_31(CODE[4]), STR_16(CODE[4]), 
		 -> STR_15(CODE[4]), STR_14(CODE[4]), STR_13(CODE[4]), STR_12(CODE[4]), 
		 -> STR_11(CODE[4]), STR_10(CODE[4]), STR_7(CODE[4]), STR_6(CODE[4]), 
		 -> STR_5(CODE[4]), STR_4(CODE[4]), STR_3(CODE[4]), STR_2(CODE[4]), 
		 -> STR_1(CODE[4]), 

    _val._str._cp	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_53(CODE[7]), sprintf@c(BANK0[1]), STR_52(CODE[4]), STR_51(CODE[4]), 
		 -> STR_50(CODE[4]), STR_49(CODE[4]), STR_48(CODE[4]), STR_47(CODE[4]), 
		 -> STR_46(CODE[4]), STR_45(CODE[4]), STR_44(CODE[4]), STR_43(CODE[4]), 
		 -> STR_42(CODE[4]), STR_41(CODE[4]), STR_40(CODE[4]), STR_39(CODE[4]), 
		 -> STR_37(CODE[4]), STR_36(CODE[4]), STR_35(CODE[4]), STR_34(CODE[4]), 
		 -> STR_33(CODE[4]), STR_32(CODE[4]), STR_31(CODE[4]), STR_16(CODE[4]), 
		 -> STR_15(CODE[4]), STR_14(CODE[4]), STR_13(CODE[4]), STR_12(CODE[4]), 
		 -> STR_11(CODE[4]), STR_10(CODE[4]), STR_7(CODE[4]), STR_6(CODE[4]), 
		 -> STR_5(CODE[4]), STR_4(CODE[4]), STR_3(CODE[4]), STR_2(CODE[4]), 
		 -> STR_1(CODE[4]), 

    sp__printTemp	PTR void  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    sp__printRTC	PTR void  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    writeString@string	PTR unsigned char  size(2) Largest target is 9
		 -> STR_38(CODE[3]), printRTC@str(BANK0[9]), writeFloat@str(BANK0[9]), writeLong@str(COMRAM[9]), 

    sp_S45$3	PTR void  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    menu.printFn	PTR FTN(unsigned char ,)PTR void  size(2) Largest target is 3
		 -> printTemp(), printRTC(), 

    menu	PTR struct sMenu size(2) Largest target is 5
		 -> NULL(NULL[0]), rtcMenu(BANK1[5]), tempMenu(BANK1[5]), 

    tempMenu.printFn	PTR FTN(unsigned char ,)PTR void  size(2) Largest target is 3
		 -> printTemp(), printRTC(), 

    S45sMenu$printFn	PTR FTN(unsigned char ,)PTR void  size(2) Largest target is 3
		 -> printTemp(), printRTC(), 

    rtcMenu.printFn	PTR FTN(unsigned char ,)PTR void  size(2) Largest target is 3
		 -> printTemp(), printRTC(), 

    dow	PTR const unsigned char [7] size(2) Largest target is 4
		 -> STR_52(CODE[4]), STR_51(CODE[4]), STR_50(CODE[4]), STR_49(CODE[4]), 
		 -> STR_48(CODE[4]), STR_47(CODE[4]), STR_46(CODE[4]), STR_45(CODE[4]), 
		 -> STR_44(CODE[4]), STR_43(CODE[4]), STR_42(CODE[4]), STR_41(CODE[4]), 
		 -> STR_40(CODE[4]), STR_39(CODE[4]), STR_37(CODE[4]), STR_36(CODE[4]), 
		 -> STR_35(CODE[4]), STR_34(CODE[4]), STR_33(CODE[4]), STR_32(CODE[4]), 
		 -> STR_31(CODE[4]), STR_16(CODE[4]), STR_15(CODE[4]), STR_14(CODE[4]), 
		 -> STR_13(CODE[4]), STR_12(CODE[4]), STR_11(CODE[4]), STR_10(CODE[4]), 
		 -> STR_7(CODE[4]), STR_6(CODE[4]), STR_5(CODE[4]), STR_4(CODE[4]), 
		 -> STR_3(CODE[4]), STR_2(CODE[4]), STR_1(CODE[4]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _high_isr in COMRAM

    _high_isr->_printTemp
    _getTemp->___asftadd
    ___lwtoft->___ftpack
    ___ftdiv->___ftpack
    _writeFloat->_sprintf
    _printRTC->_sprintf
    _writeString->_writeChar
    _writeChar->___wmul
    _sprintf->___asftsub
    ___lltoft->___ftpack
    ___fttol->___wmul
    ___asftsub->___ftsub
    ___ftsub->___ftadd
    ___asftmul->___ftmul
    ___asftadd->_fround
    ___ftadd->___ftmul
    _scale->___ftmul
    ___wmul->___awdiv
    ___ftmul->___fttol
    _fround->___ftmul
    _buttons->i2_update
    i2_update->i2_writeDigit
    i2_writeDigit->i2_log2
    i2_log2->_hibit
    i2_spi->i2_rotate
    ___llmod->___lldiv
    ___awdiv->___awmod
    _dayOfWeek->___llmod
    _dayOfWeek->___wmul
    ___llmod->___lldiv
    _checkDST->_dayOfWeek
    _dayOfWeek->___llmod
    _dayOfWeek->___wmul
    _tick->_daysOfMonth
    _checkDST->_dayOfWeek
    _daysOfMonth->___lwmod
    _daysOfMonth->___lwmod
    _tick->_daysOfMonth

Critical Paths under _main in BANK0

    None.

Critical Paths under _high_isr in BANK0

    _high_isr->_printRTC
    _printTemp->_writeFloat
    _writeFloat->_sprintf

Critical Paths under _main in BANK1

    _main->_update
    _update->_writeDigit
    _writeDigit->_spi
    _spi->_rotate
    _setup->_initRTC
    _initRTC->_loadTime
    _startDisp->_setBrightness
    _startDisp->_setTest

Critical Paths under _high_isr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _high_isr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _high_isr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _high_isr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _high_isr in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _high_isr in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _high_isr in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 9     4      5     862
                                             25 BANK1      9     4      5
                              _setup
                             _update
 ---------------------------------------------------------------------------------
 (1) _update                                               6     6      0     787
                                             19 BANK1      6     6      0
                         _writeDigit
                                _spi
 ---------------------------------------------------------------------------------
 (2) _writeDigit                                           5     3      2     496
                                             14 BANK1      5     3      2
                                _spi
                               _log2
                             _rotate
 ---------------------------------------------------------------------------------
 (3) _rotate                                               6     5      1     136
                                              0 BANK1      6     5      1
 ---------------------------------------------------------------------------------
 (3) _log2                                                 8     4      4      46
                                              0 BANK1      8     4      4
 ---------------------------------------------------------------------------------
 (2) _spi                                                  8     6      2     157
                                              6 BANK1      8     6      2
                               _wait
                             _rotate (ARG)
 ---------------------------------------------------------------------------------
 (3) _wait                                                 4     0      4      22
                                              0 BANK1      4     0      4
 ---------------------------------------------------------------------------------
 (1) _setup                                                0     0      0      50
                          _startDisp
                            _initRTC
                           _initTemp
                       _setupButtons
 ---------------------------------------------------------------------------------
 (2) _setupButtons                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _initTemp                                             1     1      0       0
                                              0 BANK1      1     1      0
 ---------------------------------------------------------------------------------
 (2) _initRTC                                              1     1      0       6
                                              9 BANK1      1     1      0
                           _loadTime
 ---------------------------------------------------------------------------------
 (3) _loadTime                                             9     9      0       6
                                              0 BANK1      9     9      0
 ---------------------------------------------------------------------------------
 (2) _startDisp                                            1     1      0      44
                                              1 BANK1      1     1      0
                      _setBrightness
                            _setTest
 ---------------------------------------------------------------------------------
 (3) _setTest                                              1     0      1      22
                                              0 BANK1      1     0      1
 ---------------------------------------------------------------------------------
 (3) _setBrightness                                        1     0      1      22
                                              0 BANK1      1     0      1
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _high_isr                                            16    16      0   37188
                                             71 BANK0     16    16      0
                               _tick
                            _buttons
                           _printRTC
                          _printTemp
 ---------------------------------------------------------------------------------
 (6) _printTemp                                            7     6      1   19163
                                             93 COMRAM     2     1      1
                                             58 BANK0      5     5      0
                        _writeString
                         _writeFloat
                            _getTemp
                             _lowbit
 ---------------------------------------------------------------------------------
 (7) _lowbit                                              11     7      4      69
                                              0 COMRAM    11     7      4
 ---------------------------------------------------------------------------------
 (7) _getTemp                                             20    17      3    3921
                                             82 COMRAM     4     1      3
                                              0 BANK0     16    16      0
                          ___asftadd
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                           ___lwtoft
                             ___wmul
 ---------------------------------------------------------------------------------
 (8) ___lwtoft                                             5     2      3     231
                                              8 COMRAM     5     2      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (8) ___ftdiv                                             17    11      6     489
                                              8 COMRAM    17    11      6
                           ___ftpack
 ---------------------------------------------------------------------------------
 (7) _writeFloat                                          14    10      4   13947
                                             44 BANK0     14    10      4
                          _countBits
                            _sprintf
                        _writeString
                            _getTemp (ARG)
 ---------------------------------------------------------------------------------
 (6) _printRTC                                            18    17      1   14554
                                             93 COMRAM     1     0      1
                                             58 BANK0     13    13      0
                          _countBits
                            _sprintf
                        _writeString
                            ___lwmod
 ---------------------------------------------------------------------------------
 (8) _writeString                                         10     7      3    1067
                                             33 COMRAM    10     7      3
                          _writeChar
                          _countBits
                              _hibit
                             ___wmul
                             i2_log2
 ---------------------------------------------------------------------------------
 (9) _hibit                                               11     7      4      46
                                              0 COMRAM    11     7      4
 ---------------------------------------------------------------------------------
 (9) _countBits                                            5     1      4      90
                                              0 COMRAM     5     1      4
 ---------------------------------------------------------------------------------
 (9) _writeChar                                            3     1      2     305
                                             30 COMRAM     3     1      2
                        _getFontChar
                             ___wmul (ARG)
                             i2_log2
 ---------------------------------------------------------------------------------
 (10) _getFontChar                                         3     2      1      66
                                              0 COMRAM     3     2      1
 ---------------------------------------------------------------------------------
 (8) _sprintf                                             54    42     12   12619
                                             87 COMRAM     6     6      0
                                              0 BANK0     44    32     12
                             _fround
                              _scale
                            _isdigit
                        __tdiv_to_l_
                         __div_to_l_
                          ___asftadd
                          ___asftmul
                            ___ftmul
                          ___asftsub
                            ___awdiv
                             ___ftge
                            ___ftneg
                            ___fttol
                            ___lldiv
                            ___llmod
                           ___lltoft
                            ___lwmod
                             ___wmul
 ---------------------------------------------------------------------------------
 (9) ___lltoft                                             9     5      4     278
                                              8 COMRAM     9     5      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (9) ___lldiv                                             14     6      8     162
                                              0 COMRAM    19    11      8
 ---------------------------------------------------------------------------------
 (9) ___fttol                                             15    11      4     252
                                             30 COMRAM    15    11      4
                           ___ftpack (ARG)
                            ___awdiv (ARG)
                            ___awmod (ARG)
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (9) ___ftneg                                              3     0      3      45
                                              0 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (9) ___ftge                                               9     3      6     136
                                              0 COMRAM     9     3      6
 ---------------------------------------------------------------------------------
 (9) ___asftsub                                            5     0      5    1160
                                             82 COMRAM     5     0      5
                            ___ftsub
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (10) ___ftsub                                             6     0      6    1094
                                             76 COMRAM     6     0      6
                            ___ftadd
 ---------------------------------------------------------------------------------
 (9) ___asftmul                                            5     0      5     601
                                             62 COMRAM     5     0      5
                            ___ftmul
 ---------------------------------------------------------------------------------
 (8) ___asftadd                                            5     0      5    1115
                                             77 COMRAM     5     0      5
                             _fround (ARG)
                            ___ftadd
 ---------------------------------------------------------------------------------
 (8) ___ftadd                                             14     8      6    1049
                                             62 COMRAM    14     8      6
                           ___ftpack
                            ___ftmul (ARG)
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (9) ___ftpack                                             8     3      5     209
                                              0 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (9) __div_to_l_                                          13     7      6     446
                                              0 COMRAM    13     7      6
 ---------------------------------------------------------------------------------
 (9) __tdiv_to_l_                                         17    11      6     303
                                              0 COMRAM    17    11      6
 ---------------------------------------------------------------------------------
 (9) _isdigit                                              3     2      1      68
                                              0 COMRAM     3     2      1
 ---------------------------------------------------------------------------------
 (9) _scale                                               15    12      3    1779
                                             62 COMRAM    12     9      3
                            ___ftmul
                            ___awdiv
                            ___awmod
                            ___fttol (ARG)
                             ___wmul
 ---------------------------------------------------------------------------------
 (8) ___wmul                                               6     2      4     159
                                             22 COMRAM     8     4      4
                            ___awdiv (ARG)
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (8) ___ftmul                                             17    11      6     535
                                             45 COMRAM    17    11      6
                           ___ftpack
                            ___awdiv (ARG)
                            ___awmod (ARG)
                            ___fttol (ARG)
                           ___lwtoft (ARG)
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (9) _fround                                              18    15      3    1372
                                             62 COMRAM    15    12      3
                            ___ftmul
                            ___awdiv
                            ___awmod
                             ___wmul
 ---------------------------------------------------------------------------------
 (6) _buttons                                              0     0      0    2589
                           i2_update
 ---------------------------------------------------------------------------------
 (7) i2_update                                             6     6      0    2589
                                             24 COMRAM     6     6      0
                              i2_spi
                       i2_writeDigit
 ---------------------------------------------------------------------------------
 (8) i2_writeDigit                                         5     3      2    1630
                                             19 COMRAM     5     3      2
                              i2_spi
                           i2_rotate
                             i2_log2
 ---------------------------------------------------------------------------------
 (9) i2_log2                                               8     4      4     150
                                             11 COMRAM     8     4      4
                              _hibit (ARG)
 ---------------------------------------------------------------------------------
 (9) i2_rotate                                             6     5      1     446
                                              0 COMRAM     6     5      1
 ---------------------------------------------------------------------------------
 (9) i2_spi                                                8     6      2     517
                                              6 COMRAM     8     6      2
                           i2_rotate (ARG)
                             i2_wait
 ---------------------------------------------------------------------------------
 (10) i2_wait                                              4     0      4      73
                                              0 COMRAM     4     0      4
 ---------------------------------------------------------------------------------
 (9) ___lwmod                                              6     2      4     159
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (9) ___llmod                                             10     2      8     159
                                             19 COMRAM    11     3      8
                            ___lldiv (ARG)
 ---------------------------------------------------------------------------------
 (10) ___awmod                                             7     3      4     296
                                              0 COMRAM     9     5      4
 ---------------------------------------------------------------------------------
 (9) ___awdiv                                              9     5      4     300
                                              9 COMRAM    13     9      4
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (8) _dayOfWeek                                           11     8      3    1976
                                             30 COMRAM    15    12      3
                            ___awdiv
                            ___awmod
                            ___llmod
                             ___wmul
 ---------------------------------------------------------------------------------
 (9) ___llmod                                             10     2      8     159
                                             19 COMRAM    11     3      8
                            ___lldiv (ARG)
 ---------------------------------------------------------------------------------
 (7) _checkDST                                             8     8      0    5740
                                             45 COMRAM     9     9      0
                               _tick
                          _dayOfWeek
 ---------------------------------------------------------------------------------
 (8) _dayOfWeek                                           11     8      3    1976
                                             30 COMRAM    15    12      3
                            ___awdiv
                            ___awmod
                            ___llmod
                             ___wmul
 ---------------------------------------------------------------------------------
 (6) _tick                                                 2     1      1     882
                                             12 COMRAM     2     1      1
                        _daysOfMonth
                           _checkDST
 ---------------------------------------------------------------------------------
 (7) _checkDST                                             8     8      0    5740
                                             45 COMRAM     9     9      0
                               _tick
                          _dayOfWeek
 ---------------------------------------------------------------------------------
 (7) _daysOfMonth                                          5     2      3     406
                                              7 COMRAM     5     2      3
                            ___lwmod
 ---------------------------------------------------------------------------------
 (9) ___lwmod                                              6     2      4     159
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (7) _daysOfMonth                                          5     2      3     406
                                              7 COMRAM     5     2      3
                            ___lwmod
 ---------------------------------------------------------------------------------
 (6) _tick                                                 2     1      1     882
                                             12 COMRAM     2     1      1
                        _daysOfMonth
                           _checkDST
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 10
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _setup
     _startDisp
       _setBrightness
       _setTest
     _initRTC
       _loadTime
     _initTemp
     _setupButtons
   _update
     _writeDigit
       _spi
         _wait
         _rotate (ARG)
       _log2
       _rotate
     _spi
       _wait
       _rotate (ARG)

 _high_isr (ROOT)
   _tick
     _daysOfMonth
       ___lwmod
     _checkDST
       _dayOfWeek
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___llmod
           ___lldiv (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
   _buttons
     i2_update
       i2_spi
         i2_rotate (ARG)
         i2_wait (ARG)
       i2_writeDigit
         i2_spi
           i2_rotate (ARG)
           i2_wait (ARG)
         i2_rotate
         i2_log2
           _hibit (ARG)
   _printRTC
     _countBits
     _sprintf
       _fround
         ___ftmul
           ___ftpack
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___fttol (ARG)
             ___ftpack (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       _scale
         ___ftmul
           ___ftpack
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___fttol (ARG)
             ___ftpack (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___fttol (ARG)
           ___ftpack (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       _isdigit
       __tdiv_to_l_
       __div_to_l_
       ___asftadd
         _fround (ARG)
           ___ftmul
             ___ftpack
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___fttol (ARG)
               ___ftpack (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftadd (ARG)
           ___ftpack
           ___ftmul (ARG)
             ___ftpack
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___fttol (ARG)
               ___ftpack (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___lwtoft (ARG)
             ___ftpack
       ___asftmul
         ___ftmul
           ___ftpack
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___fttol (ARG)
             ___ftpack (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftmul
         ___ftpack
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___fttol (ARG)
           ___ftpack (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___asftsub
         ___ftsub
           ___ftadd
             ___ftpack
             ___ftmul (ARG)
               ___ftpack
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___fttol (ARG)
                 ___ftpack (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___lwtoft (ARG)
               ___ftpack
         ___lltoft (ARG)
           ___ftpack
       ___awdiv
         ___awmod (ARG)
       ___ftge
       ___ftneg
       ___fttol
         ___ftpack (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___lldiv
       ___llmod
         ___lldiv (ARG)
       ___lltoft
         ___ftpack
       ___lwmod
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     _writeString
       _writeChar
         _getFontChar
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         i2_log2 (ARG)
           _hibit (ARG)
       _countBits
       _hibit
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       i2_log2
         _hibit (ARG)
     ___lwmod
   _printTemp
     _writeString
       _writeChar
         _getFontChar
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         i2_log2 (ARG)
           _hibit (ARG)
       _countBits
       _hibit
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       i2_log2
         _hibit (ARG)
     _writeFloat
       _countBits
       _sprintf
         _fround
           ___ftmul
             ___ftpack
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___fttol (ARG)
               ___ftpack (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         _scale
           ___ftmul
             ___ftpack
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___fttol (ARG)
               ___ftpack (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___fttol (ARG)
             ___ftpack (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         _isdigit
         __tdiv_to_l_
         __div_to_l_
         ___asftadd
           _fround (ARG)
             ___ftmul
               ___ftpack
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___fttol (ARG)
                 ___ftpack (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftadd (ARG)
             ___ftpack
             ___ftmul (ARG)
               ___ftpack
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___fttol (ARG)
                 ___ftpack (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___lwtoft (ARG)
               ___ftpack
         ___asftmul
           ___ftmul
             ___ftpack
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___fttol (ARG)
               ___ftpack (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftmul
           ___ftpack
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___fttol (ARG)
             ___ftpack (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___asftsub
           ___ftsub
             ___ftadd
               ___ftpack
               ___ftmul (ARG)
                 ___ftpack
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___fttol (ARG)
                   ___ftpack (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___lwtoft (ARG)
                 ___ftpack
           ___lltoft (ARG)
             ___ftpack
         ___awdiv
           ___awmod (ARG)
         ___ftge
         ___ftneg
         ___fttol
           ___ftpack (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___lldiv
         ___llmod
           ___lldiv (ARG)
         ___lltoft
           ___ftpack
         ___lwmod
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       _writeString
         _writeChar
           _getFontChar
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           i2_log2 (ARG)
             _hibit (ARG)
         _countBits
         _hibit
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         i2_log2
           _hibit (ARG)
       _getTemp (ARG)
         ___asftadd
           _fround (ARG)
             ___ftmul
               ___ftpack
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___fttol (ARG)
                 ___ftpack (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftadd (ARG)
             ___ftpack
             ___ftmul (ARG)
               ___ftpack
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___fttol (ARG)
                 ___ftpack (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___lwtoft (ARG)
               ___ftpack
         ___ftadd
           ___ftpack
           ___ftmul (ARG)
             ___ftpack
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___fttol (ARG)
               ___ftpack (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___ftdiv
           ___ftpack
         ___ftmul
           ___ftpack
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___fttol (ARG)
             ___ftpack (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___lwtoft
           ___ftpack
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     _getTemp
       ___asftadd
         _fround (ARG)
           ___ftmul
             ___ftpack
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___fttol (ARG)
               ___ftpack (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftadd (ARG)
           ___ftpack
           ___ftmul (ARG)
             ___ftpack
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___fttol (ARG)
               ___ftpack (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___lwtoft (ARG)
             ___ftpack
       ___ftadd
         ___ftpack
         ___ftmul (ARG)
           ___ftpack
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___fttol (ARG)
             ___ftpack (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___lwtoft (ARG)
           ___ftpack
       ___ftdiv
         ___ftpack
       ___ftmul
         ___ftpack
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___fttol (ARG)
           ___ftpack (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___lwtoft
         ___ftpack
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     _lowbit

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0       0      21        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100     22      42       7       25.8%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     57      96       5       93.8%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     5F      5F       1      100.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0      14       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     137      20        0.0%
DATA                 0      0     14B       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.20 build 52243 
Symbol Table                                                                                   Sun Nov 17 18:06:41 2013

           ___asftadd@f2 0050            ___asftadd@f1p 004E                       _GO 007E11  
           ___awdiv@sign 0014      ___wmul@multiplicand 0019             ___asftmul@f2 0041  
           ___asftsub@f2 0055             ___ftadd@exp1 004C             ___ftadd@exp2 004B  
            __CFG_LVP$ON 000000             ___ftadd@sign 004A                      l140 1AC2  
                    l170 3E6C                      l164 3724                      l523 4184  
                    _GIE 007F97                      _dow 00DD                      _spi 365A  
           ___awmod@sign 0009                      prod 000FF3                      tosl 000FFD  
                    wreg 000FE8             __CFG_FOSC$HS 000000            ___asftmul@f1p 003F  
            _sprintf$751 006F            ___asftsub@f1p 0053             ___ftdiv@cntr 0014  
           ___ftdiv@sign 0019             __CFG_WDT$OFF 000000                     l5255 40C4  
                   l5505 3CC0                     l5249 4086                     l5291 168A  
                   l5283 15D2                     l5293 16AE                     l5285 161E  
                   l5287 1642                     l5289 1666                     l5297 16D8  
                   l5491 416A                     l5299 1A76                     l5487 46F4  
                   l7291 1A54                     l7293 1A60                     l7285 1736  
                   l7295 1A6C                     l7287 1A3C                     l7289 1A48  
                   ?_spi 0106                     STR_1 7FF3                     STR_2 7FEF  
                   STR_3 7FDF                     STR_4 7FF7                     STR_5 7FEB  
                   STR_6 7FE3                     STR_7 7FE7                     STR_8 7FDA  
                   STR_9 7FD5                     _LATB 000F8A                     _LATC 000F8B  
                   u3024 3C90                     u3025 3C8A                     u3034 3CA8  
                   u3035 3CA2                     u2904 1A90                     u2905 1A88  
                   _PEIE 007F96                     u2880 16CA                     u2954 36C0  
                   u2874 15E8                     u2955 36B8                     u2875 15E2  
                   u2965 36D2                     u2966 36DA                     u2894 16F2  
                   u2886 16CC                     u2895 16EA                     u2985 47C0  
                   u2986 47C6                     i2l80 2E88                     i2l81 2F2E  
                   i2l82 2F2A                     i2l83 2F2E                     i2l79 2E8C  
                   _TMR0 000FD6                     _TMR1 000FCE    __end_of_setBrightness 47B0  
                   _date 0122                     _log2 414E                     _main 4068  
           ___ftpack@arg 0001                     _menu 00F4             ___ftpack@exp 0004  
                   _tick 382A                     _wait 46F4                     fsr0h 000FEA  
                   fsr1h 000FE2                     indf0 000FEF                     fsr0l 000FE9  
                   fsr2h 000FDA                     fsr1l 000FE1                     indf2 000FDF  
                   fsr2l 000FD9                     pclat 000FFA                     prodh 000FF4  
                   prodl 000FF3                     start 0018             _sprintf$1397 006C  
          __CFG_MCLRE$ON 000000             ___ftmul@cntr 003D           writeString@cnt 002B  
           ___ftmul@sign 003E             ___fttol@exp1 002D             ___fttol@lval 0029  
                  ??_spi 0108            __CFG_PLLDIV$4 000000                    ?_log2 0100  
                  ?_main 0119          __end_of___awdiv 3DE8                    _ADRES 000FC3  
        __end_of___ftadd 2DBA                    STR_20 7F94                    STR_21 7F83  
                  STR_30 7FB7                    STR_22 7FB3                    STR_23 7FB3  
                  STR_24 7F85                    ?_tick 000D                    STR_25 7F95  
                  STR_17 7FC1                    STR_26 7F85                    STR_18 7FA4  
                  STR_50 7FEB                    STR_27 7FB5                    STR_19 7F83  
                  STR_51 7FE3                    STR_28 7FB5                    STR_52 7FE7  
        __end_of___awmod 3FEE                    STR_29 7FB7                    STR_53 7FCE  
                  STR_38 7FFB                    STR_46 7FF3                    STR_47 7FEF  
                  STR_48 7FDF                    STR_49 7FF7                    ?_wait 0100  
        __end_of___ftdiv 3566          __end_of___ftneg 476C          __end_of___lldiv 3EF4  
        __end_of___ftmul 3468                    _T0CON 000FD5          ___awdiv@divisor 000C  
                  _T1CON 000FCD          __end_of___llmod 4222          __end_of___ftsub 4698  
        __end_of___fttol 382A                    _LATA1 007C49                    _LATA3 007C4B  
                  _LATC0 007C58                    _LATA4 007C4C                    _LATC1 007C59  
                  _LATA5 007C4D                    _LATC2 007C5A           __CFG_DEBUG$OFF 000000  
        __end_of___lwmod 44BE                    i2l300 2AB4                    i2l140 1F4A  
                  i2l301 2AC4                    i2l302 2AD4                    i2l126 2828  
                  i2l303 2AE4                    i2l304 2AF4                    i2l305 2B04  
                  i2l306 2B14                    i2l170 43E0                    i2l307 2B24  
                  i2l164 3B80                    i2l309 2B4C                    i2l501 4736  
                  i2l343 15AA                    i2l192 310C                    i2l258 3A5A  
                  i2l523 4450                    i2l507 4244                    i2l294 38F6  
                  i2l278 3234                    i2l390 289A                    i2l608 0BC4  
                  i2l553 239A                    i2l299 2AA4                    i2l647 0A2C  
                  i2l592 02A8                    i2l956 3658          ___awdiv@counter 0013  
                  i2l965 3648                    i2l958 35C4                    i2l997 39AE  
          __CFG_USBDIV$2 000000                    _TRISB 000F93                    _TRISC 000F94  
          __CFG_PWRT$OFF 000000              _writeString 2F68                    i2_spi 3AFE  
           ___lltoft@exp 0011          __end_of_getTemp 2A0E                    _nRBPU 007F8F  
        __end_of_initRTC 4068                    _hibit 4222          __end_of_dpowers 7F0D  
                  _pow10 7F0D                    _scale 1F4C          __end_of_isdigit 4790  
        __end_of_buttons 4394            ___ftpack@sign 0005     __end_ofi2_writeDigit 43E2  
                  _setup 4698          __end_of_setTest 47CE                    pclath 000FFA  
                  tablat 000FF5                    plusw2 000FDB                    status 000FD8  
        __end_of_sprintf 0FAE         __end_ofi2_update 1F4C         __end_ofi2_rotate 4346  
        __initialization 44BE          writeString@bits 0029             __end_of_log2 41B8  
           __end_of_main 40E0             __end_of_tick 38F8             __end_of_wait 471E  
   __size_of_daysOfMonth 00AC           printTemp@units 009E                   ??_log2 0104  
                 ??_main 011E            ___fttol@sign1 0028                   ??_tick 000E  
                 ??_wait 0104            __activetblptr 000002     __size_of_getFontChar 020E  
   __size_of__tdiv_to_l_ 0122                   ?i2_spi 0007                   ?_hibit 0001  
                 _ADCON0 000FC2                   _ADCON1 000FC1                   _ADCON2 000FC0  
       ___llmod@dividend 0014                   ?_scale 003F         ___awdiv@dividend 000A  
                 ?_setup 0001         __end_of___ftpack 39B0         __end_of___lltoft 42EA  
                 i2l1034 2C56                   i2l1035 2DB8                   i2l1108 475E  
                 i2l1038 2C80                   i2l1118 3828                   i2l1241 44B4  
                 i2l1049 2D24                   i2l1074 3356                   i2l1058 2D40  
                 i2l1162 3EE2                   i2l1066 3564                   i2l1083 3346  
                 i2l1172 4210                   i2l1092 3D56                   i2l1068 350E  
                 i2l1077 32F4                   i2l1069 3534                   i2l1098 3466  
                 i2l6031 4440                   i2l6103 3402                   i2l6113 342E  
                 i2l6201 2160                   i2l5401 2644                   i2l6043 2B5E  
                 i2l7011 2DF8                   i2l6045 2BA8                   i2l6037 2A94  
                 i2l6061 24F8                   i2l6109 341E                   i2l5421 2658  
                 i2l5413 2650                   i2l5405 2648                   i2l7021 2E46  
                 i2l7013 2DFC                   i2l6215 236C                   i2l7031 2EA0  
                 i2l7023 2E88                   i2l7015 2E04                   i2l7007 2DE8  
                 i2l6161 3882                   i2l6153 3860                   i2l6145 382C  
                 i2l6401 4362                   i2l6209 22A4                   i2l6233 2C8E  
                 i2l6321 37DA                   i2l5417 2654                   i2l5409 264C  
                 i2l7041 2EFC                   i2l7033 2EA8                   i2l7017 2E20  
                 i2l7009 2DF0                   i2l7025 2E8C                   i2l6171 38D0  
                 i2l5611 32CC                   i2l6227 2C64                   i2l6331 3802  
                 i2l5427 265C                   i2l7035 2ED4                   i2l7043 2F2A  
                 i2l7027 2E94                   i2l7019 2E36                   i2l6165 38AC  
                 i2l6149 3846                   i2l7301 1EF0                   i2l6069 25D0  
                 i2l6085 33BC                   i2l5701 3908                   i2l6261 2CF6  
                 i2l6317 37CA                   i2l5517 4726                   i2l5525 4234  
                 i2l6501 28EC                   i2l7037 2EF6                   i2l7029 2E9C  
                 i2l7303 1EFA                   i2l6351 1B14                   i2l6407 437E  
                 i2l6079 3384                   i2l6191 2096                   i2l5631 331E  
                 i2l6255 2CDE                   i2l6335 3818                   i2l6327 37F2  
                 i2l6511 2956                   i2l5543 4104                   i2l7039 2EFA  
                 i2l6169 38C6                   i2l7305 1F04                   i2l6353 1B2C  
                 i2l5713 3954                   i2l5705 3916                   i2l6257 2CE8  
                 i2l6249 2CC0                   i2l6329 37FE                   i2l6601 02C0  
                 i2l5393 2622                   i2l6441 30A8                   i2l6425 2FB2  
                 i2l7307 1F0E                   i2l6355 1B44                   i2l6363 1B92  
                 i2l6099 33F2                   i2l5627 330E                   i2l5715 3972  
                 i2l5707 3920                   i2l6275 2D5C                   i2l6267 2D14  
                 i2l6259 2CF0                   i2l6603 02FE                   i2l6461 31C8  
                 i2l6357 1B5C                   i2l6365 1F16                   i2l6349 1ADE  
                 i2l6197 2152                   i2l5581 4788                   i2l5637 3336  
                 i2l5653 357E                   i2l5717 397C                   i2l5709 393E  
                 i2l6285 2D94                   i2l6269 2D1E                   i2l6701 070A  
                 i2l6621 039E                   i2l6613 0362                   i2l6541 0084  
                 i2l5397 2640                   i2l5389 261E                   i2l6445 3106  
                 i2l5751 3FB8                   i2l5743 3F9A                   i2l5823 44AA  
                 i2l5815 448A                   i2l6359 1B74                   i2l5639 3342  
                 i2l5591 3262                   i2l5647 3572                   i2l5807 3ED4  
                 i2l6615 0372                   i2l6535 0058                   i2l6447 3108  
                 i2l6473 3222                   i2l5817 4492                   i2l5673 35F4  
                 i2l6801 0ABA                   i2l6713 0782                   i2l6633 0414  
                 i2l6609 032E                   i2l6641 0484                   i2l6537 0076  
                 i2l6529 0032                   i2l5931 3D74                   i2l5763 3FE4  
                 i2l5755 3FCC                   i2l5747 3FAC                   i2l5739 3F8E  
                 i2l5819 4496                   i2l5683 3610                   i2l5771 3CF8  
                 i2l6299 3776                   i2l6811 0B88                   i2l6627 03DC  
                 i2l6619 0386                   i2l6563 0170                   i2l6547 00C2  
                 i2l6555 0130                   i2l5853 39B6                   i2l6469 3210  
                 i2l5749 3FB4                   i2l5845 47CE                   i2l5597 328E  
                 i2l5693 3638                   i2l5781 3D54                   i2l6901 0E80  
                 i2l6813 0B98                   i2l6741 08B2                   i2l6733 083A  
                 i2l6629 03F6                   i2l6581 022A                   i2l6493 2838  
                 i2l5863 3A06                   i2l5943 3D9E                   i2l5759 3FD6  
                 i2l5839 4342                   i2l5695 3644                   i2l5687 3620  
                 i2l5775 3D28                   i2l6751 08DA                   i2l6719 07E0  
                 i2l6647 04A6                   i2l6591 026C                   i2l6639 0436  
                 i2l6575 01D6                   i2l6583 0246                   i2l5857 39BA  
                 i2l5849 39B2                   i2l5873 3A0E                   i2l5945 3DA6  
                 i2l5937 3D84                   i2l7297 1BE2                   i2l6913 0ED2  
                 i2l6841 0C78                   i2l6825 0BF0                   i2l6753 08F0  
                 i2l6745 08BC                   i2l6737 088C                   i2l6681 062C  
                 i2l6673 05CA                   i2l6657 0510                   i2l6577 01E6  
                 i2l6921 0F7C                   i2l5963 3DDE                   i2l5955 3DC6  
                 i2l5947 3DAA                   i2l5971 41CE                   i2l7299 1EE6  
                 i2l5795 3E94                   i2l6907 0EA8                   i2l6835 0C54  
                 i2l6819 0BB6                   i2l6587 025C                   i2l6923 0FA0  
                 i2l5891 34CC                   i2l5869 3A0A                   i2l5973 41DA  
                 i2l5797 3EA0                   i2l6685 0654                   i2l6589 0264  
                 i2l5885 3494                   i2l5959 3DD0                   i2l5975 41DE  
                 i2l5799 3EA4                   i2l6919 0F66                   i2l6863 0D3A  
                 i2l6855 0CD2                   i2l6783 09F6                   i2l6767 094A  
                 i2l6775 09C8                   i2l6759 090E                   i2l6599 02B8  
                 i2l6951 11F4                   i2l6943 108E                   i2l5985 4290  
                 i2l6881 0E02                   i2l6777 09D8                   i2l6697 06E4  
                 i2l6689 068C                   i2l6961 12FA                   i2l6953 1236  
                 i2l6945 10DE                   i2l6937 0FC2                   i2l5979 4202  
                 i2l5987 429C                   i2l6891 0E48                   i2l6883 0E10  
                 i2l6875 0DB2                   i2l6859 0CFE                   i2l6963 13AA  
                 i2l6947 118E                   i2l6939 1028                   i2l6877 0DC0  
                 i2l6869 0D6C                   i2l6797 0A68                   i2l6789 0A30  
                 i2l6981 153E                   i2l6973 1494                   i2l6957 1278  
                 i2l6975 14BA                   i2l6967 1410                   i2l6959 12AA  
                 i2l6977 14FC                   i2l6969 1452                   i2l6985 1552  
                 i2l6899 0E74         __end_of___lwtoft 46F4         daysOfMonth@month 0008  
                 _TMR0IE 007F95                   _TMR0IF 007F92                   _TMR1IE 007CE8  
                 _TMR1IF 007CF0                   _TMR0ON 007EAF                   _TMR1ON 007E68  
       __end_of_checkDST 3236                   _TRISA1 007C91                   _TRISA2 007C92  
                 _TRISA3 007C93                   _TRISA4 007C94                   _TRISA5 007C95  
                 i2_log2 442E                   i2_wait 47CE             _checkDST$422 0036  
          dayOfWeek@year 001F         __end_of__powers_ 7F83         __end_of_lcd_font 7EE5  
       __end_of_high_isr 2F68                   ___ftge 3CC8                   ___wmul 4628  
              ??___awdiv 000E                ??___ftadd 0045                ??___awmod 0005  
              ??___ftdiv 000F                ??___ftneg 0004                ??___lldiv 0009  
              ??___ftmul 0034                ??___llmod 001C                ??___ftsub 0053  
              ??___fttol 0023                ??___lwmod 0005         __end_of_loadTime 4806  
       __end_of_initTemp 442E                   _fround 239C                   clear_0 44C4  
                 clear_1 44D0         ___awdiv@quotient 0015          ___awmod@divisor 0003  
                 _screen 012B                   _lowbit 40E0          ___awmod@counter 0008  
                 hibit@x 0001                ??_getTemp 0056                   _update 15AC  
                 _rotate 3C36    ___ftmul@f3_as_product 003A                ??_initRTC 0109  
              ??_isdigit 0002                ??_buttons 001F             countBits@ret 0005  
           countBits@num 0001         __end_of_printRTC 15AC                   spi@cnt 010D  
           __mediumconst 7EBA                ??_setTest 0101                   tblptrh 000FF7  
                 tblptrl 000FF6                   tblptru 000FF8                ??_sprintf 0058  
     __size_of___asftadd 003C       __size_of___asftmul 003C       __size_of___asftsub 003C  
             __accesstop 0060  __end_of__initialization 44F6          __CFG_PBADEN$OFF 000000  
            i2wait@count 0001               ___ftadd@f1 003F               ___ftadd@f2 0042  
             ___ftge@ff1 0001               ___ftge@ff2 0004               ___ftdiv@f1 0009  
             ___ftdiv@f2 000C               ___ftdiv@f3 0015               ___ftneg@f1 0001  
             ___ftmul@f1 002E               ___ftmul@f2 0031            __end_ofi2_spi 3B9C  
             ___ftsub@f1 004D               ___ftsub@f2 0050               ___fttol@f1 001F  
         __pcstackCOMRAM 0001             __pidataBANK0 47EC       __size_of_dayOfWeek 01E0  
             ___lltoft@c 0009            __end_of_hibit 4286            __end_of_pow10 7F35  
          __end_of_scale 239C            __end_of_setup 46C8               ___lwtoft@c 0009  
            i2update@cnt 001E          printTemp@digits 005E               __div_to_l_ 3566  
            i2rotate@cnt 0006              i2rotate@seg 0001    __size_ofi2_writeDigit 004E  
            i2rotate@ret 0005                  ??i2_spi 0009                ?i2_update 0001  
              ?i2_rotate 0001                  ??_hibit 0005          __div_to_l_@exp1 000D  
        __div_to_l_@cntr 000C             sprintf@integ 0077                  ??_scale 0042  
        __div_to_l_@quot 0008             sprintf@width 0083                  ??_setup 010A  
             __pbssBANK0 00B7               __pbssBANK1 0122       __size_of_countBits 0028  
                ?i2_log2 000C                  ?i2_wait 0001            __div_to_l_@f1 0001  
          __div_to_l_@f2 0004                  ?___ftge 0001                  ?___wmul 0017  
           i2_writeDigit 4394        __end_of___asftadd 45B4                  ?_fround 003F  
      __end_of___asftmul 4578        __end_of___asftsub 453C                ?___ftpack 0001  
                ?_lowbit 0001                ?___lltoft 0009                  ?_update 0001  
                ?_rotate 0100          i2writeDigit@dig 0017          i2writeDigit@cnt 0018  
              ?___lwtoft 0009                ?_checkDST 0001             ?_writeString 0022  
     __size_of_printTemp 009A               ??i2_update 0019               ??i2_rotate 0002  
     __size_of_startDisp 00A2        __end_of_dayOfWeek 2BEE                ?_high_isr 0001  
              ?_loadTime 0001                ?_initTemp 0001       __size_of_writeChar 003A  
        __size_ofi2_log2 004A          __size_ofi2_wait 001E        __end_of__npowers_ 7F5C  
                __Hparam 0000           dayOfWeek@month 0020               _scale$1396 0048  
                __Lparam 0000                ?_printRTC 005E          __size_of___ftge 0090  
                ___awdiv 3D58                  ___ftadd 2BEE                  ___awmod 3F72  
                ___ftdiv 3468                  ___ftneg 4746                  ___lldiv 3E6E  
        __size_of___wmul 003A                  ___ftmul 3358                  ___llmod 41B8  
                ___ftsub 4662                  ___fttol 374A                  ___lwmod 4478  
      i2writeDigit@digit 0014        __end_of_countBits 4746                  __pcinit 44BE  
             ??___ftpack 0006          __size_of_fround 0280                  __ramtop 0800  
             ??___lltoft 000D          __size_of_lowbit 006E                  _getTemp 282A  
                __ptext0 4068                  __ptext1 15AC                  __ptext2 3DE8  
                __ptext3 3C36                  __ptext4 414E                  __ptext5 365A  
                __ptext6 46F4                  __ptext7 4698                  __ptext8 45B4  
                __ptext9 43E2          __size_of_update 0518          __size_of_rotate 0092  
             ??___lwtoft 000C   __size_of_setBrightness 0020              ?__div_to_l_ 0001  
                _initRTC 3FEE                  _dpowers 7EE5               ??_checkDST 002E  
                _isdigit 476C                  _buttons 4346             __size_of_spi 00F0  
       ___awmod@dividend 0001                  _setTest 47B0                  _rtcMenu 013D  
                log2@num 0100                  main@cnt 011E                  _sprintf 001C  
             ??_high_isr 00A7           __pintcode_body 2DBA     end_of_initialization 44F6  
             ??_loadTime 0100            _tmr0BigCounts 00D5               ??_initTemp 0100  
          __Lmediumconst 7EBA                  int_func 2DBA             writeChar@dig 0021  
                tick@val 000D                  spi@addr 0106                  spi@data 0107  
        ___lldiv@divisor 0005                  lowbit@x 0001                  spi@send 010B  
        ___lldiv@counter 0013        __end_of_printTemp 3C36            ??_daysOfMonth 000B  
             ??_printRTC 009A                  postdec1 000FE5                  postdec2 000FDD  
                postinc0 000FEE                  postinc1 000FE6                  postinc2 000FDE  
          ?_setupButtons 0001        __end_of_startDisp 3AFE           __tdiv_to_l_@f1 0001  
         __tdiv_to_l_@f2 0004            ??_getFontChar 0002            ??__tdiv_to_l_ 0007  
             getTemp@cnt 006F        __end_of_writeChar 4628              printRTC@str 009C  
           writeString@i 002A              ___ftdiv@exp 0018            _setBrightness 4790  
    __size_of__div_to_l_ 00F4           __end_ofi2_log2 4478           __end_ofi2_wait 47EC  
            ___ftmul@exp 0039           ??_setupButtons 0100                i2log2@num 000C  
      writeString@digits 0022               _writeDigit 3DE8               _writeFloat 3EF4  
         __end_of___ftge 3D58           __end_of___wmul 4662        writeString@string 0023  
         __end_of_fround 261C      __end_of_daysOfMonth 3A5C           __end_of_lowbit 414E  
         __end_of_update 1AC4           __end_of_rotate 3CC8                i2spi@addr 0007  
              i2spi@data 0008      start_initialization 44BE            lowbit@log2Val 0008  
              i2spi@send 000C      __end_of_getFontChar 282A      __end_of__tdiv_to_l_ 3358  
            __end_of_spi 374A     __size_of_writeString 01A6            i2log2@log2Val 0010  
      __size_ofi2_update 0488        __size_ofi2_rotate 005C           ?_setBrightness 0100  
        ___llmod@divisor 0018                 ??i2_log2 0010          ___llmod@counter 001E  
               ??i2_wait 0005          daysOfMonth@year 0009             dayOfWeek@day 0021  
           dayOfWeek@tmp 002A                 ??___ftge 0007                 ??___wmul 001B  
          sprintf@vd_753 0075              __pdataBANK0 00DD                 ??_fround 0042  
               ??_lowbit 0005                 ??_update 0113                 ??_rotate 0101  
             fround@prec 003F        __size_of___ftpack 00B8                ___asftadd 4578  
              ___asftmul 453C                ___asftsub 4500         writeFloat@digits 008C  
      __size_of___lltoft 0064        __size_of___lwtoft 002C            __pcstackBANK0 0060  
          __pcstackBANK1 0100        __size_of_checkDST 0128      __end_of__stringdata 7FFE  
           _isdigit$1026 0003        __size_of_high_isr 2F60              sprintf@_val 0088  
            sprintf@flag 007E              sprintf@fval 0080              sprintf@prec 0085  
              _dayOfWeek 2A0E                __pnvBANK0 00F4                __pnvBANK1 013D  
      __size_of_loadTime 0002        __size_of_initTemp 004C                __pintcode 0008  
          __pmediumconst 7EBA              _daysOfMonth 39B0                 ?___awdiv 000A  
               ?___ftadd 003F                 ?___awmod 0001                 ?___ftdiv 0009  
               ?___ftneg 0001              ?_writeDigit 010E                 ?___lldiv 0001  
               ?___ftmul 002E                 ?___llmod 0014                 ?___ftsub 004D  
              __npowers_ 7F35                 ?___fttol 001F              ?_writeFloat 008C  
               ?___lwmod 0001      getTemp@oldTempsTemp 0060        __size_of_printRTC 05FE  
            _getFontChar 261C              __tdiv_to_l_ 3236                 ?_getTemp 0053  
           ??__div_to_l_ 0007                 ?_initRTC 0001               ?___asftadd 004E  
              _countBits 471E                 ?_isdigit 0001                 ?_buttons 0001  
             ?___asftmul 003F               ?___asftsub 0053          _rtc_small_ticks 00DB  
         __size_ofi2_spi 009E                 ?_setTest 0100     __end_of_setupButtons 45EE  
         __size_of_hibit 0064                 ?_sprintf 0060         i2writeDigit@segs 0015  
         __size_of_scale 0450          ??_setBrightness 0101           __size_of_setup 0030  
         ___wmul@product 001D               ?_dayOfWeek 001F            getFontChar@ch 0001  
            writeChar@ch 0020                 i2u311_44 4136                 i2u311_45 4130  
               i2u330_40 3626                 i2u323_40 3324                 i2u316_40 3254  
               i2u404_40 2C0C                 i2u308_44 426E                 i2u316_45 324C  
               i2u404_45 2C04                 i2u308_45 4268                 i2u405_40 2C32  
               i2u405_45 2C2A                 i2u318_40 3280                 i2u430_40 37E0  
               i2u318_45 3278                 i2u425_40 3768                 i2u425_45 3760  
     __end_of__div_to_l_ 365A                 i2u427_40 3794                 i2u363_40 3486  
               i2u435_44 1AEE                 i2u451_44 3090                 i2u435_45 1AEA  
               i2u427_45 378C                 i2u451_45 308A                 i2u363_45 347E  
               i2u460_40 31F0                 i2u436_40 1B88                 i2u540_40 2DF8  
               i2u540_41 2DF6                 i2u356_44 4326                 i2u452_44 30B8  
               i2u380_45 3B48                 i2u356_45 4322                 i2u452_45 30B4  
               i2u460_46 31F2                 i2u380_46 3B4E                 i2u436_46 1B8A  
               i2u453_40 30FE                 i2u365_40 34B2                 i2u541_40 2E20  
               i2u541_41 2E1E                 i2u357_44 4336                 i2u437_44 1BA6  
               i2u445_44 2FC2                 i2u357_45 4332                 i2u437_45 1BA0  
               i2u445_45 2FBE                 i2u365_45 34AA                 i2u453_47 30F8  
               i2u366_40 34BE                 i2u438_44 1F2A                 i2u438_45 1F24  
               i2u447_40 3008                 i2u543_40 2E94                 i2u542_48 2E72  
               i2u543_41 2E92                 i2u542_49 2E86                 i2u447_47 3002  
               i2u544_40 2E9C                 i2u544_41 2E9A                 i2u449_40 304C  
               i2u545_40 2ED4                 i2u537_41 3EFE                 i2u545_41 2ED2  
               i2u449_47 3046                 i2u386_40 3376                 i2u546_40 2F26  
               i2u538_41 0FB8                 i2u546_41 2F22                 i2u386_45 336E  
               i2u546_45 2F1C                 i2u483_40 03CA                 i2u539_40 2DF0  
               i2u539_41 2DEE                 i2u379_44 3B3C                 i2u379_45 3B36  
               i2u547_45 2F28                 i2u483_47 03C0                 i2u388_40 33A2  
               i2u388_45 339A                 i2u389_40 33AE                 i2u477_40 02F8  
               i2u477_47 02F2                 i2u487_45 04E8                 i2u489_40 0560  
               i2u489_45 0556          writeDigit@digit 010E                _printTemp 3B9C  
              _startDisp 3A5C              __stringdata 7F83        ___wmul@multiplier 0017  
             ?_countBits 0001             setTest@state 0100                 i2_update 1AC4  
               i2_rotate 42EA                _writeChar 45EE                copy_data0 44EA  
    __size_of_writeDigit 0086      __size_of_writeFloat 007E                 i2spi@cnt 000E  
         _printTemp$1393 009A          writeFloat@F5025 00CC                 __Hrparam 0000  
               __Lrparam 0000          loadTime@newDate 0100               ?_printTemp 005E  
       __size_of___awdiv 0090         __size_of___ftadd 01CC         __size_of___awmod 007C  
       __size_of___ftdiv 00FE         __size_of___ftneg 0026         __size_of___lldiv 0086  
       __size_of___ftmul 0110         __size_of___llmod 006A         __size_of___ftsub 0036  
       __size_of___fttol 00E0         __size_of___lwmod 0046                 ___ftpack 38F8  
            _fround$1394 004B              _fround$1395 0048                 ___lltoft 4286  
             ?_startDisp 0001                 ___lwtoft 46C8         __size_of_getTemp 01E4  
            ??___asftadd 0053                 _checkDST 310E               sprintf@exp 007C  
            ??___asftmul 0044              ??___asftsub 0058            _printRTC$1392 00A5  
       __size_of_initRTC 007A         __size_of_isdigit 0024         __size_of_buttons 004E  
         writeChar@digit 001F         __size_of_setTest 001E               ?_writeChar 001F  
               __ptext10 3FEE                 __ptext11 4804                 __ptext20 46C8  
               __ptext12 3A5C                 __ptext21 3468                 __ptext13 47B0  
               __ptext30 3E6E                 __ptext22 3EF4                 __ptext14 4790  
               __ptext31 374A                 __ptext23 2F68                 __ptext40 3566  
               __ptext32 4746                 __ptext24 4222                 __ptext16 0FAE  
               __ptext41 3236                 __ptext33 3CC8                 __ptext25 471E  
               __ptext17 3B9C                 __ptext50 442E                 __ptext42 476C  
               __ptext34 4500                 __ptext26 45EE                 __ptext18 40E0  
               __ptext51 42EA                 __ptext43 1F4C                 __ptext35 4662  
               __ptext27 261C                 __ptext19 282A                 __ptext60 382A  
               __ptext52 3AFE                 __ptext44 4628                 __ptext36 453C  
               __ptext28 001C                 __ptext61 39B0                 __ptext53 47CE  
               __ptext45 3358                 __ptext37 4578                 __ptext29 4286  
               __ptext62 0000                 __ptext54 4478                 __ptext46 239C  
               __ptext38 2BEE                 __ptext55 41B8                 __ptext47 4346  
               __ptext39 38F8                 __ptext56 3F72                 __ptext48 1AC4  
               __ptext57 3D58                 __ptext49 4394                 __ptext58 2A0E  
               __ptext59 310E                 __powers_ 7F5C                 _lcd_font 7EBA  
               _high_isr 0008         __size_of_sprintf 0F92            _rtc_big_ticks 00D9  
               _loadTime 4804                 _initTemp 43E2                wait@count 0100  
          __size_of_log2 006A            __size_of_main 0078              ??_dayOfWeek 0022  
               _oldTemps 00B7            __size_of_tick 00CE            __size_of_wait 002A  
               _tempMenu 0138                 _printRTC 0FAE           writeDigit@segs 010F  
          ?i2_writeDigit 0014                 main@argc 0119                 main@argv 011B  
  __CFG_CPUDIV$OSC3_PLL4 000000                update@cnt 0118    __size_of_setupButtons 003A  
            ??_countBits 0005                rotate@cnt 0105            ??_writeString 0025  
              rotate@seg 0100                rotate@ret 0104                 isdigit@c 0001  
               scale@scl 003F           writeFloat@bits 0099                 intlevel2 0000  
              sprintf@ap 007A         __tdiv_to_l_@exp1 0011                sprintf@vd 0073  
       __tdiv_to_l_@cntr 0010                sprintf@sp 0060         __tdiv_to_l_@quot 000C  
       ___lwmod@dividend 0001         ___lldiv@dividend 0001            writeDigit@dig 0111  
          writeDigit@cnt 0112           writeLong@F5021 00EB           printRTC@digits 005E  
           getTemp@total 006C             ?_daysOfMonth 0008           ??i2_writeDigit 0016  
           ??_writeDigit 0110             ??_writeFloat 005E             _setupButtons 45B4  
            ??_printTemp 005F            printRTC@F5073 00C3             ?_getFontChar 0001  
    setBrightness@bright 0100             ?__tdiv_to_l_ 0001              ??_startDisp 0101  
          writeFloat@num 008D            writeFloat@str 0090                 sprintf@c 0087  
               sprintf@f 0062         ___lldiv@quotient 000F          ___lwmod@divisor 0003  
        ___lwmod@counter 0007              getTemp@temp 0069              ??_writeChar 0021  
            log2@log2Val 0104      __end_of_writeString 310E       __end_of_writeDigit 3E6E  
     __end_of_writeFloat 3F72             hibit@log2Val 0008  
